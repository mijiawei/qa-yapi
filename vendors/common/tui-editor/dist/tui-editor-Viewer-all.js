/*!
 * tui-editor
 * @version 1.2.6
 * @author NHN Ent. FE Development Lab <dl_javascript@nhnent.com> (https://nhnent.github.io/tui.editor/)
 * @license MIT
 */
(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["Editor"] = factory();
	else
		root["tui"] = root["tui"] || {}, root["tui"]["Editor"] = factory();
})(typeof self !== 'undefined' ? self : this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "dist/";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 41);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Utilities
//



function _class(obj) { return Object.prototype.toString.call(obj); }

function isString(obj) { return _class(obj) === '[object String]'; }

var _hasOwnProperty = Object.prototype.hasOwnProperty;

function has(object, key) {
  return _hasOwnProperty.call(object, key);
}

// Merge objects
//
function assign(obj /*from1, from2, from3, ...*/) {
  var sources = Array.prototype.slice.call(arguments, 1);

  sources.forEach(function (source) {
    if (!source) { return; }

    if (typeof source !== 'object') {
      throw new TypeError(source + 'must be object');
    }

    Object.keys(source).forEach(function (key) {
      obj[key] = source[key];
    });
  });

  return obj;
}

// Remove element from array and put another array at those position.
// Useful for some operations with tokens
function arrayReplaceAt(src, pos, newElements) {
  return [].concat(src.slice(0, pos), newElements, src.slice(pos + 1));
}

////////////////////////////////////////////////////////////////////////////////

function isValidEntityCode(c) {
  /*eslint no-bitwise:0*/
  // broken sequence
  if (c >= 0xD800 && c <= 0xDFFF) { return false; }
  // never used
  if (c >= 0xFDD0 && c <= 0xFDEF) { return false; }
  if ((c & 0xFFFF) === 0xFFFF || (c & 0xFFFF) === 0xFFFE) { return false; }
  // control codes
  if (c >= 0x00 && c <= 0x08) { return false; }
  if (c === 0x0B) { return false; }
  if (c >= 0x0E && c <= 0x1F) { return false; }
  if (c >= 0x7F && c <= 0x9F) { return false; }
  // out of range
  if (c > 0x10FFFF) { return false; }
  return true;
}

function fromCodePoint(c) {
  /*eslint no-bitwise:0*/
  if (c > 0xffff) {
    c -= 0x10000;
    var surrogate1 = 0xd800 + (c >> 10),
        surrogate2 = 0xdc00 + (c & 0x3ff);

    return String.fromCharCode(surrogate1, surrogate2);
  }
  return String.fromCharCode(c);
}


var UNESCAPE_MD_RE  = /\\([!"#$%&'()*+,\-.\/:;<=>?@[\\\]^_`{|}~])/g;
var ENTITY_RE       = /&([a-z#][a-z0-9]{1,31});/gi;
var UNESCAPE_ALL_RE = new RegExp(UNESCAPE_MD_RE.source + '|' + ENTITY_RE.source, 'gi');

var DIGITAL_ENTITY_TEST_RE = /^#((?:x[a-f0-9]{1,8}|[0-9]{1,8}))/i;

var entities = __webpack_require__(22);

function replaceEntityPattern(match, name) {
  var code = 0;

  if (has(entities, name)) {
    return entities[name];
  }

  if (name.charCodeAt(0) === 0x23/* # */ && DIGITAL_ENTITY_TEST_RE.test(name)) {
    code = name[1].toLowerCase() === 'x' ?
      parseInt(name.slice(2), 16)
    :
      parseInt(name.slice(1), 10);
    if (isValidEntityCode(code)) {
      return fromCodePoint(code);
    }
  }

  return match;
}

/*function replaceEntities(str) {
  if (str.indexOf('&') < 0) { return str; }

  return str.replace(ENTITY_RE, replaceEntityPattern);
}*/

function unescapeMd(str) {
  if (str.indexOf('\\') < 0) { return str; }
  return str.replace(UNESCAPE_MD_RE, '$1');
}

function unescapeAll(str) {
  if (str.indexOf('\\') < 0 && str.indexOf('&') < 0) { return str; }

  return str.replace(UNESCAPE_ALL_RE, function (match, escaped, entity) {
    if (escaped) { return escaped; }
    return replaceEntityPattern(match, entity);
  });
}

////////////////////////////////////////////////////////////////////////////////

var HTML_ESCAPE_TEST_RE = /[&<>"]/;
var HTML_ESCAPE_REPLACE_RE = /[&<>"]/g;
var HTML_REPLACEMENTS = {
  '&': '&amp;',
  '<': '&lt;',
  '>': '&gt;',
  '"': '&quot;'
};

function replaceUnsafeChar(ch) {
  return HTML_REPLACEMENTS[ch];
}

function escapeHtml(str) {
  if (HTML_ESCAPE_TEST_RE.test(str)) {
    return str.replace(HTML_ESCAPE_REPLACE_RE, replaceUnsafeChar);
  }
  return str;
}

////////////////////////////////////////////////////////////////////////////////

var REGEXP_ESCAPE_RE = /[.?*+^$[\]\\(){}|-]/g;

function escapeRE(str) {
  return str.replace(REGEXP_ESCAPE_RE, '\\$&');
}

////////////////////////////////////////////////////////////////////////////////

function isSpace(code) {
  switch (code) {
    case 0x09:
    case 0x20:
      return true;
  }
  return false;
}

// Zs (unicode class) || [\t\f\v\r\n]
function isWhiteSpace(code) {
  if (code >= 0x2000 && code <= 0x200A) { return true; }
  switch (code) {
    case 0x09: // \t
    case 0x0A: // \n
    case 0x0B: // \v
    case 0x0C: // \f
    case 0x0D: // \r
    case 0x20:
    case 0xA0:
    case 0x1680:
    case 0x202F:
    case 0x205F:
    case 0x3000:
      return true;
  }
  return false;
}

////////////////////////////////////////////////////////////////////////////////

/*eslint-disable max-len*/
var UNICODE_PUNCT_RE = __webpack_require__(15);

// Currently without astral characters support.
function isPunctChar(ch) {
  return UNICODE_PUNCT_RE.test(ch);
}


// Markdown ASCII punctuation characters.
//
// !, ", #, $, %, &, ', (, ), *, +, ,, -, ., /, :, ;, <, =, >, ?, @, [, \, ], ^, _, `, {, |, }, or ~
// http://spec.commonmark.org/0.15/#ascii-punctuation-character
//
// Don't confuse with unicode punctuation !!! It lacks some chars in ascii range.
//
function isMdAsciiPunct(ch) {
  switch (ch) {
    case 0x21/* ! */:
    case 0x22/* " */:
    case 0x23/* # */:
    case 0x24/* $ */:
    case 0x25/* % */:
    case 0x26/* & */:
    case 0x27/* ' */:
    case 0x28/* ( */:
    case 0x29/* ) */:
    case 0x2A/* * */:
    case 0x2B/* + */:
    case 0x2C/* , */:
    case 0x2D/* - */:
    case 0x2E/* . */:
    case 0x2F/* / */:
    case 0x3A/* : */:
    case 0x3B/* ; */:
    case 0x3C/* < */:
    case 0x3D/* = */:
    case 0x3E/* > */:
    case 0x3F/* ? */:
    case 0x40/* @ */:
    case 0x5B/* [ */:
    case 0x5C/* \ */:
    case 0x5D/* ] */:
    case 0x5E/* ^ */:
    case 0x5F/* _ */:
    case 0x60/* ` */:
    case 0x7B/* { */:
    case 0x7C/* | */:
    case 0x7D/* } */:
    case 0x7E/* ~ */:
      return true;
    default:
      return false;
  }
}

// Hepler to unify [reference labels].
//
function normalizeReference(str) {
  // use .toUpperCase() instead of .toLowerCase()
  // here to avoid a conflict with Object.prototype
  // members (most notably, `__proto__`)
  return str.trim().replace(/\s+/g, ' ').toUpperCase();
}

////////////////////////////////////////////////////////////////////////////////

// Re-export libraries commonly used in both markdown-it and its plugins,
// so plugins won't have to depend on them explicitly, which reduces their
// bundled size (e.g. a browser build).
//
exports.lib                 = {};
exports.lib.mdurl           = __webpack_require__(23);
exports.lib.ucmicro         = __webpack_require__(61);

exports.assign              = assign;
exports.isString            = isString;
exports.has                 = has;
exports.unescapeMd          = unescapeMd;
exports.unescapeAll         = unescapeAll;
exports.isValidEntityCode   = isValidEntityCode;
exports.fromCodePoint       = fromCodePoint;
// exports.replaceEntities     = replaceEntities;
exports.escapeHtml          = escapeHtml;
exports.arrayReplaceAt      = arrayReplaceAt;
exports.isSpace             = isSpace;
exports.isWhiteSpace        = isWhiteSpace;
exports.isMdAsciiPunct      = isMdAsciiPunct;
exports.isPunctChar         = isPunctChar;
exports.escapeRE            = escapeRE;
exports.normalizeReference  = normalizeReference;


/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
 * jQuery JavaScript Library v3.3.1
 * https://jquery.com/
 *
 * Includes Sizzle.js
 * https://sizzlejs.com/
 *
 * Copyright JS Foundation and other contributors
 * Released under the MIT license
 * https://jquery.org/license
 *
 * Date: 2018-01-20T17:24Z
 */
( function( global, factory ) {

	"use strict";

	if ( typeof module === "object" && typeof module.exports === "object" ) {

		// For CommonJS and CommonJS-like environments where a proper `window`
		// is present, execute the factory and get jQuery.
		// For environments that do not have a `window` with a `document`
		// (such as Node.js), expose a factory as module.exports.
		// This accentuates the need for the creation of a real `window`.
		// e.g. var jQuery = require("jquery")(window);
		// See ticket #14549 for more info.
		module.exports = global.document ?
			factory( global, true ) :
			function( w ) {
				if ( !w.document ) {
					throw new Error( "jQuery requires a window with a document" );
				}
				return factory( w );
			};
	} else {
		factory( global );
	}

// Pass this if window is not defined yet
} )( typeof window !== "undefined" ? window : this, function( window, noGlobal ) {

// Edge <= 12 - 13+, Firefox <=18 - 45+, IE 10 - 11, Safari 5.1 - 9+, iOS 6 - 9.1
// throw exceptions when non-strict code (e.g., ASP.NET 4.5) accesses strict mode
// arguments.callee.caller (trac-13335). But as of jQuery 3.0 (2016), strict mode should be common
// enough that all such attempts are guarded in a try block.
"use strict";

var arr = [];

var document = window.document;

var getProto = Object.getPrototypeOf;

var slice = arr.slice;

var concat = arr.concat;

var push = arr.push;

var indexOf = arr.indexOf;

var class2type = {};

var toString = class2type.toString;

var hasOwn = class2type.hasOwnProperty;

var fnToString = hasOwn.toString;

var ObjectFunctionString = fnToString.call( Object );

var support = {};

var isFunction = function isFunction( obj ) {

      // Support: Chrome <=57, Firefox <=52
      // In some browsers, typeof returns "function" for HTML <object> elements
      // (i.e., `typeof document.createElement( "object" ) === "function"`).
      // We don't want to classify *any* DOM node as a function.
      return typeof obj === "function" && typeof obj.nodeType !== "number";
  };


var isWindow = function isWindow( obj ) {
		return obj != null && obj === obj.window;
	};




	var preservedScriptAttributes = {
		type: true,
		src: true,
		noModule: true
	};

	function DOMEval( code, doc, node ) {
		doc = doc || document;

		var i,
			script = doc.createElement( "script" );

		script.text = code;
		if ( node ) {
			for ( i in preservedScriptAttributes ) {
				if ( node[ i ] ) {
					script[ i ] = node[ i ];
				}
			}
		}
		doc.head.appendChild( script ).parentNode.removeChild( script );
	}


function toType( obj ) {
	if ( obj == null ) {
		return obj + "";
	}

	// Support: Android <=2.3 only (functionish RegExp)
	return typeof obj === "object" || typeof obj === "function" ?
		class2type[ toString.call( obj ) ] || "object" :
		typeof obj;
}
/* global Symbol */
// Defining this global in .eslintrc.json would create a danger of using the global
// unguarded in another place, it seems safer to define global only for this module



var
	version = "3.3.1",

	// Define a local copy of jQuery
	jQuery = function( selector, context ) {

		// The jQuery object is actually just the init constructor 'enhanced'
		// Need init if jQuery is called (just allow error to be thrown if not included)
		return new jQuery.fn.init( selector, context );
	},

	// Support: Android <=4.0 only
	// Make sure we trim BOM and NBSP
	rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;

jQuery.fn = jQuery.prototype = {

	// The current version of jQuery being used
	jquery: version,

	constructor: jQuery,

	// The default length of a jQuery object is 0
	length: 0,

	toArray: function() {
		return slice.call( this );
	},

	// Get the Nth element in the matched element set OR
	// Get the whole matched element set as a clean array
	get: function( num ) {

		// Return all the elements in a clean array
		if ( num == null ) {
			return slice.call( this );
		}

		// Return just the one element from the set
		return num < 0 ? this[ num + this.length ] : this[ num ];
	},

	// Take an array of elements and push it onto the stack
	// (returning the new matched element set)
	pushStack: function( elems ) {

		// Build a new jQuery matched element set
		var ret = jQuery.merge( this.constructor(), elems );

		// Add the old object onto the stack (as a reference)
		ret.prevObject = this;

		// Return the newly-formed element set
		return ret;
	},

	// Execute a callback for every element in the matched set.
	each: function( callback ) {
		return jQuery.each( this, callback );
	},

	map: function( callback ) {
		return this.pushStack( jQuery.map( this, function( elem, i ) {
			return callback.call( elem, i, elem );
		} ) );
	},

	slice: function() {
		return this.pushStack( slice.apply( this, arguments ) );
	},

	first: function() {
		return this.eq( 0 );
	},

	last: function() {
		return this.eq( -1 );
	},

	eq: function( i ) {
		var len = this.length,
			j = +i + ( i < 0 ? len : 0 );
		return this.pushStack( j >= 0 && j < len ? [ this[ j ] ] : [] );
	},

	end: function() {
		return this.prevObject || this.constructor();
	},

	// For internal use only.
	// Behaves like an Array's method, not like a jQuery method.
	push: push,
	sort: arr.sort,
	splice: arr.splice
};

jQuery.extend = jQuery.fn.extend = function() {
	var options, name, src, copy, copyIsArray, clone,
		target = arguments[ 0 ] || {},
		i = 1,
		length = arguments.length,
		deep = false;

	// Handle a deep copy situation
	if ( typeof target === "boolean" ) {
		deep = target;

		// Skip the boolean and the target
		target = arguments[ i ] || {};
		i++;
	}

	// Handle case when target is a string or something (possible in deep copy)
	if ( typeof target !== "object" && !isFunction( target ) ) {
		target = {};
	}

	// Extend jQuery itself if only one argument is passed
	if ( i === length ) {
		target = this;
		i--;
	}

	for ( ; i < length; i++ ) {

		// Only deal with non-null/undefined values
		if ( ( options = arguments[ i ] ) != null ) {

			// Extend the base object
			for ( name in options ) {
				src = target[ name ];
				copy = options[ name ];

				// Prevent never-ending loop
				if ( target === copy ) {
					continue;
				}

				// Recurse if we're merging plain objects or arrays
				if ( deep && copy && ( jQuery.isPlainObject( copy ) ||
					( copyIsArray = Array.isArray( copy ) ) ) ) {

					if ( copyIsArray ) {
						copyIsArray = false;
						clone = src && Array.isArray( src ) ? src : [];

					} else {
						clone = src && jQuery.isPlainObject( src ) ? src : {};
					}

					// Never move original objects, clone them
					target[ name ] = jQuery.extend( deep, clone, copy );

				// Don't bring in undefined values
				} else if ( copy !== undefined ) {
					target[ name ] = copy;
				}
			}
		}
	}

	// Return the modified object
	return target;
};

jQuery.extend( {

	// Unique for each copy of jQuery on the page
	expando: "jQuery" + ( version + Math.random() ).replace( /\D/g, "" ),

	// Assume jQuery is ready without the ready module
	isReady: true,

	error: function( msg ) {
		throw new Error( msg );
	},

	noop: function() {},

	isPlainObject: function( obj ) {
		var proto, Ctor;

		// Detect obvious negatives
		// Use toString instead of jQuery.type to catch host objects
		if ( !obj || toString.call( obj ) !== "[object Object]" ) {
			return false;
		}

		proto = getProto( obj );

		// Objects with no prototype (e.g., `Object.create( null )`) are plain
		if ( !proto ) {
			return true;
		}

		// Objects with prototype are plain iff they were constructed by a global Object function
		Ctor = hasOwn.call( proto, "constructor" ) && proto.constructor;
		return typeof Ctor === "function" && fnToString.call( Ctor ) === ObjectFunctionString;
	},

	isEmptyObject: function( obj ) {

		/* eslint-disable no-unused-vars */
		// See https://github.com/eslint/eslint/issues/6125
		var name;

		for ( name in obj ) {
			return false;
		}
		return true;
	},

	// Evaluates a script in a global context
	globalEval: function( code ) {
		DOMEval( code );
	},

	each: function( obj, callback ) {
		var length, i = 0;

		if ( isArrayLike( obj ) ) {
			length = obj.length;
			for ( ; i < length; i++ ) {
				if ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {
					break;
				}
			}
		} else {
			for ( i in obj ) {
				if ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {
					break;
				}
			}
		}

		return obj;
	},

	// Support: Android <=4.0 only
	trim: function( text ) {
		return text == null ?
			"" :
			( text + "" ).replace( rtrim, "" );
	},

	// results is for internal usage only
	makeArray: function( arr, results ) {
		var ret = results || [];

		if ( arr != null ) {
			if ( isArrayLike( Object( arr ) ) ) {
				jQuery.merge( ret,
					typeof arr === "string" ?
					[ arr ] : arr
				);
			} else {
				push.call( ret, arr );
			}
		}

		return ret;
	},

	inArray: function( elem, arr, i ) {
		return arr == null ? -1 : indexOf.call( arr, elem, i );
	},

	// Support: Android <=4.0 only, PhantomJS 1 only
	// push.apply(_, arraylike) throws on ancient WebKit
	merge: function( first, second ) {
		var len = +second.length,
			j = 0,
			i = first.length;

		for ( ; j < len; j++ ) {
			first[ i++ ] = second[ j ];
		}

		first.length = i;

		return first;
	},

	grep: function( elems, callback, invert ) {
		var callbackInverse,
			matches = [],
			i = 0,
			length = elems.length,
			callbackExpect = !invert;

		// Go through the array, only saving the items
		// that pass the validator function
		for ( ; i < length; i++ ) {
			callbackInverse = !callback( elems[ i ], i );
			if ( callbackInverse !== callbackExpect ) {
				matches.push( elems[ i ] );
			}
		}

		return matches;
	},

	// arg is for internal usage only
	map: function( elems, callback, arg ) {
		var length, value,
			i = 0,
			ret = [];

		// Go through the array, translating each of the items to their new values
		if ( isArrayLike( elems ) ) {
			length = elems.length;
			for ( ; i < length; i++ ) {
				value = callback( elems[ i ], i, arg );

				if ( value != null ) {
					ret.push( value );
				}
			}

		// Go through every key on the object,
		} else {
			for ( i in elems ) {
				value = callback( elems[ i ], i, arg );

				if ( value != null ) {
					ret.push( value );
				}
			}
		}

		// Flatten any nested arrays
		return concat.apply( [], ret );
	},

	// A global GUID counter for objects
	guid: 1,

	// jQuery.support is not used in Core but other projects attach their
	// properties to it so it needs to exist.
	support: support
} );

if ( typeof Symbol === "function" ) {
	jQuery.fn[ Symbol.iterator ] = arr[ Symbol.iterator ];
}

// Populate the class2type map
jQuery.each( "Boolean Number String Function Array Date RegExp Object Error Symbol".split( " " ),
function( i, name ) {
	class2type[ "[object " + name + "]" ] = name.toLowerCase();
} );

function isArrayLike( obj ) {

	// Support: real iOS 8.2 only (not reproducible in simulator)
	// `in` check used to prevent JIT error (gh-2145)
	// hasOwn isn't used here due to false negatives
	// regarding Nodelist length in IE
	var length = !!obj && "length" in obj && obj.length,
		type = toType( obj );

	if ( isFunction( obj ) || isWindow( obj ) ) {
		return false;
	}

	return type === "array" || length === 0 ||
		typeof length === "number" && length > 0 && ( length - 1 ) in obj;
}
var Sizzle =
/*!
 * Sizzle CSS Selector Engine v2.3.3
 * https://sizzlejs.com/
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license
 * http://jquery.org/license
 *
 * Date: 2016-08-08
 */
(function( window ) {

var i,
	support,
	Expr,
	getText,
	isXML,
	tokenize,
	compile,
	select,
	outermostContext,
	sortInput,
	hasDuplicate,

	// Local document vars
	setDocument,
	document,
	docElem,
	documentIsHTML,
	rbuggyQSA,
	rbuggyMatches,
	matches,
	contains,

	// Instance-specific data
	expando = "sizzle" + 1 * new Date(),
	preferredDoc = window.document,
	dirruns = 0,
	done = 0,
	classCache = createCache(),
	tokenCache = createCache(),
	compilerCache = createCache(),
	sortOrder = function( a, b ) {
		if ( a === b ) {
			hasDuplicate = true;
		}
		return 0;
	},

	// Instance methods
	hasOwn = ({}).hasOwnProperty,
	arr = [],
	pop = arr.pop,
	push_native = arr.push,
	push = arr.push,
	slice = arr.slice,
	// Use a stripped-down indexOf as it's faster than native
	// https://jsperf.com/thor-indexof-vs-for/5
	indexOf = function( list, elem ) {
		var i = 0,
			len = list.length;
		for ( ; i < len; i++ ) {
			if ( list[i] === elem ) {
				return i;
			}
		}
		return -1;
	},

	booleans = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",

	// Regular expressions

	// http://www.w3.org/TR/css3-selectors/#whitespace
	whitespace = "[\\x20\\t\\r\\n\\f]",

	// http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier
	identifier = "(?:\\\\.|[\\w-]|[^\0-\\xa0])+",

	// Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors
	attributes = "\\[" + whitespace + "*(" + identifier + ")(?:" + whitespace +
		// Operator (capture 2)
		"*([*^$|!~]?=)" + whitespace +
		// "Attribute values must be CSS identifiers [capture 5] or strings [capture 3 or capture 4]"
		"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" + identifier + "))|)" + whitespace +
		"*\\]",

	pseudos = ":(" + identifier + ")(?:\\((" +
		// To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:
		// 1. quoted (capture 3; capture 4 or capture 5)
		"('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|" +
		// 2. simple (capture 6)
		"((?:\\\\.|[^\\\\()[\\]]|" + attributes + ")*)|" +
		// 3. anything else (capture 2)
		".*" +
		")\\)|)",

	// Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter
	rwhitespace = new RegExp( whitespace + "+", "g" ),
	rtrim = new RegExp( "^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$", "g" ),

	rcomma = new RegExp( "^" + whitespace + "*," + whitespace + "*" ),
	rcombinators = new RegExp( "^" + whitespace + "*([>+~]|" + whitespace + ")" + whitespace + "*" ),

	rattributeQuotes = new RegExp( "=" + whitespace + "*([^\\]'\"]*?)" + whitespace + "*\\]", "g" ),

	rpseudo = new RegExp( pseudos ),
	ridentifier = new RegExp( "^" + identifier + "$" ),

	matchExpr = {
		"ID": new RegExp( "^#(" + identifier + ")" ),
		"CLASS": new RegExp( "^\\.(" + identifier + ")" ),
		"TAG": new RegExp( "^(" + identifier + "|[*])" ),
		"ATTR": new RegExp( "^" + attributes ),
		"PSEUDO": new RegExp( "^" + pseudos ),
		"CHILD": new RegExp( "^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + whitespace +
			"*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" + whitespace +
			"*(\\d+)|))" + whitespace + "*\\)|)", "i" ),
		"bool": new RegExp( "^(?:" + booleans + ")$", "i" ),
		// For use in libraries implementing .is()
		// We use this for POS matching in `select`
		"needsContext": new RegExp( "^" + whitespace + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" +
			whitespace + "*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i" )
	},

	rinputs = /^(?:input|select|textarea|button)$/i,
	rheader = /^h\d$/i,

	rnative = /^[^{]+\{\s*\[native \w/,

	// Easily-parseable/retrievable ID or TAG or CLASS selectors
	rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,

	rsibling = /[+~]/,

	// CSS escapes
	// http://www.w3.org/TR/CSS21/syndata.html#escaped-characters
	runescape = new RegExp( "\\\\([\\da-f]{1,6}" + whitespace + "?|(" + whitespace + ")|.)", "ig" ),
	funescape = function( _, escaped, escapedWhitespace ) {
		var high = "0x" + escaped - 0x10000;
		// NaN means non-codepoint
		// Support: Firefox<24
		// Workaround erroneous numeric interpretation of +"0x"
		return high !== high || escapedWhitespace ?
			escaped :
			high < 0 ?
				// BMP codepoint
				String.fromCharCode( high + 0x10000 ) :
				// Supplemental Plane codepoint (surrogate pair)
				String.fromCharCode( high >> 10 | 0xD800, high & 0x3FF | 0xDC00 );
	},

	// CSS string/identifier serialization
	// https://drafts.csswg.org/cssom/#common-serializing-idioms
	rcssescape = /([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,
	fcssescape = function( ch, asCodePoint ) {
		if ( asCodePoint ) {

			// U+0000 NULL becomes U+FFFD REPLACEMENT CHARACTER
			if ( ch === "\0" ) {
				return "\uFFFD";
			}

			// Control characters and (dependent upon position) numbers get escaped as code points
			return ch.slice( 0, -1 ) + "\\" + ch.charCodeAt( ch.length - 1 ).toString( 16 ) + " ";
		}

		// Other potentially-special ASCII characters get backslash-escaped
		return "\\" + ch;
	},

	// Used for iframes
	// See setDocument()
	// Removing the function wrapper causes a "Permission Denied"
	// error in IE
	unloadHandler = function() {
		setDocument();
	},

	disabledAncestor = addCombinator(
		function( elem ) {
			return elem.disabled === true && ("form" in elem || "label" in elem);
		},
		{ dir: "parentNode", next: "legend" }
	);

// Optimize for push.apply( _, NodeList )
try {
	push.apply(
		(arr = slice.call( preferredDoc.childNodes )),
		preferredDoc.childNodes
	);
	// Support: Android<4.0
	// Detect silently failing push.apply
	arr[ preferredDoc.childNodes.length ].nodeType;
} catch ( e ) {
	push = { apply: arr.length ?

		// Leverage slice if possible
		function( target, els ) {
			push_native.apply( target, slice.call(els) );
		} :

		// Support: IE<9
		// Otherwise append directly
		function( target, els ) {
			var j = target.length,
				i = 0;
			// Can't trust NodeList.length
			while ( (target[j++] = els[i++]) ) {}
			target.length = j - 1;
		}
	};
}

function Sizzle( selector, context, results, seed ) {
	var m, i, elem, nid, match, groups, newSelector,
		newContext = context && context.ownerDocument,

		// nodeType defaults to 9, since context defaults to document
		nodeType = context ? context.nodeType : 9;

	results = results || [];

	// Return early from calls with invalid selector or context
	if ( typeof selector !== "string" || !selector ||
		nodeType !== 1 && nodeType !== 9 && nodeType !== 11 ) {

		return results;
	}

	// Try to shortcut find operations (as opposed to filters) in HTML documents
	if ( !seed ) {

		if ( ( context ? context.ownerDocument || context : preferredDoc ) !== document ) {
			setDocument( context );
		}
		context = context || document;

		if ( documentIsHTML ) {

			// If the selector is sufficiently simple, try using a "get*By*" DOM method
			// (excepting DocumentFragment context, where the methods don't exist)
			if ( nodeType !== 11 && (match = rquickExpr.exec( selector )) ) {

				// ID selector
				if ( (m = match[1]) ) {

					// Document context
					if ( nodeType === 9 ) {
						if ( (elem = context.getElementById( m )) ) {

							// Support: IE, Opera, Webkit
							// TODO: identify versions
							// getElementById can match elements by name instead of ID
							if ( elem.id === m ) {
								results.push( elem );
								return results;
							}
						} else {
							return results;
						}

					// Element context
					} else {

						// Support: IE, Opera, Webkit
						// TODO: identify versions
						// getElementById can match elements by name instead of ID
						if ( newContext && (elem = newContext.getElementById( m )) &&
							contains( context, elem ) &&
							elem.id === m ) {

							results.push( elem );
							return results;
						}
					}

				// Type selector
				} else if ( match[2] ) {
					push.apply( results, context.getElementsByTagName( selector ) );
					return results;

				// Class selector
				} else if ( (m = match[3]) && support.getElementsByClassName &&
					context.getElementsByClassName ) {

					push.apply( results, context.getElementsByClassName( m ) );
					return results;
				}
			}

			// Take advantage of querySelectorAll
			if ( support.qsa &&
				!compilerCache[ selector + " " ] &&
				(!rbuggyQSA || !rbuggyQSA.test( selector )) ) {

				if ( nodeType !== 1 ) {
					newContext = context;
					newSelector = selector;

				// qSA looks outside Element context, which is not what we want
				// Thanks to Andrew Dupont for this workaround technique
				// Support: IE <=8
				// Exclude object elements
				} else if ( context.nodeName.toLowerCase() !== "object" ) {

					// Capture the context ID, setting it first if necessary
					if ( (nid = context.getAttribute( "id" )) ) {
						nid = nid.replace( rcssescape, fcssescape );
					} else {
						context.setAttribute( "id", (nid = expando) );
					}

					// Prefix every selector in the list
					groups = tokenize( selector );
					i = groups.length;
					while ( i-- ) {
						groups[i] = "#" + nid + " " + toSelector( groups[i] );
					}
					newSelector = groups.join( "," );

					// Expand context for sibling selectors
					newContext = rsibling.test( selector ) && testContext( context.parentNode ) ||
						context;
				}

				if ( newSelector ) {
					try {
						push.apply( results,
							newContext.querySelectorAll( newSelector )
						);
						return results;
					} catch ( qsaError ) {
					} finally {
						if ( nid === expando ) {
							context.removeAttribute( "id" );
						}
					}
				}
			}
		}
	}

	// All others
	return select( selector.replace( rtrim, "$1" ), context, results, seed );
}

/**
 * Create key-value caches of limited size
 * @returns {function(string, object)} Returns the Object data after storing it on itself with
 *	property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)
 *	deleting the oldest entry
 */
function createCache() {
	var keys = [];

	function cache( key, value ) {
		// Use (key + " ") to avoid collision with native prototype properties (see Issue #157)
		if ( keys.push( key + " " ) > Expr.cacheLength ) {
			// Only keep the most recent entries
			delete cache[ keys.shift() ];
		}
		return (cache[ key + " " ] = value);
	}
	return cache;
}

/**
 * Mark a function for special use by Sizzle
 * @param {Function} fn The function to mark
 */
function markFunction( fn ) {
	fn[ expando ] = true;
	return fn;
}

/**
 * Support testing using an element
 * @param {Function} fn Passed the created element and returns a boolean result
 */
function assert( fn ) {
	var el = document.createElement("fieldset");

	try {
		return !!fn( el );
	} catch (e) {
		return false;
	} finally {
		// Remove from its parent by default
		if ( el.parentNode ) {
			el.parentNode.removeChild( el );
		}
		// release memory in IE
		el = null;
	}
}

/**
 * Adds the same handler for all of the specified attrs
 * @param {String} attrs Pipe-separated list of attributes
 * @param {Function} handler The method that will be applied
 */
function addHandle( attrs, handler ) {
	var arr = attrs.split("|"),
		i = arr.length;

	while ( i-- ) {
		Expr.attrHandle[ arr[i] ] = handler;
	}
}

/**
 * Checks document order of two siblings
 * @param {Element} a
 * @param {Element} b
 * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b
 */
function siblingCheck( a, b ) {
	var cur = b && a,
		diff = cur && a.nodeType === 1 && b.nodeType === 1 &&
			a.sourceIndex - b.sourceIndex;

	// Use IE sourceIndex if available on both nodes
	if ( diff ) {
		return diff;
	}

	// Check if b follows a
	if ( cur ) {
		while ( (cur = cur.nextSibling) ) {
			if ( cur === b ) {
				return -1;
			}
		}
	}

	return a ? 1 : -1;
}

/**
 * Returns a function to use in pseudos for input types
 * @param {String} type
 */
function createInputPseudo( type ) {
	return function( elem ) {
		var name = elem.nodeName.toLowerCase();
		return name === "input" && elem.type === type;
	};
}

/**
 * Returns a function to use in pseudos for buttons
 * @param {String} type
 */
function createButtonPseudo( type ) {
	return function( elem ) {
		var name = elem.nodeName.toLowerCase();
		return (name === "input" || name === "button") && elem.type === type;
	};
}

/**
 * Returns a function to use in pseudos for :enabled/:disabled
 * @param {Boolean} disabled true for :disabled; false for :enabled
 */
function createDisabledPseudo( disabled ) {

	// Known :disabled false positives: fieldset[disabled] > legend:nth-of-type(n+2) :can-disable
	return function( elem ) {

		// Only certain elements can match :enabled or :disabled
		// https://html.spec.whatwg.org/multipage/scripting.html#selector-enabled
		// https://html.spec.whatwg.org/multipage/scripting.html#selector-disabled
		if ( "form" in elem ) {

			// Check for inherited disabledness on relevant non-disabled elements:
			// * listed form-associated elements in a disabled fieldset
			//   https://html.spec.whatwg.org/multipage/forms.html#category-listed
			//   https://html.spec.whatwg.org/multipage/forms.html#concept-fe-disabled
			// * option elements in a disabled optgroup
			//   https://html.spec.whatwg.org/multipage/forms.html#concept-option-disabled
			// All such elements have a "form" property.
			if ( elem.parentNode && elem.disabled === false ) {

				// Option elements defer to a parent optgroup if present
				if ( "label" in elem ) {
					if ( "label" in elem.parentNode ) {
						return elem.parentNode.disabled === disabled;
					} else {
						return elem.disabled === disabled;
					}
				}

				// Support: IE 6 - 11
				// Use the isDisabled shortcut property to check for disabled fieldset ancestors
				return elem.isDisabled === disabled ||

					// Where there is no isDisabled, check manually
					/* jshint -W018 */
					elem.isDisabled !== !disabled &&
						disabledAncestor( elem ) === disabled;
			}

			return elem.disabled === disabled;

		// Try to winnow out elements that can't be disabled before trusting the disabled property.
		// Some victims get caught in our net (label, legend, menu, track), but it shouldn't
		// even exist on them, let alone have a boolean value.
		} else if ( "label" in elem ) {
			return elem.disabled === disabled;
		}

		// Remaining elements are neither :enabled nor :disabled
		return false;
	};
}

/**
 * Returns a function to use in pseudos for positionals
 * @param {Function} fn
 */
function createPositionalPseudo( fn ) {
	return markFunction(function( argument ) {
		argument = +argument;
		return markFunction(function( seed, matches ) {
			var j,
				matchIndexes = fn( [], seed.length, argument ),
				i = matchIndexes.length;

			// Match elements found at the specified indexes
			while ( i-- ) {
				if ( seed[ (j = matchIndexes[i]) ] ) {
					seed[j] = !(matches[j] = seed[j]);
				}
			}
		});
	});
}

/**
 * Checks a node for validity as a Sizzle context
 * @param {Element|Object=} context
 * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value
 */
function testContext( context ) {
	return context && typeof context.getElementsByTagName !== "undefined" && context;
}

// Expose support vars for convenience
support = Sizzle.support = {};

/**
 * Detects XML nodes
 * @param {Element|Object} elem An element or a document
 * @returns {Boolean} True iff elem is a non-HTML XML node
 */
isXML = Sizzle.isXML = function( elem ) {
	// documentElement is verified for cases where it doesn't yet exist
	// (such as loading iframes in IE - #4833)
	var documentElement = elem && (elem.ownerDocument || elem).documentElement;
	return documentElement ? documentElement.nodeName !== "HTML" : false;
};

/**
 * Sets document-related variables once based on the current document
 * @param {Element|Object} [doc] An element or document object to use to set the document
 * @returns {Object} Returns the current document
 */
setDocument = Sizzle.setDocument = function( node ) {
	var hasCompare, subWindow,
		doc = node ? node.ownerDocument || node : preferredDoc;

	// Return early if doc is invalid or already selected
	if ( doc === document || doc.nodeType !== 9 || !doc.documentElement ) {
		return document;
	}

	// Update global variables
	document = doc;
	docElem = document.documentElement;
	documentIsHTML = !isXML( document );

	// Support: IE 9-11, Edge
	// Accessing iframe documents after unload throws "permission denied" errors (jQuery #13936)
	if ( preferredDoc !== document &&
		(subWindow = document.defaultView) && subWindow.top !== subWindow ) {

		// Support: IE 11, Edge
		if ( subWindow.addEventListener ) {
			subWindow.addEventListener( "unload", unloadHandler, false );

		// Support: IE 9 - 10 only
		} else if ( subWindow.attachEvent ) {
			subWindow.attachEvent( "onunload", unloadHandler );
		}
	}

	/* Attributes
	---------------------------------------------------------------------- */

	// Support: IE<8
	// Verify that getAttribute really returns attributes and not properties
	// (excepting IE8 booleans)
	support.attributes = assert(function( el ) {
		el.className = "i";
		return !el.getAttribute("className");
	});

	/* getElement(s)By*
	---------------------------------------------------------------------- */

	// Check if getElementsByTagName("*") returns only elements
	support.getElementsByTagName = assert(function( el ) {
		el.appendChild( document.createComment("") );
		return !el.getElementsByTagName("*").length;
	});

	// Support: IE<9
	support.getElementsByClassName = rnative.test( document.getElementsByClassName );

	// Support: IE<10
	// Check if getElementById returns elements by name
	// The broken getElementById methods don't pick up programmatically-set names,
	// so use a roundabout getElementsByName test
	support.getById = assert(function( el ) {
		docElem.appendChild( el ).id = expando;
		return !document.getElementsByName || !document.getElementsByName( expando ).length;
	});

	// ID filter and find
	if ( support.getById ) {
		Expr.filter["ID"] = function( id ) {
			var attrId = id.replace( runescape, funescape );
			return function( elem ) {
				return elem.getAttribute("id") === attrId;
			};
		};
		Expr.find["ID"] = function( id, context ) {
			if ( typeof context.getElementById !== "undefined" && documentIsHTML ) {
				var elem = context.getElementById( id );
				return elem ? [ elem ] : [];
			}
		};
	} else {
		Expr.filter["ID"] =  function( id ) {
			var attrId = id.replace( runescape, funescape );
			return function( elem ) {
				var node = typeof elem.getAttributeNode !== "undefined" &&
					elem.getAttributeNode("id");
				return node && node.value === attrId;
			};
		};

		// Support: IE 6 - 7 only
		// getElementById is not reliable as a find shortcut
		Expr.find["ID"] = function( id, context ) {
			if ( typeof context.getElementById !== "undefined" && documentIsHTML ) {
				var node, i, elems,
					elem = context.getElementById( id );

				if ( elem ) {

					// Verify the id attribute
					node = elem.getAttributeNode("id");
					if ( node && node.value === id ) {
						return [ elem ];
					}

					// Fall back on getElementsByName
					elems = context.getElementsByName( id );
					i = 0;
					while ( (elem = elems[i++]) ) {
						node = elem.getAttributeNode("id");
						if ( node && node.value === id ) {
							return [ elem ];
						}
					}
				}

				return [];
			}
		};
	}

	// Tag
	Expr.find["TAG"] = support.getElementsByTagName ?
		function( tag, context ) {
			if ( typeof context.getElementsByTagName !== "undefined" ) {
				return context.getElementsByTagName( tag );

			// DocumentFragment nodes don't have gEBTN
			} else if ( support.qsa ) {
				return context.querySelectorAll( tag );
			}
		} :

		function( tag, context ) {
			var elem,
				tmp = [],
				i = 0,
				// By happy coincidence, a (broken) gEBTN appears on DocumentFragment nodes too
				results = context.getElementsByTagName( tag );

			// Filter out possible comments
			if ( tag === "*" ) {
				while ( (elem = results[i++]) ) {
					if ( elem.nodeType === 1 ) {
						tmp.push( elem );
					}
				}

				return tmp;
			}
			return results;
		};

	// Class
	Expr.find["CLASS"] = support.getElementsByClassName && function( className, context ) {
		if ( typeof context.getElementsByClassName !== "undefined" && documentIsHTML ) {
			return context.getElementsByClassName( className );
		}
	};

	/* QSA/matchesSelector
	---------------------------------------------------------------------- */

	// QSA and matchesSelector support

	// matchesSelector(:active) reports false when true (IE9/Opera 11.5)
	rbuggyMatches = [];

	// qSa(:focus) reports false when true (Chrome 21)
	// We allow this because of a bug in IE8/9 that throws an error
	// whenever `document.activeElement` is accessed on an iframe
	// So, we allow :focus to pass through QSA all the time to avoid the IE error
	// See https://bugs.jquery.com/ticket/13378
	rbuggyQSA = [];

	if ( (support.qsa = rnative.test( document.querySelectorAll )) ) {
		// Build QSA regex
		// Regex strategy adopted from Diego Perini
		assert(function( el ) {
			// Select is set to empty string on purpose
			// This is to test IE's treatment of not explicitly
			// setting a boolean content attribute,
			// since its presence should be enough
			// https://bugs.jquery.com/ticket/12359
			docElem.appendChild( el ).innerHTML = "<a id='" + expando + "'></a>" +
				"<select id='" + expando + "-\r\\' msallowcapture=''>" +
				"<option selected=''></option></select>";

			// Support: IE8, Opera 11-12.16
			// Nothing should be selected when empty strings follow ^= or $= or *=
			// The test attribute must be unknown in Opera but "safe" for WinRT
			// https://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section
			if ( el.querySelectorAll("[msallowcapture^='']").length ) {
				rbuggyQSA.push( "[*^$]=" + whitespace + "*(?:''|\"\")" );
			}

			// Support: IE8
			// Boolean attributes and "value" are not treated correctly
			if ( !el.querySelectorAll("[selected]").length ) {
				rbuggyQSA.push( "\\[" + whitespace + "*(?:value|" + booleans + ")" );
			}

			// Support: Chrome<29, Android<4.4, Safari<7.0+, iOS<7.0+, PhantomJS<1.9.8+
			if ( !el.querySelectorAll( "[id~=" + expando + "-]" ).length ) {
				rbuggyQSA.push("~=");
			}

			// Webkit/Opera - :checked should return selected option elements
			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
			// IE8 throws error here and will not see later tests
			if ( !el.querySelectorAll(":checked").length ) {
				rbuggyQSA.push(":checked");
			}

			// Support: Safari 8+, iOS 8+
			// https://bugs.webkit.org/show_bug.cgi?id=136851
			// In-page `selector#id sibling-combinator selector` fails
			if ( !el.querySelectorAll( "a#" + expando + "+*" ).length ) {
				rbuggyQSA.push(".#.+[+~]");
			}
		});

		assert(function( el ) {
			el.innerHTML = "<a href='' disabled='disabled'></a>" +
				"<select disabled='disabled'><option/></select>";

			// Support: Windows 8 Native Apps
			// The type and name attributes are restricted during .innerHTML assignment
			var input = document.createElement("input");
			input.setAttribute( "type", "hidden" );
			el.appendChild( input ).setAttribute( "name", "D" );

			// Support: IE8
			// Enforce case-sensitivity of name attribute
			if ( el.querySelectorAll("[name=d]").length ) {
				rbuggyQSA.push( "name" + whitespace + "*[*^$|!~]?=" );
			}

			// FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)
			// IE8 throws error here and will not see later tests
			if ( el.querySelectorAll(":enabled").length !== 2 ) {
				rbuggyQSA.push( ":enabled", ":disabled" );
			}

			// Support: IE9-11+
			// IE's :disabled selector does not pick up the children of disabled fieldsets
			docElem.appendChild( el ).disabled = true;
			if ( el.querySelectorAll(":disabled").length !== 2 ) {
				rbuggyQSA.push( ":enabled", ":disabled" );
			}

			// Opera 10-11 does not throw on post-comma invalid pseudos
			el.querySelectorAll("*,:x");
			rbuggyQSA.push(",.*:");
		});
	}

	if ( (support.matchesSelector = rnative.test( (matches = docElem.matches ||
		docElem.webkitMatchesSelector ||
		docElem.mozMatchesSelector ||
		docElem.oMatchesSelector ||
		docElem.msMatchesSelector) )) ) {

		assert(function( el ) {
			// Check to see if it's possible to do matchesSelector
			// on a disconnected node (IE 9)
			support.disconnectedMatch = matches.call( el, "*" );

			// This should fail with an exception
			// Gecko does not error, returns false instead
			matches.call( el, "[s!='']:x" );
			rbuggyMatches.push( "!=", pseudos );
		});
	}

	rbuggyQSA = rbuggyQSA.length && new RegExp( rbuggyQSA.join("|") );
	rbuggyMatches = rbuggyMatches.length && new RegExp( rbuggyMatches.join("|") );

	/* Contains
	---------------------------------------------------------------------- */
	hasCompare = rnative.test( docElem.compareDocumentPosition );

	// Element contains another
	// Purposefully self-exclusive
	// As in, an element does not contain itself
	contains = hasCompare || rnative.test( docElem.contains ) ?
		function( a, b ) {
			var adown = a.nodeType === 9 ? a.documentElement : a,
				bup = b && b.parentNode;
			return a === bup || !!( bup && bup.nodeType === 1 && (
				adown.contains ?
					adown.contains( bup ) :
					a.compareDocumentPosition && a.compareDocumentPosition( bup ) & 16
			));
		} :
		function( a, b ) {
			if ( b ) {
				while ( (b = b.parentNode) ) {
					if ( b === a ) {
						return true;
					}
				}
			}
			return false;
		};

	/* Sorting
	---------------------------------------------------------------------- */

	// Document order sorting
	sortOrder = hasCompare ?
	function( a, b ) {

		// Flag for duplicate removal
		if ( a === b ) {
			hasDuplicate = true;
			return 0;
		}

		// Sort on method existence if only one input has compareDocumentPosition
		var compare = !a.compareDocumentPosition - !b.compareDocumentPosition;
		if ( compare ) {
			return compare;
		}

		// Calculate position if both inputs belong to the same document
		compare = ( a.ownerDocument || a ) === ( b.ownerDocument || b ) ?
			a.compareDocumentPosition( b ) :

			// Otherwise we know they are disconnected
			1;

		// Disconnected nodes
		if ( compare & 1 ||
			(!support.sortDetached && b.compareDocumentPosition( a ) === compare) ) {

			// Choose the first element that is related to our preferred document
			if ( a === document || a.ownerDocument === preferredDoc && contains(preferredDoc, a) ) {
				return -1;
			}
			if ( b === document || b.ownerDocument === preferredDoc && contains(preferredDoc, b) ) {
				return 1;
			}

			// Maintain original order
			return sortInput ?
				( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
				0;
		}

		return compare & 4 ? -1 : 1;
	} :
	function( a, b ) {
		// Exit early if the nodes are identical
		if ( a === b ) {
			hasDuplicate = true;
			return 0;
		}

		var cur,
			i = 0,
			aup = a.parentNode,
			bup = b.parentNode,
			ap = [ a ],
			bp = [ b ];

		// Parentless nodes are either documents or disconnected
		if ( !aup || !bup ) {
			return a === document ? -1 :
				b === document ? 1 :
				aup ? -1 :
				bup ? 1 :
				sortInput ?
				( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
				0;

		// If the nodes are siblings, we can do a quick check
		} else if ( aup === bup ) {
			return siblingCheck( a, b );
		}

		// Otherwise we need full lists of their ancestors for comparison
		cur = a;
		while ( (cur = cur.parentNode) ) {
			ap.unshift( cur );
		}
		cur = b;
		while ( (cur = cur.parentNode) ) {
			bp.unshift( cur );
		}

		// Walk down the tree looking for a discrepancy
		while ( ap[i] === bp[i] ) {
			i++;
		}

		return i ?
			// Do a sibling check if the nodes have a common ancestor
			siblingCheck( ap[i], bp[i] ) :

			// Otherwise nodes in our document sort first
			ap[i] === preferredDoc ? -1 :
			bp[i] === preferredDoc ? 1 :
			0;
	};

	return document;
};

Sizzle.matches = function( expr, elements ) {
	return Sizzle( expr, null, null, elements );
};

Sizzle.matchesSelector = function( elem, expr ) {
	// Set document vars if needed
	if ( ( elem.ownerDocument || elem ) !== document ) {
		setDocument( elem );
	}

	// Make sure that attribute selectors are quoted
	expr = expr.replace( rattributeQuotes, "='$1']" );

	if ( support.matchesSelector && documentIsHTML &&
		!compilerCache[ expr + " " ] &&
		( !rbuggyMatches || !rbuggyMatches.test( expr ) ) &&
		( !rbuggyQSA     || !rbuggyQSA.test( expr ) ) ) {

		try {
			var ret = matches.call( elem, expr );

			// IE 9's matchesSelector returns false on disconnected nodes
			if ( ret || support.disconnectedMatch ||
					// As well, disconnected nodes are said to be in a document
					// fragment in IE 9
					elem.document && elem.document.nodeType !== 11 ) {
				return ret;
			}
		} catch (e) {}
	}

	return Sizzle( expr, document, null, [ elem ] ).length > 0;
};

Sizzle.contains = function( context, elem ) {
	// Set document vars if needed
	if ( ( context.ownerDocument || context ) !== document ) {
		setDocument( context );
	}
	return contains( context, elem );
};

Sizzle.attr = function( elem, name ) {
	// Set document vars if needed
	if ( ( elem.ownerDocument || elem ) !== document ) {
		setDocument( elem );
	}

	var fn = Expr.attrHandle[ name.toLowerCase() ],
		// Don't get fooled by Object.prototype properties (jQuery #13807)
		val = fn && hasOwn.call( Expr.attrHandle, name.toLowerCase() ) ?
			fn( elem, name, !documentIsHTML ) :
			undefined;

	return val !== undefined ?
		val :
		support.attributes || !documentIsHTML ?
			elem.getAttribute( name ) :
			(val = elem.getAttributeNode(name)) && val.specified ?
				val.value :
				null;
};

Sizzle.escape = function( sel ) {
	return (sel + "").replace( rcssescape, fcssescape );
};

Sizzle.error = function( msg ) {
	throw new Error( "Syntax error, unrecognized expression: " + msg );
};

/**
 * Document sorting and removing duplicates
 * @param {ArrayLike} results
 */
Sizzle.uniqueSort = function( results ) {
	var elem,
		duplicates = [],
		j = 0,
		i = 0;

	// Unless we *know* we can detect duplicates, assume their presence
	hasDuplicate = !support.detectDuplicates;
	sortInput = !support.sortStable && results.slice( 0 );
	results.sort( sortOrder );

	if ( hasDuplicate ) {
		while ( (elem = results[i++]) ) {
			if ( elem === results[ i ] ) {
				j = duplicates.push( i );
			}
		}
		while ( j-- ) {
			results.splice( duplicates[ j ], 1 );
		}
	}

	// Clear input after sorting to release objects
	// See https://github.com/jquery/sizzle/pull/225
	sortInput = null;

	return results;
};

/**
 * Utility function for retrieving the text value of an array of DOM nodes
 * @param {Array|Element} elem
 */
getText = Sizzle.getText = function( elem ) {
	var node,
		ret = "",
		i = 0,
		nodeType = elem.nodeType;

	if ( !nodeType ) {
		// If no nodeType, this is expected to be an array
		while ( (node = elem[i++]) ) {
			// Do not traverse comment nodes
			ret += getText( node );
		}
	} else if ( nodeType === 1 || nodeType === 9 || nodeType === 11 ) {
		// Use textContent for elements
		// innerText usage removed for consistency of new lines (jQuery #11153)
		if ( typeof elem.textContent === "string" ) {
			return elem.textContent;
		} else {
			// Traverse its children
			for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
				ret += getText( elem );
			}
		}
	} else if ( nodeType === 3 || nodeType === 4 ) {
		return elem.nodeValue;
	}
	// Do not include comment or processing instruction nodes

	return ret;
};

Expr = Sizzle.selectors = {

	// Can be adjusted by the user
	cacheLength: 50,

	createPseudo: markFunction,

	match: matchExpr,

	attrHandle: {},

	find: {},

	relative: {
		">": { dir: "parentNode", first: true },
		" ": { dir: "parentNode" },
		"+": { dir: "previousSibling", first: true },
		"~": { dir: "previousSibling" }
	},

	preFilter: {
		"ATTR": function( match ) {
			match[1] = match[1].replace( runescape, funescape );

			// Move the given value to match[3] whether quoted or unquoted
			match[3] = ( match[3] || match[4] || match[5] || "" ).replace( runescape, funescape );

			if ( match[2] === "~=" ) {
				match[3] = " " + match[3] + " ";
			}

			return match.slice( 0, 4 );
		},

		"CHILD": function( match ) {
			/* matches from matchExpr["CHILD"]
				1 type (only|nth|...)
				2 what (child|of-type)
				3 argument (even|odd|\d*|\d*n([+-]\d+)?|...)
				4 xn-component of xn+y argument ([+-]?\d*n|)
				5 sign of xn-component
				6 x of xn-component
				7 sign of y-component
				8 y of y-component
			*/
			match[1] = match[1].toLowerCase();

			if ( match[1].slice( 0, 3 ) === "nth" ) {
				// nth-* requires argument
				if ( !match[3] ) {
					Sizzle.error( match[0] );
				}

				// numeric x and y parameters for Expr.filter.CHILD
				// remember that false/true cast respectively to 0/1
				match[4] = +( match[4] ? match[5] + (match[6] || 1) : 2 * ( match[3] === "even" || match[3] === "odd" ) );
				match[5] = +( ( match[7] + match[8] ) || match[3] === "odd" );

			// other types prohibit arguments
			} else if ( match[3] ) {
				Sizzle.error( match[0] );
			}

			return match;
		},

		"PSEUDO": function( match ) {
			var excess,
				unquoted = !match[6] && match[2];

			if ( matchExpr["CHILD"].test( match[0] ) ) {
				return null;
			}

			// Accept quoted arguments as-is
			if ( match[3] ) {
				match[2] = match[4] || match[5] || "";

			// Strip excess characters from unquoted arguments
			} else if ( unquoted && rpseudo.test( unquoted ) &&
				// Get excess from tokenize (recursively)
				(excess = tokenize( unquoted, true )) &&
				// advance to the next closing parenthesis
				(excess = unquoted.indexOf( ")", unquoted.length - excess ) - unquoted.length) ) {

				// excess is a negative index
				match[0] = match[0].slice( 0, excess );
				match[2] = unquoted.slice( 0, excess );
			}

			// Return only captures needed by the pseudo filter method (type and argument)
			return match.slice( 0, 3 );
		}
	},

	filter: {

		"TAG": function( nodeNameSelector ) {
			var nodeName = nodeNameSelector.replace( runescape, funescape ).toLowerCase();
			return nodeNameSelector === "*" ?
				function() { return true; } :
				function( elem ) {
					return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;
				};
		},

		"CLASS": function( className ) {
			var pattern = classCache[ className + " " ];

			return pattern ||
				(pattern = new RegExp( "(^|" + whitespace + ")" + className + "(" + whitespace + "|$)" )) &&
				classCache( className, function( elem ) {
					return pattern.test( typeof elem.className === "string" && elem.className || typeof elem.getAttribute !== "undefined" && elem.getAttribute("class") || "" );
				});
		},

		"ATTR": function( name, operator, check ) {
			return function( elem ) {
				var result = Sizzle.attr( elem, name );

				if ( result == null ) {
					return operator === "!=";
				}
				if ( !operator ) {
					return true;
				}

				result += "";

				return operator === "=" ? result === check :
					operator === "!=" ? result !== check :
					operator === "^=" ? check && result.indexOf( check ) === 0 :
					operator === "*=" ? check && result.indexOf( check ) > -1 :
					operator === "$=" ? check && result.slice( -check.length ) === check :
					operator === "~=" ? ( " " + result.replace( rwhitespace, " " ) + " " ).indexOf( check ) > -1 :
					operator === "|=" ? result === check || result.slice( 0, check.length + 1 ) === check + "-" :
					false;
			};
		},

		"CHILD": function( type, what, argument, first, last ) {
			var simple = type.slice( 0, 3 ) !== "nth",
				forward = type.slice( -4 ) !== "last",
				ofType = what === "of-type";

			return first === 1 && last === 0 ?

				// Shortcut for :nth-*(n)
				function( elem ) {
					return !!elem.parentNode;
				} :

				function( elem, context, xml ) {
					var cache, uniqueCache, outerCache, node, nodeIndex, start,
						dir = simple !== forward ? "nextSibling" : "previousSibling",
						parent = elem.parentNode,
						name = ofType && elem.nodeName.toLowerCase(),
						useCache = !xml && !ofType,
						diff = false;

					if ( parent ) {

						// :(first|last|only)-(child|of-type)
						if ( simple ) {
							while ( dir ) {
								node = elem;
								while ( (node = node[ dir ]) ) {
									if ( ofType ?
										node.nodeName.toLowerCase() === name :
										node.nodeType === 1 ) {

										return false;
									}
								}
								// Reverse direction for :only-* (if we haven't yet done so)
								start = dir = type === "only" && !start && "nextSibling";
							}
							return true;
						}

						start = [ forward ? parent.firstChild : parent.lastChild ];

						// non-xml :nth-child(...) stores cache data on `parent`
						if ( forward && useCache ) {

							// Seek `elem` from a previously-cached index

							// ...in a gzip-friendly way
							node = parent;
							outerCache = node[ expando ] || (node[ expando ] = {});

							// Support: IE <9 only
							// Defend against cloned attroperties (jQuery gh-1709)
							uniqueCache = outerCache[ node.uniqueID ] ||
								(outerCache[ node.uniqueID ] = {});

							cache = uniqueCache[ type ] || [];
							nodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];
							diff = nodeIndex && cache[ 2 ];
							node = nodeIndex && parent.childNodes[ nodeIndex ];

							while ( (node = ++nodeIndex && node && node[ dir ] ||

								// Fallback to seeking `elem` from the start
								(diff = nodeIndex = 0) || start.pop()) ) {

								// When found, cache indexes on `parent` and break
								if ( node.nodeType === 1 && ++diff && node === elem ) {
									uniqueCache[ type ] = [ dirruns, nodeIndex, diff ];
									break;
								}
							}

						} else {
							// Use previously-cached element index if available
							if ( useCache ) {
								// ...in a gzip-friendly way
								node = elem;
								outerCache = node[ expando ] || (node[ expando ] = {});

								// Support: IE <9 only
								// Defend against cloned attroperties (jQuery gh-1709)
								uniqueCache = outerCache[ node.uniqueID ] ||
									(outerCache[ node.uniqueID ] = {});

								cache = uniqueCache[ type ] || [];
								nodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];
								diff = nodeIndex;
							}

							// xml :nth-child(...)
							// or :nth-last-child(...) or :nth(-last)?-of-type(...)
							if ( diff === false ) {
								// Use the same loop as above to seek `elem` from the start
								while ( (node = ++nodeIndex && node && node[ dir ] ||
									(diff = nodeIndex = 0) || start.pop()) ) {

									if ( ( ofType ?
										node.nodeName.toLowerCase() === name :
										node.nodeType === 1 ) &&
										++diff ) {

										// Cache the index of each encountered element
										if ( useCache ) {
											outerCache = node[ expando ] || (node[ expando ] = {});

											// Support: IE <9 only
											// Defend against cloned attroperties (jQuery gh-1709)
											uniqueCache = outerCache[ node.uniqueID ] ||
												(outerCache[ node.uniqueID ] = {});

											uniqueCache[ type ] = [ dirruns, diff ];
										}

										if ( node === elem ) {
											break;
										}
									}
								}
							}
						}

						// Incorporate the offset, then check against cycle size
						diff -= last;
						return diff === first || ( diff % first === 0 && diff / first >= 0 );
					}
				};
		},

		"PSEUDO": function( pseudo, argument ) {
			// pseudo-class names are case-insensitive
			// http://www.w3.org/TR/selectors/#pseudo-classes
			// Prioritize by case sensitivity in case custom pseudos are added with uppercase letters
			// Remember that setFilters inherits from pseudos
			var args,
				fn = Expr.pseudos[ pseudo ] || Expr.setFilters[ pseudo.toLowerCase() ] ||
					Sizzle.error( "unsupported pseudo: " + pseudo );

			// The user may use createPseudo to indicate that
			// arguments are needed to create the filter function
			// just as Sizzle does
			if ( fn[ expando ] ) {
				return fn( argument );
			}

			// But maintain support for old signatures
			if ( fn.length > 1 ) {
				args = [ pseudo, pseudo, "", argument ];
				return Expr.setFilters.hasOwnProperty( pseudo.toLowerCase() ) ?
					markFunction(function( seed, matches ) {
						var idx,
							matched = fn( seed, argument ),
							i = matched.length;
						while ( i-- ) {
							idx = indexOf( seed, matched[i] );
							seed[ idx ] = !( matches[ idx ] = matched[i] );
						}
					}) :
					function( elem ) {
						return fn( elem, 0, args );
					};
			}

			return fn;
		}
	},

	pseudos: {
		// Potentially complex pseudos
		"not": markFunction(function( selector ) {
			// Trim the selector passed to compile
			// to avoid treating leading and trailing
			// spaces as combinators
			var input = [],
				results = [],
				matcher = compile( selector.replace( rtrim, "$1" ) );

			return matcher[ expando ] ?
				markFunction(function( seed, matches, context, xml ) {
					var elem,
						unmatched = matcher( seed, null, xml, [] ),
						i = seed.length;

					// Match elements unmatched by `matcher`
					while ( i-- ) {
						if ( (elem = unmatched[i]) ) {
							seed[i] = !(matches[i] = elem);
						}
					}
				}) :
				function( elem, context, xml ) {
					input[0] = elem;
					matcher( input, null, xml, results );
					// Don't keep the element (issue #299)
					input[0] = null;
					return !results.pop();
				};
		}),

		"has": markFunction(function( selector ) {
			return function( elem ) {
				return Sizzle( selector, elem ).length > 0;
			};
		}),

		"contains": markFunction(function( text ) {
			text = text.replace( runescape, funescape );
			return function( elem ) {
				return ( elem.textContent || elem.innerText || getText( elem ) ).indexOf( text ) > -1;
			};
		}),

		// "Whether an element is represented by a :lang() selector
		// is based solely on the element's language value
		// being equal to the identifier C,
		// or beginning with the identifier C immediately followed by "-".
		// The matching of C against the element's language value is performed case-insensitively.
		// The identifier C does not have to be a valid language name."
		// http://www.w3.org/TR/selectors/#lang-pseudo
		"lang": markFunction( function( lang ) {
			// lang value must be a valid identifier
			if ( !ridentifier.test(lang || "") ) {
				Sizzle.error( "unsupported lang: " + lang );
			}
			lang = lang.replace( runescape, funescape ).toLowerCase();
			return function( elem ) {
				var elemLang;
				do {
					if ( (elemLang = documentIsHTML ?
						elem.lang :
						elem.getAttribute("xml:lang") || elem.getAttribute("lang")) ) {

						elemLang = elemLang.toLowerCase();
						return elemLang === lang || elemLang.indexOf( lang + "-" ) === 0;
					}
				} while ( (elem = elem.parentNode) && elem.nodeType === 1 );
				return false;
			};
		}),

		// Miscellaneous
		"target": function( elem ) {
			var hash = window.location && window.location.hash;
			return hash && hash.slice( 1 ) === elem.id;
		},

		"root": function( elem ) {
			return elem === docElem;
		},

		"focus": function( elem ) {
			return elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);
		},

		// Boolean properties
		"enabled": createDisabledPseudo( false ),
		"disabled": createDisabledPseudo( true ),

		"checked": function( elem ) {
			// In CSS3, :checked should return both checked and selected elements
			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
			var nodeName = elem.nodeName.toLowerCase();
			return (nodeName === "input" && !!elem.checked) || (nodeName === "option" && !!elem.selected);
		},

		"selected": function( elem ) {
			// Accessing this property makes selected-by-default
			// options in Safari work properly
			if ( elem.parentNode ) {
				elem.parentNode.selectedIndex;
			}

			return elem.selected === true;
		},

		// Contents
		"empty": function( elem ) {
			// http://www.w3.org/TR/selectors/#empty-pseudo
			// :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),
			//   but not by others (comment: 8; processing instruction: 7; etc.)
			// nodeType < 6 works because attributes (2) do not appear as children
			for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
				if ( elem.nodeType < 6 ) {
					return false;
				}
			}
			return true;
		},

		"parent": function( elem ) {
			return !Expr.pseudos["empty"]( elem );
		},

		// Element/input types
		"header": function( elem ) {
			return rheader.test( elem.nodeName );
		},

		"input": function( elem ) {
			return rinputs.test( elem.nodeName );
		},

		"button": function( elem ) {
			var name = elem.nodeName.toLowerCase();
			return name === "input" && elem.type === "button" || name === "button";
		},

		"text": function( elem ) {
			var attr;
			return elem.nodeName.toLowerCase() === "input" &&
				elem.type === "text" &&

				// Support: IE<8
				// New HTML5 attribute values (e.g., "search") appear with elem.type === "text"
				( (attr = elem.getAttribute("type")) == null || attr.toLowerCase() === "text" );
		},

		// Position-in-collection
		"first": createPositionalPseudo(function() {
			return [ 0 ];
		}),

		"last": createPositionalPseudo(function( matchIndexes, length ) {
			return [ length - 1 ];
		}),

		"eq": createPositionalPseudo(function( matchIndexes, length, argument ) {
			return [ argument < 0 ? argument + length : argument ];
		}),

		"even": createPositionalPseudo(function( matchIndexes, length ) {
			var i = 0;
			for ( ; i < length; i += 2 ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"odd": createPositionalPseudo(function( matchIndexes, length ) {
			var i = 1;
			for ( ; i < length; i += 2 ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"lt": createPositionalPseudo(function( matchIndexes, length, argument ) {
			var i = argument < 0 ? argument + length : argument;
			for ( ; --i >= 0; ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"gt": createPositionalPseudo(function( matchIndexes, length, argument ) {
			var i = argument < 0 ? argument + length : argument;
			for ( ; ++i < length; ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		})
	}
};

Expr.pseudos["nth"] = Expr.pseudos["eq"];

// Add button/input type pseudos
for ( i in { radio: true, checkbox: true, file: true, password: true, image: true } ) {
	Expr.pseudos[ i ] = createInputPseudo( i );
}
for ( i in { submit: true, reset: true } ) {
	Expr.pseudos[ i ] = createButtonPseudo( i );
}

// Easy API for creating new setFilters
function setFilters() {}
setFilters.prototype = Expr.filters = Expr.pseudos;
Expr.setFilters = new setFilters();

tokenize = Sizzle.tokenize = function( selector, parseOnly ) {
	var matched, match, tokens, type,
		soFar, groups, preFilters,
		cached = tokenCache[ selector + " " ];

	if ( cached ) {
		return parseOnly ? 0 : cached.slice( 0 );
	}

	soFar = selector;
	groups = [];
	preFilters = Expr.preFilter;

	while ( soFar ) {

		// Comma and first run
		if ( !matched || (match = rcomma.exec( soFar )) ) {
			if ( match ) {
				// Don't consume trailing commas as valid
				soFar = soFar.slice( match[0].length ) || soFar;
			}
			groups.push( (tokens = []) );
		}

		matched = false;

		// Combinators
		if ( (match = rcombinators.exec( soFar )) ) {
			matched = match.shift();
			tokens.push({
				value: matched,
				// Cast descendant combinators to space
				type: match[0].replace( rtrim, " " )
			});
			soFar = soFar.slice( matched.length );
		}

		// Filters
		for ( type in Expr.filter ) {
			if ( (match = matchExpr[ type ].exec( soFar )) && (!preFilters[ type ] ||
				(match = preFilters[ type ]( match ))) ) {
				matched = match.shift();
				tokens.push({
					value: matched,
					type: type,
					matches: match
				});
				soFar = soFar.slice( matched.length );
			}
		}

		if ( !matched ) {
			break;
		}
	}

	// Return the length of the invalid excess
	// if we're just parsing
	// Otherwise, throw an error or return tokens
	return parseOnly ?
		soFar.length :
		soFar ?
			Sizzle.error( selector ) :
			// Cache the tokens
			tokenCache( selector, groups ).slice( 0 );
};

function toSelector( tokens ) {
	var i = 0,
		len = tokens.length,
		selector = "";
	for ( ; i < len; i++ ) {
		selector += tokens[i].value;
	}
	return selector;
}

function addCombinator( matcher, combinator, base ) {
	var dir = combinator.dir,
		skip = combinator.next,
		key = skip || dir,
		checkNonElements = base && key === "parentNode",
		doneName = done++;

	return combinator.first ?
		// Check against closest ancestor/preceding element
		function( elem, context, xml ) {
			while ( (elem = elem[ dir ]) ) {
				if ( elem.nodeType === 1 || checkNonElements ) {
					return matcher( elem, context, xml );
				}
			}
			return false;
		} :

		// Check against all ancestor/preceding elements
		function( elem, context, xml ) {
			var oldCache, uniqueCache, outerCache,
				newCache = [ dirruns, doneName ];

			// We can't set arbitrary data on XML nodes, so they don't benefit from combinator caching
			if ( xml ) {
				while ( (elem = elem[ dir ]) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						if ( matcher( elem, context, xml ) ) {
							return true;
						}
					}
				}
			} else {
				while ( (elem = elem[ dir ]) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						outerCache = elem[ expando ] || (elem[ expando ] = {});

						// Support: IE <9 only
						// Defend against cloned attroperties (jQuery gh-1709)
						uniqueCache = outerCache[ elem.uniqueID ] || (outerCache[ elem.uniqueID ] = {});

						if ( skip && skip === elem.nodeName.toLowerCase() ) {
							elem = elem[ dir ] || elem;
						} else if ( (oldCache = uniqueCache[ key ]) &&
							oldCache[ 0 ] === dirruns && oldCache[ 1 ] === doneName ) {

							// Assign to newCache so results back-propagate to previous elements
							return (newCache[ 2 ] = oldCache[ 2 ]);
						} else {
							// Reuse newcache so results back-propagate to previous elements
							uniqueCache[ key ] = newCache;

							// A match means we're done; a fail means we have to keep checking
							if ( (newCache[ 2 ] = matcher( elem, context, xml )) ) {
								return true;
							}
						}
					}
				}
			}
			return false;
		};
}

function elementMatcher( matchers ) {
	return matchers.length > 1 ?
		function( elem, context, xml ) {
			var i = matchers.length;
			while ( i-- ) {
				if ( !matchers[i]( elem, context, xml ) ) {
					return false;
				}
			}
			return true;
		} :
		matchers[0];
}

function multipleContexts( selector, contexts, results ) {
	var i = 0,
		len = contexts.length;
	for ( ; i < len; i++ ) {
		Sizzle( selector, contexts[i], results );
	}
	return results;
}

function condense( unmatched, map, filter, context, xml ) {
	var elem,
		newUnmatched = [],
		i = 0,
		len = unmatched.length,
		mapped = map != null;

	for ( ; i < len; i++ ) {
		if ( (elem = unmatched[i]) ) {
			if ( !filter || filter( elem, context, xml ) ) {
				newUnmatched.push( elem );
				if ( mapped ) {
					map.push( i );
				}
			}
		}
	}

	return newUnmatched;
}

function setMatcher( preFilter, selector, matcher, postFilter, postFinder, postSelector ) {
	if ( postFilter && !postFilter[ expando ] ) {
		postFilter = setMatcher( postFilter );
	}
	if ( postFinder && !postFinder[ expando ] ) {
		postFinder = setMatcher( postFinder, postSelector );
	}
	return markFunction(function( seed, results, context, xml ) {
		var temp, i, elem,
			preMap = [],
			postMap = [],
			preexisting = results.length,

			// Get initial elements from seed or context
			elems = seed || multipleContexts( selector || "*", context.nodeType ? [ context ] : context, [] ),

			// Prefilter to get matcher input, preserving a map for seed-results synchronization
			matcherIn = preFilter && ( seed || !selector ) ?
				condense( elems, preMap, preFilter, context, xml ) :
				elems,

			matcherOut = matcher ?
				// If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,
				postFinder || ( seed ? preFilter : preexisting || postFilter ) ?

					// ...intermediate processing is necessary
					[] :

					// ...otherwise use results directly
					results :
				matcherIn;

		// Find primary matches
		if ( matcher ) {
			matcher( matcherIn, matcherOut, context, xml );
		}

		// Apply postFilter
		if ( postFilter ) {
			temp = condense( matcherOut, postMap );
			postFilter( temp, [], context, xml );

			// Un-match failing elements by moving them back to matcherIn
			i = temp.length;
			while ( i-- ) {
				if ( (elem = temp[i]) ) {
					matcherOut[ postMap[i] ] = !(matcherIn[ postMap[i] ] = elem);
				}
			}
		}

		if ( seed ) {
			if ( postFinder || preFilter ) {
				if ( postFinder ) {
					// Get the final matcherOut by condensing this intermediate into postFinder contexts
					temp = [];
					i = matcherOut.length;
					while ( i-- ) {
						if ( (elem = matcherOut[i]) ) {
							// Restore matcherIn since elem is not yet a final match
							temp.push( (matcherIn[i] = elem) );
						}
					}
					postFinder( null, (matcherOut = []), temp, xml );
				}

				// Move matched elements from seed to results to keep them synchronized
				i = matcherOut.length;
				while ( i-- ) {
					if ( (elem = matcherOut[i]) &&
						(temp = postFinder ? indexOf( seed, elem ) : preMap[i]) > -1 ) {

						seed[temp] = !(results[temp] = elem);
					}
				}
			}

		// Add elements to results, through postFinder if defined
		} else {
			matcherOut = condense(
				matcherOut === results ?
					matcherOut.splice( preexisting, matcherOut.length ) :
					matcherOut
			);
			if ( postFinder ) {
				postFinder( null, results, matcherOut, xml );
			} else {
				push.apply( results, matcherOut );
			}
		}
	});
}

function matcherFromTokens( tokens ) {
	var checkContext, matcher, j,
		len = tokens.length,
		leadingRelative = Expr.relative[ tokens[0].type ],
		implicitRelative = leadingRelative || Expr.relative[" "],
		i = leadingRelative ? 1 : 0,

		// The foundational matcher ensures that elements are reachable from top-level context(s)
		matchContext = addCombinator( function( elem ) {
			return elem === checkContext;
		}, implicitRelative, true ),
		matchAnyContext = addCombinator( function( elem ) {
			return indexOf( checkContext, elem ) > -1;
		}, implicitRelative, true ),
		matchers = [ function( elem, context, xml ) {
			var ret = ( !leadingRelative && ( xml || context !== outermostContext ) ) || (
				(checkContext = context).nodeType ?
					matchContext( elem, context, xml ) :
					matchAnyContext( elem, context, xml ) );
			// Avoid hanging onto element (issue #299)
			checkContext = null;
			return ret;
		} ];

	for ( ; i < len; i++ ) {
		if ( (matcher = Expr.relative[ tokens[i].type ]) ) {
			matchers = [ addCombinator(elementMatcher( matchers ), matcher) ];
		} else {
			matcher = Expr.filter[ tokens[i].type ].apply( null, tokens[i].matches );

			// Return special upon seeing a positional matcher
			if ( matcher[ expando ] ) {
				// Find the next relative operator (if any) for proper handling
				j = ++i;
				for ( ; j < len; j++ ) {
					if ( Expr.relative[ tokens[j].type ] ) {
						break;
					}
				}
				return setMatcher(
					i > 1 && elementMatcher( matchers ),
					i > 1 && toSelector(
						// If the preceding token was a descendant combinator, insert an implicit any-element `*`
						tokens.slice( 0, i - 1 ).concat({ value: tokens[ i - 2 ].type === " " ? "*" : "" })
					).replace( rtrim, "$1" ),
					matcher,
					i < j && matcherFromTokens( tokens.slice( i, j ) ),
					j < len && matcherFromTokens( (tokens = tokens.slice( j )) ),
					j < len && toSelector( tokens )
				);
			}
			matchers.push( matcher );
		}
	}

	return elementMatcher( matchers );
}

function matcherFromGroupMatchers( elementMatchers, setMatchers ) {
	var bySet = setMatchers.length > 0,
		byElement = elementMatchers.length > 0,
		superMatcher = function( seed, context, xml, results, outermost ) {
			var elem, j, matcher,
				matchedCount = 0,
				i = "0",
				unmatched = seed && [],
				setMatched = [],
				contextBackup = outermostContext,
				// We must always have either seed elements or outermost context
				elems = seed || byElement && Expr.find["TAG"]( "*", outermost ),
				// Use integer dirruns iff this is the outermost matcher
				dirrunsUnique = (dirruns += contextBackup == null ? 1 : Math.random() || 0.1),
				len = elems.length;

			if ( outermost ) {
				outermostContext = context === document || context || outermost;
			}

			// Add elements passing elementMatchers directly to results
			// Support: IE<9, Safari
			// Tolerate NodeList properties (IE: "length"; Safari: <number>) matching elements by id
			for ( ; i !== len && (elem = elems[i]) != null; i++ ) {
				if ( byElement && elem ) {
					j = 0;
					if ( !context && elem.ownerDocument !== document ) {
						setDocument( elem );
						xml = !documentIsHTML;
					}
					while ( (matcher = elementMatchers[j++]) ) {
						if ( matcher( elem, context || document, xml) ) {
							results.push( elem );
							break;
						}
					}
					if ( outermost ) {
						dirruns = dirrunsUnique;
					}
				}

				// Track unmatched elements for set filters
				if ( bySet ) {
					// They will have gone through all possible matchers
					if ( (elem = !matcher && elem) ) {
						matchedCount--;
					}

					// Lengthen the array for every element, matched or not
					if ( seed ) {
						unmatched.push( elem );
					}
				}
			}

			// `i` is now the count of elements visited above, and adding it to `matchedCount`
			// makes the latter nonnegative.
			matchedCount += i;

			// Apply set filters to unmatched elements
			// NOTE: This can be skipped if there are no unmatched elements (i.e., `matchedCount`
			// equals `i`), unless we didn't visit _any_ elements in the above loop because we have
			// no element matchers and no seed.
			// Incrementing an initially-string "0" `i` allows `i` to remain a string only in that
			// case, which will result in a "00" `matchedCount` that differs from `i` but is also
			// numerically zero.
			if ( bySet && i !== matchedCount ) {
				j = 0;
				while ( (matcher = setMatchers[j++]) ) {
					matcher( unmatched, setMatched, context, xml );
				}

				if ( seed ) {
					// Reintegrate element matches to eliminate the need for sorting
					if ( matchedCount > 0 ) {
						while ( i-- ) {
							if ( !(unmatched[i] || setMatched[i]) ) {
								setMatched[i] = pop.call( results );
							}
						}
					}

					// Discard index placeholder values to get only actual matches
					setMatched = condense( setMatched );
				}

				// Add matches to results
				push.apply( results, setMatched );

				// Seedless set matches succeeding multiple successful matchers stipulate sorting
				if ( outermost && !seed && setMatched.length > 0 &&
					( matchedCount + setMatchers.length ) > 1 ) {

					Sizzle.uniqueSort( results );
				}
			}

			// Override manipulation of globals by nested matchers
			if ( outermost ) {
				dirruns = dirrunsUnique;
				outermostContext = contextBackup;
			}

			return unmatched;
		};

	return bySet ?
		markFunction( superMatcher ) :
		superMatcher;
}

compile = Sizzle.compile = function( selector, match /* Internal Use Only */ ) {
	var i,
		setMatchers = [],
		elementMatchers = [],
		cached = compilerCache[ selector + " " ];

	if ( !cached ) {
		// Generate a function of recursive functions that can be used to check each element
		if ( !match ) {
			match = tokenize( selector );
		}
		i = match.length;
		while ( i-- ) {
			cached = matcherFromTokens( match[i] );
			if ( cached[ expando ] ) {
				setMatchers.push( cached );
			} else {
				elementMatchers.push( cached );
			}
		}

		// Cache the compiled function
		cached = compilerCache( selector, matcherFromGroupMatchers( elementMatchers, setMatchers ) );

		// Save selector and tokenization
		cached.selector = selector;
	}
	return cached;
};

/**
 * A low-level selection function that works with Sizzle's compiled
 *  selector functions
 * @param {String|Function} selector A selector or a pre-compiled
 *  selector function built with Sizzle.compile
 * @param {Element} context
 * @param {Array} [results]
 * @param {Array} [seed] A set of elements to match against
 */
select = Sizzle.select = function( selector, context, results, seed ) {
	var i, tokens, token, type, find,
		compiled = typeof selector === "function" && selector,
		match = !seed && tokenize( (selector = compiled.selector || selector) );

	results = results || [];

	// Try to minimize operations if there is only one selector in the list and no seed
	// (the latter of which guarantees us context)
	if ( match.length === 1 ) {

		// Reduce context if the leading compound selector is an ID
		tokens = match[0] = match[0].slice( 0 );
		if ( tokens.length > 2 && (token = tokens[0]).type === "ID" &&
				context.nodeType === 9 && documentIsHTML && Expr.relative[ tokens[1].type ] ) {

			context = ( Expr.find["ID"]( token.matches[0].replace(runescape, funescape), context ) || [] )[0];
			if ( !context ) {
				return results;

			// Precompiled matchers will still verify ancestry, so step up a level
			} else if ( compiled ) {
				context = context.parentNode;
			}

			selector = selector.slice( tokens.shift().value.length );
		}

		// Fetch a seed set for right-to-left matching
		i = matchExpr["needsContext"].test( selector ) ? 0 : tokens.length;
		while ( i-- ) {
			token = tokens[i];

			// Abort if we hit a combinator
			if ( Expr.relative[ (type = token.type) ] ) {
				break;
			}
			if ( (find = Expr.find[ type ]) ) {
				// Search, expanding context for leading sibling combinators
				if ( (seed = find(
					token.matches[0].replace( runescape, funescape ),
					rsibling.test( tokens[0].type ) && testContext( context.parentNode ) || context
				)) ) {

					// If seed is empty or no tokens remain, we can return early
					tokens.splice( i, 1 );
					selector = seed.length && toSelector( tokens );
					if ( !selector ) {
						push.apply( results, seed );
						return results;
					}

					break;
				}
			}
		}
	}

	// Compile and execute a filtering function if one is not provided
	// Provide `match` to avoid retokenization if we modified the selector above
	( compiled || compile( selector, match ) )(
		seed,
		context,
		!documentIsHTML,
		results,
		!context || rsibling.test( selector ) && testContext( context.parentNode ) || context
	);
	return results;
};

// One-time assignments

// Sort stability
support.sortStable = expando.split("").sort( sortOrder ).join("") === expando;

// Support: Chrome 14-35+
// Always assume duplicates if they aren't passed to the comparison function
support.detectDuplicates = !!hasDuplicate;

// Initialize against the default document
setDocument();

// Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)
// Detached nodes confoundingly follow *each other*
support.sortDetached = assert(function( el ) {
	// Should return 1, but returns 4 (following)
	return el.compareDocumentPosition( document.createElement("fieldset") ) & 1;
});

// Support: IE<8
// Prevent attribute/property "interpolation"
// https://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx
if ( !assert(function( el ) {
	el.innerHTML = "<a href='#'></a>";
	return el.firstChild.getAttribute("href") === "#" ;
}) ) {
	addHandle( "type|href|height|width", function( elem, name, isXML ) {
		if ( !isXML ) {
			return elem.getAttribute( name, name.toLowerCase() === "type" ? 1 : 2 );
		}
	});
}

// Support: IE<9
// Use defaultValue in place of getAttribute("value")
if ( !support.attributes || !assert(function( el ) {
	el.innerHTML = "<input/>";
	el.firstChild.setAttribute( "value", "" );
	return el.firstChild.getAttribute( "value" ) === "";
}) ) {
	addHandle( "value", function( elem, name, isXML ) {
		if ( !isXML && elem.nodeName.toLowerCase() === "input" ) {
			return elem.defaultValue;
		}
	});
}

// Support: IE<9
// Use getAttributeNode to fetch booleans when getAttribute lies
if ( !assert(function( el ) {
	return el.getAttribute("disabled") == null;
}) ) {
	addHandle( booleans, function( elem, name, isXML ) {
		var val;
		if ( !isXML ) {
			return elem[ name ] === true ? name.toLowerCase() :
					(val = elem.getAttributeNode( name )) && val.specified ?
					val.value :
				null;
		}
	});
}

return Sizzle;

})( window );



jQuery.find = Sizzle;
jQuery.expr = Sizzle.selectors;

// Deprecated
jQuery.expr[ ":" ] = jQuery.expr.pseudos;
jQuery.uniqueSort = jQuery.unique = Sizzle.uniqueSort;
jQuery.text = Sizzle.getText;
jQuery.isXMLDoc = Sizzle.isXML;
jQuery.contains = Sizzle.contains;
jQuery.escapeSelector = Sizzle.escape;




var dir = function( elem, dir, until ) {
	var matched = [],
		truncate = until !== undefined;

	while ( ( elem = elem[ dir ] ) && elem.nodeType !== 9 ) {
		if ( elem.nodeType === 1 ) {
			if ( truncate && jQuery( elem ).is( until ) ) {
				break;
			}
			matched.push( elem );
		}
	}
	return matched;
};


var siblings = function( n, elem ) {
	var matched = [];

	for ( ; n; n = n.nextSibling ) {
		if ( n.nodeType === 1 && n !== elem ) {
			matched.push( n );
		}
	}

	return matched;
};


var rneedsContext = jQuery.expr.match.needsContext;



function nodeName( elem, name ) {

  return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();

};
var rsingleTag = ( /^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i );



// Implement the identical functionality for filter and not
function winnow( elements, qualifier, not ) {
	if ( isFunction( qualifier ) ) {
		return jQuery.grep( elements, function( elem, i ) {
			return !!qualifier.call( elem, i, elem ) !== not;
		} );
	}

	// Single element
	if ( qualifier.nodeType ) {
		return jQuery.grep( elements, function( elem ) {
			return ( elem === qualifier ) !== not;
		} );
	}

	// Arraylike of elements (jQuery, arguments, Array)
	if ( typeof qualifier !== "string" ) {
		return jQuery.grep( elements, function( elem ) {
			return ( indexOf.call( qualifier, elem ) > -1 ) !== not;
		} );
	}

	// Filtered directly for both simple and complex selectors
	return jQuery.filter( qualifier, elements, not );
}

jQuery.filter = function( expr, elems, not ) {
	var elem = elems[ 0 ];

	if ( not ) {
		expr = ":not(" + expr + ")";
	}

	if ( elems.length === 1 && elem.nodeType === 1 ) {
		return jQuery.find.matchesSelector( elem, expr ) ? [ elem ] : [];
	}

	return jQuery.find.matches( expr, jQuery.grep( elems, function( elem ) {
		return elem.nodeType === 1;
	} ) );
};

jQuery.fn.extend( {
	find: function( selector ) {
		var i, ret,
			len = this.length,
			self = this;

		if ( typeof selector !== "string" ) {
			return this.pushStack( jQuery( selector ).filter( function() {
				for ( i = 0; i < len; i++ ) {
					if ( jQuery.contains( self[ i ], this ) ) {
						return true;
					}
				}
			} ) );
		}

		ret = this.pushStack( [] );

		for ( i = 0; i < len; i++ ) {
			jQuery.find( selector, self[ i ], ret );
		}

		return len > 1 ? jQuery.uniqueSort( ret ) : ret;
	},
	filter: function( selector ) {
		return this.pushStack( winnow( this, selector || [], false ) );
	},
	not: function( selector ) {
		return this.pushStack( winnow( this, selector || [], true ) );
	},
	is: function( selector ) {
		return !!winnow(
			this,

			// If this is a positional/relative selector, check membership in the returned set
			// so $("p:first").is("p:last") won't return true for a doc with two "p".
			typeof selector === "string" && rneedsContext.test( selector ) ?
				jQuery( selector ) :
				selector || [],
			false
		).length;
	}
} );


// Initialize a jQuery object


// A central reference to the root jQuery(document)
var rootjQuery,

	// A simple way to check for HTML strings
	// Prioritize #id over <tag> to avoid XSS via location.hash (#9521)
	// Strict HTML recognition (#11290: must start with <)
	// Shortcut simple #id case for speed
	rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/,

	init = jQuery.fn.init = function( selector, context, root ) {
		var match, elem;

		// HANDLE: $(""), $(null), $(undefined), $(false)
		if ( !selector ) {
			return this;
		}

		// Method init() accepts an alternate rootjQuery
		// so migrate can support jQuery.sub (gh-2101)
		root = root || rootjQuery;

		// Handle HTML strings
		if ( typeof selector === "string" ) {
			if ( selector[ 0 ] === "<" &&
				selector[ selector.length - 1 ] === ">" &&
				selector.length >= 3 ) {

				// Assume that strings that start and end with <> are HTML and skip the regex check
				match = [ null, selector, null ];

			} else {
				match = rquickExpr.exec( selector );
			}

			// Match html or make sure no context is specified for #id
			if ( match && ( match[ 1 ] || !context ) ) {

				// HANDLE: $(html) -> $(array)
				if ( match[ 1 ] ) {
					context = context instanceof jQuery ? context[ 0 ] : context;

					// Option to run scripts is true for back-compat
					// Intentionally let the error be thrown if parseHTML is not present
					jQuery.merge( this, jQuery.parseHTML(
						match[ 1 ],
						context && context.nodeType ? context.ownerDocument || context : document,
						true
					) );

					// HANDLE: $(html, props)
					if ( rsingleTag.test( match[ 1 ] ) && jQuery.isPlainObject( context ) ) {
						for ( match in context ) {

							// Properties of context are called as methods if possible
							if ( isFunction( this[ match ] ) ) {
								this[ match ]( context[ match ] );

							// ...and otherwise set as attributes
							} else {
								this.attr( match, context[ match ] );
							}
						}
					}

					return this;

				// HANDLE: $(#id)
				} else {
					elem = document.getElementById( match[ 2 ] );

					if ( elem ) {

						// Inject the element directly into the jQuery object
						this[ 0 ] = elem;
						this.length = 1;
					}
					return this;
				}

			// HANDLE: $(expr, $(...))
			} else if ( !context || context.jquery ) {
				return ( context || root ).find( selector );

			// HANDLE: $(expr, context)
			// (which is just equivalent to: $(context).find(expr)
			} else {
				return this.constructor( context ).find( selector );
			}

		// HANDLE: $(DOMElement)
		} else if ( selector.nodeType ) {
			this[ 0 ] = selector;
			this.length = 1;
			return this;

		// HANDLE: $(function)
		// Shortcut for document ready
		} else if ( isFunction( selector ) ) {
			return root.ready !== undefined ?
				root.ready( selector ) :

				// Execute immediately if ready is not present
				selector( jQuery );
		}

		return jQuery.makeArray( selector, this );
	};

// Give the init function the jQuery prototype for later instantiation
init.prototype = jQuery.fn;

// Initialize central reference
rootjQuery = jQuery( document );


var rparentsprev = /^(?:parents|prev(?:Until|All))/,

	// Methods guaranteed to produce a unique set when starting from a unique set
	guaranteedUnique = {
		children: true,
		contents: true,
		next: true,
		prev: true
	};

jQuery.fn.extend( {
	has: function( target ) {
		var targets = jQuery( target, this ),
			l = targets.length;

		return this.filter( function() {
			var i = 0;
			for ( ; i < l; i++ ) {
				if ( jQuery.contains( this, targets[ i ] ) ) {
					return true;
				}
			}
		} );
	},

	closest: function( selectors, context ) {
		var cur,
			i = 0,
			l = this.length,
			matched = [],
			targets = typeof selectors !== "string" && jQuery( selectors );

		// Positional selectors never match, since there's no _selection_ context
		if ( !rneedsContext.test( selectors ) ) {
			for ( ; i < l; i++ ) {
				for ( cur = this[ i ]; cur && cur !== context; cur = cur.parentNode ) {

					// Always skip document fragments
					if ( cur.nodeType < 11 && ( targets ?
						targets.index( cur ) > -1 :

						// Don't pass non-elements to Sizzle
						cur.nodeType === 1 &&
							jQuery.find.matchesSelector( cur, selectors ) ) ) {

						matched.push( cur );
						break;
					}
				}
			}
		}

		return this.pushStack( matched.length > 1 ? jQuery.uniqueSort( matched ) : matched );
	},

	// Determine the position of an element within the set
	index: function( elem ) {

		// No argument, return index in parent
		if ( !elem ) {
			return ( this[ 0 ] && this[ 0 ].parentNode ) ? this.first().prevAll().length : -1;
		}

		// Index in selector
		if ( typeof elem === "string" ) {
			return indexOf.call( jQuery( elem ), this[ 0 ] );
		}

		// Locate the position of the desired element
		return indexOf.call( this,

			// If it receives a jQuery object, the first element is used
			elem.jquery ? elem[ 0 ] : elem
		);
	},

	add: function( selector, context ) {
		return this.pushStack(
			jQuery.uniqueSort(
				jQuery.merge( this.get(), jQuery( selector, context ) )
			)
		);
	},

	addBack: function( selector ) {
		return this.add( selector == null ?
			this.prevObject : this.prevObject.filter( selector )
		);
	}
} );

function sibling( cur, dir ) {
	while ( ( cur = cur[ dir ] ) && cur.nodeType !== 1 ) {}
	return cur;
}

jQuery.each( {
	parent: function( elem ) {
		var parent = elem.parentNode;
		return parent && parent.nodeType !== 11 ? parent : null;
	},
	parents: function( elem ) {
		return dir( elem, "parentNode" );
	},
	parentsUntil: function( elem, i, until ) {
		return dir( elem, "parentNode", until );
	},
	next: function( elem ) {
		return sibling( elem, "nextSibling" );
	},
	prev: function( elem ) {
		return sibling( elem, "previousSibling" );
	},
	nextAll: function( elem ) {
		return dir( elem, "nextSibling" );
	},
	prevAll: function( elem ) {
		return dir( elem, "previousSibling" );
	},
	nextUntil: function( elem, i, until ) {
		return dir( elem, "nextSibling", until );
	},
	prevUntil: function( elem, i, until ) {
		return dir( elem, "previousSibling", until );
	},
	siblings: function( elem ) {
		return siblings( ( elem.parentNode || {} ).firstChild, elem );
	},
	children: function( elem ) {
		return siblings( elem.firstChild );
	},
	contents: function( elem ) {
        if ( nodeName( elem, "iframe" ) ) {
            return elem.contentDocument;
        }

        // Support: IE 9 - 11 only, iOS 7 only, Android Browser <=4.3 only
        // Treat the template element as a regular one in browsers that
        // don't support it.
        if ( nodeName( elem, "template" ) ) {
            elem = elem.content || elem;
        }

        return jQuery.merge( [], elem.childNodes );
	}
}, function( name, fn ) {
	jQuery.fn[ name ] = function( until, selector ) {
		var matched = jQuery.map( this, fn, until );

		if ( name.slice( -5 ) !== "Until" ) {
			selector = until;
		}

		if ( selector && typeof selector === "string" ) {
			matched = jQuery.filter( selector, matched );
		}

		if ( this.length > 1 ) {

			// Remove duplicates
			if ( !guaranteedUnique[ name ] ) {
				jQuery.uniqueSort( matched );
			}

			// Reverse order for parents* and prev-derivatives
			if ( rparentsprev.test( name ) ) {
				matched.reverse();
			}
		}

		return this.pushStack( matched );
	};
} );
var rnothtmlwhite = ( /[^\x20\t\r\n\f]+/g );



// Convert String-formatted options into Object-formatted ones
function createOptions( options ) {
	var object = {};
	jQuery.each( options.match( rnothtmlwhite ) || [], function( _, flag ) {
		object[ flag ] = true;
	} );
	return object;
}

/*
 * Create a callback list using the following parameters:
 *
 *	options: an optional list of space-separated options that will change how
 *			the callback list behaves or a more traditional option object
 *
 * By default a callback list will act like an event callback list and can be
 * "fired" multiple times.
 *
 * Possible options:
 *
 *	once:			will ensure the callback list can only be fired once (like a Deferred)
 *
 *	memory:			will keep track of previous values and will call any callback added
 *					after the list has been fired right away with the latest "memorized"
 *					values (like a Deferred)
 *
 *	unique:			will ensure a callback can only be added once (no duplicate in the list)
 *
 *	stopOnFalse:	interrupt callings when a callback returns false
 *
 */
jQuery.Callbacks = function( options ) {

	// Convert options from String-formatted to Object-formatted if needed
	// (we check in cache first)
	options = typeof options === "string" ?
		createOptions( options ) :
		jQuery.extend( {}, options );

	var // Flag to know if list is currently firing
		firing,

		// Last fire value for non-forgettable lists
		memory,

		// Flag to know if list was already fired
		fired,

		// Flag to prevent firing
		locked,

		// Actual callback list
		list = [],

		// Queue of execution data for repeatable lists
		queue = [],

		// Index of currently firing callback (modified by add/remove as needed)
		firingIndex = -1,

		// Fire callbacks
		fire = function() {

			// Enforce single-firing
			locked = locked || options.once;

			// Execute callbacks for all pending executions,
			// respecting firingIndex overrides and runtime changes
			fired = firing = true;
			for ( ; queue.length; firingIndex = -1 ) {
				memory = queue.shift();
				while ( ++firingIndex < list.length ) {

					// Run callback and check for early termination
					if ( list[ firingIndex ].apply( memory[ 0 ], memory[ 1 ] ) === false &&
						options.stopOnFalse ) {

						// Jump to end and forget the data so .add doesn't re-fire
						firingIndex = list.length;
						memory = false;
					}
				}
			}

			// Forget the data if we're done with it
			if ( !options.memory ) {
				memory = false;
			}

			firing = false;

			// Clean up if we're done firing for good
			if ( locked ) {

				// Keep an empty list if we have data for future add calls
				if ( memory ) {
					list = [];

				// Otherwise, this object is spent
				} else {
					list = "";
				}
			}
		},

		// Actual Callbacks object
		self = {

			// Add a callback or a collection of callbacks to the list
			add: function() {
				if ( list ) {

					// If we have memory from a past run, we should fire after adding
					if ( memory && !firing ) {
						firingIndex = list.length - 1;
						queue.push( memory );
					}

					( function add( args ) {
						jQuery.each( args, function( _, arg ) {
							if ( isFunction( arg ) ) {
								if ( !options.unique || !self.has( arg ) ) {
									list.push( arg );
								}
							} else if ( arg && arg.length && toType( arg ) !== "string" ) {

								// Inspect recursively
								add( arg );
							}
						} );
					} )( arguments );

					if ( memory && !firing ) {
						fire();
					}
				}
				return this;
			},

			// Remove a callback from the list
			remove: function() {
				jQuery.each( arguments, function( _, arg ) {
					var index;
					while ( ( index = jQuery.inArray( arg, list, index ) ) > -1 ) {
						list.splice( index, 1 );

						// Handle firing indexes
						if ( index <= firingIndex ) {
							firingIndex--;
						}
					}
				} );
				return this;
			},

			// Check if a given callback is in the list.
			// If no argument is given, return whether or not list has callbacks attached.
			has: function( fn ) {
				return fn ?
					jQuery.inArray( fn, list ) > -1 :
					list.length > 0;
			},

			// Remove all callbacks from the list
			empty: function() {
				if ( list ) {
					list = [];
				}
				return this;
			},

			// Disable .fire and .add
			// Abort any current/pending executions
			// Clear all callbacks and values
			disable: function() {
				locked = queue = [];
				list = memory = "";
				return this;
			},
			disabled: function() {
				return !list;
			},

			// Disable .fire
			// Also disable .add unless we have memory (since it would have no effect)
			// Abort any pending executions
			lock: function() {
				locked = queue = [];
				if ( !memory && !firing ) {
					list = memory = "";
				}
				return this;
			},
			locked: function() {
				return !!locked;
			},

			// Call all callbacks with the given context and arguments
			fireWith: function( context, args ) {
				if ( !locked ) {
					args = args || [];
					args = [ context, args.slice ? args.slice() : args ];
					queue.push( args );
					if ( !firing ) {
						fire();
					}
				}
				return this;
			},

			// Call all the callbacks with the given arguments
			fire: function() {
				self.fireWith( this, arguments );
				return this;
			},

			// To know if the callbacks have already been called at least once
			fired: function() {
				return !!fired;
			}
		};

	return self;
};


function Identity( v ) {
	return v;
}
function Thrower( ex ) {
	throw ex;
}

function adoptValue( value, resolve, reject, noValue ) {
	var method;

	try {

		// Check for promise aspect first to privilege synchronous behavior
		if ( value && isFunction( ( method = value.promise ) ) ) {
			method.call( value ).done( resolve ).fail( reject );

		// Other thenables
		} else if ( value && isFunction( ( method = value.then ) ) ) {
			method.call( value, resolve, reject );

		// Other non-thenables
		} else {

			// Control `resolve` arguments by letting Array#slice cast boolean `noValue` to integer:
			// * false: [ value ].slice( 0 ) => resolve( value )
			// * true: [ value ].slice( 1 ) => resolve()
			resolve.apply( undefined, [ value ].slice( noValue ) );
		}

	// For Promises/A+, convert exceptions into rejections
	// Since jQuery.when doesn't unwrap thenables, we can skip the extra checks appearing in
	// Deferred#then to conditionally suppress rejection.
	} catch ( value ) {

		// Support: Android 4.0 only
		// Strict mode functions invoked without .call/.apply get global-object context
		reject.apply( undefined, [ value ] );
	}
}

jQuery.extend( {

	Deferred: function( func ) {
		var tuples = [

				// action, add listener, callbacks,
				// ... .then handlers, argument index, [final state]
				[ "notify", "progress", jQuery.Callbacks( "memory" ),
					jQuery.Callbacks( "memory" ), 2 ],
				[ "resolve", "done", jQuery.Callbacks( "once memory" ),
					jQuery.Callbacks( "once memory" ), 0, "resolved" ],
				[ "reject", "fail", jQuery.Callbacks( "once memory" ),
					jQuery.Callbacks( "once memory" ), 1, "rejected" ]
			],
			state = "pending",
			promise = {
				state: function() {
					return state;
				},
				always: function() {
					deferred.done( arguments ).fail( arguments );
					return this;
				},
				"catch": function( fn ) {
					return promise.then( null, fn );
				},

				// Keep pipe for back-compat
				pipe: function( /* fnDone, fnFail, fnProgress */ ) {
					var fns = arguments;

					return jQuery.Deferred( function( newDefer ) {
						jQuery.each( tuples, function( i, tuple ) {

							// Map tuples (progress, done, fail) to arguments (done, fail, progress)
							var fn = isFunction( fns[ tuple[ 4 ] ] ) && fns[ tuple[ 4 ] ];

							// deferred.progress(function() { bind to newDefer or newDefer.notify })
							// deferred.done(function() { bind to newDefer or newDefer.resolve })
							// deferred.fail(function() { bind to newDefer or newDefer.reject })
							deferred[ tuple[ 1 ] ]( function() {
								var returned = fn && fn.apply( this, arguments );
								if ( returned && isFunction( returned.promise ) ) {
									returned.promise()
										.progress( newDefer.notify )
										.done( newDefer.resolve )
										.fail( newDefer.reject );
								} else {
									newDefer[ tuple[ 0 ] + "With" ](
										this,
										fn ? [ returned ] : arguments
									);
								}
							} );
						} );
						fns = null;
					} ).promise();
				},
				then: function( onFulfilled, onRejected, onProgress ) {
					var maxDepth = 0;
					function resolve( depth, deferred, handler, special ) {
						return function() {
							var that = this,
								args = arguments,
								mightThrow = function() {
									var returned, then;

									// Support: Promises/A+ section 2.3.3.3.3
									// https://promisesaplus.com/#point-59
									// Ignore double-resolution attempts
									if ( depth < maxDepth ) {
										return;
									}

									returned = handler.apply( that, args );

									// Support: Promises/A+ section 2.3.1
									// https://promisesaplus.com/#point-48
									if ( returned === deferred.promise() ) {
										throw new TypeError( "Thenable self-resolution" );
									}

									// Support: Promises/A+ sections 2.3.3.1, 3.5
									// https://promisesaplus.com/#point-54
									// https://promisesaplus.com/#point-75
									// Retrieve `then` only once
									then = returned &&

										// Support: Promises/A+ section 2.3.4
										// https://promisesaplus.com/#point-64
										// Only check objects and functions for thenability
										( typeof returned === "object" ||
											typeof returned === "function" ) &&
										returned.then;

									// Handle a returned thenable
									if ( isFunction( then ) ) {

										// Special processors (notify) just wait for resolution
										if ( special ) {
											then.call(
												returned,
												resolve( maxDepth, deferred, Identity, special ),
												resolve( maxDepth, deferred, Thrower, special )
											);

										// Normal processors (resolve) also hook into progress
										} else {

											// ...and disregard older resolution values
											maxDepth++;

											then.call(
												returned,
												resolve( maxDepth, deferred, Identity, special ),
												resolve( maxDepth, deferred, Thrower, special ),
												resolve( maxDepth, deferred, Identity,
													deferred.notifyWith )
											);
										}

									// Handle all other returned values
									} else {

										// Only substitute handlers pass on context
										// and multiple values (non-spec behavior)
										if ( handler !== Identity ) {
											that = undefined;
											args = [ returned ];
										}

										// Process the value(s)
										// Default process is resolve
										( special || deferred.resolveWith )( that, args );
									}
								},

								// Only normal processors (resolve) catch and reject exceptions
								process = special ?
									mightThrow :
									function() {
										try {
											mightThrow();
										} catch ( e ) {

											if ( jQuery.Deferred.exceptionHook ) {
												jQuery.Deferred.exceptionHook( e,
													process.stackTrace );
											}

											// Support: Promises/A+ section 2.3.3.3.4.1
											// https://promisesaplus.com/#point-61
											// Ignore post-resolution exceptions
											if ( depth + 1 >= maxDepth ) {

												// Only substitute handlers pass on context
												// and multiple values (non-spec behavior)
												if ( handler !== Thrower ) {
													that = undefined;
													args = [ e ];
												}

												deferred.rejectWith( that, args );
											}
										}
									};

							// Support: Promises/A+ section 2.3.3.3.1
							// https://promisesaplus.com/#point-57
							// Re-resolve promises immediately to dodge false rejection from
							// subsequent errors
							if ( depth ) {
								process();
							} else {

								// Call an optional hook to record the stack, in case of exception
								// since it's otherwise lost when execution goes async
								if ( jQuery.Deferred.getStackHook ) {
									process.stackTrace = jQuery.Deferred.getStackHook();
								}
								window.setTimeout( process );
							}
						};
					}

					return jQuery.Deferred( function( newDefer ) {

						// progress_handlers.add( ... )
						tuples[ 0 ][ 3 ].add(
							resolve(
								0,
								newDefer,
								isFunction( onProgress ) ?
									onProgress :
									Identity,
								newDefer.notifyWith
							)
						);

						// fulfilled_handlers.add( ... )
						tuples[ 1 ][ 3 ].add(
							resolve(
								0,
								newDefer,
								isFunction( onFulfilled ) ?
									onFulfilled :
									Identity
							)
						);

						// rejected_handlers.add( ... )
						tuples[ 2 ][ 3 ].add(
							resolve(
								0,
								newDefer,
								isFunction( onRejected ) ?
									onRejected :
									Thrower
							)
						);
					} ).promise();
				},

				// Get a promise for this deferred
				// If obj is provided, the promise aspect is added to the object
				promise: function( obj ) {
					return obj != null ? jQuery.extend( obj, promise ) : promise;
				}
			},
			deferred = {};

		// Add list-specific methods
		jQuery.each( tuples, function( i, tuple ) {
			var list = tuple[ 2 ],
				stateString = tuple[ 5 ];

			// promise.progress = list.add
			// promise.done = list.add
			// promise.fail = list.add
			promise[ tuple[ 1 ] ] = list.add;

			// Handle state
			if ( stateString ) {
				list.add(
					function() {

						// state = "resolved" (i.e., fulfilled)
						// state = "rejected"
						state = stateString;
					},

					// rejected_callbacks.disable
					// fulfilled_callbacks.disable
					tuples[ 3 - i ][ 2 ].disable,

					// rejected_handlers.disable
					// fulfilled_handlers.disable
					tuples[ 3 - i ][ 3 ].disable,

					// progress_callbacks.lock
					tuples[ 0 ][ 2 ].lock,

					// progress_handlers.lock
					tuples[ 0 ][ 3 ].lock
				);
			}

			// progress_handlers.fire
			// fulfilled_handlers.fire
			// rejected_handlers.fire
			list.add( tuple[ 3 ].fire );

			// deferred.notify = function() { deferred.notifyWith(...) }
			// deferred.resolve = function() { deferred.resolveWith(...) }
			// deferred.reject = function() { deferred.rejectWith(...) }
			deferred[ tuple[ 0 ] ] = function() {
				deferred[ tuple[ 0 ] + "With" ]( this === deferred ? undefined : this, arguments );
				return this;
			};

			// deferred.notifyWith = list.fireWith
			// deferred.resolveWith = list.fireWith
			// deferred.rejectWith = list.fireWith
			deferred[ tuple[ 0 ] + "With" ] = list.fireWith;
		} );

		// Make the deferred a promise
		promise.promise( deferred );

		// Call given func if any
		if ( func ) {
			func.call( deferred, deferred );
		}

		// All done!
		return deferred;
	},

	// Deferred helper
	when: function( singleValue ) {
		var

			// count of uncompleted subordinates
			remaining = arguments.length,

			// count of unprocessed arguments
			i = remaining,

			// subordinate fulfillment data
			resolveContexts = Array( i ),
			resolveValues = slice.call( arguments ),

			// the master Deferred
			master = jQuery.Deferred(),

			// subordinate callback factory
			updateFunc = function( i ) {
				return function( value ) {
					resolveContexts[ i ] = this;
					resolveValues[ i ] = arguments.length > 1 ? slice.call( arguments ) : value;
					if ( !( --remaining ) ) {
						master.resolveWith( resolveContexts, resolveValues );
					}
				};
			};

		// Single- and empty arguments are adopted like Promise.resolve
		if ( remaining <= 1 ) {
			adoptValue( singleValue, master.done( updateFunc( i ) ).resolve, master.reject,
				!remaining );

			// Use .then() to unwrap secondary thenables (cf. gh-3000)
			if ( master.state() === "pending" ||
				isFunction( resolveValues[ i ] && resolveValues[ i ].then ) ) {

				return master.then();
			}
		}

		// Multiple arguments are aggregated like Promise.all array elements
		while ( i-- ) {
			adoptValue( resolveValues[ i ], updateFunc( i ), master.reject );
		}

		return master.promise();
	}
} );


// These usually indicate a programmer mistake during development,
// warn about them ASAP rather than swallowing them by default.
var rerrorNames = /^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;

jQuery.Deferred.exceptionHook = function( error, stack ) {

	// Support: IE 8 - 9 only
	// Console exists when dev tools are open, which can happen at any time
	if ( window.console && window.console.warn && error && rerrorNames.test( error.name ) ) {
		window.console.warn( "jQuery.Deferred exception: " + error.message, error.stack, stack );
	}
};




jQuery.readyException = function( error ) {
	window.setTimeout( function() {
		throw error;
	} );
};




// The deferred used on DOM ready
var readyList = jQuery.Deferred();

jQuery.fn.ready = function( fn ) {

	readyList
		.then( fn )

		// Wrap jQuery.readyException in a function so that the lookup
		// happens at the time of error handling instead of callback
		// registration.
		.catch( function( error ) {
			jQuery.readyException( error );
		} );

	return this;
};

jQuery.extend( {

	// Is the DOM ready to be used? Set to true once it occurs.
	isReady: false,

	// A counter to track how many items to wait for before
	// the ready event fires. See #6781
	readyWait: 1,

	// Handle when the DOM is ready
	ready: function( wait ) {

		// Abort if there are pending holds or we're already ready
		if ( wait === true ? --jQuery.readyWait : jQuery.isReady ) {
			return;
		}

		// Remember that the DOM is ready
		jQuery.isReady = true;

		// If a normal DOM Ready event fired, decrement, and wait if need be
		if ( wait !== true && --jQuery.readyWait > 0 ) {
			return;
		}

		// If there are functions bound, to execute
		readyList.resolveWith( document, [ jQuery ] );
	}
} );

jQuery.ready.then = readyList.then;

// The ready event handler and self cleanup method
function completed() {
	document.removeEventListener( "DOMContentLoaded", completed );
	window.removeEventListener( "load", completed );
	jQuery.ready();
}

// Catch cases where $(document).ready() is called
// after the browser event has already occurred.
// Support: IE <=9 - 10 only
// Older IE sometimes signals "interactive" too soon
if ( document.readyState === "complete" ||
	( document.readyState !== "loading" && !document.documentElement.doScroll ) ) {

	// Handle it asynchronously to allow scripts the opportunity to delay ready
	window.setTimeout( jQuery.ready );

} else {

	// Use the handy event callback
	document.addEventListener( "DOMContentLoaded", completed );

	// A fallback to window.onload, that will always work
	window.addEventListener( "load", completed );
}




// Multifunctional method to get and set values of a collection
// The value/s can optionally be executed if it's a function
var access = function( elems, fn, key, value, chainable, emptyGet, raw ) {
	var i = 0,
		len = elems.length,
		bulk = key == null;

	// Sets many values
	if ( toType( key ) === "object" ) {
		chainable = true;
		for ( i in key ) {
			access( elems, fn, i, key[ i ], true, emptyGet, raw );
		}

	// Sets one value
	} else if ( value !== undefined ) {
		chainable = true;

		if ( !isFunction( value ) ) {
			raw = true;
		}

		if ( bulk ) {

			// Bulk operations run against the entire set
			if ( raw ) {
				fn.call( elems, value );
				fn = null;

			// ...except when executing function values
			} else {
				bulk = fn;
				fn = function( elem, key, value ) {
					return bulk.call( jQuery( elem ), value );
				};
			}
		}

		if ( fn ) {
			for ( ; i < len; i++ ) {
				fn(
					elems[ i ], key, raw ?
					value :
					value.call( elems[ i ], i, fn( elems[ i ], key ) )
				);
			}
		}
	}

	if ( chainable ) {
		return elems;
	}

	// Gets
	if ( bulk ) {
		return fn.call( elems );
	}

	return len ? fn( elems[ 0 ], key ) : emptyGet;
};


// Matches dashed string for camelizing
var rmsPrefix = /^-ms-/,
	rdashAlpha = /-([a-z])/g;

// Used by camelCase as callback to replace()
function fcamelCase( all, letter ) {
	return letter.toUpperCase();
}

// Convert dashed to camelCase; used by the css and data modules
// Support: IE <=9 - 11, Edge 12 - 15
// Microsoft forgot to hump their vendor prefix (#9572)
function camelCase( string ) {
	return string.replace( rmsPrefix, "ms-" ).replace( rdashAlpha, fcamelCase );
}
var acceptData = function( owner ) {

	// Accepts only:
	//  - Node
	//    - Node.ELEMENT_NODE
	//    - Node.DOCUMENT_NODE
	//  - Object
	//    - Any
	return owner.nodeType === 1 || owner.nodeType === 9 || !( +owner.nodeType );
};




function Data() {
	this.expando = jQuery.expando + Data.uid++;
}

Data.uid = 1;

Data.prototype = {

	cache: function( owner ) {

		// Check if the owner object already has a cache
		var value = owner[ this.expando ];

		// If not, create one
		if ( !value ) {
			value = {};

			// We can accept data for non-element nodes in modern browsers,
			// but we should not, see #8335.
			// Always return an empty object.
			if ( acceptData( owner ) ) {

				// If it is a node unlikely to be stringify-ed or looped over
				// use plain assignment
				if ( owner.nodeType ) {
					owner[ this.expando ] = value;

				// Otherwise secure it in a non-enumerable property
				// configurable must be true to allow the property to be
				// deleted when data is removed
				} else {
					Object.defineProperty( owner, this.expando, {
						value: value,
						configurable: true
					} );
				}
			}
		}

		return value;
	},
	set: function( owner, data, value ) {
		var prop,
			cache = this.cache( owner );

		// Handle: [ owner, key, value ] args
		// Always use camelCase key (gh-2257)
		if ( typeof data === "string" ) {
			cache[ camelCase( data ) ] = value;

		// Handle: [ owner, { properties } ] args
		} else {

			// Copy the properties one-by-one to the cache object
			for ( prop in data ) {
				cache[ camelCase( prop ) ] = data[ prop ];
			}
		}
		return cache;
	},
	get: function( owner, key ) {
		return key === undefined ?
			this.cache( owner ) :

			// Always use camelCase key (gh-2257)
			owner[ this.expando ] && owner[ this.expando ][ camelCase( key ) ];
	},
	access: function( owner, key, value ) {

		// In cases where either:
		//
		//   1. No key was specified
		//   2. A string key was specified, but no value provided
		//
		// Take the "read" path and allow the get method to determine
		// which value to return, respectively either:
		//
		//   1. The entire cache object
		//   2. The data stored at the key
		//
		if ( key === undefined ||
				( ( key && typeof key === "string" ) && value === undefined ) ) {

			return this.get( owner, key );
		}

		// When the key is not a string, or both a key and value
		// are specified, set or extend (existing objects) with either:
		//
		//   1. An object of properties
		//   2. A key and value
		//
		this.set( owner, key, value );

		// Since the "set" path can have two possible entry points
		// return the expected data based on which path was taken[*]
		return value !== undefined ? value : key;
	},
	remove: function( owner, key ) {
		var i,
			cache = owner[ this.expando ];

		if ( cache === undefined ) {
			return;
		}

		if ( key !== undefined ) {

			// Support array or space separated string of keys
			if ( Array.isArray( key ) ) {

				// If key is an array of keys...
				// We always set camelCase keys, so remove that.
				key = key.map( camelCase );
			} else {
				key = camelCase( key );

				// If a key with the spaces exists, use it.
				// Otherwise, create an array by matching non-whitespace
				key = key in cache ?
					[ key ] :
					( key.match( rnothtmlwhite ) || [] );
			}

			i = key.length;

			while ( i-- ) {
				delete cache[ key[ i ] ];
			}
		}

		// Remove the expando if there's no more data
		if ( key === undefined || jQuery.isEmptyObject( cache ) ) {

			// Support: Chrome <=35 - 45
			// Webkit & Blink performance suffers when deleting properties
			// from DOM nodes, so set to undefined instead
			// https://bugs.chromium.org/p/chromium/issues/detail?id=378607 (bug restricted)
			if ( owner.nodeType ) {
				owner[ this.expando ] = undefined;
			} else {
				delete owner[ this.expando ];
			}
		}
	},
	hasData: function( owner ) {
		var cache = owner[ this.expando ];
		return cache !== undefined && !jQuery.isEmptyObject( cache );
	}
};
var dataPriv = new Data();

var dataUser = new Data();



//	Implementation Summary
//
//	1. Enforce API surface and semantic compatibility with 1.9.x branch
//	2. Improve the module's maintainability by reducing the storage
//		paths to a single mechanism.
//	3. Use the same single mechanism to support "private" and "user" data.
//	4. _Never_ expose "private" data to user code (TODO: Drop _data, _removeData)
//	5. Avoid exposing implementation details on user objects (eg. expando properties)
//	6. Provide a clear path for implementation upgrade to WeakMap in 2014

var rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,
	rmultiDash = /[A-Z]/g;

function getData( data ) {
	if ( data === "true" ) {
		return true;
	}

	if ( data === "false" ) {
		return false;
	}

	if ( data === "null" ) {
		return null;
	}

	// Only convert to a number if it doesn't change the string
	if ( data === +data + "" ) {
		return +data;
	}

	if ( rbrace.test( data ) ) {
		return JSON.parse( data );
	}

	return data;
}

function dataAttr( elem, key, data ) {
	var name;

	// If nothing was found internally, try to fetch any
	// data from the HTML5 data-* attribute
	if ( data === undefined && elem.nodeType === 1 ) {
		name = "data-" + key.replace( rmultiDash, "-$&" ).toLowerCase();
		data = elem.getAttribute( name );

		if ( typeof data === "string" ) {
			try {
				data = getData( data );
			} catch ( e ) {}

			// Make sure we set the data so it isn't changed later
			dataUser.set( elem, key, data );
		} else {
			data = undefined;
		}
	}
	return data;
}

jQuery.extend( {
	hasData: function( elem ) {
		return dataUser.hasData( elem ) || dataPriv.hasData( elem );
	},

	data: function( elem, name, data ) {
		return dataUser.access( elem, name, data );
	},

	removeData: function( elem, name ) {
		dataUser.remove( elem, name );
	},

	// TODO: Now that all calls to _data and _removeData have been replaced
	// with direct calls to dataPriv methods, these can be deprecated.
	_data: function( elem, name, data ) {
		return dataPriv.access( elem, name, data );
	},

	_removeData: function( elem, name ) {
		dataPriv.remove( elem, name );
	}
} );

jQuery.fn.extend( {
	data: function( key, value ) {
		var i, name, data,
			elem = this[ 0 ],
			attrs = elem && elem.attributes;

		// Gets all values
		if ( key === undefined ) {
			if ( this.length ) {
				data = dataUser.get( elem );

				if ( elem.nodeType === 1 && !dataPriv.get( elem, "hasDataAttrs" ) ) {
					i = attrs.length;
					while ( i-- ) {

						// Support: IE 11 only
						// The attrs elements can be null (#14894)
						if ( attrs[ i ] ) {
							name = attrs[ i ].name;
							if ( name.indexOf( "data-" ) === 0 ) {
								name = camelCase( name.slice( 5 ) );
								dataAttr( elem, name, data[ name ] );
							}
						}
					}
					dataPriv.set( elem, "hasDataAttrs", true );
				}
			}

			return data;
		}

		// Sets multiple values
		if ( typeof key === "object" ) {
			return this.each( function() {
				dataUser.set( this, key );
			} );
		}

		return access( this, function( value ) {
			var data;

			// The calling jQuery object (element matches) is not empty
			// (and therefore has an element appears at this[ 0 ]) and the
			// `value` parameter was not undefined. An empty jQuery object
			// will result in `undefined` for elem = this[ 0 ] which will
			// throw an exception if an attempt to read a data cache is made.
			if ( elem && value === undefined ) {

				// Attempt to get data from the cache
				// The key will always be camelCased in Data
				data = dataUser.get( elem, key );
				if ( data !== undefined ) {
					return data;
				}

				// Attempt to "discover" the data in
				// HTML5 custom data-* attrs
				data = dataAttr( elem, key );
				if ( data !== undefined ) {
					return data;
				}

				// We tried really hard, but the data doesn't exist.
				return;
			}

			// Set the data...
			this.each( function() {

				// We always store the camelCased key
				dataUser.set( this, key, value );
			} );
		}, null, value, arguments.length > 1, null, true );
	},

	removeData: function( key ) {
		return this.each( function() {
			dataUser.remove( this, key );
		} );
	}
} );


jQuery.extend( {
	queue: function( elem, type, data ) {
		var queue;

		if ( elem ) {
			type = ( type || "fx" ) + "queue";
			queue = dataPriv.get( elem, type );

			// Speed up dequeue by getting out quickly if this is just a lookup
			if ( data ) {
				if ( !queue || Array.isArray( data ) ) {
					queue = dataPriv.access( elem, type, jQuery.makeArray( data ) );
				} else {
					queue.push( data );
				}
			}
			return queue || [];
		}
	},

	dequeue: function( elem, type ) {
		type = type || "fx";

		var queue = jQuery.queue( elem, type ),
			startLength = queue.length,
			fn = queue.shift(),
			hooks = jQuery._queueHooks( elem, type ),
			next = function() {
				jQuery.dequeue( elem, type );
			};

		// If the fx queue is dequeued, always remove the progress sentinel
		if ( fn === "inprogress" ) {
			fn = queue.shift();
			startLength--;
		}

		if ( fn ) {

			// Add a progress sentinel to prevent the fx queue from being
			// automatically dequeued
			if ( type === "fx" ) {
				queue.unshift( "inprogress" );
			}

			// Clear up the last queue stop function
			delete hooks.stop;
			fn.call( elem, next, hooks );
		}

		if ( !startLength && hooks ) {
			hooks.empty.fire();
		}
	},

	// Not public - generate a queueHooks object, or return the current one
	_queueHooks: function( elem, type ) {
		var key = type + "queueHooks";
		return dataPriv.get( elem, key ) || dataPriv.access( elem, key, {
			empty: jQuery.Callbacks( "once memory" ).add( function() {
				dataPriv.remove( elem, [ type + "queue", key ] );
			} )
		} );
	}
} );

jQuery.fn.extend( {
	queue: function( type, data ) {
		var setter = 2;

		if ( typeof type !== "string" ) {
			data = type;
			type = "fx";
			setter--;
		}

		if ( arguments.length < setter ) {
			return jQuery.queue( this[ 0 ], type );
		}

		return data === undefined ?
			this :
			this.each( function() {
				var queue = jQuery.queue( this, type, data );

				// Ensure a hooks for this queue
				jQuery._queueHooks( this, type );

				if ( type === "fx" && queue[ 0 ] !== "inprogress" ) {
					jQuery.dequeue( this, type );
				}
			} );
	},
	dequeue: function( type ) {
		return this.each( function() {
			jQuery.dequeue( this, type );
		} );
	},
	clearQueue: function( type ) {
		return this.queue( type || "fx", [] );
	},

	// Get a promise resolved when queues of a certain type
	// are emptied (fx is the type by default)
	promise: function( type, obj ) {
		var tmp,
			count = 1,
			defer = jQuery.Deferred(),
			elements = this,
			i = this.length,
			resolve = function() {
				if ( !( --count ) ) {
					defer.resolveWith( elements, [ elements ] );
				}
			};

		if ( typeof type !== "string" ) {
			obj = type;
			type = undefined;
		}
		type = type || "fx";

		while ( i-- ) {
			tmp = dataPriv.get( elements[ i ], type + "queueHooks" );
			if ( tmp && tmp.empty ) {
				count++;
				tmp.empty.add( resolve );
			}
		}
		resolve();
		return defer.promise( obj );
	}
} );
var pnum = ( /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/ ).source;

var rcssNum = new RegExp( "^(?:([+-])=|)(" + pnum + ")([a-z%]*)$", "i" );


var cssExpand = [ "Top", "Right", "Bottom", "Left" ];

var isHiddenWithinTree = function( elem, el ) {

		// isHiddenWithinTree might be called from jQuery#filter function;
		// in that case, element will be second argument
		elem = el || elem;

		// Inline style trumps all
		return elem.style.display === "none" ||
			elem.style.display === "" &&

			// Otherwise, check computed style
			// Support: Firefox <=43 - 45
			// Disconnected elements can have computed display: none, so first confirm that elem is
			// in the document.
			jQuery.contains( elem.ownerDocument, elem ) &&

			jQuery.css( elem, "display" ) === "none";
	};

var swap = function( elem, options, callback, args ) {
	var ret, name,
		old = {};

	// Remember the old values, and insert the new ones
	for ( name in options ) {
		old[ name ] = elem.style[ name ];
		elem.style[ name ] = options[ name ];
	}

	ret = callback.apply( elem, args || [] );

	// Revert the old values
	for ( name in options ) {
		elem.style[ name ] = old[ name ];
	}

	return ret;
};




function adjustCSS( elem, prop, valueParts, tween ) {
	var adjusted, scale,
		maxIterations = 20,
		currentValue = tween ?
			function() {
				return tween.cur();
			} :
			function() {
				return jQuery.css( elem, prop, "" );
			},
		initial = currentValue(),
		unit = valueParts && valueParts[ 3 ] || ( jQuery.cssNumber[ prop ] ? "" : "px" ),

		// Starting value computation is required for potential unit mismatches
		initialInUnit = ( jQuery.cssNumber[ prop ] || unit !== "px" && +initial ) &&
			rcssNum.exec( jQuery.css( elem, prop ) );

	if ( initialInUnit && initialInUnit[ 3 ] !== unit ) {

		// Support: Firefox <=54
		// Halve the iteration target value to prevent interference from CSS upper bounds (gh-2144)
		initial = initial / 2;

		// Trust units reported by jQuery.css
		unit = unit || initialInUnit[ 3 ];

		// Iteratively approximate from a nonzero starting point
		initialInUnit = +initial || 1;

		while ( maxIterations-- ) {

			// Evaluate and update our best guess (doubling guesses that zero out).
			// Finish if the scale equals or crosses 1 (making the old*new product non-positive).
			jQuery.style( elem, prop, initialInUnit + unit );
			if ( ( 1 - scale ) * ( 1 - ( scale = currentValue() / initial || 0.5 ) ) <= 0 ) {
				maxIterations = 0;
			}
			initialInUnit = initialInUnit / scale;

		}

		initialInUnit = initialInUnit * 2;
		jQuery.style( elem, prop, initialInUnit + unit );

		// Make sure we update the tween properties later on
		valueParts = valueParts || [];
	}

	if ( valueParts ) {
		initialInUnit = +initialInUnit || +initial || 0;

		// Apply relative offset (+=/-=) if specified
		adjusted = valueParts[ 1 ] ?
			initialInUnit + ( valueParts[ 1 ] + 1 ) * valueParts[ 2 ] :
			+valueParts[ 2 ];
		if ( tween ) {
			tween.unit = unit;
			tween.start = initialInUnit;
			tween.end = adjusted;
		}
	}
	return adjusted;
}


var defaultDisplayMap = {};

function getDefaultDisplay( elem ) {
	var temp,
		doc = elem.ownerDocument,
		nodeName = elem.nodeName,
		display = defaultDisplayMap[ nodeName ];

	if ( display ) {
		return display;
	}

	temp = doc.body.appendChild( doc.createElement( nodeName ) );
	display = jQuery.css( temp, "display" );

	temp.parentNode.removeChild( temp );

	if ( display === "none" ) {
		display = "block";
	}
	defaultDisplayMap[ nodeName ] = display;

	return display;
}

function showHide( elements, show ) {
	var display, elem,
		values = [],
		index = 0,
		length = elements.length;

	// Determine new display value for elements that need to change
	for ( ; index < length; index++ ) {
		elem = elements[ index ];
		if ( !elem.style ) {
			continue;
		}

		display = elem.style.display;
		if ( show ) {

			// Since we force visibility upon cascade-hidden elements, an immediate (and slow)
			// check is required in this first loop unless we have a nonempty display value (either
			// inline or about-to-be-restored)
			if ( display === "none" ) {
				values[ index ] = dataPriv.get( elem, "display" ) || null;
				if ( !values[ index ] ) {
					elem.style.display = "";
				}
			}
			if ( elem.style.display === "" && isHiddenWithinTree( elem ) ) {
				values[ index ] = getDefaultDisplay( elem );
			}
		} else {
			if ( display !== "none" ) {
				values[ index ] = "none";

				// Remember what we're overwriting
				dataPriv.set( elem, "display", display );
			}
		}
	}

	// Set the display of the elements in a second loop to avoid constant reflow
	for ( index = 0; index < length; index++ ) {
		if ( values[ index ] != null ) {
			elements[ index ].style.display = values[ index ];
		}
	}

	return elements;
}

jQuery.fn.extend( {
	show: function() {
		return showHide( this, true );
	},
	hide: function() {
		return showHide( this );
	},
	toggle: function( state ) {
		if ( typeof state === "boolean" ) {
			return state ? this.show() : this.hide();
		}

		return this.each( function() {
			if ( isHiddenWithinTree( this ) ) {
				jQuery( this ).show();
			} else {
				jQuery( this ).hide();
			}
		} );
	}
} );
var rcheckableType = ( /^(?:checkbox|radio)$/i );

var rtagName = ( /<([a-z][^\/\0>\x20\t\r\n\f]+)/i );

var rscriptType = ( /^$|^module$|\/(?:java|ecma)script/i );



// We have to close these tags to support XHTML (#13200)
var wrapMap = {

	// Support: IE <=9 only
	option: [ 1, "<select multiple='multiple'>", "</select>" ],

	// XHTML parsers do not magically insert elements in the
	// same way that tag soup parsers do. So we cannot shorten
	// this by omitting <tbody> or other required elements.
	thead: [ 1, "<table>", "</table>" ],
	col: [ 2, "<table><colgroup>", "</colgroup></table>" ],
	tr: [ 2, "<table><tbody>", "</tbody></table>" ],
	td: [ 3, "<table><tbody><tr>", "</tr></tbody></table>" ],

	_default: [ 0, "", "" ]
};

// Support: IE <=9 only
wrapMap.optgroup = wrapMap.option;

wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
wrapMap.th = wrapMap.td;


function getAll( context, tag ) {

	// Support: IE <=9 - 11 only
	// Use typeof to avoid zero-argument method invocation on host objects (#15151)
	var ret;

	if ( typeof context.getElementsByTagName !== "undefined" ) {
		ret = context.getElementsByTagName( tag || "*" );

	} else if ( typeof context.querySelectorAll !== "undefined" ) {
		ret = context.querySelectorAll( tag || "*" );

	} else {
		ret = [];
	}

	if ( tag === undefined || tag && nodeName( context, tag ) ) {
		return jQuery.merge( [ context ], ret );
	}

	return ret;
}


// Mark scripts as having already been evaluated
function setGlobalEval( elems, refElements ) {
	var i = 0,
		l = elems.length;

	for ( ; i < l; i++ ) {
		dataPriv.set(
			elems[ i ],
			"globalEval",
			!refElements || dataPriv.get( refElements[ i ], "globalEval" )
		);
	}
}


var rhtml = /<|&#?\w+;/;

function buildFragment( elems, context, scripts, selection, ignored ) {
	var elem, tmp, tag, wrap, contains, j,
		fragment = context.createDocumentFragment(),
		nodes = [],
		i = 0,
		l = elems.length;

	for ( ; i < l; i++ ) {
		elem = elems[ i ];

		if ( elem || elem === 0 ) {

			// Add nodes directly
			if ( toType( elem ) === "object" ) {

				// Support: Android <=4.0 only, PhantomJS 1 only
				// push.apply(_, arraylike) throws on ancient WebKit
				jQuery.merge( nodes, elem.nodeType ? [ elem ] : elem );

			// Convert non-html into a text node
			} else if ( !rhtml.test( elem ) ) {
				nodes.push( context.createTextNode( elem ) );

			// Convert html into DOM nodes
			} else {
				tmp = tmp || fragment.appendChild( context.createElement( "div" ) );

				// Deserialize a standard representation
				tag = ( rtagName.exec( elem ) || [ "", "" ] )[ 1 ].toLowerCase();
				wrap = wrapMap[ tag ] || wrapMap._default;
				tmp.innerHTML = wrap[ 1 ] + jQuery.htmlPrefilter( elem ) + wrap[ 2 ];

				// Descend through wrappers to the right content
				j = wrap[ 0 ];
				while ( j-- ) {
					tmp = tmp.lastChild;
				}

				// Support: Android <=4.0 only, PhantomJS 1 only
				// push.apply(_, arraylike) throws on ancient WebKit
				jQuery.merge( nodes, tmp.childNodes );

				// Remember the top-level container
				tmp = fragment.firstChild;

				// Ensure the created nodes are orphaned (#12392)
				tmp.textContent = "";
			}
		}
	}

	// Remove wrapper from fragment
	fragment.textContent = "";

	i = 0;
	while ( ( elem = nodes[ i++ ] ) ) {

		// Skip elements already in the context collection (trac-4087)
		if ( selection && jQuery.inArray( elem, selection ) > -1 ) {
			if ( ignored ) {
				ignored.push( elem );
			}
			continue;
		}

		contains = jQuery.contains( elem.ownerDocument, elem );

		// Append to fragment
		tmp = getAll( fragment.appendChild( elem ), "script" );

		// Preserve script evaluation history
		if ( contains ) {
			setGlobalEval( tmp );
		}

		// Capture executables
		if ( scripts ) {
			j = 0;
			while ( ( elem = tmp[ j++ ] ) ) {
				if ( rscriptType.test( elem.type || "" ) ) {
					scripts.push( elem );
				}
			}
		}
	}

	return fragment;
}


( function() {
	var fragment = document.createDocumentFragment(),
		div = fragment.appendChild( document.createElement( "div" ) ),
		input = document.createElement( "input" );

	// Support: Android 4.0 - 4.3 only
	// Check state lost if the name is set (#11217)
	// Support: Windows Web Apps (WWA)
	// `name` and `type` must use .setAttribute for WWA (#14901)
	input.setAttribute( "type", "radio" );
	input.setAttribute( "checked", "checked" );
	input.setAttribute( "name", "t" );

	div.appendChild( input );

	// Support: Android <=4.1 only
	// Older WebKit doesn't clone checked state correctly in fragments
	support.checkClone = div.cloneNode( true ).cloneNode( true ).lastChild.checked;

	// Support: IE <=11 only
	// Make sure textarea (and checkbox) defaultValue is properly cloned
	div.innerHTML = "<textarea>x</textarea>";
	support.noCloneChecked = !!div.cloneNode( true ).lastChild.defaultValue;
} )();
var documentElement = document.documentElement;



var
	rkeyEvent = /^key/,
	rmouseEvent = /^(?:mouse|pointer|contextmenu|drag|drop)|click/,
	rtypenamespace = /^([^.]*)(?:\.(.+)|)/;

function returnTrue() {
	return true;
}

function returnFalse() {
	return false;
}

// Support: IE <=9 only
// See #13393 for more info
function safeActiveElement() {
	try {
		return document.activeElement;
	} catch ( err ) { }
}

function on( elem, types, selector, data, fn, one ) {
	var origFn, type;

	// Types can be a map of types/handlers
	if ( typeof types === "object" ) {

		// ( types-Object, selector, data )
		if ( typeof selector !== "string" ) {

			// ( types-Object, data )
			data = data || selector;
			selector = undefined;
		}
		for ( type in types ) {
			on( elem, type, selector, data, types[ type ], one );
		}
		return elem;
	}

	if ( data == null && fn == null ) {

		// ( types, fn )
		fn = selector;
		data = selector = undefined;
	} else if ( fn == null ) {
		if ( typeof selector === "string" ) {

			// ( types, selector, fn )
			fn = data;
			data = undefined;
		} else {

			// ( types, data, fn )
			fn = data;
			data = selector;
			selector = undefined;
		}
	}
	if ( fn === false ) {
		fn = returnFalse;
	} else if ( !fn ) {
		return elem;
	}

	if ( one === 1 ) {
		origFn = fn;
		fn = function( event ) {

			// Can use an empty set, since event contains the info
			jQuery().off( event );
			return origFn.apply( this, arguments );
		};

		// Use same guid so caller can remove using origFn
		fn.guid = origFn.guid || ( origFn.guid = jQuery.guid++ );
	}
	return elem.each( function() {
		jQuery.event.add( this, types, fn, data, selector );
	} );
}

/*
 * Helper functions for managing events -- not part of the public interface.
 * Props to Dean Edwards' addEvent library for many of the ideas.
 */
jQuery.event = {

	global: {},

	add: function( elem, types, handler, data, selector ) {

		var handleObjIn, eventHandle, tmp,
			events, t, handleObj,
			special, handlers, type, namespaces, origType,
			elemData = dataPriv.get( elem );

		// Don't attach events to noData or text/comment nodes (but allow plain objects)
		if ( !elemData ) {
			return;
		}

		// Caller can pass in an object of custom data in lieu of the handler
		if ( handler.handler ) {
			handleObjIn = handler;
			handler = handleObjIn.handler;
			selector = handleObjIn.selector;
		}

		// Ensure that invalid selectors throw exceptions at attach time
		// Evaluate against documentElement in case elem is a non-element node (e.g., document)
		if ( selector ) {
			jQuery.find.matchesSelector( documentElement, selector );
		}

		// Make sure that the handler has a unique ID, used to find/remove it later
		if ( !handler.guid ) {
			handler.guid = jQuery.guid++;
		}

		// Init the element's event structure and main handler, if this is the first
		if ( !( events = elemData.events ) ) {
			events = elemData.events = {};
		}
		if ( !( eventHandle = elemData.handle ) ) {
			eventHandle = elemData.handle = function( e ) {

				// Discard the second event of a jQuery.event.trigger() and
				// when an event is called after a page has unloaded
				return typeof jQuery !== "undefined" && jQuery.event.triggered !== e.type ?
					jQuery.event.dispatch.apply( elem, arguments ) : undefined;
			};
		}

		// Handle multiple events separated by a space
		types = ( types || "" ).match( rnothtmlwhite ) || [ "" ];
		t = types.length;
		while ( t-- ) {
			tmp = rtypenamespace.exec( types[ t ] ) || [];
			type = origType = tmp[ 1 ];
			namespaces = ( tmp[ 2 ] || "" ).split( "." ).sort();

			// There *must* be a type, no attaching namespace-only handlers
			if ( !type ) {
				continue;
			}

			// If event changes its type, use the special event handlers for the changed type
			special = jQuery.event.special[ type ] || {};

			// If selector defined, determine special event api type, otherwise given type
			type = ( selector ? special.delegateType : special.bindType ) || type;

			// Update special based on newly reset type
			special = jQuery.event.special[ type ] || {};

			// handleObj is passed to all event handlers
			handleObj = jQuery.extend( {
				type: type,
				origType: origType,
				data: data,
				handler: handler,
				guid: handler.guid,
				selector: selector,
				needsContext: selector && jQuery.expr.match.needsContext.test( selector ),
				namespace: namespaces.join( "." )
			}, handleObjIn );

			// Init the event handler queue if we're the first
			if ( !( handlers = events[ type ] ) ) {
				handlers = events[ type ] = [];
				handlers.delegateCount = 0;

				// Only use addEventListener if the special events handler returns false
				if ( !special.setup ||
					special.setup.call( elem, data, namespaces, eventHandle ) === false ) {

					if ( elem.addEventListener ) {
						elem.addEventListener( type, eventHandle );
					}
				}
			}

			if ( special.add ) {
				special.add.call( elem, handleObj );

				if ( !handleObj.handler.guid ) {
					handleObj.handler.guid = handler.guid;
				}
			}

			// Add to the element's handler list, delegates in front
			if ( selector ) {
				handlers.splice( handlers.delegateCount++, 0, handleObj );
			} else {
				handlers.push( handleObj );
			}

			// Keep track of which events have ever been used, for event optimization
			jQuery.event.global[ type ] = true;
		}

	},

	// Detach an event or set of events from an element
	remove: function( elem, types, handler, selector, mappedTypes ) {

		var j, origCount, tmp,
			events, t, handleObj,
			special, handlers, type, namespaces, origType,
			elemData = dataPriv.hasData( elem ) && dataPriv.get( elem );

		if ( !elemData || !( events = elemData.events ) ) {
			return;
		}

		// Once for each type.namespace in types; type may be omitted
		types = ( types || "" ).match( rnothtmlwhite ) || [ "" ];
		t = types.length;
		while ( t-- ) {
			tmp = rtypenamespace.exec( types[ t ] ) || [];
			type = origType = tmp[ 1 ];
			namespaces = ( tmp[ 2 ] || "" ).split( "." ).sort();

			// Unbind all events (on this namespace, if provided) for the element
			if ( !type ) {
				for ( type in events ) {
					jQuery.event.remove( elem, type + types[ t ], handler, selector, true );
				}
				continue;
			}

			special = jQuery.event.special[ type ] || {};
			type = ( selector ? special.delegateType : special.bindType ) || type;
			handlers = events[ type ] || [];
			tmp = tmp[ 2 ] &&
				new RegExp( "(^|\\.)" + namespaces.join( "\\.(?:.*\\.|)" ) + "(\\.|$)" );

			// Remove matching events
			origCount = j = handlers.length;
			while ( j-- ) {
				handleObj = handlers[ j ];

				if ( ( mappedTypes || origType === handleObj.origType ) &&
					( !handler || handler.guid === handleObj.guid ) &&
					( !tmp || tmp.test( handleObj.namespace ) ) &&
					( !selector || selector === handleObj.selector ||
						selector === "**" && handleObj.selector ) ) {
					handlers.splice( j, 1 );

					if ( handleObj.selector ) {
						handlers.delegateCount--;
					}
					if ( special.remove ) {
						special.remove.call( elem, handleObj );
					}
				}
			}

			// Remove generic event handler if we removed something and no more handlers exist
			// (avoids potential for endless recursion during removal of special event handlers)
			if ( origCount && !handlers.length ) {
				if ( !special.teardown ||
					special.teardown.call( elem, namespaces, elemData.handle ) === false ) {

					jQuery.removeEvent( elem, type, elemData.handle );
				}

				delete events[ type ];
			}
		}

		// Remove data and the expando if it's no longer used
		if ( jQuery.isEmptyObject( events ) ) {
			dataPriv.remove( elem, "handle events" );
		}
	},

	dispatch: function( nativeEvent ) {

		// Make a writable jQuery.Event from the native event object
		var event = jQuery.event.fix( nativeEvent );

		var i, j, ret, matched, handleObj, handlerQueue,
			args = new Array( arguments.length ),
			handlers = ( dataPriv.get( this, "events" ) || {} )[ event.type ] || [],
			special = jQuery.event.special[ event.type ] || {};

		// Use the fix-ed jQuery.Event rather than the (read-only) native event
		args[ 0 ] = event;

		for ( i = 1; i < arguments.length; i++ ) {
			args[ i ] = arguments[ i ];
		}

		event.delegateTarget = this;

		// Call the preDispatch hook for the mapped type, and let it bail if desired
		if ( special.preDispatch && special.preDispatch.call( this, event ) === false ) {
			return;
		}

		// Determine handlers
		handlerQueue = jQuery.event.handlers.call( this, event, handlers );

		// Run delegates first; they may want to stop propagation beneath us
		i = 0;
		while ( ( matched = handlerQueue[ i++ ] ) && !event.isPropagationStopped() ) {
			event.currentTarget = matched.elem;

			j = 0;
			while ( ( handleObj = matched.handlers[ j++ ] ) &&
				!event.isImmediatePropagationStopped() ) {

				// Triggered event must either 1) have no namespace, or 2) have namespace(s)
				// a subset or equal to those in the bound event (both can have no namespace).
				if ( !event.rnamespace || event.rnamespace.test( handleObj.namespace ) ) {

					event.handleObj = handleObj;
					event.data = handleObj.data;

					ret = ( ( jQuery.event.special[ handleObj.origType ] || {} ).handle ||
						handleObj.handler ).apply( matched.elem, args );

					if ( ret !== undefined ) {
						if ( ( event.result = ret ) === false ) {
							event.preventDefault();
							event.stopPropagation();
						}
					}
				}
			}
		}

		// Call the postDispatch hook for the mapped type
		if ( special.postDispatch ) {
			special.postDispatch.call( this, event );
		}

		return event.result;
	},

	handlers: function( event, handlers ) {
		var i, handleObj, sel, matchedHandlers, matchedSelectors,
			handlerQueue = [],
			delegateCount = handlers.delegateCount,
			cur = event.target;

		// Find delegate handlers
		if ( delegateCount &&

			// Support: IE <=9
			// Black-hole SVG <use> instance trees (trac-13180)
			cur.nodeType &&

			// Support: Firefox <=42
			// Suppress spec-violating clicks indicating a non-primary pointer button (trac-3861)
			// https://www.w3.org/TR/DOM-Level-3-Events/#event-type-click
			// Support: IE 11 only
			// ...but not arrow key "clicks" of radio inputs, which can have `button` -1 (gh-2343)
			!( event.type === "click" && event.button >= 1 ) ) {

			for ( ; cur !== this; cur = cur.parentNode || this ) {

				// Don't check non-elements (#13208)
				// Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)
				if ( cur.nodeType === 1 && !( event.type === "click" && cur.disabled === true ) ) {
					matchedHandlers = [];
					matchedSelectors = {};
					for ( i = 0; i < delegateCount; i++ ) {
						handleObj = handlers[ i ];

						// Don't conflict with Object.prototype properties (#13203)
						sel = handleObj.selector + " ";

						if ( matchedSelectors[ sel ] === undefined ) {
							matchedSelectors[ sel ] = handleObj.needsContext ?
								jQuery( sel, this ).index( cur ) > -1 :
								jQuery.find( sel, this, null, [ cur ] ).length;
						}
						if ( matchedSelectors[ sel ] ) {
							matchedHandlers.push( handleObj );
						}
					}
					if ( matchedHandlers.length ) {
						handlerQueue.push( { elem: cur, handlers: matchedHandlers } );
					}
				}
			}
		}

		// Add the remaining (directly-bound) handlers
		cur = this;
		if ( delegateCount < handlers.length ) {
			handlerQueue.push( { elem: cur, handlers: handlers.slice( delegateCount ) } );
		}

		return handlerQueue;
	},

	addProp: function( name, hook ) {
		Object.defineProperty( jQuery.Event.prototype, name, {
			enumerable: true,
			configurable: true,

			get: isFunction( hook ) ?
				function() {
					if ( this.originalEvent ) {
							return hook( this.originalEvent );
					}
				} :
				function() {
					if ( this.originalEvent ) {
							return this.originalEvent[ name ];
					}
				},

			set: function( value ) {
				Object.defineProperty( this, name, {
					enumerable: true,
					configurable: true,
					writable: true,
					value: value
				} );
			}
		} );
	},

	fix: function( originalEvent ) {
		return originalEvent[ jQuery.expando ] ?
			originalEvent :
			new jQuery.Event( originalEvent );
	},

	special: {
		load: {

			// Prevent triggered image.load events from bubbling to window.load
			noBubble: true
		},
		focus: {

			// Fire native event if possible so blur/focus sequence is correct
			trigger: function() {
				if ( this !== safeActiveElement() && this.focus ) {
					this.focus();
					return false;
				}
			},
			delegateType: "focusin"
		},
		blur: {
			trigger: function() {
				if ( this === safeActiveElement() && this.blur ) {
					this.blur();
					return false;
				}
			},
			delegateType: "focusout"
		},
		click: {

			// For checkbox, fire native event so checked state will be right
			trigger: function() {
				if ( this.type === "checkbox" && this.click && nodeName( this, "input" ) ) {
					this.click();
					return false;
				}
			},

			// For cross-browser consistency, don't fire native .click() on links
			_default: function( event ) {
				return nodeName( event.target, "a" );
			}
		},

		beforeunload: {
			postDispatch: function( event ) {

				// Support: Firefox 20+
				// Firefox doesn't alert if the returnValue field is not set.
				if ( event.result !== undefined && event.originalEvent ) {
					event.originalEvent.returnValue = event.result;
				}
			}
		}
	}
};

jQuery.removeEvent = function( elem, type, handle ) {

	// This "if" is needed for plain objects
	if ( elem.removeEventListener ) {
		elem.removeEventListener( type, handle );
	}
};

jQuery.Event = function( src, props ) {

	// Allow instantiation without the 'new' keyword
	if ( !( this instanceof jQuery.Event ) ) {
		return new jQuery.Event( src, props );
	}

	// Event object
	if ( src && src.type ) {
		this.originalEvent = src;
		this.type = src.type;

		// Events bubbling up the document may have been marked as prevented
		// by a handler lower down the tree; reflect the correct value.
		this.isDefaultPrevented = src.defaultPrevented ||
				src.defaultPrevented === undefined &&

				// Support: Android <=2.3 only
				src.returnValue === false ?
			returnTrue :
			returnFalse;

		// Create target properties
		// Support: Safari <=6 - 7 only
		// Target should not be a text node (#504, #13143)
		this.target = ( src.target && src.target.nodeType === 3 ) ?
			src.target.parentNode :
			src.target;

		this.currentTarget = src.currentTarget;
		this.relatedTarget = src.relatedTarget;

	// Event type
	} else {
		this.type = src;
	}

	// Put explicitly provided properties onto the event object
	if ( props ) {
		jQuery.extend( this, props );
	}

	// Create a timestamp if incoming event doesn't have one
	this.timeStamp = src && src.timeStamp || Date.now();

	// Mark it as fixed
	this[ jQuery.expando ] = true;
};

// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
// https://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html
jQuery.Event.prototype = {
	constructor: jQuery.Event,
	isDefaultPrevented: returnFalse,
	isPropagationStopped: returnFalse,
	isImmediatePropagationStopped: returnFalse,
	isSimulated: false,

	preventDefault: function() {
		var e = this.originalEvent;

		this.isDefaultPrevented = returnTrue;

		if ( e && !this.isSimulated ) {
			e.preventDefault();
		}
	},
	stopPropagation: function() {
		var e = this.originalEvent;

		this.isPropagationStopped = returnTrue;

		if ( e && !this.isSimulated ) {
			e.stopPropagation();
		}
	},
	stopImmediatePropagation: function() {
		var e = this.originalEvent;

		this.isImmediatePropagationStopped = returnTrue;

		if ( e && !this.isSimulated ) {
			e.stopImmediatePropagation();
		}

		this.stopPropagation();
	}
};

// Includes all common event props including KeyEvent and MouseEvent specific props
jQuery.each( {
	altKey: true,
	bubbles: true,
	cancelable: true,
	changedTouches: true,
	ctrlKey: true,
	detail: true,
	eventPhase: true,
	metaKey: true,
	pageX: true,
	pageY: true,
	shiftKey: true,
	view: true,
	"char": true,
	charCode: true,
	key: true,
	keyCode: true,
	button: true,
	buttons: true,
	clientX: true,
	clientY: true,
	offsetX: true,
	offsetY: true,
	pointerId: true,
	pointerType: true,
	screenX: true,
	screenY: true,
	targetTouches: true,
	toElement: true,
	touches: true,

	which: function( event ) {
		var button = event.button;

		// Add which for key events
		if ( event.which == null && rkeyEvent.test( event.type ) ) {
			return event.charCode != null ? event.charCode : event.keyCode;
		}

		// Add which for click: 1 === left; 2 === middle; 3 === right
		if ( !event.which && button !== undefined && rmouseEvent.test( event.type ) ) {
			if ( button & 1 ) {
				return 1;
			}

			if ( button & 2 ) {
				return 3;
			}

			if ( button & 4 ) {
				return 2;
			}

			return 0;
		}

		return event.which;
	}
}, jQuery.event.addProp );

// Create mouseenter/leave events using mouseover/out and event-time checks
// so that event delegation works in jQuery.
// Do the same for pointerenter/pointerleave and pointerover/pointerout
//
// Support: Safari 7 only
// Safari sends mouseenter too often; see:
// https://bugs.chromium.org/p/chromium/issues/detail?id=470258
// for the description of the bug (it existed in older Chrome versions as well).
jQuery.each( {
	mouseenter: "mouseover",
	mouseleave: "mouseout",
	pointerenter: "pointerover",
	pointerleave: "pointerout"
}, function( orig, fix ) {
	jQuery.event.special[ orig ] = {
		delegateType: fix,
		bindType: fix,

		handle: function( event ) {
			var ret,
				target = this,
				related = event.relatedTarget,
				handleObj = event.handleObj;

			// For mouseenter/leave call the handler if related is outside the target.
			// NB: No relatedTarget if the mouse left/entered the browser window
			if ( !related || ( related !== target && !jQuery.contains( target, related ) ) ) {
				event.type = handleObj.origType;
				ret = handleObj.handler.apply( this, arguments );
				event.type = fix;
			}
			return ret;
		}
	};
} );

jQuery.fn.extend( {

	on: function( types, selector, data, fn ) {
		return on( this, types, selector, data, fn );
	},
	one: function( types, selector, data, fn ) {
		return on( this, types, selector, data, fn, 1 );
	},
	off: function( types, selector, fn ) {
		var handleObj, type;
		if ( types && types.preventDefault && types.handleObj ) {

			// ( event )  dispatched jQuery.Event
			handleObj = types.handleObj;
			jQuery( types.delegateTarget ).off(
				handleObj.namespace ?
					handleObj.origType + "." + handleObj.namespace :
					handleObj.origType,
				handleObj.selector,
				handleObj.handler
			);
			return this;
		}
		if ( typeof types === "object" ) {

			// ( types-object [, selector] )
			for ( type in types ) {
				this.off( type, selector, types[ type ] );
			}
			return this;
		}
		if ( selector === false || typeof selector === "function" ) {

			// ( types [, fn] )
			fn = selector;
			selector = undefined;
		}
		if ( fn === false ) {
			fn = returnFalse;
		}
		return this.each( function() {
			jQuery.event.remove( this, types, fn, selector );
		} );
	}
} );


var

	/* eslint-disable max-len */

	// See https://github.com/eslint/eslint/issues/3229
	rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\/\0>\x20\t\r\n\f]*)[^>]*)\/>/gi,

	/* eslint-enable */

	// Support: IE <=10 - 11, Edge 12 - 13 only
	// In IE/Edge using regex groups here causes severe slowdowns.
	// See https://connect.microsoft.com/IE/feedback/details/1736512/
	rnoInnerhtml = /<script|<style|<link/i,

	// checked="checked" or checked
	rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,
	rcleanScript = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;

// Prefer a tbody over its parent table for containing new rows
function manipulationTarget( elem, content ) {
	if ( nodeName( elem, "table" ) &&
		nodeName( content.nodeType !== 11 ? content : content.firstChild, "tr" ) ) {

		return jQuery( elem ).children( "tbody" )[ 0 ] || elem;
	}

	return elem;
}

// Replace/restore the type attribute of script elements for safe DOM manipulation
function disableScript( elem ) {
	elem.type = ( elem.getAttribute( "type" ) !== null ) + "/" + elem.type;
	return elem;
}
function restoreScript( elem ) {
	if ( ( elem.type || "" ).slice( 0, 5 ) === "true/" ) {
		elem.type = elem.type.slice( 5 );
	} else {
		elem.removeAttribute( "type" );
	}

	return elem;
}

function cloneCopyEvent( src, dest ) {
	var i, l, type, pdataOld, pdataCur, udataOld, udataCur, events;

	if ( dest.nodeType !== 1 ) {
		return;
	}

	// 1. Copy private data: events, handlers, etc.
	if ( dataPriv.hasData( src ) ) {
		pdataOld = dataPriv.access( src );
		pdataCur = dataPriv.set( dest, pdataOld );
		events = pdataOld.events;

		if ( events ) {
			delete pdataCur.handle;
			pdataCur.events = {};

			for ( type in events ) {
				for ( i = 0, l = events[ type ].length; i < l; i++ ) {
					jQuery.event.add( dest, type, events[ type ][ i ] );
				}
			}
		}
	}

	// 2. Copy user data
	if ( dataUser.hasData( src ) ) {
		udataOld = dataUser.access( src );
		udataCur = jQuery.extend( {}, udataOld );

		dataUser.set( dest, udataCur );
	}
}

// Fix IE bugs, see support tests
function fixInput( src, dest ) {
	var nodeName = dest.nodeName.toLowerCase();

	// Fails to persist the checked state of a cloned checkbox or radio button.
	if ( nodeName === "input" && rcheckableType.test( src.type ) ) {
		dest.checked = src.checked;

	// Fails to return the selected option to the default selected state when cloning options
	} else if ( nodeName === "input" || nodeName === "textarea" ) {
		dest.defaultValue = src.defaultValue;
	}
}

function domManip( collection, args, callback, ignored ) {

	// Flatten any nested arrays
	args = concat.apply( [], args );

	var fragment, first, scripts, hasScripts, node, doc,
		i = 0,
		l = collection.length,
		iNoClone = l - 1,
		value = args[ 0 ],
		valueIsFunction = isFunction( value );

	// We can't cloneNode fragments that contain checked, in WebKit
	if ( valueIsFunction ||
			( l > 1 && typeof value === "string" &&
				!support.checkClone && rchecked.test( value ) ) ) {
		return collection.each( function( index ) {
			var self = collection.eq( index );
			if ( valueIsFunction ) {
				args[ 0 ] = value.call( this, index, self.html() );
			}
			domManip( self, args, callback, ignored );
		} );
	}

	if ( l ) {
		fragment = buildFragment( args, collection[ 0 ].ownerDocument, false, collection, ignored );
		first = fragment.firstChild;

		if ( fragment.childNodes.length === 1 ) {
			fragment = first;
		}

		// Require either new content or an interest in ignored elements to invoke the callback
		if ( first || ignored ) {
			scripts = jQuery.map( getAll( fragment, "script" ), disableScript );
			hasScripts = scripts.length;

			// Use the original fragment for the last item
			// instead of the first because it can end up
			// being emptied incorrectly in certain situations (#8070).
			for ( ; i < l; i++ ) {
				node = fragment;

				if ( i !== iNoClone ) {
					node = jQuery.clone( node, true, true );

					// Keep references to cloned scripts for later restoration
					if ( hasScripts ) {

						// Support: Android <=4.0 only, PhantomJS 1 only
						// push.apply(_, arraylike) throws on ancient WebKit
						jQuery.merge( scripts, getAll( node, "script" ) );
					}
				}

				callback.call( collection[ i ], node, i );
			}

			if ( hasScripts ) {
				doc = scripts[ scripts.length - 1 ].ownerDocument;

				// Reenable scripts
				jQuery.map( scripts, restoreScript );

				// Evaluate executable scripts on first document insertion
				for ( i = 0; i < hasScripts; i++ ) {
					node = scripts[ i ];
					if ( rscriptType.test( node.type || "" ) &&
						!dataPriv.access( node, "globalEval" ) &&
						jQuery.contains( doc, node ) ) {

						if ( node.src && ( node.type || "" ).toLowerCase()  !== "module" ) {

							// Optional AJAX dependency, but won't run scripts if not present
							if ( jQuery._evalUrl ) {
								jQuery._evalUrl( node.src );
							}
						} else {
							DOMEval( node.textContent.replace( rcleanScript, "" ), doc, node );
						}
					}
				}
			}
		}
	}

	return collection;
}

function remove( elem, selector, keepData ) {
	var node,
		nodes = selector ? jQuery.filter( selector, elem ) : elem,
		i = 0;

	for ( ; ( node = nodes[ i ] ) != null; i++ ) {
		if ( !keepData && node.nodeType === 1 ) {
			jQuery.cleanData( getAll( node ) );
		}

		if ( node.parentNode ) {
			if ( keepData && jQuery.contains( node.ownerDocument, node ) ) {
				setGlobalEval( getAll( node, "script" ) );
			}
			node.parentNode.removeChild( node );
		}
	}

	return elem;
}

jQuery.extend( {
	htmlPrefilter: function( html ) {
		return html.replace( rxhtmlTag, "<$1></$2>" );
	},

	clone: function( elem, dataAndEvents, deepDataAndEvents ) {
		var i, l, srcElements, destElements,
			clone = elem.cloneNode( true ),
			inPage = jQuery.contains( elem.ownerDocument, elem );

		// Fix IE cloning issues
		if ( !support.noCloneChecked && ( elem.nodeType === 1 || elem.nodeType === 11 ) &&
				!jQuery.isXMLDoc( elem ) ) {

			// We eschew Sizzle here for performance reasons: https://jsperf.com/getall-vs-sizzle/2
			destElements = getAll( clone );
			srcElements = getAll( elem );

			for ( i = 0, l = srcElements.length; i < l; i++ ) {
				fixInput( srcElements[ i ], destElements[ i ] );
			}
		}

		// Copy the events from the original to the clone
		if ( dataAndEvents ) {
			if ( deepDataAndEvents ) {
				srcElements = srcElements || getAll( elem );
				destElements = destElements || getAll( clone );

				for ( i = 0, l = srcElements.length; i < l; i++ ) {
					cloneCopyEvent( srcElements[ i ], destElements[ i ] );
				}
			} else {
				cloneCopyEvent( elem, clone );
			}
		}

		// Preserve script evaluation history
		destElements = getAll( clone, "script" );
		if ( destElements.length > 0 ) {
			setGlobalEval( destElements, !inPage && getAll( elem, "script" ) );
		}

		// Return the cloned set
		return clone;
	},

	cleanData: function( elems ) {
		var data, elem, type,
			special = jQuery.event.special,
			i = 0;

		for ( ; ( elem = elems[ i ] ) !== undefined; i++ ) {
			if ( acceptData( elem ) ) {
				if ( ( data = elem[ dataPriv.expando ] ) ) {
					if ( data.events ) {
						for ( type in data.events ) {
							if ( special[ type ] ) {
								jQuery.event.remove( elem, type );

							// This is a shortcut to avoid jQuery.event.remove's overhead
							} else {
								jQuery.removeEvent( elem, type, data.handle );
							}
						}
					}

					// Support: Chrome <=35 - 45+
					// Assign undefined instead of using delete, see Data#remove
					elem[ dataPriv.expando ] = undefined;
				}
				if ( elem[ dataUser.expando ] ) {

					// Support: Chrome <=35 - 45+
					// Assign undefined instead of using delete, see Data#remove
					elem[ dataUser.expando ] = undefined;
				}
			}
		}
	}
} );

jQuery.fn.extend( {
	detach: function( selector ) {
		return remove( this, selector, true );
	},

	remove: function( selector ) {
		return remove( this, selector );
	},

	text: function( value ) {
		return access( this, function( value ) {
			return value === undefined ?
				jQuery.text( this ) :
				this.empty().each( function() {
					if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
						this.textContent = value;
					}
				} );
		}, null, value, arguments.length );
	},

	append: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
				var target = manipulationTarget( this, elem );
				target.appendChild( elem );
			}
		} );
	},

	prepend: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
				var target = manipulationTarget( this, elem );
				target.insertBefore( elem, target.firstChild );
			}
		} );
	},

	before: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.parentNode ) {
				this.parentNode.insertBefore( elem, this );
			}
		} );
	},

	after: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.parentNode ) {
				this.parentNode.insertBefore( elem, this.nextSibling );
			}
		} );
	},

	empty: function() {
		var elem,
			i = 0;

		for ( ; ( elem = this[ i ] ) != null; i++ ) {
			if ( elem.nodeType === 1 ) {

				// Prevent memory leaks
				jQuery.cleanData( getAll( elem, false ) );

				// Remove any remaining nodes
				elem.textContent = "";
			}
		}

		return this;
	},

	clone: function( dataAndEvents, deepDataAndEvents ) {
		dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
		deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;

		return this.map( function() {
			return jQuery.clone( this, dataAndEvents, deepDataAndEvents );
		} );
	},

	html: function( value ) {
		return access( this, function( value ) {
			var elem = this[ 0 ] || {},
				i = 0,
				l = this.length;

			if ( value === undefined && elem.nodeType === 1 ) {
				return elem.innerHTML;
			}

			// See if we can take a shortcut and just use innerHTML
			if ( typeof value === "string" && !rnoInnerhtml.test( value ) &&
				!wrapMap[ ( rtagName.exec( value ) || [ "", "" ] )[ 1 ].toLowerCase() ] ) {

				value = jQuery.htmlPrefilter( value );

				try {
					for ( ; i < l; i++ ) {
						elem = this[ i ] || {};

						// Remove element nodes and prevent memory leaks
						if ( elem.nodeType === 1 ) {
							jQuery.cleanData( getAll( elem, false ) );
							elem.innerHTML = value;
						}
					}

					elem = 0;

				// If using innerHTML throws an exception, use the fallback method
				} catch ( e ) {}
			}

			if ( elem ) {
				this.empty().append( value );
			}
		}, null, value, arguments.length );
	},

	replaceWith: function() {
		var ignored = [];

		// Make the changes, replacing each non-ignored context element with the new content
		return domManip( this, arguments, function( elem ) {
			var parent = this.parentNode;

			if ( jQuery.inArray( this, ignored ) < 0 ) {
				jQuery.cleanData( getAll( this ) );
				if ( parent ) {
					parent.replaceChild( elem, this );
				}
			}

		// Force callback invocation
		}, ignored );
	}
} );

jQuery.each( {
	appendTo: "append",
	prependTo: "prepend",
	insertBefore: "before",
	insertAfter: "after",
	replaceAll: "replaceWith"
}, function( name, original ) {
	jQuery.fn[ name ] = function( selector ) {
		var elems,
			ret = [],
			insert = jQuery( selector ),
			last = insert.length - 1,
			i = 0;

		for ( ; i <= last; i++ ) {
			elems = i === last ? this : this.clone( true );
			jQuery( insert[ i ] )[ original ]( elems );

			// Support: Android <=4.0 only, PhantomJS 1 only
			// .get() because push.apply(_, arraylike) throws on ancient WebKit
			push.apply( ret, elems.get() );
		}

		return this.pushStack( ret );
	};
} );
var rnumnonpx = new RegExp( "^(" + pnum + ")(?!px)[a-z%]+$", "i" );

var getStyles = function( elem ) {

		// Support: IE <=11 only, Firefox <=30 (#15098, #14150)
		// IE throws on elements created in popups
		// FF meanwhile throws on frame elements through "defaultView.getComputedStyle"
		var view = elem.ownerDocument.defaultView;

		if ( !view || !view.opener ) {
			view = window;
		}

		return view.getComputedStyle( elem );
	};

var rboxStyle = new RegExp( cssExpand.join( "|" ), "i" );



( function() {

	// Executing both pixelPosition & boxSizingReliable tests require only one layout
	// so they're executed at the same time to save the second computation.
	function computeStyleTests() {

		// This is a singleton, we need to execute it only once
		if ( !div ) {
			return;
		}

		container.style.cssText = "position:absolute;left:-11111px;width:60px;" +
			"margin-top:1px;padding:0;border:0";
		div.style.cssText =
			"position:relative;display:block;box-sizing:border-box;overflow:scroll;" +
			"margin:auto;border:1px;padding:1px;" +
			"width:60%;top:1%";
		documentElement.appendChild( container ).appendChild( div );

		var divStyle = window.getComputedStyle( div );
		pixelPositionVal = divStyle.top !== "1%";

		// Support: Android 4.0 - 4.3 only, Firefox <=3 - 44
		reliableMarginLeftVal = roundPixelMeasures( divStyle.marginLeft ) === 12;

		// Support: Android 4.0 - 4.3 only, Safari <=9.1 - 10.1, iOS <=7.0 - 9.3
		// Some styles come back with percentage values, even though they shouldn't
		div.style.right = "60%";
		pixelBoxStylesVal = roundPixelMeasures( divStyle.right ) === 36;

		// Support: IE 9 - 11 only
		// Detect misreporting of content dimensions for box-sizing:border-box elements
		boxSizingReliableVal = roundPixelMeasures( divStyle.width ) === 36;

		// Support: IE 9 only
		// Detect overflow:scroll screwiness (gh-3699)
		div.style.position = "absolute";
		scrollboxSizeVal = div.offsetWidth === 36 || "absolute";

		documentElement.removeChild( container );

		// Nullify the div so it wouldn't be stored in the memory and
		// it will also be a sign that checks already performed
		div = null;
	}

	function roundPixelMeasures( measure ) {
		return Math.round( parseFloat( measure ) );
	}

	var pixelPositionVal, boxSizingReliableVal, scrollboxSizeVal, pixelBoxStylesVal,
		reliableMarginLeftVal,
		container = document.createElement( "div" ),
		div = document.createElement( "div" );

	// Finish early in limited (non-browser) environments
	if ( !div.style ) {
		return;
	}

	// Support: IE <=9 - 11 only
	// Style of cloned element affects source element cloned (#8908)
	div.style.backgroundClip = "content-box";
	div.cloneNode( true ).style.backgroundClip = "";
	support.clearCloneStyle = div.style.backgroundClip === "content-box";

	jQuery.extend( support, {
		boxSizingReliable: function() {
			computeStyleTests();
			return boxSizingReliableVal;
		},
		pixelBoxStyles: function() {
			computeStyleTests();
			return pixelBoxStylesVal;
		},
		pixelPosition: function() {
			computeStyleTests();
			return pixelPositionVal;
		},
		reliableMarginLeft: function() {
			computeStyleTests();
			return reliableMarginLeftVal;
		},
		scrollboxSize: function() {
			computeStyleTests();
			return scrollboxSizeVal;
		}
	} );
} )();


function curCSS( elem, name, computed ) {
	var width, minWidth, maxWidth, ret,

		// Support: Firefox 51+
		// Retrieving style before computed somehow
		// fixes an issue with getting wrong values
		// on detached elements
		style = elem.style;

	computed = computed || getStyles( elem );

	// getPropertyValue is needed for:
	//   .css('filter') (IE 9 only, #12537)
	//   .css('--customProperty) (#3144)
	if ( computed ) {
		ret = computed.getPropertyValue( name ) || computed[ name ];

		if ( ret === "" && !jQuery.contains( elem.ownerDocument, elem ) ) {
			ret = jQuery.style( elem, name );
		}

		// A tribute to the "awesome hack by Dean Edwards"
		// Android Browser returns percentage for some values,
		// but width seems to be reliably pixels.
		// This is against the CSSOM draft spec:
		// https://drafts.csswg.org/cssom/#resolved-values
		if ( !support.pixelBoxStyles() && rnumnonpx.test( ret ) && rboxStyle.test( name ) ) {

			// Remember the original values
			width = style.width;
			minWidth = style.minWidth;
			maxWidth = style.maxWidth;

			// Put in the new values to get a computed value out
			style.minWidth = style.maxWidth = style.width = ret;
			ret = computed.width;

			// Revert the changed values
			style.width = width;
			style.minWidth = minWidth;
			style.maxWidth = maxWidth;
		}
	}

	return ret !== undefined ?

		// Support: IE <=9 - 11 only
		// IE returns zIndex value as an integer.
		ret + "" :
		ret;
}


function addGetHookIf( conditionFn, hookFn ) {

	// Define the hook, we'll check on the first run if it's really needed.
	return {
		get: function() {
			if ( conditionFn() ) {

				// Hook not needed (or it's not possible to use it due
				// to missing dependency), remove it.
				delete this.get;
				return;
			}

			// Hook needed; redefine it so that the support test is not executed again.
			return ( this.get = hookFn ).apply( this, arguments );
		}
	};
}


var

	// Swappable if display is none or starts with table
	// except "table", "table-cell", or "table-caption"
	// See here for display values: https://developer.mozilla.org/en-US/docs/CSS/display
	rdisplayswap = /^(none|table(?!-c[ea]).+)/,
	rcustomProp = /^--/,
	cssShow = { position: "absolute", visibility: "hidden", display: "block" },
	cssNormalTransform = {
		letterSpacing: "0",
		fontWeight: "400"
	},

	cssPrefixes = [ "Webkit", "Moz", "ms" ],
	emptyStyle = document.createElement( "div" ).style;

// Return a css property mapped to a potentially vendor prefixed property
function vendorPropName( name ) {

	// Shortcut for names that are not vendor prefixed
	if ( name in emptyStyle ) {
		return name;
	}

	// Check for vendor prefixed names
	var capName = name[ 0 ].toUpperCase() + name.slice( 1 ),
		i = cssPrefixes.length;

	while ( i-- ) {
		name = cssPrefixes[ i ] + capName;
		if ( name in emptyStyle ) {
			return name;
		}
	}
}

// Return a property mapped along what jQuery.cssProps suggests or to
// a vendor prefixed property.
function finalPropName( name ) {
	var ret = jQuery.cssProps[ name ];
	if ( !ret ) {
		ret = jQuery.cssProps[ name ] = vendorPropName( name ) || name;
	}
	return ret;
}

function setPositiveNumber( elem, value, subtract ) {

	// Any relative (+/-) values have already been
	// normalized at this point
	var matches = rcssNum.exec( value );
	return matches ?

		// Guard against undefined "subtract", e.g., when used as in cssHooks
		Math.max( 0, matches[ 2 ] - ( subtract || 0 ) ) + ( matches[ 3 ] || "px" ) :
		value;
}

function boxModelAdjustment( elem, dimension, box, isBorderBox, styles, computedVal ) {
	var i = dimension === "width" ? 1 : 0,
		extra = 0,
		delta = 0;

	// Adjustment may not be necessary
	if ( box === ( isBorderBox ? "border" : "content" ) ) {
		return 0;
	}

	for ( ; i < 4; i += 2 ) {

		// Both box models exclude margin
		if ( box === "margin" ) {
			delta += jQuery.css( elem, box + cssExpand[ i ], true, styles );
		}

		// If we get here with a content-box, we're seeking "padding" or "border" or "margin"
		if ( !isBorderBox ) {

			// Add padding
			delta += jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );

			// For "border" or "margin", add border
			if ( box !== "padding" ) {
				delta += jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );

			// But still keep track of it otherwise
			} else {
				extra += jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
			}

		// If we get here with a border-box (content + padding + border), we're seeking "content" or
		// "padding" or "margin"
		} else {

			// For "content", subtract padding
			if ( box === "content" ) {
				delta -= jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );
			}

			// For "content" or "padding", subtract border
			if ( box !== "margin" ) {
				delta -= jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
			}
		}
	}

	// Account for positive content-box scroll gutter when requested by providing computedVal
	if ( !isBorderBox && computedVal >= 0 ) {

		// offsetWidth/offsetHeight is a rounded sum of content, padding, scroll gutter, and border
		// Assuming integer scroll gutter, subtract the rest and round down
		delta += Math.max( 0, Math.ceil(
			elem[ "offset" + dimension[ 0 ].toUpperCase() + dimension.slice( 1 ) ] -
			computedVal -
			delta -
			extra -
			0.5
		) );
	}

	return delta;
}

function getWidthOrHeight( elem, dimension, extra ) {

	// Start with computed style
	var styles = getStyles( elem ),
		val = curCSS( elem, dimension, styles ),
		isBorderBox = jQuery.css( elem, "boxSizing", false, styles ) === "border-box",
		valueIsBorderBox = isBorderBox;

	// Support: Firefox <=54
	// Return a confounding non-pixel value or feign ignorance, as appropriate.
	if ( rnumnonpx.test( val ) ) {
		if ( !extra ) {
			return val;
		}
		val = "auto";
	}

	// Check for style in case a browser which returns unreliable values
	// for getComputedStyle silently falls back to the reliable elem.style
	valueIsBorderBox = valueIsBorderBox &&
		( support.boxSizingReliable() || val === elem.style[ dimension ] );

	// Fall back to offsetWidth/offsetHeight when value is "auto"
	// This happens for inline elements with no explicit setting (gh-3571)
	// Support: Android <=4.1 - 4.3 only
	// Also use offsetWidth/offsetHeight for misreported inline dimensions (gh-3602)
	if ( val === "auto" ||
		!parseFloat( val ) && jQuery.css( elem, "display", false, styles ) === "inline" ) {

		val = elem[ "offset" + dimension[ 0 ].toUpperCase() + dimension.slice( 1 ) ];

		// offsetWidth/offsetHeight provide border-box values
		valueIsBorderBox = true;
	}

	// Normalize "" and auto
	val = parseFloat( val ) || 0;

	// Adjust for the element's box model
	return ( val +
		boxModelAdjustment(
			elem,
			dimension,
			extra || ( isBorderBox ? "border" : "content" ),
			valueIsBorderBox,
			styles,

			// Provide the current computed size to request scroll gutter calculation (gh-3589)
			val
		)
	) + "px";
}

jQuery.extend( {

	// Add in style property hooks for overriding the default
	// behavior of getting and setting a style property
	cssHooks: {
		opacity: {
			get: function( elem, computed ) {
				if ( computed ) {

					// We should always get a number back from opacity
					var ret = curCSS( elem, "opacity" );
					return ret === "" ? "1" : ret;
				}
			}
		}
	},

	// Don't automatically add "px" to these possibly-unitless properties
	cssNumber: {
		"animationIterationCount": true,
		"columnCount": true,
		"fillOpacity": true,
		"flexGrow": true,
		"flexShrink": true,
		"fontWeight": true,
		"lineHeight": true,
		"opacity": true,
		"order": true,
		"orphans": true,
		"widows": true,
		"zIndex": true,
		"zoom": true
	},

	// Add in properties whose names you wish to fix before
	// setting or getting the value
	cssProps: {},

	// Get and set the style property on a DOM Node
	style: function( elem, name, value, extra ) {

		// Don't set styles on text and comment nodes
		if ( !elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style ) {
			return;
		}

		// Make sure that we're working with the right name
		var ret, type, hooks,
			origName = camelCase( name ),
			isCustomProp = rcustomProp.test( name ),
			style = elem.style;

		// Make sure that we're working with the right name. We don't
		// want to query the value if it is a CSS custom property
		// since they are user-defined.
		if ( !isCustomProp ) {
			name = finalPropName( origName );
		}

		// Gets hook for the prefixed version, then unprefixed version
		hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

		// Check if we're setting a value
		if ( value !== undefined ) {
			type = typeof value;

			// Convert "+=" or "-=" to relative numbers (#7345)
			if ( type === "string" && ( ret = rcssNum.exec( value ) ) && ret[ 1 ] ) {
				value = adjustCSS( elem, name, ret );

				// Fixes bug #9237
				type = "number";
			}

			// Make sure that null and NaN values aren't set (#7116)
			if ( value == null || value !== value ) {
				return;
			}

			// If a number was passed in, add the unit (except for certain CSS properties)
			if ( type === "number" ) {
				value += ret && ret[ 3 ] || ( jQuery.cssNumber[ origName ] ? "" : "px" );
			}

			// background-* props affect original clone's values
			if ( !support.clearCloneStyle && value === "" && name.indexOf( "background" ) === 0 ) {
				style[ name ] = "inherit";
			}

			// If a hook was provided, use that value, otherwise just set the specified value
			if ( !hooks || !( "set" in hooks ) ||
				( value = hooks.set( elem, value, extra ) ) !== undefined ) {

				if ( isCustomProp ) {
					style.setProperty( name, value );
				} else {
					style[ name ] = value;
				}
			}

		} else {

			// If a hook was provided get the non-computed value from there
			if ( hooks && "get" in hooks &&
				( ret = hooks.get( elem, false, extra ) ) !== undefined ) {

				return ret;
			}

			// Otherwise just get the value from the style object
			return style[ name ];
		}
	},

	css: function( elem, name, extra, styles ) {
		var val, num, hooks,
			origName = camelCase( name ),
			isCustomProp = rcustomProp.test( name );

		// Make sure that we're working with the right name. We don't
		// want to modify the value if it is a CSS custom property
		// since they are user-defined.
		if ( !isCustomProp ) {
			name = finalPropName( origName );
		}

		// Try prefixed name followed by the unprefixed name
		hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

		// If a hook was provided get the computed value from there
		if ( hooks && "get" in hooks ) {
			val = hooks.get( elem, true, extra );
		}

		// Otherwise, if a way to get the computed value exists, use that
		if ( val === undefined ) {
			val = curCSS( elem, name, styles );
		}

		// Convert "normal" to computed value
		if ( val === "normal" && name in cssNormalTransform ) {
			val = cssNormalTransform[ name ];
		}

		// Make numeric if forced or a qualifier was provided and val looks numeric
		if ( extra === "" || extra ) {
			num = parseFloat( val );
			return extra === true || isFinite( num ) ? num || 0 : val;
		}

		return val;
	}
} );

jQuery.each( [ "height", "width" ], function( i, dimension ) {
	jQuery.cssHooks[ dimension ] = {
		get: function( elem, computed, extra ) {
			if ( computed ) {

				// Certain elements can have dimension info if we invisibly show them
				// but it must have a current display style that would benefit
				return rdisplayswap.test( jQuery.css( elem, "display" ) ) &&

					// Support: Safari 8+
					// Table columns in Safari have non-zero offsetWidth & zero
					// getBoundingClientRect().width unless display is changed.
					// Support: IE <=11 only
					// Running getBoundingClientRect on a disconnected node
					// in IE throws an error.
					( !elem.getClientRects().length || !elem.getBoundingClientRect().width ) ?
						swap( elem, cssShow, function() {
							return getWidthOrHeight( elem, dimension, extra );
						} ) :
						getWidthOrHeight( elem, dimension, extra );
			}
		},

		set: function( elem, value, extra ) {
			var matches,
				styles = getStyles( elem ),
				isBorderBox = jQuery.css( elem, "boxSizing", false, styles ) === "border-box",
				subtract = extra && boxModelAdjustment(
					elem,
					dimension,
					extra,
					isBorderBox,
					styles
				);

			// Account for unreliable border-box dimensions by comparing offset* to computed and
			// faking a content-box to get border and padding (gh-3699)
			if ( isBorderBox && support.scrollboxSize() === styles.position ) {
				subtract -= Math.ceil(
					elem[ "offset" + dimension[ 0 ].toUpperCase() + dimension.slice( 1 ) ] -
					parseFloat( styles[ dimension ] ) -
					boxModelAdjustment( elem, dimension, "border", false, styles ) -
					0.5
				);
			}

			// Convert to pixels if value adjustment is needed
			if ( subtract && ( matches = rcssNum.exec( value ) ) &&
				( matches[ 3 ] || "px" ) !== "px" ) {

				elem.style[ dimension ] = value;
				value = jQuery.css( elem, dimension );
			}

			return setPositiveNumber( elem, value, subtract );
		}
	};
} );

jQuery.cssHooks.marginLeft = addGetHookIf( support.reliableMarginLeft,
	function( elem, computed ) {
		if ( computed ) {
			return ( parseFloat( curCSS( elem, "marginLeft" ) ) ||
				elem.getBoundingClientRect().left -
					swap( elem, { marginLeft: 0 }, function() {
						return elem.getBoundingClientRect().left;
					} )
				) + "px";
		}
	}
);

// These hooks are used by animate to expand properties
jQuery.each( {
	margin: "",
	padding: "",
	border: "Width"
}, function( prefix, suffix ) {
	jQuery.cssHooks[ prefix + suffix ] = {
		expand: function( value ) {
			var i = 0,
				expanded = {},

				// Assumes a single number if not a string
				parts = typeof value === "string" ? value.split( " " ) : [ value ];

			for ( ; i < 4; i++ ) {
				expanded[ prefix + cssExpand[ i ] + suffix ] =
					parts[ i ] || parts[ i - 2 ] || parts[ 0 ];
			}

			return expanded;
		}
	};

	if ( prefix !== "margin" ) {
		jQuery.cssHooks[ prefix + suffix ].set = setPositiveNumber;
	}
} );

jQuery.fn.extend( {
	css: function( name, value ) {
		return access( this, function( elem, name, value ) {
			var styles, len,
				map = {},
				i = 0;

			if ( Array.isArray( name ) ) {
				styles = getStyles( elem );
				len = name.length;

				for ( ; i < len; i++ ) {
					map[ name[ i ] ] = jQuery.css( elem, name[ i ], false, styles );
				}

				return map;
			}

			return value !== undefined ?
				jQuery.style( elem, name, value ) :
				jQuery.css( elem, name );
		}, name, value, arguments.length > 1 );
	}
} );


function Tween( elem, options, prop, end, easing ) {
	return new Tween.prototype.init( elem, options, prop, end, easing );
}
jQuery.Tween = Tween;

Tween.prototype = {
	constructor: Tween,
	init: function( elem, options, prop, end, easing, unit ) {
		this.elem = elem;
		this.prop = prop;
		this.easing = easing || jQuery.easing._default;
		this.options = options;
		this.start = this.now = this.cur();
		this.end = end;
		this.unit = unit || ( jQuery.cssNumber[ prop ] ? "" : "px" );
	},
	cur: function() {
		var hooks = Tween.propHooks[ this.prop ];

		return hooks && hooks.get ?
			hooks.get( this ) :
			Tween.propHooks._default.get( this );
	},
	run: function( percent ) {
		var eased,
			hooks = Tween.propHooks[ this.prop ];

		if ( this.options.duration ) {
			this.pos = eased = jQuery.easing[ this.easing ](
				percent, this.options.duration * percent, 0, 1, this.options.duration
			);
		} else {
			this.pos = eased = percent;
		}
		this.now = ( this.end - this.start ) * eased + this.start;

		if ( this.options.step ) {
			this.options.step.call( this.elem, this.now, this );
		}

		if ( hooks && hooks.set ) {
			hooks.set( this );
		} else {
			Tween.propHooks._default.set( this );
		}
		return this;
	}
};

Tween.prototype.init.prototype = Tween.prototype;

Tween.propHooks = {
	_default: {
		get: function( tween ) {
			var result;

			// Use a property on the element directly when it is not a DOM element,
			// or when there is no matching style property that exists.
			if ( tween.elem.nodeType !== 1 ||
				tween.elem[ tween.prop ] != null && tween.elem.style[ tween.prop ] == null ) {
				return tween.elem[ tween.prop ];
			}

			// Passing an empty string as a 3rd parameter to .css will automatically
			// attempt a parseFloat and fallback to a string if the parse fails.
			// Simple values such as "10px" are parsed to Float;
			// complex values such as "rotate(1rad)" are returned as-is.
			result = jQuery.css( tween.elem, tween.prop, "" );

			// Empty strings, null, undefined and "auto" are converted to 0.
			return !result || result === "auto" ? 0 : result;
		},
		set: function( tween ) {

			// Use step hook for back compat.
			// Use cssHook if its there.
			// Use .style if available and use plain properties where available.
			if ( jQuery.fx.step[ tween.prop ] ) {
				jQuery.fx.step[ tween.prop ]( tween );
			} else if ( tween.elem.nodeType === 1 &&
				( tween.elem.style[ jQuery.cssProps[ tween.prop ] ] != null ||
					jQuery.cssHooks[ tween.prop ] ) ) {
				jQuery.style( tween.elem, tween.prop, tween.now + tween.unit );
			} else {
				tween.elem[ tween.prop ] = tween.now;
			}
		}
	}
};

// Support: IE <=9 only
// Panic based approach to setting things on disconnected nodes
Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
	set: function( tween ) {
		if ( tween.elem.nodeType && tween.elem.parentNode ) {
			tween.elem[ tween.prop ] = tween.now;
		}
	}
};

jQuery.easing = {
	linear: function( p ) {
		return p;
	},
	swing: function( p ) {
		return 0.5 - Math.cos( p * Math.PI ) / 2;
	},
	_default: "swing"
};

jQuery.fx = Tween.prototype.init;

// Back compat <1.8 extension point
jQuery.fx.step = {};




var
	fxNow, inProgress,
	rfxtypes = /^(?:toggle|show|hide)$/,
	rrun = /queueHooks$/;

function schedule() {
	if ( inProgress ) {
		if ( document.hidden === false && window.requestAnimationFrame ) {
			window.requestAnimationFrame( schedule );
		} else {
			window.setTimeout( schedule, jQuery.fx.interval );
		}

		jQuery.fx.tick();
	}
}

// Animations created synchronously will run synchronously
function createFxNow() {
	window.setTimeout( function() {
		fxNow = undefined;
	} );
	return ( fxNow = Date.now() );
}

// Generate parameters to create a standard animation
function genFx( type, includeWidth ) {
	var which,
		i = 0,
		attrs = { height: type };

	// If we include width, step value is 1 to do all cssExpand values,
	// otherwise step value is 2 to skip over Left and Right
	includeWidth = includeWidth ? 1 : 0;
	for ( ; i < 4; i += 2 - includeWidth ) {
		which = cssExpand[ i ];
		attrs[ "margin" + which ] = attrs[ "padding" + which ] = type;
	}

	if ( includeWidth ) {
		attrs.opacity = attrs.width = type;
	}

	return attrs;
}

function createTween( value, prop, animation ) {
	var tween,
		collection = ( Animation.tweeners[ prop ] || [] ).concat( Animation.tweeners[ "*" ] ),
		index = 0,
		length = collection.length;
	for ( ; index < length; index++ ) {
		if ( ( tween = collection[ index ].call( animation, prop, value ) ) ) {

			// We're done with this property
			return tween;
		}
	}
}

function defaultPrefilter( elem, props, opts ) {
	var prop, value, toggle, hooks, oldfire, propTween, restoreDisplay, display,
		isBox = "width" in props || "height" in props,
		anim = this,
		orig = {},
		style = elem.style,
		hidden = elem.nodeType && isHiddenWithinTree( elem ),
		dataShow = dataPriv.get( elem, "fxshow" );

	// Queue-skipping animations hijack the fx hooks
	if ( !opts.queue ) {
		hooks = jQuery._queueHooks( elem, "fx" );
		if ( hooks.unqueued == null ) {
			hooks.unqueued = 0;
			oldfire = hooks.empty.fire;
			hooks.empty.fire = function() {
				if ( !hooks.unqueued ) {
					oldfire();
				}
			};
		}
		hooks.unqueued++;

		anim.always( function() {

			// Ensure the complete handler is called before this completes
			anim.always( function() {
				hooks.unqueued--;
				if ( !jQuery.queue( elem, "fx" ).length ) {
					hooks.empty.fire();
				}
			} );
		} );
	}

	// Detect show/hide animations
	for ( prop in props ) {
		value = props[ prop ];
		if ( rfxtypes.test( value ) ) {
			delete props[ prop ];
			toggle = toggle || value === "toggle";
			if ( value === ( hidden ? "hide" : "show" ) ) {

				// Pretend to be hidden if this is a "show" and
				// there is still data from a stopped show/hide
				if ( value === "show" && dataShow && dataShow[ prop ] !== undefined ) {
					hidden = true;

				// Ignore all other no-op show/hide data
				} else {
					continue;
				}
			}
			orig[ prop ] = dataShow && dataShow[ prop ] || jQuery.style( elem, prop );
		}
	}

	// Bail out if this is a no-op like .hide().hide()
	propTween = !jQuery.isEmptyObject( props );
	if ( !propTween && jQuery.isEmptyObject( orig ) ) {
		return;
	}

	// Restrict "overflow" and "display" styles during box animations
	if ( isBox && elem.nodeType === 1 ) {

		// Support: IE <=9 - 11, Edge 12 - 15
		// Record all 3 overflow attributes because IE does not infer the shorthand
		// from identically-valued overflowX and overflowY and Edge just mirrors
		// the overflowX value there.
		opts.overflow = [ style.overflow, style.overflowX, style.overflowY ];

		// Identify a display type, preferring old show/hide data over the CSS cascade
		restoreDisplay = dataShow && dataShow.display;
		if ( restoreDisplay == null ) {
			restoreDisplay = dataPriv.get( elem, "display" );
		}
		display = jQuery.css( elem, "display" );
		if ( display === "none" ) {
			if ( restoreDisplay ) {
				display = restoreDisplay;
			} else {

				// Get nonempty value(s) by temporarily forcing visibility
				showHide( [ elem ], true );
				restoreDisplay = elem.style.display || restoreDisplay;
				display = jQuery.css( elem, "display" );
				showHide( [ elem ] );
			}
		}

		// Animate inline elements as inline-block
		if ( display === "inline" || display === "inline-block" && restoreDisplay != null ) {
			if ( jQuery.css( elem, "float" ) === "none" ) {

				// Restore the original display value at the end of pure show/hide animations
				if ( !propTween ) {
					anim.done( function() {
						style.display = restoreDisplay;
					} );
					if ( restoreDisplay == null ) {
						display = style.display;
						restoreDisplay = display === "none" ? "" : display;
					}
				}
				style.display = "inline-block";
			}
		}
	}

	if ( opts.overflow ) {
		style.overflow = "hidden";
		anim.always( function() {
			style.overflow = opts.overflow[ 0 ];
			style.overflowX = opts.overflow[ 1 ];
			style.overflowY = opts.overflow[ 2 ];
		} );
	}

	// Implement show/hide animations
	propTween = false;
	for ( prop in orig ) {

		// General show/hide setup for this element animation
		if ( !propTween ) {
			if ( dataShow ) {
				if ( "hidden" in dataShow ) {
					hidden = dataShow.hidden;
				}
			} else {
				dataShow = dataPriv.access( elem, "fxshow", { display: restoreDisplay } );
			}

			// Store hidden/visible for toggle so `.stop().toggle()` "reverses"
			if ( toggle ) {
				dataShow.hidden = !hidden;
			}

			// Show elements before animating them
			if ( hidden ) {
				showHide( [ elem ], true );
			}

			/* eslint-disable no-loop-func */

			anim.done( function() {

			/* eslint-enable no-loop-func */

				// The final step of a "hide" animation is actually hiding the element
				if ( !hidden ) {
					showHide( [ elem ] );
				}
				dataPriv.remove( elem, "fxshow" );
				for ( prop in orig ) {
					jQuery.style( elem, prop, orig[ prop ] );
				}
			} );
		}

		// Per-property setup
		propTween = createTween( hidden ? dataShow[ prop ] : 0, prop, anim );
		if ( !( prop in dataShow ) ) {
			dataShow[ prop ] = propTween.start;
			if ( hidden ) {
				propTween.end = propTween.start;
				propTween.start = 0;
			}
		}
	}
}

function propFilter( props, specialEasing ) {
	var index, name, easing, value, hooks;

	// camelCase, specialEasing and expand cssHook pass
	for ( index in props ) {
		name = camelCase( index );
		easing = specialEasing[ name ];
		value = props[ index ];
		if ( Array.isArray( value ) ) {
			easing = value[ 1 ];
			value = props[ index ] = value[ 0 ];
		}

		if ( index !== name ) {
			props[ name ] = value;
			delete props[ index ];
		}

		hooks = jQuery.cssHooks[ name ];
		if ( hooks && "expand" in hooks ) {
			value = hooks.expand( value );
			delete props[ name ];

			// Not quite $.extend, this won't overwrite existing keys.
			// Reusing 'index' because we have the correct "name"
			for ( index in value ) {
				if ( !( index in props ) ) {
					props[ index ] = value[ index ];
					specialEasing[ index ] = easing;
				}
			}
		} else {
			specialEasing[ name ] = easing;
		}
	}
}

function Animation( elem, properties, options ) {
	var result,
		stopped,
		index = 0,
		length = Animation.prefilters.length,
		deferred = jQuery.Deferred().always( function() {

			// Don't match elem in the :animated selector
			delete tick.elem;
		} ),
		tick = function() {
			if ( stopped ) {
				return false;
			}
			var currentTime = fxNow || createFxNow(),
				remaining = Math.max( 0, animation.startTime + animation.duration - currentTime ),

				// Support: Android 2.3 only
				// Archaic crash bug won't allow us to use `1 - ( 0.5 || 0 )` (#12497)
				temp = remaining / animation.duration || 0,
				percent = 1 - temp,
				index = 0,
				length = animation.tweens.length;

			for ( ; index < length; index++ ) {
				animation.tweens[ index ].run( percent );
			}

			deferred.notifyWith( elem, [ animation, percent, remaining ] );

			// If there's more to do, yield
			if ( percent < 1 && length ) {
				return remaining;
			}

			// If this was an empty animation, synthesize a final progress notification
			if ( !length ) {
				deferred.notifyWith( elem, [ animation, 1, 0 ] );
			}

			// Resolve the animation and report its conclusion
			deferred.resolveWith( elem, [ animation ] );
			return false;
		},
		animation = deferred.promise( {
			elem: elem,
			props: jQuery.extend( {}, properties ),
			opts: jQuery.extend( true, {
				specialEasing: {},
				easing: jQuery.easing._default
			}, options ),
			originalProperties: properties,
			originalOptions: options,
			startTime: fxNow || createFxNow(),
			duration: options.duration,
			tweens: [],
			createTween: function( prop, end ) {
				var tween = jQuery.Tween( elem, animation.opts, prop, end,
						animation.opts.specialEasing[ prop ] || animation.opts.easing );
				animation.tweens.push( tween );
				return tween;
			},
			stop: function( gotoEnd ) {
				var index = 0,

					// If we are going to the end, we want to run all the tweens
					// otherwise we skip this part
					length = gotoEnd ? animation.tweens.length : 0;
				if ( stopped ) {
					return this;
				}
				stopped = true;
				for ( ; index < length; index++ ) {
					animation.tweens[ index ].run( 1 );
				}

				// Resolve when we played the last frame; otherwise, reject
				if ( gotoEnd ) {
					deferred.notifyWith( elem, [ animation, 1, 0 ] );
					deferred.resolveWith( elem, [ animation, gotoEnd ] );
				} else {
					deferred.rejectWith( elem, [ animation, gotoEnd ] );
				}
				return this;
			}
		} ),
		props = animation.props;

	propFilter( props, animation.opts.specialEasing );

	for ( ; index < length; index++ ) {
		result = Animation.prefilters[ index ].call( animation, elem, props, animation.opts );
		if ( result ) {
			if ( isFunction( result.stop ) ) {
				jQuery._queueHooks( animation.elem, animation.opts.queue ).stop =
					result.stop.bind( result );
			}
			return result;
		}
	}

	jQuery.map( props, createTween, animation );

	if ( isFunction( animation.opts.start ) ) {
		animation.opts.start.call( elem, animation );
	}

	// Attach callbacks from options
	animation
		.progress( animation.opts.progress )
		.done( animation.opts.done, animation.opts.complete )
		.fail( animation.opts.fail )
		.always( animation.opts.always );

	jQuery.fx.timer(
		jQuery.extend( tick, {
			elem: elem,
			anim: animation,
			queue: animation.opts.queue
		} )
	);

	return animation;
}

jQuery.Animation = jQuery.extend( Animation, {

	tweeners: {
		"*": [ function( prop, value ) {
			var tween = this.createTween( prop, value );
			adjustCSS( tween.elem, prop, rcssNum.exec( value ), tween );
			return tween;
		} ]
	},

	tweener: function( props, callback ) {
		if ( isFunction( props ) ) {
			callback = props;
			props = [ "*" ];
		} else {
			props = props.match( rnothtmlwhite );
		}

		var prop,
			index = 0,
			length = props.length;

		for ( ; index < length; index++ ) {
			prop = props[ index ];
			Animation.tweeners[ prop ] = Animation.tweeners[ prop ] || [];
			Animation.tweeners[ prop ].unshift( callback );
		}
	},

	prefilters: [ defaultPrefilter ],

	prefilter: function( callback, prepend ) {
		if ( prepend ) {
			Animation.prefilters.unshift( callback );
		} else {
			Animation.prefilters.push( callback );
		}
	}
} );

jQuery.speed = function( speed, easing, fn ) {
	var opt = speed && typeof speed === "object" ? jQuery.extend( {}, speed ) : {
		complete: fn || !fn && easing ||
			isFunction( speed ) && speed,
		duration: speed,
		easing: fn && easing || easing && !isFunction( easing ) && easing
	};

	// Go to the end state if fx are off
	if ( jQuery.fx.off ) {
		opt.duration = 0;

	} else {
		if ( typeof opt.duration !== "number" ) {
			if ( opt.duration in jQuery.fx.speeds ) {
				opt.duration = jQuery.fx.speeds[ opt.duration ];

			} else {
				opt.duration = jQuery.fx.speeds._default;
			}
		}
	}

	// Normalize opt.queue - true/undefined/null -> "fx"
	if ( opt.queue == null || opt.queue === true ) {
		opt.queue = "fx";
	}

	// Queueing
	opt.old = opt.complete;

	opt.complete = function() {
		if ( isFunction( opt.old ) ) {
			opt.old.call( this );
		}

		if ( opt.queue ) {
			jQuery.dequeue( this, opt.queue );
		}
	};

	return opt;
};

jQuery.fn.extend( {
	fadeTo: function( speed, to, easing, callback ) {

		// Show any hidden elements after setting opacity to 0
		return this.filter( isHiddenWithinTree ).css( "opacity", 0 ).show()

			// Animate to the value specified
			.end().animate( { opacity: to }, speed, easing, callback );
	},
	animate: function( prop, speed, easing, callback ) {
		var empty = jQuery.isEmptyObject( prop ),
			optall = jQuery.speed( speed, easing, callback ),
			doAnimation = function() {

				// Operate on a copy of prop so per-property easing won't be lost
				var anim = Animation( this, jQuery.extend( {}, prop ), optall );

				// Empty animations, or finishing resolves immediately
				if ( empty || dataPriv.get( this, "finish" ) ) {
					anim.stop( true );
				}
			};
			doAnimation.finish = doAnimation;

		return empty || optall.queue === false ?
			this.each( doAnimation ) :
			this.queue( optall.queue, doAnimation );
	},
	stop: function( type, clearQueue, gotoEnd ) {
		var stopQueue = function( hooks ) {
			var stop = hooks.stop;
			delete hooks.stop;
			stop( gotoEnd );
		};

		if ( typeof type !== "string" ) {
			gotoEnd = clearQueue;
			clearQueue = type;
			type = undefined;
		}
		if ( clearQueue && type !== false ) {
			this.queue( type || "fx", [] );
		}

		return this.each( function() {
			var dequeue = true,
				index = type != null && type + "queueHooks",
				timers = jQuery.timers,
				data = dataPriv.get( this );

			if ( index ) {
				if ( data[ index ] && data[ index ].stop ) {
					stopQueue( data[ index ] );
				}
			} else {
				for ( index in data ) {
					if ( data[ index ] && data[ index ].stop && rrun.test( index ) ) {
						stopQueue( data[ index ] );
					}
				}
			}

			for ( index = timers.length; index--; ) {
				if ( timers[ index ].elem === this &&
					( type == null || timers[ index ].queue === type ) ) {

					timers[ index ].anim.stop( gotoEnd );
					dequeue = false;
					timers.splice( index, 1 );
				}
			}

			// Start the next in the queue if the last step wasn't forced.
			// Timers currently will call their complete callbacks, which
			// will dequeue but only if they were gotoEnd.
			if ( dequeue || !gotoEnd ) {
				jQuery.dequeue( this, type );
			}
		} );
	},
	finish: function( type ) {
		if ( type !== false ) {
			type = type || "fx";
		}
		return this.each( function() {
			var index,
				data = dataPriv.get( this ),
				queue = data[ type + "queue" ],
				hooks = data[ type + "queueHooks" ],
				timers = jQuery.timers,
				length = queue ? queue.length : 0;

			// Enable finishing flag on private data
			data.finish = true;

			// Empty the queue first
			jQuery.queue( this, type, [] );

			if ( hooks && hooks.stop ) {
				hooks.stop.call( this, true );
			}

			// Look for any active animations, and finish them
			for ( index = timers.length; index--; ) {
				if ( timers[ index ].elem === this && timers[ index ].queue === type ) {
					timers[ index ].anim.stop( true );
					timers.splice( index, 1 );
				}
			}

			// Look for any animations in the old queue and finish them
			for ( index = 0; index < length; index++ ) {
				if ( queue[ index ] && queue[ index ].finish ) {
					queue[ index ].finish.call( this );
				}
			}

			// Turn off finishing flag
			delete data.finish;
		} );
	}
} );

jQuery.each( [ "toggle", "show", "hide" ], function( i, name ) {
	var cssFn = jQuery.fn[ name ];
	jQuery.fn[ name ] = function( speed, easing, callback ) {
		return speed == null || typeof speed === "boolean" ?
			cssFn.apply( this, arguments ) :
			this.animate( genFx( name, true ), speed, easing, callback );
	};
} );

// Generate shortcuts for custom animations
jQuery.each( {
	slideDown: genFx( "show" ),
	slideUp: genFx( "hide" ),
	slideToggle: genFx( "toggle" ),
	fadeIn: { opacity: "show" },
	fadeOut: { opacity: "hide" },
	fadeToggle: { opacity: "toggle" }
}, function( name, props ) {
	jQuery.fn[ name ] = function( speed, easing, callback ) {
		return this.animate( props, speed, easing, callback );
	};
} );

jQuery.timers = [];
jQuery.fx.tick = function() {
	var timer,
		i = 0,
		timers = jQuery.timers;

	fxNow = Date.now();

	for ( ; i < timers.length; i++ ) {
		timer = timers[ i ];

		// Run the timer and safely remove it when done (allowing for external removal)
		if ( !timer() && timers[ i ] === timer ) {
			timers.splice( i--, 1 );
		}
	}

	if ( !timers.length ) {
		jQuery.fx.stop();
	}
	fxNow = undefined;
};

jQuery.fx.timer = function( timer ) {
	jQuery.timers.push( timer );
	jQuery.fx.start();
};

jQuery.fx.interval = 13;
jQuery.fx.start = function() {
	if ( inProgress ) {
		return;
	}

	inProgress = true;
	schedule();
};

jQuery.fx.stop = function() {
	inProgress = null;
};

jQuery.fx.speeds = {
	slow: 600,
	fast: 200,

	// Default speed
	_default: 400
};


// Based off of the plugin by Clint Helfers, with permission.
// https://web.archive.org/web/20100324014747/http://blindsignals.com/index.php/2009/07/jquery-delay/
jQuery.fn.delay = function( time, type ) {
	time = jQuery.fx ? jQuery.fx.speeds[ time ] || time : time;
	type = type || "fx";

	return this.queue( type, function( next, hooks ) {
		var timeout = window.setTimeout( next, time );
		hooks.stop = function() {
			window.clearTimeout( timeout );
		};
	} );
};


( function() {
	var input = document.createElement( "input" ),
		select = document.createElement( "select" ),
		opt = select.appendChild( document.createElement( "option" ) );

	input.type = "checkbox";

	// Support: Android <=4.3 only
	// Default value for a checkbox should be "on"
	support.checkOn = input.value !== "";

	// Support: IE <=11 only
	// Must access selectedIndex to make default options select
	support.optSelected = opt.selected;

	// Support: IE <=11 only
	// An input loses its value after becoming a radio
	input = document.createElement( "input" );
	input.value = "t";
	input.type = "radio";
	support.radioValue = input.value === "t";
} )();


var boolHook,
	attrHandle = jQuery.expr.attrHandle;

jQuery.fn.extend( {
	attr: function( name, value ) {
		return access( this, jQuery.attr, name, value, arguments.length > 1 );
	},

	removeAttr: function( name ) {
		return this.each( function() {
			jQuery.removeAttr( this, name );
		} );
	}
} );

jQuery.extend( {
	attr: function( elem, name, value ) {
		var ret, hooks,
			nType = elem.nodeType;

		// Don't get/set attributes on text, comment and attribute nodes
		if ( nType === 3 || nType === 8 || nType === 2 ) {
			return;
		}

		// Fallback to prop when attributes are not supported
		if ( typeof elem.getAttribute === "undefined" ) {
			return jQuery.prop( elem, name, value );
		}

		// Attribute hooks are determined by the lowercase version
		// Grab necessary hook if one is defined
		if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {
			hooks = jQuery.attrHooks[ name.toLowerCase() ] ||
				( jQuery.expr.match.bool.test( name ) ? boolHook : undefined );
		}

		if ( value !== undefined ) {
			if ( value === null ) {
				jQuery.removeAttr( elem, name );
				return;
			}

			if ( hooks && "set" in hooks &&
				( ret = hooks.set( elem, value, name ) ) !== undefined ) {
				return ret;
			}

			elem.setAttribute( name, value + "" );
			return value;
		}

		if ( hooks && "get" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {
			return ret;
		}

		ret = jQuery.find.attr( elem, name );

		// Non-existent attributes return null, we normalize to undefined
		return ret == null ? undefined : ret;
	},

	attrHooks: {
		type: {
			set: function( elem, value ) {
				if ( !support.radioValue && value === "radio" &&
					nodeName( elem, "input" ) ) {
					var val = elem.value;
					elem.setAttribute( "type", value );
					if ( val ) {
						elem.value = val;
					}
					return value;
				}
			}
		}
	},

	removeAttr: function( elem, value ) {
		var name,
			i = 0,

			// Attribute names can contain non-HTML whitespace characters
			// https://html.spec.whatwg.org/multipage/syntax.html#attributes-2
			attrNames = value && value.match( rnothtmlwhite );

		if ( attrNames && elem.nodeType === 1 ) {
			while ( ( name = attrNames[ i++ ] ) ) {
				elem.removeAttribute( name );
			}
		}
	}
} );

// Hooks for boolean attributes
boolHook = {
	set: function( elem, value, name ) {
		if ( value === false ) {

			// Remove boolean attributes when set to false
			jQuery.removeAttr( elem, name );
		} else {
			elem.setAttribute( name, name );
		}
		return name;
	}
};

jQuery.each( jQuery.expr.match.bool.source.match( /\w+/g ), function( i, name ) {
	var getter = attrHandle[ name ] || jQuery.find.attr;

	attrHandle[ name ] = function( elem, name, isXML ) {
		var ret, handle,
			lowercaseName = name.toLowerCase();

		if ( !isXML ) {

			// Avoid an infinite loop by temporarily removing this function from the getter
			handle = attrHandle[ lowercaseName ];
			attrHandle[ lowercaseName ] = ret;
			ret = getter( elem, name, isXML ) != null ?
				lowercaseName :
				null;
			attrHandle[ lowercaseName ] = handle;
		}
		return ret;
	};
} );




var rfocusable = /^(?:input|select|textarea|button)$/i,
	rclickable = /^(?:a|area)$/i;

jQuery.fn.extend( {
	prop: function( name, value ) {
		return access( this, jQuery.prop, name, value, arguments.length > 1 );
	},

	removeProp: function( name ) {
		return this.each( function() {
			delete this[ jQuery.propFix[ name ] || name ];
		} );
	}
} );

jQuery.extend( {
	prop: function( elem, name, value ) {
		var ret, hooks,
			nType = elem.nodeType;

		// Don't get/set properties on text, comment and attribute nodes
		if ( nType === 3 || nType === 8 || nType === 2 ) {
			return;
		}

		if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {

			// Fix name and attach hooks
			name = jQuery.propFix[ name ] || name;
			hooks = jQuery.propHooks[ name ];
		}

		if ( value !== undefined ) {
			if ( hooks && "set" in hooks &&
				( ret = hooks.set( elem, value, name ) ) !== undefined ) {
				return ret;
			}

			return ( elem[ name ] = value );
		}

		if ( hooks && "get" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {
			return ret;
		}

		return elem[ name ];
	},

	propHooks: {
		tabIndex: {
			get: function( elem ) {

				// Support: IE <=9 - 11 only
				// elem.tabIndex doesn't always return the
				// correct value when it hasn't been explicitly set
				// https://web.archive.org/web/20141116233347/http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/
				// Use proper attribute retrieval(#12072)
				var tabindex = jQuery.find.attr( elem, "tabindex" );

				if ( tabindex ) {
					return parseInt( tabindex, 10 );
				}

				if (
					rfocusable.test( elem.nodeName ) ||
					rclickable.test( elem.nodeName ) &&
					elem.href
				) {
					return 0;
				}

				return -1;
			}
		}
	},

	propFix: {
		"for": "htmlFor",
		"class": "className"
	}
} );

// Support: IE <=11 only
// Accessing the selectedIndex property
// forces the browser to respect setting selected
// on the option
// The getter ensures a default option is selected
// when in an optgroup
// eslint rule "no-unused-expressions" is disabled for this code
// since it considers such accessions noop
if ( !support.optSelected ) {
	jQuery.propHooks.selected = {
		get: function( elem ) {

			/* eslint no-unused-expressions: "off" */

			var parent = elem.parentNode;
			if ( parent && parent.parentNode ) {
				parent.parentNode.selectedIndex;
			}
			return null;
		},
		set: function( elem ) {

			/* eslint no-unused-expressions: "off" */

			var parent = elem.parentNode;
			if ( parent ) {
				parent.selectedIndex;

				if ( parent.parentNode ) {
					parent.parentNode.selectedIndex;
				}
			}
		}
	};
}

jQuery.each( [
	"tabIndex",
	"readOnly",
	"maxLength",
	"cellSpacing",
	"cellPadding",
	"rowSpan",
	"colSpan",
	"useMap",
	"frameBorder",
	"contentEditable"
], function() {
	jQuery.propFix[ this.toLowerCase() ] = this;
} );




	// Strip and collapse whitespace according to HTML spec
	// https://infra.spec.whatwg.org/#strip-and-collapse-ascii-whitespace
	function stripAndCollapse( value ) {
		var tokens = value.match( rnothtmlwhite ) || [];
		return tokens.join( " " );
	}


function getClass( elem ) {
	return elem.getAttribute && elem.getAttribute( "class" ) || "";
}

function classesToArray( value ) {
	if ( Array.isArray( value ) ) {
		return value;
	}
	if ( typeof value === "string" ) {
		return value.match( rnothtmlwhite ) || [];
	}
	return [];
}

jQuery.fn.extend( {
	addClass: function( value ) {
		var classes, elem, cur, curValue, clazz, j, finalValue,
			i = 0;

		if ( isFunction( value ) ) {
			return this.each( function( j ) {
				jQuery( this ).addClass( value.call( this, j, getClass( this ) ) );
			} );
		}

		classes = classesToArray( value );

		if ( classes.length ) {
			while ( ( elem = this[ i++ ] ) ) {
				curValue = getClass( elem );
				cur = elem.nodeType === 1 && ( " " + stripAndCollapse( curValue ) + " " );

				if ( cur ) {
					j = 0;
					while ( ( clazz = classes[ j++ ] ) ) {
						if ( cur.indexOf( " " + clazz + " " ) < 0 ) {
							cur += clazz + " ";
						}
					}

					// Only assign if different to avoid unneeded rendering.
					finalValue = stripAndCollapse( cur );
					if ( curValue !== finalValue ) {
						elem.setAttribute( "class", finalValue );
					}
				}
			}
		}

		return this;
	},

	removeClass: function( value ) {
		var classes, elem, cur, curValue, clazz, j, finalValue,
			i = 0;

		if ( isFunction( value ) ) {
			return this.each( function( j ) {
				jQuery( this ).removeClass( value.call( this, j, getClass( this ) ) );
			} );
		}

		if ( !arguments.length ) {
			return this.attr( "class", "" );
		}

		classes = classesToArray( value );

		if ( classes.length ) {
			while ( ( elem = this[ i++ ] ) ) {
				curValue = getClass( elem );

				// This expression is here for better compressibility (see addClass)
				cur = elem.nodeType === 1 && ( " " + stripAndCollapse( curValue ) + " " );

				if ( cur ) {
					j = 0;
					while ( ( clazz = classes[ j++ ] ) ) {

						// Remove *all* instances
						while ( cur.indexOf( " " + clazz + " " ) > -1 ) {
							cur = cur.replace( " " + clazz + " ", " " );
						}
					}

					// Only assign if different to avoid unneeded rendering.
					finalValue = stripAndCollapse( cur );
					if ( curValue !== finalValue ) {
						elem.setAttribute( "class", finalValue );
					}
				}
			}
		}

		return this;
	},

	toggleClass: function( value, stateVal ) {
		var type = typeof value,
			isValidValue = type === "string" || Array.isArray( value );

		if ( typeof stateVal === "boolean" && isValidValue ) {
			return stateVal ? this.addClass( value ) : this.removeClass( value );
		}

		if ( isFunction( value ) ) {
			return this.each( function( i ) {
				jQuery( this ).toggleClass(
					value.call( this, i, getClass( this ), stateVal ),
					stateVal
				);
			} );
		}

		return this.each( function() {
			var className, i, self, classNames;

			if ( isValidValue ) {

				// Toggle individual class names
				i = 0;
				self = jQuery( this );
				classNames = classesToArray( value );

				while ( ( className = classNames[ i++ ] ) ) {

					// Check each className given, space separated list
					if ( self.hasClass( className ) ) {
						self.removeClass( className );
					} else {
						self.addClass( className );
					}
				}

			// Toggle whole class name
			} else if ( value === undefined || type === "boolean" ) {
				className = getClass( this );
				if ( className ) {

					// Store className if set
					dataPriv.set( this, "__className__", className );
				}

				// If the element has a class name or if we're passed `false`,
				// then remove the whole classname (if there was one, the above saved it).
				// Otherwise bring back whatever was previously saved (if anything),
				// falling back to the empty string if nothing was stored.
				if ( this.setAttribute ) {
					this.setAttribute( "class",
						className || value === false ?
						"" :
						dataPriv.get( this, "__className__" ) || ""
					);
				}
			}
		} );
	},

	hasClass: function( selector ) {
		var className, elem,
			i = 0;

		className = " " + selector + " ";
		while ( ( elem = this[ i++ ] ) ) {
			if ( elem.nodeType === 1 &&
				( " " + stripAndCollapse( getClass( elem ) ) + " " ).indexOf( className ) > -1 ) {
					return true;
			}
		}

		return false;
	}
} );




var rreturn = /\r/g;

jQuery.fn.extend( {
	val: function( value ) {
		var hooks, ret, valueIsFunction,
			elem = this[ 0 ];

		if ( !arguments.length ) {
			if ( elem ) {
				hooks = jQuery.valHooks[ elem.type ] ||
					jQuery.valHooks[ elem.nodeName.toLowerCase() ];

				if ( hooks &&
					"get" in hooks &&
					( ret = hooks.get( elem, "value" ) ) !== undefined
				) {
					return ret;
				}

				ret = elem.value;

				// Handle most common string cases
				if ( typeof ret === "string" ) {
					return ret.replace( rreturn, "" );
				}

				// Handle cases where value is null/undef or number
				return ret == null ? "" : ret;
			}

			return;
		}

		valueIsFunction = isFunction( value );

		return this.each( function( i ) {
			var val;

			if ( this.nodeType !== 1 ) {
				return;
			}

			if ( valueIsFunction ) {
				val = value.call( this, i, jQuery( this ).val() );
			} else {
				val = value;
			}

			// Treat null/undefined as ""; convert numbers to string
			if ( val == null ) {
				val = "";

			} else if ( typeof val === "number" ) {
				val += "";

			} else if ( Array.isArray( val ) ) {
				val = jQuery.map( val, function( value ) {
					return value == null ? "" : value + "";
				} );
			}

			hooks = jQuery.valHooks[ this.type ] || jQuery.valHooks[ this.nodeName.toLowerCase() ];

			// If set returns undefined, fall back to normal setting
			if ( !hooks || !( "set" in hooks ) || hooks.set( this, val, "value" ) === undefined ) {
				this.value = val;
			}
		} );
	}
} );

jQuery.extend( {
	valHooks: {
		option: {
			get: function( elem ) {

				var val = jQuery.find.attr( elem, "value" );
				return val != null ?
					val :

					// Support: IE <=10 - 11 only
					// option.text throws exceptions (#14686, #14858)
					// Strip and collapse whitespace
					// https://html.spec.whatwg.org/#strip-and-collapse-whitespace
					stripAndCollapse( jQuery.text( elem ) );
			}
		},
		select: {
			get: function( elem ) {
				var value, option, i,
					options = elem.options,
					index = elem.selectedIndex,
					one = elem.type === "select-one",
					values = one ? null : [],
					max = one ? index + 1 : options.length;

				if ( index < 0 ) {
					i = max;

				} else {
					i = one ? index : 0;
				}

				// Loop through all the selected options
				for ( ; i < max; i++ ) {
					option = options[ i ];

					// Support: IE <=9 only
					// IE8-9 doesn't update selected after form reset (#2551)
					if ( ( option.selected || i === index ) &&

							// Don't return options that are disabled or in a disabled optgroup
							!option.disabled &&
							( !option.parentNode.disabled ||
								!nodeName( option.parentNode, "optgroup" ) ) ) {

						// Get the specific value for the option
						value = jQuery( option ).val();

						// We don't need an array for one selects
						if ( one ) {
							return value;
						}

						// Multi-Selects return an array
						values.push( value );
					}
				}

				return values;
			},

			set: function( elem, value ) {
				var optionSet, option,
					options = elem.options,
					values = jQuery.makeArray( value ),
					i = options.length;

				while ( i-- ) {
					option = options[ i ];

					/* eslint-disable no-cond-assign */

					if ( option.selected =
						jQuery.inArray( jQuery.valHooks.option.get( option ), values ) > -1
					) {
						optionSet = true;
					}

					/* eslint-enable no-cond-assign */
				}

				// Force browsers to behave consistently when non-matching value is set
				if ( !optionSet ) {
					elem.selectedIndex = -1;
				}
				return values;
			}
		}
	}
} );

// Radios and checkboxes getter/setter
jQuery.each( [ "radio", "checkbox" ], function() {
	jQuery.valHooks[ this ] = {
		set: function( elem, value ) {
			if ( Array.isArray( value ) ) {
				return ( elem.checked = jQuery.inArray( jQuery( elem ).val(), value ) > -1 );
			}
		}
	};
	if ( !support.checkOn ) {
		jQuery.valHooks[ this ].get = function( elem ) {
			return elem.getAttribute( "value" ) === null ? "on" : elem.value;
		};
	}
} );




// Return jQuery for attributes-only inclusion


support.focusin = "onfocusin" in window;


var rfocusMorph = /^(?:focusinfocus|focusoutblur)$/,
	stopPropagationCallback = function( e ) {
		e.stopPropagation();
	};

jQuery.extend( jQuery.event, {

	trigger: function( event, data, elem, onlyHandlers ) {

		var i, cur, tmp, bubbleType, ontype, handle, special, lastElement,
			eventPath = [ elem || document ],
			type = hasOwn.call( event, "type" ) ? event.type : event,
			namespaces = hasOwn.call( event, "namespace" ) ? event.namespace.split( "." ) : [];

		cur = lastElement = tmp = elem = elem || document;

		// Don't do events on text and comment nodes
		if ( elem.nodeType === 3 || elem.nodeType === 8 ) {
			return;
		}

		// focus/blur morphs to focusin/out; ensure we're not firing them right now
		if ( rfocusMorph.test( type + jQuery.event.triggered ) ) {
			return;
		}

		if ( type.indexOf( "." ) > -1 ) {

			// Namespaced trigger; create a regexp to match event type in handle()
			namespaces = type.split( "." );
			type = namespaces.shift();
			namespaces.sort();
		}
		ontype = type.indexOf( ":" ) < 0 && "on" + type;

		// Caller can pass in a jQuery.Event object, Object, or just an event type string
		event = event[ jQuery.expando ] ?
			event :
			new jQuery.Event( type, typeof event === "object" && event );

		// Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)
		event.isTrigger = onlyHandlers ? 2 : 3;
		event.namespace = namespaces.join( "." );
		event.rnamespace = event.namespace ?
			new RegExp( "(^|\\.)" + namespaces.join( "\\.(?:.*\\.|)" ) + "(\\.|$)" ) :
			null;

		// Clean up the event in case it is being reused
		event.result = undefined;
		if ( !event.target ) {
			event.target = elem;
		}

		// Clone any incoming data and prepend the event, creating the handler arg list
		data = data == null ?
			[ event ] :
			jQuery.makeArray( data, [ event ] );

		// Allow special events to draw outside the lines
		special = jQuery.event.special[ type ] || {};
		if ( !onlyHandlers && special.trigger && special.trigger.apply( elem, data ) === false ) {
			return;
		}

		// Determine event propagation path in advance, per W3C events spec (#9951)
		// Bubble up to document, then to window; watch for a global ownerDocument var (#9724)
		if ( !onlyHandlers && !special.noBubble && !isWindow( elem ) ) {

			bubbleType = special.delegateType || type;
			if ( !rfocusMorph.test( bubbleType + type ) ) {
				cur = cur.parentNode;
			}
			for ( ; cur; cur = cur.parentNode ) {
				eventPath.push( cur );
				tmp = cur;
			}

			// Only add window if we got to document (e.g., not plain obj or detached DOM)
			if ( tmp === ( elem.ownerDocument || document ) ) {
				eventPath.push( tmp.defaultView || tmp.parentWindow || window );
			}
		}

		// Fire handlers on the event path
		i = 0;
		while ( ( cur = eventPath[ i++ ] ) && !event.isPropagationStopped() ) {
			lastElement = cur;
			event.type = i > 1 ?
				bubbleType :
				special.bindType || type;

			// jQuery handler
			handle = ( dataPriv.get( cur, "events" ) || {} )[ event.type ] &&
				dataPriv.get( cur, "handle" );
			if ( handle ) {
				handle.apply( cur, data );
			}

			// Native handler
			handle = ontype && cur[ ontype ];
			if ( handle && handle.apply && acceptData( cur ) ) {
				event.result = handle.apply( cur, data );
				if ( event.result === false ) {
					event.preventDefault();
				}
			}
		}
		event.type = type;

		// If nobody prevented the default action, do it now
		if ( !onlyHandlers && !event.isDefaultPrevented() ) {

			if ( ( !special._default ||
				special._default.apply( eventPath.pop(), data ) === false ) &&
				acceptData( elem ) ) {

				// Call a native DOM method on the target with the same name as the event.
				// Don't do default actions on window, that's where global variables be (#6170)
				if ( ontype && isFunction( elem[ type ] ) && !isWindow( elem ) ) {

					// Don't re-trigger an onFOO event when we call its FOO() method
					tmp = elem[ ontype ];

					if ( tmp ) {
						elem[ ontype ] = null;
					}

					// Prevent re-triggering of the same event, since we already bubbled it above
					jQuery.event.triggered = type;

					if ( event.isPropagationStopped() ) {
						lastElement.addEventListener( type, stopPropagationCallback );
					}

					elem[ type ]();

					if ( event.isPropagationStopped() ) {
						lastElement.removeEventListener( type, stopPropagationCallback );
					}

					jQuery.event.triggered = undefined;

					if ( tmp ) {
						elem[ ontype ] = tmp;
					}
				}
			}
		}

		return event.result;
	},

	// Piggyback on a donor event to simulate a different one
	// Used only for `focus(in | out)` events
	simulate: function( type, elem, event ) {
		var e = jQuery.extend(
			new jQuery.Event(),
			event,
			{
				type: type,
				isSimulated: true
			}
		);

		jQuery.event.trigger( e, null, elem );
	}

} );

jQuery.fn.extend( {

	trigger: function( type, data ) {
		return this.each( function() {
			jQuery.event.trigger( type, data, this );
		} );
	},
	triggerHandler: function( type, data ) {
		var elem = this[ 0 ];
		if ( elem ) {
			return jQuery.event.trigger( type, data, elem, true );
		}
	}
} );


// Support: Firefox <=44
// Firefox doesn't have focus(in | out) events
// Related ticket - https://bugzilla.mozilla.org/show_bug.cgi?id=687787
//
// Support: Chrome <=48 - 49, Safari <=9.0 - 9.1
// focus(in | out) events fire after focus & blur events,
// which is spec violation - http://www.w3.org/TR/DOM-Level-3-Events/#events-focusevent-event-order
// Related ticket - https://bugs.chromium.org/p/chromium/issues/detail?id=449857
if ( !support.focusin ) {
	jQuery.each( { focus: "focusin", blur: "focusout" }, function( orig, fix ) {

		// Attach a single capturing handler on the document while someone wants focusin/focusout
		var handler = function( event ) {
			jQuery.event.simulate( fix, event.target, jQuery.event.fix( event ) );
		};

		jQuery.event.special[ fix ] = {
			setup: function() {
				var doc = this.ownerDocument || this,
					attaches = dataPriv.access( doc, fix );

				if ( !attaches ) {
					doc.addEventListener( orig, handler, true );
				}
				dataPriv.access( doc, fix, ( attaches || 0 ) + 1 );
			},
			teardown: function() {
				var doc = this.ownerDocument || this,
					attaches = dataPriv.access( doc, fix ) - 1;

				if ( !attaches ) {
					doc.removeEventListener( orig, handler, true );
					dataPriv.remove( doc, fix );

				} else {
					dataPriv.access( doc, fix, attaches );
				}
			}
		};
	} );
}
var location = window.location;

var nonce = Date.now();

var rquery = ( /\?/ );



// Cross-browser xml parsing
jQuery.parseXML = function( data ) {
	var xml;
	if ( !data || typeof data !== "string" ) {
		return null;
	}

	// Support: IE 9 - 11 only
	// IE throws on parseFromString with invalid input.
	try {
		xml = ( new window.DOMParser() ).parseFromString( data, "text/xml" );
	} catch ( e ) {
		xml = undefined;
	}

	if ( !xml || xml.getElementsByTagName( "parsererror" ).length ) {
		jQuery.error( "Invalid XML: " + data );
	}
	return xml;
};


var
	rbracket = /\[\]$/,
	rCRLF = /\r?\n/g,
	rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,
	rsubmittable = /^(?:input|select|textarea|keygen)/i;

function buildParams( prefix, obj, traditional, add ) {
	var name;

	if ( Array.isArray( obj ) ) {

		// Serialize array item.
		jQuery.each( obj, function( i, v ) {
			if ( traditional || rbracket.test( prefix ) ) {

				// Treat each array item as a scalar.
				add( prefix, v );

			} else {

				// Item is non-scalar (array or object), encode its numeric index.
				buildParams(
					prefix + "[" + ( typeof v === "object" && v != null ? i : "" ) + "]",
					v,
					traditional,
					add
				);
			}
		} );

	} else if ( !traditional && toType( obj ) === "object" ) {

		// Serialize object item.
		for ( name in obj ) {
			buildParams( prefix + "[" + name + "]", obj[ name ], traditional, add );
		}

	} else {

		// Serialize scalar item.
		add( prefix, obj );
	}
}

// Serialize an array of form elements or a set of
// key/values into a query string
jQuery.param = function( a, traditional ) {
	var prefix,
		s = [],
		add = function( key, valueOrFunction ) {

			// If value is a function, invoke it and use its return value
			var value = isFunction( valueOrFunction ) ?
				valueOrFunction() :
				valueOrFunction;

			s[ s.length ] = encodeURIComponent( key ) + "=" +
				encodeURIComponent( value == null ? "" : value );
		};

	// If an array was passed in, assume that it is an array of form elements.
	if ( Array.isArray( a ) || ( a.jquery && !jQuery.isPlainObject( a ) ) ) {

		// Serialize the form elements
		jQuery.each( a, function() {
			add( this.name, this.value );
		} );

	} else {

		// If traditional, encode the "old" way (the way 1.3.2 or older
		// did it), otherwise encode params recursively.
		for ( prefix in a ) {
			buildParams( prefix, a[ prefix ], traditional, add );
		}
	}

	// Return the resulting serialization
	return s.join( "&" );
};

jQuery.fn.extend( {
	serialize: function() {
		return jQuery.param( this.serializeArray() );
	},
	serializeArray: function() {
		return this.map( function() {

			// Can add propHook for "elements" to filter or add form elements
			var elements = jQuery.prop( this, "elements" );
			return elements ? jQuery.makeArray( elements ) : this;
		} )
		.filter( function() {
			var type = this.type;

			// Use .is( ":disabled" ) so that fieldset[disabled] works
			return this.name && !jQuery( this ).is( ":disabled" ) &&
				rsubmittable.test( this.nodeName ) && !rsubmitterTypes.test( type ) &&
				( this.checked || !rcheckableType.test( type ) );
		} )
		.map( function( i, elem ) {
			var val = jQuery( this ).val();

			if ( val == null ) {
				return null;
			}

			if ( Array.isArray( val ) ) {
				return jQuery.map( val, function( val ) {
					return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
				} );
			}

			return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
		} ).get();
	}
} );


var
	r20 = /%20/g,
	rhash = /#.*$/,
	rantiCache = /([?&])_=[^&]*/,
	rheaders = /^(.*?):[ \t]*([^\r\n]*)$/mg,

	// #7653, #8125, #8152: local protocol detection
	rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,
	rnoContent = /^(?:GET|HEAD)$/,
	rprotocol = /^\/\//,

	/* Prefilters
	 * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
	 * 2) These are called:
	 *    - BEFORE asking for a transport
	 *    - AFTER param serialization (s.data is a string if s.processData is true)
	 * 3) key is the dataType
	 * 4) the catchall symbol "*" can be used
	 * 5) execution will start with transport dataType and THEN continue down to "*" if needed
	 */
	prefilters = {},

	/* Transports bindings
	 * 1) key is the dataType
	 * 2) the catchall symbol "*" can be used
	 * 3) selection will start with transport dataType and THEN go to "*" if needed
	 */
	transports = {},

	// Avoid comment-prolog char sequence (#10098); must appease lint and evade compression
	allTypes = "*/".concat( "*" ),

	// Anchor tag for parsing the document origin
	originAnchor = document.createElement( "a" );
	originAnchor.href = location.href;

// Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport
function addToPrefiltersOrTransports( structure ) {

	// dataTypeExpression is optional and defaults to "*"
	return function( dataTypeExpression, func ) {

		if ( typeof dataTypeExpression !== "string" ) {
			func = dataTypeExpression;
			dataTypeExpression = "*";
		}

		var dataType,
			i = 0,
			dataTypes = dataTypeExpression.toLowerCase().match( rnothtmlwhite ) || [];

		if ( isFunction( func ) ) {

			// For each dataType in the dataTypeExpression
			while ( ( dataType = dataTypes[ i++ ] ) ) {

				// Prepend if requested
				if ( dataType[ 0 ] === "+" ) {
					dataType = dataType.slice( 1 ) || "*";
					( structure[ dataType ] = structure[ dataType ] || [] ).unshift( func );

				// Otherwise append
				} else {
					( structure[ dataType ] = structure[ dataType ] || [] ).push( func );
				}
			}
		}
	};
}

// Base inspection function for prefilters and transports
function inspectPrefiltersOrTransports( structure, options, originalOptions, jqXHR ) {

	var inspected = {},
		seekingTransport = ( structure === transports );

	function inspect( dataType ) {
		var selected;
		inspected[ dataType ] = true;
		jQuery.each( structure[ dataType ] || [], function( _, prefilterOrFactory ) {
			var dataTypeOrTransport = prefilterOrFactory( options, originalOptions, jqXHR );
			if ( typeof dataTypeOrTransport === "string" &&
				!seekingTransport && !inspected[ dataTypeOrTransport ] ) {

				options.dataTypes.unshift( dataTypeOrTransport );
				inspect( dataTypeOrTransport );
				return false;
			} else if ( seekingTransport ) {
				return !( selected = dataTypeOrTransport );
			}
		} );
		return selected;
	}

	return inspect( options.dataTypes[ 0 ] ) || !inspected[ "*" ] && inspect( "*" );
}

// A special extend for ajax options
// that takes "flat" options (not to be deep extended)
// Fixes #9887
function ajaxExtend( target, src ) {
	var key, deep,
		flatOptions = jQuery.ajaxSettings.flatOptions || {};

	for ( key in src ) {
		if ( src[ key ] !== undefined ) {
			( flatOptions[ key ] ? target : ( deep || ( deep = {} ) ) )[ key ] = src[ key ];
		}
	}
	if ( deep ) {
		jQuery.extend( true, target, deep );
	}

	return target;
}

/* Handles responses to an ajax request:
 * - finds the right dataType (mediates between content-type and expected dataType)
 * - returns the corresponding response
 */
function ajaxHandleResponses( s, jqXHR, responses ) {

	var ct, type, finalDataType, firstDataType,
		contents = s.contents,
		dataTypes = s.dataTypes;

	// Remove auto dataType and get content-type in the process
	while ( dataTypes[ 0 ] === "*" ) {
		dataTypes.shift();
		if ( ct === undefined ) {
			ct = s.mimeType || jqXHR.getResponseHeader( "Content-Type" );
		}
	}

	// Check if we're dealing with a known content-type
	if ( ct ) {
		for ( type in contents ) {
			if ( contents[ type ] && contents[ type ].test( ct ) ) {
				dataTypes.unshift( type );
				break;
			}
		}
	}

	// Check to see if we have a response for the expected dataType
	if ( dataTypes[ 0 ] in responses ) {
		finalDataType = dataTypes[ 0 ];
	} else {

		// Try convertible dataTypes
		for ( type in responses ) {
			if ( !dataTypes[ 0 ] || s.converters[ type + " " + dataTypes[ 0 ] ] ) {
				finalDataType = type;
				break;
			}
			if ( !firstDataType ) {
				firstDataType = type;
			}
		}

		// Or just use first one
		finalDataType = finalDataType || firstDataType;
	}

	// If we found a dataType
	// We add the dataType to the list if needed
	// and return the corresponding response
	if ( finalDataType ) {
		if ( finalDataType !== dataTypes[ 0 ] ) {
			dataTypes.unshift( finalDataType );
		}
		return responses[ finalDataType ];
	}
}

/* Chain conversions given the request and the original response
 * Also sets the responseXXX fields on the jqXHR instance
 */
function ajaxConvert( s, response, jqXHR, isSuccess ) {
	var conv2, current, conv, tmp, prev,
		converters = {},

		// Work with a copy of dataTypes in case we need to modify it for conversion
		dataTypes = s.dataTypes.slice();

	// Create converters map with lowercased keys
	if ( dataTypes[ 1 ] ) {
		for ( conv in s.converters ) {
			converters[ conv.toLowerCase() ] = s.converters[ conv ];
		}
	}

	current = dataTypes.shift();

	// Convert to each sequential dataType
	while ( current ) {

		if ( s.responseFields[ current ] ) {
			jqXHR[ s.responseFields[ current ] ] = response;
		}

		// Apply the dataFilter if provided
		if ( !prev && isSuccess && s.dataFilter ) {
			response = s.dataFilter( response, s.dataType );
		}

		prev = current;
		current = dataTypes.shift();

		if ( current ) {

			// There's only work to do if current dataType is non-auto
			if ( current === "*" ) {

				current = prev;

			// Convert response if prev dataType is non-auto and differs from current
			} else if ( prev !== "*" && prev !== current ) {

				// Seek a direct converter
				conv = converters[ prev + " " + current ] || converters[ "* " + current ];

				// If none found, seek a pair
				if ( !conv ) {
					for ( conv2 in converters ) {

						// If conv2 outputs current
						tmp = conv2.split( " " );
						if ( tmp[ 1 ] === current ) {

							// If prev can be converted to accepted input
							conv = converters[ prev + " " + tmp[ 0 ] ] ||
								converters[ "* " + tmp[ 0 ] ];
							if ( conv ) {

								// Condense equivalence converters
								if ( conv === true ) {
									conv = converters[ conv2 ];

								// Otherwise, insert the intermediate dataType
								} else if ( converters[ conv2 ] !== true ) {
									current = tmp[ 0 ];
									dataTypes.unshift( tmp[ 1 ] );
								}
								break;
							}
						}
					}
				}

				// Apply converter (if not an equivalence)
				if ( conv !== true ) {

					// Unless errors are allowed to bubble, catch and return them
					if ( conv && s.throws ) {
						response = conv( response );
					} else {
						try {
							response = conv( response );
						} catch ( e ) {
							return {
								state: "parsererror",
								error: conv ? e : "No conversion from " + prev + " to " + current
							};
						}
					}
				}
			}
		}
	}

	return { state: "success", data: response };
}

jQuery.extend( {

	// Counter for holding the number of active queries
	active: 0,

	// Last-Modified header cache for next request
	lastModified: {},
	etag: {},

	ajaxSettings: {
		url: location.href,
		type: "GET",
		isLocal: rlocalProtocol.test( location.protocol ),
		global: true,
		processData: true,
		async: true,
		contentType: "application/x-www-form-urlencoded; charset=UTF-8",

		/*
		timeout: 0,
		data: null,
		dataType: null,
		username: null,
		password: null,
		cache: null,
		throws: false,
		traditional: false,
		headers: {},
		*/

		accepts: {
			"*": allTypes,
			text: "text/plain",
			html: "text/html",
			xml: "application/xml, text/xml",
			json: "application/json, text/javascript"
		},

		contents: {
			xml: /\bxml\b/,
			html: /\bhtml/,
			json: /\bjson\b/
		},

		responseFields: {
			xml: "responseXML",
			text: "responseText",
			json: "responseJSON"
		},

		// Data converters
		// Keys separate source (or catchall "*") and destination types with a single space
		converters: {

			// Convert anything to text
			"* text": String,

			// Text to html (true = no transformation)
			"text html": true,

			// Evaluate text as a json expression
			"text json": JSON.parse,

			// Parse text as xml
			"text xml": jQuery.parseXML
		},

		// For options that shouldn't be deep extended:
		// you can add your own custom options here if
		// and when you create one that shouldn't be
		// deep extended (see ajaxExtend)
		flatOptions: {
			url: true,
			context: true
		}
	},

	// Creates a full fledged settings object into target
	// with both ajaxSettings and settings fields.
	// If target is omitted, writes into ajaxSettings.
	ajaxSetup: function( target, settings ) {
		return settings ?

			// Building a settings object
			ajaxExtend( ajaxExtend( target, jQuery.ajaxSettings ), settings ) :

			// Extending ajaxSettings
			ajaxExtend( jQuery.ajaxSettings, target );
	},

	ajaxPrefilter: addToPrefiltersOrTransports( prefilters ),
	ajaxTransport: addToPrefiltersOrTransports( transports ),

	// Main method
	ajax: function( url, options ) {

		// If url is an object, simulate pre-1.5 signature
		if ( typeof url === "object" ) {
			options = url;
			url = undefined;
		}

		// Force options to be an object
		options = options || {};

		var transport,

			// URL without anti-cache param
			cacheURL,

			// Response headers
			responseHeadersString,
			responseHeaders,

			// timeout handle
			timeoutTimer,

			// Url cleanup var
			urlAnchor,

			// Request state (becomes false upon send and true upon completion)
			completed,

			// To know if global events are to be dispatched
			fireGlobals,

			// Loop variable
			i,

			// uncached part of the url
			uncached,

			// Create the final options object
			s = jQuery.ajaxSetup( {}, options ),

			// Callbacks context
			callbackContext = s.context || s,

			// Context for global events is callbackContext if it is a DOM node or jQuery collection
			globalEventContext = s.context &&
				( callbackContext.nodeType || callbackContext.jquery ) ?
					jQuery( callbackContext ) :
					jQuery.event,

			// Deferreds
			deferred = jQuery.Deferred(),
			completeDeferred = jQuery.Callbacks( "once memory" ),

			// Status-dependent callbacks
			statusCode = s.statusCode || {},

			// Headers (they are sent all at once)
			requestHeaders = {},
			requestHeadersNames = {},

			// Default abort message
			strAbort = "canceled",

			// Fake xhr
			jqXHR = {
				readyState: 0,

				// Builds headers hashtable if needed
				getResponseHeader: function( key ) {
					var match;
					if ( completed ) {
						if ( !responseHeaders ) {
							responseHeaders = {};
							while ( ( match = rheaders.exec( responseHeadersString ) ) ) {
								responseHeaders[ match[ 1 ].toLowerCase() ] = match[ 2 ];
							}
						}
						match = responseHeaders[ key.toLowerCase() ];
					}
					return match == null ? null : match;
				},

				// Raw string
				getAllResponseHeaders: function() {
					return completed ? responseHeadersString : null;
				},

				// Caches the header
				setRequestHeader: function( name, value ) {
					if ( completed == null ) {
						name = requestHeadersNames[ name.toLowerCase() ] =
							requestHeadersNames[ name.toLowerCase() ] || name;
						requestHeaders[ name ] = value;
					}
					return this;
				},

				// Overrides response content-type header
				overrideMimeType: function( type ) {
					if ( completed == null ) {
						s.mimeType = type;
					}
					return this;
				},

				// Status-dependent callbacks
				statusCode: function( map ) {
					var code;
					if ( map ) {
						if ( completed ) {

							// Execute the appropriate callbacks
							jqXHR.always( map[ jqXHR.status ] );
						} else {

							// Lazy-add the new callbacks in a way that preserves old ones
							for ( code in map ) {
								statusCode[ code ] = [ statusCode[ code ], map[ code ] ];
							}
						}
					}
					return this;
				},

				// Cancel the request
				abort: function( statusText ) {
					var finalText = statusText || strAbort;
					if ( transport ) {
						transport.abort( finalText );
					}
					done( 0, finalText );
					return this;
				}
			};

		// Attach deferreds
		deferred.promise( jqXHR );

		// Add protocol if not provided (prefilters might expect it)
		// Handle falsy url in the settings object (#10093: consistency with old signature)
		// We also use the url parameter if available
		s.url = ( ( url || s.url || location.href ) + "" )
			.replace( rprotocol, location.protocol + "//" );

		// Alias method option to type as per ticket #12004
		s.type = options.method || options.type || s.method || s.type;

		// Extract dataTypes list
		s.dataTypes = ( s.dataType || "*" ).toLowerCase().match( rnothtmlwhite ) || [ "" ];

		// A cross-domain request is in order when the origin doesn't match the current origin.
		if ( s.crossDomain == null ) {
			urlAnchor = document.createElement( "a" );

			// Support: IE <=8 - 11, Edge 12 - 15
			// IE throws exception on accessing the href property if url is malformed,
			// e.g. http://example.com:80x/
			try {
				urlAnchor.href = s.url;

				// Support: IE <=8 - 11 only
				// Anchor's host property isn't correctly set when s.url is relative
				urlAnchor.href = urlAnchor.href;
				s.crossDomain = originAnchor.protocol + "//" + originAnchor.host !==
					urlAnchor.protocol + "//" + urlAnchor.host;
			} catch ( e ) {

				// If there is an error parsing the URL, assume it is crossDomain,
				// it can be rejected by the transport if it is invalid
				s.crossDomain = true;
			}
		}

		// Convert data if not already a string
		if ( s.data && s.processData && typeof s.data !== "string" ) {
			s.data = jQuery.param( s.data, s.traditional );
		}

		// Apply prefilters
		inspectPrefiltersOrTransports( prefilters, s, options, jqXHR );

		// If request was aborted inside a prefilter, stop there
		if ( completed ) {
			return jqXHR;
		}

		// We can fire global events as of now if asked to
		// Don't fire events if jQuery.event is undefined in an AMD-usage scenario (#15118)
		fireGlobals = jQuery.event && s.global;

		// Watch for a new set of requests
		if ( fireGlobals && jQuery.active++ === 0 ) {
			jQuery.event.trigger( "ajaxStart" );
		}

		// Uppercase the type
		s.type = s.type.toUpperCase();

		// Determine if request has content
		s.hasContent = !rnoContent.test( s.type );

		// Save the URL in case we're toying with the If-Modified-Since
		// and/or If-None-Match header later on
		// Remove hash to simplify url manipulation
		cacheURL = s.url.replace( rhash, "" );

		// More options handling for requests with no content
		if ( !s.hasContent ) {

			// Remember the hash so we can put it back
			uncached = s.url.slice( cacheURL.length );

			// If data is available and should be processed, append data to url
			if ( s.data && ( s.processData || typeof s.data === "string" ) ) {
				cacheURL += ( rquery.test( cacheURL ) ? "&" : "?" ) + s.data;

				// #9682: remove data so that it's not used in an eventual retry
				delete s.data;
			}

			// Add or update anti-cache param if needed
			if ( s.cache === false ) {
				cacheURL = cacheURL.replace( rantiCache, "$1" );
				uncached = ( rquery.test( cacheURL ) ? "&" : "?" ) + "_=" + ( nonce++ ) + uncached;
			}

			// Put hash and anti-cache on the URL that will be requested (gh-1732)
			s.url = cacheURL + uncached;

		// Change '%20' to '+' if this is encoded form body content (gh-2658)
		} else if ( s.data && s.processData &&
			( s.contentType || "" ).indexOf( "application/x-www-form-urlencoded" ) === 0 ) {
			s.data = s.data.replace( r20, "+" );
		}

		// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
		if ( s.ifModified ) {
			if ( jQuery.lastModified[ cacheURL ] ) {
				jqXHR.setRequestHeader( "If-Modified-Since", jQuery.lastModified[ cacheURL ] );
			}
			if ( jQuery.etag[ cacheURL ] ) {
				jqXHR.setRequestHeader( "If-None-Match", jQuery.etag[ cacheURL ] );
			}
		}

		// Set the correct header, if data is being sent
		if ( s.data && s.hasContent && s.contentType !== false || options.contentType ) {
			jqXHR.setRequestHeader( "Content-Type", s.contentType );
		}

		// Set the Accepts header for the server, depending on the dataType
		jqXHR.setRequestHeader(
			"Accept",
			s.dataTypes[ 0 ] && s.accepts[ s.dataTypes[ 0 ] ] ?
				s.accepts[ s.dataTypes[ 0 ] ] +
					( s.dataTypes[ 0 ] !== "*" ? ", " + allTypes + "; q=0.01" : "" ) :
				s.accepts[ "*" ]
		);

		// Check for headers option
		for ( i in s.headers ) {
			jqXHR.setRequestHeader( i, s.headers[ i ] );
		}

		// Allow custom headers/mimetypes and early abort
		if ( s.beforeSend &&
			( s.beforeSend.call( callbackContext, jqXHR, s ) === false || completed ) ) {

			// Abort if not done already and return
			return jqXHR.abort();
		}

		// Aborting is no longer a cancellation
		strAbort = "abort";

		// Install callbacks on deferreds
		completeDeferred.add( s.complete );
		jqXHR.done( s.success );
		jqXHR.fail( s.error );

		// Get transport
		transport = inspectPrefiltersOrTransports( transports, s, options, jqXHR );

		// If no transport, we auto-abort
		if ( !transport ) {
			done( -1, "No Transport" );
		} else {
			jqXHR.readyState = 1;

			// Send global event
			if ( fireGlobals ) {
				globalEventContext.trigger( "ajaxSend", [ jqXHR, s ] );
			}

			// If request was aborted inside ajaxSend, stop there
			if ( completed ) {
				return jqXHR;
			}

			// Timeout
			if ( s.async && s.timeout > 0 ) {
				timeoutTimer = window.setTimeout( function() {
					jqXHR.abort( "timeout" );
				}, s.timeout );
			}

			try {
				completed = false;
				transport.send( requestHeaders, done );
			} catch ( e ) {

				// Rethrow post-completion exceptions
				if ( completed ) {
					throw e;
				}

				// Propagate others as results
				done( -1, e );
			}
		}

		// Callback for when everything is done
		function done( status, nativeStatusText, responses, headers ) {
			var isSuccess, success, error, response, modified,
				statusText = nativeStatusText;

			// Ignore repeat invocations
			if ( completed ) {
				return;
			}

			completed = true;

			// Clear timeout if it exists
			if ( timeoutTimer ) {
				window.clearTimeout( timeoutTimer );
			}

			// Dereference transport for early garbage collection
			// (no matter how long the jqXHR object will be used)
			transport = undefined;

			// Cache response headers
			responseHeadersString = headers || "";

			// Set readyState
			jqXHR.readyState = status > 0 ? 4 : 0;

			// Determine if successful
			isSuccess = status >= 200 && status < 300 || status === 304;

			// Get response data
			if ( responses ) {
				response = ajaxHandleResponses( s, jqXHR, responses );
			}

			// Convert no matter what (that way responseXXX fields are always set)
			response = ajaxConvert( s, response, jqXHR, isSuccess );

			// If successful, handle type chaining
			if ( isSuccess ) {

				// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
				if ( s.ifModified ) {
					modified = jqXHR.getResponseHeader( "Last-Modified" );
					if ( modified ) {
						jQuery.lastModified[ cacheURL ] = modified;
					}
					modified = jqXHR.getResponseHeader( "etag" );
					if ( modified ) {
						jQuery.etag[ cacheURL ] = modified;
					}
				}

				// if no content
				if ( status === 204 || s.type === "HEAD" ) {
					statusText = "nocontent";

				// if not modified
				} else if ( status === 304 ) {
					statusText = "notmodified";

				// If we have data, let's convert it
				} else {
					statusText = response.state;
					success = response.data;
					error = response.error;
					isSuccess = !error;
				}
			} else {

				// Extract error from statusText and normalize for non-aborts
				error = statusText;
				if ( status || !statusText ) {
					statusText = "error";
					if ( status < 0 ) {
						status = 0;
					}
				}
			}

			// Set data for the fake xhr object
			jqXHR.status = status;
			jqXHR.statusText = ( nativeStatusText || statusText ) + "";

			// Success/Error
			if ( isSuccess ) {
				deferred.resolveWith( callbackContext, [ success, statusText, jqXHR ] );
			} else {
				deferred.rejectWith( callbackContext, [ jqXHR, statusText, error ] );
			}

			// Status-dependent callbacks
			jqXHR.statusCode( statusCode );
			statusCode = undefined;

			if ( fireGlobals ) {
				globalEventContext.trigger( isSuccess ? "ajaxSuccess" : "ajaxError",
					[ jqXHR, s, isSuccess ? success : error ] );
			}

			// Complete
			completeDeferred.fireWith( callbackContext, [ jqXHR, statusText ] );

			if ( fireGlobals ) {
				globalEventContext.trigger( "ajaxComplete", [ jqXHR, s ] );

				// Handle the global AJAX counter
				if ( !( --jQuery.active ) ) {
					jQuery.event.trigger( "ajaxStop" );
				}
			}
		}

		return jqXHR;
	},

	getJSON: function( url, data, callback ) {
		return jQuery.get( url, data, callback, "json" );
	},

	getScript: function( url, callback ) {
		return jQuery.get( url, undefined, callback, "script" );
	}
} );

jQuery.each( [ "get", "post" ], function( i, method ) {
	jQuery[ method ] = function( url, data, callback, type ) {

		// Shift arguments if data argument was omitted
		if ( isFunction( data ) ) {
			type = type || callback;
			callback = data;
			data = undefined;
		}

		// The url can be an options object (which then must have .url)
		return jQuery.ajax( jQuery.extend( {
			url: url,
			type: method,
			dataType: type,
			data: data,
			success: callback
		}, jQuery.isPlainObject( url ) && url ) );
	};
} );


jQuery._evalUrl = function( url ) {
	return jQuery.ajax( {
		url: url,

		// Make this explicit, since user can override this through ajaxSetup (#11264)
		type: "GET",
		dataType: "script",
		cache: true,
		async: false,
		global: false,
		"throws": true
	} );
};


jQuery.fn.extend( {
	wrapAll: function( html ) {
		var wrap;

		if ( this[ 0 ] ) {
			if ( isFunction( html ) ) {
				html = html.call( this[ 0 ] );
			}

			// The elements to wrap the target around
			wrap = jQuery( html, this[ 0 ].ownerDocument ).eq( 0 ).clone( true );

			if ( this[ 0 ].parentNode ) {
				wrap.insertBefore( this[ 0 ] );
			}

			wrap.map( function() {
				var elem = this;

				while ( elem.firstElementChild ) {
					elem = elem.firstElementChild;
				}

				return elem;
			} ).append( this );
		}

		return this;
	},

	wrapInner: function( html ) {
		if ( isFunction( html ) ) {
			return this.each( function( i ) {
				jQuery( this ).wrapInner( html.call( this, i ) );
			} );
		}

		return this.each( function() {
			var self = jQuery( this ),
				contents = self.contents();

			if ( contents.length ) {
				contents.wrapAll( html );

			} else {
				self.append( html );
			}
		} );
	},

	wrap: function( html ) {
		var htmlIsFunction = isFunction( html );

		return this.each( function( i ) {
			jQuery( this ).wrapAll( htmlIsFunction ? html.call( this, i ) : html );
		} );
	},

	unwrap: function( selector ) {
		this.parent( selector ).not( "body" ).each( function() {
			jQuery( this ).replaceWith( this.childNodes );
		} );
		return this;
	}
} );


jQuery.expr.pseudos.hidden = function( elem ) {
	return !jQuery.expr.pseudos.visible( elem );
};
jQuery.expr.pseudos.visible = function( elem ) {
	return !!( elem.offsetWidth || elem.offsetHeight || elem.getClientRects().length );
};




jQuery.ajaxSettings.xhr = function() {
	try {
		return new window.XMLHttpRequest();
	} catch ( e ) {}
};

var xhrSuccessStatus = {

		// File protocol always yields status code 0, assume 200
		0: 200,

		// Support: IE <=9 only
		// #1450: sometimes IE returns 1223 when it should be 204
		1223: 204
	},
	xhrSupported = jQuery.ajaxSettings.xhr();

support.cors = !!xhrSupported && ( "withCredentials" in xhrSupported );
support.ajax = xhrSupported = !!xhrSupported;

jQuery.ajaxTransport( function( options ) {
	var callback, errorCallback;

	// Cross domain only allowed if supported through XMLHttpRequest
	if ( support.cors || xhrSupported && !options.crossDomain ) {
		return {
			send: function( headers, complete ) {
				var i,
					xhr = options.xhr();

				xhr.open(
					options.type,
					options.url,
					options.async,
					options.username,
					options.password
				);

				// Apply custom fields if provided
				if ( options.xhrFields ) {
					for ( i in options.xhrFields ) {
						xhr[ i ] = options.xhrFields[ i ];
					}
				}

				// Override mime type if needed
				if ( options.mimeType && xhr.overrideMimeType ) {
					xhr.overrideMimeType( options.mimeType );
				}

				// X-Requested-With header
				// For cross-domain requests, seeing as conditions for a preflight are
				// akin to a jigsaw puzzle, we simply never set it to be sure.
				// (it can always be set on a per-request basis or even using ajaxSetup)
				// For same-domain requests, won't change header if already provided.
				if ( !options.crossDomain && !headers[ "X-Requested-With" ] ) {
					headers[ "X-Requested-With" ] = "XMLHttpRequest";
				}

				// Set headers
				for ( i in headers ) {
					xhr.setRequestHeader( i, headers[ i ] );
				}

				// Callback
				callback = function( type ) {
					return function() {
						if ( callback ) {
							callback = errorCallback = xhr.onload =
								xhr.onerror = xhr.onabort = xhr.ontimeout =
									xhr.onreadystatechange = null;

							if ( type === "abort" ) {
								xhr.abort();
							} else if ( type === "error" ) {

								// Support: IE <=9 only
								// On a manual native abort, IE9 throws
								// errors on any property access that is not readyState
								if ( typeof xhr.status !== "number" ) {
									complete( 0, "error" );
								} else {
									complete(

										// File: protocol always yields status 0; see #8605, #14207
										xhr.status,
										xhr.statusText
									);
								}
							} else {
								complete(
									xhrSuccessStatus[ xhr.status ] || xhr.status,
									xhr.statusText,

									// Support: IE <=9 only
									// IE9 has no XHR2 but throws on binary (trac-11426)
									// For XHR2 non-text, let the caller handle it (gh-2498)
									( xhr.responseType || "text" ) !== "text"  ||
									typeof xhr.responseText !== "string" ?
										{ binary: xhr.response } :
										{ text: xhr.responseText },
									xhr.getAllResponseHeaders()
								);
							}
						}
					};
				};

				// Listen to events
				xhr.onload = callback();
				errorCallback = xhr.onerror = xhr.ontimeout = callback( "error" );

				// Support: IE 9 only
				// Use onreadystatechange to replace onabort
				// to handle uncaught aborts
				if ( xhr.onabort !== undefined ) {
					xhr.onabort = errorCallback;
				} else {
					xhr.onreadystatechange = function() {

						// Check readyState before timeout as it changes
						if ( xhr.readyState === 4 ) {

							// Allow onerror to be called first,
							// but that will not handle a native abort
							// Also, save errorCallback to a variable
							// as xhr.onerror cannot be accessed
							window.setTimeout( function() {
								if ( callback ) {
									errorCallback();
								}
							} );
						}
					};
				}

				// Create the abort callback
				callback = callback( "abort" );

				try {

					// Do send the request (this may raise an exception)
					xhr.send( options.hasContent && options.data || null );
				} catch ( e ) {

					// #14683: Only rethrow if this hasn't been notified as an error yet
					if ( callback ) {
						throw e;
					}
				}
			},

			abort: function() {
				if ( callback ) {
					callback();
				}
			}
		};
	}
} );




// Prevent auto-execution of scripts when no explicit dataType was provided (See gh-2432)
jQuery.ajaxPrefilter( function( s ) {
	if ( s.crossDomain ) {
		s.contents.script = false;
	}
} );

// Install script dataType
jQuery.ajaxSetup( {
	accepts: {
		script: "text/javascript, application/javascript, " +
			"application/ecmascript, application/x-ecmascript"
	},
	contents: {
		script: /\b(?:java|ecma)script\b/
	},
	converters: {
		"text script": function( text ) {
			jQuery.globalEval( text );
			return text;
		}
	}
} );

// Handle cache's special case and crossDomain
jQuery.ajaxPrefilter( "script", function( s ) {
	if ( s.cache === undefined ) {
		s.cache = false;
	}
	if ( s.crossDomain ) {
		s.type = "GET";
	}
} );

// Bind script tag hack transport
jQuery.ajaxTransport( "script", function( s ) {

	// This transport only deals with cross domain requests
	if ( s.crossDomain ) {
		var script, callback;
		return {
			send: function( _, complete ) {
				script = jQuery( "<script>" ).prop( {
					charset: s.scriptCharset,
					src: s.url
				} ).on(
					"load error",
					callback = function( evt ) {
						script.remove();
						callback = null;
						if ( evt ) {
							complete( evt.type === "error" ? 404 : 200, evt.type );
						}
					}
				);

				// Use native DOM manipulation to avoid our domManip AJAX trickery
				document.head.appendChild( script[ 0 ] );
			},
			abort: function() {
				if ( callback ) {
					callback();
				}
			}
		};
	}
} );




var oldCallbacks = [],
	rjsonp = /(=)\?(?=&|$)|\?\?/;

// Default jsonp settings
jQuery.ajaxSetup( {
	jsonp: "callback",
	jsonpCallback: function() {
		var callback = oldCallbacks.pop() || ( jQuery.expando + "_" + ( nonce++ ) );
		this[ callback ] = true;
		return callback;
	}
} );

// Detect, normalize options and install callbacks for jsonp requests
jQuery.ajaxPrefilter( "json jsonp", function( s, originalSettings, jqXHR ) {

	var callbackName, overwritten, responseContainer,
		jsonProp = s.jsonp !== false && ( rjsonp.test( s.url ) ?
			"url" :
			typeof s.data === "string" &&
				( s.contentType || "" )
					.indexOf( "application/x-www-form-urlencoded" ) === 0 &&
				rjsonp.test( s.data ) && "data"
		);

	// Handle iff the expected data type is "jsonp" or we have a parameter to set
	if ( jsonProp || s.dataTypes[ 0 ] === "jsonp" ) {

		// Get callback name, remembering preexisting value associated with it
		callbackName = s.jsonpCallback = isFunction( s.jsonpCallback ) ?
			s.jsonpCallback() :
			s.jsonpCallback;

		// Insert callback into url or form data
		if ( jsonProp ) {
			s[ jsonProp ] = s[ jsonProp ].replace( rjsonp, "$1" + callbackName );
		} else if ( s.jsonp !== false ) {
			s.url += ( rquery.test( s.url ) ? "&" : "?" ) + s.jsonp + "=" + callbackName;
		}

		// Use data converter to retrieve json after script execution
		s.converters[ "script json" ] = function() {
			if ( !responseContainer ) {
				jQuery.error( callbackName + " was not called" );
			}
			return responseContainer[ 0 ];
		};

		// Force json dataType
		s.dataTypes[ 0 ] = "json";

		// Install callback
		overwritten = window[ callbackName ];
		window[ callbackName ] = function() {
			responseContainer = arguments;
		};

		// Clean-up function (fires after converters)
		jqXHR.always( function() {

			// If previous value didn't exist - remove it
			if ( overwritten === undefined ) {
				jQuery( window ).removeProp( callbackName );

			// Otherwise restore preexisting value
			} else {
				window[ callbackName ] = overwritten;
			}

			// Save back as free
			if ( s[ callbackName ] ) {

				// Make sure that re-using the options doesn't screw things around
				s.jsonpCallback = originalSettings.jsonpCallback;

				// Save the callback name for future use
				oldCallbacks.push( callbackName );
			}

			// Call if it was a function and we have a response
			if ( responseContainer && isFunction( overwritten ) ) {
				overwritten( responseContainer[ 0 ] );
			}

			responseContainer = overwritten = undefined;
		} );

		// Delegate to script
		return "script";
	}
} );




// Support: Safari 8 only
// In Safari 8 documents created via document.implementation.createHTMLDocument
// collapse sibling forms: the second one becomes a child of the first one.
// Because of that, this security measure has to be disabled in Safari 8.
// https://bugs.webkit.org/show_bug.cgi?id=137337
support.createHTMLDocument = ( function() {
	var body = document.implementation.createHTMLDocument( "" ).body;
	body.innerHTML = "<form></form><form></form>";
	return body.childNodes.length === 2;
} )();


// Argument "data" should be string of html
// context (optional): If specified, the fragment will be created in this context,
// defaults to document
// keepScripts (optional): If true, will include scripts passed in the html string
jQuery.parseHTML = function( data, context, keepScripts ) {
	if ( typeof data !== "string" ) {
		return [];
	}
	if ( typeof context === "boolean" ) {
		keepScripts = context;
		context = false;
	}

	var base, parsed, scripts;

	if ( !context ) {

		// Stop scripts or inline event handlers from being executed immediately
		// by using document.implementation
		if ( support.createHTMLDocument ) {
			context = document.implementation.createHTMLDocument( "" );

			// Set the base href for the created document
			// so any parsed elements with URLs
			// are based on the document's URL (gh-2965)
			base = context.createElement( "base" );
			base.href = document.location.href;
			context.head.appendChild( base );
		} else {
			context = document;
		}
	}

	parsed = rsingleTag.exec( data );
	scripts = !keepScripts && [];

	// Single tag
	if ( parsed ) {
		return [ context.createElement( parsed[ 1 ] ) ];
	}

	parsed = buildFragment( [ data ], context, scripts );

	if ( scripts && scripts.length ) {
		jQuery( scripts ).remove();
	}

	return jQuery.merge( [], parsed.childNodes );
};


/**
 * Load a url into a page
 */
jQuery.fn.load = function( url, params, callback ) {
	var selector, type, response,
		self = this,
		off = url.indexOf( " " );

	if ( off > -1 ) {
		selector = stripAndCollapse( url.slice( off ) );
		url = url.slice( 0, off );
	}

	// If it's a function
	if ( isFunction( params ) ) {

		// We assume that it's the callback
		callback = params;
		params = undefined;

	// Otherwise, build a param string
	} else if ( params && typeof params === "object" ) {
		type = "POST";
	}

	// If we have elements to modify, make the request
	if ( self.length > 0 ) {
		jQuery.ajax( {
			url: url,

			// If "type" variable is undefined, then "GET" method will be used.
			// Make value of this field explicit since
			// user can override it through ajaxSetup method
			type: type || "GET",
			dataType: "html",
			data: params
		} ).done( function( responseText ) {

			// Save response for use in complete callback
			response = arguments;

			self.html( selector ?

				// If a selector was specified, locate the right elements in a dummy div
				// Exclude scripts to avoid IE 'Permission Denied' errors
				jQuery( "<div>" ).append( jQuery.parseHTML( responseText ) ).find( selector ) :

				// Otherwise use the full result
				responseText );

		// If the request succeeds, this function gets "data", "status", "jqXHR"
		// but they are ignored because response was set above.
		// If it fails, this function gets "jqXHR", "status", "error"
		} ).always( callback && function( jqXHR, status ) {
			self.each( function() {
				callback.apply( this, response || [ jqXHR.responseText, status, jqXHR ] );
			} );
		} );
	}

	return this;
};




// Attach a bunch of functions for handling common AJAX events
jQuery.each( [
	"ajaxStart",
	"ajaxStop",
	"ajaxComplete",
	"ajaxError",
	"ajaxSuccess",
	"ajaxSend"
], function( i, type ) {
	jQuery.fn[ type ] = function( fn ) {
		return this.on( type, fn );
	};
} );




jQuery.expr.pseudos.animated = function( elem ) {
	return jQuery.grep( jQuery.timers, function( fn ) {
		return elem === fn.elem;
	} ).length;
};




jQuery.offset = {
	setOffset: function( elem, options, i ) {
		var curPosition, curLeft, curCSSTop, curTop, curOffset, curCSSLeft, calculatePosition,
			position = jQuery.css( elem, "position" ),
			curElem = jQuery( elem ),
			props = {};

		// Set position first, in-case top/left are set even on static elem
		if ( position === "static" ) {
			elem.style.position = "relative";
		}

		curOffset = curElem.offset();
		curCSSTop = jQuery.css( elem, "top" );
		curCSSLeft = jQuery.css( elem, "left" );
		calculatePosition = ( position === "absolute" || position === "fixed" ) &&
			( curCSSTop + curCSSLeft ).indexOf( "auto" ) > -1;

		// Need to be able to calculate position if either
		// top or left is auto and position is either absolute or fixed
		if ( calculatePosition ) {
			curPosition = curElem.position();
			curTop = curPosition.top;
			curLeft = curPosition.left;

		} else {
			curTop = parseFloat( curCSSTop ) || 0;
			curLeft = parseFloat( curCSSLeft ) || 0;
		}

		if ( isFunction( options ) ) {

			// Use jQuery.extend here to allow modification of coordinates argument (gh-1848)
			options = options.call( elem, i, jQuery.extend( {}, curOffset ) );
		}

		if ( options.top != null ) {
			props.top = ( options.top - curOffset.top ) + curTop;
		}
		if ( options.left != null ) {
			props.left = ( options.left - curOffset.left ) + curLeft;
		}

		if ( "using" in options ) {
			options.using.call( elem, props );

		} else {
			curElem.css( props );
		}
	}
};

jQuery.fn.extend( {

	// offset() relates an element's border box to the document origin
	offset: function( options ) {

		// Preserve chaining for setter
		if ( arguments.length ) {
			return options === undefined ?
				this :
				this.each( function( i ) {
					jQuery.offset.setOffset( this, options, i );
				} );
		}

		var rect, win,
			elem = this[ 0 ];

		if ( !elem ) {
			return;
		}

		// Return zeros for disconnected and hidden (display: none) elements (gh-2310)
		// Support: IE <=11 only
		// Running getBoundingClientRect on a
		// disconnected node in IE throws an error
		if ( !elem.getClientRects().length ) {
			return { top: 0, left: 0 };
		}

		// Get document-relative position by adding viewport scroll to viewport-relative gBCR
		rect = elem.getBoundingClientRect();
		win = elem.ownerDocument.defaultView;
		return {
			top: rect.top + win.pageYOffset,
			left: rect.left + win.pageXOffset
		};
	},

	// position() relates an element's margin box to its offset parent's padding box
	// This corresponds to the behavior of CSS absolute positioning
	position: function() {
		if ( !this[ 0 ] ) {
			return;
		}

		var offsetParent, offset, doc,
			elem = this[ 0 ],
			parentOffset = { top: 0, left: 0 };

		// position:fixed elements are offset from the viewport, which itself always has zero offset
		if ( jQuery.css( elem, "position" ) === "fixed" ) {

			// Assume position:fixed implies availability of getBoundingClientRect
			offset = elem.getBoundingClientRect();

		} else {
			offset = this.offset();

			// Account for the *real* offset parent, which can be the document or its root element
			// when a statically positioned element is identified
			doc = elem.ownerDocument;
			offsetParent = elem.offsetParent || doc.documentElement;
			while ( offsetParent &&
				( offsetParent === doc.body || offsetParent === doc.documentElement ) &&
				jQuery.css( offsetParent, "position" ) === "static" ) {

				offsetParent = offsetParent.parentNode;
			}
			if ( offsetParent && offsetParent !== elem && offsetParent.nodeType === 1 ) {

				// Incorporate borders into its offset, since they are outside its content origin
				parentOffset = jQuery( offsetParent ).offset();
				parentOffset.top += jQuery.css( offsetParent, "borderTopWidth", true );
				parentOffset.left += jQuery.css( offsetParent, "borderLeftWidth", true );
			}
		}

		// Subtract parent offsets and element margins
		return {
			top: offset.top - parentOffset.top - jQuery.css( elem, "marginTop", true ),
			left: offset.left - parentOffset.left - jQuery.css( elem, "marginLeft", true )
		};
	},

	// This method will return documentElement in the following cases:
	// 1) For the element inside the iframe without offsetParent, this method will return
	//    documentElement of the parent window
	// 2) For the hidden or detached element
	// 3) For body or html element, i.e. in case of the html node - it will return itself
	//
	// but those exceptions were never presented as a real life use-cases
	// and might be considered as more preferable results.
	//
	// This logic, however, is not guaranteed and can change at any point in the future
	offsetParent: function() {
		return this.map( function() {
			var offsetParent = this.offsetParent;

			while ( offsetParent && jQuery.css( offsetParent, "position" ) === "static" ) {
				offsetParent = offsetParent.offsetParent;
			}

			return offsetParent || documentElement;
		} );
	}
} );

// Create scrollLeft and scrollTop methods
jQuery.each( { scrollLeft: "pageXOffset", scrollTop: "pageYOffset" }, function( method, prop ) {
	var top = "pageYOffset" === prop;

	jQuery.fn[ method ] = function( val ) {
		return access( this, function( elem, method, val ) {

			// Coalesce documents and windows
			var win;
			if ( isWindow( elem ) ) {
				win = elem;
			} else if ( elem.nodeType === 9 ) {
				win = elem.defaultView;
			}

			if ( val === undefined ) {
				return win ? win[ prop ] : elem[ method ];
			}

			if ( win ) {
				win.scrollTo(
					!top ? val : win.pageXOffset,
					top ? val : win.pageYOffset
				);

			} else {
				elem[ method ] = val;
			}
		}, method, val, arguments.length );
	};
} );

// Support: Safari <=7 - 9.1, Chrome <=37 - 49
// Add the top/left cssHooks using jQuery.fn.position
// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084
// Blink bug: https://bugs.chromium.org/p/chromium/issues/detail?id=589347
// getComputedStyle returns percent when specified for top/left/bottom/right;
// rather than make the css module depend on the offset module, just check for it here
jQuery.each( [ "top", "left" ], function( i, prop ) {
	jQuery.cssHooks[ prop ] = addGetHookIf( support.pixelPosition,
		function( elem, computed ) {
			if ( computed ) {
				computed = curCSS( elem, prop );

				// If curCSS returns percentage, fallback to offset
				return rnumnonpx.test( computed ) ?
					jQuery( elem ).position()[ prop ] + "px" :
					computed;
			}
		}
	);
} );


// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods
jQuery.each( { Height: "height", Width: "width" }, function( name, type ) {
	jQuery.each( { padding: "inner" + name, content: type, "": "outer" + name },
		function( defaultExtra, funcName ) {

		// Margin is only for outerHeight, outerWidth
		jQuery.fn[ funcName ] = function( margin, value ) {
			var chainable = arguments.length && ( defaultExtra || typeof margin !== "boolean" ),
				extra = defaultExtra || ( margin === true || value === true ? "margin" : "border" );

			return access( this, function( elem, type, value ) {
				var doc;

				if ( isWindow( elem ) ) {

					// $( window ).outerWidth/Height return w/h including scrollbars (gh-1729)
					return funcName.indexOf( "outer" ) === 0 ?
						elem[ "inner" + name ] :
						elem.document.documentElement[ "client" + name ];
				}

				// Get document width or height
				if ( elem.nodeType === 9 ) {
					doc = elem.documentElement;

					// Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],
					// whichever is greatest
					return Math.max(
						elem.body[ "scroll" + name ], doc[ "scroll" + name ],
						elem.body[ "offset" + name ], doc[ "offset" + name ],
						doc[ "client" + name ]
					);
				}

				return value === undefined ?

					// Get width or height on the element, requesting but not forcing parseFloat
					jQuery.css( elem, type, extra ) :

					// Set width or height on the element
					jQuery.style( elem, type, value, extra );
			}, type, chainable ? margin : undefined, chainable );
		};
	} );
} );


jQuery.each( ( "blur focus focusin focusout resize scroll click dblclick " +
	"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " +
	"change select submit keydown keypress keyup contextmenu" ).split( " " ),
	function( i, name ) {

	// Handle event binding
	jQuery.fn[ name ] = function( data, fn ) {
		return arguments.length > 0 ?
			this.on( name, null, data, fn ) :
			this.trigger( name );
	};
} );

jQuery.fn.extend( {
	hover: function( fnOver, fnOut ) {
		return this.mouseenter( fnOver ).mouseleave( fnOut || fnOver );
	}
} );




jQuery.fn.extend( {

	bind: function( types, data, fn ) {
		return this.on( types, null, data, fn );
	},
	unbind: function( types, fn ) {
		return this.off( types, null, fn );
	},

	delegate: function( selector, types, data, fn ) {
		return this.on( types, selector, data, fn );
	},
	undelegate: function( selector, types, fn ) {

		// ( namespace ) or ( selector, types [, fn] )
		return arguments.length === 1 ?
			this.off( selector, "**" ) :
			this.off( types, selector || "**", fn );
	}
} );

// Bind a function to a context, optionally partially applying any
// arguments.
// jQuery.proxy is deprecated to promote standards (specifically Function#bind)
// However, it is not slated for removal any time soon
jQuery.proxy = function( fn, context ) {
	var tmp, args, proxy;

	if ( typeof context === "string" ) {
		tmp = fn[ context ];
		context = fn;
		fn = tmp;
	}

	// Quick check to determine if target is callable, in the spec
	// this throws a TypeError, but we will just return undefined.
	if ( !isFunction( fn ) ) {
		return undefined;
	}

	// Simulated bind
	args = slice.call( arguments, 2 );
	proxy = function() {
		return fn.apply( context || this, args.concat( slice.call( arguments ) ) );
	};

	// Set the guid of unique handler to the same of original handler, so it can be removed
	proxy.guid = fn.guid = fn.guid || jQuery.guid++;

	return proxy;
};

jQuery.holdReady = function( hold ) {
	if ( hold ) {
		jQuery.readyWait++;
	} else {
		jQuery.ready( true );
	}
};
jQuery.isArray = Array.isArray;
jQuery.parseJSON = JSON.parse;
jQuery.nodeName = nodeName;
jQuery.isFunction = isFunction;
jQuery.isWindow = isWindow;
jQuery.camelCase = camelCase;
jQuery.type = toType;

jQuery.now = Date.now;

jQuery.isNumeric = function( obj ) {

	// As of jQuery 3.0, isNumeric is limited to
	// strings and numbers (primitives or objects)
	// that can be coerced to finite numbers (gh-2662)
	var type = jQuery.type( obj );
	return ( type === "number" || type === "string" ) &&

		// parseFloat NaNs numeric-cast false positives ("")
		// ...but misinterprets leading-number strings, particularly hex literals ("0x...")
		// subtraction forces infinities to NaN
		!isNaN( obj - parseFloat( obj ) );
};




// Register as a named AMD module, since jQuery can be concatenated with other
// files that may use define, but not via a proper concatenation script that
// understands anonymous AMD modules. A named AMD is safest and most robust
// way to register. Lowercase jquery is used because AMD module names are
// derived from file names, and jQuery is normally delivered in a lowercase
// file name. Do this after creating the global so that if an AMD module wants
// to call noConflict to hide this version of jQuery, it will work.

// Note that for maximum portability, libraries that are not jQuery should
// declare themselves as anonymous modules, and avoid setting a global if an
// AMD loader is present. jQuery is a special case. For more information, see
// https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon

if ( true ) {
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function() {
		return jQuery;
	}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
}




var

	// Map over jQuery in case of overwrite
	_jQuery = window.jQuery,

	// Map over the $ in case of overwrite
	_$ = window.$;

jQuery.noConflict = function( deep ) {
	if ( window.$ === jQuery ) {
		window.$ = _$;
	}

	if ( deep && window.jQuery === jQuery ) {
		window.jQuery = _jQuery;
	}

	return jQuery;
};

// Expose jQuery and $ identifiers, even in AMD
// (#7102#comment:10, https://github.com/jquery/jquery/pull/557)
// and CommonJS for browser emulators (#13566)
if ( !noGlobal ) {
	window.jQuery = window.$ = jQuery;
}




return jQuery;
} );


/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

/*!
 * tui-code-snippet.js
 * @version 1.3.0
 * @author NHNEnt FE Development Lab <dl_javascript@nhnent.com>
 * @license MIT
 */
(function webpackUniversalModuleDefinition(root, factory) {
	if(true)
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["util"] = factory();
	else
		root["tui"] = root["tui"] || {}, root["tui"]["util"] = factory();
})(this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "dist";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	/**
	 * @fileoverview
	 * @author NHN Ent.
	 *         FE Development Lab <dl_javascript@nhnent.com>
	 * @namespace tui.util
	 * @example
	 * // node, commonjs
	 * var util = require('tui-code-snippet');
	 * @example
	 * // distribution file, script
	 * <script src='path-to/tui-code-snippt.js'></script>
	 * <script>
	 * var util = tui.util;
	 * <script>
	 */
	var util = {};
	var object = __webpack_require__(1);
	var extend = object.extend;

	extend(util, object);
	extend(util, __webpack_require__(3));
	extend(util, __webpack_require__(2));
	extend(util, __webpack_require__(4));
	extend(util, __webpack_require__(5));
	extend(util, __webpack_require__(6));
	extend(util, __webpack_require__(7));
	extend(util, __webpack_require__(8));
	extend(util, __webpack_require__(9));

	util.browser = __webpack_require__(10);
	util.popup = __webpack_require__(11);
	util.formatDate = __webpack_require__(12);
	util.defineClass = __webpack_require__(13);
	util.defineModule = __webpack_require__(14);
	util.defineNamespace = __webpack_require__(15);
	util.CustomEvents = __webpack_require__(16);
	util.Enum = __webpack_require__(17);
	util.ExMap = __webpack_require__(18);
	util.HashMap = __webpack_require__(20);
	util.Map = __webpack_require__(19);

	module.exports = util;


/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileoverview This module has some functions for handling a plain object, json.
	 * @author NHN Ent.
	 *         FE Development Lab <dl_javascript@nhnent.com>
	 */

	'use strict';

	var type = __webpack_require__(2);
	var array = __webpack_require__(3);

	/**
	 * The last id of stamp
	 * @type {number}
	 * @private
	 */
	var lastId = 0;

	/**
	 * Extend the target object from other objects.
	 * @param {object} target - Object that will be extended
	 * @param {...object} objects - Objects as sources
	 * @returns {object} Extended object
	 * @memberof tui.util
	 */
	function extend(target, objects) { // eslint-disable-line no-unused-vars
	    var hasOwnProp = Object.prototype.hasOwnProperty;
	    var source, prop, i, len;

	    for (i = 1, len = arguments.length; i < len; i += 1) {
	        source = arguments[i];
	        for (prop in source) {
	            if (hasOwnProp.call(source, prop)) {
	                target[prop] = source[prop];
	            }
	        }
	    }

	    return target;
	}

	/**
	 * Assign a unique id to an object
	 * @param {object} obj - Object that will be assigned id.
	 * @returns {number} Stamped id
	 * @memberof tui.util
	 */
	function stamp(obj) {
	    if (!obj.__fe_id) {
	        lastId += 1;
	        obj.__fe_id = lastId; // eslint-disable-line camelcase
	    }

	    return obj.__fe_id;
	}

	/**
	 * Verify whether an object has a stamped id or not.
	 * @param {object} obj - adjusted object
	 * @returns {boolean}
	 * @memberof tui.util
	 */
	function hasStamp(obj) {
	    return type.isExisty(pick(obj, '__fe_id'));
	}

	/**
	 * Reset the last id of stamp
	 * @private
	 */
	function resetLastId() {
	    lastId = 0;
	}

	/**
	 * Return a key-list(array) of a given object
	 * @param {object} obj - Object from which a key-list will be extracted
	 * @returns {Array} A key-list(array)
	 * @memberof tui.util
	 */
	function keys(obj) {
	    var keyArray = [];
	    var key;

	    for (key in obj) {
	        if (obj.hasOwnProperty(key)) {
	            keyArray.push(key);
	        }
	    }

	    return keyArray;
	}

	/**
	 * Return the equality for multiple objects(jsonObjects).<br>
	 *  See {@link http://stackoverflow.com/questions/1068834/object-comparison-in-javascript}
	 * @param {...object} object - Multiple objects for comparing.
	 * @returns {boolean} Equality
	 * @memberof tui.util
	 * @example
	 * //-- #1. Get Module --//
	 * var util = require('tui-code-snippet'); // node, commonjs
	 * var util = tui.util; // distribution file
	 *
	 * //-- #2. Use property --//
	 * var jsonObj1 = {name:'milk', price: 1000};
	 * var jsonObj2 = {name:'milk', price: 1000};
	 * var jsonObj3 = {name:'milk', price: 1000};
	 * util.compareJSON(jsonObj1, jsonObj2, jsonObj3);   // true
	 *
	 * var jsonObj4 = {name:'milk', price: 1000};
	 * var jsonObj5 = {name:'beer', price: 3000};
	 * util.compareJSON(jsonObj4, jsonObj5); // false
	 */
	function compareJSON(object) {
	    var argsLen = arguments.length;
	    var i = 1;

	    if (argsLen < 1) {
	        return true;
	    }

	    for (; i < argsLen; i += 1) {
	        if (!isSameObject(object, arguments[i])) {
	            return false;
	        }
	    }

	    return true;
	}

	/**
	 * @param {*} x - object to compare
	 * @param {*} y - object to compare
	 * @returns {boolean} - whether object x and y is same or not
	 * @private
	 */
	function isSameObject(x, y) { // eslint-disable-line complexity
	    var leftChain = [];
	    var rightChain = [];
	    var p;

	    // remember that NaN === NaN returns false
	    // and isNaN(undefined) returns true
	    if (isNaN(x) &&
	        isNaN(y) &&
	        type.isNumber(x) &&
	        type.isNumber(y)) {
	        return true;
	    }

	    // Compare primitives and functions.
	    // Check if both arguments link to the same object.
	    // Especially useful on step when comparing prototypes
	    if (x === y) {
	        return true;
	    }

	    // Works in case when functions are created in constructor.
	    // Comparing dates is a common scenario. Another built-ins?
	    // We can even handle functions passed across iframes
	    if ((type.isFunction(x) && type.isFunction(y)) ||
	        (x instanceof Date && y instanceof Date) ||
	        (x instanceof RegExp && y instanceof RegExp) ||
	        (x instanceof String && y instanceof String) ||
	        (x instanceof Number && y instanceof Number)) {
	        return x.toString() === y.toString();
	    }

	    // At last checking prototypes as good a we can
	    if (!(x instanceof Object && y instanceof Object)) {
	        return false;
	    }

	    if (x.isPrototypeOf(y) ||
	        y.isPrototypeOf(x) ||
	        x.constructor !== y.constructor ||
	        x.prototype !== y.prototype) {
	        return false;
	    }

	    // check for infinitive linking loops
	    if (array.inArray(x, leftChain) > -1 ||
	        array.inArray(y, rightChain) > -1) {
	        return false;
	    }

	    // Quick checking of one object beeing a subset of another.
	    for (p in y) {
	        if (y.hasOwnProperty(p) !== x.hasOwnProperty(p)) {
	            return false;
	        } else if (typeof y[p] !== typeof x[p]) {
	            return false;
	        }
	    }

	    // This for loop executes comparing with hasOwnProperty() and typeof for each property in 'x' object,
	    // and verifying equality for x[property] and y[property].
	    for (p in x) {
	        if (y.hasOwnProperty(p) !== x.hasOwnProperty(p)) {
	            return false;
	        } else if (typeof y[p] !== typeof x[p]) {
	            return false;
	        }

	        if (typeof (x[p]) === 'object' || typeof (x[p]) === 'function') {
	            leftChain.push(x);
	            rightChain.push(y);

	            if (!isSameObject(x[p], y[p])) {
	                return false;
	            }

	            leftChain.pop();
	            rightChain.pop();
	        } else if (x[p] !== y[p]) {
	            return false;
	        }
	    }

	    return true;
	}
	/* eslint-enable complexity */

	/**
	 * Retrieve a nested item from the given object/array
	 * @param {object|Array} obj - Object for retrieving
	 * @param {...string|number} paths - Paths of property
	 * @returns {*} Value
	 * @memberof tui.util
	 * @example
	 * //-- #1. Get Module --//
	 * var util = require('tui-code-snippet'); // node, commonjs
	 * var util = tui.util; // distribution file
	 *
	 * //-- #2. Use property --//
	 * var obj = {
	 *     'key1': 1,
	 *     'nested' : {
	 *         'key1': 11,
	 *         'nested': {
	 *             'key1': 21
	 *         }
	 *     }
	 * };
	 * util.pick(obj, 'nested', 'nested', 'key1'); // 21
	 * util.pick(obj, 'nested', 'nested', 'key2'); // undefined
	 *
	 * var arr = ['a', 'b', 'c'];
	 * util.pick(arr, 1); // 'b'
	 */
	function pick(obj, paths) { // eslint-disable-line no-unused-vars
	    var args = arguments;
	    var target = args[0];
	    var i = 1;
	    var length = args.length;

	    for (; i < length; i += 1) {
	        if (type.isUndefined(target) ||
	            type.isNull(target)) {
	            return;
	        }

	        target = target[args[i]];
	    }

	    return target; // eslint-disable-line consistent-return
	}

	module.exports = {
	    extend: extend,
	    stamp: stamp,
	    hasStamp: hasStamp,
	    resetLastId: resetLastId,
	    keys: Object.prototype.keys || keys,
	    compareJSON: compareJSON,
	    pick: pick
	};


/***/ }),
/* 2 */
/***/ (function(module, exports) {

	/**
	 * @fileoverview This module provides some functions to check the type of variable
	 * @author NHN Ent.
	 *         FE Development Lab <dl_javascript@nhnent.com>
	 */

	'use strict';

	var toString = Object.prototype.toString;

	/**
	 * Check whether the given variable is existing or not.<br>
	 *  If the given variable is not null and not undefined, returns true.
	 * @param {*} param - Target for checking
	 * @returns {boolean} Is existy?
	 * @memberof tui.util
	 * @example
	 * //-- #1. Get Module --//
	 * var util = require('tui-code-snippet'); // node, commonjs
	 * var util = tui.util; // distribution file
	 *
	 * //-- #2. Use property --//
	 * util.isExisty(''); //true
	 * util.isExisty(0); //true
	 * util.isExisty([]); //true
	 * util.isExisty({}); //true
	 * util.isExisty(null); //false
	 * util.isExisty(undefined); //false
	*/
	function isExisty(param) {
	    return !isUndefined(param) && !isNull(param);
	}

	/**
	 * Check whether the given variable is undefined or not.<br>
	 *  If the given variable is undefined, returns true.
	 * @param {*} obj - Target for checking
	 * @returns {boolean} Is undefined?
	 * @memberof tui.util
	 */
	function isUndefined(obj) {
	    return obj === undefined; // eslint-disable-line no-undefined
	}

	/**
	 * Check whether the given variable is null or not.<br>
	 *  If the given variable(arguments[0]) is null, returns true.
	 * @param {*} obj - Target for checking
	 * @returns {boolean} Is null?
	 * @memberof tui.util
	 */
	function isNull(obj) {
	    return obj === null;
	}

	/**
	 * Check whether the given variable is truthy or not.<br>
	 *  If the given variable is not null or not undefined or not false, returns true.<br>
	 *  (It regards 0 as true)
	 * @param {*} obj - Target for checking
	 * @returns {boolean} Is truthy?
	 * @memberof tui.util
	 */
	function isTruthy(obj) {
	    return isExisty(obj) && obj !== false;
	}

	/**
	 * Check whether the given variable is falsy or not.<br>
	 *  If the given variable is null or undefined or false, returns true.
	 * @param {*} obj - Target for checking
	 * @returns {boolean} Is falsy?
	 * @memberof tui.util
	 */
	function isFalsy(obj) {
	    return !isTruthy(obj);
	}

	/**
	 * Check whether the given variable is an arguments object or not.<br>
	 *  If the given variable is an arguments object, return true.
	 * @param {*} obj - Target for checking
	 * @returns {boolean} Is arguments?
	 * @memberof tui.util
	 */
	function isArguments(obj) {
	    var result = isExisty(obj) &&
	        ((toString.call(obj) === '[object Arguments]') || !!obj.callee);

	    return result;
	}

	/**
	 * Check whether the given variable is an instance of Array or not.<br>
	 *  If the given variable is an instance of Array, return true.
	 * @param {*} obj - Target for checking
	 * @returns {boolean} Is array instance?
	 * @memberof tui.util
	 */
	function isArray(obj) {
	    return obj instanceof Array;
	}

	/**
	 * Check whether the given variable is an object or not.<br>
	 *  If the given variable is an object, return true.
	 * @param {*} obj - Target for checking
	 * @returns {boolean} Is object?
	 * @memberof tui.util
	 */
	function isObject(obj) {
	    return obj === Object(obj);
	}

	/**
	 * Check whether the given variable is a function or not.<br>
	 *  If the given variable is a function, return true.
	 * @param {*} obj - Target for checking
	 * @returns {boolean} Is function?
	 * @memberof tui.util
	 */
	function isFunction(obj) {
	    return obj instanceof Function;
	}

	/**
	 * Check whether the given variable is a number or not.<br>
	 *  If the given variable is a number, return true.
	 * @param {*} obj - Target for checking
	 * @returns {boolean} Is number?
	 * @memberof tui.util
	 */
	function isNumber(obj) {
	    return typeof obj === 'number' || obj instanceof Number;
	}

	/**
	 * Check whether the given variable is a string or not.<br>
	 *  If the given variable is a string, return true.
	 * @param {*} obj - Target for checking
	 * @returns {boolean} Is string?
	 * @memberof tui.util
	 */
	function isString(obj) {
	    return typeof obj === 'string' || obj instanceof String;
	}

	/**
	 * Check whether the given variable is a boolean or not.<br>
	 *  If the given variable is a boolean, return true.
	 * @param {*} obj - Target for checking
	 * @returns {boolean} Is boolean?
	 * @memberof tui.util
	 */
	function isBoolean(obj) {
	    return typeof obj === 'boolean' || obj instanceof Boolean;
	}

	/**
	 * Check whether the given variable is an instance of Array or not.<br>
	 *  If the given variable is an instance of Array, return true.<br>
	 *  (It is used for multiple frame environments)
	 * @param {*} obj - Target for checking
	 * @returns {boolean} Is an instance of array?
	 * @memberof tui.util
	 */
	function isArraySafe(obj) {
	    return toString.call(obj) === '[object Array]';
	}

	/**
	 * Check whether the given variable is a function or not.<br>
	 *  If the given variable is a function, return true.<br>
	 *  (It is used for multiple frame environments)
	 * @param {*} obj - Target for checking
	 * @returns {boolean} Is a function?
	 * @memberof tui.util
	 */
	function isFunctionSafe(obj) {
	    return toString.call(obj) === '[object Function]';
	}

	/**
	 * Check whether the given variable is a number or not.<br>
	 *  If the given variable is a number, return true.<br>
	 *  (It is used for multiple frame environments)
	 * @param {*} obj - Target for checking
	 * @returns {boolean} Is a number?
	 * @memberof tui.util
	 */
	function isNumberSafe(obj) {
	    return toString.call(obj) === '[object Number]';
	}

	/**
	 * Check whether the given variable is a string or not.<br>
	 *  If the given variable is a string, return true.<br>
	 *  (It is used for multiple frame environments)
	 * @param {*} obj - Target for checking
	 * @returns {boolean} Is a string?
	 * @memberof tui.util
	 */
	function isStringSafe(obj) {
	    return toString.call(obj) === '[object String]';
	}

	/**
	 * Check whether the given variable is a boolean or not.<br>
	 *  If the given variable is a boolean, return true.<br>
	 *  (It is used for multiple frame environments)
	 * @param {*} obj - Target for checking
	 * @returns {boolean} Is a boolean?
	 * @memberof tui.util
	 */
	function isBooleanSafe(obj) {
	    return toString.call(obj) === '[object Boolean]';
	}

	/**
	 * Check whether the given variable is a instance of HTMLNode or not.<br>
	 *  If the given variables is a instance of HTMLNode, return true.
	 * @param {*} html - Target for checking
	 * @returns {boolean} Is HTMLNode ?
	 * @memberof tui.util
	 */
	function isHTMLNode(html) {
	    if (typeof HTMLElement === 'object') {
	        return (html && (html instanceof HTMLElement || !!html.nodeType));
	    }

	    return !!(html && html.nodeType);
	}

	/**
	 * Check whether the given variable is a HTML tag or not.<br>
	 *  If the given variables is a HTML tag, return true.
	 * @param {*} html - Target for checking
	 * @returns {Boolean} Is HTML tag?
	 * @memberof tui.util
	 */
	function isHTMLTag(html) {
	    if (typeof HTMLElement === 'object') {
	        return (html && (html instanceof HTMLElement));
	    }

	    return !!(html && html.nodeType && html.nodeType === 1);
	}

	/**
	 * Check whether the given variable is empty(null, undefined, or empty array, empty object) or not.<br>
	 *  If the given variables is empty, return true.
	 * @param {*} obj - Target for checking
	 * @returns {boolean} Is empty?
	 * @memberof tui.util
	 */
	function isEmpty(obj) {
	    if (!isExisty(obj) || _isEmptyString(obj)) {
	        return true;
	    }

	    if (isArray(obj) || isArguments(obj)) {
	        return obj.length === 0;
	    }

	    if (isObject(obj) && !isFunction(obj)) {
	        return !_hasOwnProperty(obj);
	    }

	    return true;
	}

	/**
	 * Check whether given argument is empty string
	 * @param {*} obj - Target for checking
	 * @returns {boolean} whether given argument is empty string
	 * @memberof tui.util
	 * @private
	 */
	function _isEmptyString(obj) {
	    return isString(obj) && obj === '';
	}

	/**
	 * Check whether given argument has own property
	 * @param {Object} obj - Target for checking
	 * @returns {boolean} - whether given argument has own property
	 * @memberof tui.util
	 * @private
	 */
	function _hasOwnProperty(obj) {
	    var key;
	    for (key in obj) {
	        if (obj.hasOwnProperty(key)) {
	            return true;
	        }
	    }

	    return false;
	}

	/**
	 * Check whether the given variable is not empty
	 * (not null, not undefined, or not empty array, not empty object) or not.<br>
	 *  If the given variables is not empty, return true.
	 * @param {*} obj - Target for checking
	 * @returns {boolean} Is not empty?
	 * @memberof tui.util
	 */
	function isNotEmpty(obj) {
	    return !isEmpty(obj);
	}

	/**
	 * Check whether the given variable is an instance of Date or not.<br>
	 *  If the given variables is an instance of Date, return true.
	 * @param {*} obj - Target for checking
	 * @returns {boolean} Is an instance of Date?
	 * @memberof tui.util
	 */
	function isDate(obj) {
	    return obj instanceof Date;
	}

	/**
	 * Check whether the given variable is an instance of Date or not.<br>
	 *  If the given variables is an instance of Date, return true.<br>
	 *  (It is used for multiple frame environments)
	 * @param {*} obj - Target for checking
	 * @returns {boolean} Is an instance of Date?
	 * @memberof tui.util
	 */
	function isDateSafe(obj) {
	    return toString.call(obj) === '[object Date]';
	}

	module.exports = {
	    isExisty: isExisty,
	    isUndefined: isUndefined,
	    isNull: isNull,
	    isTruthy: isTruthy,
	    isFalsy: isFalsy,
	    isArguments: isArguments,
	    isArray: isArray,
	    isArraySafe: isArraySafe,
	    isObject: isObject,
	    isFunction: isFunction,
	    isFunctionSafe: isFunctionSafe,
	    isNumber: isNumber,
	    isNumberSafe: isNumberSafe,
	    isDate: isDate,
	    isDateSafe: isDateSafe,
	    isString: isString,
	    isStringSafe: isStringSafe,
	    isBoolean: isBoolean,
	    isBooleanSafe: isBooleanSafe,
	    isHTMLNode: isHTMLNode,
	    isHTMLTag: isHTMLTag,
	    isEmpty: isEmpty,
	    isNotEmpty: isNotEmpty
	};


/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileoverview This module has some functions for handling array.
	 * @author NHN Ent.
	 *         FE Development Lab <dl_javascript@nhnent.com>
	 */

	'use strict';

	var collection = __webpack_require__(4);
	var type = __webpack_require__(2);

	var aps = Array.prototype.slice;
	var util;

	/**
	 * Generate an integer Array containing an arithmetic progression.
	 * @param {number} start - start index
	 * @param {number} stop - stop index
	 * @param {number} step - next visit index = current index + step
	 * @returns {Array}
	 * @memberof tui.util
	 * @example
	 * //-- #1. Get Module --//
	 * var util = require('tui-code-snippet'); // node, commonjs
	 * var util = tui.util; // distribution file
	 *
	 * //-- #2. Use property --//
	 * util.range(5); // [0, 1, 2, 3, 4]
	 * util.range(1, 5); // [1,2,3,4]
	 * util.range(2, 10, 2); // [2,4,6,8]
	 * util.range(10, 2, -2); // [10,8,6,4]
	 */
	var range = function(start, stop, step) {
	    var arr = [];
	    var flag;

	    if (type.isUndefined(stop)) {
	        stop = start || 0;
	        start = 0;
	    }

	    step = step || 1;
	    flag = step < 0 ? -1 : 1;
	    stop *= flag;

	    for (; start * flag < stop; start += step) {
	        arr.push(start);
	    }

	    return arr;
	};

	/* eslint-disable valid-jsdoc */
	/**
	 * Zip together multiple lists into a single array
	 * @param {...Array}
	 * @returns {Array}
	 * @memberof tui.util
	 * @example
	 * //-- #1. Get Module --//
	 * var util = require('tui-code-snippet'); // node, commonjs
	 * var util = tui.util; // distribution file
	 *
	 * //-- #2. Use property --//
	 * var result = util.zip([1, 2, 3], ['a', 'b','c'], [true, false, true]);
	 * console.log(result[0]); // [1, 'a', true]
	 * console.log(result[1]); // [2, 'b', false]
	 * console.log(result[2]); // [3, 'c', true]
	 */
	var zip = function() {/* eslint-enable valid-jsdoc */
	    var arr2d = aps.call(arguments);
	    var result = [];

	    collection.forEach(arr2d, function(arr) {
	        collection.forEach(arr, function(value, index) {
	            if (!result[index]) {
	                result[index] = [];
	            }
	            result[index].push(value);
	        });
	    });

	    return result;
	};

	/**
	 * Returns the first index at which a given element can be found in the array
	 * from start index(default 0), or -1 if it is not present.<br>
	 * It compares searchElement to elements of the Array using strict equality
	 * (the same method used by the ===, or triple-equals, operator).
	 * @param {*} searchElement Element to locate in the array
	 * @param {Array} array Array that will be traversed.
	 * @param {number} startIndex Start index in array for searching (default 0)
	 * @returns {number} the First index at which a given element, or -1 if it is not present
	 * @memberof tui.util
	 * @example
	 * //-- #1. Get Module --//
	 * var util = require('tui-code-snippet'); // node, commonjs
	 * var util = tui.util; // distribution file
	 *
	 * //-- #2. Use property --//
	 * var arr = ['one', 'two', 'three', 'four'];
	 * var idx1 = util.inArray('one', arr, 3); // -1
	 * var idx2 = util.inArray('one', arr); // 0
	 */
	var inArray = function(searchElement, array, startIndex) {
	    var i;
	    var length;
	    startIndex = startIndex || 0;

	    if (!type.isArray(array)) {
	        return -1;
	    }

	    if (Array.prototype.indexOf) {
	        return Array.prototype.indexOf.call(array, searchElement, startIndex);
	    }

	    length = array.length;
	    for (i = startIndex; startIndex >= 0 && i < length; i += 1) {
	        if (array[i] === searchElement) {
	            return i;
	        }
	    }

	    return -1;
	};

	util = {
	    inArray: inArray,
	    range: range,
	    zip: zip
	};

	module.exports = util;


/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileoverview This module has some functions for handling object as collection.
	 * @author NHN Ent.
	 *         FE Development Lab <dl_javascript@nhnent.com>
	 */

	'use strict';

	var type = __webpack_require__(2);
	var object = __webpack_require__(1);

	/**
	 * Execute the provided callback once for each element present
	 * in the array(or Array-like object) in ascending order.<br>
	 * If the callback function returns false, the loop will be stopped.<br>
	 * Callback function(iteratee) is invoked with three arguments:
	 *  - The value of the element
	 *  - The index of the element
	 *  - The array(or Array-like object) being traversed
	 * @param {Array} arr The array(or Array-like object) that will be traversed
	 * @param {function} iteratee Callback function
	 * @param {Object} [context] Context(this) of callback function
	 * @memberof tui.util
	 * @example
	 * //-- #1. Get Module --//
	 * var util = require('tui-code-snippet'); // node, commonjs
	 * var util = tui.util; // distribution file
	 *
	 * //-- #2. Use property --//
	 * var sum = 0;
	 *
	 * util.forEachArray([1,2,3], function(value){
	 *     sum += value;
	 * });
	 * alert(sum); // 6
	 */
	function forEachArray(arr, iteratee, context) {
	    var index = 0;
	    var len = arr.length;

	    context = context || null;

	    for (; index < len; index += 1) {
	        if (iteratee.call(context, arr[index], index, arr) === false) {
	            break;
	        }
	    }
	}

	/**
	 * Execute the provided callback once for each property of object which actually exist.<br>
	 * If the callback function returns false, the loop will be stopped.<br>
	 * Callback function(iteratee) is invoked with three arguments:
	 *  - The value of the property
	 *  - The name of the property
	 *  - The object being traversed
	 * @param {Object} obj The object that will be traversed
	 * @param {function} iteratee  Callback function
	 * @param {Object} [context] Context(this) of callback function
	 * @memberof tui.util
	 * @example
	 * //-- #1. Get Module --//
	 * var util = require('tui-code-snippet'); // node, commonjs
	 * var util = tui.util; // distribution file
	 *
	 * //-- #2. Use property --//
	 * var sum = 0;
	 *
	 * util.forEachOwnProperties({a:1,b:2,c:3}, function(value){
	 *     sum += value;
	 * });
	 * alert(sum); // 6
	 **/
	function forEachOwnProperties(obj, iteratee, context) {
	    var key;

	    context = context || null;

	    for (key in obj) {
	        if (obj.hasOwnProperty(key)) {
	            if (iteratee.call(context, obj[key], key, obj) === false) {
	                break;
	            }
	        }
	    }
	}

	/**
	 * Execute the provided callback once for each property of object(or element of array) which actually exist.<br>
	 * If the object is Array-like object(ex-arguments object), It needs to transform to Array.(see 'ex2' of example).<br>
	 * If the callback function returns false, the loop will be stopped.<br>
	 * Callback function(iteratee) is invoked with three arguments:
	 *  - The value of the property(or The value of the element)
	 *  - The name of the property(or The index of the element)
	 *  - The object being traversed
	 * @param {Object} obj The object that will be traversed
	 * @param {function} iteratee Callback function
	 * @param {Object} [context] Context(this) of callback function
	 * @memberof tui.util
	 * @example
	 * //-- #1. Get Module --//
	 * var util = require('tui-code-snippet'); // node, commonjs
	 * var util = tui.util; // distribution file
	 *
	 * //-- #2. Use property --//
	 * var sum = 0;
	 *
	 * util.forEach([1,2,3], function(value){
	 *     sum += value;
	 * });
	 * alert(sum); // 6
	 *
	 * // In case of Array-like object
	 * var array = Array.prototype.slice.call(arrayLike); // change to array
	 * util.forEach(array, function(value){
	 *     sum += value;
	 * });
	 */
	function forEach(obj, iteratee, context) {
	    if (type.isArray(obj)) {
	        forEachArray(obj, iteratee, context);
	    } else {
	        forEachOwnProperties(obj, iteratee, context);
	    }
	}

	/**
	 * Execute the provided callback function once for each element in an array, in order,
	 * and constructs a new array from the results.<br>
	 * If the object is Array-like object(ex-arguments object),
	 * It needs to transform to Array.(see 'ex2' of forEach example)<br>
	 * Callback function(iteratee) is invoked with three arguments:
	 *  - The value of the property(or The value of the element)
	 *  - The name of the property(or The index of the element)
	 *  - The object being traversed
	 * @param {Object} obj The object that will be traversed
	 * @param {function} iteratee Callback function
	 * @param {Object} [context] Context(this) of callback function
	 * @returns {Array} A new array composed of returned values from callback function
	 * @memberof tui.util
	 * @example
	 * //-- #1. Get Module --//
	 * var util = require('tui-code-snippet'); // node, commonjs
	 * var util = tui.util; // distribution file
	 *
	 * //-- #2. Use property --//
	 * var result = util.map([0,1,2,3], function(value) {
	 *     return value + 1;
	 * });
	 *
	 * alert(result);  // 1,2,3,4
	 */
	function map(obj, iteratee, context) {
	    var resultArray = [];

	    context = context || null;

	    forEach(obj, function() {
	        resultArray.push(iteratee.apply(context, arguments));
	    });

	    return resultArray;
	}

	/**
	 * Execute the callback function once for each element present in the array(or Array-like object or plain object).<br>
	 * If the object is Array-like object(ex-arguments object),
	 * It needs to transform to Array.(see 'ex2' of forEach example)<br>
	 * Callback function(iteratee) is invoked with four arguments:
	 *  - The previousValue
	 *  - The currentValue
	 *  - The index
	 *  - The object being traversed
	 * @param {Object} obj The object that will be traversed
	 * @param {function} iteratee Callback function
	 * @param {Object} [context] Context(this) of callback function
	 * @returns {*} The result value
	 * @memberof tui.util
	 * @example
	 * //-- #1. Get Module --//
	 * var util = require('tui-code-snippet'); // node, commonjs
	 * var util = tui.util; // distribution file
	 *
	 * //-- #2. Use property --//
	 * var result = util.reduce([0,1,2,3], function(stored, value) {
	 *     return stored + value;
	 * });
	 *
	 * alert(result); // 6
	 */
	function reduce(obj, iteratee, context) {
	    var index = 0;
	    var keys, length, store;

	    context = context || null;

	    if (!type.isArray(obj)) {
	        keys = object.keys(obj);
	        length = keys.length;
	        store = obj[keys[index += 1]];
	    } else {
	        length = obj.length;
	        store = obj[index];
	    }

	    index += 1;
	    for (; index < length; index += 1) {
	        store = iteratee.call(context, store, obj[keys ? keys[index] : index]);
	    }

	    return store;
	}

	/**
	 * Transform the Array-like object to Array.<br>
	 * In low IE (below 8), Array.prototype.slice.call is not perfect. So, try-catch statement is used.
	 * @param {*} arrayLike Array-like object
	 * @returns {Array} Array
	 * @memberof tui.util
	 * @example
	 * //-- #1. Get Module --//
	 * var util = require('tui-code-snippet'); // node, commonjs
	 * var util = tui.util; // distribution file
	 *
	 * //-- #2. Use property --//
	 * var arrayLike = {
	 *     0: 'one',
	 *     1: 'two',
	 *     2: 'three',
	 *     3: 'four',
	 *     length: 4
	 * };
	 * var result = util.toArray(arrayLike);
	 *
	 * alert(result instanceof Array); // true
	 * alert(result); // one,two,three,four
	 */
	function toArray(arrayLike) {
	    var arr;
	    try {
	        arr = Array.prototype.slice.call(arrayLike);
	    } catch (e) {
	        arr = [];
	        forEachArray(arrayLike, function(value) {
	            arr.push(value);
	        });
	    }

	    return arr;
	}

	/**
	 * Create a new array or plain object with all elements(or properties)
	 * that pass the test implemented by the provided function.<br>
	 * Callback function(iteratee) is invoked with three arguments:
	 *  - The value of the property(or The value of the element)
	 *  - The name of the property(or The index of the element)
	 *  - The object being traversed
	 * @param {Object} obj Object(plain object or Array) that will be traversed
	 * @param {function} iteratee Callback function
	 * @param {Object} [context] Context(this) of callback function
	 * @returns {Object} plain object or Array
	 * @memberof tui.util
	 * @example
	  * //-- #1. Get Module --//
	 * var util = require('tui-code-snippet'); // node, commonjs
	 * var util = tui.util; // distribution file
	 *
	 * //-- #2. Use property --//
	 * var result1 = util.filter([0,1,2,3], function(value) {
	 *     return (value % 2 === 0);
	 * });
	 * alert(result1); // [0, 2]
	 *
	 * var result2 = util.filter({a : 1, b: 2, c: 3}, function(value) {
	 *     return (value % 2 !== 0);
	 * });
	 * alert(result2.a); // 1
	 * alert(result2.b); // undefined
	 * alert(result2.c); // 3
	 */
	function filter(obj, iteratee, context) {
	    var result, add;

	    context = context || null;

	    if (!type.isObject(obj) || !type.isFunction(iteratee)) {
	        throw new Error('wrong parameter');
	    }

	    if (type.isArray(obj)) {
	        result = [];
	        add = function(subResult, args) {
	            subResult.push(args[0]);
	        };
	    } else {
	        result = {};
	        add = function(subResult, args) {
	            subResult[args[1]] = args[0];
	        };
	    }

	    forEach(obj, function() {
	        if (iteratee.apply(context, arguments)) {
	            add(result, arguments);
	        }
	    }, context);

	    return result;
	}

	/**
	 * fetching a property
	 * @param {Array} arr target collection
	 * @param {String|Number} property property name
	 * @returns {Array}
	 * @memberof tui.util
	 * @example
	 * //-- #1. Get Module --//
	 * var util = require('tui-code-snippet'); // node, commonjs
	 * var util = tui.util; // distribution file
	 *
	 * //-- #2. Use property --//
	 * var objArr = [
	 *     {'abc': 1, 'def': 2, 'ghi': 3},
	 *     {'abc': 4, 'def': 5, 'ghi': 6},
	 *     {'abc': 7, 'def': 8, 'ghi': 9}
	 * ];
	 * var arr2d = [
	 *     [1, 2, 3],
	 *     [4, 5, 6],
	 *     [7, 8, 9]
	 * ];
	 * util.pluck(objArr, 'abc'); // [1, 4, 7]
	 * util.pluck(arr2d, 2); // [3, 6, 9]
	 */
	function pluck(arr, property) {
	    var result = map(arr, function(item) {
	        return item[property];
	    });

	    return result;
	}

	module.exports = {
	    forEachOwnProperties: forEachOwnProperties,
	    forEachArray: forEachArray,
	    forEach: forEach,
	    toArray: toArray,
	    map: map,
	    reduce: reduce,
	    filter: filter,
	    pluck: pluck
	};


/***/ }),
/* 5 */
/***/ (function(module, exports) {

	/**
	 * @fileoverview This module provides a bind() function for context binding.
	 * @author NHN Ent.
	 *         FE Development Lab <dl_javascript@nhnent.com>
	 */

	'use strict';

	/**
	 * Create a new function that, when called, has its this keyword set to the provided value.
	 * @param {function} fn A original function before binding
	 * @param {*} obj context of function in arguments[0]
	 * @returns {function()} A new bound function with context that is in arguments[1]
	 * @memberof tui.util
	 */
	function bind(fn, obj) {
	    var slice = Array.prototype.slice;
	    var args;

	    if (fn.bind) {
	        return fn.bind.apply(fn, slice.call(arguments, 1));
	    }

	    /* istanbul ignore next */
	    args = slice.call(arguments, 2);

	    /* istanbul ignore next */
	    return function() {
	        /* istanbul ignore next */
	        return fn.apply(obj, args.length ? args.concat(slice.call(arguments)) : arguments);
	    };
	}

	module.exports = {
	    bind: bind
	};


/***/ }),
/* 6 */
/***/ (function(module, exports) {

	/**
	 * @fileoverview This module provides some simple function for inheritance.
	 * @author NHN Ent.
	 *         FE Development Lab <dl_javascript@nhnent.com>
	 */

	'use strict';

	/**
	 * Create a new object with the specified prototype object and properties.
	 * @param {Object} obj This object will be a prototype of the newly-created object.
	 * @returns {Object}
	 * @memberof tui.util
	 */
	function createObject(obj) {
	    function F() {} // eslint-disable-line require-jsdoc
	    F.prototype = obj;

	    return new F();
	}

	/**
	 * Provide a simple inheritance in prototype-oriented.<br>
	 * Caution :
	 *  Don't overwrite the prototype of child constructor.
	 *
	 * @param {function} subType Child constructor
	 * @param {function} superType Parent constructor
	 * @memberof tui.util
	 * @example
	 * //-- #1. Get Module --//
	 * var util = require('tui-code-snippet'); // node, commonjs
	 * var util = tui.util; // distribution file
	 *
	 * //-- #2. Use property --//
	 * // Parent constructor
	 * function Animal(leg) {
	 *     this.leg = leg;
	 * }
	 * Animal.prototype.growl = function() {
	 *     // ...
	 * };
	 *
	 * // Child constructor
	 * function Person(name) {
	 *     this.name = name;
	 * }
	 *
	 * // Inheritance
	 * util.inherit(Person, Animal);
	 *
	 * // After this inheritance, please use only the extending of property.
	 * // Do not overwrite prototype.
	 * Person.prototype.walk = function(direction) {
	 *     // ...
	 * };
	 */
	function inherit(subType, superType) {
	    var prototype = createObject(superType.prototype);
	    prototype.constructor = subType;
	    subType.prototype = prototype;
	}

	module.exports = {
	    createObject: createObject,
	    inherit: inherit
	};


/***/ }),
/* 7 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileoverview This module has some functions for handling the string.
	 * @author NHN Ent.
	 *         FE Development Lab <dl_javascript@nhnent.com>
	 */

	'use strict';

	var collection = __webpack_require__(4);
	var object = __webpack_require__(1);
	/**
	 * Transform the given HTML Entity string into plain string
	 * @param {String} htmlEntity - HTML Entity type string
	 * @returns {String} Plain string
	 * @memberof tui.util
	 * @example
	 * //-- #1. Get Module --//
	 * var util = require('tui-code-snippet'); // node, commonjs
	 * var util = tui.util; // distribution file
	 *
	 * //-- #2. Use property --//
	 *  var htmlEntityString = "A &#39;quote&#39; is &lt;b&gt;bold&lt;/b&gt;"
	 *  var result = util.decodeHTMLEntity(htmlEntityString); //"A 'quote' is <b>bold</b>"
	 */
	function decodeHTMLEntity(htmlEntity) {
	    var entities = {
	        '&quot;': '"',
	        '&amp;': '&',
	        '&lt;': '<',
	        '&gt;': '>',
	        '&#39;': '\'',
	        '&nbsp;': ' '
	    };

	    return htmlEntity.replace(/&amp;|&lt;|&gt;|&quot;|&#39;|&nbsp;/g, function(m0) {
	        return entities[m0] ? entities[m0] : m0;
	    });
	}

	/**
	 * Transform the given string into HTML Entity string
	 * @param {String} html - String for encoding
	 * @returns {String} HTML Entity
	 * @memberof tui.util
	 * @example
	 * //-- #1. Get Module --//
	 * var util = require('tui-code-snippet'); // node, commonjs
	 * var util = tui.util; // distribution file
	 *
	 * //-- #2. Use property --//
	 *  var htmlEntityString = "<script> alert('test');</script><a href='test'>";
	 *  var result = util.encodeHTMLEntity(htmlEntityString);
	 * //"&lt;script&gt; alert(&#39;test&#39;);&lt;/script&gt;&lt;a href=&#39;test&#39;&gt;"
	 */
	function encodeHTMLEntity(html) {
	    var entities = {
	        '"': 'quot',
	        '&': 'amp',
	        '<': 'lt',
	        '>': 'gt',
	        '\'': '#39'
	    };

	    return html.replace(/[<>&"']/g, function(m0) {
	        return entities[m0] ? '&' + entities[m0] + ';' : m0;
	    });
	}

	/**
	 * Return whether the string capable to transform into plain string is in the given string or not.
	 * @param {String} string - test string
	 * @memberof tui.util
	 * @returns {boolean}
	 */
	function hasEncodableString(string) {
	    return (/[<>&"']/).test(string);
	}

	/**
	 * Return duplicate charters
	 * @param {string} operandStr1 The operand string
	 * @param {string} operandStr2 The operand string
	 * @private
	 * @memberof tui.util
	 * @returns {string}
	 * @example
	 * //-- #1. Get Module --//
	 * var util = require('tui-code-snippet'); // node, commonjs
	 * var util = tui.util; // distribution file
	 *
	 * //-- #2. Use property --//
	 * util.getDuplicatedChar('fe dev', 'nhn entertainment'); // 'e'
	 * util.getDuplicatedChar('fdsa', 'asdf'); // 'asdf'
	 */
	function getDuplicatedChar(operandStr1, operandStr2) {
	    var i = 0;
	    var len = operandStr1.length;
	    var pool = {};
	    var dupl, key;

	    for (; i < len; i += 1) {
	        key = operandStr1.charAt(i);
	        pool[key] = 1;
	    }

	    for (i = 0, len = operandStr2.length; i < len; i += 1) {
	        key = operandStr2.charAt(i);
	        if (pool[key]) {
	            pool[key] += 1;
	        }
	    }

	    pool = collection.filter(pool, function(item) {
	        return item > 1;
	    });

	    pool = object.keys(pool).sort();
	    dupl = pool.join('');

	    return dupl;
	}

	module.exports = {
	    decodeHTMLEntity: decodeHTMLEntity,
	    encodeHTMLEntity: encodeHTMLEntity,
	    hasEncodableString: hasEncodableString,
	    getDuplicatedChar: getDuplicatedChar
	};


/***/ }),
/* 8 */
/***/ (function(module, exports) {

	/**
	 * @fileoverview collections of some technic methods.
	 * @author NHN Ent. FE Development Lab <e0242.nhnent.com>
	 */

	'use strict';

	var tricks = {};
	var aps = Array.prototype.slice;

	/**
	 * Creates a debounced function that delays invoking fn until after delay milliseconds has elapsed
	 * since the last time the debouced function was invoked.
	 * @param {function} fn The function to debounce.
	 * @param {number} [delay=0] The number of milliseconds to delay
	 * @memberof tui.util
	 * @returns {function} debounced function.
	 * @example
	 * //-- #1. Get Module --//
	 * var util = require('tui-code-snippet'); // node, commonjs
	 * var util = tui.util; // distribution file
	 *
	 * //-- #2. Use property --//
	 * function someMethodToInvokeDebounced() {}
	 *
	 * var debounced = util.debounce(someMethodToInvokeDebounced, 300);
	 *
	 * // invoke repeatedly
	 * debounced();
	 * debounced();
	 * debounced();
	 * debounced();
	 * debounced();
	 * debounced();    // last invoke of debounced()
	 *
	 * // invoke someMethodToInvokeDebounced() after 300 milliseconds.
	 */
	function debounce(fn, delay) {
	    var timer, args;

	    /* istanbul ignore next */
	    delay = delay || 0;

	    function debounced() { // eslint-disable-line require-jsdoc
	        args = aps.call(arguments);

	        window.clearTimeout(timer);
	        timer = window.setTimeout(function() {
	            fn.apply(null, args);
	        }, delay);
	    }

	    return debounced;
	}

	/**
	 * return timestamp
	 * @memberof tui.util
	 * @returns {number} The number of milliseconds from Jan. 1970 00:00:00 (GMT)
	 */
	function timestamp() {
	    return Number(new Date());
	}

	/**
	 * Creates a throttled function that only invokes fn at most once per every interval milliseconds.
	 *
	 * You can use this throttle short time repeatedly invoking functions. (e.g MouseMove, Resize ...)
	 *
	 * if you need reuse throttled method. you must remove slugs (e.g. flag variable) related with throttling.
	 * @param {function} fn function to throttle
	 * @param {number} [interval=0] the number of milliseconds to throttle invocations to.
	 * @memberof tui.util
	 * @returns {function} throttled function
	 * @example
	 * //-- #1. Get Module --//
	 * var util = require('tui-code-snippet'); // node, commonjs
	 * var util = tui.util; // distribution file
	 *
	 * //-- #2. Use property --//
	 * function someMethodToInvokeThrottled() {}
	 *
	 * var throttled = util.throttle(someMethodToInvokeThrottled, 300);
	 *
	 * // invoke repeatedly
	 * throttled();    // invoke (leading)
	 * throttled();
	 * throttled();    // invoke (near 300 milliseconds)
	 * throttled();
	 * throttled();
	 * throttled();    // invoke (near 600 milliseconds)
	 * // ...
	 * // invoke (trailing)
	 *
	 * // if you need reuse throttled method. then invoke reset()
	 * throttled.reset();
	 */
	function throttle(fn, interval) {
	    var base;
	    var isLeading = true;
	    var tick = function(_args) {
	        fn.apply(null, _args);
	        base = null;
	    };
	    var debounced, stamp, args;

	    /* istanbul ignore next */
	    interval = interval || 0;

	    debounced = tricks.debounce(tick, interval);

	    function throttled() { // eslint-disable-line require-jsdoc
	        args = aps.call(arguments);

	        if (isLeading) {
	            tick(args);
	            isLeading = false;

	            return;
	        }

	        stamp = tricks.timestamp();

	        base = base || stamp;

	        // pass array directly because `debounce()`, `tick()` are already use
	        // `apply()` method to invoke developer's `fn` handler.
	        //
	        // also, this `debounced` line invoked every time for implements
	        // `trailing` features.
	        debounced(args);

	        if ((stamp - base) >= interval) {
	            tick(args);
	        }
	    }

	    function reset() { // eslint-disable-line require-jsdoc
	        isLeading = true;
	        base = null;
	    }

	    throttled.reset = reset;

	    return throttled;
	}

	tricks.timestamp = timestamp;
	tricks.debounce = debounce;
	tricks.throttle = throttle;

	module.exports = tricks;


/***/ }),
/* 9 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileoverview This module has some functions for handling object as collection.
	 * @author NHN Ent.
	 *         FE Development Lab <dl_javascript@nhnent.com>
	 */
	'use strict';

	var object = __webpack_require__(1);
	var collection = __webpack_require__(4);

	/**
	 * Request image ping.
	 * @param {String} url url for ping request
	 * @param {Object} trackingInfo infos for make query string
	 * @returns {HTMLElement}
	 * @memberof tui.util
	 * @example
	 * //-- #1. Get Module --//
	 * var util = require('tui-code-snippet'); // node, commonjs
	 * var util = tui.util; // distribution file
	 *
	 * //-- #2. Use property --//
	 * util.imagePing('https://www.google-analytics.com/collect', {
	 *     v: 1,
	 *     t: 'event',
	 *     tid: 'trackingid',
	 *     cid: 'cid',
	 *     dp: 'dp',
	 *     dh: 'dh'
	 * });
	 */
	function imagePing(url, trackingInfo) {
	    var queryString = collection.map(object.keys(trackingInfo), function(key, index) {
	        var startWith = index === 0 ? '' : '&';

	        return startWith + key + '=' + trackingInfo[key];
	    }).join('');
	    var trackingElement = document.createElement('img');

	    trackingElement.src = url + '?' + queryString;

	    trackingElement.style.display = 'none';
	    document.body.appendChild(trackingElement);
	    document.body.removeChild(trackingElement);

	    return trackingElement;
	}

	module.exports = {
	    imagePing: imagePing
	};


/***/ }),
/* 10 */
/***/ (function(module, exports) {

	/**
	 * @fileoverview This module detects the kind of well-known browser and version.
	 * @author NHN Ent.
	 *         FE Development Lab <dl_javascript@nhnent.com>
	 */

	'use strict';

	/**
	 * This object has an information that indicate the kind of browser.<br>
	 * The list below is a detectable browser list.
	 *  - ie8 ~ ie11
	 *  - chrome
	 *  - firefox
	 *  - safari
	 *  - edge
	 * @memberof tui.util
	 * @example
	 * //-- #1. Get Module --//
	 * var util = require('tui-code-snippet'); // node, commonjs
	 * var util = tui.util; // distribution file
	 *
	 * //-- #2. Use property --//
	 * util.browser.chrome === true; // chrome
	 * util.browser.firefox === true; // firefox
	 * util.browser.safari === true; // safari
	 * util.browser.msie === true; // IE
	 * util.browser.edge === true; // edge
	 * util.browser.others === true; // other browser
	 * util.browser.version; // browser version
	 */
	var browser = {
	    chrome: false,
	    firefox: false,
	    safari: false,
	    msie: false,
	    edge: false,
	    others: false,
	    version: 0
	};

	var nav = window.navigator;
	var appName = nav.appName.replace(/\s/g, '_');
	var userAgent = nav.userAgent;

	var rIE = /MSIE\s([0-9]+[.0-9]*)/;
	var rIE11 = /Trident.*rv:11\./;
	var rEdge = /Edge\/(\d+)\./;
	var versionRegex = {
	    firefox: /Firefox\/(\d+)\./,
	    chrome: /Chrome\/(\d+)\./,
	    safari: /Version\/([\d.]+).*Safari\/(\d+)/
	};

	var key, tmp;

	var detector = {
	    Microsoft_Internet_Explorer: function() { // eslint-disable-line camelcase
	        var detectedVersion = userAgent.match(rIE);

	        if (detectedVersion) { // ie8 ~ ie10
	            browser.msie = true;
	            browser.version = parseFloat(detectedVersion[1]);
	        } else { // no version information
	            browser.others = true;
	        }
	    },
	    Netscape: function() { // eslint-disable-line complexity
	        var detected = false;

	        if (rIE11.exec(userAgent)) {
	            browser.msie = true;
	            browser.version = 11;
	            detected = true;
	        } else if (rEdge.exec(userAgent)) {
	            browser.edge = true;
	            browser.version = userAgent.match(rEdge)[1];
	            detected = true;
	        } else {
	            for (key in versionRegex) {
	                if (versionRegex.hasOwnProperty(key)) {
	                    tmp = userAgent.match(versionRegex[key]);
	                    if (tmp && tmp.length > 1) { // eslint-disable-line max-depth
	                        browser[key] = detected = true;
	                        browser.version = parseFloat(tmp[1] || 0);
	                        break;
	                    }
	                }
	            }
	        }
	        if (!detected) {
	            browser.others = true;
	        }
	    }
	};

	var fn = detector[appName];

	if (fn) {
	    detector[appName]();
	}

	module.exports = browser;


/***/ }),
/* 11 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileoverview This module has some methods for handling popup-window
	 * @author NHN Ent.
	 *         FE Development Lab <dl_javascript@nhnent.com>
	 */

	'use strict';

	var collection = __webpack_require__(4);
	var type = __webpack_require__(2);
	var func = __webpack_require__(5);
	var browser = __webpack_require__(10);
	var object = __webpack_require__(1);

	var popupId = 0;

	/**
	 * Popup management class
	 * @constructor
	 * @memberof tui.util
	 * @example
	 * // node, commonjs
	 * var popup = require('tui-code-snippet').popup;
	 * @example
	 * // distribution file, script
	 * <script src='path-to/tui-code-snippt.js'></script>
	 * <script>
	 * var popup = tui.util.popup;
	 * <script>
	 */
	function Popup() {
	    /**
	     * Caching the window-contexts of opened popups
	     * @type {Object}
	     */
	    this.openedPopup = {};

	    /**
	     * In IE7, an error occurs when the closeWithParent property attaches to window object.<br>
	     * So, It is for saving the value of closeWithParent instead of attaching to window object.
	     * @type {Object}
	     */
	    this.closeWithParentPopup = {};

	    /**
	     * Post data bridge for IE11 popup
	     * @type {string}
	     */
	    this.postBridgeUrl = '';
	}

	/**********
	 * public methods
	 **********/

	/**
	 * Returns a popup-list administered by current window.
	 * @param {string} [key] The key of popup.
	 * @returns {Object} popup window list object
	 */
	Popup.prototype.getPopupList = function(key) {
	    var target;
	    if (type.isExisty(key)) {
	        target = this.openedPopup[key];
	    } else {
	        target = this.openedPopup;
	    }

	    return target;
	};

	/**
	 * Open popup
	 * Caution:
	 *  In IE11, when transfer data to popup by POST, must set the postBridgeUrl.
	 *
	 * @param {string} url - popup url
	 * @param {Object} options - popup options
	 *     @param {string} [options.popupName] - Key of popup window.<br>
	 *      If the key is set, when you try to open by this key, the popup of this key is focused.<br>
	 *      Or else a new popup window having this key is opened.
	 *
	 *     @param {string} [options.popupOptionStr=""] - Option string of popup window<br>
	 *      It is same with the third parameter of window.open() method.<br>
	 *      See {@link http://www.w3schools.com/jsref/met_win_open.asp}
	 *
	 *     @param {boolean} [options.closeWithParent=true] - Is closed when parent window closed?
	 *
	 *     @param {boolean} [options.useReload=false] - This property indicates whether reload the popup or not.<br>
	 *      If true, the popup will be reloaded when you try to re-open the popup that has been opened.<br>
	 *      When transmit the POST-data, some browsers alert a message for confirming whether retransmit or not.
	 *
	 *     @param {string} [options.postBridgeUrl='']
	 *      Use this url to avoid a certain bug occuring when transmitting POST data to the popup in IE11.<br>
	 *      This specific buggy situation is known to happen because IE11 tries to open the requested url<br>
	 *      not in a new popup window as intended, but in a new tab.<br>
	 *      See {@link http://wiki.nhnent.com/pages/viewpage.action?pageId=240562844}
	 *
	 *     @param {string} [options.method=get]
	 *     The method of transmission when the form-data is transmitted to popup-window.
	 *
	 *     @param {Object} [options.param=null]
	 *     Using as parameters for transmission when the form-data is transmitted to popup-window.
	 */
	Popup.prototype.openPopup = function(url, options) { // eslint-disable-line complexity
	    var popup, formElement, useIEPostBridge;

	    options = object.extend({
	        popupName: 'popup_' + popupId + '_' + Number(new Date()),
	        popupOptionStr: '',
	        useReload: true,
	        closeWithParent: true,
	        method: 'get',
	        param: {}
	    }, options || {});

	    options.method = options.method.toUpperCase();

	    this.postBridgeUrl = options.postBridgeUrl || this.postBridgeUrl;

	    useIEPostBridge = options.method === 'POST' && options.param &&
	            browser.msie && browser.version === 11;

	    if (!type.isExisty(url)) {
	        throw new Error('Popup#open() need popup url.');
	    }

	    popupId += 1;

	    /*
	     * In form-data transmission
	     * 1. Create a form before opening a popup.
	     * 2. Transmit the form-data.
	     * 3. Remove the form after transmission.
	     */
	    if (options.param) {
	        if (options.method === 'GET') {
	            url = url + (/\?/.test(url) ? '&' : '?') + this._parameterize(options.param);
	        } else if (options.method === 'POST') {
	            if (!useIEPostBridge) {
	                formElement = this.createForm(url, options.param, options.method, options.popupName);
	                url = 'about:blank';
	            }
	        }
	    }

	    popup = this.openedPopup[options.popupName];

	    if (!type.isExisty(popup)) {
	        this.openedPopup[options.popupName] = popup = this._open(useIEPostBridge, options.param,
	            url, options.popupName, options.popupOptionStr);
	    } else if (popup.closed) {
	        this.openedPopup[options.popupName] = popup = this._open(useIEPostBridge, options.param,
	            url, options.popupName, options.popupOptionStr);
	    } else {
	        if (options.useReload) {
	            popup.location.replace(url);
	        }
	        popup.focus();
	    }

	    this.closeWithParentPopup[options.popupName] = options.closeWithParent;

	    if (!popup || popup.closed || type.isUndefined(popup.closed)) {
	        alert('please enable popup windows for this website');
	    }

	    if (options.param && options.method === 'POST' && !useIEPostBridge) {
	        if (popup) {
	            formElement.submit();
	        }
	        if (formElement.parentNode) {
	            formElement.parentNode.removeChild(formElement);
	        }
	    }

	    window.onunload = func.bind(this.closeAllPopup, this);
	};

	/**
	 * Close the popup
	 * @param {boolean} [skipBeforeUnload] - If true, the 'window.onunload' will be null and skip unload event.
	 * @param {Window} [popup] - Window-context of popup for closing. If omit this, current window-context will be closed.
	 */
	Popup.prototype.close = function(skipBeforeUnload, popup) {
	    var target = popup || window;
	    skipBeforeUnload = type.isExisty(skipBeforeUnload) ? skipBeforeUnload : false;

	    if (skipBeforeUnload) {
	        window.onunload = null;
	    }

	    if (!target.closed) {
	        target.opener = window.location.href;
	        target.close();
	    }
	};

	/**
	 * Close all the popups in current window.
	 * @param {boolean} closeWithParent - If true, popups having the closeWithParentPopup property as true will be closed.
	 */
	Popup.prototype.closeAllPopup = function(closeWithParent) {
	    var hasArg = type.isExisty(closeWithParent);

	    collection.forEachOwnProperties(this.openedPopup, function(popup, key) {
	        if ((hasArg && this.closeWithParentPopup[key]) || !hasArg) {
	            this.close(false, popup);
	        }
	    }, this);
	};

	/**
	 * Activate(or focus) the popup of the given name.
	 * @param {string} popupName - Name of popup for activation
	 */
	Popup.prototype.focus = function(popupName) {
	    this.getPopupList(popupName).focus();
	};

	/**
	 * Return an object made of parsing the query string.
	 * @returns {Object} An object having some information of the query string.
	 * @private
	 */
	Popup.prototype.parseQuery = function() {
	    var param = {};
	    var search, pair;

	    search = window.location.search.substr(1);
	    collection.forEachArray(search.split('&'), function(part) {
	        pair = part.split('=');
	        param[decodeURIComponent(pair[0])] = decodeURIComponent(pair[1]);
	    });

	    return param;
	};

	/**
	 * Create a hidden form from the given arguments and return this form.
	 * @param {string} action - URL for form transmission
	 * @param {Object} [data] - Data for form transmission
	 * @param {string} [method] - Method of transmission
	 * @param {string} [target] - Target of transmission
	 * @param {HTMLElement} [container] - Container element of form.
	 * @returns {HTMLElement} Form element
	 */
	Popup.prototype.createForm = function(action, data, method, target, container) {
	    var form = document.createElement('form'),
	        input;

	    container = container || document.body;

	    form.method = method || 'POST';
	    form.action = action || '';
	    form.target = target || '';
	    form.style.display = 'none';

	    collection.forEachOwnProperties(data, function(value, key) {
	        input = document.createElement('input');
	        input.name = key;
	        input.type = 'hidden';
	        input.value = value;
	        form.appendChild(input);
	    });

	    container.appendChild(form);

	    return form;
	};

	/**********
	 * private methods
	 **********/

	/**
	 * Return an query string made by parsing the given object
	 * @param {Object} obj - An object that has information for query string
	 * @returns {string} - Query string
	 * @private
	 */
	Popup.prototype._parameterize = function(obj) {
	    var query = [];

	    collection.forEachOwnProperties(obj, function(value, key) {
	        query.push(encodeURIComponent(key) + '=' + encodeURIComponent(value));
	    });

	    return query.join('&');
	};

	/**
	 * Open popup
	 * @param {boolean} useIEPostBridge - A switch option whether to use alternative
	 *                                  of tossing POST data to the popup window in IE11
	 * @param {Object} param - A data for tossing to popup
	 * @param {string} url - Popup url
	 * @param {string} popupName - Popup name
	 * @param {string} optionStr - Setting for popup, ex) 'width=640,height=320,scrollbars=yes'
	 * @returns {Window} Window context of popup
	 * @private
	 */
	Popup.prototype._open = function(useIEPostBridge, param, url, popupName, optionStr) {
	    var popup;

	    if (useIEPostBridge) {
	        popup = window.open(this.postBridgeUrl, popupName, optionStr);
	        setTimeout(function() {
	            popup.redirect(url, param);
	        }, 100);
	    } else {
	        popup = window.open(url, popupName, optionStr);
	    }

	    return popup;
	};

	module.exports = new Popup();


/***/ }),
/* 12 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileoverview This module has a function for date format.
	 * @author NHN Ent.
	 *         FE Development Lab <dl_javascript@nhnent.com>
	 */

	'use strict';

	var type = __webpack_require__(2);
	var object = __webpack_require__(1);

	var tokens = /[\\]*YYYY|[\\]*YY|[\\]*MMMM|[\\]*MMM|[\\]*MM|[\\]*M|[\\]*DD|[\\]*D|[\\]*HH|[\\]*H|[\\]*A/gi;
	var MONTH_STR = [
	    'Invalid month', 'January', 'February', 'March', 'April', 'May',
	    'June', 'July', 'August', 'September', 'October', 'November', 'December'
	];
	var MONTH_DAYS = [0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
	var replaceMap = {
	    M: function(date) {
	        return Number(date.month);
	    },
	    MM: function(date) {
	        var month = date.month;

	        return (Number(month) < 10) ? '0' + month : month;
	    },
	    MMM: function(date) {
	        return MONTH_STR[Number(date.month)].substr(0, 3);
	    },
	    MMMM: function(date) {
	        return MONTH_STR[Number(date.month)];
	    },
	    D: function(date) {
	        return Number(date.date);
	    },
	    d: function(date) {
	        return replaceMap.D(date); // eslint-disable-line new-cap
	    },
	    DD: function(date) {
	        var dayInMonth = date.date;

	        return (Number(dayInMonth) < 10) ? '0' + dayInMonth : dayInMonth;
	    },
	    dd: function(date) {
	        return replaceMap.DD(date); // eslint-disable-line new-cap
	    },
	    YY: function(date) {
	        return Number(date.year) % 100;
	    },
	    yy: function(date) {
	        return replaceMap.YY(date); // eslint-disable-line new-cap
	    },
	    YYYY: function(date) {
	        var prefix = '20',
	            year = date.year;
	        if (year > 69 && year < 100) {
	            prefix = '19';
	        }

	        return (Number(year) < 100) ? prefix + String(year) : year;
	    },
	    yyyy: function(date) {
	        return replaceMap.YYYY(date); // eslint-disable-line new-cap
	    },
	    A: function(date) {
	        return date.meridiem;
	    },
	    a: function(date) {
	        return date.meridiem;
	    },
	    hh: function(date) {
	        var hour = date.hour;

	        return (Number(hour) < 10) ? '0' + hour : hour;
	    },
	    HH: function(date) {
	        return replaceMap.hh(date);
	    },
	    h: function(date) {
	        return String(Number(date.hour));
	    },
	    H: function(date) {
	        return replaceMap.h(date);
	    },
	    m: function(date) {
	        return String(Number(date.minute));
	    },
	    mm: function(date) {
	        var minute = date.minute;

	        return (Number(minute) < 10) ? '0' + minute : minute;
	    }
	};

	/**
	 * Check whether the given variables are valid date or not.
	 * @param {number} year - Year
	 * @param {number} month - Month
	 * @param {number} date - Day in month.
	 * @returns {boolean} Is valid?
	 * @private
	 */
	function isValidDate(year, month, date) { // eslint-disable-line complexity
	    var isValidYear, isValidMonth, isValid, lastDayInMonth;

	    year = Number(year);
	    month = Number(month);
	    date = Number(date);

	    isValidYear = (year > -1 && year < 100) || ((year > 1969) && (year < 2070));
	    isValidMonth = (month > 0) && (month < 13);

	    if (!isValidYear || !isValidMonth) {
	        return false;
	    }

	    lastDayInMonth = MONTH_DAYS[month];
	    if (month === 2 && year % 4 === 0) {
	        if (year % 100 !== 0 || year % 400 === 0) {
	            lastDayInMonth = 29;
	        }
	    }

	    isValid = (date > 0) && (date <= lastDayInMonth);

	    return isValid;
	}

	/**
	 * Return a string that transformed from the given form and date.
	 * @param {string} form - Date form
	 * @param {Date|Object} date - Date object
	 * @param {{meridiemSet: {AM: string, PM: string}}} option - Option
	 * @returns {boolean|string} A transformed string or false.
	 * @memberof tui.util
	 * @example
	 *  // key             | Shorthand
	 *  // --------------- |-----------------------
	 *  // years           | YY / YYYY / yy / yyyy
	 *  // months(n)       | M / MM
	 *  // months(str)     | MMM / MMMM
	 *  // days            | D / DD / d / dd
	 *  // hours           | H / HH / h / hh
	 *  // minutes         | m / mm
	 *  // meridiem(AM,PM) | A / a
	 *
	 * //-- #1. Get Module --//
	 * var util = require('tui-code-snippet'); // node, commonjs
	 * var util = tui.util; // distribution file
	 *
	 * //-- #2. Use property --//
	 * var dateStr1 = util.formatDate('yyyy-MM-dd', {
	 *     year: 2014,
	 *     month: 12,
	 *     date: 12
	 * });
	 * alert(dateStr1); // '2014-12-12'
	 *
	 * var dateStr2 = util.formatDate('MMM DD YYYY HH:mm', {
	 *     year: 1999,
	 *     month: 9,
	 *     date: 9,
	 *     hour: 0,
	 *     minute: 2
	 * });
	 * alert(dateStr2); // 'Sep 09 1999 00:02'
	 *
	 * var dt = new Date(2010, 2, 13),
	 *     dateStr3 = util.formatDate('yyyy년 M월 dd일', dt);
	 * alert(dateStr3); // '2010년 3월 13일'
	 *
	 * var option4 = {
	 *     meridiemSet: {
	 *         AM: '오전',
	 *         PM: '오후'
	 *     }
	 * };
	 * var date4 = {year: 1999, month: 9, date: 9, hour: 13, minute: 2};
	 * var dateStr4 = util.formatDate('yyyy-MM-dd A hh:mm', date4, option4));
	 * alert(dateStr4); // '1999-09-09 오후 01:02'
	 */
	function formatDate(form, date, option) { // eslint-disable-line complexity
	    var am = object.pick(option, 'meridiemSet', 'AM') || 'AM';
	    var pm = object.pick(option, 'meridiemSet', 'PM') || 'PM';
	    var meridiem, nDate, resultStr;

	    if (type.isDate(date)) {
	        nDate = {
	            year: date.getFullYear(),
	            month: date.getMonth() + 1,
	            date: date.getDate(),
	            hour: date.getHours(),
	            minute: date.getMinutes()
	        };
	    } else {
	        nDate = {
	            year: date.year,
	            month: date.month,
	            date: date.date,
	            hour: date.hour,
	            minute: date.minute
	        };
	    }

	    if (!isValidDate(nDate.year, nDate.month, nDate.date)) {
	        return false;
	    }

	    nDate.meridiem = '';
	    if (/([^\\]|^)[aA]\b/.test(form)) {
	        meridiem = (nDate.hour > 11) ? pm : am;
	        if (nDate.hour > 12) { // See the clock system: https://en.wikipedia.org/wiki/12-hour_clock
	            nDate.hour %= 12;
	        }
	        if (nDate.hour === 0) {
	            nDate.hour = 12;
	        }
	        nDate.meridiem = meridiem;
	    }

	    resultStr = form.replace(tokens, function(key) {
	        if (key.indexOf('\\') > -1) { // escape character
	            return key.replace(/\\/, '');
	        }

	        return replaceMap[key](nDate) || '';
	    });

	    return resultStr;
	}

	module.exports = formatDate;


/***/ }),
/* 13 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileoverview
	 *  This module provides a function to make a constructor
	 * that can inherit from the other constructors like the CLASS easily.
	 * @author NHN Ent.
	 *         FE Development Lab <dl_javascript@nhnent.com>
	 */

	'use strict';

	var inherit = __webpack_require__(6).inherit;
	var extend = __webpack_require__(1).extend;

	/**
	 * Help a constructor to be defined and to inherit from the other constructors
	 * @param {*} [parent] Parent constructor
	 * @param {Object} props Members of constructor
	 *  @param {Function} props.init Initialization method
	 *  @param {Object} [props.static] Static members of constructor
	 * @returns {*} Constructor
	 * @memberof tui.util
	 * @example
	 * //-- #1. Get Module --//
	 * var util = require('tui-code-snippet'); // node, commonjs
	 * var util = tui.util; // distribution file
	 *
	 * //-- #2. Use property --//
	 * var Parent = util.defineClass({
	 *     init: function() { // constuructor
	 *         this.name = 'made by def';
	 *     },
	 *     method: function() {
	 *         // ...
	 *     },
	 *     static: {
	 *         staticMethod: function() {
	 *              // ...
	 *         }
	 *     }
	 * });
	 *
	 * var Child = util.defineClass(Parent, {
	 *     childMethod: function() {}
	 * });
	 *
	 * Parent.staticMethod();
	 *
	 * var parentInstance = new Parent();
	 * console.log(parentInstance.name); //made by def
	 * parentInstance.staticMethod(); // Error
	 *
	 * var childInstance = new Child();
	 * childInstance.method();
	 * childInstance.childMethod();
	 */
	function defineClass(parent, props) {
	    var obj;

	    if (!props) {
	        props = parent;
	        parent = null;
	    }

	    obj = props.init || function() {};

	    if (parent) {
	        inherit(obj, parent);
	    }

	    if (props.hasOwnProperty('static')) {
	        extend(obj, props['static']);
	        delete props['static'];
	    }

	    extend(obj.prototype, props);

	    return obj;
	}

	module.exports = defineClass;


/***/ }),
/* 14 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileoverview Define module
	 * @author NHN Ent.
	 *         FE Development Lab <dl_javscript@nhnent.com>
	 * @dependency type.js, defineNamespace.js
	 */

	'use strict';

	var defineNamespace = __webpack_require__(15);
	var type = __webpack_require__(2);

	var INITIALIZATION_METHOD_NAME = 'initialize';

	/**
	 * Define module
	 * @param {string} namespace - Namespace of module
	 * @param {Object} moduleDefinition - Object literal for module
	 * @returns {Object} Defined module
	 * @memberof tui.util
	 * @example
	  * //-- #1. Get Module --//
	 * var util = require('tui-code-snippet'); // node, commonjs
	 * var util = tui.util; // distribution file
	 *
	 * //-- #2. Use property --//
	 * var myModule = util.defineModule('modules.myModule', {
	 *     name: 'john',
	 *     message: '',
	 *     initialize: function() {
	 *        this.message = 'hello world';
	 *     },
	 *     getMessage: function() {
	 *         return this.name + ': ' + this.message
	 *     }
	 * });
	 *
	 * console.log(myModule.getMessage());  // 'john: hello world';
	 */
	function defineModule(namespace, moduleDefinition) {
	    var base = moduleDefinition || {};

	    if (type.isFunction(base[INITIALIZATION_METHOD_NAME])) {
	        base[INITIALIZATION_METHOD_NAME]();
	    }

	    return defineNamespace(namespace, base);
	}

	module.exports = defineModule;


/***/ }),
/* 15 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileoverview Define namespace
	 * @author NHN Ent.
	 *         FE Development Lab <dl_javascript@nhnent.com>
	 * @dependency object.js, collection.js
	 */

	'use strict';

	var collection = __webpack_require__(4);
	var object = __webpack_require__(1);

	/**
	 * Define namespace
	 * @param {string} namespace - Namespace (ex- 'foo.bar.baz')
	 * @param {(object|function)} props - A set of modules or one module
	 * @param {boolean} [isOverride] - Override the props to the namespace.<br>
	 *                                  (It removes previous properties of this namespace)
	 * @returns {(object|function)} Defined namespace
	 * @memberof tui.util
	 * @example
	 * //-- #1. Get Module --//
	 * var util = require('tui-code-snippet'); // node, commonjs
	 * var util = tui.util; // distribution file
	 *
	 * //-- #2. Use property --//
	 * var neComp = util.defineNamespace;
	 * neComp.listMenu = defineClass({
	 *     init: function() {
	 *         // ...
	 *     }
	 * });
	 */
	function defineNamespace(namespace, props, isOverride) {
	    var names, result, prevLast, last;

	    names = namespace.split('.');
	    names.unshift(window);

	    result = collection.reduce(names, function(obj, name) {
	        obj[name] = obj[name] || {};

	        return obj[name];
	    });

	    if (isOverride) {
	        last = names.pop();
	        prevLast = object.pick.apply(null, names);
	        result = prevLast[last] = props;
	    } else {
	        object.extend(result, props);
	    }

	    return result;
	}

	module.exports = defineNamespace;


/***/ }),
/* 16 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileoverview
	 *  This module provides some functions for custom events.<br>
	 *  And it is implemented in the observer design pattern.
	 * @author NHN Ent.
	 *         FE Development Lab <dl_javascript@nhnent.com>
	 */

	'use strict';

	var collection = __webpack_require__(4);
	var type = __webpack_require__(2);
	var object = __webpack_require__(1);

	var R_EVENTNAME_SPLIT = /\s+/g;

	/**
	 * A unit of event handler item.
	 * @ignore
	 * @typedef {object} HandlerItem
	 * @property {function} fn - event handler
	 * @property {object} ctx - context of event handler
	 */

	/**
	 * @class
	 * @memberof tui.util
	 * @example
	 * // node, commonjs
	 * var CustomEvents = require('tui-code-snippet').CustomEvents;
	 * @example
	 * // distribution file, script
	 * <script src='path-to/tui-code-snippt.js'></script>
	 * <script>
	 * var CustomEvents = tui.util.CustomEvents;
	 * </script>
	 */
	function CustomEvents() {
	    /**
	     * @type {HandlerItem[]}
	     */
	    this.events = null;

	    /**
	     * only for checking specific context event was binded
	     * @type {object[]}
	     */
	    this.contexts = null;
	}

	/**
	 * Mixin custom events feature to specific constructor
	 * @param {function} func - constructor
	 * @example
	 * //-- #1. Get Module --//
	 * var CustomEvents = require('tui-code-snippet').CustomEvents; // node, commonjs
	 * var CustomEvents = tui.util.CustomEvents; // distribution file
	 *
	 * //-- #2. Use property --//
	 * var model;
	 * function Model() {
	 *     this.name = '';
	 * }
	 * CustomEvents.mixin(Model);
	 *
	 * model = new Model();
	 * model.on('change', function() { this.name = 'model'; }, this);
	 * model.fire('change');
	 * alert(model.name); // 'model';
	 */
	CustomEvents.mixin = function(func) {
	    object.extend(func.prototype, CustomEvents.prototype);
	};

	/**
	 * Get HandlerItem object
	 * @param {function} handler - handler function
	 * @param {object} [context] - context for handler
	 * @returns {HandlerItem} HandlerItem object
	 * @private
	 */
	CustomEvents.prototype._getHandlerItem = function(handler, context) {
	    var item = {handler: handler};

	    if (context) {
	        item.context = context;
	    }

	    return item;
	};

	/**
	 * Get event object safely
	 * @param {string} [eventName] - create sub event map if not exist.
	 * @returns {(object|array)} event object. if you supplied `eventName`
	 *  parameter then make new array and return it
	 * @private
	 */
	CustomEvents.prototype._safeEvent = function(eventName) {
	    var events = this.events;
	    var byName;

	    if (!events) {
	        events = this.events = {};
	    }

	    if (eventName) {
	        byName = events[eventName];

	        if (!byName) {
	            byName = [];
	            events[eventName] = byName;
	        }

	        events = byName;
	    }

	    return events;
	};

	/**
	 * Get context array safely
	 * @returns {array} context array
	 * @private
	 */
	CustomEvents.prototype._safeContext = function() {
	    var context = this.contexts;

	    if (!context) {
	        context = this.contexts = [];
	    }

	    return context;
	};

	/**
	 * Get index of context
	 * @param {object} ctx - context that used for bind custom event
	 * @returns {number} index of context
	 * @private
	 */
	CustomEvents.prototype._indexOfContext = function(ctx) {
	    var context = this._safeContext();
	    var index = 0;

	    while (context[index]) {
	        if (ctx === context[index][0]) {
	            return index;
	        }

	        index += 1;
	    }

	    return -1;
	};

	/**
	 * Memorize supplied context for recognize supplied object is context or
	 *  name: handler pair object when off()
	 * @param {object} ctx - context object to memorize
	 * @private
	 */
	CustomEvents.prototype._memorizeContext = function(ctx) {
	    var context, index;

	    if (!type.isExisty(ctx)) {
	        return;
	    }

	    context = this._safeContext();
	    index = this._indexOfContext(ctx);

	    if (index > -1) {
	        context[index][1] += 1;
	    } else {
	        context.push([ctx, 1]);
	    }
	};

	/**
	 * Forget supplied context object
	 * @param {object} ctx - context object to forget
	 * @private
	 */
	CustomEvents.prototype._forgetContext = function(ctx) {
	    var context, contextIndex;

	    if (!type.isExisty(ctx)) {
	        return;
	    }

	    context = this._safeContext();
	    contextIndex = this._indexOfContext(ctx);

	    if (contextIndex > -1) {
	        context[contextIndex][1] -= 1;

	        if (context[contextIndex][1] <= 0) {
	            context.splice(contextIndex, 1);
	        }
	    }
	};

	/**
	 * Bind event handler
	 * @param {(string|{name:string, handler:function})} eventName - custom
	 *  event name or an object {eventName: handler}
	 * @param {(function|object)} [handler] - handler function or context
	 * @param {object} [context] - context for binding
	 * @private
	 */
	CustomEvents.prototype._bindEvent = function(eventName, handler, context) {
	    var events = this._safeEvent(eventName);
	    this._memorizeContext(context);
	    events.push(this._getHandlerItem(handler, context));
	};

	/**
	 * Bind event handlers
	 * @param {(string|{name:string, handler:function})} eventName - custom
	 *  event name or an object {eventName: handler}
	 * @param {(function|object)} [handler] - handler function or context
	 * @param {object} [context] - context for binding
	 * //-- #1. Get Module --//
	 * var CustomEvents = require('tui-code-snippet').CustomEvents; // node, commonjs
	 * var CustomEvents = tui.util.CustomEvents; // distribution file
	 *
	 * //-- #2. Use property --//
	 * // # 2.1 Basic Usage
	 * CustomEvents.on('onload', handler);
	 *
	 * // # 2.2 With context
	 * CustomEvents.on('onload', handler, myObj);
	 *
	 * // # 2.3 Bind by object that name, handler pairs
	 * CustomEvents.on({
	 *     'play': handler,
	 *     'pause': handler2
	 * });
	 *
	 * // # 2.4 Bind by object that name, handler pairs with context object
	 * CustomEvents.on({
	 *     'play': handler
	 * }, myObj);
	 */
	CustomEvents.prototype.on = function(eventName, handler, context) {
	    var self = this;

	    if (type.isString(eventName)) {
	        // [syntax 1, 2]
	        eventName = eventName.split(R_EVENTNAME_SPLIT);
	        collection.forEach(eventName, function(name) {
	            self._bindEvent(name, handler, context);
	        });
	    } else if (type.isObject(eventName)) {
	        // [syntax 3, 4]
	        context = handler;
	        collection.forEach(eventName, function(func, name) {
	            self.on(name, func, context);
	        });
	    }
	};

	/**
	 * Bind one-shot event handlers
	 * @param {(string|{name:string,handler:function})} eventName - custom
	 *  event name or an object {eventName: handler}
	 * @param {function|object} [handler] - handler function or context
	 * @param {object} [context] - context for binding
	 */
	CustomEvents.prototype.once = function(eventName, handler, context) {
	    var self = this;

	    if (type.isObject(eventName)) {
	        context = handler;
	        collection.forEach(eventName, function(func, name) {
	            self.once(name, func, context);
	        });

	        return;
	    }

	    function onceHandler() { // eslint-disable-line require-jsdoc
	        handler.apply(context, arguments);
	        self.off(eventName, onceHandler, context);
	    }

	    this.on(eventName, onceHandler, context);
	};

	/**
	 * Splice supplied array by callback result
	 * @param {array} arr - array to splice
	 * @param {function} predicate - function return boolean
	 * @private
	 */
	CustomEvents.prototype._spliceMatches = function(arr, predicate) {
	    var i = 0;
	    var len;

	    if (!type.isArray(arr)) {
	        return;
	    }

	    for (len = arr.length; i < len; i += 1) {
	        if (predicate(arr[i]) === true) {
	            arr.splice(i, 1);
	            len -= 1;
	            i -= 1;
	        }
	    }
	};

	/**
	 * Get matcher for unbind specific handler events
	 * @param {function} handler - handler function
	 * @returns {function} handler matcher
	 * @private
	 */
	CustomEvents.prototype._matchHandler = function(handler) {
	    var self = this;

	    return function(item) {
	        var needRemove = handler === item.handler;

	        if (needRemove) {
	            self._forgetContext(item.context);
	        }

	        return needRemove;
	    };
	};

	/**
	 * Get matcher for unbind specific context events
	 * @param {object} context - context
	 * @returns {function} object matcher
	 * @private
	 */
	CustomEvents.prototype._matchContext = function(context) {
	    var self = this;

	    return function(item) {
	        var needRemove = context === item.context;

	        if (needRemove) {
	            self._forgetContext(item.context);
	        }

	        return needRemove;
	    };
	};

	/**
	 * Get matcher for unbind specific hander, context pair events
	 * @param {function} handler - handler function
	 * @param {object} context - context
	 * @returns {function} handler, context matcher
	 * @private
	 */
	CustomEvents.prototype._matchHandlerAndContext = function(handler, context) {
	    var self = this;

	    return function(item) {
	        var matchHandler = (handler === item.handler);
	        var matchContext = (context === item.context);
	        var needRemove = (matchHandler && matchContext);

	        if (needRemove) {
	            self._forgetContext(item.context);
	        }

	        return needRemove;
	    };
	};

	/**
	 * Unbind event by event name
	 * @param {string} eventName - custom event name to unbind
	 * @param {function} [handler] - handler function
	 * @private
	 */
	CustomEvents.prototype._offByEventName = function(eventName, handler) {
	    var self = this;
	    var forEach = collection.forEachArray;
	    var andByHandler = type.isFunction(handler);
	    var matchHandler = self._matchHandler(handler);

	    eventName = eventName.split(R_EVENTNAME_SPLIT);

	    forEach(eventName, function(name) {
	        var handlerItems = self._safeEvent(name);

	        if (andByHandler) {
	            self._spliceMatches(handlerItems, matchHandler);
	        } else {
	            forEach(handlerItems, function(item) {
	                self._forgetContext(item.context);
	            });

	            self.events[name] = [];
	        }
	    });
	};

	/**
	 * Unbind event by handler function
	 * @param {function} handler - handler function
	 * @private
	 */
	CustomEvents.prototype._offByHandler = function(handler) {
	    var self = this;
	    var matchHandler = this._matchHandler(handler);

	    collection.forEach(this._safeEvent(), function(handlerItems) {
	        self._spliceMatches(handlerItems, matchHandler);
	    });
	};

	/**
	 * Unbind event by object(name: handler pair object or context object)
	 * @param {object} obj - context or {name: handler} pair object
	 * @param {function} handler - handler function
	 * @private
	 */
	CustomEvents.prototype._offByObject = function(obj, handler) {
	    var self = this;
	    var matchFunc;

	    if (this._indexOfContext(obj) < 0) {
	        collection.forEach(obj, function(func, name) {
	            self.off(name, func);
	        });
	    } else if (type.isString(handler)) {
	        matchFunc = this._matchContext(obj);

	        self._spliceMatches(this._safeEvent(handler), matchFunc);
	    } else if (type.isFunction(handler)) {
	        matchFunc = this._matchHandlerAndContext(handler, obj);

	        collection.forEach(this._safeEvent(), function(handlerItems) {
	            self._spliceMatches(handlerItems, matchFunc);
	        });
	    } else {
	        matchFunc = this._matchContext(obj);

	        collection.forEach(this._safeEvent(), function(handlerItems) {
	            self._spliceMatches(handlerItems, matchFunc);
	        });
	    }
	};

	/**
	 * Unbind custom events
	 * @param {(string|object|function)} eventName - event name or context or
	 *  {name: handler} pair object or handler function
	 * @param {(function)} handler - handler function
	 * @example
	 * //-- #1. Get Module --//
	 * var CustomEvents = require('tui-code-snippet').CustomEvents; // node, commonjs
	 * var CustomEvents = tui.util.CustomEvents; // distribution file
	 *
	 * //-- #2. Use property --//
	 * // # 2.1 off by event name
	 * CustomEvents.off('onload');
	 *
	 * // # 2.2 off by event name and handler
	 * CustomEvents.off('play', handler);
	 *
	 * // # 2.3 off by handler
	 * CustomEvents.off(handler);
	 *
	 * // # 2.4 off by context
	 * CustomEvents.off(myObj);
	 *
	 * // # 2.5 off by context and handler
	 * CustomEvents.off(myObj, handler);
	 *
	 * // # 2.6 off by context and event name
	 * CustomEvents.off(myObj, 'onload');
	 *
	 * // # 2.7 off by an Object.<string, function> that is {eventName: handler}
	 * CustomEvents.off({
	 *   'play': handler,
	 *   'pause': handler2
	 * });
	 *
	 * // # 2.8 off the all events
	 * CustomEvents.off();
	 */
	CustomEvents.prototype.off = function(eventName, handler) {
	    if (type.isString(eventName)) {
	        // [syntax 1, 2]
	        this._offByEventName(eventName, handler);
	    } else if (!arguments.length) {
	        // [syntax 8]
	        this.events = {};
	        this.contexts = [];
	    } else if (type.isFunction(eventName)) {
	        // [syntax 3]
	        this._offByHandler(eventName);
	    } else if (type.isObject(eventName)) {
	        // [syntax 4, 5, 6]
	        this._offByObject(eventName, handler);
	    }
	};

	/**
	 * Fire custom event
	 * @param {string} eventName - name of custom event
	 */
	CustomEvents.prototype.fire = function(eventName) {  // eslint-disable-line
	    this.invoke.apply(this, arguments);
	};

	/**
	 * Fire a event and returns the result of operation 'boolean AND' with all
	 *  listener's results.
	 *
	 * So, It is different from {@link CustomEvents#fire}.
	 *
	 * In service code, use this as a before event in component level usually
	 *  for notifying that the event is cancelable.
	 * @param {string} eventName - Custom event name
	 * @param {...*} data - Data for event
	 * @returns {boolean} The result of operation 'boolean AND'
	 * @example
	 * var map = new Map();
	 * map.on({
	 *     'beforeZoom': function() {
	 *         // It should cancel the 'zoom' event by some conditions.
	 *         if (that.disabled && this.getState()) {
	 *             return false;
	 *         }
	 *         return true;
	 *     }
	 * });
	 *
	 * if (this.invoke('beforeZoom')) {    // check the result of 'beforeZoom'
	 *     // if true,
	 *     // doSomething
	 * }
	 */
	CustomEvents.prototype.invoke = function(eventName) {
	    var events, args, index, item;

	    if (!this.hasListener(eventName)) {
	        return true;
	    }

	    events = this._safeEvent(eventName);
	    args = Array.prototype.slice.call(arguments, 1);
	    index = 0;

	    while (events[index]) {
	        item = events[index];

	        if (item.handler.apply(item.context, args) === false) {
	            return false;
	        }

	        index += 1;
	    }

	    return true;
	};

	/**
	 * Return whether at least one of the handlers is registered in the given
	 *  event name.
	 * @param {string} eventName - Custom event name
	 * @returns {boolean} Is there at least one handler in event name?
	 */
	CustomEvents.prototype.hasListener = function(eventName) {
	    return this.getListenerLength(eventName) > 0;
	};

	/**
	 * Return a count of events registered.
	 * @param {string} eventName - Custom event name
	 * @returns {number} number of event
	 */
	CustomEvents.prototype.getListenerLength = function(eventName) {
	    var events = this._safeEvent(eventName);

	    return events.length;
	};

	module.exports = CustomEvents;


/***/ }),
/* 17 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileoverview This module provides a Enum Constructor.
	 * @author NHN Ent.
	 *         FE Development Lab <dl_javascript@nhnent.com>
	 * @example
	 * // node, commonjs
	 * var Enum = require('tui-code-snippet').Enum;
	 * @example
	 * // distribution file, script
	 * <script src='path-to/tui-code-snippt.js'></script>
	 * <script>
	 * var Enum = tui.util.Enum;
	 * <script>
	 */

	'use strict';

	var collection = __webpack_require__(4);
	var type = __webpack_require__(2);

	/**
	 * Check whether the defineProperty() method is supported.
	 * @type {boolean}
	 * @ignore
	 */
	var isSupportDefinedProperty = (function() {
	    try {
	        Object.defineProperty({}, 'x', {});

	        return true;
	    } catch (e) {
	        return false;
	    }
	})();

	/**
	 * A unique value of a constant.
	 * @type {number}
	 * @ignore
	 */
	var enumValue = 0;

	/**
	 * Make a constant-list that has unique values.<br>
	 * In modern browsers (except IE8 and lower),<br>
	 *  a value defined once can not be changed.
	 *
	 * @param {...string|string[]} itemList Constant-list (An array of string is available)
	 * @class
	 * @memberof tui.util
	 * @example
	 * //-- #1. Get Module --//
	 * var Enum = require('tui-code-snippet').Enum; // node, commonjs
	 * var Enum = tui.util.Enum; // distribution file
	 *
	 * //-- #2. Use property --//
	 * var MYENUM = new Enum('TYPE1', 'TYPE2');
	 * var MYENUM2 = new Enum(['TYPE1', 'TYPE2']);
	 *
	 * //usage
	 * if (value === MYENUM.TYPE1) {
	 *      ....
	 * }
	 *
	 * //add (If a duplicate name is inputted, will be disregarded.)
	 * MYENUM.set('TYPE3', 'TYPE4');
	 *
	 * //get name of a constant by a value
	 * MYENUM.getName(MYENUM.TYPE1); // 'TYPE1'
	 *
	 * // In modern browsers (except IE8 and lower), a value can not be changed in constants.
	 * var originalValue = MYENUM.TYPE1;
	 * MYENUM.TYPE1 = 1234; // maybe TypeError
	 * MYENUM.TYPE1 === originalValue; // true
	 **/
	function Enum(itemList) {
	    if (itemList) {
	        this.set.apply(this, arguments);
	    }
	}

	/**
	 * Define a constants-list
	 * @param {...string|string[]} itemList Constant-list (An array of string is available)
	 */
	Enum.prototype.set = function(itemList) {
	    var self = this;

	    if (!type.isArray(itemList)) {
	        itemList = collection.toArray(arguments);
	    }

	    collection.forEach(itemList, function itemListIteratee(item) {
	        self._addItem(item);
	    });
	};

	/**
	 * Return a key of the constant.
	 * @param {number} value A value of the constant.
	 * @returns {string|undefined} Key of the constant.
	 */
	Enum.prototype.getName = function(value) {
	    var self = this;
	    var foundedKey;

	    collection.forEach(this, function(itemValue, key) { // eslint-disable-line consistent-return
	        if (self._isEnumItem(key) && value === itemValue) {
	            foundedKey = key;

	            return false;
	        }
	    });

	    return foundedKey;
	};

	/**
	 * Create a constant.
	 * @private
	 * @param {string} name Constant name. (It will be a key of a constant)
	 */
	Enum.prototype._addItem = function(name) {
	    var value;

	    if (!this.hasOwnProperty(name)) {
	        value = this._makeEnumValue();

	        if (isSupportDefinedProperty) {
	            Object.defineProperty(this, name, {
	                enumerable: true,
	                configurable: false,
	                writable: false,
	                value: value
	            });
	        } else {
	            this[name] = value;
	        }
	    }
	};

	/**
	 * Return a unique value for assigning to a constant.
	 * @private
	 * @returns {number} A unique value
	 */
	Enum.prototype._makeEnumValue = function() {
	    var value;

	    value = enumValue;
	    enumValue += 1;

	    return value;
	};

	/**
	 * Return whether a constant from the given key is in instance or not.
	 * @param {string} key - A constant key
	 * @returns {boolean} Result
	 * @private
	 */
	Enum.prototype._isEnumItem = function(key) {
	    return type.isNumber(this[key]);
	};

	module.exports = Enum;


/***/ }),
/* 18 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileoverview
	 *  Implements the ExMap (Extended Map) object.
	 * @author NHN Ent.
	 *         FE Development Lab <dl_javascript@nhnent.com>
	 */

	'use strict';

	var collection = __webpack_require__(4);
	var Map = __webpack_require__(19);

	// Caching tui.util for performance enhancing
	var mapAPIsForRead = ['get', 'has', 'forEach', 'keys', 'values', 'entries'];
	var mapAPIsForDelete = ['delete', 'clear'];

	/**
	 * The ExMap object is Extended Version of the tui.util.Map object.<br>
	 * and added some useful feature to make it easy to manage the Map object.
	 * @constructor
	 * @param {Array} initData - Array of key-value pairs (2-element Arrays).
	 *      Each key-value pair will be added to the new Map
	 * @memberof tui.util
	 * @example
	 * // node, commonjs
	 * var ExMap = require('tui-code-snippet').ExMap;
	 * @example
	 * // distribution file, script
	 * <script src='path-to/tui-code-snippt.js'></script>
	 * <script>
	 * var ExMap = tui.util.ExMap;
	 * <script>
	 */
	function ExMap(initData) {
	    this._map = new Map(initData);
	    this.size = this._map.size;
	}

	collection.forEachArray(mapAPIsForRead, function(name) {
	    ExMap.prototype[name] = function() {
	        return this._map[name].apply(this._map, arguments);
	    };
	});

	collection.forEachArray(mapAPIsForDelete, function(name) {
	    ExMap.prototype[name] = function() {
	        var result = this._map[name].apply(this._map, arguments);
	        this.size = this._map.size;

	        return result;
	    };
	});

	ExMap.prototype.set = function() {
	    this._map.set.apply(this._map, arguments);
	    this.size = this._map.size;

	    return this;
	};

	/**
	 * Sets all of the key-value pairs in the specified object to the Map object.
	 * @param  {Object} object - Plain object that has a key-value pair
	 */
	ExMap.prototype.setObject = function(object) {
	    collection.forEachOwnProperties(object, function(value, key) {
	        this.set(key, value);
	    }, this);
	};

	/**
	 * Removes the elements associated with keys in the specified array.
	 * @param  {Array} keys - Array that contains keys of the element to remove
	 */
	ExMap.prototype.deleteByKeys = function(keys) {
	    collection.forEachArray(keys, function(key) {
	        this['delete'](key);
	    }, this);
	};

	/**
	 * Sets all of the key-value pairs in the specified Map object to this Map object.
	 * @param  {Map} map - Map object to be merged into this Map object
	 */
	ExMap.prototype.merge = function(map) {
	    map.forEach(function(value, key) {
	        this.set(key, value);
	    }, this);
	};

	/**
	 * Looks through each key-value pair in the map and returns the new ExMap object of
	 * all key-value pairs that pass a truth test implemented by the provided function.
	 * @param  {function} predicate - Function to test each key-value pair of the Map object.<br>
	 *      Invoked with arguments (value, key). Return true to keep the element, false otherwise.
	 * @returns {ExMap} A new ExMap object
	 */
	ExMap.prototype.filter = function(predicate) {
	    var filtered = new ExMap();

	    this.forEach(function(value, key) {
	        if (predicate(value, key)) {
	            filtered.set(key, value);
	        }
	    });

	    return filtered;
	};

	module.exports = ExMap;


/***/ }),
/* 19 */
/***/ (function(module, exports, __webpack_require__) {

	
	/**
	 * @fileoverview
	 *  Implements the Map object.
	 * @author NHN Ent.
	 *         FE Development Lab <dl_javascript@nhnent.com>
	 */

	'use strict';

	var collection = __webpack_require__(4);
	var type = __webpack_require__(2);
	var array = __webpack_require__(3);
	var browser = __webpack_require__(10);
	var func = __webpack_require__(5);

	/**
	 * Using undefined for a key can be ambiguous if there's deleted item in the array,<br>
	 * which is also undefined when accessed by index.<br>
	 * So use this unique object as an undefined key to distinguish it from deleted keys.
	 * @private
	 * @constant
	 */
	var _KEY_FOR_UNDEFINED = {};

	/**
	 * For using NaN as a key, use this unique object as a NaN key.<br>
	 * This makes it easier and faster to compare an object with each keys in the array<br>
	 * through no exceptional comapring for NaN.
	 * @private
	 * @constant
	 */
	var _KEY_FOR_NAN = {};

	/**
	 * Constructor of MapIterator<br>
	 * Creates iterator object with new keyword.
	 * @constructor
	 * @param  {Array} keys - The array of keys in the map
	 * @param  {function} valueGetter - Function that returns certain value,
	 *      taking key and keyIndex as arguments.
	 * @ignore
	 */
	function MapIterator(keys, valueGetter) {
	    this._keys = keys;
	    this._valueGetter = valueGetter;
	    this._length = this._keys.length;
	    this._index = -1;
	    this._done = false;
	}

	/**
	 * Implementation of Iterator protocol.
	 * @returns {{done: boolean, value: *}} Object that contains done(boolean) and value.
	 */
	MapIterator.prototype.next = function() {
	    var data = {};
	    do {
	        this._index += 1;
	    } while (type.isUndefined(this._keys[this._index]) && this._index < this._length);

	    if (this._index >= this._length) {
	        data.done = true;
	    } else {
	        data.done = false;
	        data.value = this._valueGetter(this._keys[this._index], this._index);
	    }

	    return data;
	};

	/**
	 * The Map object implements the ES6 Map specification as closely as possible.<br>
	 * For using objects and primitive values as keys, this object uses array internally.<br>
	 * So if the key is not a string, get(), set(), has(), delete() will operates in O(n),<br>
	 * and it can cause performance issues with a large dataset.
	 *
	 * Features listed below are not supported. (can't be implented without native support)
	 * - Map object is iterable<br>
	 * - Iterable object can be used as an argument of constructor
	 *
	 * If the browser supports full implementation of ES6 Map specification, native Map obejct
	 * will be used internally.
	 * @class
	 * @param  {Array} initData - Array of key-value pairs (2-element Arrays).
	 *      Each key-value pair will be added to the new Map
	 * @memberof tui.util
	 * @example
	 * // node, commonjs
	 * var Map = require('tui-code-snippet').Map;
	 * @example
	 * // distribution file, script
	 * <script src='path-to/tui-code-snippt.js'></script>
	 * <script>
	 * var Map = tui.util.Map;
	 * <script>
	 */
	function Map(initData) {
	    this._valuesForString = {};
	    this._valuesForIndex = {};
	    this._keys = [];

	    if (initData) {
	        this._setInitData(initData);
	    }

	    this.size = 0;
	}

	/* eslint-disable no-extend-native */
	/**
	 * Add all elements in the initData to the Map object.
	 * @private
	 * @param  {Array} initData - Array of key-value pairs to add to the Map object
	 */
	Map.prototype._setInitData = function(initData) {
	    if (!type.isArray(initData)) {
	        throw new Error('Only Array is supported.');
	    }
	    collection.forEachArray(initData, function(pair) {
	        this.set(pair[0], pair[1]);
	    }, this);
	};

	/**
	 * Returns true if the specified value is NaN.<br>
	 * For unsing NaN as a key, use this method to test equality of NaN<br>
	 * because === operator doesn't work for NaN.
	 * @private
	 * @param {*} value - Any object to be tested
	 * @returns {boolean} True if value is NaN, false otherwise.
	 */
	Map.prototype._isNaN = function(value) {
	    return typeof value === 'number' && value !== value; // eslint-disable-line no-self-compare
	};

	/**
	 * Returns the index of the specified key.
	 * @private
	 * @param  {*} key - The key object to search for.
	 * @returns {number} The index of the specified key
	 */
	Map.prototype._getKeyIndex = function(key) {
	    var result = -1;
	    var value;

	    if (type.isString(key)) {
	        value = this._valuesForString[key];
	        if (value) {
	            result = value.keyIndex;
	        }
	    } else {
	        result = array.inArray(key, this._keys);
	    }

	    return result;
	};

	/**
	 * Returns the original key of the specified key.
	 * @private
	 * @param  {*} key - key
	 * @returns {*} Original key
	 */
	Map.prototype._getOriginKey = function(key) {
	    var originKey = key;
	    if (key === _KEY_FOR_UNDEFINED) {
	        originKey = undefined; // eslint-disable-line no-undefined
	    } else if (key === _KEY_FOR_NAN) {
	        originKey = NaN;
	    }

	    return originKey;
	};

	/**
	 * Returns the unique key of the specified key.
	 * @private
	 * @param  {*} key - key
	 * @returns {*} Unique key
	 */
	Map.prototype._getUniqueKey = function(key) {
	    var uniqueKey = key;
	    if (type.isUndefined(key)) {
	        uniqueKey = _KEY_FOR_UNDEFINED;
	    } else if (this._isNaN(key)) {
	        uniqueKey = _KEY_FOR_NAN;
	    }

	    return uniqueKey;
	};

	/**
	 * Returns the value object of the specified key.
	 * @private
	 * @param  {*} key - The key of the value object to be returned
	 * @param  {number} keyIndex - The index of the key
	 * @returns {{keyIndex: number, origin: *}} Value object
	 */
	Map.prototype._getValueObject = function(key, keyIndex) { // eslint-disable-line consistent-return
	    if (type.isString(key)) {
	        return this._valuesForString[key];
	    }

	    if (type.isUndefined(keyIndex)) {
	        keyIndex = this._getKeyIndex(key);
	    }
	    if (keyIndex >= 0) {
	        return this._valuesForIndex[keyIndex];
	    }
	};

	/**
	 * Returns the original value of the specified key.
	 * @private
	 * @param  {*} key - The key of the value object to be returned
	 * @param  {number} keyIndex - The index of the key
	 * @returns {*} Original value
	 */
	Map.prototype._getOriginValue = function(key, keyIndex) {
	    return this._getValueObject(key, keyIndex).origin;
	};

	/**
	 * Returns key-value pair of the specified key.
	 * @private
	 * @param  {*} key - The key of the value object to be returned
	 * @param  {number} keyIndex - The index of the key
	 * @returns {Array} Key-value Pair
	 */
	Map.prototype._getKeyValuePair = function(key, keyIndex) {
	    return [this._getOriginKey(key), this._getOriginValue(key, keyIndex)];
	};

	/**
	 * Creates the wrapper object of original value that contains a key index
	 * and returns it.
	 * @private
	 * @param  {type} origin - Original value
	 * @param  {type} keyIndex - Index of the key
	 * @returns {{keyIndex: number, origin: *}} Value object
	 */
	Map.prototype._createValueObject = function(origin, keyIndex) {
	    return {
	        keyIndex: keyIndex,
	        origin: origin
	    };
	};

	/**
	 * Sets the value for the key in the Map object.
	 * @param  {*} key - The key of the element to add to the Map object
	 * @param  {*} value - The value of the element to add to the Map object
	 * @returns {Map} The Map object
	 */
	Map.prototype.set = function(key, value) {
	    var uniqueKey = this._getUniqueKey(key);
	    var keyIndex = this._getKeyIndex(uniqueKey);
	    var valueObject;

	    if (keyIndex < 0) {
	        keyIndex = this._keys.push(uniqueKey) - 1;
	        this.size += 1;
	    }
	    valueObject = this._createValueObject(value, keyIndex);

	    if (type.isString(key)) {
	        this._valuesForString[key] = valueObject;
	    } else {
	        this._valuesForIndex[keyIndex] = valueObject;
	    }

	    return this;
	};

	/**
	 * Returns the value associated to the key, or undefined if there is none.
	 * @param  {*} key - The key of the element to return
	 * @returns {*} Element associated with the specified key
	 */
	Map.prototype.get = function(key) {
	    var uniqueKey = this._getUniqueKey(key);
	    var value = this._getValueObject(uniqueKey);

	    return value && value.origin;
	};

	/**
	 * Returns a new Iterator object that contains the keys for each element
	 * in the Map object in insertion order.
	 * @returns {Iterator} A new Iterator object
	 */
	Map.prototype.keys = function() {
	    return new MapIterator(this._keys, func.bind(this._getOriginKey, this));
	};

	/**
	 * Returns a new Iterator object that contains the values for each element
	 * in the Map object in insertion order.
	 * @returns {Iterator} A new Iterator object
	 */
	Map.prototype.values = function() {
	    return new MapIterator(this._keys, func.bind(this._getOriginValue, this));
	};

	/**
	 * Returns a new Iterator object that contains the [key, value] pairs
	 * for each element in the Map object in insertion order.
	 * @returns {Iterator} A new Iterator object
	 */
	Map.prototype.entries = function() {
	    return new MapIterator(this._keys, func.bind(this._getKeyValuePair, this));
	};

	/**
	 * Returns a boolean asserting whether a value has been associated to the key
	 * in the Map object or not.
	 * @param  {*} key - The key of the element to test for presence
	 * @returns {boolean} True if an element with the specified key exists;
	 *          Otherwise false
	 */
	Map.prototype.has = function(key) {
	    return !!this._getValueObject(key);
	};

	/**
	 * Removes the specified element from a Map object.
	 * @param {*} key - The key of the element to remove
	 * @function delete
	 * @memberof tui.util.Map.prototype
	 */
	// cannot use reserved keyword as a property name in IE8 and under.
	Map.prototype['delete'] = function(key) {
	    var keyIndex;

	    if (type.isString(key)) {
	        if (this._valuesForString[key]) {
	            keyIndex = this._valuesForString[key].keyIndex;
	            delete this._valuesForString[key];
	        }
	    } else {
	        keyIndex = this._getKeyIndex(key);
	        if (keyIndex >= 0) {
	            delete this._valuesForIndex[keyIndex];
	        }
	    }

	    if (keyIndex >= 0) {
	        delete this._keys[keyIndex];
	        this.size -= 1;
	    }
	};

	/**
	 * Executes a provided function once per each key/value pair in the Map object,
	 * in insertion order.
	 * @param  {function} callback - Function to execute for each element
	 * @param  {thisArg} thisArg - Value to use as this when executing callback
	 */
	Map.prototype.forEach = function(callback, thisArg) {
	    thisArg = thisArg || this;
	    collection.forEachArray(this._keys, function(key) {
	        if (!type.isUndefined(key)) {
	            callback.call(thisArg, this._getValueObject(key).origin, key, this);
	        }
	    }, this);
	};

	/**
	 * Removes all elements from a Map object.
	 */
	Map.prototype.clear = function() {
	    Map.call(this);
	};
	/* eslint-enable no-extend-native */

	// Use native Map object if exists.
	// But only latest versions of Chrome and Firefox support full implementation.
	(function() {
	    if (window.Map && (
	        (browser.firefox && browser.version >= 37) ||
	            (browser.chrome && browser.version >= 42)
	    )
	    ) {
	        Map = window.Map; // eslint-disable-line no-func-assign
	    }
	})();

	module.exports = Map;


/***/ }),
/* 20 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileoverview This module provides the HashMap constructor.
	 * @author NHN Ent.
	 *         FE Development Lab <dl_javascript@nhnent.com>
	 */

	'use strict';

	var collection = __webpack_require__(4);
	var type = __webpack_require__(2);
	/**
	 * All the data in hashMap begin with _MAPDATAPREFIX;
	 * @type {string}
	 * @private
	 */
	var _MAPDATAPREFIX = 'å';

	/**
	 * HashMap can handle the key-value pairs.<br>
	 * Caution:<br>
	 *  HashMap instance has a length property but is not an instance of Array.
	 * @param {Object} [obj] A initial data for creation.
	 * @constructor
	 * @memberof tui.util
	 * @deprecated since version 1.3.0
	 * @example
	 * // node, commonjs
	 * var HashMap = require('tui-code-snippet').HashMap;
	 * var hm = new tui.util.HashMap({
	  'mydata': {
	    'hello': 'imfine'
	  },
	  'what': 'time'
	});
	 * @example
	 * // distribution file, script
	 * <script src='path-to/tui-code-snippt.js'></script>
	 * <script>
	 * var HashMap = tui.util.HashMap;
	 * <script>
	 * var hm = new tui.util.HashMap({
	  'mydata': {
	    'hello': 'imfine'
	  },
	  'what': 'time'
	});
	 */
	function HashMap(obj) {
	    /**
	     * size
	     * @type {number}
	     */
	    this.length = 0;

	    if (obj) {
	        this.setObject(obj);
	    }
	}

	/**
	 * Set a data from the given key with value or the given object.
	 * @param {string|Object} key A string or object for key
	 * @param {*} [value] A data
	 * @example
	 * //-- #1. Get Module --//
	 * var HashMap = require('tui-code-snippet').HashMap; // node, commonjs
	 * var HashMap = tui.util.HashMap; // distribution file
	 *
	 * //-- #2. Use property --//
	 * var hm = new HashMap();
	 * hm.set('key', 'value');
	 * hm.set({
	 *     'key1': 'data1',
	 *     'key2': 'data2'
	 * });
	 */
	HashMap.prototype.set = function(key, value) {
	    if (arguments.length === 2) {
	        this.setKeyValue(key, value);
	    } else {
	        this.setObject(key);
	    }
	};

	/**
	 * Set a data from the given key with value.
	 * @param {string} key A string for key
	 * @param {*} value A data
	 * @example
	 * //-- #1. Get Module --//
	 * var HashMap = require('tui-code-snippet').HashMap; // node, commonjs
	 * var HashMap = tui.util.HashMap; // distribution file
	 *
	 * //-- #2. Use property --//
	 * var hm = new HashMap();
	 * hm.setKeyValue('key', 'value');
	 */
	HashMap.prototype.setKeyValue = function(key, value) {
	    if (!this.has(key)) {
	        this.length += 1;
	    }
	    this[this.encodeKey(key)] = value;
	};

	/**
	 * Set a data from the given object.
	 * @param {Object} obj A object for data
	 * @example
	 * //-- #1. Get Module --//
	 * var HashMap = require('tui-code-snippet').HashMap; // node, commonjs
	 * var HashMap = tui.util.HashMap; // distribution file
	 *
	 * //-- #2. Use property --//
	 * var hm = new HashMap();
	 * hm.setObject({
	 *     'key1': 'data1',
	 *     'key2': 'data2'
	 * });
	 */
	HashMap.prototype.setObject = function(obj) {
	    var self = this;

	    collection.forEachOwnProperties(obj, function(value, key) {
	        self.setKeyValue(key, value);
	    });
	};

	/**
	 * Merge with the given another hashMap.
	 * @param {HashMap} hashMap Another hashMap instance
	 */
	HashMap.prototype.merge = function(hashMap) {
	    var self = this;

	    hashMap.each(function(value, key) {
	        self.setKeyValue(key, value);
	    });
	};

	/**
	 * Encode the given key for hashMap.
	 * @param {string} key A string for key
	 * @returns {string} A encoded key
	 * @private
	 */
	HashMap.prototype.encodeKey = function(key) {
	    return _MAPDATAPREFIX + key;
	};

	/**
	 * Decode the given key in hashMap.
	 * @param {string} key A string for key
	 * @returns {string} A decoded key
	 * @private
	 */
	HashMap.prototype.decodeKey = function(key) {
	    var decodedKey = key.split(_MAPDATAPREFIX);

	    return decodedKey[decodedKey.length - 1];
	};

	/**
	 * Return the value from the given key.
	 * @param {string} key A string for key
	 * @returns {*} The value from a key
	 * @example
	 * //-- #1. Get Module --//
	 * var HashMap = require('tui-code-snippet').HashMap; // node, commonjs
	 * var HashMap = tui.util.HashMap; // distribution file
	 *
	 * //-- #2. Use property --//
	 * var hm = new HashMap();
	 * hm.set('key', 'value');
	 * hm.get('key') // value
	 */
	HashMap.prototype.get = function(key) {
	    return this[this.encodeKey(key)];
	};

	/**
	 * Check the existence of a value from the key.
	 * @param {string} key A string for key
	 * @returns {boolean} Indicating whether a value exists or not.
	 * @example
	 * //-- #1. Get Module --//
	 * var HashMap = require('tui-code-snippet').HashMap; // node, commonjs
	 * var HashMap = tui.util.HashMap; // distribution file
	 *
	 * //-- #2. Use property --//
	 * var hm = new HashMap();
	 * hm.set('key', 'value');
	 * hm.has('key') // true
	 */
	HashMap.prototype.has = function(key) {
	    return this.hasOwnProperty(this.encodeKey(key));
	};

	/**
	 * Remove a data(key-value pairs) from the given key or the given key-list.
	 * @param {...string|string[]} key A string for key
	 * @returns {string|string[]} A removed data
	 * @example
	 * //-- #1. Get Module --//
	 * var HashMap = require('tui-code-snippet').HashMap; // node, commonjs
	 * var HashMap = tui.util.HashMap; // distribution file
	 *
	 * //-- #2. Use property --//
	 * var hm = new HashMap();
	 * hm.set('key', 'value');
	 * hm.set('key2', 'value');
	 *
	 * hm.remove('key');
	 * hm.remove('key', 'key2');
	 * hm.remove(['key', 'key2']);
	 */
	HashMap.prototype.remove = function(key) {
	    if (arguments.length > 1) {
	        key = collection.toArray(arguments);
	    }

	    return type.isArray(key) ? this.removeByKeyArray(key) : this.removeByKey(key);
	};

	/**
	 * Remove data(key-value pair) from the given key.
	 * @param {string} key A string for key
	 * @returns {*|null} A removed data
	 * @example
	 * //-- #1. Get Module --//
	 * var HashMap = require('tui-code-snippet').HashMap; // node, commonjs
	 * var HashMap = tui.util.HashMap; // distribution file
	 *
	 * //-- #2. Use property --//
	 * var hm = new HashMap();
	 * hm.set('key', 'value');
	 * hm.removeByKey('key')
	 */
	HashMap.prototype.removeByKey = function(key) {
	    var data = this.has(key) ? this.get(key) : null;

	    if (data !== null) {
	        delete this[this.encodeKey(key)];
	        this.length -= 1;
	    }

	    return data;
	};

	/**
	 * Remove a data(key-value pairs) from the given key-list.
	 * @param {string[]} keyArray An array of keys
	 * @returns {string[]} A removed data
	 * @example
	 * //-- #1. Get Module --//
	 * var HashMap = require('tui-code-snippet').HashMap; // node, commonjs
	 * var HashMap = tui.util.HashMap; // distribution file
	 *
	 * //-- #2. Use property --//
	 * var hm = new HashMap();
	 * hm.set('key', 'value');
	 * hm.set('key2', 'value');
	 * hm.removeByKeyArray(['key', 'key2']);
	 */
	HashMap.prototype.removeByKeyArray = function(keyArray) {
	    var data = [];
	    var self = this;

	    collection.forEach(keyArray, function(key) {
	        data.push(self.removeByKey(key));
	    });

	    return data;
	};

	/**
	 * Remove all the data
	 */
	HashMap.prototype.removeAll = function() {
	    var self = this;

	    this.each(function(value, key) {
	        self.remove(key);
	    });
	};

	/**
	 * Execute the provided callback once for each all the data.
	 * @param {Function} iteratee Callback function
	 * @example
	 * //-- #1. Get Module --//
	 * var HashMap = require('tui-code-snippet').HashMap; // node, commonjs
	 * var HashMap = tui.util.HashMap; // distribution file
	 *
	 * //-- #2. Use property --//
	 * var hm = new HashMap();
	 * hm.set('key', 'value');
	 * hm.set('key2', 'value');
	 *
	 * hm.each(function(value, key) {
	 *     //do something...
	 * });
	 */
	HashMap.prototype.each = function(iteratee) {
	    var self = this;
	    var flag;

	    collection.forEachOwnProperties(this, function(value, key) { // eslint-disable-line consistent-return
	        if (key.charAt(0) === _MAPDATAPREFIX) {
	            flag = iteratee(value, self.decodeKey(key));
	        }

	        if (flag === false) {
	            return flag;
	        }
	    });
	};

	/**
	 * Return the key-list stored.
	 * @returns {Array} A key-list
	 * @example
	 * //-- #1. Get Module --//
	 * var HashMap = require('tui-code-snippet').HashMap; // node, commonjs
	 * var HashMap = tui.util.HashMap; // distribution file
	 *
	 * //-- #2. Use property --//
	 *  var hm = new HashMap();
	 *  hm.set('key', 'value');
	 *  hm.set('key2', 'value');
	 *  hm.keys();  //['key', 'key2');
	 */
	HashMap.prototype.keys = function() {
	    var keys = [];
	    var self = this;

	    this.each(function(value, key) {
	        keys.push(self.decodeKey(key));
	    });

	    return keys;
	};

	/**
	 * Work similarly to Array.prototype.map().<br>
	 * It executes the provided callback that checks conditions once for each element of hashMap,<br>
	 *  and returns a new array having elements satisfying the conditions
	 * @param {Function} condition A function that checks conditions
	 * @returns {Array} A new array having elements satisfying the conditions
	 * @example
	 * //-- #1. Get Module --//
	 * var HashMap = require('tui-code-snippet').HashMap; // node, commonjs
	 * var HashMap = tui.util.HashMap; // distribution file
	 *
	 * //-- #2. Use property --//
	 * var hm1 = new HashMap();
	 * hm1.set('key', 'value');
	 * hm1.set('key2', 'value');
	 *
	 * hm1.find(function(value, key) {
	 *     return key === 'key2';
	 * }); // ['value']
	 *
	 * var hm2 = new HashMap({
	 *     'myobj1': {
	 *         visible: true
	 *     },
	 *     'mybobj2': {
	 *         visible: false
	 *     }
	 * });
	 *
	 * hm2.find(function(obj, key) {
	 *     return obj.visible === true;
	 * }); // [{visible: true}];
	 */
	HashMap.prototype.find = function(condition) {
	    var founds = [];

	    this.each(function(value, key) {
	        if (condition(value, key)) {
	            founds.push(value);
	        }
	    });

	    return founds;
	};

	/**
	 * Return a new Array having all values.
	 * @returns {Array} A new array having all values
	 */
	HashMap.prototype.toArray = function() {
	    var result = [];

	    this.each(function(v) {
	        result.push(v);
	    });

	    return result;
	};

	module.exports = HashMap;


/***/ })
/******/ ])
});
;

/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
/**
* @fileoverview Editor/Viewer proxy for extensions
* @author NHN Ent. FE Development Lab <dl_javascript@nhnent.com>
*/
/* eslint global-require: 0 no-empty: 0 */

var Editor = void 0;
try {
  Editor = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"../editor\""); e.code = 'MODULE_NOT_FOUND'; throw e; }()));
} catch (e) {}
if (!Editor) {
  try {
    Editor = __webpack_require__(21);
  } catch (e) {}
}

exports.default = Editor;

/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createTableData = createTableData;
exports.createCellIndexData = createCellIndexData;

var _jquery = __webpack_require__(1);

var _jquery2 = _interopRequireDefault(_jquery);

var _tuiCodeSnippet = __webpack_require__(2);

var _tuiCodeSnippet2 = _interopRequireDefault(_tuiCodeSnippet);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Parse cell like td or th.
 * @param {HTMLElement} cell - cell element like td or th
 * @param {number} rowIndex - row index
 * @param {number} colIndex - column index
 * @returns {{
 *   nodeName: string,
 *   colspan: number,
 *   rowspan: number,
 *   content: string,
 *   align: ?string
 * }}
 * @private
 */
/**
* @fileoverview Implements tableDataHandler
* @author NHN Ent. FE Development Lab <dl_javascript@nhnent.com>
*/
function _parseCell(cell, rowIndex, colIndex) {
  var $cell = (0, _jquery2.default)(cell);
  var colspan = $cell.attr('colspan');
  var rowspan = $cell.attr('rowspan');
  var nodeName = cell.nodeName;


  if (nodeName !== 'TH' && nodeName !== 'TD') {
    return null;
  }

  var cellData = {
    nodeName: cell.nodeName,
    colspan: colspan ? parseInt(colspan, 10) : 1,
    rowspan: rowspan ? parseInt(rowspan, 10) : 1,
    content: $cell.html(),
    elementIndex: {
      rowIndex: rowIndex,
      colIndex: colIndex
    }
  };

  if (cell.nodeName === 'TH' && cell.align) {
    cellData.align = cell.align;
  }

  return cellData;
}

/**
 * Add merged cell.
 * @param {object} base - base table data
 * @param {object} cellData - cell data
 * @param {number} startRowIndex - start row index
 * @param {number} startCellIndex - start cell index
 * @private
 */
function _addMergedCell(base, cellData, startRowIndex, startCellIndex) {
  var colspan = cellData.colspan,
      rowspan = cellData.rowspan,
      nodeName = cellData.nodeName;

  var colMerged = colspan > 1;
  var rowMerged = rowspan > 1;

  if (!colMerged && !rowMerged) {
    return;
  }

  var limitRowIndex = startRowIndex + rowspan;
  var limitCellIndex = startCellIndex + colspan;

  _tuiCodeSnippet2.default.range(startRowIndex, limitRowIndex).forEach(function (rowIndex) {
    base[rowIndex] = base[rowIndex] || [];

    _tuiCodeSnippet2.default.range(startCellIndex, limitCellIndex).forEach(function (cellIndex) {
      var mergedData = {
        nodeName: nodeName
      };

      if (rowIndex === startRowIndex && cellIndex === startCellIndex) {
        return;
      }

      if (colMerged) {
        mergedData.colMergeWith = startCellIndex;
      }

      if (rowMerged) {
        mergedData.rowMergeWith = startRowIndex;
      }

      base[rowIndex][cellIndex] = mergedData;
    });
  });
}

/**
 * Create table data from jQuery table Element.
 * @param {jQuery} $table - jQuery table element
 * @returns {Array.<Array.<object>>}
 * @ignore
 */
function createTableData($table) {
  var tableData = [];

  $table.find('tr').each(function (rowIndex, tr) {
    var stackedColCount = 0;

    tableData[rowIndex] = tableData[rowIndex] || [];

    (0, _jquery2.default)(tr).children().each(function (colIndex, cell) {
      var cellData = _parseCell(cell, rowIndex, colIndex);

      if (!cellData) {
        return;
      }
      var dataColIndex = colIndex + stackedColCount;

      while (tableData[rowIndex][dataColIndex]) {
        dataColIndex += 1;
        stackedColCount += 1;
      }

      tableData[rowIndex][dataColIndex] = cellData;
      _addMergedCell(tableData, cellData, rowIndex, dataColIndex);
    });
  });

  if ($table[0].className) {
    tableData.className = $table[0].className;
  }

  return tableData;
}

/**
 * Create cell index data of table data.
 * @param {Array.<Array.<object>>} tableData - table data
 * @returns {Array.<Array.<object>>}
 * @ignore
 */
function createCellIndexData(tableData) {
  var mappingData = [];

  tableData.forEach(function (row, rowIndex) {
    var mappingRow = [];

    row.forEach(function (cell, colIndex) {
      if (_tuiCodeSnippet2.default.isUndefined(cell.colMergeWith) && _tuiCodeSnippet2.default.isUndefined(cell.rowMergeWith)) {
        mappingRow.push({
          rowIndex: rowIndex,
          colIndex: colIndex
        });
      }
    });
    mappingData.push(mappingRow);
  });

  return mappingData;
}

/**
 * Get header aligns.
 * @param {Array.<Array.<object>>} tableData - table data
 * @returns {Array.<?string>}
 * @private
 */
function _getHeaderAligns(tableData) {
  var headRowData = tableData[0];


  return headRowData.map(function (cellData) {
    var align = void 0;

    if (_tuiCodeSnippet2.default.isExisty(cellData.colMergeWith)) {
      align = headRowData[cellData.colMergeWith].align;
    } else {
      align = cellData.align;
    }

    return align;
  });
}

/**
 * Create render data.
 * @param {Array.<object>} tableData - table data
 * @param {Array.<object>} cellIndexData - cell index data
 * @returns {Array.<Array.<object>>}
 * @ignore
 */
function createRenderData(tableData, cellIndexData) {
  var headerAligns = _getHeaderAligns(tableData);
  var renderData = cellIndexData.map(function (row) {
    return row.map(function (_ref) {
      var rowIndex = _ref.rowIndex,
          colIndex = _ref.colIndex;
      return _tuiCodeSnippet2.default.extend({
        align: headerAligns[colIndex]
      }, tableData[rowIndex][colIndex]);
    });
  });

  if (tableData.className) {
    renderData.className = tableData.className;
  }

  return renderData;
}

var BASIC_CELL_CONTENT = _tuiCodeSnippet2.default.browser.msie ? '' : '<br>';

/**
 * Create basic cell data.
 * @param {number} rowIndex - row index
 * @param {number} colIndex - column index
 * @param {string} nodeName - node name
 * @returns {{
 *   nodeName: string,
 *   colspan: number,
 *   rowspan: number,
 *   content: string
 * }}
 * @ignore
 */
function createBasicCell(rowIndex, colIndex, nodeName) {
  return {
    nodeName: nodeName || 'TD',
    colspan: 1,
    rowspan: 1,
    content: BASIC_CELL_CONTENT,
    elementIndex: {
      rowIndex: rowIndex,
      colIndex: colIndex
    }
  };
}

/**
 * Find element row index.
 * @param {jQuery} $cell - cell jQuery element like td or th
 * @returns {number}
 * @ignore
 */
function findElementRowIndex($cell) {
  var $tr = $cell.closest('tr');
  var rowIndex = $tr.prevAll().length;

  if ($tr.parent()[0].nodeName === 'TBODY') {
    rowIndex += 1;
  }

  return rowIndex;
}

/**
 * Find element col index.
 * @param {jQuery} $cell - cell jQuery element like td or th
 * @returns {number}
 * @ignore
 */
function findElementColIndex($cell) {
  return $cell.closest('td, th').prevAll().length;
}

/**
 * Find indexes of base table data from mappin data.
 * @param {Array.<Array.<object>>} cellIndexData - cell index data
 * @param {jQuery} $cell - cell jQuery element like td or th
 * @returns {{rowIndex: number, cellIndex: number}}
 * @ignore
 */
function findCellIndex(cellIndexData, $cell) {
  var elementRowIndex = findElementRowIndex($cell);
  var elementColIndex = findElementColIndex($cell);

  return cellIndexData[elementRowIndex][elementColIndex];
}

/**
 * Find last index of col merged cells.
 * @param {Array.<Array.<object>>} tableData - tableData data
 * @param {number} rowIndex - row index of base data
 * @param {number} colIndex - column index of tabld data
 * @returns {number}
 * @ignore
 */
function findRowMergedLastIndex(tableData, rowIndex, colIndex) {
  var cellData = tableData[rowIndex][colIndex];
  var foundRowIndex = rowIndex;

  if (cellData.rowspan > 1) {
    foundRowIndex += cellData.rowspan - 1;
  }

  return foundRowIndex;
}

/**
 * Find last index of col merged cells.
 * @param {Array.<Array.<object>>} tableData - tableData data
 * @param {number} rowIndex - row index of base data
 * @param {number} colIndex - column index of tabld data
 * @returns {number}
 * @ignore
 */
function findColMergedLastIndex(tableData, rowIndex, colIndex) {
  var cellData = tableData[rowIndex][colIndex];
  var foundColIndex = colIndex;

  if (cellData.colspan > 1) {
    foundColIndex += cellData.colspan - 1;
  }

  return foundColIndex;
}

/**
 * Find cell element index.
 * @param {Array.<Array.<object>>} tableData - tableData data
 * @param {number} rowIndex - row index of base data
 * @param {number} colIndex - col index of base data
 * @returns {{rowIndex: number, colIndex: number}}
 * @ignore
 */
function findElementIndex(tableData, rowIndex, colIndex) {
  var cellData = tableData[rowIndex][colIndex];

  rowIndex = _tuiCodeSnippet2.default.isExisty(cellData.rowMergeWith) ? cellData.rowMergeWith : rowIndex;
  colIndex = _tuiCodeSnippet2.default.isExisty(cellData.colMergeWith) ? cellData.colMergeWith : colIndex;

  return tableData[rowIndex][colIndex].elementIndex;
}

/**
 * Stuff cells into incomplete row.
 * @param {Array.<Array.<object>>} tableData - table data
 * @param {number} limitIndex - limit index
 * @ignore
 */
function stuffCellsIntoIncompleteRow(tableData, limitIndex) {
  tableData.forEach(function (rowData, rowIndex) {
    var startIndex = rowData.length;
    var nodeName = rowData[0].nodeName;


    _tuiCodeSnippet2.default.range(startIndex, limitIndex).forEach(function (colIndex) {
      rowData.push(createBasicCell(rowIndex, colIndex, nodeName));
    });
  });
}

/**
 * Add tbody or thead of table data if need.
 * @param {Array.<Array.<object>>} tableData - table data
 * @returns {boolean}
 * @ignore
 */
function addTbodyOrTheadIfNeed(tableData) {
  var header = tableData[0];

  var cellCount = header.length;
  var added = true;

  if (!cellCount && tableData[1]) {
    _tuiCodeSnippet2.default.range(0, tableData[1].length).forEach(function (colIndex) {
      header.push(createBasicCell(0, colIndex, 'TH'));
    });
  } else if (tableData[0][0].nodeName !== 'TH') {
    var _ref2;

    var newHeader = _tuiCodeSnippet2.default.range(0, cellCount).map(function (colIndex) {
      return createBasicCell(0, colIndex, 'TH');
    });

    (_ref2 = []).concat.apply(_ref2, tableData).forEach(function (cellData) {
      if (cellData.elementIndex) {
        cellData.elementIndex.rowIndex += 1;
      }
    });

    tableData.unshift(newHeader);
  } else if (tableData.length === 1) {
    var newRow = _tuiCodeSnippet2.default.range(0, cellCount).map(function (colIndex) {
      return createBasicCell(1, colIndex, 'TD');
    });

    tableData.push(newRow);
  } else {
    added = false;
  }

  return added;
}

exports.default = {
  createTableData: createTableData,
  createCellIndexData: createCellIndexData,
  createRenderData: createRenderData,
  findElementRowIndex: findElementRowIndex,
  findElementColIndex: findElementColIndex,
  findCellIndex: findCellIndex,
  createBasicCell: createBasicCell,
  findRowMergedLastIndex: findRowMergedLastIndex,
  findColMergedLastIndex: findColMergedLastIndex,
  findElementIndex: findElementIndex,
  stuffCellsIntoIncompleteRow: stuffCellsIntoIncompleteRow,
  addTbodyOrTheadIfNeed: addTbodyOrTheadIfNeed
};

/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _jquery = __webpack_require__(1);

var _jquery2 = _interopRequireDefault(_jquery);

var _tableDataHandler = __webpack_require__(4);

var _tableDataHandler2 = _interopRequireDefault(_tableDataHandler);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Create cell html.
 * @param {object} cell - cell data of table base data
 * @returns {string}
 * @private
 */
/**
* @fileoverview Implements tableRenderer
* @author NHN Ent. FE Development Lab <dl_javascript@nhnent.com>
*/
function _createCellHtml(cell) {
  var attrs = cell.colspan > 1 ? ' colspan="' + cell.colspan + '"' : '';
  attrs += cell.rowspan > 1 ? ' rowspan="' + cell.rowspan + '"' : '';
  attrs += cell.align ? ' align="' + cell.align + '"' : '';

  return '<' + cell.nodeName + attrs + '>' + cell.content + '</' + cell.nodeName + '>';
}

/**
 * Create html for thead or tbody.
 * @param {Array.<Array.<object>>} trs - tr list
 * @param {string} wrapperNodeName - wrapper node name like THEAD, TBODY
 * @returns {string}
 * @private
 */
function _createTheadOrTbodyHtml(trs, wrapperNodeName) {
  var html = '';

  if (trs.length) {
    html = trs.map(function (tr) {
      var tdHtml = tr.map(_createCellHtml).join('');

      return '<tr>' + tdHtml + '</tr>';
    }).join('');
    html = '<' + wrapperNodeName + '>' + html + '</' + wrapperNodeName + '>';
  }

  return html;
}

/**
 * Create table html.
 * @param {Array.<Array.<object>>} renderData - table data for render
 * @returns {string}
 * @private
 */
function createTableHtml(renderData) {
  var thead = [renderData[0]];
  var tbody = renderData.slice(1);
  var theadHtml = _createTheadOrTbodyHtml(thead, 'THEAD');
  var tbodyHtml = _createTheadOrTbodyHtml(tbody, 'TBODY');
  var className = renderData.className ? ' class="' + renderData.className + '"' : '';

  return '<table' + className + '>' + (theadHtml + tbodyHtml) + '</renderData>';
}

/**
 * Replace table.
 * @param {jQuery} $table - table jQuery element
 * @param {Array.<Array.<object>>} tableData - table data
 * @returns {jQuery}
 * @ignore
 */
function replaceTable($table, tableData) {
  var cellIndexData = _tableDataHandler2.default.createCellIndexData(tableData);
  var renderData = _tableDataHandler2.default.createRenderData(tableData, cellIndexData);
  var $newTable = (0, _jquery2.default)(createTableHtml(renderData));

  $table.replaceWith($newTable);

  return $newTable;
}

/**
 * Focus to cell.
 * @param {squireext} sq - squire instance
 * @param {range} range - range object
 * @param {HTMLElement} targetCell - cell element for focus
 * @ignore
 */
function focusToCell(sq, range, targetCell) {
  range.selectNodeContents(targetCell);
  range.collapse(true);
  sq.setSelection(range);
}

exports.default = {
  createTableHtml: createTableHtml,
  replaceTable: replaceTable,
  focusToCell: focusToCell
};

/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _jquery = __webpack_require__(1);

var _jquery2 = _interopRequireDefault(_jquery);

var _tuiCodeSnippet = __webpack_require__(2);

var _tuiCodeSnippet2 = _interopRequireDefault(_tuiCodeSnippet);

var _tableDataHandler = __webpack_require__(4);

var _tableDataHandler2 = _interopRequireDefault(_tableDataHandler);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Find unmerged table range.
 * @param {Array.<Array.<object>>} tableData - table data
 * @param {jQuery} $start - start talbe cell jQuery element
 * @param {jQuery} $end - end table cell jQuery element
 * @returns {{
 *   start: {rowIndex: number, colIndex: number},
 *   end: {rowIndex: number, colIndex: number}
 * }}
 * @private
 */
function _findUnmergedRange(tableData, $start, $end) {
  var cellIndexData = _tableDataHandler2.default.createCellIndexData(tableData);
  var startCellIndex = _tableDataHandler2.default.findCellIndex(cellIndexData, $start);
  var endCellIndex = _tableDataHandler2.default.findCellIndex(cellIndexData, $end);
  var startRowIndex = void 0,
      endRowIndex = void 0,
      startColIndex = void 0,
      endColIndex = void 0;

  if (startCellIndex.rowIndex > endCellIndex.rowIndex) {
    startRowIndex = endCellIndex.rowIndex;
    endRowIndex = startCellIndex.rowIndex;
  } else {
    startRowIndex = startCellIndex.rowIndex;
    endRowIndex = endCellIndex.rowIndex;
  }

  if (startCellIndex.colIndex > endCellIndex.colIndex) {
    startColIndex = endCellIndex.colIndex;
    endColIndex = startCellIndex.colIndex;
  } else {
    startColIndex = startCellIndex.colIndex;
    endColIndex = endCellIndex.colIndex;
  }

  return {
    start: {
      rowIndex: startRowIndex,
      colIndex: startColIndex
    },
    end: {
      rowIndex: endRowIndex,
      colIndex: endColIndex
    }
  };
}

/**
 * Expand table range by row merge properties like rowspan, rowMergeWith.
 * @param {Array.<Array.<object>>} tableData - table data
 * @param {{
 *   start: {rowIndex: number, colIndex: number},
 *   end: {rowIndex: number, colIndex: number}
 * }} tableRange - table range
 * @param {string} rangeType - range type like start, end
 * @private
 */
/**
* @fileoverview Implements tableRangeHandler
* @author NHN Ent. FE Development Lab <dl_javascript@nhnent.com>
*/
function _expandRowMergedRange(tableData, tableRange, rangeType) {
  var rowIndex = tableRange[rangeType].rowIndex;

  var rowData = tableData[rowIndex];

  _tuiCodeSnippet2.default.range(tableRange.start.colIndex, tableRange.end.colIndex + 1).forEach(function (colIndex) {
    var cellData = rowData[colIndex];
    var rowMergeWith = cellData.rowMergeWith;

    var lastRowMergedIndex = -1;

    if (_tuiCodeSnippet2.default.isExisty(rowMergeWith)) {
      if (rowMergeWith < tableRange.start.rowIndex) {
        tableRange.start.rowIndex = rowMergeWith;
      }

      lastRowMergedIndex = rowMergeWith + tableData[rowMergeWith][colIndex].rowspan - 1;
    } else if (cellData.rowspan > 1) {
      lastRowMergedIndex = rowIndex + cellData.rowspan - 1;
    }

    if (lastRowMergedIndex > tableRange.end.rowIndex) {
      tableRange.end.rowIndex = lastRowMergedIndex;
    }
  });
}

/**
 * Expand table range by column merge properties like colspan, colMergeWith.
 * @param {Array.<Array.<object>>} tableData - table data
 * @param {{
 *   start: {rowIndex: number, colIndex: number},
 *   end: {rowIndex: number, colIndex: number}
 * }} tableRange - table range
 * @param {number} rowIndex - row index
 * @param {number} colIndex - column index
 * @private
 */
function _expandColMergedRange(tableData, tableRange, rowIndex, colIndex) {
  var rowData = tableData[rowIndex];
  var cellData = rowData[colIndex];
  var colMergeWith = cellData.colMergeWith;

  var lastColMergedIndex = -1;

  if (_tuiCodeSnippet2.default.isExisty(colMergeWith)) {
    if (colMergeWith < tableRange.start.colIndex) {
      tableRange.start.colIndex = colMergeWith;
    }

    lastColMergedIndex = colMergeWith + rowData[colMergeWith].colspan - 1;
  } else if (cellData.colspan > 1) {
    lastColMergedIndex = colIndex + cellData.colspan - 1;
  }

  if (lastColMergedIndex > tableRange.end.colIndex) {
    tableRange.end.colIndex = lastColMergedIndex;
  }
}

/**
 * Expand table range by merge properties like colspan, rowspan.
 * @param {Array.<Array.<object>>} tableData - table data
 * @param {{
 *   start: {rowIndex: number, colIndex: number},
 *   end: {rowIndex: number, colIndex: number}
 * }} tableRange - table range
 * @returns {{
 *   start: {rowIndex: number, colIndex: number},
 *   end: {rowIndex: number, colIndex: number}
 * }}
 * @private
 */
function _expandMergedRange(tableData, tableRange) {
  var rangeStr = '';

  while (rangeStr !== JSON.stringify(tableRange)) {
    rangeStr = JSON.stringify(tableRange);

    _expandRowMergedRange(tableData, tableRange, 'start');
    _expandRowMergedRange(tableData, tableRange, 'end');

    _tuiCodeSnippet2.default.range(tableRange.start.rowIndex, tableRange.end.rowIndex + 1).forEach(function (rowIndex) {
      _expandColMergedRange(tableData, tableRange, rowIndex, tableRange.start.colIndex);
      _expandColMergedRange(tableData, tableRange, rowIndex, tableRange.end.colIndex);
    });
  }

  return tableRange;
}

/**
 * Find table range for selection.
 * @param {Array.<Array.<object>>} tableData - table data
 * @param {jQuery} $start - start jQuery element
 * @param {jQuery} $end - end jQuery element
 * @returns {{
 *   start: {rowIndex: number, colIndex: number},
 *   end: {rowIndex: number, colIndex: number}
 * }}
 * @ignore
 */
function findSelectionRange(tableData, $start, $end) {
  var unmergedRange = _findUnmergedRange(tableData, $start, $end);

  return _expandMergedRange(tableData, unmergedRange);
}

/**
 * Get table selection range.
 * @param {Array.<Array.<object>>} tableData - table data
 * @param {jQuery} $selectedCells - selected cells jQuery elements
 * @param {jQuery} $startContainer - start container jQuery element of text range
 * @returns {{
 *   start: {rowIndex: number, colIndex: number},
 *   end: {rowIndex: number, colIndex: number}
 *}}
 * @ignore
 */
function getTableSelectionRange(tableData, $selectedCells, $startContainer) {
  var cellIndexData = _tableDataHandler2.default.createCellIndexData(tableData);
  var tableRange = {};

  if ($selectedCells.length) {
    var startRange = _tableDataHandler2.default.findCellIndex(cellIndexData, $selectedCells.first());
    var endRange = _tuiCodeSnippet2.default.extend({}, startRange);

    $selectedCells.each(function (index, cell) {
      var cellIndex = _tableDataHandler2.default.findCellIndex(cellIndexData, (0, _jquery2.default)(cell));
      var cellData = tableData[cellIndex.rowIndex][cellIndex.colIndex];
      var lastRowMergedIndex = cellIndex.rowIndex + cellData.rowspan - 1;
      var lastColMergedIndex = cellIndex.colIndex + cellData.colspan - 1;

      endRange.rowIndex = Math.max(endRange.rowIndex, lastRowMergedIndex);
      endRange.colIndex = Math.max(endRange.colIndex, lastColMergedIndex);
    });

    tableRange.start = startRange;
    tableRange.end = endRange;
  } else {
    var cellIndex = _tableDataHandler2.default.findCellIndex(cellIndexData, $startContainer);

    tableRange.start = cellIndex;
    tableRange.end = _tuiCodeSnippet2.default.extend({}, cellIndex);
  }

  return tableRange;
}

exports.default = {
  findSelectionRange: findSelectionRange,
  getTableSelectionRange: getTableSelectionRange
};

/***/ }),
/* 7 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// a duplex stream is just a stream that is both readable and writable.
// Since JS doesn't have multiple prototypal inheritance, this class
// prototypally inherits from Readable, and then parasitically from
// Writable.



/*<replacement>*/

var processNextTick = __webpack_require__(12);
/*</replacement>*/

/*<replacement>*/
var objectKeys = Object.keys || function (obj) {
  var keys = [];
  for (var key in obj) {
    keys.push(key);
  }return keys;
};
/*</replacement>*/

module.exports = Duplex;

/*<replacement>*/
var util = __webpack_require__(10);
util.inherits = __webpack_require__(9);
/*</replacement>*/

var Readable = __webpack_require__(33);
var Writable = __webpack_require__(20);

util.inherits(Duplex, Readable);

var keys = objectKeys(Writable.prototype);
for (var v = 0; v < keys.length; v++) {
  var method = keys[v];
  if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];
}

function Duplex(options) {
  if (!(this instanceof Duplex)) return new Duplex(options);

  Readable.call(this, options);
  Writable.call(this, options);

  if (options && options.readable === false) this.readable = false;

  if (options && options.writable === false) this.writable = false;

  this.allowHalfOpen = true;
  if (options && options.allowHalfOpen === false) this.allowHalfOpen = false;

  this.once('end', onend);
}

// the no-half-open enforcer
function onend() {
  // if we allow half-open state, or if the writable side ended,
  // then we're ok.
  if (this.allowHalfOpen || this._writableState.ended) return;

  // no more data can be written.
  // But allow more writes to happen in this tick.
  processNextTick(onEndNT, this);
}

function onEndNT(self) {
  self.end();
}

Object.defineProperty(Duplex.prototype, 'destroyed', {
  get: function () {
    if (this._readableState === undefined || this._writableState === undefined) {
      return false;
    }
    return this._readableState.destroyed && this._writableState.destroyed;
  },
  set: function (value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (this._readableState === undefined || this._writableState === undefined) {
      return;
    }

    // backward compatibility, the user is explicitly
    // managing destroyed
    this._readableState.destroyed = value;
    this._writableState.destroyed = value;
  }
});

Duplex.prototype._destroy = function (err, cb) {
  this.push(null);
  this.end();

  processNextTick(cb, err);
};

function forEach(xs, f) {
  for (var i = 0, l = xs.length; i < l; i++) {
    f(xs[i], i);
  }
}

/***/ }),
/* 8 */
/***/ (function(module, exports) {

var g;

// This works in non-strict mode
g = (function() {
	return this;
})();

try {
	// This works if eval is allowed (see CSP)
	g = g || Function("return this")() || (1,eval)("this");
} catch(e) {
	// This works if the window reference is available
	if(typeof window === "object")
		g = window;
}

// g can still be undefined, but nothing to do about it...
// We return undefined, instead of nothing here, so it's
// easier to handle this case. if(!global) { ...}

module.exports = g;


/***/ }),
/* 9 */
/***/ (function(module, exports) {

if (typeof Object.create === 'function') {
  // implementation from standard node.js 'util' module
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    ctor.prototype = Object.create(superCtor.prototype, {
      constructor: {
        value: ctor,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
  };
} else {
  // old school shim for old browsers
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    var TempCtor = function () {}
    TempCtor.prototype = superCtor.prototype
    ctor.prototype = new TempCtor()
    ctor.prototype.constructor = ctor
  }
}


/***/ }),
/* 10 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(Buffer) {// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// NOTE: These type checking functions intentionally don't use `instanceof`
// because it is fragile and can be easily faked with `Object.create()`.

function isArray(arg) {
  if (Array.isArray) {
    return Array.isArray(arg);
  }
  return objectToString(arg) === '[object Array]';
}
exports.isArray = isArray;

function isBoolean(arg) {
  return typeof arg === 'boolean';
}
exports.isBoolean = isBoolean;

function isNull(arg) {
  return arg === null;
}
exports.isNull = isNull;

function isNullOrUndefined(arg) {
  return arg == null;
}
exports.isNullOrUndefined = isNullOrUndefined;

function isNumber(arg) {
  return typeof arg === 'number';
}
exports.isNumber = isNumber;

function isString(arg) {
  return typeof arg === 'string';
}
exports.isString = isString;

function isSymbol(arg) {
  return typeof arg === 'symbol';
}
exports.isSymbol = isSymbol;

function isUndefined(arg) {
  return arg === void 0;
}
exports.isUndefined = isUndefined;

function isRegExp(re) {
  return objectToString(re) === '[object RegExp]';
}
exports.isRegExp = isRegExp;

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}
exports.isObject = isObject;

function isDate(d) {
  return objectToString(d) === '[object Date]';
}
exports.isDate = isDate;

function isError(e) {
  return (objectToString(e) === '[object Error]' || e instanceof Error);
}
exports.isError = isError;

function isFunction(arg) {
  return typeof arg === 'function';
}
exports.isFunction = isFunction;

function isPrimitive(arg) {
  return arg === null ||
         typeof arg === 'boolean' ||
         typeof arg === 'number' ||
         typeof arg === 'string' ||
         typeof arg === 'symbol' ||  // ES6 symbol
         typeof arg === 'undefined';
}
exports.isPrimitive = isPrimitive;

exports.isBuffer = Buffer.isBuffer;

function objectToString(o) {
  return Object.prototype.toString.call(o);
}

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(36).Buffer))

/***/ }),
/* 11 */
/***/ (function(module, exports) {

// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) { return [] }

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };


/***/ }),
/* 12 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {

if (!process.version ||
    process.version.indexOf('v0.') === 0 ||
    process.version.indexOf('v1.') === 0 && process.version.indexOf('v1.8.') !== 0) {
  module.exports = nextTick;
} else {
  module.exports = process.nextTick;
}

function nextTick(fn, arg1, arg2, arg3) {
  if (typeof fn !== 'function') {
    throw new TypeError('"callback" argument must be a function');
  }
  var len = arguments.length;
  var args, i;
  switch (len) {
  case 0:
  case 1:
    return process.nextTick(fn);
  case 2:
    return process.nextTick(function afterTickOne() {
      fn.call(null, arg1);
    });
  case 3:
    return process.nextTick(function afterTickTwo() {
      fn.call(null, arg1, arg2);
    });
  case 4:
    return process.nextTick(function afterTickThree() {
      fn.call(null, arg1, arg2, arg3);
    });
  default:
    args = new Array(len - 1);
    i = 0;
    while (i < args.length) {
      args[i++] = arguments[i];
    }
    return process.nextTick(function afterTick() {
      fn.apply(null, args);
    });
  }
}

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(11)))

/***/ }),
/* 13 */
/***/ (function(module, exports, __webpack_require__) {

/* eslint-disable node/no-deprecated-api */
var buffer = __webpack_require__(36)
var Buffer = buffer.Buffer

// alternative to using Object.keys for old browsers
function copyProps (src, dst) {
  for (var key in src) {
    dst[key] = src[key]
  }
}
if (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {
  module.exports = buffer
} else {
  // Copy properties from require('buffer')
  copyProps(buffer, exports)
  exports.Buffer = SafeBuffer
}

function SafeBuffer (arg, encodingOrOffset, length) {
  return Buffer(arg, encodingOrOffset, length)
}

// Copy static methods from Buffer
copyProps(Buffer, SafeBuffer)

SafeBuffer.from = function (arg, encodingOrOffset, length) {
  if (typeof arg === 'number') {
    throw new TypeError('Argument must not be a number')
  }
  return Buffer(arg, encodingOrOffset, length)
}

SafeBuffer.alloc = function (size, fill, encoding) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  var buf = Buffer(size)
  if (fill !== undefined) {
    if (typeof encoding === 'string') {
      buf.fill(fill, encoding)
    } else {
      buf.fill(fill)
    }
  } else {
    buf.fill(0)
  }
  return buf
}

SafeBuffer.allocUnsafe = function (size) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  return Buffer(size)
}

SafeBuffer.allocUnsafeSlow = function (size) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  return buffer.SlowBuffer(size)
}


/***/ }),
/* 14 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";



var TYPED_OK =  (typeof Uint8Array !== 'undefined') &&
                (typeof Uint16Array !== 'undefined') &&
                (typeof Int32Array !== 'undefined');


exports.assign = function (obj /*from1, from2, from3, ...*/) {
  var sources = Array.prototype.slice.call(arguments, 1);
  while (sources.length) {
    var source = sources.shift();
    if (!source) { continue; }

    if (typeof source !== 'object') {
      throw new TypeError(source + 'must be non-object');
    }

    for (var p in source) {
      if (source.hasOwnProperty(p)) {
        obj[p] = source[p];
      }
    }
  }

  return obj;
};


// reduce buffer size, avoiding mem copy
exports.shrinkBuf = function (buf, size) {
  if (buf.length === size) { return buf; }
  if (buf.subarray) { return buf.subarray(0, size); }
  buf.length = size;
  return buf;
};


var fnTyped = {
  arraySet: function (dest, src, src_offs, len, dest_offs) {
    if (src.subarray && dest.subarray) {
      dest.set(src.subarray(src_offs, src_offs + len), dest_offs);
      return;
    }
    // Fallback to ordinary array
    for (var i = 0; i < len; i++) {
      dest[dest_offs + i] = src[src_offs + i];
    }
  },
  // Join array of chunks to single array.
  flattenChunks: function (chunks) {
    var i, l, len, pos, chunk, result;

    // calculate data length
    len = 0;
    for (i = 0, l = chunks.length; i < l; i++) {
      len += chunks[i].length;
    }

    // join chunks
    result = new Uint8Array(len);
    pos = 0;
    for (i = 0, l = chunks.length; i < l; i++) {
      chunk = chunks[i];
      result.set(chunk, pos);
      pos += chunk.length;
    }

    return result;
  }
};

var fnUntyped = {
  arraySet: function (dest, src, src_offs, len, dest_offs) {
    for (var i = 0; i < len; i++) {
      dest[dest_offs + i] = src[src_offs + i];
    }
  },
  // Join array of chunks to single array.
  flattenChunks: function (chunks) {
    return [].concat.apply([], chunks);
  }
};


// Enable/Disable typed arrays use, for testing
//
exports.setTyped = function (on) {
  if (on) {
    exports.Buf8  = Uint8Array;
    exports.Buf16 = Uint16Array;
    exports.Buf32 = Int32Array;
    exports.assign(exports, fnTyped);
  } else {
    exports.Buf8  = Array;
    exports.Buf16 = Array;
    exports.Buf32 = Array;
    exports.assign(exports, fnUntyped);
  }
};

exports.setTyped(TYPED_OK);


/***/ }),
/* 15 */
/***/ (function(module, exports) {

module.exports=/[!-#%-\*,-/:;\?@\[-\]_\{\}\xA1\xA7\xAB\xB6\xB7\xBB\xBF\u037E\u0387\u055A-\u055F\u0589\u058A\u05BE\u05C0\u05C3\u05C6\u05F3\u05F4\u0609\u060A\u060C\u060D\u061B\u061E\u061F\u066A-\u066D\u06D4\u0700-\u070D\u07F7-\u07F9\u0830-\u083E\u085E\u0964\u0965\u0970\u0AF0\u0DF4\u0E4F\u0E5A\u0E5B\u0F04-\u0F12\u0F14\u0F3A-\u0F3D\u0F85\u0FD0-\u0FD4\u0FD9\u0FDA\u104A-\u104F\u10FB\u1360-\u1368\u1400\u166D\u166E\u169B\u169C\u16EB-\u16ED\u1735\u1736\u17D4-\u17D6\u17D8-\u17DA\u1800-\u180A\u1944\u1945\u1A1E\u1A1F\u1AA0-\u1AA6\u1AA8-\u1AAD\u1B5A-\u1B60\u1BFC-\u1BFF\u1C3B-\u1C3F\u1C7E\u1C7F\u1CC0-\u1CC7\u1CD3\u2010-\u2027\u2030-\u2043\u2045-\u2051\u2053-\u205E\u207D\u207E\u208D\u208E\u2308-\u230B\u2329\u232A\u2768-\u2775\u27C5\u27C6\u27E6-\u27EF\u2983-\u2998\u29D8-\u29DB\u29FC\u29FD\u2CF9-\u2CFC\u2CFE\u2CFF\u2D70\u2E00-\u2E2E\u2E30-\u2E44\u3001-\u3003\u3008-\u3011\u3014-\u301F\u3030\u303D\u30A0\u30FB\uA4FE\uA4FF\uA60D-\uA60F\uA673\uA67E\uA6F2-\uA6F7\uA874-\uA877\uA8CE\uA8CF\uA8F8-\uA8FA\uA8FC\uA92E\uA92F\uA95F\uA9C1-\uA9CD\uA9DE\uA9DF\uAA5C-\uAA5F\uAADE\uAADF\uAAF0\uAAF1\uABEB\uFD3E\uFD3F\uFE10-\uFE19\uFE30-\uFE52\uFE54-\uFE61\uFE63\uFE68\uFE6A\uFE6B\uFF01-\uFF03\uFF05-\uFF0A\uFF0C-\uFF0F\uFF1A\uFF1B\uFF1F\uFF20\uFF3B-\uFF3D\uFF3F\uFF5B\uFF5D\uFF5F-\uFF65]|\uD800[\uDD00-\uDD02\uDF9F\uDFD0]|\uD801\uDD6F|\uD802[\uDC57\uDD1F\uDD3F\uDE50-\uDE58\uDE7F\uDEF0-\uDEF6\uDF39-\uDF3F\uDF99-\uDF9C]|\uD804[\uDC47-\uDC4D\uDCBB\uDCBC\uDCBE-\uDCC1\uDD40-\uDD43\uDD74\uDD75\uDDC5-\uDDC9\uDDCD\uDDDB\uDDDD-\uDDDF\uDE38-\uDE3D\uDEA9]|\uD805[\uDC4B-\uDC4F\uDC5B\uDC5D\uDCC6\uDDC1-\uDDD7\uDE41-\uDE43\uDE60-\uDE6C\uDF3C-\uDF3E]|\uD807[\uDC41-\uDC45\uDC70\uDC71]|\uD809[\uDC70-\uDC74]|\uD81A[\uDE6E\uDE6F\uDEF5\uDF37-\uDF3B\uDF44]|\uD82F\uDC9F|\uD836[\uDE87-\uDE8B]|\uD83A[\uDD5E\uDD5F]/

/***/ }),
/* 16 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * class Ruler
 *
 * Helper class, used by [[MarkdownIt#core]], [[MarkdownIt#block]] and
 * [[MarkdownIt#inline]] to manage sequences of functions (rules):
 *
 * - keep rules in defined order
 * - assign the name to each rule
 * - enable/disable rules
 * - add/replace rules
 * - allow assign rules to additional named chains (in the same)
 * - cacheing lists of active rules
 *
 * You will not need use this class directly until write plugins. For simple
 * rules control use [[MarkdownIt.disable]], [[MarkdownIt.enable]] and
 * [[MarkdownIt.use]].
 **/



/**
 * new Ruler()
 **/
function Ruler() {
  // List of added rules. Each element is:
  //
  // {
  //   name: XXX,
  //   enabled: Boolean,
  //   fn: Function(),
  //   alt: [ name2, name3 ]
  // }
  //
  this.__rules__ = [];

  // Cached rule chains.
  //
  // First level - chain name, '' for default.
  // Second level - diginal anchor for fast filtering by charcodes.
  //
  this.__cache__ = null;
}

////////////////////////////////////////////////////////////////////////////////
// Helper methods, should not be used directly


// Find rule index by name
//
Ruler.prototype.__find__ = function (name) {
  for (var i = 0; i < this.__rules__.length; i++) {
    if (this.__rules__[i].name === name) {
      return i;
    }
  }
  return -1;
};


// Build rules lookup cache
//
Ruler.prototype.__compile__ = function () {
  var self = this;
  var chains = [ '' ];

  // collect unique names
  self.__rules__.forEach(function (rule) {
    if (!rule.enabled) { return; }

    rule.alt.forEach(function (altName) {
      if (chains.indexOf(altName) < 0) {
        chains.push(altName);
      }
    });
  });

  self.__cache__ = {};

  chains.forEach(function (chain) {
    self.__cache__[chain] = [];
    self.__rules__.forEach(function (rule) {
      if (!rule.enabled) { return; }

      if (chain && rule.alt.indexOf(chain) < 0) { return; }

      self.__cache__[chain].push(rule.fn);
    });
  });
};


/**
 * Ruler.at(name, fn [, options])
 * - name (String): rule name to replace.
 * - fn (Function): new rule function.
 * - options (Object): new rule options (not mandatory).
 *
 * Replace rule by name with new function & options. Throws error if name not
 * found.
 *
 * ##### Options:
 *
 * - __alt__ - array with names of "alternate" chains.
 *
 * ##### Example
 *
 * Replace existing typorgapher replacement rule with new one:
 *
 * ```javascript
 * var md = require('markdown-it')();
 *
 * md.core.ruler.at('replacements', function replace(state) {
 *   //...
 * });
 * ```
 **/
Ruler.prototype.at = function (name, fn, options) {
  var index = this.__find__(name);
  var opt = options || {};

  if (index === -1) { throw new Error('Parser rule not found: ' + name); }

  this.__rules__[index].fn = fn;
  this.__rules__[index].alt = opt.alt || [];
  this.__cache__ = null;
};


/**
 * Ruler.before(beforeName, ruleName, fn [, options])
 * - beforeName (String): new rule will be added before this one.
 * - ruleName (String): name of added rule.
 * - fn (Function): rule function.
 * - options (Object): rule options (not mandatory).
 *
 * Add new rule to chain before one with given name. See also
 * [[Ruler.after]], [[Ruler.push]].
 *
 * ##### Options:
 *
 * - __alt__ - array with names of "alternate" chains.
 *
 * ##### Example
 *
 * ```javascript
 * var md = require('markdown-it')();
 *
 * md.block.ruler.before('paragraph', 'my_rule', function replace(state) {
 *   //...
 * });
 * ```
 **/
Ruler.prototype.before = function (beforeName, ruleName, fn, options) {
  var index = this.__find__(beforeName);
  var opt = options || {};

  if (index === -1) { throw new Error('Parser rule not found: ' + beforeName); }

  this.__rules__.splice(index, 0, {
    name: ruleName,
    enabled: true,
    fn: fn,
    alt: opt.alt || []
  });

  this.__cache__ = null;
};


/**
 * Ruler.after(afterName, ruleName, fn [, options])
 * - afterName (String): new rule will be added after this one.
 * - ruleName (String): name of added rule.
 * - fn (Function): rule function.
 * - options (Object): rule options (not mandatory).
 *
 * Add new rule to chain after one with given name. See also
 * [[Ruler.before]], [[Ruler.push]].
 *
 * ##### Options:
 *
 * - __alt__ - array with names of "alternate" chains.
 *
 * ##### Example
 *
 * ```javascript
 * var md = require('markdown-it')();
 *
 * md.inline.ruler.after('text', 'my_rule', function replace(state) {
 *   //...
 * });
 * ```
 **/
Ruler.prototype.after = function (afterName, ruleName, fn, options) {
  var index = this.__find__(afterName);
  var opt = options || {};

  if (index === -1) { throw new Error('Parser rule not found: ' + afterName); }

  this.__rules__.splice(index + 1, 0, {
    name: ruleName,
    enabled: true,
    fn: fn,
    alt: opt.alt || []
  });

  this.__cache__ = null;
};

/**
 * Ruler.push(ruleName, fn [, options])
 * - ruleName (String): name of added rule.
 * - fn (Function): rule function.
 * - options (Object): rule options (not mandatory).
 *
 * Push new rule to the end of chain. See also
 * [[Ruler.before]], [[Ruler.after]].
 *
 * ##### Options:
 *
 * - __alt__ - array with names of "alternate" chains.
 *
 * ##### Example
 *
 * ```javascript
 * var md = require('markdown-it')();
 *
 * md.core.ruler.push('my_rule', function replace(state) {
 *   //...
 * });
 * ```
 **/
Ruler.prototype.push = function (ruleName, fn, options) {
  var opt = options || {};

  this.__rules__.push({
    name: ruleName,
    enabled: true,
    fn: fn,
    alt: opt.alt || []
  });

  this.__cache__ = null;
};


/**
 * Ruler.enable(list [, ignoreInvalid]) -> Array
 * - list (String|Array): list of rule names to enable.
 * - ignoreInvalid (Boolean): set `true` to ignore errors when rule not found.
 *
 * Enable rules with given names. If any rule name not found - throw Error.
 * Errors can be disabled by second param.
 *
 * Returns list of found rule names (if no exception happened).
 *
 * See also [[Ruler.disable]], [[Ruler.enableOnly]].
 **/
Ruler.prototype.enable = function (list, ignoreInvalid) {
  if (!Array.isArray(list)) { list = [ list ]; }

  var result = [];

  // Search by name and enable
  list.forEach(function (name) {
    var idx = this.__find__(name);

    if (idx < 0) {
      if (ignoreInvalid) { return; }
      throw new Error('Rules manager: invalid rule name ' + name);
    }
    this.__rules__[idx].enabled = true;
    result.push(name);
  }, this);

  this.__cache__ = null;
  return result;
};


/**
 * Ruler.enableOnly(list [, ignoreInvalid])
 * - list (String|Array): list of rule names to enable (whitelist).
 * - ignoreInvalid (Boolean): set `true` to ignore errors when rule not found.
 *
 * Enable rules with given names, and disable everything else. If any rule name
 * not found - throw Error. Errors can be disabled by second param.
 *
 * See also [[Ruler.disable]], [[Ruler.enable]].
 **/
Ruler.prototype.enableOnly = function (list, ignoreInvalid) {
  if (!Array.isArray(list)) { list = [ list ]; }

  this.__rules__.forEach(function (rule) { rule.enabled = false; });

  this.enable(list, ignoreInvalid);
};


/**
 * Ruler.disable(list [, ignoreInvalid]) -> Array
 * - list (String|Array): list of rule names to disable.
 * - ignoreInvalid (Boolean): set `true` to ignore errors when rule not found.
 *
 * Disable rules with given names. If any rule name not found - throw Error.
 * Errors can be disabled by second param.
 *
 * Returns list of found rule names (if no exception happened).
 *
 * See also [[Ruler.enable]], [[Ruler.enableOnly]].
 **/
Ruler.prototype.disable = function (list, ignoreInvalid) {
  if (!Array.isArray(list)) { list = [ list ]; }

  var result = [];

  // Search by name and disable
  list.forEach(function (name) {
    var idx = this.__find__(name);

    if (idx < 0) {
      if (ignoreInvalid) { return; }
      throw new Error('Rules manager: invalid rule name ' + name);
    }
    this.__rules__[idx].enabled = false;
    result.push(name);
  }, this);

  this.__cache__ = null;
  return result;
};


/**
 * Ruler.getRules(chainName) -> Array
 *
 * Return array of active functions (rules) for given chain name. It analyzes
 * rules configuration, compiles caches if not exists and returns result.
 *
 * Default chain name is `''` (empty string). It can't be skipped. That's
 * done intentionally, to keep signature monomorphic for high speed.
 **/
Ruler.prototype.getRules = function (chainName) {
  if (this.__cache__ === null) {
    this.__compile__();
  }

  // Chain can be empty, if rules disabled. But we still have to return Array.
  return this.__cache__[chainName] || [];
};

module.exports = Ruler;


/***/ }),
/* 17 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Token class




/**
 * class Token
 **/

/**
 * new Token(type, tag, nesting)
 *
 * Create new token and fill passed properties.
 **/
function Token(type, tag, nesting) {
  /**
   * Token#type -> String
   *
   * Type of the token (string, e.g. "paragraph_open")
   **/
  this.type     = type;

  /**
   * Token#tag -> String
   *
   * html tag name, e.g. "p"
   **/
  this.tag      = tag;

  /**
   * Token#attrs -> Array
   *
   * Html attributes. Format: `[ [ name1, value1 ], [ name2, value2 ] ]`
   **/
  this.attrs    = null;

  /**
   * Token#map -> Array
   *
   * Source map info. Format: `[ line_begin, line_end ]`
   **/
  this.map      = null;

  /**
   * Token#nesting -> Number
   *
   * Level change (number in {-1, 0, 1} set), where:
   *
   * -  `1` means the tag is opening
   * -  `0` means the tag is self-closing
   * - `-1` means the tag is closing
   **/
  this.nesting  = nesting;

  /**
   * Token#level -> Number
   *
   * nesting level, the same as `state.level`
   **/
  this.level    = 0;

  /**
   * Token#children -> Array
   *
   * An array of child nodes (inline and img tokens)
   **/
  this.children = null;

  /**
   * Token#content -> String
   *
   * In a case of self-closing tag (code, html, fence, etc.),
   * it has contents of this tag.
   **/
  this.content  = '';

  /**
   * Token#markup -> String
   *
   * '*' or '_' for emphasis, fence string for fence, etc.
   **/
  this.markup   = '';

  /**
   * Token#info -> String
   *
   * fence infostring
   **/
  this.info     = '';

  /**
   * Token#meta -> Object
   *
   * A place for plugins to store an arbitrary data
   **/
  this.meta     = null;

  /**
   * Token#block -> Boolean
   *
   * True for block-level tokens, false for inline tokens.
   * Used in renderer to calculate line breaks
   **/
  this.block    = false;

  /**
   * Token#hidden -> Boolean
   *
   * If it's true, ignore this element when rendering. Used for tight lists
   * to hide paragraphs.
   **/
  this.hidden   = false;
}


/**
 * Token.attrIndex(name) -> Number
 *
 * Search attribute index by name.
 **/
Token.prototype.attrIndex = function attrIndex(name) {
  var attrs, i, len;

  if (!this.attrs) { return -1; }

  attrs = this.attrs;

  for (i = 0, len = attrs.length; i < len; i++) {
    if (attrs[i][0] === name) { return i; }
  }
  return -1;
};


/**
 * Token.attrPush(attrData)
 *
 * Add `[ name, value ]` attribute to list. Init attrs if necessary
 **/
Token.prototype.attrPush = function attrPush(attrData) {
  if (this.attrs) {
    this.attrs.push(attrData);
  } else {
    this.attrs = [ attrData ];
  }
};


/**
 * Token.attrSet(name, value)
 *
 * Set `name` attribute to `value`. Override old value if exists.
 **/
Token.prototype.attrSet = function attrSet(name, value) {
  var idx = this.attrIndex(name),
      attrData = [ name, value ];

  if (idx < 0) {
    this.attrPush(attrData);
  } else {
    this.attrs[idx] = attrData;
  }
};


/**
 * Token.attrGet(name)
 *
 * Get the value of attribute `name`, or null if it does not exist.
 **/
Token.prototype.attrGet = function attrGet(name) {
  var idx = this.attrIndex(name), value = null;
  if (idx >= 0) {
    value = this.attrs[idx][1];
  }
  return value;
};


/**
 * Token.attrJoin(name, value)
 *
 * Join value to existing attribute via space. Or create new attribute if not
 * exists. Useful to operate with token classes.
 **/
Token.prototype.attrJoin = function attrJoin(name, value) {
  var idx = this.attrIndex(name);

  if (idx < 0) {
    this.attrPush([ name, value ]);
  } else {
    this.attrs[idx][1] = this.attrs[idx][1] + ' ' + value;
  }
};


module.exports = Token;


/***/ }),
/* 18 */
/***/ (function(module, exports) {

// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

function EventEmitter() {
  this._events = this._events || {};
  this._maxListeners = this._maxListeners || undefined;
}
module.exports = EventEmitter;

// Backwards-compat with node 0.10.x
EventEmitter.EventEmitter = EventEmitter;

EventEmitter.prototype._events = undefined;
EventEmitter.prototype._maxListeners = undefined;

// By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.
EventEmitter.defaultMaxListeners = 10;

// Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.
EventEmitter.prototype.setMaxListeners = function(n) {
  if (!isNumber(n) || n < 0 || isNaN(n))
    throw TypeError('n must be a positive number');
  this._maxListeners = n;
  return this;
};

EventEmitter.prototype.emit = function(type) {
  var er, handler, len, args, i, listeners;

  if (!this._events)
    this._events = {};

  // If there is no 'error' event listener then throw.
  if (type === 'error') {
    if (!this._events.error ||
        (isObject(this._events.error) && !this._events.error.length)) {
      er = arguments[1];
      if (er instanceof Error) {
        throw er; // Unhandled 'error' event
      } else {
        // At least give some kind of context to the user
        var err = new Error('Uncaught, unspecified "error" event. (' + er + ')');
        err.context = er;
        throw err;
      }
    }
  }

  handler = this._events[type];

  if (isUndefined(handler))
    return false;

  if (isFunction(handler)) {
    switch (arguments.length) {
      // fast cases
      case 1:
        handler.call(this);
        break;
      case 2:
        handler.call(this, arguments[1]);
        break;
      case 3:
        handler.call(this, arguments[1], arguments[2]);
        break;
      // slower
      default:
        args = Array.prototype.slice.call(arguments, 1);
        handler.apply(this, args);
    }
  } else if (isObject(handler)) {
    args = Array.prototype.slice.call(arguments, 1);
    listeners = handler.slice();
    len = listeners.length;
    for (i = 0; i < len; i++)
      listeners[i].apply(this, args);
  }

  return true;
};

EventEmitter.prototype.addListener = function(type, listener) {
  var m;

  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  if (!this._events)
    this._events = {};

  // To avoid recursion in the case that type === "newListener"! Before
  // adding it to the listeners, first emit "newListener".
  if (this._events.newListener)
    this.emit('newListener', type,
              isFunction(listener.listener) ?
              listener.listener : listener);

  if (!this._events[type])
    // Optimize the case of one listener. Don't need the extra array object.
    this._events[type] = listener;
  else if (isObject(this._events[type]))
    // If we've already got an array, just append.
    this._events[type].push(listener);
  else
    // Adding the second element, need to change to array.
    this._events[type] = [this._events[type], listener];

  // Check for listener leak
  if (isObject(this._events[type]) && !this._events[type].warned) {
    if (!isUndefined(this._maxListeners)) {
      m = this._maxListeners;
    } else {
      m = EventEmitter.defaultMaxListeners;
    }

    if (m && m > 0 && this._events[type].length > m) {
      this._events[type].warned = true;
      console.error('(node) warning: possible EventEmitter memory ' +
                    'leak detected. %d listeners added. ' +
                    'Use emitter.setMaxListeners() to increase limit.',
                    this._events[type].length);
      if (typeof console.trace === 'function') {
        // not supported in IE 10
        console.trace();
      }
    }
  }

  return this;
};

EventEmitter.prototype.on = EventEmitter.prototype.addListener;

EventEmitter.prototype.once = function(type, listener) {
  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  var fired = false;

  function g() {
    this.removeListener(type, g);

    if (!fired) {
      fired = true;
      listener.apply(this, arguments);
    }
  }

  g.listener = listener;
  this.on(type, g);

  return this;
};

// emits a 'removeListener' event iff the listener was removed
EventEmitter.prototype.removeListener = function(type, listener) {
  var list, position, length, i;

  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  if (!this._events || !this._events[type])
    return this;

  list = this._events[type];
  length = list.length;
  position = -1;

  if (list === listener ||
      (isFunction(list.listener) && list.listener === listener)) {
    delete this._events[type];
    if (this._events.removeListener)
      this.emit('removeListener', type, listener);

  } else if (isObject(list)) {
    for (i = length; i-- > 0;) {
      if (list[i] === listener ||
          (list[i].listener && list[i].listener === listener)) {
        position = i;
        break;
      }
    }

    if (position < 0)
      return this;

    if (list.length === 1) {
      list.length = 0;
      delete this._events[type];
    } else {
      list.splice(position, 1);
    }

    if (this._events.removeListener)
      this.emit('removeListener', type, listener);
  }

  return this;
};

EventEmitter.prototype.removeAllListeners = function(type) {
  var key, listeners;

  if (!this._events)
    return this;

  // not listening for removeListener, no need to emit
  if (!this._events.removeListener) {
    if (arguments.length === 0)
      this._events = {};
    else if (this._events[type])
      delete this._events[type];
    return this;
  }

  // emit removeListener for all listeners on all events
  if (arguments.length === 0) {
    for (key in this._events) {
      if (key === 'removeListener') continue;
      this.removeAllListeners(key);
    }
    this.removeAllListeners('removeListener');
    this._events = {};
    return this;
  }

  listeners = this._events[type];

  if (isFunction(listeners)) {
    this.removeListener(type, listeners);
  } else if (listeners) {
    // LIFO order
    while (listeners.length)
      this.removeListener(type, listeners[listeners.length - 1]);
  }
  delete this._events[type];

  return this;
};

EventEmitter.prototype.listeners = function(type) {
  var ret;
  if (!this._events || !this._events[type])
    ret = [];
  else if (isFunction(this._events[type]))
    ret = [this._events[type]];
  else
    ret = this._events[type].slice();
  return ret;
};

EventEmitter.prototype.listenerCount = function(type) {
  if (this._events) {
    var evlistener = this._events[type];

    if (isFunction(evlistener))
      return 1;
    else if (evlistener)
      return evlistener.length;
  }
  return 0;
};

EventEmitter.listenerCount = function(emitter, type) {
  return emitter.listenerCount(type);
};

function isFunction(arg) {
  return typeof arg === 'function';
}

function isNumber(arg) {
  return typeof arg === 'number';
}

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}

function isUndefined(arg) {
  return arg === void 0;
}


/***/ }),
/* 19 */
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__(33);
exports.Stream = exports;
exports.Readable = exports;
exports.Writable = __webpack_require__(20);
exports.Duplex = __webpack_require__(7);
exports.Transform = __webpack_require__(39);
exports.PassThrough = __webpack_require__(305);


/***/ }),
/* 20 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process, setImmediate, global) {// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// A bit simpler than readable streams.
// Implement an async ._write(chunk, encoding, cb), and it'll handle all
// the drain event emission and buffering.



/*<replacement>*/

var processNextTick = __webpack_require__(12);
/*</replacement>*/

module.exports = Writable;

/* <replacement> */
function WriteReq(chunk, encoding, cb) {
  this.chunk = chunk;
  this.encoding = encoding;
  this.callback = cb;
  this.next = null;
}

// It seems a linked list but it is not
// there will be only 2 of these for each stream
function CorkedRequest(state) {
  var _this = this;

  this.next = null;
  this.entry = null;
  this.finish = function () {
    onCorkedFinish(_this, state);
  };
}
/* </replacement> */

/*<replacement>*/
var asyncWrite = !process.browser && ['v0.10', 'v0.9.'].indexOf(process.version.slice(0, 5)) > -1 ? setImmediate : processNextTick;
/*</replacement>*/

/*<replacement>*/
var Duplex;
/*</replacement>*/

Writable.WritableState = WritableState;

/*<replacement>*/
var util = __webpack_require__(10);
util.inherits = __webpack_require__(9);
/*</replacement>*/

/*<replacement>*/
var internalUtil = {
  deprecate: __webpack_require__(304)
};
/*</replacement>*/

/*<replacement>*/
var Stream = __webpack_require__(35);
/*</replacement>*/

/*<replacement>*/
var Buffer = __webpack_require__(13).Buffer;
var OurUint8Array = global.Uint8Array || function () {};
function _uint8ArrayToBuffer(chunk) {
  return Buffer.from(chunk);
}
function _isUint8Array(obj) {
  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
}
/*</replacement>*/

var destroyImpl = __webpack_require__(37);

util.inherits(Writable, Stream);

function nop() {}

function WritableState(options, stream) {
  Duplex = Duplex || __webpack_require__(7);

  options = options || {};

  // object stream flag to indicate whether or not this stream
  // contains buffers or objects.
  this.objectMode = !!options.objectMode;

  if (stream instanceof Duplex) this.objectMode = this.objectMode || !!options.writableObjectMode;

  // the point at which write() starts returning false
  // Note: 0 is a valid value, means that we always return false if
  // the entire buffer is not flushed immediately on write()
  var hwm = options.highWaterMark;
  var defaultHwm = this.objectMode ? 16 : 16 * 1024;
  this.highWaterMark = hwm || hwm === 0 ? hwm : defaultHwm;

  // cast to ints.
  this.highWaterMark = Math.floor(this.highWaterMark);

  // if _final has been called
  this.finalCalled = false;

  // drain event flag.
  this.needDrain = false;
  // at the start of calling end()
  this.ending = false;
  // when end() has been called, and returned
  this.ended = false;
  // when 'finish' is emitted
  this.finished = false;

  // has it been destroyed
  this.destroyed = false;

  // should we decode strings into buffers before passing to _write?
  // this is here so that some node-core streams can optimize string
  // handling at a lower level.
  var noDecode = options.decodeStrings === false;
  this.decodeStrings = !noDecode;

  // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.
  this.defaultEncoding = options.defaultEncoding || 'utf8';

  // not an actual buffer we keep track of, but a measurement
  // of how much we're waiting to get pushed to some underlying
  // socket or file.
  this.length = 0;

  // a flag to see when we're in the middle of a write.
  this.writing = false;

  // when true all writes will be buffered until .uncork() call
  this.corked = 0;

  // a flag to be able to tell if the onwrite cb is called immediately,
  // or on a later tick.  We set this to true at first, because any
  // actions that shouldn't happen until "later" should generally also
  // not happen before the first write call.
  this.sync = true;

  // a flag to know if we're processing previously buffered items, which
  // may call the _write() callback in the same tick, so that we don't
  // end up in an overlapped onwrite situation.
  this.bufferProcessing = false;

  // the callback that's passed to _write(chunk,cb)
  this.onwrite = function (er) {
    onwrite(stream, er);
  };

  // the callback that the user supplies to write(chunk,encoding,cb)
  this.writecb = null;

  // the amount that is being written when _write is called.
  this.writelen = 0;

  this.bufferedRequest = null;
  this.lastBufferedRequest = null;

  // number of pending user-supplied write callbacks
  // this must be 0 before 'finish' can be emitted
  this.pendingcb = 0;

  // emit prefinish if the only thing we're waiting for is _write cbs
  // This is relevant for synchronous Transform streams
  this.prefinished = false;

  // True if the error was already emitted and should not be thrown again
  this.errorEmitted = false;

  // count buffered requests
  this.bufferedRequestCount = 0;

  // allocate the first CorkedRequest, there is always
  // one allocated and free to use, and we maintain at most two
  this.corkedRequestsFree = new CorkedRequest(this);
}

WritableState.prototype.getBuffer = function getBuffer() {
  var current = this.bufferedRequest;
  var out = [];
  while (current) {
    out.push(current);
    current = current.next;
  }
  return out;
};

(function () {
  try {
    Object.defineProperty(WritableState.prototype, 'buffer', {
      get: internalUtil.deprecate(function () {
        return this.getBuffer();
      }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' + 'instead.', 'DEP0003')
    });
  } catch (_) {}
})();

// Test _writableState for inheritance to account for Duplex streams,
// whose prototype chain only points to Readable.
var realHasInstance;
if (typeof Symbol === 'function' && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === 'function') {
  realHasInstance = Function.prototype[Symbol.hasInstance];
  Object.defineProperty(Writable, Symbol.hasInstance, {
    value: function (object) {
      if (realHasInstance.call(this, object)) return true;

      return object && object._writableState instanceof WritableState;
    }
  });
} else {
  realHasInstance = function (object) {
    return object instanceof this;
  };
}

function Writable(options) {
  Duplex = Duplex || __webpack_require__(7);

  // Writable ctor is applied to Duplexes, too.
  // `realHasInstance` is necessary because using plain `instanceof`
  // would return false, as no `_writableState` property is attached.

  // Trying to use the custom `instanceof` for Writable here will also break the
  // Node.js LazyTransform implementation, which has a non-trivial getter for
  // `_writableState` that would lead to infinite recursion.
  if (!realHasInstance.call(Writable, this) && !(this instanceof Duplex)) {
    return new Writable(options);
  }

  this._writableState = new WritableState(options, this);

  // legacy.
  this.writable = true;

  if (options) {
    if (typeof options.write === 'function') this._write = options.write;

    if (typeof options.writev === 'function') this._writev = options.writev;

    if (typeof options.destroy === 'function') this._destroy = options.destroy;

    if (typeof options.final === 'function') this._final = options.final;
  }

  Stream.call(this);
}

// Otherwise people can pipe Writable streams, which is just wrong.
Writable.prototype.pipe = function () {
  this.emit('error', new Error('Cannot pipe, not readable'));
};

function writeAfterEnd(stream, cb) {
  var er = new Error('write after end');
  // TODO: defer error events consistently everywhere, not just the cb
  stream.emit('error', er);
  processNextTick(cb, er);
}

// Checks that a user-supplied chunk is valid, especially for the particular
// mode the stream is in. Currently this means that `null` is never accepted
// and undefined/non-string values are only allowed in object mode.
function validChunk(stream, state, chunk, cb) {
  var valid = true;
  var er = false;

  if (chunk === null) {
    er = new TypeError('May not write null values to stream');
  } else if (typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
    er = new TypeError('Invalid non-string/buffer chunk');
  }
  if (er) {
    stream.emit('error', er);
    processNextTick(cb, er);
    valid = false;
  }
  return valid;
}

Writable.prototype.write = function (chunk, encoding, cb) {
  var state = this._writableState;
  var ret = false;
  var isBuf = _isUint8Array(chunk) && !state.objectMode;

  if (isBuf && !Buffer.isBuffer(chunk)) {
    chunk = _uint8ArrayToBuffer(chunk);
  }

  if (typeof encoding === 'function') {
    cb = encoding;
    encoding = null;
  }

  if (isBuf) encoding = 'buffer';else if (!encoding) encoding = state.defaultEncoding;

  if (typeof cb !== 'function') cb = nop;

  if (state.ended) writeAfterEnd(this, cb);else if (isBuf || validChunk(this, state, chunk, cb)) {
    state.pendingcb++;
    ret = writeOrBuffer(this, state, isBuf, chunk, encoding, cb);
  }

  return ret;
};

Writable.prototype.cork = function () {
  var state = this._writableState;

  state.corked++;
};

Writable.prototype.uncork = function () {
  var state = this._writableState;

  if (state.corked) {
    state.corked--;

    if (!state.writing && !state.corked && !state.finished && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);
  }
};

Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
  // node::ParseEncoding() requires lower case.
  if (typeof encoding === 'string') encoding = encoding.toLowerCase();
  if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le', 'raw'].indexOf((encoding + '').toLowerCase()) > -1)) throw new TypeError('Unknown encoding: ' + encoding);
  this._writableState.defaultEncoding = encoding;
  return this;
};

function decodeChunk(state, chunk, encoding) {
  if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {
    chunk = Buffer.from(chunk, encoding);
  }
  return chunk;
}

// if we're already writing something, then just put this
// in the queue, and wait our turn.  Otherwise, call _write
// If we return false, then we need a drain event, so set that flag.
function writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {
  if (!isBuf) {
    var newChunk = decodeChunk(state, chunk, encoding);
    if (chunk !== newChunk) {
      isBuf = true;
      encoding = 'buffer';
      chunk = newChunk;
    }
  }
  var len = state.objectMode ? 1 : chunk.length;

  state.length += len;

  var ret = state.length < state.highWaterMark;
  // we must ensure that previous needDrain will not be reset to false.
  if (!ret) state.needDrain = true;

  if (state.writing || state.corked) {
    var last = state.lastBufferedRequest;
    state.lastBufferedRequest = {
      chunk: chunk,
      encoding: encoding,
      isBuf: isBuf,
      callback: cb,
      next: null
    };
    if (last) {
      last.next = state.lastBufferedRequest;
    } else {
      state.bufferedRequest = state.lastBufferedRequest;
    }
    state.bufferedRequestCount += 1;
  } else {
    doWrite(stream, state, false, len, chunk, encoding, cb);
  }

  return ret;
}

function doWrite(stream, state, writev, len, chunk, encoding, cb) {
  state.writelen = len;
  state.writecb = cb;
  state.writing = true;
  state.sync = true;
  if (writev) stream._writev(chunk, state.onwrite);else stream._write(chunk, encoding, state.onwrite);
  state.sync = false;
}

function onwriteError(stream, state, sync, er, cb) {
  --state.pendingcb;

  if (sync) {
    // defer the callback if we are being called synchronously
    // to avoid piling up things on the stack
    processNextTick(cb, er);
    // this can emit finish, and it will always happen
    // after error
    processNextTick(finishMaybe, stream, state);
    stream._writableState.errorEmitted = true;
    stream.emit('error', er);
  } else {
    // the caller expect this to happen before if
    // it is async
    cb(er);
    stream._writableState.errorEmitted = true;
    stream.emit('error', er);
    // this can emit finish, but finish must
    // always follow error
    finishMaybe(stream, state);
  }
}

function onwriteStateUpdate(state) {
  state.writing = false;
  state.writecb = null;
  state.length -= state.writelen;
  state.writelen = 0;
}

function onwrite(stream, er) {
  var state = stream._writableState;
  var sync = state.sync;
  var cb = state.writecb;

  onwriteStateUpdate(state);

  if (er) onwriteError(stream, state, sync, er, cb);else {
    // Check if we're actually ready to finish, but don't emit yet
    var finished = needFinish(state);

    if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {
      clearBuffer(stream, state);
    }

    if (sync) {
      /*<replacement>*/
      asyncWrite(afterWrite, stream, state, finished, cb);
      /*</replacement>*/
    } else {
      afterWrite(stream, state, finished, cb);
    }
  }
}

function afterWrite(stream, state, finished, cb) {
  if (!finished) onwriteDrain(stream, state);
  state.pendingcb--;
  cb();
  finishMaybe(stream, state);
}

// Must force callback to be called on nextTick, so that we don't
// emit 'drain' before the write() consumer gets the 'false' return
// value, and has a chance to attach a 'drain' listener.
function onwriteDrain(stream, state) {
  if (state.length === 0 && state.needDrain) {
    state.needDrain = false;
    stream.emit('drain');
  }
}

// if there's something in the buffer waiting, then process it
function clearBuffer(stream, state) {
  state.bufferProcessing = true;
  var entry = state.bufferedRequest;

  if (stream._writev && entry && entry.next) {
    // Fast case, write everything using _writev()
    var l = state.bufferedRequestCount;
    var buffer = new Array(l);
    var holder = state.corkedRequestsFree;
    holder.entry = entry;

    var count = 0;
    var allBuffers = true;
    while (entry) {
      buffer[count] = entry;
      if (!entry.isBuf) allBuffers = false;
      entry = entry.next;
      count += 1;
    }
    buffer.allBuffers = allBuffers;

    doWrite(stream, state, true, state.length, buffer, '', holder.finish);

    // doWrite is almost always async, defer these to save a bit of time
    // as the hot path ends with doWrite
    state.pendingcb++;
    state.lastBufferedRequest = null;
    if (holder.next) {
      state.corkedRequestsFree = holder.next;
      holder.next = null;
    } else {
      state.corkedRequestsFree = new CorkedRequest(state);
    }
  } else {
    // Slow case, write chunks one-by-one
    while (entry) {
      var chunk = entry.chunk;
      var encoding = entry.encoding;
      var cb = entry.callback;
      var len = state.objectMode ? 1 : chunk.length;

      doWrite(stream, state, false, len, chunk, encoding, cb);
      entry = entry.next;
      // if we didn't call the onwrite immediately, then
      // it means that we need to wait until it does.
      // also, that means that the chunk and cb are currently
      // being processed, so move the buffer counter past them.
      if (state.writing) {
        break;
      }
    }

    if (entry === null) state.lastBufferedRequest = null;
  }

  state.bufferedRequestCount = 0;
  state.bufferedRequest = entry;
  state.bufferProcessing = false;
}

Writable.prototype._write = function (chunk, encoding, cb) {
  cb(new Error('_write() is not implemented'));
};

Writable.prototype._writev = null;

Writable.prototype.end = function (chunk, encoding, cb) {
  var state = this._writableState;

  if (typeof chunk === 'function') {
    cb = chunk;
    chunk = null;
    encoding = null;
  } else if (typeof encoding === 'function') {
    cb = encoding;
    encoding = null;
  }

  if (chunk !== null && chunk !== undefined) this.write(chunk, encoding);

  // .end() fully uncorks
  if (state.corked) {
    state.corked = 1;
    this.uncork();
  }

  // ignore unnecessary end() calls.
  if (!state.ending && !state.finished) endWritable(this, state, cb);
};

function needFinish(state) {
  return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
}
function callFinal(stream, state) {
  stream._final(function (err) {
    state.pendingcb--;
    if (err) {
      stream.emit('error', err);
    }
    state.prefinished = true;
    stream.emit('prefinish');
    finishMaybe(stream, state);
  });
}
function prefinish(stream, state) {
  if (!state.prefinished && !state.finalCalled) {
    if (typeof stream._final === 'function') {
      state.pendingcb++;
      state.finalCalled = true;
      processNextTick(callFinal, stream, state);
    } else {
      state.prefinished = true;
      stream.emit('prefinish');
    }
  }
}

function finishMaybe(stream, state) {
  var need = needFinish(state);
  if (need) {
    prefinish(stream, state);
    if (state.pendingcb === 0) {
      state.finished = true;
      stream.emit('finish');
    }
  }
  return need;
}

function endWritable(stream, state, cb) {
  state.ending = true;
  finishMaybe(stream, state);
  if (cb) {
    if (state.finished) processNextTick(cb);else stream.once('finish', cb);
  }
  state.ended = true;
  stream.writable = false;
}

function onCorkedFinish(corkReq, state, err) {
  var entry = corkReq.entry;
  corkReq.entry = null;
  while (entry) {
    var cb = entry.callback;
    state.pendingcb--;
    cb(err);
    entry = entry.next;
  }
  if (state.corkedRequestsFree) {
    state.corkedRequestsFree.next = corkReq;
  } else {
    state.corkedRequestsFree = corkReq;
  }
}

Object.defineProperty(Writable.prototype, 'destroyed', {
  get: function () {
    if (this._writableState === undefined) {
      return false;
    }
    return this._writableState.destroyed;
  },
  set: function (value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (!this._writableState) {
      return;
    }

    // backward compatibility, the user is explicitly
    // managing destroyed
    this._writableState.destroyed = value;
  }
});

Writable.prototype.destroy = destroyImpl.destroy;
Writable.prototype._undestroy = destroyImpl.undestroy;
Writable.prototype._destroy = function (err, cb) {
  this.end();
  cb(err);
};
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(11), __webpack_require__(302).setImmediate, __webpack_require__(8)))

/***/ }),
/* 21 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /**
fileoverview Implements editor preivew
author NHN Ent. FE Development Lab <dl_javascript@nhnent.com>



var _jquery = __webpack_require__(1);

var _jquery2 = _interopRequireDefault(_jquery);

var _tuiCodeSnippet = __webpack_require__(2);

var _tuiCodeSnippet2 = _interopRequireDefault(_tuiCodeSnippet);

var _mdPreview = __webpack_require__(45);

var _mdPreview2 = _interopRequireDefault(_mdPreview);

var _eventManager = __webpack_require__(48);

var _eventManager2 = _interopRequireDefault(_eventManager);

var _commandManager = __webpack_require__(49);

var _commandManager2 = _interopRequireDefault(_commandManager);

var _extManager = __webpack_require__(52);

var _extManager2 = _interopRequireDefault(_extManager);

var _convertor = __webpack_require__(53);

var _convertor2 = _interopRequireDefault(_convertor);

var _domUtils = __webpack_require__(296);

var _domUtils2 = _interopRequireDefault(_domUtils);

var _codeBlockManager = __webpack_require__(31);

var _codeBlockManager2 = _interopRequireDefault(_codeBlockManager);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var TASK_ATTR_NAME = 'data-te-task';
var TASK_CHECKED_CLASS_NAME = 'checked';

/**
 * Class ToastUIEditorViewer
 */

var ToastUIEditorViewer = function () {
  /**
     * Viewer
     * @param {object} options Option object
        * @param {string} options.initialValue Editor's initial value
        * @param {object} options.events eventlist Event list
            * @param {function} options.events.load It would be emitted when editor fully load
            * @param {function} options.events.change It would be emitted when content changed
            * @param {function} options.events.stateChange It would be emitted when format change by cursor position
            * @param {function} options.events.focus It would be emitted when editor get focus
            * @param {function} options.events.blur It would be emitted when editor loose focus
        * @param {object} options.hooks Hook list
            * @param {function} options.hooks.previewBeforeHook Submit preview to hook URL before preview be shown
    */
  function ToastUIEditorViewer(options) {
    var _this = this;

    _classCallCheck(this, ToastUIEditorViewer);

    this.options = _jquery2.default.extend({
      useDefaultHTMLSanitizer: true,
      codeBlockLanguages: _codeBlockManager.CodeBlockManager.getHighlightJSLanguages()
    }, options);

    this.eventManager = new _eventManager2.default();
    this.commandManager = new _commandManager2.default(this);
    this.convertor = new _convertor2.default(this.eventManager);
    this.toMarkOptions = null;

    if (this.options.useDefaultHTMLSanitizer) {
      this.convertor.initHtmlSanitizer();
    }

    if (this.options.hooks) {
      _tuiCodeSnippet2.default.forEach(this.options.hooks, function (fn, key) {
        _this.addHook(key, fn);
      });
    }

    if (this.options.events) {
      _tuiCodeSnippet2.default.forEach(this.options.events, function (fn, key) {
        _this.on(key, fn);
      });
    }

    this.preview = new _mdPreview2.default((0, _jquery2.default)(this.options.el), this.eventManager, this.convertor, true);

    this.preview.$el.on('mousedown', _jquery2.default.proxy(this._toggleTask, this));

    _extManager2.default.applyExtension(this, this.options.exts);

    this.setValue(this.options.initialValue);

    this.eventManager.emit('load', this);
  }

  /**
   * Toggle task by detecting mousedown event.
   * @param {MouseEvent} ev - event
   * @private
   */


  _createClass(ToastUIEditorViewer, [{
    key: '_toggleTask',
    value: function _toggleTask(ev) {
      var isBeneathTaskBox = ev.offsetX < 18 && ev.offsetY > 18;

      if (ev.target.hasAttribute(TASK_ATTR_NAME) && !isBeneathTaskBox) {
        (0, _jquery2.default)(ev.target).toggleClass(TASK_CHECKED_CLASS_NAME);
        this.eventManager.emit('change', {
          source: 'viewer',
          data: ev
        });
      }
    }

    /**
     * Set content for preview
     * @memberof ToastUIEditorViewer
     * @param {string} markdown Markdown text
     */

  }, {
    key: 'setMarkdown',
    value: function setMarkdown(markdown) {
      this.markdownValue = markdown = markdown || '';

      this.preview.refresh(this.markdownValue);
      this.eventManager.emit('setMarkdownAfter', this.markdownValue);
    }

    /**
     * Set content for preview
     * @memberof ToastUIEditorViewer
     * @param {string} markdown Markdown text
     * @deprecated
     */

  }, {
    key: 'setValue',
    value: function setValue(markdown) {
      this.setMarkdown(markdown);
    }

    /**
     * Bind eventHandler to event type
     * @memberof ToastUIEditorViewer
     * @param {string} type Event type
     * @param {function} handler Event handler
     */

  }, {
    key: 'on',
    value: function on(type, handler) {
      this.eventManager.listen(type, handler);
    }

    /**
     * Unbind eventHandler from event type
     * @memberof ToastUIEditorViewer
     * @param {string} type Event type
     */

  }, {
    key: 'off',
    value: function off(type) {
      this.eventManager.removeEventHandler(type);
    }

    /**
     * Remove Viewer preview from document
     * @memberof ToastUIEditorViewer
     */

  }, {
    key: 'remove',
    value: function remove() {
      this.eventManager.emit('removeEditor');
      this.preview.$el.off('mousedown', _jquery2.default.proxy(this._toggleTask, this));
      this.options = null;
      this.eventManager = null;
      this.commandManager = null;
      this.convertor = null;
      this.preview = null;
    }

    /**
     * Add hook to Viewer preview's event
     * @memberof ToastUIEditorViewer
     * @param {string} type Event type
     * @param {function} handler Event handler
     */

  }, {
    key: 'addHook',
    value: function addHook(type, handler) {
      this.eventManager.removeEventHandler(type);
      this.eventManager.listen(type, handler);
    }

    /**
     * Return true
     * @memberof ToastUIEditorViewer
     * @returns {boolean}
     */

  }, {
    key: 'isViewer',
    value: function isViewer() {
      return true;
    }

    /**
     * Return false
     * @memberof ToastUIEditorViewer
     * @returns {boolean}
     */

  }, {
    key: 'isMarkdownMode',
    value: function isMarkdownMode() {
      return false;
    }

    /**
     * Return false
     * @memberof ToastUIEditorViewer
     * @returns {boolean}
     */

  }, {
    key: 'isWysiwygMode',
    value: function isWysiwygMode() {
      return false;
    }

    /**
     * Define extension
     * @memberof ToastUIEditorViewer
     * @param {string} name Extension name
     * @param {ExtManager~extension} ext extension
     */

  }], [{
    key: 'defineExtension',
    value: function defineExtension(name, ext) {
      _extManager2.default.defineExtension(name, ext);
    }
  }]);

  return ToastUIEditorViewer;
}();

/**
 * check whther is viewer
 * @type {boolean}
 */


ToastUIEditorViewer.isViewer = true;

/**
 * domUtil instance
 * @type {DomUtil}
 */
ToastUIEditorViewer.domUtils = _domUtils2.default;

/**
 * CodeBlockManager instance
 * @type {CodeBlockManager}
 */
ToastUIEditorViewer.codeBlockManager = _codeBlockManager2.default;

/**
 * MarkdownIt hightlight instance
 * @type {MarkdownIt}
 */
ToastUIEditorViewer.markdownitHighlight = _convertor2.default.getMarkdownitHighlightRenderer();

/**
 * @ignore
 */
ToastUIEditorViewer.i18n = null;

/**
 * @ignore
 */
ToastUIEditorViewer.Button = null;

/**
 * @ignore
 */
ToastUIEditorViewer.WwCodeBlockManager = null;

/**
 * @ignore
 */
ToastUIEditorViewer.WwTableManager = null;

/**
 * @ignore
 */
ToastUIEditorViewer.WwTableSelectionManager = null;

module.exports = ToastUIEditorViewer;

/***/ }),
/* 22 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// HTML5 entities map: { name -> utf16string }
//


/*eslint quotes:0*/
module.exports = __webpack_require__(56);


/***/ }),
/* 23 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";



module.exports.encode = __webpack_require__(57);
module.exports.decode = __webpack_require__(58);
module.exports.format = __webpack_require__(59);
module.exports.parse  = __webpack_require__(60);


/***/ }),
/* 24 */
/***/ (function(module, exports) {

module.exports=/[\0-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]/

/***/ }),
/* 25 */
/***/ (function(module, exports) {

module.exports=/[\0-\x1F\x7F-\x9F]/

/***/ }),
/* 26 */
/***/ (function(module, exports) {

module.exports=/[ \xA0\u1680\u2000-\u200A\u202F\u205F\u3000]/

/***/ }),
/* 27 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Regexps to match html elements



var attr_name     = '[a-zA-Z_:][a-zA-Z0-9:._-]*';

var unquoted      = '[^"\'=<>`\\x00-\\x20]+';
var single_quoted = "'[^']*'";
var double_quoted = '"[^"]*"';

var attr_value  = '(?:' + unquoted + '|' + single_quoted + '|' + double_quoted + ')';

var attribute   = '(?:\\s+' + attr_name + '(?:\\s*=\\s*' + attr_value + ')?)';

var open_tag    = '<[A-Za-z][A-Za-z0-9\\-]*' + attribute + '*\\s*\\/?>';

var close_tag   = '<\\/[A-Za-z][A-Za-z0-9\\-]*\\s*>';
var comment     = '<!---->|<!--(?:-?[^>-])(?:-?[^-])*-->';
var processing  = '<[?].*?[?]>';
var declaration = '<![A-Z]+\\s+[^>]*>';
var cdata       = '<!\\[CDATA\\[[\\s\\S]*?\\]\\]>';

var HTML_TAG_RE = new RegExp('^(?:' + open_tag + '|' + close_tag + '|' + comment +
                        '|' + processing + '|' + declaration + '|' + cdata + ')');
var HTML_OPEN_CLOSE_TAG_RE = new RegExp('^(?:' + open_tag + '|' + close_tag + ')');

module.exports.HTML_TAG_RE = HTML_TAG_RE;
module.exports.HTML_OPEN_CLOSE_TAG_RE = HTML_OPEN_CLOSE_TAG_RE;


/***/ }),
/* 28 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// ~~strike through~~
//



// Insert each marker as a separate text token, and add it to delimiter list
//
module.exports.tokenize = function strikethrough(state, silent) {
  var i, scanned, token, len, ch,
      start = state.pos,
      marker = state.src.charCodeAt(start);

  if (silent) { return false; }

  if (marker !== 0x7E/* ~ */) { return false; }

  scanned = state.scanDelims(state.pos, true);
  len = scanned.length;
  ch = String.fromCharCode(marker);

  if (len < 2) { return false; }

  if (len % 2) {
    token         = state.push('text', '', 0);
    token.content = ch;
    len--;
  }

  for (i = 0; i < len; i += 2) {
    token         = state.push('text', '', 0);
    token.content = ch + ch;

    state.delimiters.push({
      marker: marker,
      jump:   i,
      token:  state.tokens.length - 1,
      level:  state.level,
      end:    -1,
      open:   scanned.can_open,
      close:  scanned.can_close
    });
  }

  state.pos += scanned.length;

  return true;
};


// Walk through delimiter list and replace text tokens with tags
//
module.exports.postProcess = function strikethrough(state) {
  var i, j,
      startDelim,
      endDelim,
      token,
      loneMarkers = [],
      delimiters = state.delimiters,
      max = state.delimiters.length;

  for (i = 0; i < max; i++) {
    startDelim = delimiters[i];

    if (startDelim.marker !== 0x7E/* ~ */) {
      continue;
    }

    if (startDelim.end === -1) {
      continue;
    }

    endDelim = delimiters[startDelim.end];

    token         = state.tokens[startDelim.token];
    token.type    = 's_open';
    token.tag     = 's';
    token.nesting = 1;
    token.markup  = '~~';
    token.content = '';

    token         = state.tokens[endDelim.token];
    token.type    = 's_close';
    token.tag     = 's';
    token.nesting = -1;
    token.markup  = '~~';
    token.content = '';

    if (state.tokens[endDelim.token - 1].type === 'text' &&
        state.tokens[endDelim.token - 1].content === '~') {

      loneMarkers.push(endDelim.token - 1);
    }
  }

  // If a marker sequence has an odd number of characters, it's splitted
  // like this: `~~~~~` -> `~` + `~~` + `~~`, leaving one marker at the
  // start of the sequence.
  //
  // So, we have to move all those markers after subsequent s_close tags.
  //
  while (loneMarkers.length) {
    i = loneMarkers.pop();
    j = i + 1;

    while (j < state.tokens.length && state.tokens[j].type === 's_close') {
      j++;
    }

    j--;

    if (i !== j) {
      token = state.tokens[j];
      state.tokens[j] = state.tokens[i];
      state.tokens[i] = token;
    }
  }
};


/***/ }),
/* 29 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Process *this* and _that_
//



// Insert each marker as a separate text token, and add it to delimiter list
//
module.exports.tokenize = function emphasis(state, silent) {
  var i, scanned, token,
      start = state.pos,
      marker = state.src.charCodeAt(start);

  if (silent) { return false; }

  if (marker !== 0x5F /* _ */ && marker !== 0x2A /* * */) { return false; }

  scanned = state.scanDelims(state.pos, marker === 0x2A);

  for (i = 0; i < scanned.length; i++) {
    token         = state.push('text', '', 0);
    token.content = String.fromCharCode(marker);

    state.delimiters.push({
      // Char code of the starting marker (number).
      //
      marker: marker,

      // Total length of these series of delimiters.
      //
      length: scanned.length,

      // An amount of characters before this one that's equivalent to
      // current one. In plain English: if this delimiter does not open
      // an emphasis, neither do previous `jump` characters.
      //
      // Used to skip sequences like "*****" in one step, for 1st asterisk
      // value will be 0, for 2nd it's 1 and so on.
      //
      jump:   i,

      // A position of the token this delimiter corresponds to.
      //
      token:  state.tokens.length - 1,

      // Token level.
      //
      level:  state.level,

      // If this delimiter is matched as a valid opener, `end` will be
      // equal to its position, otherwise it's `-1`.
      //
      end:    -1,

      // Boolean flags that determine if this delimiter could open or close
      // an emphasis.
      //
      open:   scanned.can_open,
      close:  scanned.can_close
    });
  }

  state.pos += scanned.length;

  return true;
};


// Walk through delimiter list and replace text tokens with tags
//
module.exports.postProcess = function emphasis(state) {
  var i,
      startDelim,
      endDelim,
      token,
      ch,
      isStrong,
      delimiters = state.delimiters,
      max = state.delimiters.length;

  for (i = max - 1; i >= 0; i--) {
    startDelim = delimiters[i];

    if (startDelim.marker !== 0x5F/* _ */ && startDelim.marker !== 0x2A/* * */) {
      continue;
    }

    // Process only opening markers
    if (startDelim.end === -1) {
      continue;
    }

    endDelim = delimiters[startDelim.end];

    // If the previous delimiter has the same marker and is adjacent to this one,
    // merge those into one strong delimiter.
    //
    // `<em><em>whatever</em></em>` -> `<strong>whatever</strong>`
    //
    isStrong = i > 0 &&
               delimiters[i - 1].end === startDelim.end + 1 &&
               delimiters[i - 1].token === startDelim.token - 1 &&
               delimiters[startDelim.end + 1].token === endDelim.token + 1 &&
               delimiters[i - 1].marker === startDelim.marker;

    ch = String.fromCharCode(startDelim.marker);

    token         = state.tokens[startDelim.token];
    token.type    = isStrong ? 'strong_open' : 'em_open';
    token.tag     = isStrong ? 'strong' : 'em';
    token.nesting = 1;
    token.markup  = isStrong ? ch + ch : ch;
    token.content = '';

    token         = state.tokens[endDelim.token];
    token.type    = isStrong ? 'strong_close' : 'em_close';
    token.tag     = isStrong ? 'strong' : 'em';
    token.nesting = -1;
    token.markup  = isStrong ? ch + ch : ch;
    token.content = '';

    if (isStrong) {
      state.tokens[delimiters[i - 1].token].content = '';
      state.tokens[delimiters[startDelim.end + 1].token].content = '';
      i--;
    }
  }
};


/***/ }),
/* 30 */
/***/ (function(module, exports, __webpack_require__) {

(function webpackUniversalModuleDefinition(root, factory) {
	if(true)
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["to-mark"] = factory();
	else
		root["toMark"] = factory();
})(typeof self !== 'undefined' ? self : this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 3);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * @fileoverview Implements basicRenderer
 * @author NHN Ent. FE Development Lab <dl_javascript@nhnent.com>
 */



var Renderer = __webpack_require__(1);

var FIND_LAST_RETURN_RX = /\n$/g,
    FIND_BR_AND_RETURN_RX = /[ \xA0]+\n\n/g,
    FIND_MULTIPLE_EMPTYLINE_BETWEEN_TEXT_RX = /([ \xA0]+\n){2,}/g,
    FIND_LINK_HREF = /href\=\"(.*?)\"/,
    START_OF_LINES_RX = /^/gm;

/**
 * basicRenderer
 * Basic Markdown Renderer
 * @exports basicRenderer
 * @augments Renderer
 */
var basicRenderer = Renderer.factory({
    //inlines
    'TEXT_NODE': function(node) {
        var managedText;

        managedText = this.trim(this.getSpaceCollapsedText(node.nodeValue));

        if (this._isNeedEscapeHtml(managedText)) {
            managedText = this.escapeTextHtml(managedText);
        } else if (this._isNeedEscape(managedText)) {
            managedText = this.escapeText(managedText);
        }

        return this.getSpaceControlled(managedText, node);
    },
    'CODE TEXT_NODE': function(node) {
        return node.nodeValue;
    },
    'EM, I': function(node, subContent) {
        var res = '';

        if (!this.isEmptyText(subContent)) {
            res = '_' + subContent + '_';
        }

        return res;
    },
    'STRONG, B': function(node, subContent) {
        var res = '';

        if (!this.isEmptyText(subContent)) {
            res = '**' + subContent + '**';
        }

        return res;
    },
    'A': function(node, subContent) {
        var res = subContent;
        var title = '';
        var foundedHref, url;


        //상황에따라 href속성은 상황에 따라 값을 예측하기 힘듬
        //그래서 html에 적용된 그대로를 사용
        foundedHref = FIND_LINK_HREF.exec(node.outerHTML);

        if (foundedHref) {
            url = foundedHref[1].replace(/&amp;/g, '&');
        }

        if (node.title) {
            title = ' "' + node.title + '"';
        }

        if (!this.isEmptyText(subContent) && url) {
            res = '[' + this.escapeTextForLink(subContent) + '](' + url + title + ')';
        }

        return res;
    },
    'IMG': function(node) {
        var res = '',
            src = node.getAttribute('src'),
            alt = node.alt;

        if (src) {
            res = '![' + this.escapeTextForLink(alt) + '](' + src + ')';
        }

        return res;
    },
    'BR': function() {
        return '  \n';
    },
    'CODE': function(node, subContent) {
        var backticks, numBackticks;
        var res = '';

        if (!this.isEmptyText(subContent)) {
            numBackticks = parseInt(node.getAttribute('data-backticks'), 10);
            backticks = isNaN(numBackticks) ? '`' : Array(numBackticks + 1).join('`');

            res = backticks + subContent + backticks;
        }

        return res;
    },

    //Paragraphs
    'P': function(node, subContent) {
        var res = '';

        //convert multiple brs to one br
        subContent = subContent.replace(FIND_MULTIPLE_EMPTYLINE_BETWEEN_TEXT_RX, '  \n');

        if (!this.isEmptyText(subContent)) {
            res = '\n\n' + subContent + '\n\n';
        }

        return res;
    },
    'BLOCKQUOTE P': function(node, subContent) {
        return subContent;
    },
    'LI P': function(node, subContent) {
        var res = '';

        if (!this.isEmptyText(subContent)) {
            res = subContent;
        }

        return res;
    },

    //Headings
    'H1, H2, H3, H4, H5, H6': function(node, subContent) {
        var res = '',
            headingNumber = parseInt(node.tagName.charAt(1), 10);

        while (headingNumber) {
            res += '#';
            headingNumber -= 1;
        }

        res += ' ';
        res += subContent;

        return '\n\n' + res + '\n\n';
    },
    'LI H1, LI H2, LI H3, LI H4, LI H5, LI H6': function(node) {
        return '<' + node.tagName.toLowerCase() + '>' + node.innerHTML + '</' + node.tagName.toLowerCase() + '>';
    },

    //List
    'UL, OL': function(node, subContent) {
        return '\n\n' + subContent + '\n\n';
    },
    'LI OL, LI UL': function(node, subContent) {
        var res, processedSubContent;

        //remove last br of li
        processedSubContent = subContent.replace(FIND_BR_AND_RETURN_RX, '\n');

        //parent LI converter add \n too, so we remove last return
        processedSubContent = processedSubContent.replace(FIND_LAST_RETURN_RX, '');

        res = processedSubContent.replace(START_OF_LINES_RX, '    ');

        return '\n' + res;
    },
    'UL LI': function(node, subContent) {
        var res = '';

        //convert multiple brs to one br
        subContent = subContent.replace(FIND_MULTIPLE_EMPTYLINE_BETWEEN_TEXT_RX, '  \n');

        if (node.firstChild && node.firstChild.tagName === 'P') {
            res += '\n';
        }

        res += '* ' + subContent + '\n';

        return res;
    },
    'OL LI': function(node, subContent) {
        var res = '',
            liCounter = 1;

        while (node.previousSibling) {
            node = node.previousSibling;

            if (node.nodeType === 1 && node.tagName === 'LI') {
                liCounter += 1;
            }
        }

        //convert multiple brs to one br
        subContent = subContent.replace(FIND_MULTIPLE_EMPTYLINE_BETWEEN_TEXT_RX, '  \n');

        if (node.firstChild && node.firstChild.tagName === 'P') {
            res += '\n';
        }

        res += liCounter + '. ' + subContent + '\n';

        return res;
    },

    //HR
    'HR': function() {
        return '\n\n- - -\n\n';
    },

    //Blockquote
    'BLOCKQUOTE': function(node, subContent) {
        var res, trimmedText;

        //convert multiple brs to one emptyline
        subContent = subContent.replace(FIND_MULTIPLE_EMPTYLINE_BETWEEN_TEXT_RX, '\n\n');

        trimmedText = this.trim(subContent);
        res = trimmedText.replace(START_OF_LINES_RX, '> ');

        return '\n\n' + res + '\n\n';
    },

    //Code Block
    'PRE CODE': function(node, subContent) {
        var res, lastNremoved;

        lastNremoved = subContent.replace(FIND_LAST_RETURN_RX, '');
        res = lastNremoved.replace(START_OF_LINES_RX, '    ');

        return '\n\n' + res + '\n\n';
    }
});

module.exports = basicRenderer;


/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * @fileoverview Implements Renderer
 * @author NHN Ent. FE Development Lab <dl_javascript@nhnent.com>
 */


var FIND_LEAD_SPACE_RX = /^\u0020/,
    FIND_TRAIL_SPACE_RX = /.+\u0020$/,
    FIND_SPACE_RETURN_TAB_RX = /[\n\s\t]+/g,
    //find first and last characters for trim
    FIND_CHAR_TO_TRIM_RX = /^[\u0020\r\n\t]+|[\u0020\r\n\t]+$/g,
    //find space more than one
    FIND_SPACE_MORE_THAN_ONE_RX = /[\u0020]+/g,
    //find characters that need escape
    FIND_CHAR_TO_ESCAPE_RX = /[~>()*{}\[\]_`+-.!#|]/g,
    // find characters to be escaped in links or images
    FIND_CHAR_TO_ESCAPE_IN_LINK_RX = /[\[\]\(\)<>]/g;

var TEXT_NODE = 3;

/**
 * forEachOwnProperties
 * Iterate properties of object
 * from https://github.com/nhnent/fe.code-snippet/blob/master/src/collection.js
 * @param {object} obj object to iterate
 * @param {function} iteratee callback function
 * @param {*} [context] context of callback
 */
function forEachOwnProperties(obj, iteratee, context) {
    var key;

    context = context || null;

    for (key in obj) {
        if (obj.hasOwnProperty(key)) {
            if (iteratee.call(context, obj[key], key, obj) === false) {
                break;
            }
        }
    }
}

/**
 * Renderer
 * @exports Renderer
 * @constructor
 * @param {object} [rules] rules to add
 * @class
 */
function Renderer(rules) {
    this.rules = {};

    if (rules) {
        this.addRules(rules);
    }
}

/**
 * Line feed replacement text
 * @type string
 */
Renderer.prototype.lineFeedReplacement = '\u200B\u200B';

/**
 * addRule
 * Add rule
 * @param {string} selectorString rule selector
 * @param {function} converter converter function
 */
Renderer.prototype.addRule = function(selectorString, converter) {
    var selectors = selectorString.split(', '),
        selector = selectors.pop();

    converter.fname = selectorString;

    while (selector) {
        this._setConverterWithSelector(selector, converter);
        selector = selectors.pop();
    }
};

/**
 * addRules
 * Add rules using object
 * @param {object} rules key(rule selector), value(converter function)
 */
Renderer.prototype.addRules = function(rules) {
    forEachOwnProperties(rules, function(converter, selectorString) {
        this.addRule(selectorString, converter);
    }, this);
};

/**
 * Whether if inline node or not
 * @param {Node} node Element
 * @returns {boolean}
 */
function isInlineNode(node) {
    var tag = node.tagName;

    return tag === 'S' || tag === 'B' || tag === 'I' || tag === 'EM'
        || tag === 'STRONG' || tag === 'A' || tag === 'IMG' || tag === 'CODE';
}

/**
 * getSpaceControlled
 * Remove flanked space of dom node
 * @param {string} content text content
 * @param {HTMLElement} node current node
 * @returns {string} result
 */
Renderer.prototype.getSpaceControlled = function(content, node) {
    var lead = '',
        trail = '',
        text;

    if (node.previousSibling && (node.previousSibling.nodeType === TEXT_NODE || isInlineNode(node.previousSibling))) {
        text = node.previousSibling.innerHTML || node.previousSibling.nodeValue;

        if (FIND_TRAIL_SPACE_RX.test(text) || FIND_LEAD_SPACE_RX.test(node.innerHTML || node.nodeValue)) {
            lead = ' ';
        }
    }

    if (node.nextSibling && (node.nextSibling.nodeType === TEXT_NODE || isInlineNode(node.nextSibling))) {
        text = node.nextSibling.innerHTML || node.nextSibling.nodeValue;
        if (FIND_LEAD_SPACE_RX.test(text) || FIND_TRAIL_SPACE_RX.test(node.innerHTML || node.nodeValue)) {
            trail = ' ';
        }
    }

    return lead + content + trail;
};

/**
 * convert
 * Convert dom node to markdown using dom node and subContent
 * @param {HTMLElement} node node to convert
 * @param {string} subContent child nodes converted text
 * @returns {string} converted text
 */
Renderer.prototype.convert = function(node, subContent) {
    var result,
        converter = this._getConverter(node);

    if (node && node.nodeType === Node.ELEMENT_NODE && node.hasAttribute('data-tomark-pass')) {
        node.removeAttribute('data-tomark-pass');
        result = node.outerHTML;
    } else if (converter) {
        result = converter.call(this, node, subContent);
    } else if (node) {
        result = this.getSpaceControlled(this._getInlineHtml(node, subContent), node);
    }

    return result || '';
};

Renderer.prototype._getInlineHtml = function(node, subContent) {
    var html = node.outerHTML,
        tagName = node.tagName,
        escapedSubContent = subContent.replace(/\$/g, '$$$$');
    // escape $: replace all $ char to $$ before we throw this string to replace

    return html.replace(new RegExp('(<' + tagName + ' ?.*?>).*(</' + tagName + '>)', 'i'), '$1' + escapedSubContent + '$2');
};

/**
 * _getConverter
 * Get converter function for node
 * @private
 * @param {HTMLElement} node node
 * @returns {function} converter function
 */
Renderer.prototype._getConverter = function(node) {
    var rulePointer = this.rules,
        converter;

    while (node && rulePointer) {
        rulePointer = this._getNextRule(rulePointer, this._getRuleNameFromNode(node));
        node = this._getPrevNode(node);

        if (rulePointer && rulePointer.converter) {
            converter = rulePointer.converter;
        }
    }

    return converter;
};

/**
 * _getNextRule
 * Get next rule object
 * @private
 * @param {object} ruleObj rule object
 * @param {string} ruleName rule tag name to find
 * @returns {object} rule Object
 */
Renderer.prototype._getNextRule = function(ruleObj, ruleName) {
    return ruleObj[ruleName];
};

/**
 * _getRuleNameFromNode
 * Get proper rule tag name from node
 * @private
 * @param {HTMLElement} node node
 * @returns {string} rule tag name
 */
Renderer.prototype._getRuleNameFromNode = function(node) {
    return node.tagName || 'TEXT_NODE';
};

/**
 * _getPrevNode
 * Get node's available parent node
 * @private
 * @param {HTMLElement} node node
 * @returns {HTMLElement | undefined} result
 */
Renderer.prototype._getPrevNode = function(node) {
    var parentNode = node.parentNode;
    var previousNode;

    if (parentNode && !parentNode.__htmlRootByToMark) {
        previousNode = parentNode;
    }

    return previousNode;
};

/**
 * _setConverterWithSelector
 * Set converter for selector
 * @private
 * @param {string} selectors rule selector
 * @param {function} converter converter function
 */
Renderer.prototype._setConverterWithSelector = function(selectors, converter) {
    var rulePointer = this.rules;

    this._eachSelector(selectors, function(ruleElem) {
        if (!rulePointer[ruleElem]) {
            rulePointer[ruleElem] = {};
        }

        rulePointer = rulePointer[ruleElem];
    });

    rulePointer.converter = converter;
};

/**
 * _eachSelector
 * Iterate each selectors
 * @private
 * @param {string} selectors rule selectors
 * @param {function} iteratee callback
 */
Renderer.prototype._eachSelector = function(selectors, iteratee) {
    var selectorArray, selectorIndex;

    selectorArray = selectors.split(' ');
    selectorIndex = selectorArray.length - 1;

    while (selectorIndex >= 0) {
        iteratee(selectorArray[selectorIndex]);
        selectorIndex -= 1;
    }
};

/**
 * trim
 * Trim text
 * @param {string} text text be trimed
 * @returns {string} trimed text
 */
Renderer.prototype.trim = function(text) {
    return text.replace(FIND_CHAR_TO_TRIM_RX, '');
};

/**
 * isEmptyText
 * Returns whether text empty or not
 * @param {string} text text be checked
 * @returns {boolean} result
 */
Renderer.prototype.isEmptyText = function(text) {
    return text.replace(FIND_SPACE_RETURN_TAB_RX, '') === '';
};

/**
 * getSpaceCollapsedText
 * Collape space more than 2
 * @param {string} text text be collapsed
 * @returns {string} result
 */
Renderer.prototype.getSpaceCollapsedText = function(text) {
    return text.replace(FIND_SPACE_MORE_THAN_ONE_RX, ' ');
};

/**
 * Backslash escape to text
 * Apply backslash escape to text
 * @param {string} text text be processed
 * @returns {string} processed text
 */
Renderer.prototype.escapeText = function(text) {
    return text.replace(FIND_CHAR_TO_ESCAPE_RX, function(matched) {
        return '\\' + matched;
    });
};

/**
 * Escape given text for link
 * @param {string} text - text be processed
 * @returns {string} - processed text
 */
Renderer.prototype.escapeTextForLink = function(text) {
    return text.replace(FIND_CHAR_TO_ESCAPE_IN_LINK_RX, function(matched) {
        return '\\' + matched;
    });
};

/**
 * Backslash escape to text for html
 * Apply backslash escape to text
 * @param {string} text text be processed
 * @returns {string} processed text
 */
Renderer.prototype.escapeTextHtml = function(text) {
    text = text.replace(Renderer.markdownTextToEscapeHtmlRx, function(matched) {
        return '\\' + matched;
    });

    return text;
};

Renderer.markdownTextToEscapeRx = {
    codeblock: /(^ {4}[^\n]+\n*)+/,
    hr: /^ *((\* *){3,}|(- *){3,} *|(_ *){3,}) */,
    heading: /^(#{1,6}) +[\s\S]+/,
    lheading: /^([^\n]+)\n *(=|-){2,} */,
    blockquote: /^( *>[^\n]+.*)+/,
    list: /^ *(\*+|-+|\d+\.) [\s\S]+/,
    def: /^ *\[([^\]]+)\]: *<?([^\s>]+)>?(?: +["(]([^\n]+)[")])? */,

    link: /!?\[.*\]\(.*\)/,
    reflink: /!?\[.*\]\s*\[([^\]]*)\]/,
    strong: /__(\S[\s\S]*\h)__|\*\*(\S[\s\S]*\S)\*\*/,
    em: /_(\S[\s\S]*\S)_|\*(\S[\s\S]*\S)\*/,
    strikeThrough: /~~(\S[\s\S]*\S)~~/,
    code: /(`+)\s*([\s\S]*?[^`])\s*\1(?!`)/,

    verticalBar: /\u007C/,

    codeblockGfm: /^(`{3,})/,
    codeblockTildes: /^(~{3,})/
};

Renderer.markdownTextToEscapeHtmlRx = /<([a-zA-Z_][a-zA-Z0-9\-\._]*)(\s|[^\\/>])*\/?>|<(\/)([a-zA-Z_][a-zA-Z0-9\-\._]*)\s*\/?>|<!--[^-]+-->|<([a-zA-Z_][a-zA-Z0-9\-\.:/]*)>/g;

Renderer.prototype._isNeedEscape = function(text) {
    var res = false;
    var markdownTextToEscapeRx = Renderer.markdownTextToEscapeRx;
    var type;

    for (type in markdownTextToEscapeRx) {
        if (markdownTextToEscapeRx.hasOwnProperty(type) && markdownTextToEscapeRx[type].test(text)) {
            res = true;
            break;
        }
    }

    return res;
};

Renderer.prototype._isNeedEscapeHtml = function(text) {
    return Renderer.markdownTextToEscapeHtmlRx.test(text);
};

/**
 * Clone rules
 * @param {object} destination object for apply rules
 * @param {object} source source object for clone rules
 */
function cloneRules(destination, source) {
    forEachOwnProperties(source, function(value, key) {
        if (key !== 'converter') {
            if (!destination[key]) {
                destination[key] = {};
            }
            cloneRules(destination[key], value);
        } else {
            destination[key] = value;
        }
    });
}

Renderer.prototype.mix = function(renderer) {
    cloneRules(this.rules, renderer.rules);
};

/**
 * Renderer factory
 * Return new renderer
 * @param {Renderer} srcRenderer renderer to extend
 * @param {object} rules rule object, key(rule selector), value(converter function)
 * @returns {Renderer} renderer
 */
Renderer.factory = function(srcRenderer, rules) {
    var renderer = new Renderer();

    if (!rules) {
        rules = srcRenderer;
    } else {
        renderer.mix(srcRenderer);
    }

    renderer.addRules(rules);

    return renderer;
};

module.exports = Renderer;


/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * @fileoverview Implements Github flavored markdown renderer
 * @author NHN Ent. FE Development Lab <dl_javascript@nhnent.com>
 */



var Renderer = __webpack_require__(1),
    basicRenderer = __webpack_require__(0);

/**
 * gfmRenderer
 * github flavored Markdown Renderer
 *
 * we didnt render gfm br here because we need distingush returns that made by block with br
 * so we render gfm br later in toMark.js finalize function
 * @exports gfmRenderer
 * @augments Renderer
 */
var gfmRenderer = Renderer.factory(basicRenderer, {
    'DEL, S': function(node, subContent) {
        return '~~' + subContent + '~~';
    },
    'PRE CODE': function(node, subContent) {
        var backticks;
        var language = '';
        var numberOfBackticks = node.getAttribute('data-backticks');

        if (node.getAttribute('data-language')) {
            language = ' ' + node.getAttribute('data-language');
        }
        numberOfBackticks = parseInt(numberOfBackticks, 10);
        backticks = isNaN(numberOfBackticks) ? '```' : Array(numberOfBackticks + 1).join('`');

        subContent = subContent.replace(/(\r\n)|(\r)|(\n)/g, this.lineFeedReplacement);

        return '\n\n' + backticks + language + '\n' + subContent + '\n' + backticks + '\n\n';
    },
    'PRE': function(node, subContent) {
        return subContent;
    },
    'UL LI': function(node, subContent) {
        return basicRenderer.convert(node, makeTaskIfNeed(node, subContent));
    },
    'OL LI': function(node, subContent) {
        return basicRenderer.convert(node, makeTaskIfNeed(node, subContent));
    },

    //Table
    'TABLE': function(node, subContent) {
        return '\n\n' + subContent + '\n\n';
    },
    'TBODY, TFOOT': function(node, subContent) {
        return subContent;
    },
    'TR TD, TR TH': function(node, subContent) {
        subContent = subContent.replace(/(\r\n)|(\r)|(\n)/g, '');

        return ' ' + subContent + ' |';
    },
    'TD BR, TH BR': function() {
        return '<br>';
    },
    'TR': function(node, subContent) {
        return '|' + subContent + '\n';
    },
    'THEAD': function(node, subContent) {
        var i, ths, thsLength,
            result = '';

        ths = findChildTag(findChildTag(node, 'TR')[0], 'TH');
        thsLength = ths.length;

        for (i = 0; i < thsLength; i += 1) {
            result += ' ' + makeTableHeadAlignText(ths[i]) + ' |';
        }

        return subContent ? (subContent + '|' + result + '\n') : '';
    }
});
/**
 * Make task Markdown string if need
 * @param {HTMLElement} node Passed HTML Element
 * @param {string} subContent node's content
 * @returns {string}
 */
function makeTaskIfNeed(node, subContent) {
    var condition;

    if (node.className.indexOf('task-list-item') !== -1) {
        condition = node.className.indexOf('checked') !== -1 ? 'x' : ' ';
        subContent = '[' + condition + '] ' + subContent;
    }

    return subContent;
}
/**
 * Make table head align text
 * @param {HTMLElement} th Table head cell element
 * @returns {string}
 */
function makeTableHeadAlignText(th) {
    var align, leftAlignValue, rightAlignValue, textLength;

    align = th.align;
    textLength = th.textContent ? th.textContent.length : th.innerText.length;
    leftAlignValue = '';
    rightAlignValue = '';

    if (align) {
        if (align === 'left') {
            leftAlignValue = ':';
            textLength -= 1;
        } else if (align === 'right') {
            rightAlignValue = ':';
            textLength -= 1;
        } else if (align === 'center') {
            rightAlignValue = ':';
            leftAlignValue = ':';
            textLength -= 2;
        }
    }

    return leftAlignValue + repeatString('-', textLength) + rightAlignValue;
}
/**
 * Find child element of given tag name
 * @param {HTMLElement} node starting element
 * @param {string} tagName Tag name for search
 * @returns {Array.<HTMLElement>}
 */
function findChildTag(node, tagName) {
    var i,
        childNodes = node.childNodes,
        childLength = childNodes.length,
        result = [];

    for (i = 0; i < childLength; i += 1) {
        if (childNodes[i].tagName && childNodes[i].tagName === tagName) {
            result.push(childNodes[i]);
        }
    }

    return result;
}
/**
 * Repeat given string
 * @param {string} pattern String for repeat
 * @param {number} count Amount of repeat
 * @returns {string}
 */
function repeatString(pattern, count) {
    var result = pattern;

    count = Math.max(count, 3);

    while (count > 1) {
        result += pattern;
        count -= 1;
    }

    return result;
}
module.exports = gfmRenderer;


/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * @fileoverview Implements entry point
 * @author NHN Ent. FE Development Lab <dl_javascript@nhnent.com>
 */



var toMark = __webpack_require__(4);
var Renderer = __webpack_require__(1);
var basicRenderer = __webpack_require__(0);
var gfmRenderer = __webpack_require__(2);

toMark.Renderer = Renderer;
toMark.basicRenderer = basicRenderer;
toMark.gfmRenderer = gfmRenderer;

module.exports = toMark;


/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * @fileoverview Implements toMark
 * @author NHN Ent. FE Development Lab <dl_javascript@nhnent.com>
 */



var DomRunner = __webpack_require__(5),
    toDom = __webpack_require__(6),
    basicRenderer = __webpack_require__(0),
    gfmRenderer = __webpack_require__(2);

var FIND_UNUSED_BRS_RX = /[ \xA0]+(\n\n)/g,
    FIND_FIRST_LAST_WITH_SPACE_RETURNS_RX = /^[\n]+|[\s\n]+$/g,
    FIND_MULTIPLE_BRS_RX = /([ \xA0]+\n){2,}/g,
    FIND_RETURNS_RX = /([ \xA0]){2,}\n/g,
    FIND_RETURNS_AND_SPACE_RX = /[ \xA0\n]+/g;

/**
 * toMark
 * @exports toMark
 * @param {string} htmlStr html string to convert
 * @param {object} options option
 * @param {boolean} options.gfm if this property is false turn off it cant parse gfm
 * @param {Renderer} options.renderer pass renderer to use
 * @returns {string} converted markdown text
 * @example
 * toMark('<h1>hello world</h1>'); // "# hello world"
 * toMark('<del>strike</del>'); // "~~strike~~"
 * toMark('<del>strike</del>', {gfm: false}); // "strike"
 */
function toMark(htmlStr, options) {
    var runner,
        isGfm = true,
        renderer;

    if (!htmlStr) {
        return '';
    }

    renderer = gfmRenderer;

    if (options) {
        isGfm = options.gfm;

        if (isGfm === false) {
            renderer = basicRenderer;
        }

        renderer = options.renderer || renderer;
    }

    runner = new DomRunner(toDom(htmlStr));

    return finalize(parse(runner, renderer), isGfm, renderer.lineFeedReplacement);
}

/**
 * parse
 * Parse dom to markdown
 * @param {DomRunner} runner runner
 * @param {Renderer} renderer renderer
 * @returns {string} markdown text
 */
function parse(runner, renderer) {
    var markdownContent = '';

    while (runner.next()) {
        markdownContent += tracker(runner, renderer);
    }

    return markdownContent;
}

/**
 * finalize
 * Remove first and last return character
 * @param {string} text text to finalize
 * @param {boolean} isGfm isGfm flag
 * @param {string} lineFeedReplacement Line feed replacement text
 * @returns {string} result
 */
function finalize(text, isGfm, lineFeedReplacement) {
    //collapse return and <br>
    //BR뒤에 바로 \n이 이어지면 BR은 불필요하다
    text = text.replace(FIND_UNUSED_BRS_RX, '\n');
    //console.log(2, JSON.stringify(text));

    //collapse multiple br
    //두개 이상의 BR개행은 한개로
    text = text.replace(FIND_MULTIPLE_BRS_RX, '\n\n');
    //console.log(3, JSON.stringify(text));

    text = text.replace(FIND_RETURNS_AND_SPACE_RX, function(matched) {
        var returnCount = (matched.match(/\n/g) || []).length;

        if (returnCount >= 3) {
            return '\n\n';
        } else if (matched >= 1) {
            return '\n';
        }

        return matched;
    });
    //console.log(3, JSON.stringify(text));

    //remove first and last \n
    //시작과 마지막 개행제거
    text = text.replace(FIND_FIRST_LAST_WITH_SPACE_RETURNS_RX, '');
    //console.log(JSON.stringify(text));

    text = text.replace(new RegExp(lineFeedReplacement, 'g'), '\n');
    //in gfm replace '  \n' make by <br> to '\n'
    //gfm모드인경우 임의 개행에 스페이스를 제거
    if (isGfm) {
        text = text.replace(FIND_RETURNS_RX, '\n');
    }
    //console.log(7, JSON.stringify(text));

    return text;
}


/**
 * tracker
 * Iterate childNodes and process conversion using recursive call
 * @param {DomRunner} runner dom runner
 * @param {Renderer} renderer renderer to use
 * @returns {string} processed text
 */
function tracker(runner, renderer) {
    var i,
        t,
        subContent = '',
        content;

    var node = runner.getNode();

    for (i = 0, t = node.childNodes.length; i < t; i += 1) {
        runner.next();
        subContent += tracker(runner, renderer);
    }

    content = renderer.convert(node, subContent);

    return content;
}

module.exports = toMark;


/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * @fileoverview Implements DomRunner
 * @author NHN Ent. FE Development Lab <dl_javascript@nhnent.com>
 */



/**
 * Node Type Value
 */
var NODE = {
    ELEMENT_NODE: 1,
    ATTRIBUTE_NODE: 2,
    TEXT_NODE: 3
};

/**
 * DomRunner
 * @exports DomRunner
 * @constructor
 * @class
 * @param {HTMLElement} node A root node that it has nodes to iterate(not iterate itself and its any siblings)
 */
function DomRunner(node) {
    this._normalizeTextChildren(node);

    this._root = node;
    this._current = node;
}


/**
 * next
 * Iterate next node
 * @returns {HTMLElement} next node
 */
DomRunner.prototype.next = function() {
    var current = this._current,
        node;

    if (this._current) {
        node = this._getNextNode(current);

        while (this._isNeedNextSearch(node, current)) {
            current = current.parentNode;
            node = current.nextSibling;
        }

        this._current = node;
    }

    return this._current;
};

/**
 * getNode
 * Return current node
 * @returns {HTMLElement} current node
 */
DomRunner.prototype.getNode = function() {
    this._normalizeTextChildren(this._current);

    return this._current;
};

DomRunner.prototype._normalizeTextChildren = function(node) {
    var childNode, nextNode;
    if (!node || node.childNodes.length < 2) {
        return;
    }

    childNode = node.firstChild;
    while (childNode.nextSibling) {
        nextNode = childNode.nextSibling;
        if (childNode.nodeType === NODE.TEXT_NODE && nextNode.nodeType === NODE.TEXT_NODE) {
            childNode.nodeValue += nextNode.nodeValue;
            node.removeChild(nextNode);
        } else {
            childNode = nextNode;
        }
    }
};

/**
 * getNodeText
 * Get current node's text content
 * @returns {string} text
 */
DomRunner.prototype.getNodeText = function() {
    var node = this.getNode(),
        text;

    if (node.nodeType === NODE.TEXT_NODE) {
        text = node.nodeValue;
    } else {
        text = node.textContent || node.innerText;
    }

    return text;
};

/**
 * _isNeedNextSearch
 * Check if there is next node to iterate
 * @private
 * @param {HTMLElement} node next node
 * @param {HTMLElement} current next node
 * @returns {boolean} result
 */
DomRunner.prototype._isNeedNextSearch = function(node, current) {
    return !node && current !== this._root && current.parentNode !== this._root;
};

/**
 * _getNextNode
 * Return available next node
 * @private
 * @param {HTMLElement} current current node
 * @returns {node} next node
 */
DomRunner.prototype._getNextNode = function(current) {
    return current.firstChild || current.nextSibling;
};

DomRunner.NODE_TYPE = NODE;

module.exports = DomRunner;


/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * @fileoverview Implements toDom
 * @author NHN Ent. FE Development Lab <dl_javascript@nhnent.com>
 */



var FIND_FIRST_LAST_SPACE_OR_RETURN_OR_TAB_RX = /^[\s\r\n\t]+|[\s\r\n\t]+$/g,
    FIND_RETURN_OR_TAB_BETWEEN_TAGS_RX = />[\r\n\t]+</g,
    FIND_WHOLE_SPACE_MORE_THAN_ONE_BETWEEN_TAGS_RX = />[ ]+</g;

/**
 * toDom
 * @exports toDom
 * @param {HTMLElement|string} html DOM Node root or HTML string
 * @returns {HTMLElement[]} dom element
 */
function toDom(html) {
    var wrapper;

    if (Object.prototype.toString.call(html) === '[object String]') {
        wrapper = document.createElement('div');
        wrapper.innerHTML = preProcess(html);
    } else {
        wrapper = html;
    }

    wrapper.__htmlRootByToMark = true;

    return wrapper;
}

/**
 * Pre process for html string
 * @param {string} html Source HTML string
 * @returns {string}
 */
function preProcess(html) {
    //trim text
    html = html.replace(FIND_FIRST_LAST_SPACE_OR_RETURN_OR_TAB_RX, '');

    //trim between tags
    html = html.replace(FIND_RETURN_OR_TAB_BETWEEN_TAGS_RX, '><');

    //remove spaces more than 1(if need more space, must use &nbsp)
    html = html.replace(FIND_WHOLE_SPACE_MORE_THAN_ONE_BETWEEN_TAGS_RX, '> <');

    return html;
}

toDom.preProcess = preProcess;

module.exports = toDom;


/***/ })
/******/ ]);
});

/***/ }),
/* 31 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CodeBlockManager = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /**
fileoverview Implements CodeBlockManager
author NHN Ent. FE Development Lab <dl_javascript@nhnent.com>



var _highlight = __webpack_require__(118);

var _highlight2 = _interopRequireDefault(_highlight);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Class Code Block Manager
 */
var CodeBlockManager = function () {
  /**
   * Creates an instance of CodeBlockManager.
   * @memberof CodeBlockManager
   */
  function CodeBlockManager() {
    _classCallCheck(this, CodeBlockManager);

    this._replacers = {};
  }

  /**
   * Set replacer for code block
   * @param {string} language - code block language
   * @param {function} replacer - replacer function to code block element
   */


  _createClass(CodeBlockManager, [{
    key: 'setReplacer',
    value: function setReplacer(language, replacer) {
      this._replacers[language] = replacer;
    }

    /**
     * get replacer for code block
     * @param {string} language - code block type
     * @returns {function} - replacer function
     * @memberof CodeBlockManager
     */

  }, {
    key: 'getReplacer',
    value: function getReplacer(language) {
      return this._replacers[language];
    }

    /**
     * Create code block html.
     * @param {string} language - code block language
     * @param {string} codeText - code text
     * @returns {string}
     */

  }, {
    key: 'createCodeBlockHtml',
    value: function createCodeBlockHtml(language, codeText) {
      var replacer = this.getReplacer(language);
      var html = void 0;

      if (replacer) {
        html = replacer(codeText, language);
      } else {
        html = _highlight2.default.getLanguage(language) ? _highlight2.default.highlight(language, codeText).value : escape(codeText, false);
      }

      return html;
    }

    /**
     * get supported languages by highlight-js
     * @returns {Array<string>} - supported languages by highlight-js
     * @static
     */

  }], [{
    key: 'getHighlightJSLanguages',
    value: function getHighlightJSLanguages() {
      return _highlight2.default.listLanguages();
    }
  }]);

  return CodeBlockManager;
}();

/**
 * escape code from markdown-it
 * @param {string} html HTML string
 * @param {string} encode Boolean value of whether encode or not
 * @returns {string}
 * @ignore
 */


function escape(html, encode) {
  return html.replace(!encode ? /&(?!#?\w+;)/g : /&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/"/g, '&quot;').replace(/'/g, '&#39;');
}

exports.CodeBlockManager = CodeBlockManager;
exports.default = new CodeBlockManager();

/***/ }),
/* 32 */
/***/ (function(module, exports, __webpack_require__) {

// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

module.exports = Stream;

var EE = __webpack_require__(18).EventEmitter;
var inherits = __webpack_require__(9);

inherits(Stream, EE);
Stream.Readable = __webpack_require__(19);
Stream.Writable = __webpack_require__(306);
Stream.Duplex = __webpack_require__(307);
Stream.Transform = __webpack_require__(308);
Stream.PassThrough = __webpack_require__(309);

// Backwards-compat with node 0.4.x
Stream.Stream = Stream;



// old-style streams.  Note that the pipe method (the only relevant
// part of this class) is overridden in the Readable class.

function Stream() {
  EE.call(this);
}

Stream.prototype.pipe = function(dest, options) {
  var source = this;

  function ondata(chunk) {
    if (dest.writable) {
      if (false === dest.write(chunk) && source.pause) {
        source.pause();
      }
    }
  }

  source.on('data', ondata);

  function ondrain() {
    if (source.readable && source.resume) {
      source.resume();
    }
  }

  dest.on('drain', ondrain);

  // If the 'end' option is not supplied, dest.end() will be called when
  // source gets the 'end' or 'close' events.  Only dest.end() once.
  if (!dest._isStdio && (!options || options.end !== false)) {
    source.on('end', onend);
    source.on('close', onclose);
  }

  var didOnEnd = false;
  function onend() {
    if (didOnEnd) return;
    didOnEnd = true;

    dest.end();
  }


  function onclose() {
    if (didOnEnd) return;
    didOnEnd = true;

    if (typeof dest.destroy === 'function') dest.destroy();
  }

  // don't leave dangling pipes when there are errors.
  function onerror(er) {
    cleanup();
    if (EE.listenerCount(this, 'error') === 0) {
      throw er; // Unhandled stream error in pipe.
    }
  }

  source.on('error', onerror);
  dest.on('error', onerror);

  // remove all the event listeners that were added.
  function cleanup() {
    source.removeListener('data', ondata);
    dest.removeListener('drain', ondrain);

    source.removeListener('end', onend);
    source.removeListener('close', onclose);

    source.removeListener('error', onerror);
    dest.removeListener('error', onerror);

    source.removeListener('end', cleanup);
    source.removeListener('close', cleanup);

    dest.removeListener('close', cleanup);
  }

  source.on('end', cleanup);
  source.on('close', cleanup);

  dest.on('close', cleanup);

  dest.emit('pipe', source);

  // Allow for unix-like usage: A.pipe(B).pipe(C)
  return dest;
};


/***/ }),
/* 33 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global, process) {// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.



/*<replacement>*/

var processNextTick = __webpack_require__(12);
/*</replacement>*/

module.exports = Readable;

/*<replacement>*/
var isArray = __webpack_require__(34);
/*</replacement>*/

/*<replacement>*/
var Duplex;
/*</replacement>*/

Readable.ReadableState = ReadableState;

/*<replacement>*/
var EE = __webpack_require__(18).EventEmitter;

var EElistenerCount = function (emitter, type) {
  return emitter.listeners(type).length;
};
/*</replacement>*/

/*<replacement>*/
var Stream = __webpack_require__(35);
/*</replacement>*/

// TODO(bmeurer): Change this back to const once hole checks are
// properly optimized away early in Ignition+TurboFan.
/*<replacement>*/
var Buffer = __webpack_require__(13).Buffer;
var OurUint8Array = global.Uint8Array || function () {};
function _uint8ArrayToBuffer(chunk) {
  return Buffer.from(chunk);
}
function _isUint8Array(obj) {
  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
}
/*</replacement>*/

/*<replacement>*/
var util = __webpack_require__(10);
util.inherits = __webpack_require__(9);
/*</replacement>*/

/*<replacement>*/
var debugUtil = __webpack_require__(300);
var debug = void 0;
if (debugUtil && debugUtil.debuglog) {
  debug = debugUtil.debuglog('stream');
} else {
  debug = function () {};
}
/*</replacement>*/

var BufferList = __webpack_require__(301);
var destroyImpl = __webpack_require__(37);
var StringDecoder;

util.inherits(Readable, Stream);

var kProxyEvents = ['error', 'close', 'destroy', 'pause', 'resume'];

function prependListener(emitter, event, fn) {
  // Sadly this is not cacheable as some libraries bundle their own
  // event emitter implementation with them.
  if (typeof emitter.prependListener === 'function') {
    return emitter.prependListener(event, fn);
  } else {
    // This is a hack to make sure that our error handler is attached before any
    // userland ones.  NEVER DO THIS. This is here only because this code needs
    // to continue to work with older versions of Node.js that do not include
    // the prependListener() method. The goal is to eventually remove this hack.
    if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);else if (isArray(emitter._events[event])) emitter._events[event].unshift(fn);else emitter._events[event] = [fn, emitter._events[event]];
  }
}

function ReadableState(options, stream) {
  Duplex = Duplex || __webpack_require__(7);

  options = options || {};

  // object stream flag. Used to make read(n) ignore n and to
  // make all the buffer merging and length checks go away
  this.objectMode = !!options.objectMode;

  if (stream instanceof Duplex) this.objectMode = this.objectMode || !!options.readableObjectMode;

  // the point at which it stops calling _read() to fill the buffer
  // Note: 0 is a valid value, means "don't call _read preemptively ever"
  var hwm = options.highWaterMark;
  var defaultHwm = this.objectMode ? 16 : 16 * 1024;
  this.highWaterMark = hwm || hwm === 0 ? hwm : defaultHwm;

  // cast to ints.
  this.highWaterMark = Math.floor(this.highWaterMark);

  // A linked list is used to store data chunks instead of an array because the
  // linked list can remove elements from the beginning faster than
  // array.shift()
  this.buffer = new BufferList();
  this.length = 0;
  this.pipes = null;
  this.pipesCount = 0;
  this.flowing = null;
  this.ended = false;
  this.endEmitted = false;
  this.reading = false;

  // a flag to be able to tell if the event 'readable'/'data' is emitted
  // immediately, or on a later tick.  We set this to true at first, because
  // any actions that shouldn't happen until "later" should generally also
  // not happen before the first read call.
  this.sync = true;

  // whenever we return null, then we set a flag to say
  // that we're awaiting a 'readable' event emission.
  this.needReadable = false;
  this.emittedReadable = false;
  this.readableListening = false;
  this.resumeScheduled = false;

  // has it been destroyed
  this.destroyed = false;

  // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.
  this.defaultEncoding = options.defaultEncoding || 'utf8';

  // the number of writers that are awaiting a drain event in .pipe()s
  this.awaitDrain = 0;

  // if true, a maybeReadMore has been scheduled
  this.readingMore = false;

  this.decoder = null;
  this.encoding = null;
  if (options.encoding) {
    if (!StringDecoder) StringDecoder = __webpack_require__(38).StringDecoder;
    this.decoder = new StringDecoder(options.encoding);
    this.encoding = options.encoding;
  }
}

function Readable(options) {
  Duplex = Duplex || __webpack_require__(7);

  if (!(this instanceof Readable)) return new Readable(options);

  this._readableState = new ReadableState(options, this);

  // legacy
  this.readable = true;

  if (options) {
    if (typeof options.read === 'function') this._read = options.read;

    if (typeof options.destroy === 'function') this._destroy = options.destroy;
  }

  Stream.call(this);
}

Object.defineProperty(Readable.prototype, 'destroyed', {
  get: function () {
    if (this._readableState === undefined) {
      return false;
    }
    return this._readableState.destroyed;
  },
  set: function (value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (!this._readableState) {
      return;
    }

    // backward compatibility, the user is explicitly
    // managing destroyed
    this._readableState.destroyed = value;
  }
});

Readable.prototype.destroy = destroyImpl.destroy;
Readable.prototype._undestroy = destroyImpl.undestroy;
Readable.prototype._destroy = function (err, cb) {
  this.push(null);
  cb(err);
};

// Manually shove something into the read() buffer.
// This returns true if the highWaterMark has not been hit yet,
// similar to how Writable.write() returns true if you should
// write() some more.
Readable.prototype.push = function (chunk, encoding) {
  var state = this._readableState;
  var skipChunkCheck;

  if (!state.objectMode) {
    if (typeof chunk === 'string') {
      encoding = encoding || state.defaultEncoding;
      if (encoding !== state.encoding) {
        chunk = Buffer.from(chunk, encoding);
        encoding = '';
      }
      skipChunkCheck = true;
    }
  } else {
    skipChunkCheck = true;
  }

  return readableAddChunk(this, chunk, encoding, false, skipChunkCheck);
};

// Unshift should *always* be something directly out of read()
Readable.prototype.unshift = function (chunk) {
  return readableAddChunk(this, chunk, null, true, false);
};

function readableAddChunk(stream, chunk, encoding, addToFront, skipChunkCheck) {
  var state = stream._readableState;
  if (chunk === null) {
    state.reading = false;
    onEofChunk(stream, state);
  } else {
    var er;
    if (!skipChunkCheck) er = chunkInvalid(state, chunk);
    if (er) {
      stream.emit('error', er);
    } else if (state.objectMode || chunk && chunk.length > 0) {
      if (typeof chunk !== 'string' && !state.objectMode && Object.getPrototypeOf(chunk) !== Buffer.prototype) {
        chunk = _uint8ArrayToBuffer(chunk);
      }

      if (addToFront) {
        if (state.endEmitted) stream.emit('error', new Error('stream.unshift() after end event'));else addChunk(stream, state, chunk, true);
      } else if (state.ended) {
        stream.emit('error', new Error('stream.push() after EOF'));
      } else {
        state.reading = false;
        if (state.decoder && !encoding) {
          chunk = state.decoder.write(chunk);
          if (state.objectMode || chunk.length !== 0) addChunk(stream, state, chunk, false);else maybeReadMore(stream, state);
        } else {
          addChunk(stream, state, chunk, false);
        }
      }
    } else if (!addToFront) {
      state.reading = false;
    }
  }

  return needMoreData(state);
}

function addChunk(stream, state, chunk, addToFront) {
  if (state.flowing && state.length === 0 && !state.sync) {
    stream.emit('data', chunk);
    stream.read(0);
  } else {
    // update the buffer info.
    state.length += state.objectMode ? 1 : chunk.length;
    if (addToFront) state.buffer.unshift(chunk);else state.buffer.push(chunk);

    if (state.needReadable) emitReadable(stream);
  }
  maybeReadMore(stream, state);
}

function chunkInvalid(state, chunk) {
  var er;
  if (!_isUint8Array(chunk) && typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
    er = new TypeError('Invalid non-string/buffer chunk');
  }
  return er;
}

// if it's past the high water mark, we can push in some more.
// Also, if we have no data yet, we can stand some
// more bytes.  This is to work around cases where hwm=0,
// such as the repl.  Also, if the push() triggered a
// readable event, and the user called read(largeNumber) such that
// needReadable was set, then we ought to push more, so that another
// 'readable' event will be triggered.
function needMoreData(state) {
  return !state.ended && (state.needReadable || state.length < state.highWaterMark || state.length === 0);
}

Readable.prototype.isPaused = function () {
  return this._readableState.flowing === false;
};

// backwards compatibility.
Readable.prototype.setEncoding = function (enc) {
  if (!StringDecoder) StringDecoder = __webpack_require__(38).StringDecoder;
  this._readableState.decoder = new StringDecoder(enc);
  this._readableState.encoding = enc;
  return this;
};

// Don't raise the hwm > 8MB
var MAX_HWM = 0x800000;
function computeNewHighWaterMark(n) {
  if (n >= MAX_HWM) {
    n = MAX_HWM;
  } else {
    // Get the next highest power of 2 to prevent increasing hwm excessively in
    // tiny amounts
    n--;
    n |= n >>> 1;
    n |= n >>> 2;
    n |= n >>> 4;
    n |= n >>> 8;
    n |= n >>> 16;
    n++;
  }
  return n;
}

// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function howMuchToRead(n, state) {
  if (n <= 0 || state.length === 0 && state.ended) return 0;
  if (state.objectMode) return 1;
  if (n !== n) {
    // Only flow one buffer at a time
    if (state.flowing && state.length) return state.buffer.head.data.length;else return state.length;
  }
  // If we're asking for more than the current hwm, then raise the hwm.
  if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);
  if (n <= state.length) return n;
  // Don't have enough
  if (!state.ended) {
    state.needReadable = true;
    return 0;
  }
  return state.length;
}

// you can override either this method, or the async _read(n) below.
Readable.prototype.read = function (n) {
  debug('read', n);
  n = parseInt(n, 10);
  var state = this._readableState;
  var nOrig = n;

  if (n !== 0) state.emittedReadable = false;

  // if we're doing read(0) to trigger a readable event, but we
  // already have a bunch of data in the buffer, then just trigger
  // the 'readable' event and move on.
  if (n === 0 && state.needReadable && (state.length >= state.highWaterMark || state.ended)) {
    debug('read: emitReadable', state.length, state.ended);
    if (state.length === 0 && state.ended) endReadable(this);else emitReadable(this);
    return null;
  }

  n = howMuchToRead(n, state);

  // if we've ended, and we're now clear, then finish it up.
  if (n === 0 && state.ended) {
    if (state.length === 0) endReadable(this);
    return null;
  }

  // All the actual chunk generation logic needs to be
  // *below* the call to _read.  The reason is that in certain
  // synthetic stream cases, such as passthrough streams, _read
  // may be a completely synchronous operation which may change
  // the state of the read buffer, providing enough data when
  // before there was *not* enough.
  //
  // So, the steps are:
  // 1. Figure out what the state of things will be after we do
  // a read from the buffer.
  //
  // 2. If that resulting state will trigger a _read, then call _read.
  // Note that this may be asynchronous, or synchronous.  Yes, it is
  // deeply ugly to write APIs this way, but that still doesn't mean
  // that the Readable class should behave improperly, as streams are
  // designed to be sync/async agnostic.
  // Take note if the _read call is sync or async (ie, if the read call
  // has returned yet), so that we know whether or not it's safe to emit
  // 'readable' etc.
  //
  // 3. Actually pull the requested chunks out of the buffer and return.

  // if we need a readable event, then we need to do some reading.
  var doRead = state.needReadable;
  debug('need readable', doRead);

  // if we currently have less than the highWaterMark, then also read some
  if (state.length === 0 || state.length - n < state.highWaterMark) {
    doRead = true;
    debug('length less than watermark', doRead);
  }

  // however, if we've ended, then there's no point, and if we're already
  // reading, then it's unnecessary.
  if (state.ended || state.reading) {
    doRead = false;
    debug('reading or ended', doRead);
  } else if (doRead) {
    debug('do read');
    state.reading = true;
    state.sync = true;
    // if the length is currently zero, then we *need* a readable event.
    if (state.length === 0) state.needReadable = true;
    // call internal read method
    this._read(state.highWaterMark);
    state.sync = false;
    // If _read pushed data synchronously, then `reading` will be false,
    // and we need to re-evaluate how much data we can return to the user.
    if (!state.reading) n = howMuchToRead(nOrig, state);
  }

  var ret;
  if (n > 0) ret = fromList(n, state);else ret = null;

  if (ret === null) {
    state.needReadable = true;
    n = 0;
  } else {
    state.length -= n;
  }

  if (state.length === 0) {
    // If we have nothing in the buffer, then we want to know
    // as soon as we *do* get something into the buffer.
    if (!state.ended) state.needReadable = true;

    // If we tried to read() past the EOF, then emit end on the next tick.
    if (nOrig !== n && state.ended) endReadable(this);
  }

  if (ret !== null) this.emit('data', ret);

  return ret;
};

function onEofChunk(stream, state) {
  if (state.ended) return;
  if (state.decoder) {
    var chunk = state.decoder.end();
    if (chunk && chunk.length) {
      state.buffer.push(chunk);
      state.length += state.objectMode ? 1 : chunk.length;
    }
  }
  state.ended = true;

  // emit 'readable' now to make sure it gets picked up.
  emitReadable(stream);
}

// Don't emit readable right away in sync mode, because this can trigger
// another read() call => stack overflow.  This way, it might trigger
// a nextTick recursion warning, but that's not so bad.
function emitReadable(stream) {
  var state = stream._readableState;
  state.needReadable = false;
  if (!state.emittedReadable) {
    debug('emitReadable', state.flowing);
    state.emittedReadable = true;
    if (state.sync) processNextTick(emitReadable_, stream);else emitReadable_(stream);
  }
}

function emitReadable_(stream) {
  debug('emit readable');
  stream.emit('readable');
  flow(stream);
}

// at this point, the user has presumably seen the 'readable' event,
// and called read() to consume some data.  that may have triggered
// in turn another _read(n) call, in which case reading = true if
// it's in progress.
// However, if we're not ended, or reading, and the length < hwm,
// then go ahead and try to read some more preemptively.
function maybeReadMore(stream, state) {
  if (!state.readingMore) {
    state.readingMore = true;
    processNextTick(maybeReadMore_, stream, state);
  }
}

function maybeReadMore_(stream, state) {
  var len = state.length;
  while (!state.reading && !state.flowing && !state.ended && state.length < state.highWaterMark) {
    debug('maybeReadMore read 0');
    stream.read(0);
    if (len === state.length)
      // didn't get any data, stop spinning.
      break;else len = state.length;
  }
  state.readingMore = false;
}

// abstract method.  to be overridden in specific implementation classes.
// call cb(er, data) where data is <= n in length.
// for virtual (non-string, non-buffer) streams, "length" is somewhat
// arbitrary, and perhaps not very meaningful.
Readable.prototype._read = function (n) {
  this.emit('error', new Error('_read() is not implemented'));
};

Readable.prototype.pipe = function (dest, pipeOpts) {
  var src = this;
  var state = this._readableState;

  switch (state.pipesCount) {
    case 0:
      state.pipes = dest;
      break;
    case 1:
      state.pipes = [state.pipes, dest];
      break;
    default:
      state.pipes.push(dest);
      break;
  }
  state.pipesCount += 1;
  debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);

  var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;

  var endFn = doEnd ? onend : unpipe;
  if (state.endEmitted) processNextTick(endFn);else src.once('end', endFn);

  dest.on('unpipe', onunpipe);
  function onunpipe(readable, unpipeInfo) {
    debug('onunpipe');
    if (readable === src) {
      if (unpipeInfo && unpipeInfo.hasUnpiped === false) {
        unpipeInfo.hasUnpiped = true;
        cleanup();
      }
    }
  }

  function onend() {
    debug('onend');
    dest.end();
  }

  // when the dest drains, it reduces the awaitDrain counter
  // on the source.  This would be more elegant with a .once()
  // handler in flow(), but adding and removing repeatedly is
  // too slow.
  var ondrain = pipeOnDrain(src);
  dest.on('drain', ondrain);

  var cleanedUp = false;
  function cleanup() {
    debug('cleanup');
    // cleanup event handlers once the pipe is broken
    dest.removeListener('close', onclose);
    dest.removeListener('finish', onfinish);
    dest.removeListener('drain', ondrain);
    dest.removeListener('error', onerror);
    dest.removeListener('unpipe', onunpipe);
    src.removeListener('end', onend);
    src.removeListener('end', unpipe);
    src.removeListener('data', ondata);

    cleanedUp = true;

    // if the reader is waiting for a drain event from this
    // specific writer, then it would cause it to never start
    // flowing again.
    // So, if this is awaiting a drain, then we just call it now.
    // If we don't know, then assume that we are waiting for one.
    if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();
  }

  // If the user pushes more data while we're writing to dest then we'll end up
  // in ondata again. However, we only want to increase awaitDrain once because
  // dest will only emit one 'drain' event for the multiple writes.
  // => Introduce a guard on increasing awaitDrain.
  var increasedAwaitDrain = false;
  src.on('data', ondata);
  function ondata(chunk) {
    debug('ondata');
    increasedAwaitDrain = false;
    var ret = dest.write(chunk);
    if (false === ret && !increasedAwaitDrain) {
      // If the user unpiped during `dest.write()`, it is possible
      // to get stuck in a permanently paused state if that write
      // also returned false.
      // => Check whether `dest` is still a piping destination.
      if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {
        debug('false write response, pause', src._readableState.awaitDrain);
        src._readableState.awaitDrain++;
        increasedAwaitDrain = true;
      }
      src.pause();
    }
  }

  // if the dest has an error, then stop piping into it.
  // however, don't suppress the throwing behavior for this.
  function onerror(er) {
    debug('onerror', er);
    unpipe();
    dest.removeListener('error', onerror);
    if (EElistenerCount(dest, 'error') === 0) dest.emit('error', er);
  }

  // Make sure our error handler is attached before userland ones.
  prependListener(dest, 'error', onerror);

  // Both close and finish should trigger unpipe, but only once.
  function onclose() {
    dest.removeListener('finish', onfinish);
    unpipe();
  }
  dest.once('close', onclose);
  function onfinish() {
    debug('onfinish');
    dest.removeListener('close', onclose);
    unpipe();
  }
  dest.once('finish', onfinish);

  function unpipe() {
    debug('unpipe');
    src.unpipe(dest);
  }

  // tell the dest that it's being piped to
  dest.emit('pipe', src);

  // start the flow if it hasn't been started already.
  if (!state.flowing) {
    debug('pipe resume');
    src.resume();
  }

  return dest;
};

function pipeOnDrain(src) {
  return function () {
    var state = src._readableState;
    debug('pipeOnDrain', state.awaitDrain);
    if (state.awaitDrain) state.awaitDrain--;
    if (state.awaitDrain === 0 && EElistenerCount(src, 'data')) {
      state.flowing = true;
      flow(src);
    }
  };
}

Readable.prototype.unpipe = function (dest) {
  var state = this._readableState;
  var unpipeInfo = { hasUnpiped: false };

  // if we're not piping anywhere, then do nothing.
  if (state.pipesCount === 0) return this;

  // just one destination.  most common case.
  if (state.pipesCount === 1) {
    // passed in one, but it's not the right one.
    if (dest && dest !== state.pipes) return this;

    if (!dest) dest = state.pipes;

    // got a match.
    state.pipes = null;
    state.pipesCount = 0;
    state.flowing = false;
    if (dest) dest.emit('unpipe', this, unpipeInfo);
    return this;
  }

  // slow case. multiple pipe destinations.

  if (!dest) {
    // remove all.
    var dests = state.pipes;
    var len = state.pipesCount;
    state.pipes = null;
    state.pipesCount = 0;
    state.flowing = false;

    for (var i = 0; i < len; i++) {
      dests[i].emit('unpipe', this, unpipeInfo);
    }return this;
  }

  // try to find the right one.
  var index = indexOf(state.pipes, dest);
  if (index === -1) return this;

  state.pipes.splice(index, 1);
  state.pipesCount -= 1;
  if (state.pipesCount === 1) state.pipes = state.pipes[0];

  dest.emit('unpipe', this, unpipeInfo);

  return this;
};

// set up data events if they are asked for
// Ensure readable listeners eventually get something
Readable.prototype.on = function (ev, fn) {
  var res = Stream.prototype.on.call(this, ev, fn);

  if (ev === 'data') {
    // Start flowing on next tick if stream isn't explicitly paused
    if (this._readableState.flowing !== false) this.resume();
  } else if (ev === 'readable') {
    var state = this._readableState;
    if (!state.endEmitted && !state.readableListening) {
      state.readableListening = state.needReadable = true;
      state.emittedReadable = false;
      if (!state.reading) {
        processNextTick(nReadingNextTick, this);
      } else if (state.length) {
        emitReadable(this);
      }
    }
  }

  return res;
};
Readable.prototype.addListener = Readable.prototype.on;

function nReadingNextTick(self) {
  debug('readable nexttick read 0');
  self.read(0);
}

// pause() and resume() are remnants of the legacy readable stream API
// If the user uses them, then switch into old mode.
Readable.prototype.resume = function () {
  var state = this._readableState;
  if (!state.flowing) {
    debug('resume');
    state.flowing = true;
    resume(this, state);
  }
  return this;
};

function resume(stream, state) {
  if (!state.resumeScheduled) {
    state.resumeScheduled = true;
    processNextTick(resume_, stream, state);
  }
}

function resume_(stream, state) {
  if (!state.reading) {
    debug('resume read 0');
    stream.read(0);
  }

  state.resumeScheduled = false;
  state.awaitDrain = 0;
  stream.emit('resume');
  flow(stream);
  if (state.flowing && !state.reading) stream.read(0);
}

Readable.prototype.pause = function () {
  debug('call pause flowing=%j', this._readableState.flowing);
  if (false !== this._readableState.flowing) {
    debug('pause');
    this._readableState.flowing = false;
    this.emit('pause');
  }
  return this;
};

function flow(stream) {
  var state = stream._readableState;
  debug('flow', state.flowing);
  while (state.flowing && stream.read() !== null) {}
}

// wrap an old-style stream as the async data source.
// This is *not* part of the readable stream interface.
// It is an ugly unfortunate mess of history.
Readable.prototype.wrap = function (stream) {
  var state = this._readableState;
  var paused = false;

  var self = this;
  stream.on('end', function () {
    debug('wrapped end');
    if (state.decoder && !state.ended) {
      var chunk = state.decoder.end();
      if (chunk && chunk.length) self.push(chunk);
    }

    self.push(null);
  });

  stream.on('data', function (chunk) {
    debug('wrapped data');
    if (state.decoder) chunk = state.decoder.write(chunk);

    // don't skip over falsy values in objectMode
    if (state.objectMode && (chunk === null || chunk === undefined)) return;else if (!state.objectMode && (!chunk || !chunk.length)) return;

    var ret = self.push(chunk);
    if (!ret) {
      paused = true;
      stream.pause();
    }
  });

  // proxy all the other methods.
  // important when wrapping filters and duplexes.
  for (var i in stream) {
    if (this[i] === undefined && typeof stream[i] === 'function') {
      this[i] = function (method) {
        return function () {
          return stream[method].apply(stream, arguments);
        };
      }(i);
    }
  }

  // proxy certain important events.
  for (var n = 0; n < kProxyEvents.length; n++) {
    stream.on(kProxyEvents[n], self.emit.bind(self, kProxyEvents[n]));
  }

  // when we try to consume some more bytes, simply unpause the
  // underlying stream.
  self._read = function (n) {
    debug('wrapped _read', n);
    if (paused) {
      paused = false;
      stream.resume();
    }
  };

  return self;
};

// exposed for testing purposes only.
Readable._fromList = fromList;

// Pluck off n bytes from an array of buffers.
// Length is the combined lengths of all the buffers in the list.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function fromList(n, state) {
  // nothing buffered
  if (state.length === 0) return null;

  var ret;
  if (state.objectMode) ret = state.buffer.shift();else if (!n || n >= state.length) {
    // read it all, truncate the list
    if (state.decoder) ret = state.buffer.join('');else if (state.buffer.length === 1) ret = state.buffer.head.data;else ret = state.buffer.concat(state.length);
    state.buffer.clear();
  } else {
    // read part of list
    ret = fromListPartial(n, state.buffer, state.decoder);
  }

  return ret;
}

// Extracts only enough buffered data to satisfy the amount requested.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function fromListPartial(n, list, hasStrings) {
  var ret;
  if (n < list.head.data.length) {
    // slice is the same for buffers and strings
    ret = list.head.data.slice(0, n);
    list.head.data = list.head.data.slice(n);
  } else if (n === list.head.data.length) {
    // first chunk is a perfect match
    ret = list.shift();
  } else {
    // result spans more than one buffer
    ret = hasStrings ? copyFromBufferString(n, list) : copyFromBuffer(n, list);
  }
  return ret;
}

// Copies a specified amount of characters from the list of buffered data
// chunks.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function copyFromBufferString(n, list) {
  var p = list.head;
  var c = 1;
  var ret = p.data;
  n -= ret.length;
  while (p = p.next) {
    var str = p.data;
    var nb = n > str.length ? str.length : n;
    if (nb === str.length) ret += str;else ret += str.slice(0, n);
    n -= nb;
    if (n === 0) {
      if (nb === str.length) {
        ++c;
        if (p.next) list.head = p.next;else list.head = list.tail = null;
      } else {
        list.head = p;
        p.data = str.slice(nb);
      }
      break;
    }
    ++c;
  }
  list.length -= c;
  return ret;
}

// Copies a specified amount of bytes from the list of buffered data chunks.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function copyFromBuffer(n, list) {
  var ret = Buffer.allocUnsafe(n);
  var p = list.head;
  var c = 1;
  p.data.copy(ret);
  n -= p.data.length;
  while (p = p.next) {
    var buf = p.data;
    var nb = n > buf.length ? buf.length : n;
    buf.copy(ret, ret.length - n, 0, nb);
    n -= nb;
    if (n === 0) {
      if (nb === buf.length) {
        ++c;
        if (p.next) list.head = p.next;else list.head = list.tail = null;
      } else {
        list.head = p;
        p.data = buf.slice(nb);
      }
      break;
    }
    ++c;
  }
  list.length -= c;
  return ret;
}

function endReadable(stream) {
  var state = stream._readableState;

  // If we get here before consuming all the bytes, then that is a
  // bug in node.  Should never happen.
  if (state.length > 0) throw new Error('"endReadable()" called on non-empty stream');

  if (!state.endEmitted) {
    state.ended = true;
    processNextTick(endReadableNT, state, stream);
  }
}

function endReadableNT(state, stream) {
  // Check that we didn't get one last unshift.
  if (!state.endEmitted && state.length === 0) {
    state.endEmitted = true;
    stream.readable = false;
    stream.emit('end');
  }
}

function forEach(xs, f) {
  for (var i = 0, l = xs.length; i < l; i++) {
    f(xs[i], i);
  }
}

function indexOf(xs, x) {
  for (var i = 0, l = xs.length; i < l; i++) {
    if (xs[i] === x) return i;
  }
  return -1;
}
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(8), __webpack_require__(11)))

/***/ }),
/* 34 */
/***/ (function(module, exports) {

var toString = {}.toString;

module.exports = Array.isArray || function (arr) {
  return toString.call(arr) == '[object Array]';
};


/***/ }),
/* 35 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(18).EventEmitter;


/***/ }),
/* 36 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */
/* eslint-disable no-proto */



var base64 = __webpack_require__(298)
var ieee754 = __webpack_require__(299)
var isArray = __webpack_require__(34)

exports.Buffer = Buffer
exports.SlowBuffer = SlowBuffer
exports.INSPECT_MAX_BYTES = 50

/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Use Object implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * Due to various browser bugs, sometimes the Object implementation will be used even
 * when the browser supports typed arrays.
 *
 * Note:
 *
 *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
 *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
 *
 *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
 *
 *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
 *     incorrect length in some situations.

 * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
 * get the Object implementation, which is slower but behaves correctly.
 */
Buffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined
  ? global.TYPED_ARRAY_SUPPORT
  : typedArraySupport()

/*
 * Export kMaxLength after typed array support is determined.
 */
exports.kMaxLength = kMaxLength()

function typedArraySupport () {
  try {
    var arr = new Uint8Array(1)
    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}
    return arr.foo() === 42 && // typed array instances can be augmented
        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`
        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`
  } catch (e) {
    return false
  }
}

function kMaxLength () {
  return Buffer.TYPED_ARRAY_SUPPORT
    ? 0x7fffffff
    : 0x3fffffff
}

function createBuffer (that, length) {
  if (kMaxLength() < length) {
    throw new RangeError('Invalid typed array length')
  }
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Return an augmented `Uint8Array` instance, for best performance
    that = new Uint8Array(length)
    that.__proto__ = Buffer.prototype
  } else {
    // Fallback: Return an object instance of the Buffer class
    if (that === null) {
      that = new Buffer(length)
    }
    that.length = length
  }

  return that
}

/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */

function Buffer (arg, encodingOrOffset, length) {
  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {
    return new Buffer(arg, encodingOrOffset, length)
  }

  // Common case.
  if (typeof arg === 'number') {
    if (typeof encodingOrOffset === 'string') {
      throw new Error(
        'If encoding is specified then the first argument must be a string'
      )
    }
    return allocUnsafe(this, arg)
  }
  return from(this, arg, encodingOrOffset, length)
}

Buffer.poolSize = 8192 // not used by this implementation

// TODO: Legacy, not needed anymore. Remove in next major version.
Buffer._augment = function (arr) {
  arr.__proto__ = Buffer.prototype
  return arr
}

function from (that, value, encodingOrOffset, length) {
  if (typeof value === 'number') {
    throw new TypeError('"value" argument must not be a number')
  }

  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {
    return fromArrayBuffer(that, value, encodingOrOffset, length)
  }

  if (typeof value === 'string') {
    return fromString(that, value, encodingOrOffset)
  }

  return fromObject(that, value)
}

/**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/
Buffer.from = function (value, encodingOrOffset, length) {
  return from(null, value, encodingOrOffset, length)
}

if (Buffer.TYPED_ARRAY_SUPPORT) {
  Buffer.prototype.__proto__ = Uint8Array.prototype
  Buffer.__proto__ = Uint8Array
  if (typeof Symbol !== 'undefined' && Symbol.species &&
      Buffer[Symbol.species] === Buffer) {
    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
    Object.defineProperty(Buffer, Symbol.species, {
      value: null,
      configurable: true
    })
  }
}

function assertSize (size) {
  if (typeof size !== 'number') {
    throw new TypeError('"size" argument must be a number')
  } else if (size < 0) {
    throw new RangeError('"size" argument must not be negative')
  }
}

function alloc (that, size, fill, encoding) {
  assertSize(size)
  if (size <= 0) {
    return createBuffer(that, size)
  }
  if (fill !== undefined) {
    // Only pay attention to encoding if it's a string. This
    // prevents accidentally sending in a number that would
    // be interpretted as a start offset.
    return typeof encoding === 'string'
      ? createBuffer(that, size).fill(fill, encoding)
      : createBuffer(that, size).fill(fill)
  }
  return createBuffer(that, size)
}

/**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/
Buffer.alloc = function (size, fill, encoding) {
  return alloc(null, size, fill, encoding)
}

function allocUnsafe (that, size) {
  assertSize(size)
  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)
  if (!Buffer.TYPED_ARRAY_SUPPORT) {
    for (var i = 0; i < size; ++i) {
      that[i] = 0
    }
  }
  return that
}

/**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */
Buffer.allocUnsafe = function (size) {
  return allocUnsafe(null, size)
}
/**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */
Buffer.allocUnsafeSlow = function (size) {
  return allocUnsafe(null, size)
}

function fromString (that, string, encoding) {
  if (typeof encoding !== 'string' || encoding === '') {
    encoding = 'utf8'
  }

  if (!Buffer.isEncoding(encoding)) {
    throw new TypeError('"encoding" must be a valid string encoding')
  }

  var length = byteLength(string, encoding) | 0
  that = createBuffer(that, length)

  var actual = that.write(string, encoding)

  if (actual !== length) {
    // Writing a hex string, for example, that contains invalid characters will
    // cause everything after the first invalid character to be ignored. (e.g.
    // 'abxxcd' will be treated as 'ab')
    that = that.slice(0, actual)
  }

  return that
}

function fromArrayLike (that, array) {
  var length = array.length < 0 ? 0 : checked(array.length) | 0
  that = createBuffer(that, length)
  for (var i = 0; i < length; i += 1) {
    that[i] = array[i] & 255
  }
  return that
}

function fromArrayBuffer (that, array, byteOffset, length) {
  array.byteLength // this throws if `array` is not a valid ArrayBuffer

  if (byteOffset < 0 || array.byteLength < byteOffset) {
    throw new RangeError('\'offset\' is out of bounds')
  }

  if (array.byteLength < byteOffset + (length || 0)) {
    throw new RangeError('\'length\' is out of bounds')
  }

  if (byteOffset === undefined && length === undefined) {
    array = new Uint8Array(array)
  } else if (length === undefined) {
    array = new Uint8Array(array, byteOffset)
  } else {
    array = new Uint8Array(array, byteOffset, length)
  }

  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Return an augmented `Uint8Array` instance, for best performance
    that = array
    that.__proto__ = Buffer.prototype
  } else {
    // Fallback: Return an object instance of the Buffer class
    that = fromArrayLike(that, array)
  }
  return that
}

function fromObject (that, obj) {
  if (Buffer.isBuffer(obj)) {
    var len = checked(obj.length) | 0
    that = createBuffer(that, len)

    if (that.length === 0) {
      return that
    }

    obj.copy(that, 0, 0, len)
    return that
  }

  if (obj) {
    if ((typeof ArrayBuffer !== 'undefined' &&
        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {
      if (typeof obj.length !== 'number' || isnan(obj.length)) {
        return createBuffer(that, 0)
      }
      return fromArrayLike(that, obj)
    }

    if (obj.type === 'Buffer' && isArray(obj.data)) {
      return fromArrayLike(that, obj.data)
    }
  }

  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')
}

function checked (length) {
  // Note: cannot use `length < kMaxLength()` here because that fails when
  // length is NaN (which is otherwise coerced to zero.)
  if (length >= kMaxLength()) {
    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
                         'size: 0x' + kMaxLength().toString(16) + ' bytes')
  }
  return length | 0
}

function SlowBuffer (length) {
  if (+length != length) { // eslint-disable-line eqeqeq
    length = 0
  }
  return Buffer.alloc(+length)
}

Buffer.isBuffer = function isBuffer (b) {
  return !!(b != null && b._isBuffer)
}

Buffer.compare = function compare (a, b) {
  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
    throw new TypeError('Arguments must be Buffers')
  }

  if (a === b) return 0

  var x = a.length
  var y = b.length

  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
    if (a[i] !== b[i]) {
      x = a[i]
      y = b[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

Buffer.isEncoding = function isEncoding (encoding) {
  switch (String(encoding).toLowerCase()) {
    case 'hex':
    case 'utf8':
    case 'utf-8':
    case 'ascii':
    case 'latin1':
    case 'binary':
    case 'base64':
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      return true
    default:
      return false
  }
}

Buffer.concat = function concat (list, length) {
  if (!isArray(list)) {
    throw new TypeError('"list" argument must be an Array of Buffers')
  }

  if (list.length === 0) {
    return Buffer.alloc(0)
  }

  var i
  if (length === undefined) {
    length = 0
    for (i = 0; i < list.length; ++i) {
      length += list[i].length
    }
  }

  var buffer = Buffer.allocUnsafe(length)
  var pos = 0
  for (i = 0; i < list.length; ++i) {
    var buf = list[i]
    if (!Buffer.isBuffer(buf)) {
      throw new TypeError('"list" argument must be an Array of Buffers')
    }
    buf.copy(buffer, pos)
    pos += buf.length
  }
  return buffer
}

function byteLength (string, encoding) {
  if (Buffer.isBuffer(string)) {
    return string.length
  }
  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&
      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {
    return string.byteLength
  }
  if (typeof string !== 'string') {
    string = '' + string
  }

  var len = string.length
  if (len === 0) return 0

  // Use a for loop to avoid recursion
  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'ascii':
      case 'latin1':
      case 'binary':
        return len
      case 'utf8':
      case 'utf-8':
      case undefined:
        return utf8ToBytes(string).length
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return len * 2
      case 'hex':
        return len >>> 1
      case 'base64':
        return base64ToBytes(string).length
      default:
        if (loweredCase) return utf8ToBytes(string).length // assume utf8
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}
Buffer.byteLength = byteLength

function slowToString (encoding, start, end) {
  var loweredCase = false

  // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
  // property of a typed array.

  // This behaves neither like String nor Uint8Array in that we set start/end
  // to their upper/lower bounds if the value passed is out of range.
  // undefined is handled specially as per ECMA-262 6th Edition,
  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
  if (start === undefined || start < 0) {
    start = 0
  }
  // Return early if start > this.length. Done here to prevent potential uint32
  // coercion fail below.
  if (start > this.length) {
    return ''
  }

  if (end === undefined || end > this.length) {
    end = this.length
  }

  if (end <= 0) {
    return ''
  }

  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
  end >>>= 0
  start >>>= 0

  if (end <= start) {
    return ''
  }

  if (!encoding) encoding = 'utf8'

  while (true) {
    switch (encoding) {
      case 'hex':
        return hexSlice(this, start, end)

      case 'utf8':
      case 'utf-8':
        return utf8Slice(this, start, end)

      case 'ascii':
        return asciiSlice(this, start, end)

      case 'latin1':
      case 'binary':
        return latin1Slice(this, start, end)

      case 'base64':
        return base64Slice(this, start, end)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return utf16leSlice(this, start, end)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = (encoding + '').toLowerCase()
        loweredCase = true
    }
  }
}

// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect
// Buffer instances.
Buffer.prototype._isBuffer = true

function swap (b, n, m) {
  var i = b[n]
  b[n] = b[m]
  b[m] = i
}

Buffer.prototype.swap16 = function swap16 () {
  var len = this.length
  if (len % 2 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 16-bits')
  }
  for (var i = 0; i < len; i += 2) {
    swap(this, i, i + 1)
  }
  return this
}

Buffer.prototype.swap32 = function swap32 () {
  var len = this.length
  if (len % 4 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 32-bits')
  }
  for (var i = 0; i < len; i += 4) {
    swap(this, i, i + 3)
    swap(this, i + 1, i + 2)
  }
  return this
}

Buffer.prototype.swap64 = function swap64 () {
  var len = this.length
  if (len % 8 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 64-bits')
  }
  for (var i = 0; i < len; i += 8) {
    swap(this, i, i + 7)
    swap(this, i + 1, i + 6)
    swap(this, i + 2, i + 5)
    swap(this, i + 3, i + 4)
  }
  return this
}

Buffer.prototype.toString = function toString () {
  var length = this.length | 0
  if (length === 0) return ''
  if (arguments.length === 0) return utf8Slice(this, 0, length)
  return slowToString.apply(this, arguments)
}

Buffer.prototype.equals = function equals (b) {
  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
  if (this === b) return true
  return Buffer.compare(this, b) === 0
}

Buffer.prototype.inspect = function inspect () {
  var str = ''
  var max = exports.INSPECT_MAX_BYTES
  if (this.length > 0) {
    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')
    if (this.length > max) str += ' ... '
  }
  return '<Buffer ' + str + '>'
}

Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
  if (!Buffer.isBuffer(target)) {
    throw new TypeError('Argument must be a Buffer')
  }

  if (start === undefined) {
    start = 0
  }
  if (end === undefined) {
    end = target ? target.length : 0
  }
  if (thisStart === undefined) {
    thisStart = 0
  }
  if (thisEnd === undefined) {
    thisEnd = this.length
  }

  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
    throw new RangeError('out of range index')
  }

  if (thisStart >= thisEnd && start >= end) {
    return 0
  }
  if (thisStart >= thisEnd) {
    return -1
  }
  if (start >= end) {
    return 1
  }

  start >>>= 0
  end >>>= 0
  thisStart >>>= 0
  thisEnd >>>= 0

  if (this === target) return 0

  var x = thisEnd - thisStart
  var y = end - start
  var len = Math.min(x, y)

  var thisCopy = this.slice(thisStart, thisEnd)
  var targetCopy = target.slice(start, end)

  for (var i = 0; i < len; ++i) {
    if (thisCopy[i] !== targetCopy[i]) {
      x = thisCopy[i]
      y = targetCopy[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
//
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index into `buffer`; will be clamped to an int32
// - encoding - an optional encoding, relevant is val is a string
// - dir - true for indexOf, false for lastIndexOf
function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
  // Empty buffer means no match
  if (buffer.length === 0) return -1

  // Normalize byteOffset
  if (typeof byteOffset === 'string') {
    encoding = byteOffset
    byteOffset = 0
  } else if (byteOffset > 0x7fffffff) {
    byteOffset = 0x7fffffff
  } else if (byteOffset < -0x80000000) {
    byteOffset = -0x80000000
  }
  byteOffset = +byteOffset  // Coerce to Number.
  if (isNaN(byteOffset)) {
    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
    byteOffset = dir ? 0 : (buffer.length - 1)
  }

  // Normalize byteOffset: negative offsets start from the end of the buffer
  if (byteOffset < 0) byteOffset = buffer.length + byteOffset
  if (byteOffset >= buffer.length) {
    if (dir) return -1
    else byteOffset = buffer.length - 1
  } else if (byteOffset < 0) {
    if (dir) byteOffset = 0
    else return -1
  }

  // Normalize val
  if (typeof val === 'string') {
    val = Buffer.from(val, encoding)
  }

  // Finally, search either indexOf (if dir is true) or lastIndexOf
  if (Buffer.isBuffer(val)) {
    // Special case: looking for empty string/buffer always fails
    if (val.length === 0) {
      return -1
    }
    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
  } else if (typeof val === 'number') {
    val = val & 0xFF // Search for a byte value [0-255]
    if (Buffer.TYPED_ARRAY_SUPPORT &&
        typeof Uint8Array.prototype.indexOf === 'function') {
      if (dir) {
        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
      } else {
        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
      }
    }
    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)
  }

  throw new TypeError('val must be string, number or Buffer')
}

function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
  var indexSize = 1
  var arrLength = arr.length
  var valLength = val.length

  if (encoding !== undefined) {
    encoding = String(encoding).toLowerCase()
    if (encoding === 'ucs2' || encoding === 'ucs-2' ||
        encoding === 'utf16le' || encoding === 'utf-16le') {
      if (arr.length < 2 || val.length < 2) {
        return -1
      }
      indexSize = 2
      arrLength /= 2
      valLength /= 2
      byteOffset /= 2
    }
  }

  function read (buf, i) {
    if (indexSize === 1) {
      return buf[i]
    } else {
      return buf.readUInt16BE(i * indexSize)
    }
  }

  var i
  if (dir) {
    var foundIndex = -1
    for (i = byteOffset; i < arrLength; i++) {
      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
        if (foundIndex === -1) foundIndex = i
        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
      } else {
        if (foundIndex !== -1) i -= i - foundIndex
        foundIndex = -1
      }
    }
  } else {
    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength
    for (i = byteOffset; i >= 0; i--) {
      var found = true
      for (var j = 0; j < valLength; j++) {
        if (read(arr, i + j) !== read(val, j)) {
          found = false
          break
        }
      }
      if (found) return i
    }
  }

  return -1
}

Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
  return this.indexOf(val, byteOffset, encoding) !== -1
}

Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
}

Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
}

function hexWrite (buf, string, offset, length) {
  offset = Number(offset) || 0
  var remaining = buf.length - offset
  if (!length) {
    length = remaining
  } else {
    length = Number(length)
    if (length > remaining) {
      length = remaining
    }
  }

  // must be an even number of digits
  var strLen = string.length
  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')

  if (length > strLen / 2) {
    length = strLen / 2
  }
  for (var i = 0; i < length; ++i) {
    var parsed = parseInt(string.substr(i * 2, 2), 16)
    if (isNaN(parsed)) return i
    buf[offset + i] = parsed
  }
  return i
}

function utf8Write (buf, string, offset, length) {
  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
}

function asciiWrite (buf, string, offset, length) {
  return blitBuffer(asciiToBytes(string), buf, offset, length)
}

function latin1Write (buf, string, offset, length) {
  return asciiWrite(buf, string, offset, length)
}

function base64Write (buf, string, offset, length) {
  return blitBuffer(base64ToBytes(string), buf, offset, length)
}

function ucs2Write (buf, string, offset, length) {
  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
}

Buffer.prototype.write = function write (string, offset, length, encoding) {
  // Buffer#write(string)
  if (offset === undefined) {
    encoding = 'utf8'
    length = this.length
    offset = 0
  // Buffer#write(string, encoding)
  } else if (length === undefined && typeof offset === 'string') {
    encoding = offset
    length = this.length
    offset = 0
  // Buffer#write(string, offset[, length][, encoding])
  } else if (isFinite(offset)) {
    offset = offset | 0
    if (isFinite(length)) {
      length = length | 0
      if (encoding === undefined) encoding = 'utf8'
    } else {
      encoding = length
      length = undefined
    }
  // legacy write(string, encoding, offset, length) - remove in v0.13
  } else {
    throw new Error(
      'Buffer.write(string, encoding, offset[, length]) is no longer supported'
    )
  }

  var remaining = this.length - offset
  if (length === undefined || length > remaining) length = remaining

  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
    throw new RangeError('Attempt to write outside buffer bounds')
  }

  if (!encoding) encoding = 'utf8'

  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'hex':
        return hexWrite(this, string, offset, length)

      case 'utf8':
      case 'utf-8':
        return utf8Write(this, string, offset, length)

      case 'ascii':
        return asciiWrite(this, string, offset, length)

      case 'latin1':
      case 'binary':
        return latin1Write(this, string, offset, length)

      case 'base64':
        // Warning: maxLength not taken into account in base64Write
        return base64Write(this, string, offset, length)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return ucs2Write(this, string, offset, length)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}

Buffer.prototype.toJSON = function toJSON () {
  return {
    type: 'Buffer',
    data: Array.prototype.slice.call(this._arr || this, 0)
  }
}

function base64Slice (buf, start, end) {
  if (start === 0 && end === buf.length) {
    return base64.fromByteArray(buf)
  } else {
    return base64.fromByteArray(buf.slice(start, end))
  }
}

function utf8Slice (buf, start, end) {
  end = Math.min(buf.length, end)
  var res = []

  var i = start
  while (i < end) {
    var firstByte = buf[i]
    var codePoint = null
    var bytesPerSequence = (firstByte > 0xEF) ? 4
      : (firstByte > 0xDF) ? 3
      : (firstByte > 0xBF) ? 2
      : 1

    if (i + bytesPerSequence <= end) {
      var secondByte, thirdByte, fourthByte, tempCodePoint

      switch (bytesPerSequence) {
        case 1:
          if (firstByte < 0x80) {
            codePoint = firstByte
          }
          break
        case 2:
          secondByte = buf[i + 1]
          if ((secondByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)
            if (tempCodePoint > 0x7F) {
              codePoint = tempCodePoint
            }
          }
          break
        case 3:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)
            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
              codePoint = tempCodePoint
            }
          }
          break
        case 4:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          fourthByte = buf[i + 3]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
              codePoint = tempCodePoint
            }
          }
      }
    }

    if (codePoint === null) {
      // we did not generate a valid codePoint so insert a
      // replacement char (U+FFFD) and advance only 1 byte
      codePoint = 0xFFFD
      bytesPerSequence = 1
    } else if (codePoint > 0xFFFF) {
      // encode to utf16 (surrogate pair dance)
      codePoint -= 0x10000
      res.push(codePoint >>> 10 & 0x3FF | 0xD800)
      codePoint = 0xDC00 | codePoint & 0x3FF
    }

    res.push(codePoint)
    i += bytesPerSequence
  }

  return decodeCodePointsArray(res)
}

// Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
var MAX_ARGUMENTS_LENGTH = 0x1000

function decodeCodePointsArray (codePoints) {
  var len = codePoints.length
  if (len <= MAX_ARGUMENTS_LENGTH) {
    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
  }

  // Decode in chunks to avoid "call stack size exceeded".
  var res = ''
  var i = 0
  while (i < len) {
    res += String.fromCharCode.apply(
      String,
      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
    )
  }
  return res
}

function asciiSlice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i] & 0x7F)
  }
  return ret
}

function latin1Slice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i])
  }
  return ret
}

function hexSlice (buf, start, end) {
  var len = buf.length

  if (!start || start < 0) start = 0
  if (!end || end < 0 || end > len) end = len

  var out = ''
  for (var i = start; i < end; ++i) {
    out += toHex(buf[i])
  }
  return out
}

function utf16leSlice (buf, start, end) {
  var bytes = buf.slice(start, end)
  var res = ''
  for (var i = 0; i < bytes.length; i += 2) {
    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)
  }
  return res
}

Buffer.prototype.slice = function slice (start, end) {
  var len = this.length
  start = ~~start
  end = end === undefined ? len : ~~end

  if (start < 0) {
    start += len
    if (start < 0) start = 0
  } else if (start > len) {
    start = len
  }

  if (end < 0) {
    end += len
    if (end < 0) end = 0
  } else if (end > len) {
    end = len
  }

  if (end < start) end = start

  var newBuf
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    newBuf = this.subarray(start, end)
    newBuf.__proto__ = Buffer.prototype
  } else {
    var sliceLen = end - start
    newBuf = new Buffer(sliceLen, undefined)
    for (var i = 0; i < sliceLen; ++i) {
      newBuf[i] = this[i + start]
    }
  }

  return newBuf
}

/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */
function checkOffset (offset, ext, length) {
  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
}

Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }

  return val
}

Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    checkOffset(offset, byteLength, this.length)
  }

  var val = this[offset + --byteLength]
  var mul = 1
  while (byteLength > 0 && (mul *= 0x100)) {
    val += this[offset + --byteLength] * mul
  }

  return val
}

Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length)
  return this[offset]
}

Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  return this[offset] | (this[offset + 1] << 8)
}

Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  return (this[offset] << 8) | this[offset + 1]
}

Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return ((this[offset]) |
      (this[offset + 1] << 8) |
      (this[offset + 2] << 16)) +
      (this[offset + 3] * 0x1000000)
}

Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] * 0x1000000) +
    ((this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    this[offset + 3])
}

Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var i = byteLength
  var mul = 1
  var val = this[offset + --i]
  while (i > 0 && (mul *= 0x100)) {
    val += this[offset + --i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length)
  if (!(this[offset] & 0x80)) return (this[offset])
  return ((0xff - this[offset] + 1) * -1)
}

Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset] | (this[offset + 1] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset + 1] | (this[offset] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset]) |
    (this[offset + 1] << 8) |
    (this[offset + 2] << 16) |
    (this[offset + 3] << 24)
}

Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] << 24) |
    (this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    (this[offset + 3])
}

Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, true, 23, 4)
}

Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, false, 23, 4)
}

Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, true, 52, 8)
}

Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, false, 52, 8)
}

function checkInt (buf, value, offset, ext, max, min) {
  if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
}

Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var mul = 1
  var i = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var i = byteLength - 1
  var mul = 1
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
  this[offset] = (value & 0xff)
  return offset + 1
}

function objectWriteUInt16 (buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffff + value + 1
  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {
    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>
      (littleEndian ? i : 1 - i) * 8
  }
}

Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
  } else {
    objectWriteUInt16(this, value, offset, true)
  }
  return offset + 2
}

Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 8)
    this[offset + 1] = (value & 0xff)
  } else {
    objectWriteUInt16(this, value, offset, false)
  }
  return offset + 2
}

function objectWriteUInt32 (buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffffffff + value + 1
  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {
    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff
  }
}

Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset + 3] = (value >>> 24)
    this[offset + 2] = (value >>> 16)
    this[offset + 1] = (value >>> 8)
    this[offset] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, true)
  }
  return offset + 4
}

Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 24)
    this[offset + 1] = (value >>> 16)
    this[offset + 2] = (value >>> 8)
    this[offset + 3] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, false)
  }
  return offset + 4
}

Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = 0
  var mul = 1
  var sub = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = byteLength - 1
  var mul = 1
  var sub = 0
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
  if (value < 0) value = 0xff + value + 1
  this[offset] = (value & 0xff)
  return offset + 1
}

Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
  } else {
    objectWriteUInt16(this, value, offset, true)
  }
  return offset + 2
}

Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 8)
    this[offset + 1] = (value & 0xff)
  } else {
    objectWriteUInt16(this, value, offset, false)
  }
  return offset + 2
}

Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
    this[offset + 2] = (value >>> 16)
    this[offset + 3] = (value >>> 24)
  } else {
    objectWriteUInt32(this, value, offset, true)
  }
  return offset + 4
}

Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (value < 0) value = 0xffffffff + value + 1
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 24)
    this[offset + 1] = (value >>> 16)
    this[offset + 2] = (value >>> 8)
    this[offset + 3] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, false)
  }
  return offset + 4
}

function checkIEEE754 (buf, value, offset, ext, max, min) {
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
  if (offset < 0) throw new RangeError('Index out of range')
}

function writeFloat (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
  }
  ieee754.write(buf, value, offset, littleEndian, 23, 4)
  return offset + 4
}

Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
  return writeFloat(this, value, offset, true, noAssert)
}

Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
  return writeFloat(this, value, offset, false, noAssert)
}

function writeDouble (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
  }
  ieee754.write(buf, value, offset, littleEndian, 52, 8)
  return offset + 8
}

Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
  return writeDouble(this, value, offset, true, noAssert)
}

Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
  return writeDouble(this, value, offset, false, noAssert)
}

// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function copy (target, targetStart, start, end) {
  if (!start) start = 0
  if (!end && end !== 0) end = this.length
  if (targetStart >= target.length) targetStart = target.length
  if (!targetStart) targetStart = 0
  if (end > 0 && end < start) end = start

  // Copy 0 bytes; we're done
  if (end === start) return 0
  if (target.length === 0 || this.length === 0) return 0

  // Fatal error conditions
  if (targetStart < 0) {
    throw new RangeError('targetStart out of bounds')
  }
  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')
  if (end < 0) throw new RangeError('sourceEnd out of bounds')

  // Are we oob?
  if (end > this.length) end = this.length
  if (target.length - targetStart < end - start) {
    end = target.length - targetStart + start
  }

  var len = end - start
  var i

  if (this === target && start < targetStart && targetStart < end) {
    // descending copy from end
    for (i = len - 1; i >= 0; --i) {
      target[i + targetStart] = this[i + start]
    }
  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {
    // ascending copy from start
    for (i = 0; i < len; ++i) {
      target[i + targetStart] = this[i + start]
    }
  } else {
    Uint8Array.prototype.set.call(
      target,
      this.subarray(start, start + len),
      targetStart
    )
  }

  return len
}

// Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])
Buffer.prototype.fill = function fill (val, start, end, encoding) {
  // Handle string cases:
  if (typeof val === 'string') {
    if (typeof start === 'string') {
      encoding = start
      start = 0
      end = this.length
    } else if (typeof end === 'string') {
      encoding = end
      end = this.length
    }
    if (val.length === 1) {
      var code = val.charCodeAt(0)
      if (code < 256) {
        val = code
      }
    }
    if (encoding !== undefined && typeof encoding !== 'string') {
      throw new TypeError('encoding must be a string')
    }
    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
      throw new TypeError('Unknown encoding: ' + encoding)
    }
  } else if (typeof val === 'number') {
    val = val & 255
  }

  // Invalid ranges are not set to a default, so can range check early.
  if (start < 0 || this.length < start || this.length < end) {
    throw new RangeError('Out of range index')
  }

  if (end <= start) {
    return this
  }

  start = start >>> 0
  end = end === undefined ? this.length : end >>> 0

  if (!val) val = 0

  var i
  if (typeof val === 'number') {
    for (i = start; i < end; ++i) {
      this[i] = val
    }
  } else {
    var bytes = Buffer.isBuffer(val)
      ? val
      : utf8ToBytes(new Buffer(val, encoding).toString())
    var len = bytes.length
    for (i = 0; i < end - start; ++i) {
      this[i + start] = bytes[i % len]
    }
  }

  return this
}

// HELPER FUNCTIONS
// ================

var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g

function base64clean (str) {
  // Node strips out invalid characters like \n and \t from the string, base64-js does not
  str = stringtrim(str).replace(INVALID_BASE64_RE, '')
  // Node converts strings with length < 2 to ''
  if (str.length < 2) return ''
  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
  while (str.length % 4 !== 0) {
    str = str + '='
  }
  return str
}

function stringtrim (str) {
  if (str.trim) return str.trim()
  return str.replace(/^\s+|\s+$/g, '')
}

function toHex (n) {
  if (n < 16) return '0' + n.toString(16)
  return n.toString(16)
}

function utf8ToBytes (string, units) {
  units = units || Infinity
  var codePoint
  var length = string.length
  var leadSurrogate = null
  var bytes = []

  for (var i = 0; i < length; ++i) {
    codePoint = string.charCodeAt(i)

    // is surrogate component
    if (codePoint > 0xD7FF && codePoint < 0xE000) {
      // last char was a lead
      if (!leadSurrogate) {
        // no lead yet
        if (codePoint > 0xDBFF) {
          // unexpected trail
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        } else if (i + 1 === length) {
          // unpaired lead
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        }

        // valid lead
        leadSurrogate = codePoint

        continue
      }

      // 2 leads in a row
      if (codePoint < 0xDC00) {
        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
        leadSurrogate = codePoint
        continue
      }

      // valid surrogate pair
      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000
    } else if (leadSurrogate) {
      // valid bmp char, but last char was a lead
      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
    }

    leadSurrogate = null

    // encode utf8
    if (codePoint < 0x80) {
      if ((units -= 1) < 0) break
      bytes.push(codePoint)
    } else if (codePoint < 0x800) {
      if ((units -= 2) < 0) break
      bytes.push(
        codePoint >> 0x6 | 0xC0,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x10000) {
      if ((units -= 3) < 0) break
      bytes.push(
        codePoint >> 0xC | 0xE0,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x110000) {
      if ((units -= 4) < 0) break
      bytes.push(
        codePoint >> 0x12 | 0xF0,
        codePoint >> 0xC & 0x3F | 0x80,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else {
      throw new Error('Invalid code point')
    }
  }

  return bytes
}

function asciiToBytes (str) {
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    // Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF)
  }
  return byteArray
}

function utf16leToBytes (str, units) {
  var c, hi, lo
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    if ((units -= 2) < 0) break

    c = str.charCodeAt(i)
    hi = c >> 8
    lo = c % 256
    byteArray.push(lo)
    byteArray.push(hi)
  }

  return byteArray
}

function base64ToBytes (str) {
  return base64.toByteArray(base64clean(str))
}

function blitBuffer (src, dst, offset, length) {
  for (var i = 0; i < length; ++i) {
    if ((i + offset >= dst.length) || (i >= src.length)) break
    dst[i + offset] = src[i]
  }
  return i
}

function isnan (val) {
  return val !== val // eslint-disable-line no-self-compare
}

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(8)))

/***/ }),
/* 37 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/*<replacement>*/

var processNextTick = __webpack_require__(12);
/*</replacement>*/

// undocumented cb() API, needed for core, not for public API
function destroy(err, cb) {
  var _this = this;

  var readableDestroyed = this._readableState && this._readableState.destroyed;
  var writableDestroyed = this._writableState && this._writableState.destroyed;

  if (readableDestroyed || writableDestroyed) {
    if (cb) {
      cb(err);
    } else if (err && (!this._writableState || !this._writableState.errorEmitted)) {
      processNextTick(emitErrorNT, this, err);
    }
    return;
  }

  // we set destroyed to true before firing error callbacks in order
  // to make it re-entrance safe in case destroy() is called within callbacks

  if (this._readableState) {
    this._readableState.destroyed = true;
  }

  // if this is a duplex stream mark the writable part as destroyed as well
  if (this._writableState) {
    this._writableState.destroyed = true;
  }

  this._destroy(err || null, function (err) {
    if (!cb && err) {
      processNextTick(emitErrorNT, _this, err);
      if (_this._writableState) {
        _this._writableState.errorEmitted = true;
      }
    } else if (cb) {
      cb(err);
    }
  });
}

function undestroy() {
  if (this._readableState) {
    this._readableState.destroyed = false;
    this._readableState.reading = false;
    this._readableState.ended = false;
    this._readableState.endEmitted = false;
  }

  if (this._writableState) {
    this._writableState.destroyed = false;
    this._writableState.ended = false;
    this._writableState.ending = false;
    this._writableState.finished = false;
    this._writableState.errorEmitted = false;
  }
}

function emitErrorNT(self, err) {
  self.emit('error', err);
}

module.exports = {
  destroy: destroy,
  undestroy: undestroy
};

/***/ }),
/* 38 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var Buffer = __webpack_require__(13).Buffer;

var isEncoding = Buffer.isEncoding || function (encoding) {
  encoding = '' + encoding;
  switch (encoding && encoding.toLowerCase()) {
    case 'hex':case 'utf8':case 'utf-8':case 'ascii':case 'binary':case 'base64':case 'ucs2':case 'ucs-2':case 'utf16le':case 'utf-16le':case 'raw':
      return true;
    default:
      return false;
  }
};

function _normalizeEncoding(enc) {
  if (!enc) return 'utf8';
  var retried;
  while (true) {
    switch (enc) {
      case 'utf8':
      case 'utf-8':
        return 'utf8';
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return 'utf16le';
      case 'latin1':
      case 'binary':
        return 'latin1';
      case 'base64':
      case 'ascii':
      case 'hex':
        return enc;
      default:
        if (retried) return; // undefined
        enc = ('' + enc).toLowerCase();
        retried = true;
    }
  }
};

// Do not cache `Buffer.isEncoding` when checking encoding names as some
// modules monkey-patch it to support additional encodings
function normalizeEncoding(enc) {
  var nenc = _normalizeEncoding(enc);
  if (typeof nenc !== 'string' && (Buffer.isEncoding === isEncoding || !isEncoding(enc))) throw new Error('Unknown encoding: ' + enc);
  return nenc || enc;
}

// StringDecoder provides an interface for efficiently splitting a series of
// buffers into a series of JS strings without breaking apart multi-byte
// characters.
exports.StringDecoder = StringDecoder;
function StringDecoder(encoding) {
  this.encoding = normalizeEncoding(encoding);
  var nb;
  switch (this.encoding) {
    case 'utf16le':
      this.text = utf16Text;
      this.end = utf16End;
      nb = 4;
      break;
    case 'utf8':
      this.fillLast = utf8FillLast;
      nb = 4;
      break;
    case 'base64':
      this.text = base64Text;
      this.end = base64End;
      nb = 3;
      break;
    default:
      this.write = simpleWrite;
      this.end = simpleEnd;
      return;
  }
  this.lastNeed = 0;
  this.lastTotal = 0;
  this.lastChar = Buffer.allocUnsafe(nb);
}

StringDecoder.prototype.write = function (buf) {
  if (buf.length === 0) return '';
  var r;
  var i;
  if (this.lastNeed) {
    r = this.fillLast(buf);
    if (r === undefined) return '';
    i = this.lastNeed;
    this.lastNeed = 0;
  } else {
    i = 0;
  }
  if (i < buf.length) return r ? r + this.text(buf, i) : this.text(buf, i);
  return r || '';
};

StringDecoder.prototype.end = utf8End;

// Returns only complete characters in a Buffer
StringDecoder.prototype.text = utf8Text;

// Attempts to complete a partial non-UTF-8 character using bytes from a Buffer
StringDecoder.prototype.fillLast = function (buf) {
  if (this.lastNeed <= buf.length) {
    buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed);
    return this.lastChar.toString(this.encoding, 0, this.lastTotal);
  }
  buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, buf.length);
  this.lastNeed -= buf.length;
};

// Checks the type of a UTF-8 byte, whether it's ASCII, a leading byte, or a
// continuation byte.
function utf8CheckByte(byte) {
  if (byte <= 0x7F) return 0;else if (byte >> 5 === 0x06) return 2;else if (byte >> 4 === 0x0E) return 3;else if (byte >> 3 === 0x1E) return 4;
  return -1;
}

// Checks at most 3 bytes at the end of a Buffer in order to detect an
// incomplete multi-byte UTF-8 character. The total number of bytes (2, 3, or 4)
// needed to complete the UTF-8 character (if applicable) are returned.
function utf8CheckIncomplete(self, buf, i) {
  var j = buf.length - 1;
  if (j < i) return 0;
  var nb = utf8CheckByte(buf[j]);
  if (nb >= 0) {
    if (nb > 0) self.lastNeed = nb - 1;
    return nb;
  }
  if (--j < i) return 0;
  nb = utf8CheckByte(buf[j]);
  if (nb >= 0) {
    if (nb > 0) self.lastNeed = nb - 2;
    return nb;
  }
  if (--j < i) return 0;
  nb = utf8CheckByte(buf[j]);
  if (nb >= 0) {
    if (nb > 0) {
      if (nb === 2) nb = 0;else self.lastNeed = nb - 3;
    }
    return nb;
  }
  return 0;
}

// Validates as many continuation bytes for a multi-byte UTF-8 character as
// needed or are available. If we see a non-continuation byte where we expect
// one, we "replace" the validated continuation bytes we've seen so far with
// UTF-8 replacement characters ('\ufffd'), to match v8's UTF-8 decoding
// behavior. The continuation byte check is included three times in the case
// where all of the continuation bytes for a character exist in the same buffer.
// It is also done this way as a slight performance increase instead of using a
// loop.
function utf8CheckExtraBytes(self, buf, p) {
  if ((buf[0] & 0xC0) !== 0x80) {
    self.lastNeed = 0;
    return '\ufffd'.repeat(p);
  }
  if (self.lastNeed > 1 && buf.length > 1) {
    if ((buf[1] & 0xC0) !== 0x80) {
      self.lastNeed = 1;
      return '\ufffd'.repeat(p + 1);
    }
    if (self.lastNeed > 2 && buf.length > 2) {
      if ((buf[2] & 0xC0) !== 0x80) {
        self.lastNeed = 2;
        return '\ufffd'.repeat(p + 2);
      }
    }
  }
}

// Attempts to complete a multi-byte UTF-8 character using bytes from a Buffer.
function utf8FillLast(buf) {
  var p = this.lastTotal - this.lastNeed;
  var r = utf8CheckExtraBytes(this, buf, p);
  if (r !== undefined) return r;
  if (this.lastNeed <= buf.length) {
    buf.copy(this.lastChar, p, 0, this.lastNeed);
    return this.lastChar.toString(this.encoding, 0, this.lastTotal);
  }
  buf.copy(this.lastChar, p, 0, buf.length);
  this.lastNeed -= buf.length;
}

// Returns all complete UTF-8 characters in a Buffer. If the Buffer ended on a
// partial character, the character's bytes are buffered until the required
// number of bytes are available.
function utf8Text(buf, i) {
  var total = utf8CheckIncomplete(this, buf, i);
  if (!this.lastNeed) return buf.toString('utf8', i);
  this.lastTotal = total;
  var end = buf.length - (total - this.lastNeed);
  buf.copy(this.lastChar, 0, end);
  return buf.toString('utf8', i, end);
}

// For UTF-8, a replacement character for each buffered byte of a (partial)
// character needs to be added to the output.
function utf8End(buf) {
  var r = buf && buf.length ? this.write(buf) : '';
  if (this.lastNeed) return r + '\ufffd'.repeat(this.lastTotal - this.lastNeed);
  return r;
}

// UTF-16LE typically needs two bytes per character, but even if we have an even
// number of bytes available, we need to check if we end on a leading/high
// surrogate. In that case, we need to wait for the next two bytes in order to
// decode the last character properly.
function utf16Text(buf, i) {
  if ((buf.length - i) % 2 === 0) {
    var r = buf.toString('utf16le', i);
    if (r) {
      var c = r.charCodeAt(r.length - 1);
      if (c >= 0xD800 && c <= 0xDBFF) {
        this.lastNeed = 2;
        this.lastTotal = 4;
        this.lastChar[0] = buf[buf.length - 2];
        this.lastChar[1] = buf[buf.length - 1];
        return r.slice(0, -1);
      }
    }
    return r;
  }
  this.lastNeed = 1;
  this.lastTotal = 2;
  this.lastChar[0] = buf[buf.length - 1];
  return buf.toString('utf16le', i, buf.length - 1);
}

// For UTF-16LE we do not explicitly append special replacement characters if we
// end on a partial character, we simply let v8 handle that.
function utf16End(buf) {
  var r = buf && buf.length ? this.write(buf) : '';
  if (this.lastNeed) {
    var end = this.lastTotal - this.lastNeed;
    return r + this.lastChar.toString('utf16le', 0, end);
  }
  return r;
}

function base64Text(buf, i) {
  var n = (buf.length - i) % 3;
  if (n === 0) return buf.toString('base64', i);
  this.lastNeed = 3 - n;
  this.lastTotal = 3;
  if (n === 1) {
    this.lastChar[0] = buf[buf.length - 1];
  } else {
    this.lastChar[0] = buf[buf.length - 2];
    this.lastChar[1] = buf[buf.length - 1];
  }
  return buf.toString('base64', i, buf.length - n);
}

function base64End(buf) {
  var r = buf && buf.length ? this.write(buf) : '';
  if (this.lastNeed) return r + this.lastChar.toString('base64', 0, 3 - this.lastNeed);
  return r;
}

// Pass bytes on through for single-byte encodings (e.g. ascii, latin1, hex)
function simpleWrite(buf) {
  return buf.toString(this.encoding);
}

function simpleEnd(buf) {
  return buf && buf.length ? this.write(buf) : '';
}

/***/ }),
/* 39 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// a transform stream is a readable/writable stream where you do
// something with the data.  Sometimes it's called a "filter",
// but that's not a great name for it, since that implies a thing where
// some bits pass through, and others are simply ignored.  (That would
// be a valid example of a transform, of course.)
//
// While the output is causally related to the input, it's not a
// necessarily symmetric or synchronous transformation.  For example,
// a zlib stream might take multiple plain-text writes(), and then
// emit a single compressed chunk some time in the future.
//
// Here's how this works:
//
// The Transform stream has all the aspects of the readable and writable
// stream classes.  When you write(chunk), that calls _write(chunk,cb)
// internally, and returns false if there's a lot of pending writes
// buffered up.  When you call read(), that calls _read(n) until
// there's enough pending readable data buffered up.
//
// In a transform stream, the written data is placed in a buffer.  When
// _read(n) is called, it transforms the queued up data, calling the
// buffered _write cb's as it consumes chunks.  If consuming a single
// written chunk would result in multiple output chunks, then the first
// outputted bit calls the readcb, and subsequent chunks just go into
// the read buffer, and will cause it to emit 'readable' if necessary.
//
// This way, back-pressure is actually determined by the reading side,
// since _read has to be called to start processing a new chunk.  However,
// a pathological inflate type of transform can cause excessive buffering
// here.  For example, imagine a stream where every byte of input is
// interpreted as an integer from 0-255, and then results in that many
// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in
// 1kb of data being output.  In this case, you could write a very small
// amount of input, and end up with a very large amount of output.  In
// such a pathological inflating mechanism, there'd be no way to tell
// the system to stop doing the transform.  A single 4MB write could
// cause the system to run out of memory.
//
// However, even in such a pathological case, only a single written chunk
// would be consumed, and then the rest would wait (un-transformed) until
// the results of the previous transformed chunk were consumed.



module.exports = Transform;

var Duplex = __webpack_require__(7);

/*<replacement>*/
var util = __webpack_require__(10);
util.inherits = __webpack_require__(9);
/*</replacement>*/

util.inherits(Transform, Duplex);

function TransformState(stream) {
  this.afterTransform = function (er, data) {
    return afterTransform(stream, er, data);
  };

  this.needTransform = false;
  this.transforming = false;
  this.writecb = null;
  this.writechunk = null;
  this.writeencoding = null;
}

function afterTransform(stream, er, data) {
  var ts = stream._transformState;
  ts.transforming = false;

  var cb = ts.writecb;

  if (!cb) {
    return stream.emit('error', new Error('write callback called multiple times'));
  }

  ts.writechunk = null;
  ts.writecb = null;

  if (data !== null && data !== undefined) stream.push(data);

  cb(er);

  var rs = stream._readableState;
  rs.reading = false;
  if (rs.needReadable || rs.length < rs.highWaterMark) {
    stream._read(rs.highWaterMark);
  }
}

function Transform(options) {
  if (!(this instanceof Transform)) return new Transform(options);

  Duplex.call(this, options);

  this._transformState = new TransformState(this);

  var stream = this;

  // start out asking for a readable event once data is transformed.
  this._readableState.needReadable = true;

  // we have implemented the _read method, and done the other things
  // that Readable wants before the first _read call, so unset the
  // sync guard flag.
  this._readableState.sync = false;

  if (options) {
    if (typeof options.transform === 'function') this._transform = options.transform;

    if (typeof options.flush === 'function') this._flush = options.flush;
  }

  // When the writable side finishes, then flush out anything remaining.
  this.once('prefinish', function () {
    if (typeof this._flush === 'function') this._flush(function (er, data) {
      done(stream, er, data);
    });else done(stream);
  });
}

Transform.prototype.push = function (chunk, encoding) {
  this._transformState.needTransform = false;
  return Duplex.prototype.push.call(this, chunk, encoding);
};

// This is the part where you do stuff!
// override this function in implementation classes.
// 'chunk' is an input chunk.
//
// Call `push(newChunk)` to pass along transformed output
// to the readable side.  You may call 'push' zero or more times.
//
// Call `cb(err)` when you are done with this chunk.  If you pass
// an error, then that'll put the hurt on the whole operation.  If you
// never call cb(), then you'll never get another chunk.
Transform.prototype._transform = function (chunk, encoding, cb) {
  throw new Error('_transform() is not implemented');
};

Transform.prototype._write = function (chunk, encoding, cb) {
  var ts = this._transformState;
  ts.writecb = cb;
  ts.writechunk = chunk;
  ts.writeencoding = encoding;
  if (!ts.transforming) {
    var rs = this._readableState;
    if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
  }
};

// Doesn't matter what the args are here.
// _transform does all the work.
// That we got here means that the readable side wants more data.
Transform.prototype._read = function (n) {
  var ts = this._transformState;

  if (ts.writechunk !== null && ts.writecb && !ts.transforming) {
    ts.transforming = true;
    this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
  } else {
    // mark that we need a transform, so that any data that comes in
    // will get processed, now that we've asked for it.
    ts.needTransform = true;
  }
};

Transform.prototype._destroy = function (err, cb) {
  var _this = this;

  Duplex.prototype._destroy.call(this, err, function (err2) {
    cb(err2);
    _this.emit('close');
  });
};

function done(stream, er, data) {
  if (er) return stream.emit('error', er);

  if (data !== null && data !== undefined) stream.push(data);

  // if there's nothing in the write buffer, then that means
  // that nothing more will ever be provided
  var ws = stream._writableState;
  var ts = stream._transformState;

  if (ws.length) throw new Error('Calling transform done when ws.length != 0');

  if (ts.transforming) throw new Error('Calling transform done when still transforming');

  return stream.push(null);
}

/***/ }),
/* 40 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = {
  2:      'need dictionary',     /* Z_NEED_DICT       2  */
  1:      'stream end',          /* Z_STREAM_END      1  */
  0:      '',                    /* Z_OK              0  */
  '-1':   'file error',          /* Z_ERRNO         (-1) */
  '-2':   'stream error',        /* Z_STREAM_ERROR  (-2) */
  '-3':   'data error',          /* Z_DATA_ERROR    (-3) */
  '-4':   'insufficient memory', /* Z_MEM_ERROR     (-4) */
  '-5':   'buffer error',        /* Z_BUF_ERROR     (-5) */
  '-6':   'incompatible version' /* Z_VERSION_ERROR (-6) */
};


/***/ }),
/* 41 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


__webpack_require__(42);

__webpack_require__(311);

__webpack_require__(326);

__webpack_require__(328);

/**
 * @fileoverview entry point for viewer with all extensions
 * @author NHN Ent. FE Development Lab <dl_javascript@nhnent.com>
 */
var EditorViewer = __webpack_require__(340);

module.exports = EditorViewer;

/***/ }),
/* 42 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.setDefaultOptions = exports.detectDelimiter = exports.parseDSV2ChartData = exports.parseCode2ChartOption = exports.parseURL2ChartData = exports.parseCode2DataAndOptions = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _jquery = __webpack_require__(1);

var _jquery2 = _interopRequireDefault(_jquery);

var _tuiCodeSnippet = __webpack_require__(2);

var _tuiCodeSnippet2 = _interopRequireDefault(_tuiCodeSnippet);

var _tuiChart = __webpack_require__(43);

var _tuiChart2 = _interopRequireDefault(_tuiChart);

var _editorProxy = __webpack_require__(3);

var _editorProxy2 = _interopRequireDefault(_editorProxy);

var _csv = __webpack_require__(297);

var _csv2 = _interopRequireDefault(_csv);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               * @fileoverview tsv, csv format chart plugin
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               * consumes tab separated values and make data/options for tui chart
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               * @author NHN Ent. FE Development Lab <dl_javascript@nhnent.com>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               */

/**
 * @example
 * tsv, csv format chart plugin
 * consumes tab separated values and make data/options for tui-chart
 *
 * ```chart
 * \tcat1\tcat2           => tsv, csv format chart data
 * jan\t21\t23
 * feb\t351\t45
 *                          => space required as a separator
 * type: area               => tui.chart.areaChart()
 * url: http://url.to/csv   => fetch data from the url
 * width: 700               => chart.width
 * height: 300              => chart.height
 * title: Monthly Revenue   => chart.title
 * format: 1000             => chart.format
 * x.title: Amount          => xAxis.title
 * x.min: 0                 => xAxis.min
 * x.max 9000               => xAxis.max
 * x.suffix: $              => xAxis.suffix
 * y.title: Month           => yAxis.title
 * ```
 */


var WwCodeBlockManager = _editorProxy2.default.WwCodeBlockManager,
    codeBlockManager = _editorProxy2.default.codeBlockManager;

var LANG = 'chart';

// csv configuration
_csv2.default.IGNORE_QUOTE_WHITESPACE = false;
_csv2.default.IGNORE_RECORD_LENGTH = true;
_csv2.default.DETECT_TYPES = false;

var REGEX_LINE_ENDING = /[\n\r]/;
var DSV_DELIMITERS = [',', '\t', /\s+/];
var OPTION_DELIMITER = ':';
var SUPPORTED_CHART_TYPES = ['barChart', 'columnChart', 'lineChart', 'areaChart', 'pieChart'];
var CATEGORY_CHART_TYPES = ['lineChart', 'areaChart'];
var DEFAULT_CHART_OPTIONS = {
  minWidth: 0,
  maxWidth: Infinity,
  minHeight: 0,
  maxHeight: Infinity,
  height: 'auto',
  width: 'auto'
};

/**
 * parse data and options for tui.chart
 * data format can be csv, tsv
 * options format is colon separated keys & values
 * @param {string} code - plain text format data & options
 * @param {Function} callback - callback which provides json format data & options
 * @ignore
 */
function parseCode2DataAndOptions(code, callback) {
  code = trimKeepingTabs(code);

  var _code$split = code.split(/\n{2,}/),
      firstCode = _code$split[0],
      secondCode = _code$split[1];

  // try to parse first code block as `options`


  var options = parseCode2ChartOption(firstCode);
  var url = options && options.editorChart && options.editorChart.url;

  // if first code block is `options` and has `url` option, fetch data from url
  var dataAndOptions = void 0;
  if (_tuiCodeSnippet2.default.isString(url)) {
    // url option provided
    // fetch data from url
    var success = function success(dataCode) {
      dataAndOptions = _parseCode2DataAndOptions(dataCode, firstCode);
      callback(dataAndOptions);
    };
    var fail = function fail() {
      return callback(null);
    };

    _jquery2.default.get(url).done(success).fail(fail);
  } else {
    // else first block is `data`
    dataAndOptions = _parseCode2DataAndOptions(firstCode, secondCode);
    callback(dataAndOptions);
  }
}

/**
 * parse codes to chart data & options Object
 * @param {string} dataCode - code block containing chart data
 * @param {string} optionCode - code block containing chart options
 * @returns {Object} - tui.chart data & options
 * @see https://nhnent.github.io/tui.chart/latest/tui.chart.html
 * @ignore
 */
function _parseCode2DataAndOptions(dataCode, optionCode) {
  var data = parseDSV2ChartData(dataCode);
  var options = parseCode2ChartOption(optionCode);

  return {
    data: data,
    options: options
  };
}

/**
 * detect delimiter the comma, tab, regex
 * @param {string} code - code to detect delimiter
 * @returns {string|RegExp} - detected delimiter
 * @ignore
 */
function detectDelimiter(code) {
  code = trimKeepingTabs(code);

  // chunk first max 10 lines to detect
  var chunk = code.split(REGEX_LINE_ENDING).slice(0, 10).join('\n');

  // calc delta for each delimiters
  // then pick a delimiter having the minimum value delta
  return DSV_DELIMITERS.map(function (delimiter) {
    return {
      delimiter: delimiter,
      delta: calcDSVDelta(chunk, delimiter)
    };
  }).sort(function (a, b) {
    return a.delta - b.delta;
  })[0].delimiter;
}

/**
 * calculate delta(sum of length difference of rows) values of given DSV
 * @param {string} code - code to be test
 * @param {string|RegExp} delimiter - delimiter to test
 * @returns {number} delta value for code
 * @ignore
 */
function calcDSVDelta(code, delimiter) {
  var rows = void 0,
      delta = void 0;

  try {
    _csv2.default.COLUMN_SEPARATOR = delimiter;
    rows = _csv2.default.parse(code);

    if (rows[0].length < 2) {
      // parsing completely failed
      throw new Error('parser fail');
    }

    // sum of all length difference of all rows
    delta = rows.map(function (row) {
      return row.length;
    }).reduce(function (a, b) {
      return {
        deltaSum: a.deltaSum + Math.abs(a.length - b),
        length: b
      };
    }, {
      deltaSum: 0,
      length: rows[0].length
    }).deltaSum;
  } catch (e) {
    delta = Infinity;
  }

  return delta;
}

/**
 * parse csv, tsv to chart data
 * @param {string} code - data code
 * @param {string|RegExp} delimiter - delimiter
 * @returns {Object} - tui.chart data
 * @see https://nhnent.github.io/tui.chart/latest/tui.chart.html
 * @ignore
 */
function parseDSV2ChartData(code, delimiter) {
  // trim all heading/trailing blank lines
  code = trimKeepingTabs(code);

  _csv2.default.COLUMN_SEPARATOR = delimiter || detectDelimiter(code);
  var dsv = _csv2.default.parse(code);

  // trim all values in 2D array
  dsv = dsv.map(function (arr) {
    return arr.map(function (val) {
      return val.trim();
    });
  });

  // test a first row for legends. ['anything', '1', '2', '3'] === false, ['anything', 't1', '2', 't3'] === true
  var hasLegends = dsv[0].filter(function (v, i) {
    return i > 0;
  }).reduce(function (hasNaN, item) {
    return hasNaN || !isNumeric(item);
  }, false);
  var legends = hasLegends ? dsv.shift() : [];

  // test a first column for categories
  var hasCategories = dsv.slice(1).reduce(function (hasNaN, row) {
    return hasNaN || !isNumeric(row[0]);
  }, false);
  var categories = hasCategories ? dsv.map(function (arr) {
    return arr.shift();
  }) : [];
  if (hasCategories) {
    legends.shift();
  }

  // transpose dsv, parse number
  // [['1','2','3']    [[1,4,7]
  //  ['4','5','6'] =>  [2,5,8]
  //  ['7','8','9']]    [3,6,9]]
  dsv = dsv[0].map(function (t, i) {
    return dsv.map(function (x) {
      return parseFloat(x[i]);
    });
  });

  // make series
  var series = dsv.map(function (data, i) {
    return hasLegends ? {
      name: legends[i],
      data: data
    } : {
      data: data
    };
  });

  return {
    categories: categories,
    series: series
  };
}

/**
 * parse code from url
 * @param {string} url - remote csv/tsv file url
 * @param {Function} callback - callback function
 * @ignore
 */
function parseURL2ChartData(url, callback) {
  var success = function success(code) {
    var chartData = parseDSV2ChartData(code);

    callback(chartData);
  };
  var fail = function fail() {
    return callback(null);
  };

  _jquery2.default.get(url).done(success).fail(fail);
}

/**
 * parse option code
 * @param {string} optionCode - option code
 * @returns {Object} - tui.chart option string
 * @see https://nhnent.github.io/tui.chart/latest/tui.chart.html
 * @ignore
 */
function parseCode2ChartOption(optionCode) {
  var reservedKeys = ['type', 'url'];
  var options = {};
  if (_tuiCodeSnippet2.default.isUndefined(optionCode)) {
    return options;
  }

  var optionLines = optionCode.split(REGEX_LINE_ENDING);
  optionLines.forEach(function (line) {
    var _line$split = line.split(OPTION_DELIMITER),
        keyString = _line$split[0],
        values = _line$split.slice(1);

    var value = values.join(OPTION_DELIMITER);
    keyString = keyString.trim();
    if (value.length === 0) {
      return;
    }

    try {
      value = JSON.parse(value.trim());
    } catch (e) {
      value = value.trim();
    }

    // parse keys

    var _keyString$split = keyString.split('.'),
        keys = _keyString$split.slice(0);

    var topKey = keys[0];
    if (_tuiCodeSnippet2.default.inArray(topKey, reservedKeys) >= 0) {
      // reserved keys for chart plugin option
      keys.unshift('editorChart');
    } else if (keys.length === 1) {
      // short names for `chart`
      keys.unshift('chart');
    } else if (topKey === 'x' || topKey === 'y') {
      // short-handed keys
      keys[0] = topKey + 'Axis';
    }

    var option = options;
    for (var i = 0; i < keys.length; i += 1) {
      var key = keys[i];
      option[key] = option[key] || (keys.length - 1 === i ? value : {});
      option = option[key];
    }
  });

  return options;
}

/**
 * trim whitespace and newlines at head/tail
 * it should not trim \t in tsv
 * @param {string} code - code to trim
 * @returns {string} - trimmed code
 * @ignore
 */
function trimKeepingTabs(code) {
  return code.replace(/(^(\s*[\n\r])+)|([\n\r]+\s*$)/g, '');
}

/**
 * test given string is numeric
 * @param {string} str - string to be tested
 * @returns {boolean} - true for numeric string
 * @ignore
 */
function isNumeric(str) {
  return !isNaN(str) && isFinite(str);
}

/**
 * set default options
 * @param {Object} chartOptions - tui.chart options
 * @param {Object} extensionOptions - extension options
 * @param {HTMLElement} chartContainer - chart container
 * @returns {Object} - options
 * @see https://nhnent.github.io/tui.chart/latest/tui.chart.html
 * @ignore
 */
function setDefaultOptions(chartOptions, extensionOptions, chartContainer) {
  // chart options scaffolding
  chartOptions = _tuiCodeSnippet2.default.extend({
    editorChart: {},
    chart: {},
    chartExportMenu: {}
  }, chartOptions);

  // set default extension options
  extensionOptions = _tuiCodeSnippet2.default.extend(DEFAULT_CHART_OPTIONS, extensionOptions);

  // determine width, height
  var _chartOptions$chart = chartOptions.chart,
      width = _chartOptions$chart.width,
      height = _chartOptions$chart.height;

  var isWidthUndefined = _tuiCodeSnippet2.default.isUndefined(width);
  var isHeightUndefined = _tuiCodeSnippet2.default.isUndefined(height);
  if (isWidthUndefined || isHeightUndefined) {
    // if no width or height specified, set width and height to container width
    var _chartContainer$getBo = chartContainer.getBoundingClientRect(),
        containerWidth = _chartContainer$getBo.width;

    width = isWidthUndefined ? extensionOptions.width : width;
    height = isHeightUndefined ? extensionOptions.height : height;
    width = width === 'auto' ? containerWidth : width;
    height = height === 'auto' ? containerWidth : height;
  }
  width = Math.min(extensionOptions.maxWidth, width);
  height = Math.min(extensionOptions.maxHeight, height);
  chartOptions.chart.width = Math.max(extensionOptions.minWidth, width);
  chartOptions.chart.height = Math.max(extensionOptions.minHeight, height);

  // default chart type
  chartOptions.editorChart.type = chartOptions.editorChart.type ? chartOptions.editorChart.type + 'Chart' : 'columnChart';
  // default visibility of export menu
  chartOptions.chartExportMenu.visible = chartOptions.chartExportMenu.visible || false;

  return chartOptions;
}

/**
 * replace html from chart data
 * @param {string} codeBlockChartDataAndOptions - chart data text
 * @param {Object} extensionOptions - chart extension options
 * @returns {string} - rendered html
 * @ignore
 */
function chartReplacer(codeBlockChartDataAndOptions, extensionOptions) {
  var randomId = 'chart-' + Math.random().toString(36).substr(2, 10);
  var renderedHTML = '<div id="' + randomId + '" class="chart" />';

  setTimeout(function () {
    var chartContainer = document.querySelector('#' + randomId);
    try {
      parseCode2DataAndOptions(codeBlockChartDataAndOptions, function (_ref) {
        var data = _ref.data,
            chartOptions = _ref.options;

        chartOptions = setDefaultOptions(chartOptions, extensionOptions, chartContainer);

        var chartType = chartOptions.editorChart.type;
        if (SUPPORTED_CHART_TYPES.indexOf(chartType) < 0) {
          chartContainer.innerHTML = 'invalid chart type. type: bar, column, line, area, pie';
        } else if (CATEGORY_CHART_TYPES.indexOf(chartType) > -1 && data.categories.length !== data.series[0].data.length) {
          chartContainer.innerHTML = 'invalid chart data';
        } else {
          _tuiChart2.default[chartType](chartContainer, data, chartOptions);
        }
      });
    } catch (e) {
      chartContainer.innerHTML = 'invalid chart data';
    }
  }, 0);

  return renderedHTML;
}

/**
 * reduce 2D array to TSV rows
 * @param {Array.<Array.<string>>} arr - 2d array
 * @returns {Array.<string>} - TSV row array
 * @ignore
 */
function _reduceToTSV(arr) {
  // 2D array => quoted TSV row array
  // [['a', 'b b'], [1, 2]] => ['a\t"b b"', '1\t2']
  return arr.reduce(function (acc, row) {
    // ['a', 'b b', 'c c'] => ['a', '"b b"', '"c c"']
    var quoted = row.map(function (text) {
      if (!isNumeric(text) && text.indexOf(' ') >= 0) {
        text = '"' + text + '"';
      }

      return text;
    });
    // ['a', '"b b"', '"c c"'] => 'a\t"b b"\t"c c"'
    acc.push(quoted.join('\t'));

    return acc;
  }, []);
}

/**
 * override WwCodeBlockManager to enclose pasting data strings from wysiwyg in quotes
 * @param {Editor} editor - editor
 * @ignore
 */
function _setWwCodeBlockManagerForChart(editor) {
  var componentManager = editor.wwEditor.componentManager;
  componentManager.removeManager('codeblock');
  componentManager.addManager(function (_WwCodeBlockManager) {
    _inherits(_class, _WwCodeBlockManager);

    function _class() {
      _classCallCheck(this, _class);

      return _possibleConstructorReturn(this, (_class.__proto__ || Object.getPrototypeOf(_class)).apply(this, arguments));
    }

    _createClass(_class, [{
      key: 'convertToCodeblock',

      /**
       * Wrap table nodes into code block as TSV
       * @memberof WwCodeBlockManager
       * @param {Array.<Node>} nodes Node array
       * @returns {HTMLElement} Code block element
       */
      value: function convertToCodeblock(nodes) {
        if (nodes.length !== 1 || nodes[0].tagName !== 'TABLE') {
          return _get(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), 'convertToCodeblock', this).call(this, nodes);
        }

        var $codeblock = (0, _jquery2.default)('<pre />');
        var node = nodes.shift();

        // convert table to 2-dim array
        var cells = [].slice.call(node.rows).map(function (row) {
          return [].slice.call(row.cells).map(function (cell) {
            return cell.innerText.trim();
          });
        });

        var tsvRows = _reduceToTSV(cells);
        $codeblock.append(tsvRows.reduce(function (acc, row) {
          return acc + ('<div>' + row + '</div>');
        }, []));

        $codeblock.attr('data-te-codeblock', '');

        return $codeblock[0];
      }
    }]);

    return _class;
  }(WwCodeBlockManager));
}

/**
 * determine the event is from codeblock in markdown/codeblock editor
 * @param {CodeMirror} cm - markdown codemirror editor
 * @param {string} source - event source
 * @param {Object} eventData - event data
 * @returns {boolean} - true for the event from codeblock in markdown/codeblock editor
 * @ignore
 */
function _isFromCodeBlockInCodeMirror(cm, source, eventData) {
  // cursor in codeblock in markdown editor
  var fromCodeBlockInCodeMirror = source === 'markdown' && cm.getTokenAt(eventData.from).state.overlay.codeBlock;
  // or codeblock editor
  fromCodeBlockInCodeMirror = fromCodeBlockInCodeMirror || source === 'codeblock';
  // but not from wysiwyg
  fromCodeBlockInCodeMirror = fromCodeBlockInCodeMirror && source !== 'wysiwyg';

  return fromCodeBlockInCodeMirror;
}

/**
 * enclose pasting data strings from markdown in quotes
 * wysiwyg event should be treated separately.
 * because pasteBefore event from wysiwyg has been already processed table data to string,
 * on the other hand we need a table element
 * @param {CodeMirror} cm - markdown codemirror editor
 * @param {string} source - event source
 * @param {Object} data - event data
 * @ignore
 */
function _onMDPasteBefore(cm, _ref2) {
  var source = _ref2.source,
      eventData = _ref2.data;

  if (!_isFromCodeBlockInCodeMirror(cm, source, eventData)) {
    return;
  }

  var code = eventData.text.join('\n');
  var delta = calcDSVDelta(code, '\t');

  if (delta === 0) {
    _csv2.default.COLUMN_SEPARATOR = '\t';
    var parsed = _reduceToTSV(_csv2.default.parse(code));
    eventData.update(eventData.from, eventData.to, parsed);
  }
}

/**
 * chart plugin
 * @param {Editor} editor - editor
 * @param {Object} options - chart options
  * @param {number} [options.minWidth=0] - minimum width
  * @param {number} [options.maxWidth=0] - maximum width
  * @param {number} [options.minHeight=Infinity] - minimum height
  * @param {number} [options.maxHeight=Infinity] - maximum height
  * @param {number|string} [options.width='auto'] - default height
  * @param {number|string} [options.height='auto'] - default height
 * @ignore
 */
function chartExtension(editor) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  var optionLanguages = editor.options.codeBlockLanguages;
  if (optionLanguages && optionLanguages.indexOf(LANG) < 0) {
    optionLanguages.push(LANG);
  }
  codeBlockManager.setReplacer(LANG, function (codeBlockChartDataAndOptions) {
    return chartReplacer(codeBlockChartDataAndOptions, options);
  });

  if (!editor.isViewer()) {
    // treat wysiwyg paste event
    _setWwCodeBlockManagerForChart(editor);

    // treat markdown paste event
    editor.eventManager.listen('pasteBefore', function (ev) {
      return _onMDPasteBefore(editor.mdEditor.cm, ev);
    });
  }
}

_editorProxy2.default.defineExtension('chart', chartExtension);

exports.parseCode2DataAndOptions = parseCode2DataAndOptions;
exports.parseURL2ChartData = parseURL2ChartData;
exports.parseCode2ChartOption = parseCode2ChartOption;
exports.parseDSV2ChartData = parseDSV2ChartData;
exports.detectDelimiter = detectDelimiter;
exports.setDefaultOptions = setDefaultOptions;

/***/ }),
/* 43 */
/***/ (function(module, exports, __webpack_require__) {

/*!
 * tui-chart
 * @fileoverview tui-chart
 * @author NHN Ent. FE Development Lab <dl_javascript@nhnent.com>
 * @version 3.0.1
 * @license MIT
 * @link https://github.com/nhnent/tui.chart
 * bundle created at "Tue Mar 13 2018 16:15:39 GMT+0900 (KST)"
 */
(function webpackUniversalModuleDefinition(root, factory) {
	if(true)
		module.exports = factory(__webpack_require__(44), __webpack_require__(2));
	else if(typeof define === 'function' && define.amd)
		define(["raphael", "tui-code-snippet"], factory);
	else if(typeof exports === 'object')
		exports["chart"] = factory(require("raphael"), require("tui-code-snippet"));
	else
		root["tui"] = root["tui"] || {}, root["tui"]["chart"] = factory(root["Raphael"], (root["tui"] && root["tui"]["util"]));
})(this, function(__WEBPACK_EXTERNAL_MODULE_3__, __WEBPACK_EXTERNAL_MODULE_6__) {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/dist/";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var pluginRaphael = __webpack_require__(2);
	var chart = __webpack_require__(29);
	__webpack_require__(147);

	chart.registerPlugin(pluginRaphael.name, pluginRaphael.plugins, pluginRaphael.callback);
	chart.renderUtil = __webpack_require__(7);
	chart.arrayUtil = __webpack_require__(10);
	chart.colorutil = __webpack_require__(138);

	/**
	 * NHN Entertainment Toast UI Chart.
	 * @namespace tui.chart
	 */
	module.exports = chart;


/***/ }),
/* 1 */,
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileoverview Raphael render plugin.
	 * @author NHN Ent.
	 *         FE Development Lab <dl_javascript@nhnent.com>
	 */

	'use strict';

	var raphael = __webpack_require__(3);

	var BarChart = __webpack_require__(4);
	var Boxplot = __webpack_require__(11);
	var Bullet = __webpack_require__(12);
	var LineChart = __webpack_require__(13);
	var AreaChart = __webpack_require__(15);
	var PieChart = __webpack_require__(17);
	var RadialLineSeries = __webpack_require__(18);
	var CoordinateTypeChart = __webpack_require__(19);
	var BoxTypeChart = __webpack_require__(20);
	var MapChart = __webpack_require__(22);

	var legend = __webpack_require__(23);
	var MapLegend = __webpack_require__(24);
	var CircleLegend = __webpack_require__(25);
	var title = __webpack_require__(26);
	var axis = __webpack_require__(27);

	var RadialPlot = __webpack_require__(28);

	var pluginRaphael = {
	    bar: BarChart,
	    boxplot: Boxplot,
	    bullet: Bullet,
	    column: BarChart,
	    line: LineChart,
	    area: AreaChart,
	    pie: PieChart,
	    bubble: CoordinateTypeChart,
	    scatter: CoordinateTypeChart,
	    heatmap: BoxTypeChart,
	    treemap: BoxTypeChart,
	    map: MapChart,
	    radial: RadialLineSeries,
	    legend: legend,
	    mapLegend: MapLegend,
	    circleLegend: CircleLegend,
	    radialPlot: RadialPlot,
	    title: title,
	    axis: axis
	};
	var callback = function(container, dimension) {
	    var paper = raphael(container, dimension.width, dimension.height);
	    var rect = paper.rect(0, 0, dimension.width, dimension.height);

	    if (paper.raphael.svg) {
	        appendGlowFilterToDefs(paper);
	        appendShadowFilterToDefs(paper);
	    }

	    paper.pushDownBackgroundToBottom = function() {
	        rect.toBack();
	    };

	    paper.changeChartBackgroundColor = function(color) {
	        rect.attr({
	            fill: color
	        });
	    };

	    paper.changeChartBackgroundOpacity = function(opacity) {
	        rect.attr({
	            'fill-opacity': opacity
	        });
	    };

	    paper.resizeBackground = function(width, height) {
	        rect.attr({
	            width: width,
	            height: height
	        });
	    };

	    rect.attr({
	        fill: '#fff',
	        'stroke-width': 0
	    });

	    return paper;
	};

	/**
	 * Append glow filter for series label
	 * @param {object} paper Raphael paper object
	 * @ignore
	 */
	function appendGlowFilterToDefs(paper) {
	    var filter = document.createElementNS('http://www.w3.org/2000/svg', 'filter');
	    var feGaussianBlur = document.createElementNS('http://www.w3.org/2000/svg', 'feGaussianBlur');
	    var feFlood = document.createElementNS('http://www.w3.org/2000/svg', 'feFlood');
	    var feComposite = document.createElementNS('http://www.w3.org/2000/svg', 'feComposite');
	    var feMorphology = document.createElementNS('http://www.w3.org/2000/svg', 'feMorphology');
	    var feMerge = document.createElementNS('http://www.w3.org/2000/svg', 'feMerge');
	    var feMergeNodeColoredBlur = document.createElementNS('http://www.w3.org/2000/svg', 'feMergeNode');
	    var feMergeNodeSourceGraphic = document.createElementNS('http://www.w3.org/2000/svg', 'feMergeNode');

	    filter.id = 'glow';

	    feFlood.setAttribute('result', 'flood');
	    feFlood.setAttribute('flood-color', '#ffffff');
	    feFlood.setAttribute('flood-opacity', '0.5');

	    feComposite.setAttribute('in', 'flood');
	    feComposite.setAttribute('result', 'mask');
	    feComposite.setAttribute('in2', 'SourceGraphic');
	    feComposite.setAttribute('operator', 'in');

	    feMorphology.setAttribute('in', 'mask');
	    feMorphology.setAttribute('result', 'dilated');
	    feMorphology.setAttribute('operator', 'dilate');
	    feMorphology.setAttribute('radius', '2');

	    feGaussianBlur.setAttribute('in', 'dilated');
	    feGaussianBlur.setAttribute('result', 'blurred');
	    feGaussianBlur.setAttribute('stdDeviation', '1');

	    feMergeNodeColoredBlur.setAttribute('in', 'blurred');
	    feMergeNodeSourceGraphic.setAttribute('in', 'SourceGraphic');

	    filter.appendChild(feFlood);
	    filter.appendChild(feComposite);
	    filter.appendChild(feMorphology);
	    filter.appendChild(feGaussianBlur);

	    filter.appendChild(feMerge);

	    feMerge.appendChild(feMergeNodeColoredBlur);
	    feMerge.appendChild(feMergeNodeSourceGraphic);

	    paper.defs.appendChild(filter);
	}

	/**
	 * Append shadow filter for series label
	 * @param {object} paper Raphael paper object
	 * @ignore
	 */
	function appendShadowFilterToDefs(paper) {
	    var filter = document.createElementNS('http://www.w3.org/2000/svg', 'filter');
	    var feOffset = document.createElementNS('http://www.w3.org/2000/svg', 'feOffset');
	    var feGaussianBlur = document.createElementNS('http://www.w3.org/2000/svg', 'feGaussianBlur');
	    var feBlend = document.createElementNS('http://www.w3.org/2000/svg', 'feBlend');

	    filter.setAttributeNS(null, 'id', 'shadow');
	    filter.setAttributeNS(null, 'x', '-15%');
	    filter.setAttributeNS(null, 'y', '-15%');
	    filter.setAttributeNS(null, 'width', '180%');
	    filter.setAttributeNS(null, 'height', '180%');
	    feOffset.setAttributeNS(null, 'result', 'offOut');
	    feOffset.setAttributeNS(null, 'in', 'SourceAlpha');
	    feOffset.setAttributeNS(null, 'dx', '2');
	    feOffset.setAttributeNS(null, 'dy', '2');
	    feGaussianBlur.setAttributeNS(null, 'result', 'blurOut');
	    feGaussianBlur.setAttributeNS(null, 'in', 'offOut');
	    feGaussianBlur.setAttributeNS(null, 'stdDeviation', '2');
	    feBlend.setAttributeNS(null, 'in', 'SourceGraphic');
	    feBlend.setAttributeNS(null, 'in2', 'blurOut');
	    feBlend.setAttributeNS(null, 'mode', 'normal');
	    filter.appendChild(feOffset);
	    filter.appendChild(feGaussianBlur);
	    filter.appendChild(feBlend);
	    paper.defs.appendChild(filter);
	}

	module.exports = {
	    name: 'Raphael',
	    plugins: pluginRaphael,
	    callback: callback
	};



/***/ }),
/* 3 */
/***/ (function(module, exports) {

	module.exports = __WEBPACK_EXTERNAL_MODULE_3__;

/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileoverview Raphael bar chart renderer.
	 * @author NHN Ent.
	 *         FE Development Lab <dl_javascript@nhnent.com>
	 */

	'use strict';

	var raphaelRenderUtil = __webpack_require__(5);
	var snippet = __webpack_require__(6);
	var raphael = __webpack_require__(3);

	var ANIMATION_DURATION = 700;
	var EMPHASIS_OPACITY = 1;
	var DE_EMPHASIS_OPACITY = 0.3;
	var DEFAULT_LUMINANC = 0.2;
	var BAR_HOVER_SPARE_SIZE = 8;

	/**
	 * @classdesc RaphaelBarChart is graph renderer for bar, column chart.
	 * @class RaphaelBarChart
	 * @private
	 */
	var RaphaelBarChart = snippet.defineClass(/** @lends RaphaelBarChart.prototype */ {
	    /**
	     * Render function of bar chart
	     * @param {object} paper paper object
	     * @param {{size: object, model: object, options: object, tooltipPosition: string}} data chart data
	     * @returns {Array.<object>} seriesSet
	     */
	    render: function(paper, data) {
	        var groupBounds = data.groupBounds;

	        if (!groupBounds) {
	            return null;
	        }

	        this.paper = paper;

	        this.theme = data.theme;
	        this.seriesDataModel = data.seriesDataModel;
	        this.chartType = data.chartType;

	        this.paper.setStart();

	        this.options = data.options;
	        this.theme = data.theme;
	        this.groupBars = this._renderBars(groupBounds);
	        this.groupBorders = this._renderBarBorders(groupBounds);

	        this.overlay = this._renderOverlay();
	        this.groupBounds = groupBounds;

	        return this.paper.setFinish();
	    },

	    /**
	     * Render overlay.
	     * @returns {object} raphael object
	     * @private
	     */
	    _renderOverlay: function() {
	        var bound = {
	            width: 1,
	            height: 1,
	            left: 0,
	            top: 0
	        };
	        var attributes = {
	            'fill-opacity': 0
	        };
	        var overlay = this._renderBar(bound, '#fff', attributes);

	        overlay.node.setAttribute(
	            'class', 'auto-shape-rendering'
	        );

	        return overlay;
	    },

	    /**
	     * Render rect
	     * @param {{left: number, top: number, width: number, height: number}} bound bound
	     * @param {string} color series color
	     * @param {object} [attributes] - attributes
	     * @returns {object} bar rect
	     * @private
	     */
	    _renderBar: function(bound, color, attributes) {
	        var rect;

	        if (bound.width < 0 || bound.height < 0) {
	            return null;
	        }

	        rect = raphaelRenderUtil.renderRect(this.paper, bound, snippet.extend({
	            fill: color,
	            stroke: 'none'
	        }, attributes)).toFront();

	        rect.node.setAttribute(
	            'class', 'auto-shape-rendering'
	        );

	        return rect;
	    },

	    /**
	     * Render bars.
	     * @param {Array.<Array.<{left: number, top:number, width: number, height: number}>>} groupBounds bounds
	     * @returns {Array.<Array.<object>>} bars
	     * @private
	     */
	    _renderBars: function(groupBounds) {
	        var self = this;
	        var colors = this.theme.colors;
	        var colorByPoint = this.options.colorByPoint;
	        var groupBars = snippet.map(groupBounds, function(bounds, groupIndex) {
	            return snippet.map(bounds, function(bound, index) {
	                var color, rect, item;

	                if (!bound) {
	                    return null;
	                }

	                item = self.seriesDataModel.getSeriesItem(groupIndex, index);

	                color = colorByPoint ? colors[groupIndex] : colors[index];
	                rect = self._renderBar(bound.start, color);

	                return {
	                    rect: rect,
	                    color: color,
	                    bound: bound.end,
	                    item: item,
	                    groupIndex: groupIndex,
	                    index: index,
	                    isRange: item.isRange
	                };
	            });
	        });

	        return groupBars;
	    },

	    /**
	     * Make rect points.
	     * @param {{left: number, top:number, width: number, height: number}} bound rect bound
	     * @returns {{
	     *      leftTop: {left: number, top: number},
	     *      rightTop: {left: number, top: number},
	     *      rightBottom: {left: number, top: number},
	     *      leftBottom: {left: number, top: number}
	     * }} rect points
	     * @private
	     */
	    _makeRectPoints: function(bound) {
	        return {
	            leftTop: {
	                left: Math.ceil(bound.left),
	                top: Math.ceil(bound.top)
	            },
	            rightTop: {
	                left: Math.ceil(bound.left + bound.width),
	                top: Math.ceil(bound.top)
	            },
	            rightBottom: {
	                left: Math.ceil(bound.left + bound.width),
	                top: Math.ceil(bound.top + bound.height)
	            },
	            leftBottom: {
	                left: Math.ceil(bound.left),
	                top: Math.ceil(bound.top + bound.height)
	            }
	        };
	    },

	    /**
	     * Make top line path.
	     * @param {object} points points
	     *      @param {{left: number, top: number}} points.leftTop left top
	     *      @param {{left: number, top: number}} points.rightTop right top
	     * @param {string} chartType chart type
	     * @param {Item} item item
	     * @returns {string} top line path
	     * @private
	     */
	    _makeTopLinePath: function(points, chartType, item) {
	        var linePath = null,
	            value = item.value,
	            cloneLeftTop;

	        if (chartType === 'bar' || value >= 0 || item.isRange) {
	            cloneLeftTop = snippet.extend({}, points.leftTop);
	            cloneLeftTop.left -= chartType === 'column' || value < 0 ? 1 : 0;
	            linePath = raphaelRenderUtil.makeLinePath(cloneLeftTop, points.rightTop).join(' ');
	        }

	        return linePath;
	    },

	    /**
	     * Make right line path.
	     * @param {object} points points
	     *      @param {{left: number, top: number}} points.rightTop right top
	     *      @param {{left: number, top: number}} points.rightBottom right bottom
	     * @param {string} chartType chart type
	     * @param {Item} item item
	     * @returns {string} top line path
	     * @private
	     */
	    _makeRightLinePath: function(points, chartType, item) {
	        var linePath = null;

	        if (chartType === 'column' || item.value >= 0 || item.isRange) {
	            linePath = raphaelRenderUtil.makeLinePath(points.rightTop, points.rightBottom).join(' ');
	        }

	        return linePath;
	    },

	    /**
	     * Make bottom line path.
	     * @param {object} points points
	     *      @param {{left: number, top: number}} points.lefBottom left bottom
	     *      @param {{left: number, top: number}} points.rightBottom right bottom
	     * @param {string} chartType chart type
	     * @param {Item} item item
	     * @returns {string} top line path
	     * @private
	     */
	    _makeBottomLinePath: function(points, chartType, item) {
	        var linePath = null;

	        if (chartType === 'bar' || item.value < 0 || item.isRange) {
	            linePath = raphaelRenderUtil.makeLinePath(points.leftBottom, points.rightBottom).join(' ');
	        }

	        return linePath;
	    },

	    /**
	     * Make left line path.
	     * @param {object} points points
	     *      @param {{left: number, top: number}} points.lefTop left top
	     *      @param {{left: number, top: number}} points.leftBottom left bottom
	     * @param {string} chartType chart type
	     * @param {Item} item item
	     * @returns {string} top line path
	     * @private
	     */
	    _makeLeftLinePath: function(points, chartType, item) {
	        var linePath = null;

	        if (chartType === 'column' || item.value < 0 || item.isRange) {
	            linePath = raphaelRenderUtil.makeLinePath(points.leftTop, points.leftBottom).join(' ');
	        }

	        return linePath;
	    },

	    /**
	     * Make border lines paths.
	     * @param {{left: number, top:number, width: number, height: number}} bound rect bound
	     * @param {string} chartType chart type
	     * @param {Item} item item
	     * @returns {{top: string, right: string, bottom: string, left: string}} paths
	     * @private
	     */
	    _makeBorderLinesPaths: function(bound, chartType, item) {
	        var points = this._makeRectPoints(bound),
	            paths = {
	                top: this._makeTopLinePath(points, chartType, item),
	                right: this._makeRightLinePath(points, chartType, item),
	                bottom: this._makeBottomLinePath(points, chartType, item),
	                left: this._makeLeftLinePath(points, chartType, item)
	            };

	        return snippet.filter(paths, function(path) {
	            return path;
	        });
	    },

	    /**
	     * Render border lines;
	     * @param {{left: number, top:number, width: number, height: number}} bound bar bound
	     * @param {string} borderColor border color
	     * @param {string} chartType chart type
	     * @param {Item} item item
	     * @returns {object} raphael object
	     * @private
	     */
	    _renderBorderLines: function(bound, borderColor, chartType, item) {
	        var self = this,
	            borderLinePaths = this._makeBorderLinesPaths(bound, chartType, item),
	            lines = {};

	        snippet.forEach(borderLinePaths, function(path, name) {
	            lines[name] = raphaelRenderUtil.renderLine(self.paper, path, borderColor, 1);
	        });

	        return lines;
	    },

	    /**
	     * Render bar borders.
	     * @param {Array.<Array.<{left: number, top:number, width: number, height: number}>>} groupBounds bounds
	     * @returns {Array.<Array.<object>>} borders
	     * @private
	     */
	    _renderBarBorders: function(groupBounds) {
	        var self = this,
	            borderColor = this.theme.borderColor,
	            groupBorders;

	        if (!borderColor) {
	            return null;
	        }

	        groupBorders = snippet.map(groupBounds, function(bounds, groupIndex) {
	            return snippet.map(bounds, function(bound, index) {
	                var seriesItem;

	                if (!bound) {
	                    return null;
	                }

	                seriesItem = self.seriesDataModel.getSeriesItem(groupIndex, index);

	                return self._renderBorderLines(bound.start, borderColor, self.chartType, seriesItem);
	            });
	        });

	        return groupBorders;
	    },

	    /**
	     * Animate rect.
	     * @param {object} rect raphael object
	     * @param {{left: number, top:number, width: number, height: number}} bound rect bound
	     * @private
	     */
	    _animateRect: function(rect, bound) {
	        rect.animate({
	            x: bound.left,
	            y: bound.top,
	            width: bound.width,
	            height: bound.height
	        }, ANIMATION_DURATION, '>');
	    },

	    /**
	     * Animate borders.
	     * @param {Array.<object>} lines raphael objects
	     * @param {{left: number, top:number, width: number, height: number}} bound rect bound
	     * @param {string} chartType chart type
	     * @param {Item} item item
	     * @private
	     */
	    _animateBorders: function(lines, bound, chartType, item) {
	        var paths = this._makeBorderLinesPaths(bound, chartType, item);

	        snippet.forEach(lines, function(line, name) {
	            line.animate({
	                path: paths[name]
	            }, ANIMATION_DURATION, '>');
	        });
	    },

	    /**
	     * Animate.
	     * @param {function} onFinish finish callback function
	     */
	    animate: function(onFinish) {
	        var self = this,
	            groupBorders = this.groupBorders || [];

	        raphaelRenderUtil.forEach2dArray(this.groupBars, function(bar, groupIndex, index) {
	            var lines = groupBorders[groupIndex] && groupBorders[groupIndex][index];
	            if (!bar) {
	                return;
	            }
	            self._animateRect(bar.rect, bar.bound);
	            if (lines) {
	                self._animateBorders(lines, bar.bound, self.chartType, bar.item);
	            }
	        });

	        if (onFinish) {
	            this.callbackTimeout = setTimeout(function() {
	                onFinish();
	                delete self.callbackTimeout;
	            }, ANIMATION_DURATION);
	        }
	    },

	    /**
	     * Show animation.
	     * @param {{groupIndex: number, index:number}} data show info
	     */
	    showAnimation: function(data) {
	        var bar = this.groupBars[data.groupIndex][data.index],
	            bound = bar.bound;

	        this.overlay.attr({
	            width: bound.width + BAR_HOVER_SPARE_SIZE,
	            height: bound.height + BAR_HOVER_SPARE_SIZE,
	            stroke: '#fff',
	            'stroke-width': '1',
	            x: bound.left - 4,
	            y: bound.top - 4,
	            'fill-opacity': 1
	        });
	        this.resortBarIndex(data.groupIndex);
	        this.overlay.toFront();
	        bar.rect.toFront();

	        if (this.labelSet) {
	            this.labelSet.toFront();
	        }
	        this.overlay.node.setAttribute('filter', 'url(#shadow)');
	    },

	    /**
	     * Hide animation.
	     * @param {{groupIndex: number, index:number}} data show info
	     */
	    hideAnimation: function(data) {
	        this.resortBarIndex(data.groupIndex);
	        this.overlay.attr({
	            width: 1,
	            height: 1,
	            x: 0,
	            y: 0,
	            'fill-opacity': 0
	        });

	        if (this.labelSet) {
	            this.labelSet.toFront();
	        }
	    },

	    /**
	     * reindexing bar in group
	     * @param {number} groupIndex - group index
	     */
	    resortBarIndex: function(groupIndex) {
	        snippet.forEach(this.groupBars[groupIndex], function(barItem) {
	            barItem.rect.toFront();
	        });
	    },

	    /**
	     * Update rect bound
	     * @param {object} rect raphael object
	     * @param {{left: number, top: number, width: number, height: number}} bound bound
	     * @private
	     */
	    _updateRectBound: function(rect, bound) {
	        rect.attr({
	            x: bound.left,
	            y: bound.top,
	            width: bound.width,
	            height: bound.height
	        });
	    },

	    /**
	     * Resize graph of bar type chart.
	     * @param {object} params parameters
	     *      @param {{width: number, height:number}} params.dimension dimension
	     *      @param {Array.<Array.<{
	     *                  left:number, top:number, width: number, height: number
	     *              }>>} params.groupBounds group bounds
	     */
	    resize: function(params) {
	        var self = this,
	            groupBorders = this.groupBorders || [],
	            dimension = params.dimension,
	            groupBounds = params.groupBounds;

	        this.groupBounds = groupBounds;
	        this.paper.setSize(dimension.width, dimension.height);

	        raphaelRenderUtil.forEach2dArray(this.groupBars, function(bar, groupIndex, index) {
	            var lines, bound;

	            if (!bar) {
	                return;
	            }

	            lines = groupBorders[groupIndex] && groupBorders[groupIndex][index];
	            bound = groupBounds[groupIndex][index].end;
	            bar.bound = bound;
	            raphaelRenderUtil.updateRectBound(bar.rect, bound);

	            if (lines) {
	                self._updateBordersPath(lines, bound, self.chartType, bar.item);
	            }
	        });
	    },

	    /**
	     * Change borders color.
	     * @param {Array.<object>} lines raphael objects
	     * @param {borderColor} borderColor border color
	     * @private
	     */
	    _changeBordersColor: function(lines, borderColor) {
	        snippet.forEach(lines, function(line) {
	            line.attr({stroke: borderColor});
	        });
	    },

	    /**
	     * Change bar color.
	     * @param {{groupIndex: number, index: number}} indexes indexes
	     * @param {string} color fill color
	     * @param {?string} borderColor stroke color
	     * @private
	     */
	    _changeBarColor: function(indexes, color, borderColor) {
	        var bar = this.groupBars[indexes.groupIndex][indexes.index],
	            lines;

	        bar.rect.attr({
	            fill: color
	        });

	        if (borderColor) {
	            lines = this.groupBorders[indexes.groupIndex][indexes.index];
	            this._changeBordersColor(lines, borderColor);
	        }
	    },

	    /**
	     * Select series.
	     * @param {{groupIndex: number, index: number}} indexes indexes
	     */
	    selectSeries: function(indexes) {
	        var bar = this.groupBars[indexes.groupIndex][indexes.index],
	            objColor = raphael.color(bar.color),
	            selectionColorTheme = this.theme.selectionColor,
	            color = selectionColorTheme || raphaelRenderUtil.makeChangedLuminanceColor(objColor.hex, DEFAULT_LUMINANC),
	            borderColor = this.theme.borderColor,
	            objBorderColor;

	        if (borderColor) {
	            objBorderColor = raphael.color(borderColor);
	            borderColor = raphaelRenderUtil.makeChangedLuminanceColor(objBorderColor.hex, DEFAULT_LUMINANC);
	        }

	        this._changeBarColor(indexes, color, borderColor);
	    },

	    /**
	     * Unselect series.
	     * @param {{groupIndex: number, index: number}} indexes indexes
	     */
	    unselectSeries: function(indexes) {
	        var bar = this.groupBars[indexes.groupIndex][indexes.index],
	            borderColor = this.theme.borderColor;
	        this._changeBarColor(indexes, bar.color, borderColor);
	    },

	    /**
	     * Select legend.
	     * @param {?number} legendIndex legend index
	     */
	    selectLegend: function(legendIndex) {
	        var groupBorders = this.groupBorders || [],
	            noneSelected = snippet.isNull(legendIndex);

	        raphaelRenderUtil.forEach2dArray(this.groupBars, function(bar, groupIndex, index) {
	            var lines, opacity;

	            if (!bar) {
	                return;
	            }

	            lines = groupBorders[groupIndex] && groupBorders[groupIndex][index];
	            opacity = (noneSelected || legendIndex === index) ? EMPHASIS_OPACITY : DE_EMPHASIS_OPACITY;

	            bar.rect.attr({'fill-opacity': opacity});
	            if (lines) {
	                snippet.forEach(lines, function(line) {
	                    line.attr({'stroke-opacity': opacity});
	                });
	            }
	        });
	    },

	    renderSeriesLabel: function(paper, groupPositions, groupLabels, labelTheme, isStacked) {
	        var textAnchor = (isStacked || this.chartType === 'column') ? 'middle' : 'start';
	        var attributes = {
	            'font-size': labelTheme.fontSize,
	            'font-family': labelTheme.fontFamily,
	            'font-weight': labelTheme.fontWeight,
	            fill: labelTheme.color,
	            opacity: 0,
	            'text-anchor': textAnchor
	        };
	        var labelSet = this.labelSet = paper.set();

	        snippet.forEach(groupLabels, function(categoryLabel, categoryIndex) {
	            snippet.forEach(categoryLabel, function(label, seriesIndex) {
	                var position = groupPositions[categoryIndex][seriesIndex];
	                var endLabel = raphaelRenderUtil.renderText(paper, position.end, label.end, attributes);
	                var enaLabelNodeStyle = endLabel.node.style;
	                var startLabel;

	                enaLabelNodeStyle.userSelect = 'none';
	                enaLabelNodeStyle.cursor = 'default';

	                labelSet.push(endLabel);

	                if (position.start) {
	                    startLabel = raphaelRenderUtil.renderText(paper, position.start, label.start, attributes);
	                    startLabel.node.style.userSelect = 'none';
	                    startLabel.node.style.cursor = 'default';

	                    labelSet.push(startLabel);
	                }
	            });
	        });

	        return labelSet;
	    }
	});

	module.exports = RaphaelBarChart;


/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileoverview Util for raphael rendering.
	 * @author NHN Ent.
	 *         FE Development Lab <dl_javascript@nhnent.com>
	 */

	'use strict';

	var snippet = __webpack_require__(6);
	var renderUtil = __webpack_require__(7);
	var raphael = __webpack_require__(3);

	/**
	 * Util for raphael rendering.
	 * @module raphaelRenderUtil
	 * @private
	 */
	var raphaelRenderUtil = {

	    /**
	     * Make line path.
	     * @memberOf module:raphaelRenderUtil
	     * @param {{top: number, left: number}} fromPos from position
	     * @param {{top: number, left: number}} toPos to position
	     * @param {number} width width
	     * @returns {string} path
	     */
	    makeLinePath: function(fromPos, toPos, width) {
	        var fromPoint = [fromPos.left, fromPos.top];
	        var toPoint = [toPos.left, toPos.top];
	        var additionalPoint;

	        width = width || 1;
	        additionalPoint = (width % 2 / 2);

	        snippet.forEachArray(fromPoint, function(from, index) {
	            if (from === toPoint[index]) {
	                fromPoint[index] = toPoint[index] = Math.round(from) - additionalPoint;
	            }
	        });

	        return ['M'].concat(fromPoint).concat('L').concat(toPoint);
	    },

	    /**
	     * Render line.
	     * @memberOf module:raphaelRenderUtil
	     * @param {object} paper raphael paper
	     * @param {string} path line path
	     * @param {string} color line color
	     * @param {number} strokeWidth stroke width
	     * @returns {object} raphael line
	     */
	    renderLine: function(paper, path, color, strokeWidth) {
	        var line = paper.path([path]),
	            strokeStyle = {
	                stroke: color,
	                'stroke-width': (snippet.isUndefined(strokeWidth) ? 2 : strokeWidth),
	                'stroke-linecap': 'butt'
	            };
	        if (color === 'transparent') {
	            strokeStyle.stroke = '#fff';
	            strokeStyle['stroke-opacity'] = 0;
	        }

	        line.attr(strokeStyle).node.setAttribute('class', 'auto-shape-rendering');

	        return line;
	    },

	    /**
	     * text ellipsis for fixed width
	     * @param {string} text - target text
	     * @param {number} fixedWidth - width for elipsis
	     * @param {object} theme - lable theme
	     * @returns {string}
	     */
	    getEllipsisText: function(text, fixedWidth, theme) {
	        var textArray = text.split('');
	        var textLength = textArray.length;
	        var dotWidth = this.getRenderedTextSize('.', theme.fontSize, theme.fontFamily).width;
	        var textWidth = dotWidth * 2;
	        var newString = '';
	        var i = 0;

	        for (; i < textLength; i += 1) {
	            textWidth += this.getRenderedTextSize(textArray[i], theme.fontSize, theme.fontFamily).width;
	            if (textWidth >= fixedWidth) {
	                newString += '..';
	                break;
	            }
	            newString += textArray[i];
	        }

	        return newString;
	    },

	    /**
	     * Render text
	     * @param {object} paper - Raphael paper object
	     * @param {{left: number, top: number}} pos - text object position
	     * @param {string} text - text content
	     * @param {object} [attributes] - text object's attributes
	     * @returns {object}
	     */
	    renderText: function(paper, pos, text, attributes) {
	        var textObj = paper.text(pos.left, pos.top, snippet.decodeHTMLEntity(String(text)));

	        if (attributes) {
	            if (attributes['dominant-baseline']) {
	                textObj.node.setAttribute('dominant-baseline', attributes['dominant-baseline']);
	            } else {
	                textObj.node.setAttribute('dominant-baseline', 'central');
	            }

	            textObj.attr(attributes);
	        }

	        return textObj;
	    },

	    /**
	     * Render area graph.
	     * @param {object} paper raphael paper
	     * @param {string} path path
	     * @param {object} fillStyle fill style
	     *      @param {string} fillStyle.fill fill color
	     *      @param {?number} fillStyle.opacity fill opacity
	     *      @param {string} fillStyle.stroke stroke color
	     *      @param {?number} fillStyle.stroke-opacity stroke opacity
	     * @returns {Array.<object>} raphael object
	     */
	    renderArea: function(paper, path, fillStyle) {
	        var area = paper.path(path);

	        fillStyle = snippet.extend({
	            'stroke-opacity': 0
	        }, fillStyle);
	        area.attr(fillStyle);

	        return area;
	    },

	    /**
	     * Render circle.
	     * @param {object} paper - raphael object
	     * @param {{left: number, top: number}} position - position
	     * @param {number} radius - radius
	     * @param {object} attributes - attributes
	     * @returns {object}
	     */
	    renderCircle: function(paper, position, radius, attributes) {
	        var circle = paper.circle(position.left, position.top, radius);

	        if (attributes) {
	            circle.attr(attributes);
	        }

	        return circle;
	    },

	    /**
	     * Render rect.
	     * @param {object} paper - raphael object
	     * @param {{left: number, top: number, width: number, height, number}} bound - bound
	     * @param {object} attributes - attributes
	     * @returns {*}
	     */
	    renderRect: function(paper, bound, attributes) {
	        var rect = paper.rect(bound.left, bound.top, bound.width, bound.height);

	        if (attributes) {
	            rect.attr(attributes);
	        }

	        return rect;
	    },

	    /**
	     * Update rect bound
	     * @param {object} rect raphael object
	     * @param {{left: number, top: number, width: number, height: number}} bound bound
	     */
	    updateRectBound: function(rect, bound) {
	        rect.attr({
	            x: bound.left,
	            y: bound.top,
	            width: bound.width,
	            height: bound.height
	        });
	    },

	    /**
	     * Render items of line type chart.
	     * @param {Array.<Array.<object>>} groupItems group items
	     * @param {function} funcRenderItem function
	     */
	    forEach2dArray: function(groupItems, funcRenderItem) {
	        if (groupItems) {
	            snippet.forEachArray(groupItems, function(items, groupIndex) {
	                snippet.forEachArray(items, function(item, index) {
	                    funcRenderItem(item, groupIndex, index);
	                });
	            });
	        }
	    },

	    /**
	     * Make changed luminance color.
	     * @param {string} hex hax color
	     * @param {number} lum luminance
	     * @returns {string} changed color
	     */
	    makeChangedLuminanceColor: function(hex, lum) {
	        var changedHex;

	        hex = hex.replace('#', '');
	        lum = lum || 0;

	        changedHex = snippet.map(snippet.range(3), function(index) {
	            var hd = parseInt(hex.substr(index * 2, 2), 16);
	            var newHd = hd + (hd * lum);

	            newHd = Math.round(Math.min(Math.max(0, newHd), 255)).toString(16);

	            return renderUtil.formatToZeroFill(newHd, 2);
	        }).join('');

	        return '#' + changedHex;
	    },

	    /**
	     * Get rendered text element size
	     * @param {string} text text content
	     * @param {number} fontSize font-size attribute
	     * @param {string} fontFamily font-family attribute
	     * @returns {{
	     *     width: number,
	     *     height: number
	     * }}
	     */
	    getRenderedTextSize: function(text, fontSize, fontFamily) {
	        var paper = raphael(document.body, 100, 100);
	        var textElement = paper.text(0, 0, text).attr({
	            'font-size': fontSize,
	            'font-family': fontFamily
	        });
	        var bBox = textElement.getBBox();

	        textElement.remove();
	        paper.remove();

	        return {
	            width: bBox.width,
	            height: bBox.height
	        };
	    },

	    /**
	     * Animate given element's opacity
	     * @param {object} element element
	     * @param {number} startOpacity endOpacity default is '0'
	     * @param {number} endOpacity endOpacity default is '1'
	     * @param {number} duration endOpacity default is '600'
	     */
	    animateOpacity: function(element, startOpacity, endOpacity, duration) {
	        var animationDuration = isNumber(duration) ? duration : 600;
	        var animationStartOpacity = isNumber(startOpacity) ? startOpacity : 0;
	        var animationEndOpacity = isNumber(endOpacity) ? endOpacity : 1;
	        var animation = raphael.animation({
	            opacity: animationEndOpacity
	        }, animationDuration);

	        element.attr({
	            opacity: animationStartOpacity
	        });

	        element.animate(animation);
	    }
	};

	/**
	 * Return boolean value for given parameter is number or not
	 * @param {*} numberSuspect number suspect
	 * @returns {boolean}
	 */
	function isNumber(numberSuspect) {
	    return snippet.isExisty(numberSuspect) && typeof numberSuspect === 'number';
	}

	module.exports = raphaelRenderUtil;


/***/ }),
/* 6 */
/***/ (function(module, exports) {

	module.exports = __WEBPACK_EXTERNAL_MODULE_6__;

/***/ }),
/* 7 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileoverview Util for rendering.
	 * @author NHN Ent.
	 *         FE Development Lab <dl_javascript@nhnent.com>
	 */

	'use strict';

	var chartConst = __webpack_require__(8);
	var dom = __webpack_require__(9);
	var arrayUtil = __webpack_require__(10);
	var snippet = __webpack_require__(6);

	var concat = Array.prototype.concat;

	var browser = snippet.browser,
	    isIE7 = browser.msie && browser.version === 7,
	    isOldBrowser = browser.msie && browser.version <= 8;
	var hasComputedStyle = window.getComputedStyle || false;

	var lineBaseChartCount = 0;
	var CLIP_RECT_ID = 'clipRectForAnimation';

	/**
	 * Util for rendering.
	 * @module renderUtil
	 * @private */
	var renderUtil = {
	    /**
	     * Concat string.
	     * @params {...string} target strings
	     * @returns {string} concat string
	     * @memberof module:renderUtil
	     */
	    concatStr: function() {
	        return String.prototype.concat.apply('', arguments);
	    },

	    /**
	     * Make cssText for font.
	     * @param {{fontSize: number, fontFamily: string, color: string}} theme font theme
	     * @returns {string} cssText
	     * @memberof module:renderUtil
	     */
	    makeFontCssText: function(theme) {
	        var cssTexts = [];

	        if (!theme) {
	            return '';
	        }

	        if (theme.fontSize) {
	            cssTexts.push(this.concatStr('font-size:', theme.fontSize, 'px'));
	        }

	        if (theme.fontFamily) {
	            cssTexts.push(this.concatStr('font-family:', theme.fontFamily));
	        }

	        if (theme.color) {
	            cssTexts.push(this.concatStr('color:', theme.color));
	        }

	        if (theme.fontWeight) {
	            cssTexts.push(this.concatStr('font-weight:', theme.fontWeight));
	        }

	        return cssTexts.join(';');
	    },

	    checkEl: null,
	    /**
	     * Create element for size check.
	     * @memberof module:renderUtil
	     * @returns {HTMLElement} element
	     * @private
	     */
	    _createSizeCheckEl: function() {
	        var div, span;
	        if (!this.checkEl) {
	            div = dom.create('DIV', 'tui-chart-size-check-element');
	            span = dom.create('SPAN');
	            div.appendChild(span);
	            this.checkEl = div;
	        } else {
	            this.checkEl.style.cssText = '';
	        }

	        return this.checkEl;
	    },

	    /**
	     * Make caching key.
	     * @param {string} label labek
	     * @param {{fontSize: number, fontFamily: string}} theme theme
	     * @param {string} offsetType offset type (offsetWidth or offsetHeight)
	     * @returns {string} key
	     * @private
	     */
	    _makeCachingKey: function(label, theme, offsetType) {
	        var keys = [label, offsetType];

	        snippet.forEach(theme, function(key, value) {
	            keys.push(key + value);
	        });

	        return keys.join('-');
	    },

	    /**
	     * Add css style.
	     * @param {HTMLElement} div div element
	     * @param {{fontSize: number, fontFamily: string, cssText: string}} theme theme
	     * @private
	     */
	    _addCssStyle: function(div, theme) {
	        div.style.fontSize = (theme.fontSize || chartConst.DEFAULT_LABEL_FONT_SIZE) + 'px';

	        if (theme.fontFamily) {
	            div.style.fontFamily = theme.fontFamily;
	        }

	        if (theme.fontWeight) {
	            div.style.fontWeight = theme.fontWeight;
	        }

	        if (theme.cssText) {
	            div.style.cssText += theme.cssText;
	        }
	    },

	    /**
	     * Size cache.
	     * @type {object}
	     * @private
	     */
	    sizeCache: {},

	    /**
	     * Get rendered label size (width or height).
	     * @memberOf module:renderUtil
	     * @param {string | number} label label
	     * @param {object} theme theme
	     * @param {string} offsetType offset type (offsetWidth or offsetHeight)
	     * @returns {number} size
	     * @private
	     */
	    _getRenderedLabelSize: function(label, theme, offsetType) {
	        var key, div, span, labelSize;

	        theme = theme || {};

	        label = snippet.isExisty(label) ? String(label) : '';

	        if (!label) {
	            return 0;
	        }

	        key = this._makeCachingKey(label, theme, offsetType);
	        labelSize = this.sizeCache[key];

	        if (!labelSize) {
	            div = this._createSizeCheckEl();
	            span = div.firstChild;

	            span.innerHTML = label;

	            this._addCssStyle(div, theme);

	            document.body.appendChild(div);
	            labelSize = span[offsetType];
	            document.body.removeChild(div);

	            this.sizeCache[key] = labelSize;
	        }

	        return labelSize;
	    },

	    /**
	     * Get rendered label width.
	     * @memberof module:renderUtil
	     * @param {string} label label
	     * @param {{fontSize: number, fontFamily: string, color: string}} theme label theme
	     * @returns {number} width
	     */
	    getRenderedLabelWidth: function(label, theme) {
	        var labelWidth = this._getRenderedLabelSize(label, theme, 'offsetWidth');

	        return labelWidth;
	    },

	    /**
	     * Get rendered label height.
	     * @memberof module:renderUtil
	     * @param {string} label label
	     * @param {{fontSize: number, fontFamily: string, color: string}} theme label theme
	     * @returns {number} height
	     */
	    getRenderedLabelHeight: function(label, theme) {
	        var labelHeight = this._getRenderedLabelSize(label, theme, 'offsetHeight');

	        return labelHeight;
	    },

	    /**
	     * Get Rendered Labels Max Size(width or height).
	     * @memberof module:renderUtil
	     * @param {string[]} labels labels
	     * @param {{fontSize: number, fontFamily: string, color: string}} theme label theme
	     * @param {function} iteratee iteratee
	     * @returns {number} max size (width or height)
	     * @private
	     */
	    _getRenderedLabelsMaxSize: function(labels, theme, iteratee) {
	        var maxSize = 0,
	            sizes;

	        if (labels && labels.length) {
	            sizes = snippet.map(labels, function(label) {
	                return iteratee(label, theme);
	            });
	            maxSize = arrayUtil.max(sizes);
	        }

	        return maxSize;
	    },

	    /**
	     * Get rendered labels max width.
	     * @memberof module:renderUtil
	     * @param {string[]} labels labels
	     * @param {{fontSize: number, fontFamily: string, color: string}} theme label theme
	     * @returns {number} max width
	     * @private
	     */
	    getRenderedLabelsMaxWidth: function(labels, theme) {
	        var iteratee = snippet.bind(this.getRenderedLabelWidth, this);
	        var maxWidth = this._getRenderedLabelsMaxSize(labels, theme, iteratee);

	        return maxWidth;
	    },

	    /**
	     * Get rendered labels max height.
	     * @memberof module:renderUtil
	     * @param {string[]} labels labels
	     * @param {{fontSize: number, fontFamily: string, color: string}} theme label theme
	     * @returns {number} max height
	     */
	    getRenderedLabelsMaxHeight: function(labels, theme) {
	        var iteratee = snippet.bind(this.getRenderedLabelHeight, this);
	        var maxHeight = this._getRenderedLabelsMaxSize(labels, theme, iteratee);

	        return maxHeight;
	    },

	    /**
	     * Render dimension.
	     * @memberof module:renderUtil
	     * @param {HTMLElement} el target element
	     * @param {{width: number, height: number}} dimension dimension
	     */
	    renderDimension: function(el, dimension) {
	        el.style.cssText = [
	            this.concatStr('width:', dimension.width, 'px'),
	            this.concatStr('height:', dimension.height, 'px')
	        ].join(';');
	    },

	    /**
	     * Render position(top, right).
	     * @memberof module:renderUtil
	     * @param {HTMLElement} el target element
	     * @param {{top: number, left: number, right: number}} position position
	     */
	    renderPosition: function(el, position) {
	        if (snippet.isUndefined(position)) {
	            return;
	        }

	        snippet.forEachArray(['top', 'bottom', 'left', 'right'], function(key) {
	            var value = position[key];

	            if (snippet.isNumber(value)) {
	                el.style[key] = position[key] + 'px';
	            }
	        });
	    },

	    /**
	     * Render background.
	     * @memberof module:renderUtil
	     * @param {HTMLElement} el target element
	     * @param {string} background background option
	     */
	    renderBackground: function(el, background) {
	        if (!background) {
	            return;
	        }

	        el.style.background = background;
	    },

	    /**
	     * Render font family.
	     * @memberof module:renderUtil
	     * @param {HTMLElement} el target element
	     * @param {string} fontFamily font family option
	     */
	    renderFontFamily: function(el, fontFamily) {
	        if (!fontFamily) {
	            return;
	        }

	        el.style.fontFamily = fontFamily;
	    },

	    /**
	     * Render title.
	     * @memberof module:renderUtil
	     * @param {string} title title
	     * @param {{fontSize: number, color: string, background: string}} theme title theme
	     * @param {string} className css class name
	     * @returns {HTMLElement} title element
	     */
	    renderTitle: function(title, theme, className) {
	        var elTitle, cssText;

	        if (!title) {
	            return null;
	        }

	        elTitle = dom.create('DIV', className);
	        elTitle.innerHTML = title;

	        cssText = renderUtil.makeFontCssText(theme);

	        if (theme.background) {
	            cssText += ';' + this.concatStr('background:', theme.background);
	        }

	        elTitle.style.cssText = cssText;

	        return elTitle;
	    },

	    /**
	     * Expand dimension.
	     * @param {{
	     *      dimension: {width: number, height: number},
	     *      position: {left: number, top: number}
	     * }} bound series bound
	     * @returns {{
	     *      dimension: {width: number, height: number},
	     *      position: {left: number, top: number}
	     * }} expended bound
	     * @memberof module:renderUtil
	     */
	    expandBound: function(bound) {
	        var dimension = bound.dimension;
	        var position = bound.position;

	        return {
	            dimension: {
	                width: dimension.width + (chartConst.SERIES_EXPAND_SIZE * 2),
	                height: dimension.height + (chartConst.SERIES_EXPAND_SIZE * 2)
	            },
	            position: {
	                left: position.left - chartConst.SERIES_EXPAND_SIZE,
	                top: position.top - chartConst.SERIES_EXPAND_SIZE
	            }
	        };
	    },

	    /**
	     * Proper case.
	     * @param {string} value - string value
	     * @returns {string}
	     */
	    _properCase: function(value) {
	        return value.substring(0, 1).toUpperCase() + value.substring(1);
	    },

	    /**
	     * Make mouse event detector name.
	     * @param {string} prefix prefix
	     * @param {string} value value
	     * @param {string} suffix suffix
	     * @returns {string} mouse event detector name
	     * @memberof module:renderUtil
	     */
	    makeMouseEventDetectorName: function(prefix, value, suffix) {
	        return prefix + this._properCase(value) + this._properCase(suffix);
	    },

	    /**
	     * Format value.
	     * @param {object} params - raw data
	     *     @param {number} params.value value
	     *     @param {Array.<function>} params.formatFunctions - functions for format
	     *     @param {string} params.chartType - type of chart
	     *     @param {string} params.areaType - type of area like yAxis, xAxis, series, circleLegend
	     *     @param {string} [params.valueType] - type of value
	     *     @param {string} [params.legendName] - legendName
	     * @returns {string} formatted value
	     * @memberof module:renderUtil
	     */
	    formatValue: function(params) {
	        var value = params.value;
	        var formatFunctions = params.formatFunctions;
	        var valueType = params.valueType || 'value';
	        var areaType = params.areaType;
	        var chartType = params.chartType;
	        var legendName = params.legendName;

	        var fns = [String(value)].concat(formatFunctions || []);

	        return snippet.reduce(fns, function(stored, fn) {
	            return fn(stored, chartType, areaType, valueType, legendName);
	        });
	    },
	    /**
	     * Format values.
	     * @param {Array.<number>} values values
	     * @param {Array.<function>} formatFunctions functions for format
	     * @param {string} chartType - type of chart
	     * @param {string} areaType - type of area like yAxis, xAxis, series, circleLegend
	     * @param {string} valueType - type of value
	     * @returns {Array.<string>}
	     * @memberof module:renderUtil
	     */
	    formatValues: function(values, formatFunctions, chartType, areaType, valueType) {
	        var formatedValues;

	        if (!formatFunctions || !formatFunctions.length) {
	            return values;
	        }

	        formatedValues = snippet.map(values, function(label) {
	            return renderUtil.formatValue({
	                value: label,
	                formatFunctions: formatFunctions,
	                chartType: chartType,
	                areaType: areaType,
	                valueType: valueType
	            });
	        });

	        return formatedValues;
	    },

	    /**
	     * Format date.
	     * @param {string | number | date} value - value
	     * @param {string} format - date format
	     * @returns {string}
	     * @memberof module:renderUtil
	     */
	    formatDate: function(value, format) {
	        var date = snippet.isDate(value) ? value : (new Date(value));
	        format = format || chartConst.DEFAULT_DATE_FORMAT;

	        return snippet.formatDate(format, date) || value;
	    },

	    /**
	     * Format dates.
	     * @param {Array.<string | number | date>} values - values
	     * @param {string} format - date format
	     * @returns {Array}
	     * @memberof module:renderUtil
	     */
	    formatDates: function(values, format) {
	        var formatDate = this.formatDate;

	        format = format || chartConst.DEFAULT_DATE_FORMAT;

	        return snippet.map(values, function(value) {
	            return formatDate(value, format);
	        });
	    },

	    /**
	     * Cancel animation
	     * @param {{id: number}} animation animaion object
	     * @memberof module:renderUtil
	     */
	    cancelAnimation: function(animation) {
	        if (animation && animation.id) {
	            cancelAnimationFrame(animation.id);
	            delete animation.id;
	        }
	    },

	    /**
	     * Start animation.
	     * @param {number} animationTime - animation time
	     * @param {function} onAnimation - animation callback function
	     * @param {function} onCompleted - completed callback function
	     * @returns {{id: number}} requestAnimationFrame id
	     * @memberof module:renderUtil
	     */
	    startAnimation: function(animationTime, onAnimation, onCompleted) {
	        var animation = {},
	            startTime;

	        /**
	         * Animate.
	         */
	        function animate() {
	            var diffTime = (new Date()).getTime() - startTime,
	                ratio = Math.min((diffTime / animationTime), 1);

	            onAnimation(ratio);

	            if (ratio === 1) {
	                delete animation.id;
	                if (onCompleted) {
	                    onCompleted();
	                }
	            } else {
	                animation.id = requestAnimationFrame(animate);
	            }
	        }

	        startTime = (new Date()).getTime();
	        animation.id = requestAnimationFrame(animate);

	        return animation;
	    },

	    /**
	     * Whether IE7 or not.
	     * @returns {boolean} result boolean
	     */
	    isIE7: function() {
	        return isIE7;
	    },

	    /**
	     * Whether oldBrowser or not.
	     * @memberof module:renderUtil
	     * @returns {boolean} result boolean
	     */
	    isOldBrowser: function() {
	        return isOldBrowser;
	    },

	    /**
	     * Format to zero fill.
	     * @param {string} value target value
	     * @param {number} len length of result
	     * @returns {string} formatted value
	     * @private
	     */
	    formatToZeroFill: function(value, len) {
	        var zero = '0';

	        value = String(value);

	        if (value.length >= len) {
	            return value;
	        }

	        while (value.length < len) {
	            value = zero + value;
	        }

	        return value;
	    },

	    /**
	     * Format to Decimal.
	     * @param {string} value target value
	     * @param {number} len length of under decimal point
	     * @returns {string} formatted value
	     * @memberof module:renderUtil
	     */
	    formatToDecimal: function(value, len) {
	        var DECIMAL = 10;
	        var pow;

	        if (len === 0) {
	            return Math.round(value);
	        }

	        pow = Math.pow(DECIMAL, len);
	        value = Math.round(value * pow) / pow;
	        value = parseFloat(value).toFixed(len);

	        return value;
	    },

	    /**
	     * Format to Comma.
	     * @param {string} value target value
	     * @returns {string} formatted value
	     * @private
	     */
	    formatToComma: function(value) {
	        var comma = ',',
	            underPointValue = '',
	            betweenLen = 3,
	            orgValue = value,
	            sign, values, lastIndex, formattedValue;

	        value = String(value);
	        sign = value.indexOf('-') > -1 ? '-' : '';

	        if (value.indexOf('.') > -1) {
	            values = value.split('.');
	            value = String(Math.abs(values[0]));
	            underPointValue = '.' + values[1];
	        } else {
	            value = String(Math.abs(value));
	        }

	        if (value.length <= betweenLen) {
	            formattedValue = orgValue;
	        } else {
	            values = (value).split('').reverse();
	            lastIndex = values.length - 1;
	            values = snippet.map(values, function(char, index) {
	                var result = [char];
	                if (index < lastIndex && (index + 1) % betweenLen === 0) {
	                    result.push(comma);
	                }

	                return result;
	            });
	            formattedValue = sign + concat.apply([], values).reverse().join('') + underPointValue;
	        }

	        return formattedValue;
	    },

	    /**
	     * Make cssText from map.
	     * @param {object} cssMap - css map
	     * @returns {string}
	     * @memberof module:renderUtil
	     */
	    makeCssTextFromMap: function(cssMap) {
	        return snippet.map(cssMap, function(value, name) {
	            return renderUtil.concatStr(name, ':', value);
	        }).join(';');
	    },

	    /**
	     * Perse String.
	     * @param {string} value - string
	     * @returns {string}
	     */
	    _perseString: function(value) {
	        return typeof value === 'string' || typeof value === 'number' ? String(value) : '';
	    },

	    /**
	     * Add prefix or suffix to label.
	     * @param {array} labels - labels
	     * @param {string} prefix - string
	     * @param {string} suffix - string
	     * @returns {array}
	     * @memberof module:renderUtil
	     */
	    addPrefixSuffix: function(labels, prefix, suffix) {
	        prefix = this._perseString(prefix);
	        suffix = this._perseString(suffix);

	        if (!(prefix === '' && suffix === '')) {
	            return snippet.map(labels, function(label) {
	                return prefix + label + suffix;
	            });
	        }

	        return labels;
	    },

	    /**
	     * Returns element's style value defined at css file
	     * @param {HTMLElement} target - Current element
	     * @returns {Object} Style object of element
	     * @memberof module:renderUtil
	     */
	    getStyle: function(target) {
	        var computedObj;

	        if (hasComputedStyle) {
	            computedObj = window.getComputedStyle(target, '');
	        } else {
	            computedObj = target.currentStyle;
	        }

	        return computedObj;
	    },

	    /**
	     * Get clip rect id
	     * @returns {string} create unique id by line base chart count
	     */
	    generateClipRectId: function() {
	        var id = CLIP_RECT_ID + lineBaseChartCount;
	        lineBaseChartCount += 1;

	        return id;
	    }
	};

	/**
	 * Set css opacity.
	 * @param {HTMLElement | Array.<HTMLElement>} elements - elements
	 * @param {function} iteratee - iteratee
	 * @ignore
	 */
	function setOpacity(elements, iteratee) {
	    elements = snippet.isArray(elements) ? elements : [elements];
	    snippet.forEachArray(elements, iteratee);
	}

	/**
	 * Make filter opacity css string.
	 * @param {number} opacity - opacity
	 * @returns {string}
	 * @ignore
	 */
	function makeCssFilterOpacityString(opacity) {
	    return 'alpha(opacity=' + (opacity * chartConst.OLD_BROWSER_OPACITY_100) + ')';
	}

	if (isOldBrowser) {
	    /**
	     * Make opacity css text for old browser(IE7, IE8).
	     * @param {number} opacity - opacity
	     * @returns {string}
	     */
	    renderUtil.makeOpacityCssText = function(opacity) {
	        var cssText = '';

	        if (snippet.isExisty(opacity)) {
	            cssText = ';filter:' + makeCssFilterOpacityString(opacity);
	        }

	        return cssText;
	    };

	    /**
	     * Set css opacity for old browser(IE7, IE8).
	     * @param {HTMLElement | Array.<HTMLElement>} elements - elements
	     * @param {number} opacity - opacity
	     */
	    renderUtil.setOpacity = function(elements, opacity) {
	        var filter = makeCssFilterOpacityString(opacity);
	        setOpacity(elements, function(element) {
	            element.style.filter = filter;
	        });
	    };
	} else {
	    /**
	     * Make opacity css text for browser supporting opacity property of CSS3.
	     * @param {number} opacity - opacity
	     * @returns {string}
	     */
	    renderUtil.makeOpacityCssText = function(opacity) {
	        var cssText = '';

	        if (snippet.isExisty(opacity)) {
	            cssText = ';opacity:' + opacity;
	        }

	        return cssText;
	    };

	    /**
	     * Set css opacity for browser supporting opacity property of CSS3.
	     * @param {HTMLElement | Array.<HTMLElement>} elements - elements
	     * @param {number} opacity - opacity
	     */
	    renderUtil.setOpacity = function(elements, opacity) {
	        setOpacity(elements, function(element) {
	            element.style.opacity = opacity;
	        });
	    };
	}

	module.exports = renderUtil;


/***/ }),
/* 8 */
/***/ (function(module, exports) {

	/**
	 * @fileoverview Chart const
	 * @author NHN Ent.
	 *         FE Development Lab <dl_javascript@nhnent.com>
	 */

	'use strict';

	/**
	 * Chart const
	 * @readonly
	 * @enum {number|string}
	 * @private
	 */
	var chartConst = {
	    /** tui class names
	     * @type {string}
	     */
	    CLASS_NAME_LEGEND_LABEL: 'tui-chart-legend-label',
	    /** @type {string} */
	    CLASS_NAME_LEGEND_CHECKBOX: 'tui-chart-legend-checkbox',
	    /** @type {string} */
	    CLASS_NAME_SERIES_LABEL: 'tui-chart-series-label',
	    /** @type {string} */
	    CLASS_NAME_SERIES_LEGEND: 'tui-chart-series-legend',
	    /** @type {string} */
	    CLASS_NAME_RESET_ZOOM_BTN: 'tui-chart-reset-zoom-btn',
	    /** @type {string} */
	    CLASS_NAME_ZOOM_OUT_BTN: 'tui-chart-zoom-out-btn',
	    /** @type {string} */
	    CLASS_NAME_CHART_EXPORT_MENU_AREA: 'tui-chart-chartExportMenu-area',
	    /** @type {string} */
	    CLASS_NAME_CHART_EXPORT_MENU_ITEM: 'tui-chart-chartExportMenu-item',
	    /** @type {string} */
	    CLASS_NAME_CHART_EXPORT_MENU_BUTTON: 'tui-chart-chartExportMenu-button',
	    /** @type {string} */
	    CLASS_NAME_CHART_EXPORT_MENU_HEAD: 'tui-chart-chartExportMenu-head',
	    CLASS_NAME_CHART_EXPORT_MENU_BODY: 'tui-chart-chartExportMenu-body',
	    CLASS_NAME_TOOLTIP_VALUE: 'tui-chart-tooltip-value',
	    /** @type {string} */
	    CLASS_NAME_TOOLTIP_HEAD: 'tui-chart-tooltip-head',
	    /** @type {string} */
	    CLASS_NAME_TOOLTIP_BODY: 'tui-chart-tooltip-body',
	    /** @type {string} */
	    CLASS_NAME_SVG_AUTOSHAPE: 'auto-shape-rendering',
	    /** chart type
	     * @type {string}
	     */
	    CHART_TYPE_BAR: 'bar',
	    /** @type {string} */
	    CHART_TYPE_COLUMN: 'column',
	    /** @type {string} */
	    CHART_TYPE_LINE: 'line',
	    /** @type {string} */
	    CHART_TYPE_AREA: 'area',
	    /** @type {string} */
	    CHART_TYPE_COMBO: 'combo',
	    /** @type {string} */
	    CHART_TYPE_COLUMN_LINE_COMBO: 'columnLineCombo',
	    /** @type {string} */
	    CHART_TYPE_LINE_SCATTER_COMBO: 'lineScatterCombo',
	    /** @type {string} */
	    CHART_TYPE_LINE_AREA_COMBO: 'lineAreaCombo',
	    /** @type {string} */
	    CHART_TYPE_PIE_DONUT_COMBO: 'pieDonutCombo',
	    /** @type {string} */
	    CHART_TYPE_PIE: 'pie',
	    /** @type {string} */
	    CHART_TYPE_BUBBLE: 'bubble',
	    /** @type {string} */
	    CHART_TYPE_SCATTER: 'scatter',
	    /** @type {string} */
	    CHART_TYPE_HEATMAP: 'heatmap',
	    /** @type {string} */
	    CHART_TYPE_TREEMAP: 'treemap',
	    /** @type {string} */
	    CHART_TYPE_MAP: 'map',
	    /** @type {string} */
	    CHART_TYPE_RADIAL: 'radial',
	    /** @type {string} */
	    CHART_TYPE_BOXPLOT: 'boxplot',
	    /** @type {string} */
	    CHART_TYPE_BULLET: 'bullet',
	    /** chart padding */
	    CHART_PADDING: 10,
	    /** chart default width */
	    CHART_DEFAULT_WIDTH: 500,
	    /** chart default height */
	    CHART_DEFAULT_HEIGHT: 400,
	    /** overlapping width of xAxis and yAxis */
	    OVERLAPPING_WIDTH: 1,
	    /** rendered text padding */
	    TEXT_PADDING: 2,
	    /** series expand size */
	    SERIES_EXPAND_SIZE: 10,
	    /** series area vertical padding */
	    SERIES_AREA_V_PADDING: 10,
	    /** series label padding */
	    SERIES_LABEL_PADDING: 5,
	    /** default font size of title */
	    DEFAULT_TITLE_FONT_SIZE: 14,
	    /** default font size of axis title */
	    DEFAULT_AXIS_TITLE_FONT_SIZE: 10,
	    /** default font size of label */
	    DEFAULT_LABEL_FONT_SIZE: 12,
	    /** default font size of series label */
	    DEFAULT_SERIES_LABEL_FONT_SIZE: 11,
	    /** default graph plugin
	     * @type {string}
	     */
	    DEFAULT_PLUGIN: 'Raphael',
	    /** default tick color
	     * @type {string}
	     */
	    DEFAULT_TICK_COLOR: 'black',
	    /** default theme name
	     * @type {string}
	     */
	    DEFAULT_THEME_NAME: 'default',
	    MAX_HEIGHT_WORD: 'A',
	    /** stack type
	     * @type {string}
	     */
	    NORMAL_STACK_TYPE: 'normal',
	    /** @type {string} */
	    PERCENT_STACK_TYPE: 'percent',
	    /** default stack
	     * @type {string}
	     */
	    DEFAULT_STACK: '___DEFAULT___STACK___',
	    /** dummy key
	     * @type {string}
	     */
	    DUMMY_KEY: '___DUMMY___KEY___',
	    /** root id of treemap
	     * @type {string}
	     */
	    TREEMAP_ROOT_ID: '___TUI_TREEMAP_ROOT___',
	    /** id prefix of treemap
	     * @type {string}
	     */
	    TREEMAP_ID_PREFIX: '___TUI_TREEMAP_ID___',
	    /** prefix for caching seriesItems
	     * @type {string}
	     */
	    TREEMAP_DEPTH_KEY_PREFIX: '___TUI_TREEMAP_DEPTH___',
	    /** @type {string} */
	    TREEMAP_PARENT_KEY_PREFIX: '___TUI_TREEMAP_PARENT___',
	    /** @type {string} */
	    TREEMAP_LEAF_KEY_PREFIX: '___TUI_TREEMAP_LEAF___',
	    /** @type {string} */
	    TREEMAP_LIMIT_DEPTH_KEY_PREFIX: '___TUI_TREEMAP_LIMIT_DEPTH___',
	    /** default border color for treemap chart
	     * @type {string}
	     */
	    TREEMAP_DEFAULT_BORDER: '#ffffff',
	    TREEMAP_DEFAULT_BORDER_WIDTH: 4,
	    /** empty axis label */
	    EMPTY_AXIS_LABEL: '',
	    /** angel */
	    ANGLE_85: 85,
	    ANGLE_90: 90,
	    ANGLE_360: 360,
	    /** radian */
	    RAD: Math.PI / 180,
	    RERENDER_TIME: 700,
	    ADDING_DATA_ANIMATION_DURATION: 300,
	    /** series label align outer
	     * @type {string}
	     */
	    LABEL_ALIGN_OUTER: 'outer',
	    /** @type {string} */
	    LEGEND_ALIGN_TOP: 'top',
	    /** @type {string} */
	    LEGEND_ALIGN_BOTTOM: 'bottom',
	    /** @type {string} */
	    LEGEND_ALIGN_LEFT: 'left',
	    /** @type {number} */
	    LEGEND_PAGINATION_BUTTON_WIDTH: 20,
	    /** @type {number} */
	    LEGEND_PAGINATION_BUTTON_PADDING_RIGHT: 6,
	    /** series outer label padding */
	    SERIES_OUTER_LABEL_PADDING: 20,
	    /** default ratio for pie graph */
	    PIE_GRAPH_DEFAULT_RATIO: 0.9,
	    /** small ratio for pie graph */
	    PIE_GRAPH_SMALL_RATIO: 0.75,
	    /** pie chart legend label size */
	    PIE_GRAPH_LEGEND_LABEL_SIZE: 16,
	    /** pie chart legend label size */
	    PIE_GRAPH_LEGEND_LABEL_INTERVAL: 20,
	    /** tick count for spectrum legend */
	    SPECTRUM_LEGEND_TICK_COUNT: 4,
	    /** legend & lable concat separator */
	    LABEL_SEPARATOR: '\n',
	    /** default position ratio of map chart label
	     * @type {object}
	     */
	    MAP_CHART_LABEL_DEFAULT_POSITION_RATIO: {
	        x: 0.5,
	        y: 0.5
	    },
	    /** map chart zoom area width */
	    MAP_CHART_ZOOM_AREA_WIDTH: 24,
	    /** map chart zoom area height */
	    MAP_CHART_ZOOM_AREA_HEIGHT: 58,
	    /** dot radius */
	    DOT_RADIUS: 4,
	    /** radius for circle of scatter chart*/
	    SCATTER_RADIUS: 7,
	    /**
	     * theme properties
	     * @type {{yAxis: Array.<string>, series: Array.<string>}}
	     */
	    THEME_PROPS_MAP: {
	        yAxis: ['tickColor', 'title', 'label'],
	        series: ['label', 'colors', 'borderColor', 'borderWidth', 'selectionColor', 'startColor', 'endColor',
	            'overColor', 'dot', 'ranges']
	    },
	    /** title area width padding */
	    TITLE_AREA_WIDTH_PADDING: 20,
	    /** chart export menu width, height */
	    CHART_EXPORT_MENU_SIZE: 24,
	    /** top margin of x axis label */
	    XAXIS_LABEL_TOP_MARGIN: 10,
	    /** right padding of vertical label */
	    V_LABEL_RIGHT_PADDING: 10,
	    /** tooltip prefix
	     * @type {string}
	     */
	    TOOLTIP_PREFIX: 'tui-chart-tooltip',
	    /** tooltip z-index **/
	    TOOLTIP_ZINDEX: 500,
	    /** tooltip animation time */
	    TOOLTIP_ANIMATION_TIME: 100,
	    /** tooltip animation time for pie chart */
	    TOOLTIP_PIE_ANIMATION_TIME: 50,
	    /** minimum pixel type step size */
	    MIN_PIXEL_TYPE_STEP_SIZE: 45,
	    /** maximum pixel type step size */
	    MAX_PIXEL_TYPE_STEP_SIZE: 65,
	    /** axis scale for percent stack option
	     * @type {object}
	     */
	    PERCENT_STACKED_AXIS_SCALE: {
	        limit: {
	            min: 0,
	            max: 100
	        },
	        step: 25,
	        labels: [0, 25, 50, 75, 100]
	    },
	    /** axis scale for minus percent stack option
	     * @type {object}
	     */
	    MINUS_PERCENT_STACKED_AXIS_SCALE: {
	        limit: {
	            min: -100,
	            max: 0
	        },
	        step: 25,
	        labels: [0, -25, -50, -75, -100]
	    },
	    /** axis scale of dual percent stack option
	     * @type {object}
	     */
	    DUAL_PERCENT_STACKED_AXIS_SCALE: {
	        limit: {
	            min: -100,
	            max: 100
	        },
	        step: 25,
	        labels: [-100, -75, -50, -25, 0, 25, 50, 75, 100]
	    },
	    /** axis scale of diverging percent stack option
	     * @type {object}
	     */
	    DIVERGING_PERCENT_STACKED_AXIS_SCALE: {
	        limit: {
	            min: -100,
	            max: 100
	        },
	        step: 25,
	        labels: [100, 75, 50, 25, 0, 25, 50, 75, 100]
	    },
	    /**
	     * datetime axis type
	     * @type {string}
	     */
	    AXIS_TYPE_DATETIME: 'datetime',
	    /**
	     * default dateFormat
	     * @type {string}
	     */
	    DEFAULT_DATE_FORMAT: 'YYYY.MM.DD hh:mm:dd',
	    /**
	     * date type
	     * @type {string}
	     */
	    DATE_TYPE_YEAR: 'year',
	    DATE_TYPE_MONTH: 'month',
	    DATE_TYPE_WEEK: 'week',
	    DATE_TYPE_DATE: 'date',
	    DATE_TYPE_HOUR: 'hour',
	    DATE_TYPE_MINUTE: 'minute',
	    DATE_TYPE_SECOND: 'second',
	    /** title add padding */
	    TITLE_PADDING: 20,
	    /** default header height */
	    DEFAULT_HEADER_HEIGHT: 10,
	    /** legend area horizontal padding */
	    LEGEND_AREA_H_PADDING: 15,
	    /** legend area vertical padding */
	    LEGEND_AREA_V_PADDING: 7,
	    /** legend checkbox width */
	    LEGEND_CHECKBOX_SIZE: 14,
	    LEGEND_ICON_WIDTH: 10,
	    LEGEND_ICON_HEIGHT: 10,
	    /** lgend label left padding */
	    LEGEND_LABEL_LEFT_PADDING: 8,
	    /** vertical legend right padding */
	    LEGEND_V_LABEL_RIGHT_PADDING: 20,
	    /** horizontal legend right padding */
	    LEGEND_H_LABEL_RIGHT_PADDING: 25,
	    /** lgend line icon svg path */
	    LEGEND_LINE_ICON_PATH: 'M1,9 L1,3 C1,1.8954305 1.8954305,1 3,1 L3,1 C4.1045695,1 5,1.8954305 5,3 L5,7 C5,8.1045695 5.8954305,9 7,9 L7,9 C8.1045695,9 9,8.1045695 9,7 L9,1',
	    MIN_LEGEND_WIDTH: 100,
	    /** map legend area padding */
	    MAP_LEGEND_AREA_PADDING_WIDE: 22,
	    /** vertical map legend area padding */
	    VERTICAL_MAP_LEGEND_AREA_TOP_PADDING: 26,
	    /** map legend padding before spectrum graph area */
	    MAP_LEGEND_AREA_PADDING_NARROW: 10,
	    /** map legend tooltip vertical padding */
	    MAP_LEGEND_TOOLTIP_VERTICAL_PADDING: 4,
	    /** map legend tooltip horizontal padding */
	    MAP_LEGEND_TOOLTIP_HORIZONTAL_PADDING: 6,
	    /** map legend wedge size */
	    MAP_LEGEND_WEDGE_SIZE: 4,
	    /** map legend padding between wedge and spectrum graph */
	    MAP_LEGEND_PADDING_BTW_GRAPH_AND_WEDGE: 4,
	    /** vertical map legend height */
	    VERTICAL_MAP_LEGEND_HEIGHT: 320,
	    /** horizontal map legend height */
	    HORIZONTAL_MAP_LEGEND_WIDTH: 400,
	    /** map legend graph size */
	    MAP_LEGEND_GRAPH_SIZE: 6,
	    /** map legend label padding */
	    MAP_LEGEND_LABEL_PADDING: 5,
	    CIRCLE_LEGEND_LABEL_FONT_SIZE: 9,
	    CIRCLE_LEGEND_PADDING: 10,
	    HALF_RATIO: 0.5,
	    /** X-AXIS LABEL PADDING */
	    X_AXIS_LABEL_PADDING: 7,
	    /** X-AXIS title padding */
	    X_AXIS_TITLE_PADDING: 5,
	    /** Y-AXIS LABEL PADDING */
	    Y_AXIS_LABEL_PADDING: 17,
	    Y_AXIS_TITLE_PADDING: 7,
	    /** rotations degree candidates */
	    DEGREE_CANDIDATES: [25, 45, 65, 85],
	    /**
	     * auto tick interval
	     * @type {string}
	     */
	    TICK_INTERVAL_AUTO: 'auto',
	    /** yAxis align option
	     * @type {string}
	     */
	    YAXIS_ALIGN_CENTER: 'center',
	    /** xAxis label compare margin */
	    XAXIS_LABEL_COMPARE_MARGIN: 20,
	    /** xAxis label gutter */
	    XAXIS_LABEL_GUTTER: 2,
	    /**
	     * Standard multiple nums of axis
	     * @type {Array}
	     */
	    AXIS_STANDARD_MULTIPLE_NUMS: [1, 2, 5, 10, 20, 50, 100],
	    /**
	     * Last standard multiple num of axis
	     */
	    AXIS_LAST_STANDARD_MULTIPLE_NUM: 100,
	    /** label padding top */
	    LABEL_PADDING_TOP: 7,
	    /** line margin top */
	    LINE_MARGIN_TOP: 14,
	    /** tooltip gap */
	    TOOLTIP_GAP: 5,
	    /** tooltip direction
	     * @type {string}
	     */
	    TOOLTIP_DIRECTION_FORWARD: 'forword',
	    /** @type {string} */
	    TOOLTIP_DIRECTION_CENTER: 'center',
	    /** @type {string} */
	    TOOLTIP_DIRECTION_BACKWARD: 'backword',
	    /** tooltip align options
	     * @type {string}
	     */
	    TOOLTIP_DEFAULT_ALIGN_OPTION: 'center top',
	    /** @type {string} */
	    TOOLTIP_DEFAULT_HORIZONTAL_ALIGN_OPTION: 'right middle',
	    /** @type {string} */
	    TOOLTIP_DEFAULT_GROUP_ALIGN_OPTION: 'right middle',
	    /** @type {string} */
	    TOOLTIP_DEFAULT_GROUP_HORIZONTAL_ALIGN_OPTION: 'center bottom',
	    /** hide delay */
	    HIDE_DELAY: 200,
	    OLD_BROWSER_OPACITY_100: 100,
	    SERIES_LABEL_OPACITY: 0.3,
	    WHEEL_TICK: 120,
	    MAX_ZOOM_MAGN: 5,
	    ZOOM_POSITION_TOP_EXIST_TITLE: 5,
	    ZOOM_POSITION_TOP_NONE_TITLE: 1,
	    FF_WHEELDELTA_ADJUSTING_VALUE: -40,
	    IE7_ROTATION_FILTER_STYLE_MAP: {
	        25: ' style="filter: progid:DXImageTransform.Microsoft.Matrix(SizingMethod=\'auto expand\',' +
	                ' M11=0.9063077870366499, M12=0.42261826174069944, M21=-0.42261826174069944, M22=0.9063077870366499)"',
	        45: ' style="filter: progid:DXImageTransform.Microsoft.Matrix(SizingMethod=\'auto expand\',' +
	                ' M11=0.7071067811865476, M12=0.7071067811865475, M21=-0.7071067811865475, M22=0.7071067811865476)"',
	        65: ' style="filter: progid:DXImageTransform.Microsoft.Matrix(SizingMethod=\'auto expand\',' +
	                ' M11=0.42261826174069944, M12=0.9063077870366499, M21=-0.9063077870366499, M22=0.42261826174069944)"',
	        85: ' style="filter: progid:DXImageTransform.Microsoft.Matrix(SizingMethod=\'auto expand\',' +
	                ' M11=0.08715574274765814, M12=0.9961946980917455, M21=-0.9961946980917455, M22=0.08715574274765814)"'
	    },
	    /** prefix for public event
	     * @type {string}
	     */
	    PUBLIC_EVENT_PREFIX: 'public_',
	    /** public event map
	     * @type {object}
	     */
	    PUBLIC_EVENT_MAP: {
	        load: true,
	        selectLegend: true,
	        selectSeries: true,
	        unselectSeries: true,
	        beforeShowTooltip: true,
	        afterShowTooltip: true,
	        beforeHideTooltip: true,
	        zoom: true
	    },
	    /** for radial */
	    RADIAL_PLOT_PADDING: 15, // Prevent cross paper boundaries by line width
	    RADIAL_MARGIN_FOR_CATEGORY: 60,
	    RADIAL_CATEGORY_PADDING: 20,

	    COMPONENT_TYPE_DOM: 'DOM',
	    COMPONENT_TYPE_RAPHAEL: 'Raphael',

	    IMAGE_EXTENSIONS: ['png', 'jpeg'],
	    DATA_EXTENSIONS: ['xls', 'csv'],

	    GUIDE_AREACHART_AREAOPACITY_TYPE: 'areaOpacity should be a number between 0 and 1',

	    /** for bullet */
	    BULLET_TYPE_ACTUAL: 'Actual',
	    BULLET_TYPE_RANGE: 'Ranges',
	    BULLET_TYPE_MARKER: 'Markers',
	    BULLET_MARKER_STROKE_TICK: 3,
	    BULLET_MARKER_BUFFER_POSITION: 5,
	    BULLET_RANGES_HEIGHT_RATIO: 0.7,
	    BULLET_ACTUAL_HEIGHT_RATIO: 0.28,
	    BULLET_MARKERS_HEIGHT_RATIO: 0.55,
	    BULLET_MARKER_DETECT_PADDING: 3
	};
	module.exports = chartConst;


/***/ }),
/* 9 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileoverview DOM Handler.
	 * @author NHN Ent.
	 *         FE Development Lab <dl_javascript@nhnent.com>
	 */

	'use strict';

	var snippet = __webpack_require__(6);
	var aps = Array.prototype.slice;

	/**
	 * DOM Handler.
	 * @module domHandler
	 * @private */
	var domHandler = {
	    /**
	     * Create element.
	     * @memberOf module:domHandler
	     * @param {string} tag html tag
	     * @param {string} newClass class name
	     * @returns {HTMLElement} created element
	     */
	    create: function(tag, newClass) {
	        var el = document.createElement(tag);

	        if (newClass) {
	            this.addClass(el, newClass);
	        }

	        return el;
	    },

	    /**
	     * Get class names.
	     * @memberOf module:domHandler
	     * @param {HTMLElement} el target element
	     * @returns {Array} names
	     * @private
	     */
	    _getClassNames: function(el) {
	        var className, classNames;

	        if (el.classList) {
	            classNames = aps.call(el.classList);
	        } else {
	            className = el.className || '';
	            classNames = className && snippet.isString(className) ? className.split(' ') : [];
	        }

	        return classNames;
	    },

	    /**
	     * Add css class to target element.
	     * @memberOf module:domHandler
	     * @param {HTMLElement} el target element
	     * @param {string} newClass add class name
	     */
	    addClass: function(el, newClass) {
	        var classNames, index;

	        if (!el || !newClass) {
	            return;
	        }

	        classNames = this._getClassNames(el);
	        index = snippet.inArray(newClass, classNames);

	        if (index > -1) {
	            return;
	        }

	        classNames.push(newClass);
	        el.className = classNames.join(' ');
	    },

	    /**
	     * Remove css class from target element.
	     * @memberOf module:domHandler
	     * @param {HTMLElement} el target element
	     * @param {string} rmClass remove class name
	     */
	    removeClass: function(el, rmClass) {
	        var classNames = this._getClassNames(el),
	            index = snippet.inArray(rmClass, classNames);

	        if (index === -1) {
	            return;
	        }

	        classNames.splice(index, 1);
	        el.className = classNames.join(' ');
	    },

	    /**
	     * Whether class exist or not.
	     * @memberOf module:domHandler
	     * @param {HTMLElement} el target element
	     * @param {string} findClass target css class
	     * @returns {boolean} has class
	     */
	    hasClass: function(el, findClass) {
	        var classNames = this._getClassNames(el);
	        var index = snippet.inArray(findClass, classNames);

	        return index > -1;
	    },

	    /**
	     * Find parent by class name.
	     * @memberOf module:domHandler
	     * @param {HTMLElement} el target element
	     * @param {string} className target css class
	     * @param {string} lastClass last css class
	     * @returns {HTMLElement} result element
	     */
	    findParentByClass: function(el, className, lastClass) {
	        var parent = el.parentNode,
	            result;

	        if (!parent) {
	            result = null;
	        } else if (this.hasClass(parent, className)) {
	            result = parent;
	        } else if (parent.nodeName === 'BODY' || this.hasClass(parent, lastClass)) {
	            result = null;
	        } else {
	            result = this.findParentByClass(parent, className, lastClass);
	        }

	        return result;
	    },

	    /**
	     * Append child element.
	     * @memberOf module:domHandler
	     * @param {HTMLElement} container container element
	     * @param {HTMLElement} children child element
	     */
	    append: function(container, children) {
	        if (!container || !children) {
	            return;
	        }
	        children = snippet.isArray(children) ? children : [children];

	        snippet.forEachArray(children, function(child) {
	            if (!child) {
	                return;
	            }
	            container.appendChild(child);
	        });
	    }
	};

	module.exports = domHandler;


/***/ }),
/* 10 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileoverview Util for array.
	 * @author NHN Ent.
	 *         FE Development Lab <dl_javascript@nhnent.com>
	 */

	'use strict';

	var snippet = __webpack_require__(6);

	/**
	 * Pick minimum value from value array.
	 * @memberOf module:arrayUtil
	 * @param {Array} arr value array
	 * @param {?function} condition condition function
	 * @param {?object} context target context
	 * @returns {*} minimum value
	 */
	var min = function(arr, condition, context) {
	    var result, minValue, rest;

	    if (!condition) {
	        result = Math.min.apply(null, arr);
	    } else {
	        result = arr[0];
	        minValue = condition.call(context, result, 0);
	        rest = arr.slice(1);
	        snippet.forEachArray(rest, function(item, index) {
	            var compareValue = condition.call(context, item, index + 1);
	            if (compareValue < minValue) {
	                minValue = compareValue;
	                result = item;
	            }
	        });
	    }

	    return result;
	};

	/**
	 * Pick maximum value from value array.
	 * @memberOf module:arrayUtil
	 * @param {Array} arr value array
	 * @param {?function} [condition] condition function
	 * @param {?object} [context] target context
	 * @returns {*} maximum value
	 */
	var max = function(arr, condition, context) {
	    var result, maxValue, rest;

	    if (!condition) {
	        result = Math.max.apply(null, arr);
	    } else {
	        result = arr[0];
	        maxValue = condition.call(context, result, 0);
	        rest = arr.slice(1);
	        snippet.forEachArray(rest, function(item, index) {
	            var compareValue = condition.call(context, item, index + 1);
	            if (compareValue > maxValue) {
	                maxValue = compareValue;
	                result = item;
	            }
	        });
	    }

	    return result;
	};

	/**
	 * Whether one of them is true or not.
	 * @memberOf module:arrayUtil
	 * @param {Array} collection target collection
	 * @param {function} condition condition function
	 * @param {?object} context target context
	 * @returns {boolean} result boolean
	 */
	var any = function(collection, condition, context) {
	    var result = false;
	    snippet.forEach(collection, function(item, key) {
	        if (condition.call(context, item, key, collection)) {
	            result = true;
	        }

	        return !result;
	    });

	    return result;
	};

	/**
	 * All of them is true or not.
	 * @memberOf module:arrayUtil
	 * @param {Array} collection target collection
	 * @param {function} condition condition function
	 * @param {?object} context target context
	 * @returns {boolean} result boolean
	 */
	var all = function(collection, condition, context) {
	    var result = !!(collection || []).length;
	    snippet.forEach(collection, function(item, key) {
	        if (!condition.call(context, item, key, collection)) {
	            result = false;
	        }

	        return result !== false;
	    });

	    return result;
	};

	/**
	 * Make unique values.
	 * @memberOf module:arrayUtil
	 * @param {Array} arr target array
	 * @param {?boolean} sorted whether sorted or not.
	 * @param {?function} iteratee iteratee function
	 * @param {?object} context target context
	 * @returns {Array} unique values
	 */
	var unique = function(arr, sorted, iteratee, context) {
	    var result = [],
	        prevValue;

	    if (!snippet.isBoolean(sorted)) {
	        context = iteratee;
	        iteratee = sorted;
	        sorted = false;
	    }

	    iteratee = iteratee || function(value) {
	        return value;
	    };

	    if (sorted) {
	        snippet.forEachArray(arr, function(value, index) {
	            value = iteratee.call(context, value, index, arr);
	            if (!index || prevValue !== value) {
	                result.push(value);
	            }
	            prevValue = value;
	        });
	    } else {
	        snippet.forEachArray(arr, function(value, index) {
	            value = iteratee.call(context, value, index, arr);
	            if (snippet.inArray(value, result) === -1) {
	                result.push(value);
	            }
	        });
	    }

	    return result;
	};

	/**
	 * Array pivot.
	 * @memberOf module:arrayUtil
	 * @param {Array.<Array>} arr2d target 2d array
	 * @returns {Array.<Array>} pivoted 2d array
	 */
	var pivot = function(arr2d) {
	    var result = [];
	    var len = max(snippet.map(arr2d, function(arr) {
	        return arr.length;
	    }));
	    var index;

	    snippet.forEachArray(arr2d, function(arr) {
	        for (index = 0; index < len; index += 1) {
	            if (!result[index]) {
	                result[index] = [];
	            }
	            result[index].push(arr[index]);
	        }
	    });

	    return result;
	};

	var arrayUtil = {
	    min: min,
	    max: max,
	    any: any,
	    all: all,
	    unique: unique,
	    pivot: pivot
	};

	module.exports = arrayUtil;


/***/ }),
/* 11 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileoverview Raphael boxplot chart renderer.
	 * @author NHN Ent.
	 *         FE Development Lab <dl_javascript@nhnent.com>
	 */

	'use strict';

	var raphaelRenderUtil = __webpack_require__(5);
	var snippet = __webpack_require__(6);
	var raphael = __webpack_require__(3);

	var ANIMATION_DURATION = 700;
	var EMPHASIS_OPACITY = 1;
	var DE_EMPHASIS_OPACITY = 0.3;
	var DEFAULT_LUMINANC = 0.2;
	var EDGE_LINE_WIDTH = 1;
	var MEDIAN_LINE_WIDTH = 1;
	var WHISKER_LINE_WIDTH = 1;

	/**
	 * @classdesc RaphaelBoxplotChart is graph renderer for bar, column chart.
	 * @class RaphaelBoxplotChart
	 * @private
	 */
	var RaphaelBoxplotChart = snippet.defineClass(/** @lends RaphaelBoxplotChart.prototype */ {
	    /**
	     * Render function of bar chart
	     * @param {object} paper paper object
	     * @param {{size: object, model: object, options: object, tooltipPosition: string}} data chart data
	     * @returns {Array.<object>} seriesSet
	     */
	    render: function(paper, data) {
	        var groupBounds = data.groupBounds;

	        if (!groupBounds) {
	            return null;
	        }

	        this.paper = paper;

	        this.theme = data.theme;
	        this.options = data.options;
	        this.seriesDataModel = data.seriesDataModel;
	        this.chartType = data.chartType;

	        this.paper.setStart();
	        this.groupWhiskers = [];
	        this.groupMedians = [];
	        this.groupBoxes = this._renderBoxplots(groupBounds);
	        this.groupBorders = this._renderBoxBorders(groupBounds);

	        this.circleOverlay = this._renderCircleOverlay();
	        this.groupBounds = groupBounds;

	        return this.paper.setFinish();
	    },

	    /**
	     * Render overlay.
	     * @returns {object} raphael object
	     * @private
	     */
	    _renderCircleOverlay: function() {
	        var position = {
	            left: 0,
	            top: 0
	        };
	        var attributes = {
	            'fill-opacity': 0
	        };

	        return raphaelRenderUtil.renderCircle(this.paper, position, 0, snippet.extend({
	            'stroke-width': 0
	        }, attributes));
	    },

	    /**
	     * Render rect
	     * @param {{left: number, top: number, width: number, height: number}} bound bound
	     * @param {string} color series color
	     * @param {object} [attributes] - attributes
	     * @returns {object} bar rect
	     * @private
	     */
	    _renderBox: function(bound, color, attributes) {
	        var rect;

	        if (bound.width < 0 || bound.height < 0) {
	            return null;
	        }

	        rect = raphaelRenderUtil.renderRect(this.paper, bound, snippet.extend({
	            fill: color,
	            stroke: 'none'
	        }, attributes));

	        return rect;
	    },

	    /**
	     * Render boxes.
	     * @param {Array.<Array.<{left: number, top:number, width: number, height: number}>>} groupBounds bounds
	     * @returns {Array.<Array.<object>>} bars
	     * @private
	     */
	    _renderBoxes: function(groupBounds) {
	        var self = this;
	        var colors = this.theme.colors;
	        var colorByPoint = this.options.colorByPoint;

	        return snippet.map(groupBounds, function(bounds, groupIndex) {
	            return snippet.map(bounds, function(bound, index) {
	                var color, rect, item;

	                if (!bound) {
	                    return null;
	                }

	                item = self.seriesDataModel.getSeriesItem(groupIndex, index);

	                color = colorByPoint ? colors[groupIndex] : colors[index];

	                if (bound.start) {
	                    rect = self._renderBox(bound.start, color);
	                }

	                return {
	                    rect: rect,
	                    color: color,
	                    bound: bound.end,
	                    item: item,
	                    groupIndex: groupIndex,
	                    index: index
	                };
	            });
	        });
	    },

	    /**
	     * Render boxplots.
	     * @param {Array.<Array.<{left: number, top:number, width: number, height: number}>>} groupBounds bounds
	     * @returns {Array.<Array.<object>>} bars
	     * @private
	     */
	    _renderBoxplots: function(groupBounds) {
	        var groupBoxes = this._renderBoxes(groupBounds);

	        this.groupWhiskers = this._renderWhiskers(groupBounds);
	        this.groupMedians = this._renderMedianLines(groupBounds);
	        this.groupOutliers = this._renderOutliers(groupBounds);

	        return groupBoxes;
	    },

	    _renderWhisker: function(end, start, color) {
	        var paper = this.paper;
	        var topDistance = start.top - end.top;
	        var whiskerDirection = topDistance > 0 ? 1 : -1;
	        var width = end.width;
	        var left = end.left;
	        var quartileWidth = width / 4;
	        var edgePath = 'M' + (left + quartileWidth) + ',' + end.top + 'H' + (left + (quartileWidth * 3));
	        var whiskerPath = 'M' + (left + (quartileWidth * 2)) + ',' + end.top + 'V' + (end.top + (Math.abs(topDistance) * whiskerDirection));
	        var edge = raphaelRenderUtil.renderLine(paper, edgePath, color, EDGE_LINE_WIDTH);
	        var whisker = raphaelRenderUtil.renderLine(paper, whiskerPath, color, WHISKER_LINE_WIDTH);
	        var whiskers = [];

	        edge.attr({
	            opacity: 0
	        });
	        whisker.attr({
	            opacity: 0
	        });

	        whiskers.push(edge);
	        whiskers.push(whisker);

	        return whiskers;
	    },

	    _renderWhiskers: function(groupBounds) {
	        var self = this;
	        var colors = this.theme.colors;
	        var colorByPoint = this.options.colorByPoint;
	        var groupWhiskers = [];

	        snippet.forEach(groupBounds, function(bounds, groupIndex) {
	            var whiskers = [];

	            snippet.forEach(bounds, function(bound, index) {
	                var color = colorByPoint ? colors[groupIndex] : colors[index];

	                if (!bound) {
	                    return;
	                }

	                whiskers = whiskers.concat(self._renderWhisker(bound.min, bound.start, color));
	                whiskers = whiskers.concat(self._renderWhisker(bound.max, bound.end, color));
	            });

	            groupWhiskers.push(whiskers);
	        });

	        return groupWhiskers;
	    },

	    _renderMedianLine: function(bound) {
	        var width = bound.width;
	        var medianLinePath = 'M' + bound.left + ',' + bound.top + 'H' + (bound.left + width);
	        var median = raphaelRenderUtil.renderLine(this.paper, medianLinePath, '#ffffff', MEDIAN_LINE_WIDTH);

	        median.attr({
	            opacity: 0
	        });

	        return median;
	    },

	    _renderMedianLines: function(groupBounds) {
	        var self = this;
	        var groupMedians = [];

	        snippet.forEach(groupBounds, function(bounds) {
	            var medians = [];

	            snippet.forEach(bounds, function(bound) {
	                if (!bound) {
	                    return;
	                }

	                medians.push(self._renderMedianLine(bound.median));
	            });
	            groupMedians.push(medians);
	        });

	        return groupMedians;
	    },

	    _renderOutlier: function(bound, color) {
	        var outlier = raphaelRenderUtil.renderCircle(this.paper, {
	            left: bound.left,
	            top: bound.top
	        }, 3.5, {
	            stroke: color,
	            'stroke-width': 2
	        });

	        outlier.attr({
	            opacity: 0
	        });

	        return outlier;
	    },

	    _renderOutliers: function(groupBounds) {
	        var self = this;
	        var colors = this.theme.colors;
	        var colorByPoint = this.options.colorByPoint;
	        var groupOutliers = [];

	        snippet.forEach(groupBounds, function(bounds, groupIndex) {
	            var outliers = [];
	            snippet.forEach(bounds, function(bound, index) {
	                var color = colorByPoint ? colors[groupIndex] : colors[index];
	                var seriesOutliers = [];

	                if (!bound) {
	                    return;
	                }

	                if (bound.outliers.length) {
	                    snippet.forEach(bound.outliers, function(outlier) {
	                        seriesOutliers.push(self._renderOutlier(outlier, color));
	                    });
	                }
	                outliers.push(seriesOutliers);
	            });
	            groupOutliers.push(outliers);
	        });

	        return groupOutliers;
	    },

	    /**
	     * Make rect points.
	     * @param {{left: number, top:number, width: number, height: number}} bound rect bound
	     * @returns {{
	     *      leftTop: {left: number, top: number},
	     *      rightTop: {left: number, top: number},
	     *      rightBottom: {left: number, top: number},
	     *      leftBottom: {left: number, top: number}
	     * }} rect points
	     * @private
	     */
	    _makeRectPoints: function(bound) {
	        return {
	            leftTop: {
	                left: Math.ceil(bound.left),
	                top: Math.ceil(bound.top)
	            },
	            rightTop: {
	                left: Math.ceil(bound.left + bound.width),
	                top: Math.ceil(bound.top)
	            },
	            rightBottom: {
	                left: Math.ceil(bound.left + bound.width),
	                top: Math.ceil(bound.top + bound.height)
	            },
	            leftBottom: {
	                left: Math.ceil(bound.left),
	                top: Math.ceil(bound.top + bound.height)
	            }
	        };
	    },

	    /**
	     * Render border lines;
	     * @param {{left: number, top:number, width: number, height: number}} bound bar bound
	     * @param {string} borderColor border color
	     * @param {string} chartType chart type
	     * @param {Item} item item
	     * @returns {object} raphael object
	     * @private
	     */
	    _renderBorderLines: function(bound, borderColor, chartType, item) {
	        var self = this;
	        var borderLinePaths = this._makeBorderLinesPaths(bound, chartType, item);
	        var lines = {};

	        snippet.forEach(borderLinePaths, function(path, name) {
	            lines[name] = raphaelRenderUtil.renderLine(self.paper, path, borderColor, 1);
	        });

	        return lines;
	    },

	    /**
	     * Render bar borders.
	     * @param {Array.<Array.<{left: number, top:number, width: number, height: number}>>} groupBounds bounds
	     * @returns {Array.<Array.<object>>} borders
	     * @private
	     */
	    _renderBoxBorders: function(groupBounds) {
	        var self = this,
	            borderColor = this.theme.borderColor,
	            groupBorders;

	        if (!borderColor) {
	            return null;
	        }

	        groupBorders = snippet.map(groupBounds, function(bounds, groupIndex) {
	            return snippet.map(bounds, function(bound, index) {
	                var seriesItem;

	                if (!bound) {
	                    return null;
	                }

	                seriesItem = self.seriesDataModel.getSeriesItem(groupIndex, index);

	                return self._renderBorderLines(bound.start, borderColor, self.chartType, seriesItem);
	            });
	        });

	        return groupBorders;
	    },

	    /**
	     * Animate rect.
	     * @param {object} rect raphael object
	     * @param {{left: number, top:number, width: number, height: number}} bound rect bound
	     * @private
	     */
	    _animateRect: function(rect, bound) {
	        rect.animate({
	            x: bound.left,
	            y: bound.top,
	            width: bound.width,
	            height: bound.height
	        }, ANIMATION_DURATION, '>');
	    },

	    /**
	     * Animate.
	     * @param {function} onFinish finish callback function
	     */
	    animate: function(onFinish) {
	        var self = this;
	        var animation = raphael.animation({
	            opacity: 1
	        }, ANIMATION_DURATION);

	        raphaelRenderUtil.forEach2dArray(this.groupBoxes, function(box) {
	            if (!box) {
	                return;
	            }
	            self._animateRect(box.rect, box.bound);
	        });

	        raphaelRenderUtil.forEach2dArray(self.groupWhiskers, function(whisker) {
	            whisker.animate(animation.delay(ANIMATION_DURATION));
	        });

	        raphaelRenderUtil.forEach2dArray(self.groupMedians, function(median) {
	            median.animate(animation.delay(ANIMATION_DURATION));
	        });

	        raphaelRenderUtil.forEach2dArray(self.groupOutliers, function(outliers) {
	            snippet.forEach(outliers, function(outlier) {
	                outlier.animate(animation.delay(ANIMATION_DURATION));
	            });
	        });

	        if (onFinish) {
	            this.callbackTimeout = setTimeout(function() {
	                onFinish();
	                delete self.callbackTimeout;
	            }, ANIMATION_DURATION);
	        }
	    },

	    /**
	     * Show animation.
	     * @param {{groupIndex: number, index:number}} data show info
	     */
	    showAnimation: function(data) {
	        if (snippet.isNumber(data.outlierIndex)) {
	            this.showOutlierAnimation(data);
	        } else {
	            this.showRectAnimation(data);
	        }
	    },

	    /**
	     * Show animation.
	     * @param {{groupIndex: number, index:number}} data show info
	     */
	    showRectAnimation: function(data) {
	        var bar = this.groupBoxes[data.groupIndex][data.index];
	        this.hoveredBar = bar.rect;

	        this.hoveredBar.attr({
	            stroke: '#ffffff',
	            'stroke-width': 4
	        });
	        this.hoveredBar.node.setAttribute('filter', 'url(#shadow)');
	    },

	    /**
	     * Show animation.
	     * @param {{groupIndex: number, index:number}} data show info
	     */
	    showOutlierAnimation: function(data) {
	        var targetAttr = this.groupOutliers[data.groupIndex][data.index][data.outlierIndex].attr();

	        this.circleOverlay.attr({
	            r: targetAttr.r,
	            cx: targetAttr.cx,
	            cy: targetAttr.cy,
	            fill: targetAttr.stroke,
	            'fill-opacity': 1,
	            stroke: targetAttr.stroke,
	            'stroke-width': 4
	        });
	    },

	    /**
	     * Hide animation.
	     */
	    hideAnimation: function() {
	        this.circleOverlay.attr({
	            width: 1,
	            height: 1,
	            x: 0,
	            y: 0,
	            'fill-opacity': 0,
	            'stroke-width': 2
	        });
	        this.hoveredBar.attr({
	            stroke: 'none'
	        });
	        this.hoveredBar.node.setAttribute('filter', 'none');
	    },

	    /**
	     * Update rect bound
	     * @param {object} rect raphael object
	     * @param {{left: number, top: number, width: number, height: number}} bound bound
	     * @private
	     */
	    _updateRectBound: function(rect, bound) {
	        rect.attr({
	            x: bound.left,
	            y: bound.top,
	            width: bound.width,
	            height: bound.height
	        });
	    },

	    /**
	     * Resize graph of bar type chart.
	     * @param {object} params parameters
	     *      @param {{width: number, height:number}} params.dimension dimension
	     *      @param {Array.<Array.<{
	     *                  left:number, top:number, width: number, height: number
	     *              }>>} params.groupBounds group bounds
	     */
	    resize: function(params) {
	        var dimension = params.dimension;
	        var groupBounds = params.groupBounds;

	        this.groupBounds = groupBounds;
	        this.paper.setSize(dimension.width, dimension.height);

	        raphaelRenderUtil.forEach2dArray(this.groupBoxes, function(bar, groupIndex, index) {
	            var bound;

	            if (!bar) {
	                return;
	            }

	            bound = groupBounds[groupIndex][index].end;
	            bar.bound = bound;
	            raphaelRenderUtil.updateRectBound(bar.rect, bound);
	        });
	    },

	    /**
	     * Change borders color.
	     * @param {Array.<object>} lines raphael objects
	     * @param {borderColor} borderColor border color
	     * @private
	     */
	    _changeBordersColor: function(lines, borderColor) {
	        snippet.forEach(lines, function(line) {
	            line.attr({stroke: borderColor});
	        });
	    },

	    /**
	     * Change bar color.
	     * @param {{groupIndex: number, index: number}} indexes indexes
	     * @param {string} color fill color
	     * @param {?string} borderColor stroke color
	     * @private
	     */
	    _changeBoxColor: function(indexes, color, borderColor) {
	        var bar = this.groupBoxes[indexes.groupIndex][indexes.index];
	        var lines;

	        bar.rect.attr({
	            stroke: color
	        });

	        if (borderColor) {
	            lines = this.groupBorders[indexes.groupIndex][indexes.index];
	            this._changeBordersColor(lines, borderColor);
	        }
	    },

	    /**
	     * Select series.
	     * @param {{groupIndex: number, index: number}} indexes indexes
	     */
	    selectSeries: function(indexes) {
	        var bar = this.groupBoxes[indexes.groupIndex][indexes.index],
	            objColor = raphael.color(bar.color),
	            selectionColorTheme = this.theme.selectionColor,
	            color = selectionColorTheme || raphaelRenderUtil.makeChangedLuminanceColor(objColor.hex, DEFAULT_LUMINANC),
	            borderColor = this.theme.borderColor,
	            objBorderColor;

	        if (borderColor) {
	            objBorderColor = raphael.color(borderColor);
	            borderColor = raphaelRenderUtil.makeChangedLuminanceColor(objBorderColor.hex, DEFAULT_LUMINANC);
	        }

	        this._changeBoxColor(indexes, color, borderColor);
	    },

	    /**
	     * Unselect series.
	     * @param {{groupIndex: number, index: number}} indexes indexes
	     */
	    unselectSeries: function(indexes) {
	        var bar = this.groupBoxes[indexes.groupIndex][indexes.index],
	            borderColor = this.theme.borderColor;
	        this._changeBoxColor(indexes, bar.color, borderColor);
	    },

	    /**
	     * Select legend.
	     * @param {?number} legendIndex legend index
	     */
	    selectLegend: function(legendIndex) {
	        var noneSelected = snippet.isNull(legendIndex);

	        raphaelRenderUtil.forEach2dArray(this.groupBoxes, function(box, groupIndex, index) {
	            var opacity;

	            if (!box) {
	                return;
	            }

	            opacity = (noneSelected || legendIndex === index) ? EMPHASIS_OPACITY : DE_EMPHASIS_OPACITY;

	            box.rect.attr({'stroke-opacity': opacity});
	        });
	        raphaelRenderUtil.forEach2dArray(this.groupWhiskers, function(whisker, groupIndex, index) {
	            var opacity = (noneSelected || legendIndex === index) ? EMPHASIS_OPACITY : DE_EMPHASIS_OPACITY;

	            whisker.attr({'stroke-opacity': opacity});
	        });
	        raphaelRenderUtil.forEach2dArray(this.groupMedians, function(median, groupIndex, index) {
	            var opacity = (noneSelected || legendIndex === index) ? EMPHASIS_OPACITY : DE_EMPHASIS_OPACITY;

	            median.attr({'stroke-opacity': opacity});
	        });
	    },

	    renderSeriesLabel: function(paper, groupPositions, groupLabels, labelTheme, isStacked) {
	        var attributes = {
	            'font-size': labelTheme.fontSize,
	            'font-family': labelTheme.fontFamily,
	            'font-weight': labelTheme.fontWeight,
	            fill: labelTheme.color,
	            opacity: 0,
	            'text-anchor': isStacked ? 'middle' : 'start'
	        };
	        var labelSet = paper.set();

	        snippet.forEach(groupLabels, function(categoryLabel, categoryIndex) {
	            snippet.forEach(categoryLabel, function(label, seriesIndex) {
	                var position = groupPositions[categoryIndex][seriesIndex];
	                var endLabel = raphaelRenderUtil.renderText(paper, position.end, label.end, attributes);
	                var startLabel;

	                endLabel.node.style.userSelect = 'none';
	                endLabel.node.style.cursor = 'default';
	                endLabel.node.setAttribute('filter', 'url(#glow)');

	                labelSet.push(endLabel);

	                if (position.start) {
	                    startLabel = raphaelRenderUtil.renderText(paper, position.start, label.start, attributes);
	                    startLabel.node.style.userSelect = 'none';
	                    startLabel.node.style.cursor = 'default';
	                    startLabel.node.setAttribute('filter', 'url(#glow)');

	                    labelSet.push(startLabel);
	                }
	            });
	        });

	        return labelSet;
	    }
	});

	module.exports = RaphaelBoxplotChart;


/***/ }),
/* 12 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileoverview Raphael bullet chart renderer.
	 * @author NHN Ent.
	 *         FE Development Lab <dl_javascript@nhnent.com>
	 */

	'use strict';

	var raphaelRenderUtil = __webpack_require__(5);
	var chartConst = __webpack_require__(8);
	var snippet = __webpack_require__(6);
	var renderUtil = __webpack_require__(7);

	var browser = snippet.browser;
	var IS_LTE_IE8 = browser.msie && browser.version <= 8;
	var ANIMATION_DURATION = 700;
	var ANIMATION_DELAY = 700;
	var EMPHASIS_OPACITY = 1;
	var DE_EMPHASIS_OPACITY = 0.3;
	var EVENT_DETECTOR_PADDING = 20;

	/**
	 * @classdesc RaphaelBulletChart is graph renderer for bullet chart.
	 * @class RaphaelBulletChart
	 * @private
	 */
	var RaphaelBulletChart = snippet.defineClass(/** @lends RaphaelBulletChart.prototype */ {
	    /**
	     * Render function of bar chart
	     * @param {object} paper paper object
	     * @param {{size: object, model: object, options: object, tooltipPosition: string}} data chart data
	     * @returns {Array.<object>} seriesSet
	     */
	    render: function(paper, data) {
	        var groupBounds = data.groupBounds;
	        var seriesDataModel = data.seriesDataModel;

	        if (!groupBounds || !groupBounds.length) {
	            return null;
	        }

	        this.paper = paper;

	        this.theme = data.theme;
	        this.dimension = data.dimension;
	        this.position = data.position;
	        this.options = data.options;
	        this.chartType = data.chartType;
	        this.isVertical = data.isVertical;

	        this.seriesDataModel = seriesDataModel;
	        this.maxRangeCount = seriesDataModel.maxRangeCount;
	        this.maxMarkerCount = seriesDataModel.maxMarkerCount;

	        this.rangeOpacities = {};

	        this.paper.setStart();

	        this._renderBounds(groupBounds);

	        return this.paper.setFinish();
	    },

	    /**
	     * Get range opacity by index
	     * If rangeOpacities[index] not exists, create and store. then use it next time
	     * @param {number} index - ranges index
	     * @returns {number} - opacity of ranges bar at index
	     * @private
	     */
	    _getRangeOpacity: function(index) {
	        var maxRangeCount = this.maxRangeCount;
	        if (this.prevMaxRangeCount !== maxRangeCount) {
	            this._updateOpacityStep(maxRangeCount);
	        }

	        if (index < maxRangeCount && !this.rangeOpacities[index]) {
	            this.rangeOpacities[index] = 1 - (this.opacityStep * (index + 1));
	        }

	        return this.rangeOpacities[index];
	    },

	    /**
	     * Update opacity step using maxRangeCount
	     * @param {number} maxRangeCount - maximum count of ranges bar among series graphes
	     * @private
	     */
	    _updateOpacityStep: function(maxRangeCount) {
	        this.rangeOpacities = {};
	        this.opacityStep = Number(1 / (maxRangeCount + 1)).toFixed(2);
	        this.prevMaxRangeCount = maxRangeCount;
	    },

	    /**
	     * Render bullet graph using groupBounds model
	     * @param {Array.<object>} groupBounds - bounds data for rendering bullet graph
	     * @private
	     */
	    _renderBounds: function(groupBounds) {
	        var rangeThemes = this.theme.ranges;
	        var paper = this.paper;

	        this.groupBars = [];
	        this.groupLines = [];

	        snippet.forEach(groupBounds, function(bounds, groupIndex) {
	            var seriesColor = this.theme.colors[groupIndex];
	            var rangeIndex = 0;
	            var barSet = paper.set();
	            var lineSet = paper.set();

	            snippet.forEach(bounds, function(bound) {
	                var type = bound.type;

	                if (type === chartConst.BULLET_TYPE_ACTUAL) {
	                    barSet.push(this._renderActual(bound, seriesColor));
	                } else if (type === chartConst.BULLET_TYPE_RANGE) {
	                    barSet.push(this._renderRange(bound, seriesColor, rangeIndex, rangeThemes[rangeIndex]));
	                    rangeIndex += 1;
	                } else if (type === chartConst.BULLET_TYPE_MARKER) {
	                    lineSet.push(this._renderMarker(bound, seriesColor));
	                }
	            }, this);

	            this.groupBars.push(barSet);
	            this.groupLines.push(lineSet);
	        }, this);
	    },

	    /**
	     * Render actual bar
	     * @param {object} bound - bound model on start point
	     * @param {string} seriesColor - series color for painting actual bar
	     * @returns {Element} - rendered actual bar
	     * @private
	     */
	    _renderActual: function(bound, seriesColor) {
	        if (!bound) {
	            return null;
	        }

	        return this._renderBar(bound, seriesColor);
	    },

	    /**
	     * Render range bar
	     * @param {object} bound - bound model on start point
	     * @param {string} seriesColor - series color for painting range bar
	     * @param {number} rangeIndex - ranges index
	     * @param {object} rangeTheme - range theme
	     * @returns {Element} - rendered range bar
	     * @private
	     */
	    _renderRange: function(bound, seriesColor, rangeIndex, rangeTheme) {
	        var color = seriesColor;
	        var opacity = this._getRangeOpacity(rangeIndex);
	        var attr = {opacity: opacity};

	        if (!bound) {
	            return null;
	        }

	        if (rangeTheme) {
	            color = rangeTheme.color || color;
	            attr.opacity = rangeTheme.opacity || opacity;
	        }

	        return this._renderBar(bound, color, attr);
	    },

	    /**
	     * Create bar type element using passing arguments
	     * @param {object} bound - bound data for render rect element
	     * @param {string} color - hex type color string
	     * @param {object} attributes - styling attributes
	     * @returns {Element} - svg rect element
	     * @private
	     */
	    _renderBar: function(bound, color, attributes) {
	        if (bound.width < 0 || bound.height < 0) {
	            return null;
	        }

	        return raphaelRenderUtil.renderRect(this.paper, bound, snippet.extend({
	            fill: color,
	            stroke: 'none'
	        }, attributes));
	    },

	    /**
	     * Render marker
	     * @param {object} bound - bound model of marker
	     * @param {string} seriesColor - series color for painting marker
	     * @returns {Element} - rendered marker
	     * @private
	     */
	    _renderMarker: function(bound, seriesColor) {
	        if (!bound) {
	            return null;
	        }

	        return this._renderLine(bound, seriesColor);
	    },

	    /**
	     * Create line element using passing arguments
	     * @param {object} bound - bound data for render path element
	     * @param {string} color - hex type color string
	     * @returns {Element} - svg rect element
	     * @private
	     */
	    _renderLine: function(bound, color) {
	        var top = bound.top;
	        var left = bound.left;
	        var length = bound.length;
	        var endPosition = this.isVertical ? 'L' + (left + length) + ',' + top : 'L' + left + ',' + (top + length);
	        var path = 'M' + left + ',' + top + endPosition;

	        return raphaelRenderUtil.renderLine(this.paper, path, color, chartConst.BULLET_MARKER_STROKE_TICK);
	    },

	    /**
	     * Animate.
	     * @param {function} onFinish finish callback function
	     * @param {Array.<object>} seriesSet series set
	     */
	    animate: function(onFinish, seriesSet) {
	        var paper = this.paper;
	        var dimension = this.dimension;
	        var position = this.position;
	        var clipRect = this.clipRect;
	        var clipRectId = this._getClipRectId();
	        var clipRectWidth = dimension.width - EVENT_DETECTOR_PADDING;
	        var clipRectHeight = dimension.height - EVENT_DETECTOR_PADDING;
	        var startDimension = {};
	        var animateAttr = {};

	        if (this.isVertical) {
	            startDimension.width = clipRectWidth;
	            startDimension.height = 0;
	            animateAttr.height = clipRectHeight;
	        } else {
	            startDimension.width = 0;
	            startDimension.height = clipRectHeight;
	            animateAttr.width = clipRectWidth;
	        }

	        // Animation was implemented using <clipPath> SVG element
	        // As Browser compatibility of <clipPath> is IE9+,
	        // No Animation on IE8
	        if (!IS_LTE_IE8 && dimension) {
	            if (!clipRect) {
	                clipRect = createClipPathRectWithLayout(paper, position, startDimension, clipRectId);
	                this.clipRect = clipRect;
	            } else {
	                clipRect.attr({
	                    x: position.left,
	                    y: position.top
	                });
	                clipRect.attr(startDimension);
	            }

	            seriesSet.forEach(function(element) {
	                if (element.type === 'set') {
	                    element.forEach(function(item) {
	                        item.node.setAttribute('clip-path', 'url(#' + clipRectId + ')');
	                    });
	                } else {
	                    element.node.setAttribute('clip-path', 'url(#' + clipRectId + ')');
	                }
	            });

	            clipRect.animate(animateAttr, ANIMATION_DURATION, '>', onFinish);
	        }

	        if (onFinish) {
	            this.callbackTimeout = setTimeout(function() {
	                onFinish();
	                delete self.callbackTimeout;
	            }, ANIMATION_DELAY);
	        }
	    },

	    /**
	     * Resize bullet chart
	     * @param {object} params parameters
	     *      @param {{width: number, height:number}} params.dimension dimension
	     *      @param {Array.<Array.<{
	     *                  left:number, top:number, width: number, height: number
	     *              }>>} params.groupBounds group bounds
	     */
	    resize: function(params) {
	        var dimension = params.dimension;
	        var groupBounds = params.groupBounds;
	        var width = dimension.width;
	        var height = dimension.height;

	        this.dimension = params.dimension;
	        this.groupBounds = groupBounds;
	        this.resizeClipRect(width, height);
	        this.paper.setSize(width, height);

	        this._renderBounds(groupBounds);
	    },

	    /**
	     * Resize clip rect size
	     * @param {number} width series width
	     * @param {number} height series height
	     */
	    resizeClipRect: function(width, height) {
	        var clipRect = this.paper.getById(this._getClipRectId() + '_rect');

	        clipRect.attr({
	            width: width,
	            height: height
	        });
	    },

	    /**
	     * set clip rect position
	     * @param {object} position series position
	     */
	    setClipRectPosition: function(position) {
	        var clipRect = this.paper.getById(this._getClipRectId() + '_rect');

	        clipRect.attr({
	            x: position.left,
	            y: position.top
	        });
	    },

	    /**
	     * Set clip rect id
	     * @returns {string} id - clip rect id
	     * @private
	     */
	    _getClipRectId: function() {
	        if (!this.clipRectId) {
	            this.clipRectId = renderUtil.generateClipRectId();
	        }

	        return this.clipRectId;
	    },

	    /**
	     * Change borders color.
	     * @param {Array.<object>} lines raphael objects
	     * @param {borderColor} borderColor border color
	     * @private
	     */
	    _changeBordersColor: function(lines, borderColor) {
	        snippet.forEach(lines, function(line) {
	            line.attr({stroke: borderColor});
	        });
	    },

	    /**
	     * Select legend.
	     * @param {?number} legendIndex legend index
	     */
	    selectLegend: function(legendIndex) {
	        var allEmphasized = snippet.isNull(legendIndex);

	        snippet.forEachArray(this.groupBars, function(bars, groupIndex) {
	            var opacity = (allEmphasized || legendIndex === groupIndex) ? EMPHASIS_OPACITY : DE_EMPHASIS_OPACITY;

	            this.groupBars[groupIndex].attr({'fill-opacity': opacity});
	            this.groupLabels[groupIndex].attr({opacity: opacity});
	            snippet.forEachArray(this.groupLabels[groupIndex], function(label) {
	                label.attr({opacity: opacity});
	            });
	        }, this);
	    },

	    /**
	     * @param {object} paper - raphael paper
	     * @param {Array.<object>} positionData - series label positions
	     * @param {Array.<string>} labelData - series labels
	     * @param {object} labelTheme - series text theme
	     * @returns {object} - rendered label set
	     */
	    renderSeriesLabel: function(paper, positionData, labelData, labelTheme) {
	        var attributes = {
	            'font-size': labelTheme.fontSize,
	            'font-family': labelTheme.fontFamily,
	            'font-weight': labelTheme.fontWeight,
	            fill: labelTheme.color,
	            opacity: 0,
	            'text-anchor': this.isVertical ? 'middle' : 'start'
	        };
	        var set = paper.set();

	        this.groupLabels = snippet.map(labelData, function(labels, groupIndex) {
	            var labelSet = paper.set();
	            snippet.forEach(labels, function(label, index) {
	                var labelElement = this._renderLabel(paper, positionData[groupIndex][index], attributes, label);
	                labelSet.push(labelElement);
	                set.push(labelElement);
	            }, this);

	            return labelSet;
	        }, this);

	        return set;
	    },

	    /**
	     * @param {object} paper - raphael paper
	     * @param {Array.<object>} position - series label positions
	     * @param {Array.<string>} attributes - label text attributes
	     * @param {string} labelText - label text
	     * @returns {object} - rendered label object
	     * @private
	     */
	    _renderLabel: function(paper, position, attributes, labelText) {
	        var label = raphaelRenderUtil.renderText(paper, position, labelText, attributes);
	        var node = label.node;
	        var style = node.style;
	        style.userSelect = 'none';
	        style.cursor = 'default';
	        node.setAttribute('filter', 'url(#glow)');

	        return label;
	    },

	    /**
	     * @param {number} index - series index
	     * @returns {Array.<object>} - color and opacity of series
	     */
	    getGraphColors: function() {
	        return snippet.map(this.groupBars, function(barSet, groupIndex) {
	            var barColors = [];
	            var markerCount = this.groupLines[groupIndex].length;
	            var i = 0;
	            var legendColor;

	            barSet.forEach(function(item) {
	                barColors.push(item.attrs.fill);
	            });

	            legendColor = barColors[barColors.length - 1];

	            for (; i <= markerCount; i += 1) {
	                barColors.push(legendColor);
	            }

	            return barColors;
	        }, this);
	    }
	});

	/**
	 * Create clip rect with layout
	 * @param {object} paper Raphael paper
	 * @param {object} position position
	 * @param {object} dimension dimension
	 * @param {string} id ID string
	 * @returns {object}
	 * @ignore
	 */
	function createClipPathRectWithLayout(paper, position, dimension, id) {
	    var clipPath = document.createElementNS('http://www.w3.org/2000/svg', 'clipPath');
	    var rect = paper.rect(position.left, position.top, dimension.width, dimension.height);

	    rect.id = id + '_rect';
	    clipPath.id = id;

	    clipPath.appendChild(rect.node);
	    paper.defs.appendChild(clipPath);

	    return rect;
	}

	module.exports = RaphaelBulletChart;


/***/ }),
/* 13 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileoverview Raphael line chart renderer.
	 * @author NHN Ent.
	 *         FE Development Lab <dl_javascript@nhnent.com>
	 */

	'use strict';

	var RaphaelLineBase = __webpack_require__(14);
	var raphaelRenderUtil = __webpack_require__(5);
	var snippet = __webpack_require__(6);

	var EMPHASIS_OPACITY = 1;
	var DE_EMPHASIS_OPACITY = 0.3;

	var RaphaelLineChart = snippet.defineClass(RaphaelLineBase, /** @lends RaphaelLineChart.prototype */ {
	    /**
	     * RaphaelLineCharts is graph renderer for line chart.
	     * @constructs RaphaelLineChart
	     * @private
	     * @private
	     * @extends RaphaelLineTypeBase
	     */
	    init: function() {
	        /**
	         * selected legend index
	         * @type {?number}
	         */
	        this.selectedLegendIndex = null;

	        /**
	         * type of chart
	         * @type {string}
	         */
	        this.chartType = 'line';

	        /**
	         * Line width
	         * @type {number}
	         */
	        this.lineWidth = 6;
	    },

	    /**
	     * Render function of line chart.
	     * @param {object} [paper] - raphael paper
	     * @param {{groupPositions: Array.<Array>, dimension: object, theme: object, options: object}} data render data
	     * @returns {object} paper raphael paper
	     */
	    render: function(paper, data) {
	        var dimension = data.dimension;
	        var groupPositions = data.groupPositions;
	        var theme = data.theme;
	        var colors = theme.colors;
	        var options = data.options;
	        var opacity = options.showDot ? 1 : 0;
	        var isSpline = options.spline;
	        var lineWidth = this.lineWidth = (snippet.isNumber(options.pointWidth) ? options.pointWidth : this.lineWidth);
	        var borderStyle = this.makeBorderStyle(theme.dot.strokeColor, opacity, theme.dot.strokeWidth);
	        var outDotStyle = this.makeOutDotStyle(opacity, borderStyle);
	        var groupPaths;

	        if (isSpline) {
	            groupPaths = this._getSplineLinesPath(groupPositions, options.connectNulls);
	        } else {
	            groupPaths = this._getLinesPath(groupPositions, options.connectNulls);
	        }

	        this.paper = paper;
	        this.theme = data.theme;
	        this.isSpline = isSpline;
	        this.dimension = dimension;
	        this.position = data.position;

	        paper.setStart();

	        this.groupLines = this._renderLines(paper, groupPaths, colors, lineWidth);
	        this.tooltipLine = this._renderTooltipLine(paper, dimension.height);
	        this.groupDots = this._renderDots(paper, groupPositions, colors, opacity);

	        if (options.allowSelect) {
	            this.selectionDot = this._makeSelectionDot(paper);
	            this.selectionColor = theme.selectionColor;
	        }
	        this.colors = colors;
	        this.borderStyle = borderStyle;
	        this.outDotStyle = outDotStyle;
	        this.groupPositions = groupPositions;
	        this.groupPaths = groupPaths;
	        this.dotOpacity = opacity;
	        delete this.pivotGroupDots;

	        if (paper.raphael.svg) {
	            this.appendShadowFilterToDefs();
	        }

	        return paper.setFinish();
	    },

	    appendShadowFilterToDefs: function() {
	        var filter = document.createElementNS('http://www.w3.org/2000/svg', 'filter');
	        var feOffset = document.createElementNS('http://www.w3.org/2000/svg', 'feOffset');
	        var feGaussianBlur = document.createElementNS('http://www.w3.org/2000/svg', 'feGaussianBlur');
	        var feBlend = document.createElementNS('http://www.w3.org/2000/svg', 'feBlend');

	        filter.setAttributeNS(null, 'id', 'shadow');
	        filter.setAttributeNS(null, 'x', '-50%');
	        filter.setAttributeNS(null, 'y', '-50%');
	        filter.setAttributeNS(null, 'width', '180%');
	        filter.setAttributeNS(null, 'height', '180%');
	        feOffset.setAttributeNS(null, 'result', 'offOut');
	        feOffset.setAttributeNS(null, 'in', 'SourceAlpha');
	        feOffset.setAttributeNS(null, 'dx', '0');
	        feOffset.setAttributeNS(null, 'dy', '0');
	        feGaussianBlur.setAttributeNS(null, 'result', 'blurOut');
	        feGaussianBlur.setAttributeNS(null, 'in', 'offOut');
	        feGaussianBlur.setAttributeNS(null, 'stdDeviation', '2');
	        feBlend.setAttributeNS(null, 'in', 'SourceGraphic');
	        feBlend.setAttributeNS(null, 'in2', 'blurOut');
	        feBlend.setAttributeNS(null, 'mode', 'normal');
	        filter.appendChild(feOffset);
	        filter.appendChild(feGaussianBlur);
	        filter.appendChild(feBlend);
	        this.paper.defs.appendChild(filter);
	    },

	    /**
	     * Get lines path.
	     * @param {Array.<Array.<{left: number, top: number, startTop: number}>>} groupPositions positions
	     * @param {boolean} [connectNulls] - boolean value connect nulls or not
	     * @returns {Array.<Array.<string>>} path
	     * @private
	     */
	    _getLinesPath: function(groupPositions, connectNulls) {
	        var self = this;

	        return snippet.map(groupPositions, function(positions) {
	            return self._makeLinesPath(positions, null, connectNulls);
	        });
	    },

	    /**
	     * Get spline lines path.
	     * @param {Array.<Array.<{left: number, top: number, startTop: number}>>} groupPositions positions
	     * @param {boolean} [connectNulls] - boolean value connect nulls or not
	     * @returns {Array} path
	     * @private
	     */
	    _getSplineLinesPath: function(groupPositions, connectNulls) {
	        var self = this;

	        return snippet.map(groupPositions, function(positions) {
	            return self._makeSplineLinesPath(positions, connectNulls);
	        });
	    },

	    /**
	     * Render lines.
	     * @param {object} paper raphael paper
	     * @param {Array.<Array.<string>>} groupPaths paths
	     * @param {string[]} colors line colors
	     * @param {?number} strokeWidth stroke width
	     * @returns {Array.<Array.<object>>} lines
	     * @private
	     */
	    _renderLines: function(paper, groupPaths, colors, strokeWidth) {
	        return snippet.map(groupPaths, function(path, groupIndex) {
	            var color = colors[groupIndex] || 'transparent';
	            var line = raphaelRenderUtil.renderLine(paper, path.join(' '), color, strokeWidth);
	            line.node.setAttribute('class', 'auto-shape-rendering');

	            return line;
	        });
	    },

	    /**
	     * Resize graph of line chart.
	     * @param {object} params parameters
	     *      @param {{width: number, height:number}} params.dimension dimension
	     *      @param {Array.<Array.<{left:number, top:number}>>} params.groupPositions group positions
	     */
	    resize: function(params) {
	        var self = this,
	            dimension = params.dimension,
	            groupPositions = params.groupPositions;

	        this.resizeClipRect(dimension.width, dimension.height);

	        this.groupPositions = groupPositions;
	        this.groupPaths = this.isSpline ? this._getSplineLinesPath(groupPositions) : this._getLinesPath(groupPositions);
	        this.paper.setSize(dimension.width, dimension.height);
	        this.tooltipLine.attr({top: dimension.height});

	        snippet.forEachArray(this.groupPaths, function(path, groupIndex) {
	            self.groupLines[groupIndex].attr({path: path.join(' ')});

	            snippet.forEachArray(self.groupDots[groupIndex], function(item, index) {
	                if (item.endDot) {
	                    self.moveDot(item.endDot.dot, groupPositions[groupIndex][index]);
	                }
	            });
	        });
	    },

	    /**
	     * Select legend.
	     * @param {?number} legendIndex legend index
	     */
	    selectLegend: function(legendIndex) {
	        var noneSelected = snippet.isNull(legendIndex);

	        if (this.selectedLegendIndex && this.selectedLegendIndex !== -1) {
	            this.resetSeriesOrder(this.selectedLegendIndex);
	        }

	        this.selectedLegendIndex = legendIndex;

	        snippet.forEachArray(this.groupLines, function(line, groupIndex) {
	            var isSelectedLegend = legendIndex === groupIndex;
	            var opacity = (noneSelected || isSelectedLegend) ? EMPHASIS_OPACITY : DE_EMPHASIS_OPACITY;
	            var groupDots = this.groupDots[groupIndex];

	            line.attr({'stroke-opacity': opacity});

	            if (isSelectedLegend) {
	                this.moveSeriesToFront(line, groupDots);
	            }
	        }, this);

	        if (noneSelected) {
	            snippet.forEachArray(this.groupLines, function(line, groupIndex) {
	                this.moveSeriesToFront(line, this.groupDots[groupIndex]);
	            }, this);
	        }
	    },

	    /**
	     * Reset series order after selected to be same to when it is first rendered
	     * @param {number} legendIndex - legend index to reset series order
	     * @ignore
	     */
	    resetSeriesOrder: function(legendIndex) {
	        var frontLine = legendIndex + 1 < this.groupLines.length ? this.groupLines[legendIndex + 1] : null;

	        if (frontLine) {
	            this.groupLines[legendIndex].insertBefore(frontLine);
	            snippet.forEachArray(this.groupDots[legendIndex], function(item) {
	                if (item && item.endDot) {
	                    item.endDot.dot.insertBefore(frontLine);
	                }
	            });
	        }
	    },

	    /**
	     * @param {SVGElement} lineType - line or area graph
	     * @param {Array.<SVGElement>} dots - dot type element
	     * @ignore
	     * @override
	     */
	    moveSeriesToFront: function(lineType, dots) {
	        lineType.toFront();

	        snippet.forEachArray(dots, function(item) {
	            item.endDot.dot.toFront();
	        });
	    },

	    /**
	     * Animate for adding data.
	     * @param {object} data - data for graph rendering
	     * @param {number} tickSize - tick size
	     * @param {Array.<Array.<object>>} groupPositions - group positions
	     * @param {boolean} [shiftingOption] - shifting option
	     */
	    animateForAddingData: function(data, tickSize, groupPositions, shiftingOption) {
	        var self = this;
	        var isSpline = data.options.spline;
	        var groupPaths = isSpline ? this._getSplineLinesPath(groupPositions) : this._getLinesPath(groupPositions);
	        var additionalIndex = 0;

	        if (!groupPositions.length) {
	            return;
	        }

	        if (shiftingOption) {
	            additionalIndex = 1;
	        }

	        snippet.forEachArray(this.groupLines, function(line, groupIndex) {
	            var dots = self.groupDots[groupIndex];
	            var groupPosition = groupPositions[groupIndex];

	            if (shiftingOption) {
	                self._removeFirstDot(dots);
	            }

	            snippet.forEachArray(dots, function(item, index) {
	                var position = groupPosition[index + additionalIndex];
	                self._animateByPosition(item.endDot.dot, position, tickSize);
	            });

	            self._animateByPath(line, groupPaths[groupIndex], tickSize);
	        });
	    },

	    renderSeriesLabel: function(paper, groupPositions, groupLabels, labelTheme) {
	        var attributes = {
	            'font-size': labelTheme.fontSize,
	            'font-family': labelTheme.fontFamily,
	            'font-weight': labelTheme.fontWeight,
	            fill: labelTheme.color,
	            'text-anchor': 'middle',
	            opacity: 0
	        };
	        var set = paper.set();

	        snippet.forEach(groupLabels, function(categoryLabel, categoryIndex) {
	            snippet.forEach(categoryLabel, function(label, seriesIndex) {
	                var position = groupPositions[categoryIndex][seriesIndex];
	                var endLabel = raphaelRenderUtil.renderText(paper, position.end, label.end, attributes);
	                var startLabel;

	                set.push(endLabel);

	                endLabel.node.style.userSelect = 'none';
	                endLabel.node.style.cursor = 'default';
	                endLabel.node.setAttribute('filter', 'url(#glow)');

	                if (position.start) {
	                    startLabel = raphaelRenderUtil.renderText(paper, position.start, label.start, attributes);

	                    startLabel.node.style.userSelect = 'none';
	                    startLabel.node.style.cursor = 'default';
	                    startLabel.node.setAttribute('filter', 'url(#glow)');

	                    set.push(startLabel);
	                }
	            });
	        });

	        return set;
	    }
	});

	module.exports = RaphaelLineChart;


/***/ }),
/* 14 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileoverview RaphaelLineTypeBase is base class for line type renderer.
	 * @author NHN Ent.
	 *         FE Development Lab <dl_javascript@nhnent.com>
	 */

	'use strict';

	var raphaelRenderUtil = __webpack_require__(5);
	var renderUtil = __webpack_require__(7);
	var snippet = __webpack_require__(6);
	var arrayUtil = __webpack_require__(10);

	var browser = snippet.browser;
	var IS_LTE_IE8 = browser.msie && browser.version <= 8;
	var ANIMATION_DURATION = 700;
	var DEFAULT_DOT_RADIUS = 6;
	var SELECTION_DOT_RADIUS = 7;
	var DE_EMPHASIS_OPACITY = 0.3;
	var MOVING_ANIMATION_DURATION = 300;
	var CHART_HOVER_STATUS_OVER = 'over';
	var CHART_HOVER_STATUS_OUT = 'out';

	var concat = Array.prototype.concat;

	/**
	 * @classdesc RaphaelLineTypeBase is base for line type renderer.
	 * @class RaphaelLineTypeBase
	 * @private
	 */
	var RaphaelLineTypeBase = snippet.defineClass(/** @lends RaphaelLineTypeBase.prototype */ {
	    /**
	     * Make lines path.
	     * @param {Array.<{left: number, top: number, startTop: number}>} positions positions
	     * @param {?string} [posTopType='top'] position top type
	     * @param {boolean} [connectNulls] - boolean value connect nulls or not
	     * @returns {Array.<string | number>} paths
	     * @private
	     */
	    _makeLinesPath: function(positions, posTopType, connectNulls) {
	        var path = [];
	        var prevMissing = false;

	        posTopType = posTopType || 'top';
	        snippet.map(positions, function(position) {
	            var pathCommand = (prevMissing && !connectNulls) ? 'M' : 'L';

	            if (position) {
	                path.push([pathCommand, position.left, position[posTopType]]);
	                if (prevMissing) {
	                    prevMissing = false;
	                }
	            } else {
	                prevMissing = true;
	            }
	        });

	        path = concat.apply([], path);

	        if (path.length > 0) {
	            path[0] = 'M';
	        }

	        return path;
	    },

	    /**
	     * Get anchor. (http://raphaeljs.com/analytics.js)
	     * @param {{left: number, top: number}} fromPos from position
	     * @param {{left: number, top: number}} pos position
	     * @param {{left: number, top: number}} nextPos next position
	     * @returns {{x1: number, y1: number, x2: number, y2: number}} anchor
	     * @private
	     */
	    _getAnchor: function(fromPos, pos, nextPos) {
	        var l1 = (pos.left - fromPos.left) / 2,
	            l2 = (nextPos.left - pos.left) / 2,
	            a = Math.atan((pos.left - fromPos.left) / Math.abs(pos.top - fromPos.top)),
	            b = Math.atan((nextPos.left - pos.left) / Math.abs(pos.top - nextPos.top)),
	            alpha, dx1, dy1, dx2, dy2;

	        a = fromPos.top < pos.top ? Math.PI - a : a;
	        b = nextPos.top < pos.top ? Math.PI - b : b;
	        alpha = (Math.PI / 2) - (((a + b) % (Math.PI * 2)) / 2);
	        dx1 = l1 * Math.sin(alpha + a);
	        dy1 = l1 * Math.cos(alpha + a);
	        dx2 = l2 * Math.sin(alpha + b);
	        dy2 = l2 * Math.cos(alpha + b);

	        return {
	            x1: pos.left - dx1,
	            y1: pos.top + dy1,
	            x2: pos.left + dx2,
	            y2: pos.top + dy2
	        };
	    },

	    /**
	     * Get spline positions groups which is divided with null data value.
	     * If series has not divided positions, it returns only one positions group.
	     * @param {Array.<object>} positions positions array
	     * @param {boolean} connectNulls option of connect line of both null data's side
	     * @returns {Array.<Array.<object>>}
	     * @private
	     */
	    _getSplinePositionsGroups: function(positions, connectNulls) {
	        var positionsGroups = [];
	        var positionsGroup = [];
	        snippet.forEach(positions, function(position, index) {
	            var isLastIndex = index === positions.length - 1;

	            if (position) {
	                positionsGroup.push(position);
	            }

	            if ((!position && positionsGroup.length > 0 && !connectNulls) || isLastIndex) {
	                positionsGroups.push(positionsGroup);
	                positionsGroup = [];
	            }
	        });

	        return positionsGroups;
	    },

	    /**
	     * Get spline partial paths
	     * @param {Array.<Array.<object>>} positionsGroups positions groups
	     * @returns {Array.<Array.<Array>>}
	     * @private
	     */
	    _getSplinePartialPaths: function(positionsGroups) {
	        var self = this;
	        var paths = [];
	        var firstPos, lastPos, positionsLen, fromPos, middlePositions, path, prevPos;

	        snippet.forEach(positionsGroups, function(dataPositions) {
	            prevPos = firstPos = dataPositions[0];
	            positionsLen = dataPositions.length;
	            fromPos = firstPos;
	            lastPos = dataPositions[positionsLen - 1];
	            middlePositions = dataPositions.slice(1).slice(0, positionsLen - 2);

	            path = snippet.map(middlePositions, function(position, index) {
	                var nextPos = dataPositions[index + 2];
	                var anchor = self._getAnchor(fromPos, position, nextPos);

	                fromPos = position;

	                if (Math.abs(anchor.y1 - prevPos.top) > Math.abs(prevPos.top - position.top)) {
	                    anchor.y1 = position.top;
	                }

	                if (Math.abs(anchor.y2 - nextPos.top) > Math.abs(nextPos.top - position.top)) {
	                    anchor.y2 = position.top;
	                }

	                prevPos = position;

	                return [anchor.x1, anchor.y1, position.left, position.top, anchor.x2, anchor.y2];
	            });

	            path.push([lastPos.left, lastPos.top, lastPos.left, lastPos.top]);
	            path.unshift(['M', firstPos.left, firstPos.top, 'C', firstPos.left, firstPos.top]);
	            paths.push(path);
	        });

	        return paths;
	    },

	    /**
	     * Make spline lines path.
	     * @param {Array.<{left: number, top: number, startTop: number}>} positions positions
	     * @param {boolean} [connectNulls] - boolean value connect nulls or not
	     * @returns {Array.<string | number>} paths
	     * @private
	     */
	    _makeSplineLinesPath: function(positions, connectNulls) {
	        var path = [];
	        var positionsGroups = this._getSplinePositionsGroups(positions, connectNulls);
	        var partialPaths = this._getSplinePartialPaths(positionsGroups);

	        snippet.forEach(partialPaths, function(partialPath) {
	            path = path.concat(partialPath);
	        });

	        return path;
	    },

	    /**
	     * Render tooltip line.
	     * @param {object} paper raphael paper
	     * @param {number} height height
	     * @returns {object} raphael object
	     * @private
	     */
	    _renderTooltipLine: function(paper, height) {
	        var linePath = raphaelRenderUtil.makeLinePath({
	            left: 10,
	            top: height
	        }, {
	            left: 10,
	            top: 0
	        });

	        return raphaelRenderUtil.renderLine(paper, linePath, 'transparent', 1);
	    },

	    appendShadowFilterToDefs: function() {
	        var filter = document.createElementNS('http://www.w3.org/2000/svg', 'filter');
	        var feOffset = document.createElementNS('http://www.w3.org/2000/svg', 'feOffset');
	        var feGaussianBlur = document.createElementNS('http://www.w3.org/2000/svg', 'feGaussianBlur');
	        var feBlend = document.createElementNS('http://www.w3.org/2000/svg', 'feBlend');

	        filter.setAttributeNS(null, 'id', 'shadow');
	        filter.setAttributeNS(null, 'x', '-50%');
	        filter.setAttributeNS(null, 'y', '-50%');
	        filter.setAttributeNS(null, 'width', '180%');
	        filter.setAttributeNS(null, 'height', '180%');
	        feOffset.setAttributeNS(null, 'result', 'offOut');
	        feOffset.setAttributeNS(null, 'in', 'SourceAlpha');
	        feOffset.setAttributeNS(null, 'dx', '0');
	        feOffset.setAttributeNS(null, 'dy', '0');
	        feGaussianBlur.setAttributeNS(null, 'result', 'blurOut');
	        feGaussianBlur.setAttributeNS(null, 'in', 'offOut');
	        feGaussianBlur.setAttributeNS(null, 'stdDeviation', '2');
	        feBlend.setAttributeNS(null, 'in', 'SourceGraphic');
	        feBlend.setAttributeNS(null, 'in2', 'blurOut');
	        feBlend.setAttributeNS(null, 'mode', 'normal');
	        filter.appendChild(feOffset);
	        filter.appendChild(feGaussianBlur);
	        filter.appendChild(feBlend);
	        this.paper.defs.appendChild(filter);
	    },

	    /**
	     * Make border style.
	     * @param {string} borderColor border color
	     * @param {number} opacity opacity
	     * @param {number} borderWidth border width
	     * @returns {{stroke: string, stroke-width: number, strike-opacity: number}} border style
	     */
	    makeBorderStyle: function(borderColor, opacity, borderWidth) {
	        var borderStyle = {
	            'stroke-width': borderWidth,
	            'stroke-opacity': opacity
	        };

	        if (borderColor) {
	            borderStyle.stroke = borderColor;
	        }

	        return borderStyle;
	    },

	    /**
	     * Make dot style for mouseout event.
	     * @param {number} opacity opacity
	     * @param {object} borderStyle border style
	     * @returns {{fill-opacity: number, stroke-opacity: number, r: number}} style
	     */
	    makeOutDotStyle: function(opacity, borderStyle) {
	        var outDotStyle = {
	            'fill-opacity': opacity,
	            'stroke-opacity': opacity,
	            r: DEFAULT_DOT_RADIUS
	        };

	        if (borderStyle) {
	            snippet.extend(outDotStyle, borderStyle);
	        }

	        return outDotStyle;
	    },

	    /**
	     * Render dot.
	     * @param {object} paper raphael papaer
	     * @param {{left: number, top: number}} position dot position
	     * @param {string} color dot color
	     * @param {number} opacity opacity
	     * @returns {object} raphael dot
	     */
	    renderDot: function(paper, position, color, opacity) {
	        var dotTheme = (this.theme && this.theme.dot) || {dot: {}};
	        var dot, dotStyle, raphaelDot;

	        if (position) {
	            dot = paper.circle(
	                position.left,
	                position.top,
	                (!snippet.isUndefined(dotTheme.radius)) ? dotTheme.radius : DEFAULT_DOT_RADIUS
	            );
	            dotStyle = {
	                fill: dotTheme.fillColor || color,
	                'fill-opacity': snippet.isNumber(opacity) ? opacity : dotTheme.fillOpacity,
	                stroke: dotTheme.strokeColor || color,
	                'stroke-opacity': snippet.isNumber(opacity) ? opacity : dotTheme.strokeOpacity,
	                'stroke-width': dotTheme.strokeWidth
	            };

	            dot.attr(dotStyle);

	            raphaelDot = {
	                dot: dot,
	                color: color
	            };
	        }

	        return raphaelDot;
	    },

	    /**
	     * Move dots to front.
	     * @param {Array.<{startDot: {dot: object}, endDot: {dot: object}}>} dots - dots
	     * @private
	     */
	    _moveDotsToFront: function(dots) {
	        raphaelRenderUtil.forEach2dArray(dots, function(dotInfo) {
	            dotInfo.endDot.dot.toFront();
	            if (dotInfo.startDot) {
	                dotInfo.startDot.dot.toFront();
	            }
	        });
	    },

	    /**
	     * Render dots.
	     * @param {object} paper raphael paper
	     * @param {Array.<Array.<object>>} groupPositions positions
	     * @param {string[]} colors colors
	     * @param {number} opacity opacity
	     * @param {Array.<object>} [seriesSet] series set
	     * @returns {Array.<object>} dots
	     * @private
	     */
	    _renderDots: function(paper, groupPositions, colors, opacity, seriesSet) {
	        var self = this;
	        var dots;

	        dots = snippet.map(groupPositions, function(positions, groupIndex) {
	            var color = colors[groupIndex];

	            return snippet.map(positions, function(position) {
	                var dotMap = {
	                    endDot: self.renderDot(paper, position, color, opacity)
	                };
	                var startPosition;

	                if (self.hasRangeData) {
	                    startPosition = snippet.extend({}, position);
	                    startPosition.top = startPosition.startTop;
	                    dotMap.startDot = self.renderDot(paper, startPosition, color, opacity);
	                }

	                if (seriesSet) {
	                    seriesSet.push(dotMap.endDot.dot);
	                    if (dotMap.startDot) {
	                        seriesSet.push(dotMap.startDot.dot);
	                    }
	                }

	                return dotMap;
	            });
	        });

	        return dots;
	    },

	    /**
	     * Get center position
	     * @param {{left: number, top: number}} fromPos from position
	     * @param {{left: number, top: number}} toPos to position
	     * @returns {{left: number, top: number}} position
	     * @private
	     */
	    _getCenter: function(fromPos, toPos) {
	        return {
	            left: (fromPos.left + toPos.left) / 2,
	            top: (fromPos.top + toPos.top) / 2
	        };
	    },

	    /**
	     * Show dot.
	     * @param {object} dotInformation raphael object
	     * @param {number} groupIndex seriesIndex
	     * @private
	     */
	    _showDot: function(dotInformation, groupIndex) {
	        var hoverTheme = this.theme.dot.hover;
	        var attributes = {
	            'fill-opacity': hoverTheme.fillOpacity,
	            stroke: hoverTheme.strokeColor || dotInformation.color,
	            'stroke-opacity': hoverTheme.strokeOpacity,
	            'stroke-width': hoverTheme.strokeWidth,
	            r: hoverTheme.radius,
	            filter: 'url(#shadow)'
	        };

	        this._setPrevDotAttributes(groupIndex, dotInformation.dot);

	        if (hoverTheme.fillColor) {
	            attributes.fill = hoverTheme.fillColor;
	        }

	        dotInformation.dot.attr(attributes);
	        if (dotInformation.dot.node) {
	            dotInformation.dot.node.setAttribute('filter', 'url(#shadow)');
	        }
	        dotInformation.dot.toFront();
	    },

	    /**
	     * temp save dot style attribute
	     * @param {number} groupIndex seriesIndex
	     * @param {object} dot raphael circle object
	     * @private
	     */
	    _setPrevDotAttributes: function(groupIndex, dot) {
	        if (!this._prevDotAttributes) {
	            this._prevDotAttributes = {};
	        }
	        this._prevDotAttributes[groupIndex] = dot.attr();
	    },

	    /**
	     * Update line stroke width.
	     * @param {string} changeType over or out
	     * @param {object} line raphael object
	     * @private
	     */
	    _updateLineStrokeOpacity: function(changeType, line) {
	        var opacity = 1;
	        var isSelectedLegend = !snippet.isNull(this.selectedLegendIndex);
	        if (this.groupLines) {
	            if (changeType === CHART_HOVER_STATUS_OVER || isSelectedLegend) {
	                opacity = (this.chartType === 'radial' && this.isShowArea) ? 0 : DE_EMPHASIS_OPACITY;
	            }

	            if (changeType === CHART_HOVER_STATUS_OUT && isSelectedLegend) {
	                line = this.getLine(this.selectedLegendIndex);
	            }

	            snippet.forEachArray(this.groupLines, function(otherLine) {
	                otherLine.attr({
	                    'stroke-opacity': opacity
	                });
	            });
	            line.attr({
	                'stroke-opacity': 1
	            });
	        }
	    },

	    /**
	     * Get the raphael line element with groupIndex
	     * @param {number} groupIndex  group index
	     * @returns {object} line raphael object
	     */
	    getLine: function(groupIndex) {
	        return this.groupLines ? this.groupLines[groupIndex] : this.groupAreas[groupIndex];
	    },

	    /**
	     * Update line stroke width.
	     * @param {string} changeType over or out
	     * @private
	     */
	    _updateAreaOpacity: function(changeType) {
	        if (this.groupAreas) {
	            snippet.forEach(this.groupAreas, function(otherArea) {
	                otherArea.area.attr({
	                    'fill-opacity': (changeType === CHART_HOVER_STATUS_OVER) ? DE_EMPHASIS_OPACITY : 1
	                });
	            });
	        }
	    },

	    /**
	     * Update line stroke width.
	     * @param {object} line raphael object
	     * @param {number} strokeWidth stroke width
	     * @private
	     */
	    _updateLineStrokeWidth: function(line, strokeWidth) {
	        var changeAttr = {
	            'stroke-width': strokeWidth
	        };
	        if (line.attrs) {
	            changeAttr.stroke = line.attrs.stroke;
	        }
	        line.attr(changeAttr);
	    },

	    /**
	     * Show animation.
	     * @param {{groupIndex: number, index:number}} data show info
	     */
	    showAnimation: function(data) {
	        var index = data.groupIndex; // Line chart has pivot values.
	        var groupIndex = data.index;
	        var line = this.groupLines ? this.groupLines[groupIndex] : this.groupAreas[groupIndex];
	        var item = this.groupDots[groupIndex][index];
	        var strokeWidth, startLine;

	        if (!item) {
	            return;
	        }

	        if (this.chartType === 'area') {
	            strokeWidth = 5;
	            startLine = line.startLine;
	            this._updateAreaOpacity(CHART_HOVER_STATUS_OVER);
	            line = line.line;
	        } else {
	            strokeWidth = this.lineWidth;
	        }

	        this._updateLineStrokeOpacity(CHART_HOVER_STATUS_OVER, line);
	        this._updateLineStrokeWidth(line, strokeWidth);
	        if (startLine) {
	            this._updateLineStrokeWidth(startLine, strokeWidth);
	        }

	        this._showDot(item.endDot, groupIndex);

	        if (item.startDot) {
	            this._showDot(item.startDot, groupIndex);
	        }
	    },

	    /**
	     * Get pivot group dots.
	     * @returns {Array.<Array>} dots
	     * @private
	     */
	    _getPivotGroupDots: function() {
	        if (!this.pivotGroupDots && this.groupDots) {
	            this.pivotGroupDots = arrayUtil.pivot(this.groupDots);
	        }

	        return this.pivotGroupDots;
	    },

	    /**
	     * Show group dots.
	     * @param {number} index index
	     * @private
	     */
	    _showGroupDots: function(index) {
	        var self = this;
	        var groupDots = this._getPivotGroupDots();

	        if (!groupDots || !groupDots[index]) {
	            return;
	        }

	        snippet.forEachArray(groupDots[index], function(item, groupIndex) {
	            if (item.endDot) {
	                self._showDot(item.endDot, groupIndex);
	            }

	            if (item.startDot) {
	                self._showDot(item.startDot, groupIndex);
	            }
	        });
	    },

	    /**
	     * Show line for group tooltip.
	     * @param {{
	     *      dimension: {width: number, height: number},
	     *      position: {left: number, top: number}
	     * }} bound bound
	     * @param {object} layout layout
	     */
	    showGroupTooltipLine: function(bound, layout) {
	        var left = Math.max(bound.position.left, 11);
	        var linePath = raphaelRenderUtil.makeLinePath({
	            left: left,
	            top: layout.position.top + bound.dimension.height
	        }, {
	            left: left,
	            top: layout.position.top
	        });

	        if (this.tooltipLine) {
	            this.tooltipLine.attr({
	                path: linePath,
	                stroke: '#999',
	                'stroke-opacity': 1
	            });
	        }
	    },

	    /**
	     * Show group animation.
	     * @param {number} index index
	     */
	    showGroupAnimation: function(index) {
	        this._showGroupDots(index);
	    },

	    /**
	     * Hide dot.
	     * @param {object} dot raphael object
	     * @param {number} groupIndex seriesIndex
	     * @param {?number} opacity opacity
	     * @private
	     */
	    _hideDot: function(dot, groupIndex, opacity) {
	        var prev = this._prevDotAttributes[groupIndex];
	        var outDotStyle = this.outDotStyle;

	        // if prev data exists, use prev.r
	        // there is dot disappearing issue, when hideDot
	        if (prev && !snippet.isUndefined(opacity)) {
	            outDotStyle = snippet.extend({
	                'r': prev.r,
	                'stroke': prev.stroke,
	                'fill': prev.fill,
	                'stroke-opacity': prev['stroke-opacity'],
	                'stroke-width': prev['stroke-width'],
	                'fill-opacity': prev['fill-opacity']
	            });
	        }

	        dot.attr(outDotStyle);
	        if (dot.node) {
	            dot.node.setAttribute('filter', '');
	        }

	        this.resetSeriesOrder(groupIndex);
	    },

	    /**
	     * Hide animation.
	     * @param {{groupIndex: number, index:number}} data hide info
	     */
	    hideAnimation: function(data) {
	        var index = data.groupIndex; // Line chart has pivot values.
	        var groupIndex = data.index;
	        var opacity = this.dotOpacity;
	        var groupDot = this.groupDots[groupIndex];
	        var line, item, strokeWidth, startLine;

	        if (!groupDot || !groupDot[index]) {
	            return;
	        }

	        line = this.groupLines ? this.groupLines[groupIndex] : this.groupAreas[groupIndex];
	        item = groupDot[index];

	        if (this.chartType === 'area') {
	            strokeWidth = this.lineWidth;
	            startLine = line.startLine;
	            line = line.line;
	            this._updateAreaOpacity(CHART_HOVER_STATUS_OUT);
	        } else {
	            strokeWidth = this.lineWidth;
	        }

	        if (opacity && !snippet.isNull(this.selectedLegendIndex) && this.selectedLegendIndex !== groupIndex) {
	            opacity = DE_EMPHASIS_OPACITY;
	        }

	        this._updateLineStrokeOpacity(CHART_HOVER_STATUS_OUT, line);
	        this._updateLineStrokeWidth(line, strokeWidth);

	        if (startLine) {
	            this._updateLineStrokeWidth(startLine, strokeWidth);
	        }

	        if (item) {
	            this._hideDot(item.endDot.dot, groupIndex, opacity);

	            if (item.startDot) {
	                this._hideDot(item.startDot.dot, groupIndex, opacity);
	            }
	        }
	    },

	    /**
	     * Hide group dots.
	     * @param {number} index index
	     * @private
	     */
	    _hideGroupDots: function(index) {
	        var self = this;
	        var hasSelectedIndex = !snippet.isNull(this.selectedLegendIndex);
	        var baseOpacity = this.dotOpacity;
	        var groupDots = this._getPivotGroupDots();

	        if (!groupDots || !groupDots[index]) {
	            return;
	        }

	        snippet.forEachArray(groupDots[index], function(item, groupIndex) {
	            var opacity = baseOpacity;

	            if (opacity && hasSelectedIndex && self.selectedLegendIndex !== groupIndex) {
	                opacity = DE_EMPHASIS_OPACITY;
	            }

	            if (item.endDot) {
	                self._hideDot(item.endDot.dot, groupIndex, opacity);
	            }

	            if (item.startDot) {
	                self._hideDot(item.startDot.dot, groupIndex, opacity);
	            }
	        });
	    },

	    /**
	     * Hide line for group tooltip.
	     */
	    hideGroupTooltipLine: function() {
	        this.tooltipLine.attr({
	            'stroke-opacity': 0
	        });
	    },

	    /**
	     * Hide group animation.
	     * @param {number} index index
	     */
	    hideGroupAnimation: function(index) {
	        this._hideGroupDots(index);
	    },

	    /**
	     * Move dot.
	     * @param {object} dot - raphael object
	     * @param {{left: number, top: number}} position - position
	     * @private
	     */
	    _moveDot: function(dot, position) {
	        var dotAttrs = {
	            cx: position.left,
	            cy: position.top
	        };

	        if (this.dotOpacity) {
	            dotAttrs = snippet.extend({'fill-opacity': this.dotOpacity}, dotAttrs, this.borderStyle);
	        }

	        dot.attr(dotAttrs);
	    },

	    /**
	     * Animate.
	     * @param {function} onFinish callback
	     * @param {Array.<object>} seriesSet series set
	     */
	    animate: function(onFinish, seriesSet) {
	        var paper = this.paper;
	        var dimension = this.dimension;
	        var position = this.position;
	        var clipRect = this.clipRect;
	        var clipRectId = this._getClipRectId();

	        if (!IS_LTE_IE8 && dimension) {
	            if (!clipRect) {
	                clipRect = createClipPathRectWithLayout(paper, position, dimension, clipRectId);
	                this.clipRect = clipRect;
	            } else {
	                clipRect.attr({
	                    width: 0,
	                    height: dimension.height
	                });
	            }

	            seriesSet.forEach(function(seriesElement) {
	                seriesElement.node.setAttribute('clip-path', 'url(#' + clipRectId + ')');
	            });

	            clipRect.animate({
	                width: dimension.width
	            }, ANIMATION_DURATION, '>', onFinish);
	        }
	    },

	    /**
	     * Make selection dot.
	     * @param {object} paper raphael paper
	     * @returns {object} selection dot
	     * @private
	     */
	    _makeSelectionDot: function(paper) {
	        var selectionDot = paper.circle(0, 0, SELECTION_DOT_RADIUS);

	        selectionDot.attr({
	            'fill': '#ffffff',
	            'fill-opacity': 0,
	            'stroke-opacity': 0,
	            'stroke-width': 2
	        });

	        return selectionDot;
	    },

	    /**
	     * Select series.
	     * @param {{groupIndex: number, index: number}} indexes indexes
	     */
	    selectSeries: function(indexes) {
	        var item = this.groupDots[indexes.index][indexes.groupIndex],
	            position = this.groupPositions[indexes.index][indexes.groupIndex];

	        this.selectedItem = item;
	        this.selectionDot.attr({
	            cx: position.left,
	            cy: position.top,
	            'fill-opacity': 0.5,
	            'stroke-opacity': 1,
	            stroke: this.selectionColor || item.endDot.color
	        });

	        if (this.selectionStartDot) {
	            this.selectionStartDot.attr({
	                cx: position.left,
	                cy: position.startTop,
	                'fill-opacity': 0.5,
	                'stroke-opacity': 1,
	                stroke: this.selectionColor || item.startDot.color
	            });
	        }
	    },

	    /**
	     * Unselect series.
	     * @param {{groupIndex: number, index: number}} indexes indexes
	     */
	    unselectSeries: function(indexes) {
	        var item = this.groupDots[indexes.index][indexes.groupIndex];

	        if (this.selectedItem === item) {
	            this.selectionDot.attr({
	                'fill-opacity': 0,
	                'stroke-opacity': 0
	            });
	        }

	        if (this.selectionStartDot) {
	            this.selectionStartDot.attr({
	                'fill-opacity': 0,
	                'stroke-opacity': 0
	            });
	        }
	    },

	    /**
	     * Set width or height of paper.
	     * @param {number} width - width
	     * @param {number} height - height
	     */
	    setSize: function(width, height) {
	        width = width || this.dimension.width;
	        height = height || this.dimension.height;
	        this.paper.setSize(width, height);
	    },

	    /**
	     * Animate by position.
	     * @param {object} raphaelObj - raphael object
	     * @param {{left: number, top: number}} position - position
	     * @param {number} tickSize tick size
	     * @private
	     */
	    _animateByPosition: function(raphaelObj, position, tickSize) {
	        var attr = {
	            cx: position.left,
	            cy: position.top
	        };

	        if (snippet.isExisty(tickSize)) {
	            attr.transform = 't-' + tickSize + ',0';
	        }

	        raphaelObj.animate(attr, MOVING_ANIMATION_DURATION);
	    },

	    /**
	     * Animate by path.
	     * @param {object} raphaelObj - raphael object
	     * @param {Array.<string | number>} paths - paths
	     * @param {number} tickSize tick size
	     * @private
	     */
	    _animateByPath: function(raphaelObj, paths, tickSize) {
	        var attr = {
	            path: paths.join(' ')
	        };

	        if (snippet.isExisty(tickSize)) {
	            attr.transform = 't-' + tickSize + ',0';
	        }

	        raphaelObj.animate(attr, MOVING_ANIMATION_DURATION);
	    },

	    /**
	     * Remove first dot.
	     * @param {Array.<object>} dots - dots
	     * @private
	     */
	    _removeFirstDot: function(dots) {
	        var firstDot = dots.shift();

	        firstDot.endDot.dot.remove();

	        if (firstDot.startDot) {
	            firstDot.startDot.dot.remove();
	        }
	    },

	    /**
	     * Clear paper.
	     */
	    clear: function() {
	        delete this.paper.dots;
	        this.paper.clear();
	    },

	    /**
	     * Resize clip rect size
	     * @param {number} width series width
	     * @param {number} height series height
	     */
	    resizeClipRect: function(width, height) {
	        var clipRect = this.paper.getById(this._getClipRectId() + '_rect');

	        clipRect.attr({
	            width: width,
	            height: height
	        });
	    },

	    /**
	     * Set clip rect id
	     * @returns {string} id - clip rect id
	     * @private
	     */
	    _getClipRectId: function() {
	        if (!this.clipRectId) {
	            this.clipRectId = renderUtil.generateClipRectId();
	        }

	        return this.clipRectId;
	    },

	    /**
	     * Reset series order after selected to be same to when it is first rendered
	     * @param {number} legendIndex - legend index to reset series order
	     * @ignore
	     * @abstract
	     */
	    resetSeriesOrder: function() {},

	    /**
	     * @param {SVGElement | {area: {SVGElement}, line: {SVGElement}, startLine: {SVGElement}}} lineType - line or area graph
	     * @param {Array.<SVGElement>} dots - dot type element
	     * @abstract
	     */
	    moveSeriesToFront: function() {}
	});

	/**
	 * Create clip rect with layout
	 * @param {object} paper Raphael paper
	 * @param {object} position position
	 * @param {object} dimension dimension
	 * @param {string} id ID string
	 * @returns {object}
	 * @ignore
	 */
	function createClipPathRectWithLayout(paper, position, dimension, id) {
	    var clipPath = document.createElementNS('http://www.w3.org/2000/svg', 'clipPath');
	    var rect = paper.rect((position.left - 10), (position.top - 10), 0, dimension.height);

	    rect.id = id + '_rect';
	    clipPath.id = id;

	    clipPath.appendChild(rect.node);
	    paper.defs.appendChild(clipPath);

	    return rect;
	}

	module.exports = RaphaelLineTypeBase;


/***/ }),
/* 15 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileoverview Raphael area chart renderer.
	 * @author NHN Ent.
	 *         FE Development Lab <dl_javascript@nhnent.com>
	 */

	'use strict';

	var RaphaelLineBase = __webpack_require__(14);
	var raphaelRenderUtil = __webpack_require__(5);
	var snippet = __webpack_require__(6);

	var EMPHASIS_OPACITY = 1;
	var DE_EMPHASIS_OPACITY = 0.3;

	var concat = Array.prototype.concat;
	var chartConst = __webpack_require__(8);
	var GUIDE_AREACHART_AREAOPACITY_TYPE = chartConst.GUIDE_AREACHART_AREAOPACITY_TYPE;
	var CLASS_NAME_SVG_AUTOSHAPE = chartConst.CLASS_NAME_SVG_AUTOSHAPE;
	var consoleUtil = __webpack_require__(16);

	var RaphaelAreaChart = snippet.defineClass(RaphaelLineBase, /** @lends RaphaelAreaChart.prototype */ {
	    /**
	     * RaphaelAreaChart is graph renderer for area chart.
	     * @constructs RaphaelAreaChart
	     * @private
	     * @private
	     * @extends RaphaelLineTypeBase
	     */
	    init: function() {
	        /**
	         * selected legend index
	         * @type {?number}
	         */
	        this.selectedLegendIndex = null;

	        /**
	         * type of chart
	         * @type {string}
	         */
	        this.chartType = 'area';

	        /**
	         * Line width
	         * @type {number}
	         */
	        this.lineWidth = 0;
	    },

	    /**
	     * Render function of area chart.
	     * @param {object} paper - raphael paper
	     * @param {{groupPositions: Array.<Array>, dimension: object, theme: object, options: object}} data render data
	     * @returns {object}
	     */
	    render: function(paper, data) {
	        var dimension = data.dimension;
	        var groupPositions = data.groupPositions;
	        var theme = data.theme;
	        var dotTheme = (theme && theme.dot) || {};
	        var colors = theme.colors;
	        var options = data.options;
	        var areaOpacity = this._isAreaOpacityNumber(options.areaOpacity) ? options.areaOpacity : 1;
	        var dotOpacity = options.showDot ? 1 : 0;
	        var borderStyle = this.makeBorderStyle(dotTheme.strokeColor, dotOpacity, dotTheme.strokeWidth);
	        var outDotStyle = this.makeOutDotStyle(dotOpacity, borderStyle);
	        var lineWidth = this.lineWidth = (snippet.isNumber(options.pointWidth) ? options.pointWidth : this.lineWidth);
	        var seriesSet;

	        this.paper = paper;
	        this.theme = data.theme;
	        this.isSpline = options.spline;
	        this.dimension = dimension;
	        this.position = data.position;
	        this.zeroTop = data.zeroTop;
	        this.hasRangeData = data.hasRangeData;

	        paper.setStart();

	        this.groupPaths = this._getAreaChartPath(groupPositions, null, options.connectNulls);
	        this.groupAreas = this._renderAreas(paper, this.groupPaths, colors, lineWidth, areaOpacity);
	        this.tooltipLine = this._renderTooltipLine(paper, dimension.height);
	        this.groupDots = this._renderDots(paper, groupPositions, colors, dotOpacity);

	        if (options.allowSelect) {
	            this.selectionDot = this._makeSelectionDot(paper);
	            this.selectionColor = theme.selectionColor;

	            if (this.hasRangeData) {
	                this.selectionStartDot = this._makeSelectionDot(paper);
	            }
	        }

	        this.outDotStyle = outDotStyle;
	        this.groupPositions = groupPositions;
	        this.dotOpacity = dotOpacity;
	        this.pivotGroupDots = null;

	        seriesSet = paper.setFinish();
	        this._moveSeriesToFrontAll();
	        this.tooltipLine.toFront();

	        return seriesSet;
	    },

	    /**
	     * Rearrange all series sequences.
	     * @private
	     */
	    _moveSeriesToFrontAll: function() {
	        var len = this.groupPaths ? this.groupPaths.length : 0;
	        var i = 0;
	        for (; i < len; i += 1) {
	            this.moveSeriesToFront(this.groupAreas[i], this.groupDots[i]);
	        }
	    },

	    /**
	     * Get path for area chart.
	     * @param {Array.<Array.<{left: number, top: number, startTop: number}>>} groupPositions - positions
	     * @param {boolean} [hasExtraPath] - whether has extra path or not
	     * @param {boolean} [connectNulls] - boolean value connect nulls or not
	     * @returns {*}
	     * @private
	     */
	    _getAreaChartPath: function(groupPositions, hasExtraPath, connectNulls) {
	        var path;

	        if (this.isSpline) {
	            path = this._makeSplineAreaChartPath(groupPositions, hasExtraPath);
	        } else {
	            path = this._makeAreaChartPath(groupPositions, hasExtraPath, connectNulls);
	        }

	        return path;
	    },

	    /**
	     * Render area graphs.
	     * @param {object} paper paper
	     * @param {Array.<object>} groupPaths group paths
	     * @param {Array.<string>} colors colors
	     * @param {number} lineWidth line width
	     * @param {number} opacity opacity
	     * @returns {Array} raphael objects
	     * @private
	     */
	    _renderAreas: function(paper, groupPaths, colors, lineWidth, opacity) {
	        var groupAreas;

	        colors = colors.slice(0, groupPaths.length);
	        colors.reverse();
	        groupPaths.reverse();

	        groupAreas = snippet.map(groupPaths, function(path, groupIndex) {
	            var polygons = {};
	            var areaColor = colors[groupIndex] || 'transparent';
	            var lineColor = areaColor;
	            var area = raphaelRenderUtil.renderArea(paper, path.area.join(' '), {
	                fill: areaColor,
	                opacity: opacity,
	                stroke: areaColor
	            });
	            var line = raphaelRenderUtil.renderLine(paper, path.line.join(' '), lineColor, lineWidth);

	            area.node.setAttribute('class', CLASS_NAME_SVG_AUTOSHAPE);
	            line.node.setAttribute('class', CLASS_NAME_SVG_AUTOSHAPE);

	            polygons.area = area;
	            polygons.line = line;

	            if (path.startLine) {
	                polygons.startLine = raphaelRenderUtil.renderLine(paper, path.startLine.join(' '), lineColor, 0);
	            }

	            return polygons;
	        });

	        return groupAreas.reverse();
	    },

	    /**
	     * Make height.
	     * @param {number} top top
	     * @param {number} startTop start top
	     * @returns {number} height
	     * @private
	     */
	    _makeHeight: function(top, startTop) {
	        return Math.abs(top - startTop);
	    },

	    /**
	     * Make areas path.
	     * @param {Array.<{left: number, top: number, startTop: number}>} positions positions
	     * @param {boolean} [hasExtraPath] - whether has extra path or not
	     * @returns {Array.<string | number>} path
	     * @private
	     */
	    _makeAreasPath: function(positions, hasExtraPath) {
	        var path = [];
	        var paths = [];
	        var prevNull = false;
	        var positionLength = positions.length;
	        var targetIndex;
	        var formerPath = [];
	        var latterPath = [];

	        snippet.forEachArray(positions, function(position, index) {
	            var moveOrLine;
	            if (position) {
	                if (prevNull) {
	                    moveOrLine = 'M';
	                    prevNull = false;
	                } else {
	                    moveOrLine = 'L';
	                }

	                formerPath.push([moveOrLine, position.left, position.top]);
	                latterPath.unshift(['L', position.left, position.startTop]);
	            } else {
	                prevNull = true;
	                latterPath.push(['z']);
	            }

	            if (!position || index === positionLength - 1) {
	                paths.push(formerPath.concat(latterPath));
	                formerPath = [];
	                latterPath = [];
	            }
	        });

	        snippet.forEachArray(paths, function(partialPath) {
	            path = path.concat(partialPath);
	        });

	        if (hasExtraPath !== false) {
	            targetIndex = positions.length - 1;
	            path.splice(targetIndex + 1, 0, path[targetIndex], path[targetIndex + 1]);
	        }

	        path = concat.apply([], path);
	        path[0] = 'M';

	        return path;
	    },

	    /**
	     * Make path for area chart.
	     * @param {Array.<Array.<{left: number, top: number, startTop: number}>>} groupPositions positions
	     * @param {boolean} [hasExtraPath] - whether has extra path or not
	     * @param {boolean} [connectNulls] - boolean value connect nulls or not
	     * @returns {Array.<{area: Array.<string | number>, line: Array.<string | number>}>} path
	     * @private
	     */
	    _makeAreaChartPath: function(groupPositions, hasExtraPath, connectNulls) {
	        var self = this;

	        return snippet.map(groupPositions, function(positions) {
	            var paths;

	            paths = {
	                area: self._makeAreasPath(positions, hasExtraPath),
	                line: self._makeLinesPath(positions, null, connectNulls)
	            };

	            if (self.hasRangeData) {
	                paths.startLine = self._makeLinesPath(positions, 'startTop');
	            }

	            return paths;
	        });
	    },

	    /**
	     * Make spline area bottom path.
	     * @param {Array.<{left: number, top: number}>} positions positions
	     * @returns {Array.<string | number>} spline area path
	     * @private
	     */
	    _makeSplineAreaBottomPath: function(positions) {
	        var self = this;

	        return snippet.map(positions, function(position) {
	            return ['L', position.left, self.zeroTop];
	        }).reverse();
	    },

	    /**
	     * Make spline path for area chart.
	     * @param {Array.<Array.<{left: number, top: number, startTop: number}>>} groupPositions positions
	     * @param {boolean} [hasExtraPath] - whether has extra path or not
	     * @returns {Array.<{area: Array.<string | number>, line: Array.<string | number>}>} path
	     * @private
	     */
	    _makeSplineAreaChartPath: function(groupPositions, hasExtraPath) {
	        var self = this;

	        return snippet.map(groupPositions, function(positions) {
	            var linesPath = self._makeSplineLinesPath(positions);
	            var areaPath = JSON.parse(JSON.stringify(linesPath));
	            var areasBottomPath = self._makeSplineAreaBottomPath(positions);
	            var lastPosition;

	            if (hasExtraPath !== false) {
	                lastPosition = positions[positions.length - 1];
	                areaPath.push(['L', lastPosition.left, lastPosition.top]);
	                areasBottomPath.unshift(['L', lastPosition.left, self.zeroTop]);
	            }

	            return {
	                area: areaPath.concat(areasBottomPath),
	                line: linesPath
	            };
	        });
	    },

	    /**
	     * Resize graph of area chart.
	     * @param {object} params parameters
	     *      @param {{width: number, height:number}} params.dimension dimension
	     *      @param {Array.<Array.<{left:number, top:number}>>} params.groupPositions group positions
	     */
	    resize: function(params) {
	        var self = this,
	            dimension = params.dimension,
	            groupPositions = params.groupPositions;

	        this.resizeClipRect(dimension.width, dimension.height);

	        this.zeroTop = params.zeroTop;
	        this.groupPositions = groupPositions;
	        this.groupPaths = this._getAreaChartPath(groupPositions);
	        this.paper.setSize(dimension.width, dimension.height);
	        this.tooltipLine.attr({top: dimension.height});

	        snippet.forEachArray(this.groupPaths, function(path, groupIndex) {
	            var area = self.groupAreas[groupIndex];
	            area.area.attr({path: path.area.join(' ')});
	            area.line.attr({path: path.line.join(' ')});

	            if (area.startLine) {
	                area.startLine.attr({path: path.startLine.join(' ')});
	            }

	            snippet.forEachArray(self.groupDots[groupIndex], function(item, index) {
	                var position = groupPositions[groupIndex][index];
	                var startPositon;

	                if (item.endDot) {
	                    self._moveDot(item.endDot.dot, position);
	                }
	                if (item.startDot) {
	                    startPositon = snippet.extend({}, position);
	                    startPositon.top = startPositon.startTop;
	                    self._moveDot(item.startDot.dot, startPositon);
	                }
	            });
	        });
	    },

	    /**
	     * Select legend.
	     * @param {?number} legendIndex legend index
	     */
	    selectLegend: function(legendIndex) {
	        var noneSelected = snippet.isNull(legendIndex);

	        if (this.selectedLegendIndex && this.selectedLegendIndex !== -1) {
	            this.resetSeriesOrder(this.selectedLegendIndex);
	        }

	        this.selectedLegendIndex = legendIndex;

	        snippet.forEachArray(this.groupAreas, function(area, groupIndex) {
	            var isSelectedLegend = legendIndex === groupIndex;
	            var opacity = (noneSelected || isSelectedLegend) ? EMPHASIS_OPACITY : DE_EMPHASIS_OPACITY;
	            var groupDots = this.groupDots[groupIndex];

	            area.area.attr({'fill-opacity': opacity});
	            area.line.attr({'stroke-opacity': opacity});

	            if (area.startLine) {
	                area.startLine.attr({'stroke-opacity': opacity});
	            }

	            if (isSelectedLegend) {
	                this.moveSeriesToFront(area, groupDots);
	            }
	        }, this);
	    },

	    /**
	     * Reset series order after selected to be same to when it is first rendered
	     * @param {number} legendIndex - legend index to reset series order
	     * @ignore
	     */
	    resetSeriesOrder: function(legendIndex) {
	        var frontSeries = ((legendIndex + 1) < this.groupAreas.length) ? this.groupAreas[legendIndex + 1] : null;
	        var frontArea;

	        if (frontSeries) {
	            frontArea = frontSeries.area;
	            this.groupAreas[legendIndex].area.insertBefore(frontArea);
	            this.groupAreas[legendIndex].line.insertBefore(frontArea);
	            snippet.forEachArray(this.groupDots[legendIndex], function(item) {
	                if (item && item.endDot) {
	                    item.endDot.dot.insertBefore(frontArea);
	                }
	            });
	        }
	    },

	    /**
	     * @param {{area: {SVGElement}, line: {SVGElement}, startLine: {SVGElement}}} areaSurface - line or plane to represent area chart
	     * @param {Array.<SVGElement>} dots - dot type element
	     * @ignore
	     * @override
	     */
	    moveSeriesToFront: function(areaSurface, dots) {
	        areaSurface.line.toFront();
	        areaSurface.area.toFront();
	        if (areaSurface.startLine) {
	            areaSurface.startLine.toFront();
	        }

	        snippet.forEachArray(dots, function(item) {
	            item.endDot.dot.toFront();
	            if (item.startDot) {
	                item.startDot.dot.toFront();
	            }
	        });
	    },

	    /**
	     * Animate for adding data.
	     * @param {object} data - data for graph rendering
	     * @param {number} tickSize - tick size
	     * @param {Array.<Array.<object>>} groupPositions - group positions
	     * @param {boolean} [shiftingOption] - shifting option
	     * @param {number} zeroTop - position top value for zero point
	     */
	    animateForAddingData: function(data, tickSize, groupPositions, shiftingOption, zeroTop) {
	        var self = this;
	        var groupPaths = this._getAreaChartPath(groupPositions, false);
	        var additionalIndex = 0;

	        if (!groupPositions.length) {
	            return;
	        }

	        if (shiftingOption) {
	            additionalIndex = 1;
	        }

	        this.zeroTop = zeroTop;

	        snippet.forEachArray(this.groupAreas, function(area, groupIndex) {
	            var dots = self.groupDots[groupIndex];
	            var groupPosition = groupPositions[groupIndex];
	            var pathMap = groupPaths[groupIndex];

	            if (shiftingOption) {
	                self._removeFirstDot(dots);
	            }

	            snippet.forEachArray(dots, function(item, index) {
	                var position = groupPosition[index + additionalIndex];
	                self._animateByPosition(item.endDot.dot, position, tickSize);

	                if (item.startDot) {
	                    self._animateByPosition(item.startDot.dot, {
	                        left: position.left,
	                        top: position.startTop
	                    }, tickSize);
	                }
	            });

	            self._animateByPath(area.area, pathMap.area, tickSize);
	            self._animateByPath(area.line, pathMap.line, tickSize);

	            if (area.startLine) {
	                self._animateByPath(area.startLine, pathMap.startLine, tickSize);
	            }
	        });
	    },

	    renderSeriesLabel: function(paper, groupPositions, groupLabels, labelTheme) {
	        var attributes = {
	            'font-size': labelTheme.fontSize,
	            'font-family': labelTheme.fontFamily,
	            'font-weight': labelTheme.fontWeight,
	            fill: labelTheme.color,
	            'text-anchor': 'middle',
	            opacity: 0
	        };
	        var set = paper.set();

	        snippet.forEach(groupLabels, function(categoryLabel, categoryIndex) {
	            snippet.forEach(categoryLabel, function(label, seriesIndex) {
	                var position = groupPositions[categoryIndex][seriesIndex];
	                var endLabel = raphaelRenderUtil.renderText(paper, position.end, label.end, attributes);
	                var startLabel;

	                set.push(endLabel);

	                endLabel.node.style.userSelect = 'none';
	                endLabel.node.style.cursor = 'default';
	                endLabel.node.setAttribute('filter', 'url(#glow)');

	                if (position.start) {
	                    startLabel = raphaelRenderUtil.renderText(paper, position.start, label.start, attributes);

	                    startLabel.node.style.userSelect = 'none';
	                    startLabel.node.style.cursor = 'default';
	                    startLabel.node.setAttribute('filter', 'url(#glow)');

	                    set.push(startLabel);
	                }
	            });
	        });

	        return set;
	    },

	    /**
	     * Test areaOpacity is a number, and return the result.
	     * It is used to determine whether to set a default value, 0.5.
	     * If it is not a number, areaOpacity will be changed to the default value, 0.5.
	     * @param {*} areaOpacity - value of property `options.areaOpacity`
	     * @returns {boolean} - whether areaOpacity is a number.
	     * @private
	     */
	    _isAreaOpacityNumber: function(areaOpacity) {
	        var isNumber = snippet.isNumber(areaOpacity);

	        if (isNumber) {
	            if (areaOpacity < 0 || areaOpacity > 1) {
	                consoleUtil.print(GUIDE_AREACHART_AREAOPACITY_TYPE, 'warn');
	            }
	        } else if (!snippet.isUndefined(areaOpacity)) {
	            consoleUtil.print(GUIDE_AREACHART_AREAOPACITY_TYPE, 'error');
	        }

	        return isNumber;
	    }
	});

	module.exports = RaphaelAreaChart;


/***/ }),
/* 16 */
/***/ (function(module, exports) {

	/**
	 * @fileoverview util for console
	 * @author NHN Ent.
	 *         FE Development Lab <dl_javascript@nhnent.com>
	 */

	'use strict';

	module.exports = {
	    /**
	     * check if window.console exists
	     * @param {string} message - message
	     * @param {string} status - print function of window.console
	     */
	    print: function(message, status) {
	        status = status || 'log';

	        if (window.console) {
	            window.console[status](message);
	        }
	    }
	};


/***/ }),
/* 17 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileoverview RaphaelPieCharts is graph renderer for pie chart.
	 * @author NHN Ent.
	 *         FE Development Lab <dl_javascript@nhnent.com>
	 */

	'use strict';

	var raphaelRenderUtil = __webpack_require__(5);
	var snippet = __webpack_require__(6);
	var raphael = __webpack_require__(3);

	var DEGREE_180 = 180;
	var DEGREE_360 = 360;
	var MIN_DEGREE = 0.01;
	var RAD = Math.PI / DEGREE_180;
	var LOADING_ANIMATION_DURATION = 700;
	var EMPHASIS_OPACITY = 1;
	var DE_EMPHASIS_OPACITY = 0.3;
	var DEFAULT_LUMINANT_VALUE = 0.2;
	var OVERLAY_ID = 'overlay';
	var TOOLTIP_OFFSET_VALUE = 20;

	/**
	 * @classdesc RaphaelPieCharts is graph renderer for pie chart.
	 * @class RaphaelPieChart
	 * @private
	 */
	var RaphaelPieChart = snippet.defineClass(/** @lends RaphaelPieChart.prototype */ {
	    /**
	     * Render function of pie chart.
	     * @param {object} paper Raphael paper
	     * @param {{
	     *      sectorData: Array.<object>,
	     *      circleBound: {cx: number, cy: number, r: number},
	     *      dimension: object, theme: object, options: object
	     * }} data render data
	     * @param {object} callbacks callbacks
	     *      @param {function} callbacks.showTooltip show tooltip function
	     *      @param {function} callbacks.hideTooltip hide tooltip function
	     * @returns {object} paper raphael paper
	     */
	    render: function(paper, data, callbacks) {
	        var pieSeriesSet = paper.set();

	        /**
	         * raphael object
	         * @type {object}
	         */
	        this.paper = paper;

	        /**
	         * ratio for hole
	         * @type {number}
	         */
	        this.holeRatio = data.options.radiusRange[0];

	        /**
	         * base background
	         * @type {string}
	         */
	        this.chartBackground = data.chartBackground;

	        /**
	         * type of chart
	         * @type {string}
	         */
	        this.chartType = data.chartType;

	        /**
	         * functions for tooltip control
	         * @type {{showTooltip: Function, hideTooltip: Function}}
	         */
	        this.callbacks = callbacks;

	        /**
	         * color for selection
	         * @type {string}
	         */
	        this.selectionColor = data.theme.selectionColor;

	        /**
	         * bound for circle
	         * @type {{cx: number, cy: number, r: number}}
	         */
	        this.circleBound = data.circleBound;

	        /**
	         * sector attr's name for draw graph
	         * @type {string}
	         */
	        this.sectorName = 'sector_' + this.chartType;

	        this._setSectorAttr();

	        this.sectorInfos = this._renderPie(data.sectorData, data.theme.colors, data.additionalIndex, pieSeriesSet);

	        this.overlay = this._renderOverlay();

	        this.labelInfos = {
	            value: [],
	            legend: []
	        };

	        /**
	         * previous mouse position
	         * @type {{left: number, top: number}}
	         */
	        this.prevPosition = null;

	        /**
	         * previous hover sector
	         * @type {object}
	         */
	        this.prevHoverSector = null;

	        return pieSeriesSet;
	    },

	    /**
	     * Clear paper.
	     */
	    clear: function() {
	        this.paper.clear();
	    },

	    /**
	     * Make sector path.
	     * @param {number} cx center x
	     * @param {number} cy center y
	     * @param {number} r radius
	     * @param {number} startAngle start angle
	     * @param {number} endAngle end angel
	     * @returns {{path: Array}} sector path
	     * @private
	     */
	    _makeSectorPath: function(cx, cy, r, startAngle, endAngle) {
	        var startRadian = startAngle * RAD;
	        var endRadian = endAngle * RAD;
	        var x1 = cx + (r * Math.sin(startRadian)); // x point of start radian
	        var y1 = cy - (r * Math.cos(startRadian)); // y posint of start radian
	        var x2 = cx + (r * Math.sin(endRadian)); // x point of end radian
	        var y2 = cy - (r * Math.cos(endRadian)); // y point of end radian
	        var largeArcFlag = endAngle - startAngle > DEGREE_180 ? 1 : 0;
	        var path = ['M', cx, cy,
	            'L', x1, y1,
	            'A', r, r, 0, largeArcFlag, 1, x2, y2,
	            'Z'];

	        // see details about path
	        // http://www.w3schools.com/svg/svg_path.asp
	        // https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/d
	        return {path: path};
	    },

	    /**
	     * Make sector path for donut chart.
	     * @param {number} cx - center x
	     * @param {number} cy - center y
	     * @param {number} r - radius
	     * @param {number} startAngle - start angle
	     * @param {number} endAngle - end angel
	     * @param {number} [holeRadius] - hole radius
	     * @returns {{path: Array}} sector path
	     * @private
	     */
	    _makeDonutSectorPath: function(cx, cy, r, startAngle, endAngle, holeRadius) {
	        /* eslint max-params: [2, 6]*/
	        var startRadian = startAngle * RAD;
	        var endRadian = endAngle * RAD;
	        var r2 = holeRadius || (r * this.holeRatio); // radius of donut hole
	        var x1 = cx + (r * Math.sin(startRadian));
	        var y1 = cy - (r * Math.cos(startRadian));
	        var x2 = cx + (r2 * Math.sin(startRadian));
	        var y2 = cy - (r2 * Math.cos(startRadian));
	        var x3 = cx + (r * Math.sin(endRadian));
	        var y3 = cy - (r * Math.cos(endRadian));
	        var x4 = cx + (r2 * Math.sin(endRadian));
	        var y4 = cy - (r2 * Math.cos(endRadian));
	        var largeArcFlag = endAngle - startAngle > DEGREE_180 ? 1 : 0;
	        var path = [
	            'M', x1, y1,
	            'A', r, r, 0, largeArcFlag, 1, x3, y3,
	            'L', x4, y4,
	            'A', r2, r2, 0, largeArcFlag, 0, x2, y2,
	            'Z'
	        ];

	        return {path: path};
	    },

	    /**
	     * Set sector attribute for raphael paper.
	     * @private
	     */
	    _setSectorAttr: function() {
	        var makeSectorPath;

	        if (this.paper.customAttributes[this.sectorName]) {
	            return;
	        }

	        if (this.holeRatio) {
	            makeSectorPath = this._makeDonutSectorPath;
	        } else {
	            makeSectorPath = this._makeSectorPath;
	        }

	        this.paper.customAttributes[this.sectorName] = snippet.bind(makeSectorPath, this);
	    },

	    /**
	     * Render overlay.
	     * @returns {object} raphael object
	     * @private
	     */
	    _renderOverlay: function() {
	        var params = {
	            paper: this.paper,
	            circleBound: {
	                cx: 0,
	                cy: 0,
	                r: 0
	            },
	            angles: {
	                startAngle: 0,
	                endAngle: 0
	            },
	            attrs: {
	                fill: 'none',
	                opacity: 0,
	                stroke: this.chartBackground.color,
	                'stroke-width': 1
	            }
	        };
	        var inner = this._renderSector(params);

	        inner.node.setAttribute('class', 'auto-shape-rendering');

	        inner.data('id', OVERLAY_ID);
	        inner.data('chartType', this.chartType);

	        return inner;
	    },

	    /**
	     * Render sector
	     * @param {object} params parameters
	     *      @param {object} params.paper raphael paper
	     *      @param {{cx: number, cy: number, r:number}} params.circleBound circle bounds
	     *      @param {number} params.startAngle start angle
	     *      @param {number} params.endAngle end angle
	     *      @param {{object}} params.attrs attributes
	     * @returns {object} raphael object
	     * @private
	     */
	    _renderSector: function(params) {
	        var circleBound = params.circleBound;
	        var angles = params.angles;
	        var attrs = params.attrs;

	        attrs[this.sectorName] = [circleBound.cx, circleBound.cy, circleBound.r, angles.startAngle, angles.endAngle];

	        return params.paper.path().attr(attrs);
	    },

	    /**
	     * Render pie graph.
	     * @param {Array.<object>} sectorData - sectorData
	     * @param {Array.<string>} colors - sector colors
	     * @param {number} additionalIndex - additional index for accumulate past pie series's data indexes on pieDonutCombo
	     * @param {Array.<object>} pieSeriesSet - pie series set
	     * @returns {Array.<object>}
	     * @private
	     */
	    _renderPie: function(sectorData, colors, additionalIndex, pieSeriesSet) {
	        var self = this;
	        var circleBound = this.circleBound;
	        var chartBackground = this.chartBackground;
	        var sectorInfos = [];

	        snippet.forEachArray(sectorData, function(sectorDatum, index) {
	            var ratio = sectorDatum.ratio;
	            var color = colors[index];
	            var sector = self._renderSector({
	                paper: self.paper,
	                circleBound: circleBound,
	                angles: sectorDatum.angles.start,
	                attrs: {
	                    fill: chartBackground.color,
	                    stroke: chartBackground.color,
	                    'stroke-width': 0
	                }
	            });

	            sector.node.setAttribute('class', 'auto-shape-rendering');

	            sector.data('index', index);
	            sector.data('legendIndex', index + additionalIndex);
	            sector.data('chartType', self.chartType);

	            sectorInfos.push({
	                sector: sector,
	                color: color,
	                angles: sectorDatum.angles.end,
	                ratio: ratio
	            });

	            pieSeriesSet.push(sector);
	        });

	        return sectorInfos;
	    },

	    /**
	     * Show overlay.
	     * @param {number} index - index
	     * @param {number} legendIndex - legend index
	     * @private
	     */
	    _showOverlay: function(index, legendIndex) {
	        var overlay = this.overlay;
	        var sectorInfo = this.sectorInfos[index];
	        var sa = sectorInfo.angles.startAngle;
	        var ea = sectorInfo.angles.endAngle;
	        var cb = this.circleBound;
	        var innerAttrs;

	        innerAttrs = {
	            fill: '#fff',
	            opacity: 1,
	            'stroke-width': 7,
	            'stroke-color': '#fff',
	            'stroke-miterlimit': 15
	        };

	        innerAttrs[this.sectorName] = [cb.cx, cb.cy, cb.r, sa, ea, cb.r * this.holeRatio];
	        overlay.attr(innerAttrs);
	        overlay.data('index', index);
	        overlay.data('legendIndex', legendIndex);

	        overlay.node.setAttribute('filter', 'url(#shadow)');

	        this._indexingOverlapElement([
	            overlay,
	            sectorInfo.sector,
	            this.labelInfos.legend[index],
	            this.labelInfos.value[index]
	        ]);
	    },

	    /**
	     * Element indexing For overlay.
	     * @param {Array} elements - indexing elements
	     * @private
	     */
	    _indexingOverlapElement: function(elements) {
	        snippet.forEach(elements, function(element) {
	            if (element) {
	                element.toFront();
	            }
	        });
	    },

	    /**
	     * Hide overlay.
	     * @private
	     */
	    _hideOverlay: function() {
	        var overlay = this.overlay;
	        var attrs = {
	            fill: 'none',
	            opacity: 0
	        };

	        overlay.attr(attrs);

	        this._indexingOverlapElement(this.labelInfos.legend);
	        this._indexingOverlapElement(this.labelInfos.value);
	    },

	    /**
	     * Animate.
	     * @param {function} callback callback
	     */
	    animate: function(callback) {
	        var delayTime = 0;
	        var sectorName = this.sectorName;
	        var circleBound = this.circleBound;
	        var sectorArgs = [circleBound.cx, circleBound.cy, circleBound.r];

	        snippet.forEachArray(this.sectorInfos, function(sectorInfo) {
	            var angles = sectorInfo.angles;
	            var attrMap = {
	                fill: sectorInfo.color
	            };
	            var animationTime = LOADING_ANIMATION_DURATION * sectorInfo.ratio;
	            var anim;

	            if ((angles.startAngle === 0) && (angles.endAngle === DEGREE_360)) {
	                angles.endAngle = DEGREE_360 - MIN_DEGREE;
	            }

	            attrMap[sectorName] = sectorArgs.concat([angles.startAngle, angles.endAngle]);
	            anim = raphael.animation(attrMap, animationTime, '>');
	            sectorInfo.sector.animate(anim.delay(delayTime));
	            delayTime += animationTime;
	        });

	        if (callback) {
	            setTimeout(callback, delayTime);
	        }
	    },

	    /**
	     * Animate legend lines.
	     * @param {?number} legendIndex legend index
	     */

	    /**
	     * Resize graph of pie chart.
	     * @param {object} params parameters
	     *      @param {{width: number, height:number}} params.dimension dimension
	     *      @param {{cx:number, cy:number, r: number}} params.circleBound circle bound
	     */
	    resize: function(params) {
	        var dimension = params.dimension;
	        var circleBound = params.circleBound;
	        var sectorName = this.sectorName;
	        var labelSet = this.labelSet;

	        this.circleBound = circleBound;
	        this.paper.setSize(dimension.width, dimension.height);

	        snippet.forEachArray(this.sectorInfos, function(sectorInfo, index) {
	            var angles = sectorInfo.angles;
	            var attrs = {};
	            var bBox;

	            attrs[sectorName] = [circleBound.cx, circleBound.cy, circleBound.r, angles.startAngle, angles.endAngle];
	            sectorInfo.sector.attr(attrs);

	            if (labelSet && labelSet.length) {
	                bBox = sectorInfo.sector.getBBox();

	                labelSet[index].attr({
	                    x: bBox.x + (bBox.width / 2),
	                    y: bBox.y + (bBox.height / 2)
	                });
	            }
	        });
	    },

	    findSectorInfo: function(position) {
	        var sector = this.paper && this.paper.getElementByPoint(position.left, position.top);
	        var info = null;

	        if (sector) {
	            info = {
	                legendIndex: snippet.isExisty(sector.data('legendIndex')) ? sector.data('legendIndex') : -1,
	                index: snippet.isExisty(sector.data('index')) ? sector.data('index') : -1,
	                chartType: sector.data('chartType')
	            };
	        }

	        return info;
	    },

	    /**
	     * Whether changed or not.
	     * @param {{left: number, top: number}} prevPosition previous position
	     * @param {{left: number, top: number}} position position
	     * @returns {boolean} result boolean
	     * @private
	     */
	    _isChangedPosition: function(prevPosition, position) {
	        return !prevPosition || prevPosition.left !== position.left || prevPosition.top !== position.top;
	    },

	    /**
	     * Show tooltip.
	     * @param {object} sector - raphael object
	     * @param {{left: number, top: number}} position - mouse position
	     * @private
	     */
	    _showTooltip: function(sector, position) {
	        var args = [{}, 0, sector.data('index'), {
	            left: position.left - TOOLTIP_OFFSET_VALUE,
	            top: position.top - TOOLTIP_OFFSET_VALUE
	        }];

	        this.callbacks.showTooltip.apply(null, args);
	    },

	    /**
	     * Whether valid sector or not.
	     * @param {object} sector - raphael object
	     * @returns {boolean}
	     * @private
	     */
	    _isValidSector: function(sector) {
	        return sector && sector.data('chartType') === this.chartType;
	    },

	    /**
	     * Move mouse on series.
	     * @param {{left: number, top: number}} position mouse position
	     */
	    moveMouseOnSeries: function(position) {
	        var sector = this.paper && this.paper.getElementByPoint(position.left, position.top);

	        if (this._isValidSector(sector)) {
	            if (this.prevHoverSector !== sector) {
	                this._showOverlay(sector.data('index'), sector.data('legendIndex'));
	                this.prevHoverSector = sector;
	            }

	            if (this._isChangedPosition(this.prevPosition, position)) {
	                this._showTooltip(sector, position);
	            }
	        } else if (this.prevHoverSector) {
	            this._hideOverlay();
	            this.callbacks.hideTooltip();
	            this.prevHoverSector = null;
	        }

	        this.prevPosition = position;
	    },

	    /**
	     * Select series.
	     * @param {{index: number}} indexes - index map
	     */
	    selectSeries: function(indexes) {
	        var sectorInfo = this.sectorInfos[indexes.index];
	        var luminanceColor, objColor, color;

	        if (!sectorInfo) {
	            return;
	        }

	        objColor = raphael.color(sectorInfo.color);
	        luminanceColor = raphaelRenderUtil.makeChangedLuminanceColor(objColor.hex, DEFAULT_LUMINANT_VALUE);

	        color = this.selectionColor || luminanceColor;

	        sectorInfo.sector.attr({
	            fill: color
	        });
	    },

	    /**
	     * Unelect series.
	     * @param {{index: number}} indexes - index map
	     */
	    unselectSeries: function(indexes) {
	        var sectorInfo = this.sectorInfos[indexes.index];

	        if (!sectorInfo) {
	            return;
	        }

	        sectorInfo.sector.attr({
	            fill: sectorInfo.color
	        });
	    },

	    /**
	     * Select legend.
	     * @param {?number} legendIndex legend index
	     */
	    selectLegend: function(legendIndex) {
	        var isNull = snippet.isNull(legendIndex);
	        snippet.forEachArray(this.sectorInfos, function(sectorInfo, index) {
	            var opacity = (isNull || legendIndex === index) ? EMPHASIS_OPACITY : DE_EMPHASIS_OPACITY;

	            sectorInfo.sector.attr({
	                'fill-opacity': opacity
	            });
	        });
	    },
	    /**
	     * Get rendered label width
	     * @param {string} text - text content
	     * @param {object} theme - label theme
	     * @returns {number}
	     */
	    getRenderedLabelWidth: function(text, theme) {
	        return raphaelRenderUtil.getRenderedTextSize(text, theme.fontSize, theme.fontFamily).width;
	    },

	    /**
	     * Get rendered label height
	     * @param {string} text - text content
	     * @param {object} theme - label theme
	     * @returns {number}
	     */
	    getRenderedLabelHeight: function(text, theme) {
	        return raphaelRenderUtil.getRenderedTextSize(text, theme.fontSize, theme.fontFamily).height;
	    },

	    /**
	     * Render labels and return label set
	     * @param {object} options label render options
	     *      @param {dataType} dataType dataType (legend or value)
	     *      @param {object} paper Raphael paper
	     *      @param {Array.<object>} labelSet lableset
	     *      @param {object} positions position left, top
	     *      @param {Array.<string>} labels series labels
	     *      @param {object} theme label theme
	     *      @param {Array} colors series theme colors
	     */
	    renderLabels: function(options) {
	        var theme = options.theme;
	        var attributes = {
	            'font-size': theme.fontSize,
	            'font-family': (options.fontFamily) ? options.fontFamily : options.theme.fontFamily,
	            'font-weight': theme.fontWeight,
	            'text-anchor': 'middle',
	            fill: theme.color || '#fff',
	            opacity: 0
	        };

	        snippet.forEach(options.positions, function(position, index) {
	            var label;

	            if (options.colors) {
	                attributes.fill = options.colors[index];
	            }

	            if (position) {
	                label = raphaelRenderUtil.renderText(options.paper, position, options.labels[index], attributes);
	                label.node.style.userSelect = 'none';
	                label.node.style.cursor = 'default';
	                label.node.setAttribute('class', 'auto-shape-rendering');
	            }

	            this.labelInfos[options.dataType].push(label);
	            options.labelSet.push(label);
	        }, this);

	        if (!this.labelSet) {
	            this.labelSet = options.labelSet;
	        }
	    }
	});

	module.exports = RaphaelPieChart;


/***/ }),
/* 18 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileoverview Raphael radial line series renderer.
	 * @author NHN Ent.
	 *         FE Development Lab <dl_javascript@nhnent.com>
	 */

	'use strict';

	var RaphaelLineTypeBase = __webpack_require__(14);
	var raphaelRenderUtil = __webpack_require__(5);
	var snippet = __webpack_require__(6);

	var EMPHASIS_OPACITY = 1;
	var DE_EMPHASIS_OPACITY = 0.3;
	var DEFAULT_LINE_WIDTH = 6;

	var RaphaelRadialLineSeries = snippet.defineClass(RaphaelLineTypeBase, /** @lends RaphaelRadialLineSeries.prototype */{
	    /**
	     * RaphaelLineCharts is graph renderer for line chart.
	     * @constructs RaphaelRadialLineSeries
	     * @extends RaphaelLineTypeBase
	     */
	    init: function() {
	        /**
	         * selected legend index
	         * @type {?number}
	         */
	        this.selectedLegendIndex = null;

	        /**
	         * type of chart
	         * @type {string}
	         */
	        this.chartType = 'radial';

	        /**
	         * Line width
	         * @type {number}
	         */
	        this.lineWidth = DEFAULT_LINE_WIDTH;
	    },

	    /**
	     * Render function of line chart.
	     * @param {object} paper - raphael paper
	     * @param {{groupPositions: Array.<Array>, dimension: object, theme: object, options: object}} data render data
	     * @returns {object} paper raphael paper
	     */
	    render: function(paper, data) {
	        var dimension = data.dimension;
	        var groupPositions = data.groupPositions;
	        var theme = data.theme;
	        var colors = theme.colors;
	        var dotOpacity = data.options.showDot ? 1 : 0;
	        var isShowArea = data.options.showArea;

	        var groupPaths = this._getLinesPath(groupPositions);
	        var borderStyle = this.makeBorderStyle(theme.strokeColor, dotOpacity, theme.strokeWidth);
	        var outDotStyle = this.makeOutDotStyle(dotOpacity, borderStyle);
	        var radialSeriesSet = paper.set();
	        var lineWidth = this.lineWidth = (data.options.pointWidth ? data.options.pointWidth : this.lineWidth);
	        var dotPositions = snippet.map(groupPositions, function(positions) {
	            positions.pop();

	            return positions;
	        });

	        this.paper = paper;
	        this.theme = data.theme;
	        this.dimension = dimension;
	        this.position = data.position;

	        if (isShowArea) {
	            this.groupAreas = this._renderArea(paper, groupPaths, colors, radialSeriesSet);
	        }

	        this.groupLines = this._renderLines(paper, groupPaths, colors, lineWidth, radialSeriesSet);
	        this.groupDots = this._renderDots(paper, dotPositions, colors, dotOpacity, radialSeriesSet);

	        if (data.options.allowSelect) {
	            this.selectionDot = this._makeSelectionDot(paper);
	            this.selectionColor = theme.selectionColor;
	        }

	        this.colors = colors;
	        this.borderStyle = borderStyle;
	        this.outDotStyle = outDotStyle;
	        this.groupPositions = groupPositions;
	        this.groupPaths = groupPaths;
	        this.dotOpacity = dotOpacity;
	        this.isShowArea = isShowArea;

	        return radialSeriesSet;
	    },

	    /**
	     * Get lines path.
	     * @param {Array.<Array.<{left: number, top: number, startTop: number}>>} groupPositions positions
	     * @returns {Array.<Array.<string>>} path
	     * @private
	     */
	    _getLinesPath: function(groupPositions) {
	        var self = this;

	        return snippet.map(groupPositions, function(positions) {
	            return self._makeLinesPath(positions);
	        });
	    },

	    /**
	     * Render lines.
	     * @param {object} paper raphael paper
	     * @param {Array.<Array.<string>>} groupPaths paths
	     * @param {string[]} colors line colors
	     * @param {?number} strokeWidth stroke width
	     * @param {Array.<object>} radialSeriesSet radial line series set
	     * @returns {Array.<Array.<object>>} lines
	     * @private
	     */
	    _renderLines: function(paper, groupPaths, colors, strokeWidth, radialSeriesSet) {
	        return snippet.map(groupPaths, function(path, groupIndex) {
	            var color = colors[groupIndex] || 'transparent';
	            var line = raphaelRenderUtil.renderLine(paper, path.join(' '), color, strokeWidth);

	            radialSeriesSet.push(line);

	            return line;
	        });
	    },

	    /**
	     * Render area.
	     * @param {object} paper raphael paper
	     * @param {Array.<Array.<string>>} groupPaths paths
	     * @param {string[]} colors line colors
	     * @param {Array.<object>} radialSeriesSet radial line series set
	     * @returns {Array.<Array.<object>>} lines
	     * @private
	     */
	    _renderArea: function(paper, groupPaths, colors, radialSeriesSet) {
	        return snippet.map(groupPaths, function(path, groupIndex) {
	            var color = colors[groupIndex] || 'transparent';
	            var area = raphaelRenderUtil.renderArea(paper, path, {
	                fill: color,
	                opacity: 0.4,
	                'stroke-width': this.lineWidth,
	                stroke: color
	            });

	            radialSeriesSet.push(area);

	            return area;
	        }, this);
	    },

	    /**
	     * Resize graph of line chart.
	     * /todo copied at raphaelLineCharts#resize, should remove duplication
	     * tooltipLine code was deleted, as group tooltip not works on radial chart/
	     * @param {object} params parameters
	     *      @param {{width: number, height:number}} params.dimension dimension
	     *      @param {Array.<Array.<{left:number, top:number}>>} params.groupPositions group positions
	     */
	    resize: function(params) {
	        var self = this,
	            dimension = params.dimension,
	            groupPositions = params.groupPositions;

	        this.groupPositions = groupPositions;
	        this.groupPaths = this._getLinesPath(groupPositions);
	        this.paper.setSize(dimension.width, dimension.height);

	        snippet.forEachArray(this.groupPaths, function(path, groupIndex) {
	            self.groupLines[groupIndex].attr({path: path.join(' ')});
	            self.groupAreas[groupIndex].attr({path: path.join(' ')});

	            snippet.forEachArray(self.groupDots[groupIndex], function(item, index) {
	                self._moveDot(item.endDot.dot, groupPositions[groupIndex][index]);
	            });
	        });
	    },

	    /**
	     * Select legend.
	     * /todo copied at raphaelLineCharts, should remove duplication
	     * @param {?number} legendIndex legend index
	     */
	    selectLegend: function(legendIndex) {
	        var noneSelected = snippet.isNull(legendIndex);

	        this.selectedLegendIndex = legendIndex;

	        snippet.forEachArray(this.groupLines, function(line, groupIndex) {
	            var opacity = (noneSelected || legendIndex === groupIndex) ? EMPHASIS_OPACITY : DE_EMPHASIS_OPACITY;

	            line.attr({'stroke-opacity': opacity});
	        });
	    }
	});

	module.exports = RaphaelRadialLineSeries;


/***/ }),
/* 19 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileoverview Raphael bubble chart renderer.
	 * @author NHN Ent.
	 *         FE Development Lab <dl_javascript@nhnent.com>
	 */

	'use strict';

	var raphaelRenderUtil = __webpack_require__(5);
	var snippet = __webpack_require__(6);
	var raphael = __webpack_require__(3);

	var ANIMATION_DURATION = 700;
	var CIRCLE_OPACITY = 0.8;
	var STROKE_OPACITY = 1;
	var EMPHASIS_OPACITY = 0.8;
	var DE_EMPHASIS_OPACITY = 0.3;
	var DEFAULT_LUMINANC = 0.2;
	var OVERLAY_BORDER_WIDTH = 2;
	var TOOLTIP_OFFSET_VALUE = 20;

	/**
	 * bound for circle
	 * @typedef {{left: number, top: number, radius: number}} bound
	 * @private
	 */

	/**
	 * Information for rendered circle
	 * @typedef {{circle: object, color: string, bound: bound}} circleInfo
	 * @private
	 */

	/**
	 * @classdesc RaphaelBubbleChart is graph renderer for bubble chart.
	 * @class RaphaelBubbleChart
	 * @private
	 */
	var RaphaelBubbleChart = snippet.defineClass(/** @lends RaphaelBubbleChart.prototype */ {
	    /**
	     * Render function of bubble chart
	     * @param {object} paper - Raphael paper
	     * @param {{
	     *      dimension: {width: number, height: number},
	     *      seriesDataModel: SeriesDataModel,
	     *      groupBounds: Array.<Array.<bound>>,
	     *      theme: object
	     * }} data - data for rendering
	     * @param {{showTooltip: function, hideTooltip: function}} callbacks - callbacks for toggle of tooltip.
	     * @returns {object}
	     */
	    render: function(paper, data, callbacks) {
	        var circleSet = paper.set();

	        this.paper = paper;

	        /**
	         * theme
	         * @type {object}
	         */
	        this.theme = data.theme;

	        /**
	         * seriesDataModel
	         * @type {SeriesDataModel}
	         */
	        this.seriesDataModel = data.seriesDataModel;

	        /**
	         * group bounds
	         * @type {Array.<Array.<bound>>}
	         */
	        this.groupBounds = data.groupBounds;

	        /**
	         * callbacks for toggle of tooltip.
	         * @type {{showTooltip: Function, hideTooltip: Function}}
	         */
	        this.callbacks = callbacks;

	        /**
	         * overlay is circle object of raphael, that using for mouseover.
	         * @type {object}
	         */
	        this.overlay = this._renderOverlay();

	        /**
	         * two-dimensional array by circleInfo
	         * @type {Array.<Array.<circleInfo>>}
	         */
	        this.groupCircleInfos = this._renderCircles(circleSet);

	        /**
	         * previous selected circle
	         * @type {?object}
	         */
	        this.prevCircle = null;

	        /**
	         * previous over circle
	         * @type {?object}
	         */
	        this.prevOverCircle = null;

	        /**
	         * animation timeout id
	         * @type {?number}
	         */
	        this.animationTimeoutId = null;

	        /**
	         * selected legend
	         * @type {?number}
	         */
	        this.selectedLegend = null;

	        if (this.paper.raphael.svg) {
	            this.appendShadowFilterToDefs();
	        }

	        return circleSet;
	    },

	    /**
	     * Render overlay.
	     * @returns {object}
	     * @private
	     */
	    _renderOverlay: function() {
	        var position = {
	            left: 0,
	            top: 0
	        };
	        var attribute = {
	            fill: 'none',
	            stroke: '#fff',
	            'stroke-opacity': STROKE_OPACITY,
	            'stroke-width': 2
	        };
	        var circle = raphaelRenderUtil.renderCircle(this.paper, position, 0, attribute);

	        return circle;
	    },

	    /**
	     * Render circles.
	     * @param {object} circleSet - circle set
	     * @returns {Array.<Array.<circleInfo>>}
	     * @private
	     */
	    _renderCircles: function(circleSet) {
	        var self = this;
	        var colors = this.theme.colors;

	        return snippet.map(this.groupBounds, function(bounds, groupIndex) {
	            return snippet.map(bounds, function(bound, index) {
	                var circleInfo = null;
	                var color, circle;

	                if (bound) {
	                    color = colors[index];
	                    circle = raphaelRenderUtil.renderCircle(self.paper, bound, 0, {
	                        fill: color,
	                        opacity: 0,
	                        stroke: 'none'
	                    });

	                    circleSet.push(circle);

	                    circle.data('groupIndex', groupIndex);
	                    circle.data('index', index);

	                    circleInfo = {
	                        circle: circle,
	                        color: color,
	                        bound: bound
	                    };
	                }

	                return circleInfo;
	            });
	        });
	    },

	    /**
	     * Animate circle
	     * @param {object} circle - raphael object
	     * @param {number} radius - radius of circle
	     * @private
	     */
	    _animateCircle: function(circle, radius) {
	        circle.animate({
	            r: radius,
	            opacity: CIRCLE_OPACITY
	        }, ANIMATION_DURATION, '>');
	    },

	    /**
	     * Animate.
	     */
	    animate: function() {
	        var self = this;

	        raphaelRenderUtil.forEach2dArray(this.groupCircleInfos, function(circleInfo) {
	            if (!circleInfo) {
	                return;
	            }
	            self._animateCircle(circleInfo.circle, circleInfo.bound.radius);
	        });
	    },

	    /**
	     * Update circle bound
	     * @param {object} circle - raphael object
	     * @param {{left: number, top: number}} bound - bound
	     * @private
	     */
	    _updatePosition: function(circle, bound) {
	        circle.attr({
	            cx: bound.left,
	            cy: bound.top,
	            r: bound.radius
	        });
	    },

	    /**
	     * Resize graph of bubble type chart.
	     * @param {object} params parameters
	     *      @param {{width: number, height:number}} params.dimension - dimension
	     *      @param {Array.<Array.<bound>>} params.groupBounds - group bounds
	     */
	    resize: function(params) {
	        var self = this;
	        var dimension = params.dimension;
	        var groupBounds = params.groupBounds;

	        this.groupBounds = groupBounds;
	        this.paper.setSize(dimension.width, dimension.height);

	        raphaelRenderUtil.forEach2dArray(this.groupCircleInfos, function(circleInfo, groupIndex, index) {
	            var bound = groupBounds[groupIndex][index];
	            if (circleInfo) {
	                circleInfo.bound = bound;
	                self._updatePosition(circleInfo.circle, bound);
	            }
	        });
	    },

	    /**
	     * Find data indexes of rendered circle by position.
	     * @param {{left: number, top: number}} position - mouse position
	     * @returns {{index: number, groupIndex: number}}
	     */
	    findIndexes: function(position) {
	        var circle = this.paper.getElementByPoint(position.left, position.top);
	        var foundIndexes = null;

	        if (circle) {
	            foundIndexes = {
	                index: circle.data('index'),
	                groupIndex: circle.data('groupIndex')
	            };
	        }

	        return foundIndexes;
	    },

	    appendShadowFilterToDefs: function() {
	        var filter = document.createElementNS('http://www.w3.org/2000/svg', 'filter');
	        var feOffset = document.createElementNS('http://www.w3.org/2000/svg', 'feOffset');
	        var feGaussianBlur = document.createElementNS('http://www.w3.org/2000/svg', 'feGaussianBlur');
	        var feBlend = document.createElementNS('http://www.w3.org/2000/svg', 'feBlend');

	        filter.setAttributeNS(null, 'id', 'shadow');
	        filter.setAttributeNS(null, 'x', '-50%');
	        filter.setAttributeNS(null, 'y', '-50%');
	        filter.setAttributeNS(null, 'width', '180%');
	        filter.setAttributeNS(null, 'height', '180%');
	        feOffset.setAttributeNS(null, 'result', 'offOut');
	        feOffset.setAttributeNS(null, 'in', 'SourceAlpha');
	        feOffset.setAttributeNS(null, 'dx', '0');
	        feOffset.setAttributeNS(null, 'dy', '0');
	        feGaussianBlur.setAttributeNS(null, 'result', 'blurOut');
	        feGaussianBlur.setAttributeNS(null, 'in', 'offOut');
	        feGaussianBlur.setAttributeNS(null, 'stdDeviation', '2');
	        feBlend.setAttributeNS(null, 'in', 'SourceGraphic');
	        feBlend.setAttributeNS(null, 'in2', 'blurOut');
	        feBlend.setAttributeNS(null, 'mode', 'normal');
	        filter.appendChild(feOffset);
	        filter.appendChild(feGaussianBlur);
	        filter.appendChild(feBlend);
	        this.paper.defs.appendChild(filter);
	    },

	    /**
	     * Whether changed or not.
	     * @param {{left: number, top: number}} prevPosition - previous position
	     * @param {{left: number, top: number}} position - position
	     * @returns {boolean} result boolean
	     * @private
	     */
	    _isChangedPosition: function(prevPosition, position) {
	        return !prevPosition || prevPosition.left !== position.left || prevPosition.top !== position.top;
	    },

	    /**
	     * Show overlay with animation.
	     * @param {object} indexes - indexes
	     *      @param {number} indexes.groupIndex - index of circles group
	     *      @param {number} indexes.index - index of circles
	     */
	    showAnimation: function(indexes) {
	        var circleInfo = this.groupCircleInfos[indexes.groupIndex][indexes.index];
	        var bound = circleInfo.bound;
	        this.circle = circleInfo.circle;

	        this.overlay.attr({
	            fill: circleInfo.color,
	            cx: bound.left,
	            cy: bound.top,
	            r: bound.radius + OVERLAY_BORDER_WIDTH,
	            stroke: '#fff',
	            opacity: 1
	        });

	        this.circle.attr({
	            opacity: 1
	        });

	        this.overlay.node.setAttribute('filter', 'url(#shadow)');
	        this.overlay.toFront();
	        this.circle.toFront();
	    },

	    /**
	     * Hide overlay with animation.
	     * @param {object} indexes - indexes
	     *      @param {number} indexes.groupIndex - index of circles group
	     *      @param {number} indexes.index - index of circles
	     */
	    hideAnimation: function(indexes) {
	        var changeOpacity = DE_EMPHASIS_OPACITY;
	        this.overlay.attr({
	            cx: 0,
	            cy: 0,
	            r: 0,
	            opacity: 0
	        });

	        if (snippet.isNull(this.selectedLegend) || indexes.index === this.selectedLegend) {
	            changeOpacity = EMPHASIS_OPACITY;
	        }

	        this.circle.attr({
	            opacity: changeOpacity
	        });
	    },

	    /**
	     * Find circle.
	     * @param {{left: number, top: number}} position - position
	     * @returns {?object}
	     * @private
	     */
	    _findCircle: function(position) {
	        var circles = [];
	        var paper = this.paper;
	        var foundCircle, circle;

	        while (snippet.isUndefined(foundCircle)) {
	            circle = paper.getElementByPoint(position.left, position.top);

	            if (circle) {
	                if (circle.attrs.opacity > DE_EMPHASIS_OPACITY) {
	                    foundCircle = circle;
	                } else {
	                    circles.push(circle);
	                    circle.hide();
	                }
	            } else {
	                foundCircle = null;
	            }
	        }

	        if (!foundCircle) {
	            foundCircle = circles[0];
	        }

	        snippet.forEachArray(circles, function(_circle) {
	            _circle.show();
	        });

	        return foundCircle;
	    },

	    /**
	     * Move mouse on series.
	     * @param {{left: number, top: number}} position - mouse position
	     */
	    moveMouseOnSeries: function(position) {
	        var circle = this._findCircle(position);
	        var groupIndex, index, args;

	        if (circle && snippet.isExisty(circle.data('groupIndex'))) {
	            groupIndex = circle.data('groupIndex');
	            index = circle.data('index');
	            args = [{}, groupIndex, index, {
	                left: position.left - TOOLTIP_OFFSET_VALUE,
	                top: position.top - TOOLTIP_OFFSET_VALUE
	            }];

	            if (this._isChangedPosition(this.prevPosition, position)) {
	                this.callbacks.showTooltip.apply(null, args);
	                this.prevOverCircle = circle;
	            }
	        } else if (this.prevOverCircle) {
	            this.callbacks.hideTooltip();
	            this.prevOverCircle = null;
	        }
	        this.prevPosition = position;
	    },

	    /**
	     * Select series.
	     * @param {{index: number, groupIndex: number}} indexes - index map
	     */
	    selectSeries: function(indexes) {
	        var groupIndex = indexes.groupIndex;
	        var index = indexes.index;
	        var circleInfo = this.groupCircleInfos[groupIndex][index];
	        var objColor = raphael.color(circleInfo.color);
	        var themeColor = this.theme.selectionColor;
	        var color = themeColor || raphaelRenderUtil.makeChangedLuminanceColor(objColor.hex, DEFAULT_LUMINANC);

	        circleInfo.circle.attr({
	            fill: color
	        });
	    },

	    /**
	     * Unselect series.
	     * @param {{index: number, groupIndex: number}} indexes - index map
	     */
	    unselectSeries: function(indexes) {
	        var groupIndex = indexes.groupIndex;
	        var index = indexes.index;
	        var circleInfo = this.groupCircleInfos[groupIndex][index];

	        circleInfo.circle.attr({
	            fill: circleInfo.color
	        });
	    },

	    /**
	     * Select legend.
	     * @param {?number} legendIndex - index of legend
	     */
	    selectLegend: function(legendIndex) {
	        var noneSelected = snippet.isNull(legendIndex);

	        this.selectedLegend = legendIndex;

	        raphaelRenderUtil.forEach2dArray(this.groupCircleInfos, function(circleInfo, groupIndex, index) {
	            var opacity;

	            if (!circleInfo) {
	                return;
	            }

	            opacity = (noneSelected || legendIndex === index) ? EMPHASIS_OPACITY : DE_EMPHASIS_OPACITY;

	            circleInfo.circle.attr({opacity: opacity});
	        });
	    }
	});

	module.exports = RaphaelBubbleChart;


/***/ }),
/* 20 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileoverview RaphaelBoxTypeChart is graph renderer for box type chart(heatmap chart, treemap chart).
	 * @author NHN Ent.
	 *         FE Development Lab <dl_javascript@nhnent.com>
	 */

	'use strict';

	var raphaelRenderUtil = __webpack_require__(5);
	var snippet = __webpack_require__(6);
	var predicate = __webpack_require__(21);

	var ANIMATION_DURATION = 100;
	var MIN_BORDER_WIDTH = 0;
	var MAX_BORDER_WIDTH = 4;

	/**
	 * @classdesc RaphaelBoxTypeChart is graph renderer for box type chart(heatmap chart, treemap chart).
	 * @class RaphaelBarChart
	 * @private
	 */
	var RaphaelBoxTypeChart = snippet.defineClass(/** @lends RaphaelBoxTypeChart.prototype */ {
	    /**
	     * Render function of bar chart
	     * @param {object} paper Raphael paper
	     * @param {
	{
	     *      dimension: {width: number, height: number},
	     *      colorSpectrum: object,
	     *      seriesDataModel: SeriesDataModel,
	     *      groupBounds: (Array.<Array.<object>>|object.<string, object>),
	     *      theme: object
	     * }} seriesData - data for graph rendering
	     * @returns {object}
	     */
	    render: function(paper, seriesData) {
	        var seriesSet = paper.set();

	        this.paper = paper;

	        this.chartType = seriesData.chartType;

	        /**
	         * theme
	         * @type {*|{}}
	         */
	        this.theme = seriesData.theme || {};

	        /**
	         * color spectrum
	         * @type {Object}
	         */
	        this.colorSpectrum = seriesData.colorSpectrum;

	        /**
	         * chart background
	         */
	        this.chartBackground = seriesData.chartBackground;

	        /**
	         * zoomable option
	         */
	        this.zoomable = seriesData.zoomable;

	        /**
	         * options useColorValue
	         */
	        this.useColorValue = seriesData.options.useColorValue;

	        /**
	         * border color for rendering box
	         * @type {string}
	         */
	        this.borderColor = this.theme.borderColor || 'none';

	        /**
	         * border width for rendering box
	         */
	        this.borderWidth = this.theme.borderWidth;

	        /**
	         * group bounds
	         * @type {Array.<Array.<object>>|object.<string, object>}
	         */
	        this.groupBounds = seriesData.groupBounds;

	        /**
	         * bound map
	         * @type {object.<string, {left: number, top: number, width: number, height: number}>}
	         */
	        this.boundMap = seriesData.boundMap;

	        this._bindGetBoundFunction();
	        this._bindGetColorFunction();

	        this.seriesDataModel = seriesData.seriesDataModel;

	        /**
	         * boxes set
	         * @type {Array.<Array.<{rect: Object, color: string}>>}
	         */
	        this.boxesSet = this._renderBoxes(seriesData.seriesDataModel, seriesData.startDepth, !!seriesData.isPivot,
	            seriesSet);
	        this.rectOverlay = this._renderRectOverlay();

	        return seriesSet;
	    },

	    /**
	     * Render overlay.
	     * @returns {object} raphael object
	     * @private
	     */
	    _renderRectOverlay: function() {
	        var bound = {
	            width: 1,
	            height: 1,
	            left: 0,
	            top: 0
	        };
	        var attributes = {
	            'fill-opacity': 0
	        };

	        var rectOverlay = raphaelRenderUtil.renderRect(this.paper, bound, snippet.extend({
	            'stroke-width': 0
	        }, attributes));

	        rectOverlay.node.setAttribute('filter', 'url(#shadow)');

	        return rectOverlay;
	    },

	    /**
	     * Bind _getBound private function.
	     * @private
	     */
	    _bindGetBoundFunction: function() {
	        if (this.boundMap) {
	            this._getBound = this._getBoundFromBoundMap;
	        } else {
	            this._getBound = this._getBoundFromGroupBounds;
	        }
	    },

	    /**
	     * Bind _bindGetColorFunction private function.
	     * @private
	     */
	    _bindGetColorFunction: function() {
	        if (this.colorSpectrum) {
	            this._getColor = this._getColorFromSpectrum;
	        } else {
	            this._getColor = this._getColorFromColors;
	        }
	    },

	    /**
	     * Get bound from groupBounds by indexes(groupIndex, index) of seriesItem.
	     * @param {SeriesItem} seriesItem - seriesItem
	     * @returns {{width: number, height: number, left: number, top: number}}
	     * @private
	     */
	    _getBoundFromGroupBounds: function(seriesItem) {
	        return this.groupBounds[seriesItem.groupIndex][seriesItem.index].end;
	    },

	    /**
	     * Get bound from boundMap by id of seriesItem.
	     * @param {SeriesItem} seriesItem - seriesItem
	     * @returns {{width: number, height: number, left: number, top: number}}
	     * @private
	     */
	    _getBoundFromBoundMap: function(seriesItem) {
	        return this.boundMap[seriesItem.id];
	    },

	    /**
	     * Get color from colorSpectrum by ratio of seriesItem.
	     * @param {SeriesItem} seriesItem - seriesItem
	     * @param {number} startDepth - start depth
	     * @returns {string}
	     * @private
	     */
	    _getColorFromSpectrum: function(seriesItem, startDepth) {
	        var color;

	        if (!seriesItem.hasChild || seriesItem.depth !== startDepth) {
	            color = this.colorSpectrum.getColor(seriesItem.colorRatio || seriesItem.ratio) || this.chartBackground;
	        } else {
	            color = 'none';
	        }

	        return color;
	    },

	    /**
	     * Get color from colors theme by group property of seriesItem.
	     * @param {SeriesItem} seriesItem - seriesItem
	     * @param {number} startDepth - start depth
	     * @returns {string}
	     * @private
	     */
	    _getColorFromColors: function(seriesItem, startDepth) {
	        return (seriesItem.depth === startDepth) ? this.theme.colors[seriesItem.group] : '#000';
	    },

	    /**
	     * Render rect.
	     * @param {{width: number, height: number, left: number, top: number}} bound - bound
	     * @param {string} color - color
	     * @param {number} strokeWidth - stroke width
	     * @param {number} [fillOpacity] - fill opacity
	     * @returns {object}
	     * @private
	     */
	    _renderRect: function(bound, color, strokeWidth, fillOpacity) {
	        return raphaelRenderUtil.renderRect(this.paper, bound, {
	            fill: color,
	            stroke: this.borderColor,
	            'stroke-width': strokeWidth,
	            'fill-opacity': fillOpacity
	        });
	    },

	    /**
	     * Get stroke width.
	     * @param {boolean} isFirstDepth - whether it is same to first depth or not
	     * @returns {number}
	     * @private
	     */
	    _getStrokeWidth: function(isFirstDepth) {
	        var strokeWidth;

	        if (this.borderWidth) {
	            strokeWidth = this.borderWidth;
	        } else if (isFirstDepth) {
	            strokeWidth = MAX_BORDER_WIDTH;
	        } else {
	            strokeWidth = MIN_BORDER_WIDTH;
	        }

	        return strokeWidth;
	    },

	    /**
	     * Render boxes.
	     * @param {SeriesDataModel} seriesDataModel - seriesDataModel
	     * @param {number} startDepth - start depth
	     * @param {boolean} isPivot - whether pivot or not
	     * @param {Array.<object>} seriesSet - seriesSet
	     * @returns {Array.<Array.<{rect: object, color: string}>>}
	     * @private
	     */
	    _renderBoxes: function(seriesDataModel, startDepth, isPivot, seriesSet) {
	        var self = this;
	        var isTreemapChart = predicate.isTreemapChart(this.chartType);

	        return seriesDataModel.map(function(seriesGroup, groupIndex) {
	            var firstItem;

	            if (isTreemapChart && !self.colorSpectrum && seriesGroup.getSeriesItemCount()) {
	                firstItem = seriesGroup.getSeriesItem(0);
	                self._setTreeFillOpacity({
	                    id: firstItem.parent
	                }, startDepth);
	            }

	            return seriesGroup.map(function(seriesItem, index) {
	                var result = null;
	                var depth = seriesItem.depth;
	                var strokeWidth = self.colorSpectrum ? 0 : self._getStrokeWidth(depth === startDepth);
	                var fillOpacity = self.colorSpectrum ? 1 : seriesItem.fillOpacity;
	                var bound, color;

	                seriesItem.groupIndex = groupIndex;
	                seriesItem.index = index;
	                bound = self._getBound(seriesItem);

	                if (bound) {
	                    color = self._getColor(seriesItem, startDepth);
	                    result = {
	                        rect: self._renderRect(bound, color, strokeWidth, fillOpacity),
	                        seriesItem: seriesItem,
	                        color: color
	                    };

	                    if (seriesSet) {
	                        seriesSet.push(result.rect);
	                    }
	                }

	                return result;
	            });
	        }, isPivot);
	    },

	    /**
	     * @param {{id: number, fillOpacity: number}} parentInfo - parent info
	     * @param {number} startDepth - start depth
	     * @private
	     */
	    _setTreeFillOpacity: function(parentInfo, startDepth) {
	        var children = this.seriesDataModel.findSeriesItemsByParent(parentInfo.id);

	        snippet.forEachArray(children, function(datum, index) {
	            var depth = datum.depth;

	            if (depth === startDepth) {
	                datum.fillOpacity = 1;
	            } else if (depth === startDepth + 1) {
	                datum.fillOpacity = 0.05 * index;
	            } else if (depth < startDepth) {
	                datum.fillOpacity = 0;
	            } else {
	                datum.fillOpacity = parentInfo.fillOpacity + (0.05 * index);
	            }

	            if (datum.hasChild) {
	                this._setTreeFillOpacity(
	                    {
	                        id: datum.id,
	                        fillOpacity: datum.fillOpacity
	                    },
	                    startDepth
	                );
	            }
	        }, this);
	    },

	    /**
	     * Animate changing color of box.
	     * @param {object} rect - raphael object
	     * @param {string} [color] - fill color
	     * @param {number} [opacity] - fill opacity
	     * @param {number} [strokeColor] - stroke color
	     * @param {number} [strokeWidth] - stroke width
	     * @private
	     */
	    _animateChangingColor: function(rect, color, opacity, strokeColor, strokeWidth) {
	        var properties = {
	            'fill-opacity': snippet.isExisty(opacity) ? opacity : 1,
	            stroke: strokeColor,
	            'stroke-width': strokeWidth
	        };

	        if (color) {
	            properties.fill = color;
	        }

	        rect.animate(properties, ANIMATION_DURATION, '>');
	    },

	    /**
	     * Show animation.
	     * @param {{groupIndex: number, index:number}} indexes - index info
	     */
	    showAnimation: function(indexes) {
	        var box = this.boxesSet[indexes.groupIndex][indexes.index];
	        var rect, color;

	        if (!box) {
	            return;
	        }

	        color = box.color;
	        rect = box.rect.node;

	        if (this.chartType === 'treemap' && !this.zoomable && !this.useColorValue) {
	            color = this.theme.colors[indexes.index];
	        }

	        this.rectOverlay.attr({
	            x: rect.getAttribute('x'),
	            y: rect.getAttribute('y'),
	            width: rect.getAttribute('width'),
	            height: rect.getAttribute('height'),
	            fill: color,
	            'fill-opacity': 1,
	            stroke: '#ffffff',
	            'stroke-width': 4,
	            'stroke-opacity': 1
	        });

	        this.rectOverlay.toFront();
	        this.labelSet.toFront();
	    },

	    /**
	     * Hide animation.
	     * @param {{groupIndex: number, index:number}} indexes - index info
	     */
	    hideAnimation: function(indexes) {
	        var box = this.boxesSet[indexes.groupIndex][indexes.index];

	        if (!box) {
	            return;
	        }

	        this.rectOverlay.attr({
	            width: 1,
	            height: 1,
	            x: 0,
	            y: 0,
	            'fill-opacity': 0,
	            'stroke-opacity': 0
	        });
	    },

	    /**
	     * Resize.
	     * @param {{
	     *      dimension: {width: number, height: number},
	     *      groupBounds: (Array.<Array.<object>>|object.<string, object>)
	     * }} seriesData - data for graph rendering
	     */
	    resize: function(seriesData) {
	        var self = this;
	        var dimension = seriesData.dimension;

	        this.boundMap = seriesData.boundMap;
	        this.groupBounds = seriesData.groupBounds;
	        this.paper.setSize(dimension.width, dimension.height);

	        raphaelRenderUtil.forEach2dArray(this.boxesSet, function(box, groupIndex, index) {
	            var bound;

	            if (!box) {
	                return;
	            }

	            bound = self._getBound(box.seriesItem, groupIndex, index);

	            if (bound) {
	                raphaelRenderUtil.updateRectBound(box.rect, bound);
	            }
	        });
	    },

	    renderSeriesLabel: function(paper, positionSet, labels, labelTheme) {
	        var labelSet = paper.set();
	        var attributes = {
	            'font-size': labelTheme.fontSize,
	            'font-family': labelTheme.fontFamily,
	            'font-weight': labelTheme.fontWeight,
	            fill: '#ffffff',
	            opacity: 0
	        };

	        snippet.forEach(labels, function(categoryLabel, categoryIndex) {
	            snippet.forEach(categoryLabel, function(label, seriesIndex) {
	                var seriesLabel = raphaelRenderUtil.renderText(paper, positionSet[categoryIndex][seriesIndex].end,
	                    label, attributes);

	                seriesLabel.node.style.userSelect = 'none';
	                seriesLabel.node.style.cursor = 'default';

	                labelSet.push(seriesLabel);
	            });
	        });

	        this.labelSet = labelSet;

	        return labelSet;
	    },

	    renderSeriesLabelForTreemap: function(paper, positions, labels, labelTheme) {
	        var labelSet = paper.set();
	        var attributes = {
	            'font-size': labelTheme.fontSize,
	            'font-family': labelTheme.fontFamily,
	            'font-weight': labelTheme.fontWeight,
	            fill: labelTheme.color,
	            opacity: 0
	        };

	        snippet.forEach(labels, function(label, index) {
	            var seriesLabel;

	            if (positions[index]) {
	                seriesLabel = raphaelRenderUtil.renderText(paper, positions[index], label, attributes);

	                seriesLabel.node.style.userSelect = 'none';
	                seriesLabel.node.style.cursor = 'default';

	                labelSet.push(seriesLabel);
	            }
	        });

	        this.labelSet = labelSet;

	        return labelSet;
	    }
	});

	module.exports = RaphaelBoxTypeChart;


/***/ }),
/* 21 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileoverview Predicate.
	 * @author NHN Ent.
	 *         FE Development Lab <dl_javascript@nhnent.com>
	 */

	'use strict';

	var chartConst = __webpack_require__(8);
	var arrayUtil = __webpack_require__(10);

	/**
	 * predicate.
	 * @module predicate
	 * @private */
	var predicate = {
	    /**
	     * Whether bar chart or not.
	     * @memberOf module:predicate
	     * @param {string} chartType - type of chart
	     * @returns {boolean}
	     */
	    isBarChart: function(chartType) {
	        return chartType === chartConst.CHART_TYPE_BAR;
	    },

	    /**
	     * Whether column chart or not.
	     * @memberOf module:predicate
	     * @param {string} chartType - type of chart
	     * @returns {boolean}
	     */
	    isColumnChart: function(chartType) {
	        return chartType === chartConst.CHART_TYPE_COLUMN;
	    },

	    /**
	     * Whether bar type chart or not.
	     * @memberOf module:predicate
	     * @param {string} chartType - type of chart
	     * @returns {boolean}
	     */
	    isBarTypeChart: function(chartType) {
	        return predicate.isBarChart(chartType) || predicate.isColumnChart(chartType);
	    },

	    /**
	     * Whether column type chart or not.
	     * @memberOf module:predicate
	     * @param {string} chartType - type of chart
	     * @param {Array.<string>} seriesTypes - type of series
	     * @returns {boolean}
	     */
	    isColumnTypeChart: function(chartType, seriesTypes) {
	        return predicate.isHeatmapChart(chartType) ||
	            predicate.isColumnChart(chartType) ||
	            predicate.isBoxplotChart(chartType) ||
	            predicate.isLineColumnComboChart(chartType, seriesTypes);
	    },

	    /**
	     * Whether boxplot chart or not.
	     * @memberOf module:predicate
	     * @param {string} chartType - type of chart
	     * @returns {boolean}
	     */
	    isBoxplotChart: function(chartType) {
	        return chartType === chartConst.CHART_TYPE_BOXPLOT;
	    },

	    /**
	     * Whether bullet chart or not.
	     * @memberOf module:predicate
	     * @param {string} chartType - type of chart
	     * @returns {boolean}
	     */
	    isBulletChart: function(chartType) {
	        return chartType === chartConst.CHART_TYPE_BULLET;
	    },

	    /**
	     * Whether radial type chart or not.
	     * @memberOf module:predicate
	     * @param {string} chartType - type of chart
	     * @returns {boolean}
	     */
	    isRadialChart: function(chartType) {
	        return chartType === chartConst.CHART_TYPE_RADIAL;
	    },

	    /**
	     * Whether diverging chart or not.
	     * @memberOf module:predicate
	     * @param {string} chartType - type of chart
	     * @param {boolean} diverging - whether has diverging or not
	     * @returns {*|boolean}
	     */
	    isDivergingChart: function(chartType, diverging) {
	        return this.isBarTypeChart(chartType) && diverging;
	    },

	    /**
	     * Whether normal stack chart or not.
	     * @param {string} chartType - type of chart
	     * @param {string} stackType - type of stack
	     * @returns {boolean}
	     * @private
	     */
	    isNormalStackChart: function(chartType, stackType) {
	        var isAllowedStackOption = predicate.isAllowedStackOption(chartType);
	        var isNormalStack = predicate.isNormalStack(stackType);

	        return isAllowedStackOption && isNormalStack;
	    },

	    /**
	     * Whether percent stack chart or not.
	     * @param {string} chartType - type of chart
	     * @param {string} stackType - type of stack
	     * @returns {boolean}
	     * @private
	     */
	    isPercentStackChart: function(chartType, stackType) {
	        var isAllowedStackOption = predicate.isAllowedStackOption(chartType);
	        var isPercentStack = predicate.isPercentStack(stackType);

	        return isAllowedStackOption && isPercentStack;
	    },

	    /**
	     * Whether combo chart or not.
	     * @memberOf module:predicate
	     * @param {string} chartType - type of chart
	     * @returns {boolean}
	     */
	    isComboChart: function(chartType) {
	        return chartType === chartConst.CHART_TYPE_COMBO;
	    },

	    /**
	     * Whether line and column combo chart or not.
	     * @memberOf module:predicate
	     * @param {string} chartType - type of chart
	     * @param {Array.<string>} subChartTypes - types of chart
	     * @returns {boolean}
	     */
	    isLineColumnComboChart: function(chartType, subChartTypes) {
	        var isLineOrColumn = arrayUtil.all(subChartTypes || [], function(subChartType) {
	            return predicate.isLineChart(subChartType) || predicate.isColumnChart(subChartType);
	        });

	        return predicate.isComboChart(chartType) && isLineOrColumn;
	    },

	    /**
	     * Whether pie and donut combo chart or not.
	     * @memberOf module:predicate
	     * @param {string} chartType - type of chart
	     * @param {Array.<string>} subChartTypes - types of chart
	     * @returns {boolean}
	     */
	    isPieDonutComboChart: function(chartType, subChartTypes) {
	        var isAllPieType = arrayUtil.all(subChartTypes, function(subChartType) {
	            return predicate.isPieChart(subChartType);
	        });

	        return predicate.isComboChart(chartType) && isAllPieType;
	    },

	    /**
	     * Whether line chart or not.
	     * @memberOf module:predicate
	     * @param {string} chartType - type of chart
	     * @returns {boolean}
	     */
	    isLineChart: function(chartType) {
	        return chartType === chartConst.CHART_TYPE_LINE;
	    },

	    /**
	     * Whether area chart or not.
	     * @memberOf module:predicate
	     * @param {string} chartType - type of chart
	     * @returns {boolean}
	     */
	    isAreaChart: function(chartType) {
	        return chartType === chartConst.CHART_TYPE_AREA;
	    },

	    /**
	     * Whether line and area combo chart or not.
	     * @memberOf module:predicate
	     * @param {string} chartType - type of chart
	     * @param {Array.<string>} subChartTypes - types of chart
	     * @returns {boolean}
	     */
	    isLineAreaComboChart: function(chartType, subChartTypes) {
	        var isAllLineType = arrayUtil.all(subChartTypes || [], function(subChartType) {
	            return predicate.isLineChart(subChartType) || predicate.isAreaChart(subChartType);
	        });

	        return predicate.isComboChart(chartType) && isAllLineType;
	    },

	    /**
	     * Whether line and area combo chart or not.
	     * @memberOf module:predicate
	     * @param {string} chartType - type of chart
	     * @param {Array.<string>} subChartTypes - types of chart
	     * @returns {boolean}
	     */
	    hasLineChart: function(chartType, subChartTypes) {
	        var hasLineType = arrayUtil.any(subChartTypes || [], function(subChartType) {
	            return predicate.isLineChart(subChartType);
	        });

	        return predicate.isComboChart(chartType) && hasLineType;
	    },

	    /**
	     * Whether line and scatter combo chart or not.
	     * @memberOf module:predicate
	     * @param {string} chartType - type of chart
	     * @param {Array.<string>} subChartTypes - types of chart
	     * @returns {boolean}
	     */
	    isLineScatterComboChart: function(chartType, subChartTypes) {
	        var isAllLineType = arrayUtil.all(subChartTypes || [], function(subChartType) {
	            return predicate.isLineChart(subChartType) || predicate.isScatterChart(subChartType);
	        });

	        return predicate.isComboChart(chartType) && isAllLineType;
	    },

	    /**
	     * Whether line type chart or not.
	     * @memberOf module:predicate
	     * @param {string} chartType - type of chart
	     * @param {Array.<string>} [subChartTypes] - types of chart
	     * @returns {boolean}
	     */
	    isLineTypeChart: function(chartType, subChartTypes) {
	        return predicate.isLineChart(chartType) || predicate.isAreaChart(chartType)
	            || predicate.isLineAreaComboChart(chartType, subChartTypes);
	    },

	    /**
	     * Whether bubble chart or not.
	     * @memberOf module:predicate
	     * @param {string} chartType - type of chart
	     * @returns {boolean}
	     */
	    isBubbleChart: function(chartType) {
	        return chartType === chartConst.CHART_TYPE_BUBBLE;
	    },

	    /**
	     * Whether scatter chart or not.
	     * @memberOf module:predicate
	     * @param {string} chartType - chart type
	     * @returns {boolean}
	     */
	    isScatterChart: function(chartType) {
	        return chartType === chartConst.CHART_TYPE_SCATTER;
	    },

	    /**
	     * Whether heatmap chart or not.
	     * @memberOf module:predicate
	     * @param {string} chartType - chart type
	     * @returns {boolean}
	     */
	    isHeatmapChart: function(chartType) {
	        return chartType === chartConst.CHART_TYPE_HEATMAP;
	    },

	    /**
	     * Whether treemap chart or not.
	     * @memberOf module:predicate
	     * @param {string} chartType - chart type
	     * @returns {boolean}
	     */
	    isTreemapChart: function(chartType) {
	        return chartType === chartConst.CHART_TYPE_TREEMAP;
	    },

	    /**
	     * Whether box type chart or not.
	     * @memberOf module:predicate
	     * @param {string} chartType - chart type
	     * @returns {boolean}
	     */
	    isBoxTypeChart: function(chartType) {
	        return predicate.isHeatmapChart(chartType) || predicate.isTreemapChart(chartType);
	    },

	    /**
	     * Whether map type chart or not.
	     * @memberOf module:predicate
	     * @param {string} chartType - chart type
	     * @returns {boolean}
	     */
	    isMapTypeChart: function(chartType) {
	        return (this.isMapChart(chartType) || this.isHeatmapChart(chartType) || this.isTreemapChart(chartType));
	    },

	    /**
	     * Whether pie chart or not.
	     * @memberOf module:predicate
	     * @param {string} chartType - chart type
	     * @returns {boolean}
	     */
	    isPieChart: function(chartType) {
	        // change to indexOf for handling alias
	        return chartType && chartType.indexOf(chartConst.CHART_TYPE_PIE) !== -1;
	    },

	    /**
	     * Whether map chart or not.
	     * @memberOf module:predicate
	     * @param {string} chartType - type of chart
	     * @returns {boolean}
	     */
	    isMapChart: function(chartType) {
	        return chartType === chartConst.CHART_TYPE_MAP;
	    },

	    /**
	     * Whether coordinate type chart or not.
	     * @memberOf module:predicate
	     * @param {string} chartType - chart type
	     * @returns {boolean}
	     */
	    isCoordinateTypeChart: function(chartType) {
	        return predicate.isBubbleChart(chartType) || predicate.isScatterChart(chartType);
	    },

	    /**
	     * Whether allow rendering for minus point in area of series.
	     * @memberOf module:predicate
	     * @param {string} chartType - chart type
	     * @returns {boolean}
	     */
	    allowMinusPointRender: function(chartType) {
	        return predicate.isLineTypeChart(chartType) || predicate.isCoordinateTypeChart(chartType) ||
	            predicate.isBoxTypeChart(chartType) || predicate.isBulletChart(chartType);
	    },

	    /**
	     * Whether chart to detect mouse events on series or not.
	     * @memberOf module:predicate
	     * @param {string} chartType - type of chart
	     * @returns {boolean}
	     */
	    isChartToDetectMouseEventOnSeries: function(chartType) {
	        return predicate.isPieChart(chartType) || predicate.isMapChart(chartType)
	            || predicate.isCoordinateTypeChart(chartType);
	    },

	    /**
	     * Whether align of label is outer or not.
	     * @memberOf module:predicate
	     * @param {string} align - align of legend
	     * @returns {boolean}
	     */
	    isLabelAlignOuter: function(align) {
	        return align === chartConst.LABEL_ALIGN_OUTER;
	    },

	    /**
	     * Whether show label or not.
	     * @param {{showLabel: ?boolean, showLegend: ?boolean}} options - options
	     * @returns {boolean}
	     */
	    isShowLabel: function(options) {
	        return options.showLabel || options.showLegend;
	    },

	    /**
	     * Whether show outer label or not.
	     * @param {{showLabel: ?boolean, showLegend: ?boolean, labelAlign: string}} options - options
	     * @returns {*|boolean}
	     */
	    isShowOuterLabel: function(options) {
	        return predicate.isShowLabel(options) && predicate.isLabelAlignOuter(options.labelAlign);
	    },

	    /**
	     * Whether align of legend is left or not.
	     * @memberOf module:predicate
	     * @param {string} align - align of legend
	     * @returns {boolean}
	     */
	    isLegendAlignLeft: function(align) {
	        return align === chartConst.LEGEND_ALIGN_LEFT;
	    },

	    /**
	     * Whether align of legend is top or not.
	     * @memberOf module:predicate
	     * @param {string} align - align of legend
	     * @returns {boolean}
	     */
	    isLegendAlignTop: function(align) {
	        return align === chartConst.LEGEND_ALIGN_TOP;
	    },

	    /**
	     * Whether align of legend is bottom or not.
	     * @memberOf module:predicate
	     * @param {string} align - align of legend
	     * @returns {boolean}
	     */
	    isLegendAlignBottom: function(align) {
	        return align === chartConst.LEGEND_ALIGN_BOTTOM;
	    },

	    /**
	     * Whether horizontal legend or not.
	     * @memberOf module:predicate
	     * @param {string} align - align option for legend
	     * @returns {boolean}
	     */
	    isHorizontalLegend: function(align) {
	        return predicate.isLegendAlignTop(align) || predicate.isLegendAlignBottom(align);
	    },

	    /**
	     * Whether vertical legend or not.
	     * @memberOf module:predicate
	     * @param {string} align - align option for legend
	     * @returns {boolean}
	     */
	    isVerticalLegend: function(align) {
	        return !predicate.isHorizontalLegend(align);
	    },

	    /**
	     * Whether allowed stackType option or not.
	     * @memberOf module:predicate
	     * @param {string} chartType - type of chart
	     * @returns {boolean}
	     */
	    isAllowedStackOption: function(chartType) {
	        return predicate.isBarChart(chartType) || predicate.isColumnChart(chartType)
	            || predicate.isAreaChart(chartType);
	    },

	    /**
	     * Whether normal stack type or not.
	     * @memberOf module:predicate
	     * @param {boolean} stackType - stackType option
	     * @returns {boolean}
	     */
	    isNormalStack: function(stackType) {
	        return stackType === chartConst.NORMAL_STACK_TYPE;
	    },

	    /**
	     * Whether percent stack type or not.
	     * @memberOf module:predicate
	     * @param {boolean} stackType - stackType option
	     * @returns {boolean}
	     */
	    isPercentStack: function(stackType) {
	        return stackType === chartConst.PERCENT_STACK_TYPE;
	    },

	    /**
	     * Whether valid stackType option or not.
	     * @memberOf module:predicate
	     * @param {boolean} stackType - stackType option
	     * @returns {boolean}
	     */
	    isValidStackOption: function(stackType) {
	        return stackType && (predicate.isNormalStack(stackType) || predicate.isPercentStack(stackType));
	    },

	    /**
	     * Whether allow range data or not.
	     * @memberOf module:predicate
	     * @param {string} chartType - chart type
	     * @returns {boolean}
	     */
	    isAllowRangeData: function(chartType) {
	        return predicate.isBarTypeChart(chartType) || predicate.isAreaChart(chartType);
	    },

	    /**
	     * Whether align of yAxis is center or not.
	     * @memberOf module:predicate
	     * @param {boolean} hasRightYAxis - whether has right yAxis.
	     * @param {string} alignOption - align option of yAxis.
	     * @returns {boolean} whether - align center or not.
	     */
	    isYAxisAlignCenter: function(hasRightYAxis, alignOption) {
	        return !hasRightYAxis && (alignOption === chartConst.YAXIS_ALIGN_CENTER);
	    },

	    /**
	     * Whether minus limit or not.
	     * @memberOf module:predicate
	     * @param {{min: number, max: number}} limit - limit
	     * @returns {boolean}
	     */
	    isMinusLimit: function(limit) {
	        return limit.min <= 0 && limit.max <= 0;
	    },

	    /**
	     * Whether auto tick interval or not.
	     * @param {string} [tickInterval] - tick interval option
	     * @returns {boolean}
	     */
	    isAutoTickInterval: function(tickInterval) {
	        return tickInterval === chartConst.TICK_INTERVAL_AUTO;
	    },

	    /**
	     * Whether valid label interval or not.
	     * @param {number} [labelInterval] - label interval option
	     * @param {string} [tickInterval] - tick interval option
	     * @returns {*|boolean}
	     */
	    isValidLabelInterval: function(labelInterval, tickInterval) {
	        return labelInterval && labelInterval > 1 && !tickInterval;
	    },

	    /**
	     * Whether datetime type or not.
	     * @param {string} type - type
	     * @returns {boolean}
	     */
	    isDatetimeType: function(type) {
	        return type === chartConst.AXIS_TYPE_DATETIME;
	    },

	    /**
	     * @param {string} chartType - type of chart
	     * @returns {boolean} - whether it support ChartBase#showTooltip API
	     */
	    isSupportPublicShowTooptipAPI: function(chartType) {
	        return this.isBarChart(chartType) ||
	            this.isColumnChart(chartType) ||
	            this.isLineChart(chartType) ||
	            this.isAreaChart(chartType) ||
	            this.isBoxplotChart(chartType);
	    },

	    /**
	     * @param {string} chartType - type of chart
	     * @returns {boolean} - whether it support ChartBase#hideTooltip API
	     */
	    isSupportPublicHideTooptipAPI: function(chartType) {
	        return this.isBarChart(chartType) ||
	            this.isColumnChart(chartType) ||
	            this.isLineChart(chartType) ||
	            this.isAreaChart(chartType) ||
	            this.isBoxplotChart(chartType);
	    }
	};

	module.exports = predicate;


/***/ }),
/* 22 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileoverview RaphaelPieCharts is graph renderer for map chart.
	 * @author NHN Ent.
	 *         FE Development Lab <dl_javascript@nhnent.com>
	 */

	'use strict';

	var raphaelRenderUtil = __webpack_require__(5);
	var dom = __webpack_require__(9);
	var snippet = __webpack_require__(6);
	var browser = snippet.browser;

	var IS_LTE_IE8 = browser.msie && browser.version <= 8;
	var STROKE_COLOR = 'gray';
	var ANIMATION_DURATION = 100;
	var G_ID = 'tui-chart-series-group';
	var FILL_COLOR_OF_NO_DATA = '#eee';

	/**
	 * @classdesc RaphaelMapCharts is graph renderer for map chart.
	 * @class RaphaelMapChart
	 * @private
	 */
	var RaphaelMapChart = snippet.defineClass(/** @lends RaphaelMapChart.prototype */ {
	    /**
	     * Render function of map chart.
	     * @param {object} paper paper object
	     * @param {object} data data
	     *      @param {{width: number, height: number}} data.dimension series dimension
	     *      @param {Array.<{code: string, path: string}>} data.map mapData
	     *      @param {ColorSpectrum} data.colorSpectrum color model
	     */
	    render: function(paper, data) {
	        var mapDimension = data.mapModel.getMapDimension();

	        this.ratio = this._getDimensionRatio(data.layout.dimension, mapDimension);
	        this.dimension = data.layout.dimension;
	        this.position = data.layout.position;
	        this.paper = paper;
	        this.sectorSet = paper.set();
	        this.sectors = this._renderMap(data, this.ratio);

	        if (!IS_LTE_IE8) {
	            this.g = createGElement(paper, this.sectorSet, G_ID);
	        }

	        this.overColor = data.theme.overColor;
	    },

	    /**
	     * Get dimension ratio
	     * @param {object} dimension dimension
	     * @param {object} mapDimension map dimension
	     * @returns {number}
	     * @private
	     */
	    _getDimensionRatio: function(dimension, mapDimension) {
	        return Math.min(dimension.height / mapDimension.height, dimension.width / mapDimension.width);
	    },

	    /**
	     * Render map graph.
	     * @param {object} data data
	     *      @param {{width: number, height: number}} data.dimension series dimension
	     *      @param {Array.<{code: string, path: string}>} data.map mapData
	     *      @param {ColorSpectrum} data.colorSpectrum color model
	     * @param {number} dimensionRatio dimension ratio of rendering by map
	     * @returns {Array.<{sector: object, color: string, data: object}>} rendered map information
	     * @private
	     */
	    _renderMap: function(data, dimensionRatio) {
	        var sectorSet = this.sectorSet;
	        var position = data.layout.position;
	        var paper = this.paper;
	        var colorSpectrum = data.colorSpectrum;

	        return snippet.map(data.mapModel.getMapData(), function(datum, index) {
	            var ratio = datum.ratio;
	            var color = ratio ? colorSpectrum.getColor(ratio) : FILL_COLOR_OF_NO_DATA;
	            var sector = raphaelRenderUtil.renderArea(paper, datum.path, {
	                fill: color,
	                opacity: 1,
	                stroke: STROKE_COLOR,
	                'stroke-width': 0.2,
	                'stroke-opacity': 1,
	                transform: 's' + dimensionRatio + ',' + dimensionRatio + ',0,0'
	                    + 't' + (position.left / dimensionRatio) + ',' + (position.top / dimensionRatio)
	            });

	            sector.data('index', index);

	            sectorSet.push(sector);

	            return {
	                sector: sector,
	                color: color,
	                ratio: ratio
	            };
	        });
	    },

	    /**
	     * Find sector index.
	     * @param {{left: number, top: number}} position position
	     * @returns {?number} found index
	     */
	    findSectorIndex: function(position) {
	        var sector = this.paper.getElementByPoint(position.left, position.top),
	            foundIndex = sector && sector.data('index'),
	            data = !snippet.isUndefined(foundIndex) && this.sectors[foundIndex];

	        return data && !snippet.isUndefined(data.ratio) ? foundIndex : null;
	    },

	    /**
	     * Change color.
	     * @param {number} index index
	     */
	    changeColor: function(index) {
	        var sector = this.sectors[index];
	        var attributes = {
	            stroke: '#ffffff',
	            'stroke-width': 4
	        };

	        if (this.overColor) {
	            attributes.fill = this.overColor;
	        }

	        sector.sector.animate(attributes, ANIMATION_DURATION, '>');
	        sector.sector.node.setAttribute('filter', 'url(#shadow)');
	        sector.sector.toFront();
	    },

	    /**
	     * Restore color.
	     * @param {number} index index
	     */
	    restoreColor: function(index) {
	        var sector = this.sectors[index];

	        sector.sector.animate({
	            fill: sector.color,
	            stroke: STROKE_COLOR,
	            'stroke-width': 0.2
	        }, ANIMATION_DURATION, '>');
	        sector.sector.node.setAttribute('filter', 'none');
	    },

	    /**
	     * Scale map sector paths
	     * @param {number} changedRatio changed ratio of map
	     * @param {object} position position
	     * @param {number} mapRatio mapdimension ratio by dimansion
	     * @param {object} limitPosition limit position
	     * @param {object} mapDimension map dimension
	     */
	    scaleMapPaths: function(changedRatio, position, mapRatio, limitPosition, mapDimension) {
	        var transformList = this.g.transform.baseVal;
	        var zoom = this.paper.canvas.createSVGTransform();
	        var matrix = this.paper.canvas.createSVGMatrix();
	        var raphaelMatrix = this.paper.raphael.matrix();
	        var transformMatrix = transformList.numberOfItems ? transformList.getItem(0).matrix : {
	            a: 1,
	            b: 0,
	            c: 0,
	            d: 1,
	            e: 0,
	            f: 0
	        };
	        var maxRight = mapDimension.width - this.dimension.width;
	        var maxTop = mapDimension.height - this.dimension.height;
	        var previousTranslateX = (transformMatrix.e / transformMatrix.a);
	        var previousTranslateY = (transformMatrix.f / transformMatrix.d);
	        var currentLimitRight = -maxRight / transformMatrix.a;
	        var currentLimitTop = -maxTop / transformMatrix.d;
	        var transformX, transformY;

	        raphaelMatrix.scale(changedRatio, changedRatio,
	            (position.left * mapRatio) - (previousTranslateX * changedRatio),
	            (position.top * mapRatio) - (previousTranslateY * changedRatio));
	        transformX = (raphaelMatrix.e / raphaelMatrix.a) + previousTranslateX;
	        transformY = (raphaelMatrix.f / raphaelMatrix.d) + previousTranslateY;

	        if (transformX >= 0) {
	            raphaelMatrix.e = -previousTranslateX * raphaelMatrix.a;
	        } else if (transformX < currentLimitRight) {
	            raphaelMatrix.e = currentLimitRight - previousTranslateX;
	        }

	        if (transformY >= 0) {
	            raphaelMatrix.f = -previousTranslateY * raphaelMatrix.a;
	        } else if (transformY < currentLimitTop) {
	            raphaelMatrix.f = currentLimitTop - previousTranslateY;
	        }

	        matrix.a = raphaelMatrix.a;
	        matrix.b = raphaelMatrix.b;
	        matrix.c = raphaelMatrix.c;
	        matrix.d = raphaelMatrix.d;
	        matrix.e = raphaelMatrix.e;
	        matrix.f = raphaelMatrix.f;

	        zoom.setMatrix(matrix);
	        transformList.appendItem(zoom);
	        transformList.initialize(transformList.consolidate());
	    },

	    /**
	     * Scale map sector paths
	     * @param {object} distances drag distance for moving
	     * @param {object} mapDimension map dimension
	     */
	    moveMapPaths: function(distances, mapDimension) {
	        var matrix = this.paper.canvas.createSVGMatrix();
	        var raphaelMatrix = this.paper.raphael.matrix();
	        var transformList = this.g.transform.baseVal;
	        var translate = this.paper.canvas.createSVGTransform();
	        var maxRight = mapDimension.width - this.dimension.width;
	        var maxTop = mapDimension.height - this.dimension.height;
	        var transformMatrix = transformList.numberOfItems ? transformList.getItem(0).matrix : {
	            a: 1,
	            b: 0,
	            c: 0,
	            d: 1,
	            e: 0,
	            f: 0
	        };
	        var translateX, translateY, currentTranslateX, currentTranslateY;

	        raphaelMatrix.translate(distances.x, distances.y);

	        currentTranslateX = (raphaelMatrix.e / raphaelMatrix.a);
	        currentTranslateY = (raphaelMatrix.f / raphaelMatrix.d);
	        translateX = currentTranslateX + (transformMatrix.e / transformMatrix.a);
	        translateY = currentTranslateY + (transformMatrix.f / transformMatrix.d);

	        if (translateX >= 0 && currentTranslateX > 0) {
	            raphaelMatrix.e = 0;
	        } else if (translateX < 0 && translateX < -maxRight / transformMatrix.a && currentTranslateX < 0) {
	            raphaelMatrix.e = 0;
	        }
	        if (translateY >= 0 && currentTranslateY > 0) {
	            raphaelMatrix.f = 0;
	        } else if (translateY < 0 && translateY < -maxTop / transformMatrix.d && currentTranslateY < 0) {
	            raphaelMatrix.f = 0;
	        }

	        matrix.a = raphaelMatrix.a;
	        matrix.b = raphaelMatrix.b;
	        matrix.c = raphaelMatrix.c;
	        matrix.d = raphaelMatrix.d;
	        matrix.e = raphaelMatrix.e;
	        matrix.f = raphaelMatrix.f;

	        translate.setMatrix(matrix);
	        transformList.appendItem(translate);
	        transformList.initialize(transformList.consolidate());
	    },
	    /**
	     * Render series labels
	     * @param {object} paper Raphael paper
	     * @param {Array.<object>} labelData label data
	     * @param {object} labelTheme label theme
	     * @returns {Array.<object>}
	     */
	    renderSeriesLabels: function(paper, labelData, labelTheme) {
	        var attributes = {
	            'font-size': labelTheme.fontSize,
	            'font-family': labelTheme.fontFamily,
	            'font-weight': labelTheme.fontWeight,
	            fill: labelTheme.color,
	            'text-anchor': 'middle',
	            opacity: 0,
	            transform: 's' + this.ratio + ',' + this.ratio + ',0,0'
	            + 't' + (this.position.left / this.ratio) + ',' + (this.position.top / this.ratio)
	        };
	        var set = paper.set();
	        var self = this;

	        snippet.forEach(labelData, function(labelDatum) {
	            var position = labelDatum.labelPosition;
	            var label = raphaelRenderUtil.renderText(paper, position, labelDatum.name || labelDatum.code, attributes);

	            set.push(label);

	            label.node.style.userSelect = 'none';
	            label.node.style.cursor = 'default';
	            label.node.setAttribute('filter', 'url(#glow)');

	            if (!IS_LTE_IE8) {
	                self.g.appendChild(label.node);
	            }
	        });

	        return set;
	    }
	});

	/**
	 * Create and append sector set
	 * @param {object} paper Raphael paper
	 * @param {Array.<object>} sectorSet sectorSet
	 * @param {string} id ID string
	 * @returns {object}
	 * @ignore
	 */
	function createGElement(paper, sectorSet, id) {
	    var g = document.createElementNS('http://www.w3.org/2000/svg', 'g');
	    g.id = id;

	    sectorSet.forEach(function(sector) {
	        dom.append(g, sector.node);
	    });

	    paper.canvas.appendChild(g);

	    return g;
	}

	module.exports = RaphaelMapChart;


/***/ }),
/* 23 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileoverview Raphael title renderer.
	 * @author NHN Ent.
	 *         FE Development Lab <dl_javascript@nhnent.com>
	 */

	'use strict';

	var chartConst = __webpack_require__(8);
	var raphaelRenderUtil = __webpack_require__(5);
	var arrayUtil = __webpack_require__(10);
	var snippet = __webpack_require__(6);

	var UNSELECTED_LEGEND_LABEL_OPACITY = 0.5;
	var PAGINATION_POSITION_HEIGHT = 8;
	var PAGINATION_POSITION_WIDTH = 10;
	var PAGINATION_POSITION_HALP_WIDTH = PAGINATION_POSITION_WIDTH / 2;
	var PAGINATION_POSITION_PADDING = 3;
	var RaphaelLegendComponent;

	/**
	 * Get sum of icon and left padding width
	 * @returns {number} - icon and left padding width
	 * @ignore
	 */
	function getIconWidth() {
	    return chartConst.LEGEND_ICON_WIDTH + chartConst.LEGEND_LABEL_LEFT_PADDING;
	}

	RaphaelLegendComponent = snippet.defineClass(/** @lends RaphaelLegendComponent.prototype */ {

	    init: function() {
	        /**
	         * @type {number}
	         * @private
	         */
	        this._checkBoxWidth = 0;
	        /**
	         * @type {number}
	         * @private
	         */
	        this._checkBoxHeight = 0;
	        /**
	         * @type {number}
	         * @private
	         */
	        this._legendItemHeight = 0;
	        /**
	         * @type {number}
	         * @private
	         */
	        this._currentPageCount = 1;
	        /**
	         * @type {boolean}
	         * @private
	         */
	        this._showCheckbox = true;
	    },

	    /**
	     * @param {Array.<object>} legendData Array of legend item data
	     * @private
	     */
	    _renderLegendItems: function(legendData) {
	        var self = this;
	        var labelPaddingLeft = chartConst.LEGEND_LABEL_LEFT_PADDING;
	        var position = snippet.extend({}, this.basePosition);

	        snippet.forEach(legendData, function(legendDatum, index) {
	            var iconType = legendDatum.iconType;
	            var legendIndex = legendDatum.index;
	            var legendColor = legendDatum.colorByPoint ? '#aaa' : legendDatum.theme.color;
	            var isUnselected = legendDatum.isUnselected;
	            var labelHeight = legendDatum.labelHeight;
	            var checkboxData = legendDatum.checkbox;
	            var predicatedLegendWidth = position.left + self._calculateSingleLegendWidth(legendIndex, iconType);
	            var isNeedBreakLine = (predicatedLegendWidth >= self.paper.width);

	            if (self.isHorizontal && isNeedBreakLine) {
	                position.top += (self._legendItemHeight + chartConst.LABEL_PADDING_TOP);
	                position.left = self.basePosition.left;
	            }

	            if (self._showCheckbox) {
	                self._renderCheckbox(position, {
	                    isChecked: checkboxData.checked,
	                    legendIndex: legendIndex,
	                    legendSet: self.legendSet
	                });

	                position.left += (self._checkBoxWidth + labelPaddingLeft);
	            }

	            self._renderIcon(position, {
	                legendColor: legendColor,
	                iconType: iconType,
	                labelHeight: labelHeight,
	                isUnselected: isUnselected,
	                legendIndex: legendIndex,
	                legendSet: self.legendSet
	            });

	            position.left += chartConst.LEGEND_ICON_WIDTH + labelPaddingLeft;

	            self._renderLabel(position, {
	                labelText: legendDatum.label,
	                labelHeight: labelHeight,
	                isUnselected: isUnselected,
	                legendIndex: legendIndex,
	                legendSet: self.legendSet
	            });

	            if (self.isHorizontal) {
	                position.left += self.labelWidths[index] + chartConst.LEGEND_H_LABEL_RIGHT_PADDING;
	            } else {
	                position.left = self.basePosition.left;
	                position.top += self._legendItemHeight + chartConst.LINE_MARGIN_TOP;
	            }
	        });
	    },

	    /**
	     * @param {Array.<object>} legendData Array of legend item data
	     * @param {number} sliceIndex slice index of
	     * @returns {Array.<object>}
	     * @private
	     */
	    _getLegendData: function(legendData, sliceIndex) {
	        var positionTop = this.basePosition.top;
	        var totalHeight = this.dimension.height;
	        var chartHeight = this.paper.height;
	        var resultLegendData = legendData;
	        var pageHeight, singleItemHeight, visibleItemCount;

	        if (!this.isHorizontal && totalHeight + (positionTop * 2) > chartHeight) {
	            pageHeight = chartHeight - (positionTop * 2);
	            this._legendItemHeight = Math.max(legendData[0].labelHeight, chartConst.LEGEND_CHECKBOX_SIZE);
	            singleItemHeight = (this._legendItemHeight + chartConst.LINE_MARGIN_TOP);

	            visibleItemCount = Math.floor(pageHeight / singleItemHeight);

	            resultLegendData = legendData.slice((sliceIndex - 1) * visibleItemCount, sliceIndex * visibleItemCount);
	        }

	        return resultLegendData;
	    },

	    /**
	     * Render legend
	     * @param {object} data rendering data
	     *     @param {HTMLElement} data.container legend container
	     *     @param {Array.<object>} data.legendData rendering legendData
	     *     @param {boolean} data.isHorizontal boolean value of horizontal or not
	     *     @param {{height:number, width:number}} data.dimension legend dimension
	     *     @param {object} data.labelTheme legend label theme object
	     *     @param {number} data.labelWidths label widths
	     *     @param {object} data.eventBus event bus
	     * @returns {object} paper
	     */
	    render: function(data) {
	        var legendData, legendHeight;

	        this.eventBus = data.eventBus;
	        this.paper = data.paper;
	        this.dimension = data.dimension;
	        this.legendSet = this.paper.set();
	        this.labelWidths = data.labelWidths;
	        this.labelTheme = data.labelTheme;
	        this.basePosition = data.position;
	        this.isHorizontal = data.isHorizontal;
	        this.originalLegendData = data.legendData;

	        if (this.originalLegendData.length) {
	            this._showCheckbox = snippet.isExisty(data.legendData[0].checkbox);
	            this._setComponentDimensionsBaseOnLabelHeight(data.legendData[0].labelHeight);

	            legendData = this._getLegendData(data.legendData, this._currentPageCount);

	            this._renderLegendItems(legendData);

	            if (!this.isHorizontal && legendData && legendData.length < data.legendData.length) {
	                legendHeight = this.paper.height - (this.basePosition.top * 2);

	                this.availablePageCount = Math.ceil(data.dimension.height / legendHeight);

	                this._renderPaginationArea(this.basePosition, {
	                    width: data.dimension.width,
	                    height: legendHeight
	                });
	            }
	        }

	        return this.legendSet;
	    },

	    /**
	     * @param {string} direction direction string of paginate 'next' or 'previous'
	     * @private
	     */
	    _paginateLegendAreaTo: function(direction) {
	        var pageNumber = this._currentPageCount;

	        this._removeLegendItems();

	        if (direction === 'next') {
	            pageNumber += 1;
	        } else {
	            pageNumber -= 1;
	        }

	        this._renderLegendItems(this._getLegendData(this.originalLegendData, pageNumber));
	    },

	    _removeLegendItems: function() {
	        this.legendSet.forEach(function(legendItem) {
	            snippet.forEach(legendItem.events, function(event) {
	                event.unbind();
	            });
	            legendItem.remove();
	        });
	    },

	    /**
	     * @param {{top: number, left: number}} position legend area position
	     * @param {{height: number, width: number}} dimension legend area dimension
	     * @private
	     */
	    _renderPaginationArea: function(position, dimension) {
	        var self = this;
	        var BUTTON_WIDTH = chartConst.LEGEND_PAGINATION_BUTTON_WIDTH;
	        var BUTTON_PADDING_RIGHT = chartConst.LEGEND_PAGINATION_BUTTON_PADDING_RIGHT;
	        var controllerPositionTop = position.top + dimension.height - chartConst.LEGEND_AREA_V_PADDING;
	        var controllerPositionLeft = position.left - chartConst.LEGEND_AREA_H_PADDING;
	        var leftButtonPositionLeft = controllerPositionLeft + chartConst.LEGEND_AREA_H_PADDING;
	        var rightButtonPositionLeft = leftButtonPositionLeft + (BUTTON_PADDING_RIGHT + BUTTON_WIDTH);
	        var lowerArrowPath = ['M', rightButtonPositionLeft + 5, ',', (controllerPositionTop + PAGINATION_POSITION_PADDING + 4),
	            'L', (rightButtonPositionLeft + PAGINATION_POSITION_HALP_WIDTH + 5), ',', (controllerPositionTop + PAGINATION_POSITION_HEIGHT + 4),
	            'L', (rightButtonPositionLeft + PAGINATION_POSITION_WIDTH + 5), ',', (controllerPositionTop + PAGINATION_POSITION_PADDING + 4)].join('');
	        var upperArrowPath = ['M', leftButtonPositionLeft + 5, ',', (controllerPositionTop + PAGINATION_POSITION_HEIGHT + 4),
	            'L', (leftButtonPositionLeft + PAGINATION_POSITION_HALP_WIDTH + 5), ',', (controllerPositionTop + PAGINATION_POSITION_PADDING + 4),
	            'L', (leftButtonPositionLeft + PAGINATION_POSITION_WIDTH + 5), ',', (controllerPositionTop + PAGINATION_POSITION_HEIGHT + 4)].join('');

	        var prevRect = this._renderPaginationRect({
	            top: controllerPositionTop,
	            left: leftButtonPositionLeft
	        });
	        var prevArrow = raphaelRenderUtil.renderLine(this.paper, upperArrowPath, '#555', 2);

	        var nextRect = this._renderPaginationRect({
	            top: controllerPositionTop,
	            left: rightButtonPositionLeft
	        });
	        var nextArrow = raphaelRenderUtil.renderLine(this.paper, lowerArrowPath, '#555', 2);

	        var prevButtonSet = this.paper.set();
	        var nextButtonSet = this.paper.set();

	        prevRect.className = 'tui-chart-icon';
	        prevButtonSet.push(prevRect);
	        prevButtonSet.push(prevArrow);

	        nextRect.className = 'tui-chart-icon';
	        nextButtonSet.push(nextRect);
	        nextButtonSet.push(nextArrow);

	        prevButtonSet.click(function() {
	            if (self._currentPageCount > 1) {
	                self._paginateLegendAreaTo('previous');
	                self._currentPageCount -= 1;
	            }
	        });

	        nextButtonSet.click(function() {
	            if (self._currentPageCount < self.availablePageCount) {
	                self._paginateLegendAreaTo('next');
	                self._currentPageCount += 1;
	            }
	        });
	    },

	    /**
	     * @param {object} position - position top, left
	     * @returns {SVGElement} - svg element
	     */
	    _renderPaginationRect: function(position) {
	        var BUTTON_SIZE = chartConst.LEGEND_PAGINATION_BUTTON_WIDTH;
	        var bound = {
	            left: position.left,
	            top: position.top,
	            width: BUTTON_SIZE,
	            height: BUTTON_SIZE
	        };
	        var rect = raphaelRenderUtil.renderRect(this.paper, bound, {
	            fill: '#f4f4f4',
	            rx: '1px',
	            ry: '1px',
	            stroke: 'none'
	        });

	        return rect;
	    },

	    /**
	     * Make labels width.
	     * @param {Array.<{chartType: ?string, label: string}>} legendData legend data
	     * @param {object} theme theme object
	     * @param {number} maxWidth user option legend max width size
	     * @returns {Array.<number>} label widths
	     */
	    makeLabelWidths: function(legendData, theme, maxWidth) {
	        return snippet.map(legendData, function(item) {
	            var labelWidth = raphaelRenderUtil.getRenderedTextSize(item.label, theme.fontSize, theme.fontFamily).width;
	            if (maxWidth && labelWidth > maxWidth) {
	                labelWidth = maxWidth;
	            }

	            return labelWidth + chartConst.LEGEND_LABEL_LEFT_PADDING;
	        });
	    },

	    /**
	     * Get rendered label height
	     * @param {string} labelText label text
	     * @param {object} theme theme object
	     * @returns {number}
	     */
	    getRenderedLabelHeight: function(labelText, theme) {
	        return raphaelRenderUtil.getRenderedTextSize(labelText, theme.fontSize, theme.fontFamily).height;
	    },

	    /**
	     * Render label text and attach event
	     * @param {object} position left, top
	     * @param {object} data rendering data
	     *     @param {string} data.labelText label text
	     *     @param {number} data.labelHeight label height
	     *     @param {boolean} data.isUnselected boolean value for selected or not
	     *     @param {number} data.legendIndex legend index
	     *     @param {Array.<object>} data.legendSet legend set
	     * @private
	     */
	    _renderLabel: function(position, data) {
	        var eventBus = this.eventBus;
	        var labelTheme = this.labelTheme;
	        var pos = {
	            left: position.left,
	            top: position.top + (this._legendItemHeight / 2)
	        };

	        var attributes = {
	            fill: labelTheme.color,
	            'font-size': labelTheme.fontSize,
	            'font-family': labelTheme.fontFamily,
	            'font-weight': labelTheme.fontWeight,
	            opacity: data.isUnselected ? UNSELECTED_LEGEND_LABEL_OPACITY : 1,
	            'text-anchor': 'start'
	        };
	        var label = raphaelRenderUtil.renderText(this.paper, pos, data.labelText, attributes);

	        label.data('index', data.legendIndex);

	        label.node.style.userSelect = 'none';
	        label.node.style.cursor = 'pointer';

	        data.legendSet.push(label);

	        label.click(function() {
	            eventBus.fire('labelClicked', data.legendIndex);
	        });
	    },

	    /**
	     * Render checkbox
	     * @param {object} position left, top
	     * @param {object} data rendering data
	     */
	    _renderCheckbox: function(position, data) {
	        var self = this;
	        var checkboxSet, checkboxElement, checkElement;
	        var left = position.left;
	        var top = position.top + ((this._legendItemHeight - this._checkBoxHeight) / 2);
	        var checkboxPathSize = this._checkBoxWidth / 3;
	        var checkboxPathHalpSize = this._checkBoxWidth / 5.7;

	        var vPathString = 'M' + ((this._checkBoxWidth * 0.25) + left) + ',' + ((this._checkBoxHeight * 0.5) + top) +
	            'l' + checkboxPathHalpSize + ',' + checkboxPathHalpSize + ' l' + checkboxPathSize + ',-' + checkboxPathSize;

	        checkboxSet = this.paper.set();
	        checkboxElement = this.paper.rect(left, top, this._checkBoxWidth, this._checkBoxHeight, 0).attr({
	            fill: '#fff',
	            stroke: '#aaa',
	            'stroke-width': 1
	        });
	        checkboxElement.node.setAttribute('class', 'auto-shape-rendering');

	        checkboxSet.push(checkboxElement);

	        if (data.isChecked) {
	            checkElement = this.paper.path(vPathString).attr({
	                'stroke': '#555',
	                'stroke-width': 2
	            });
	            checkElement.node.setAttribute(
	                'class', 'auto-shape-rendering'
	            );
	            checkboxSet.push(checkElement);
	        }

	        checkboxSet.data('index', data.legendIndex);
	        checkboxSet.click(function() {
	            self.eventBus.fire('checkboxClicked', data.legendIndex);
	        });

	        checkboxSet.forEach(function(checkbox) {
	            data.legendSet.push(checkbox);
	        });
	    },

	    /**
	     * Render legend icon and attach event
	     * @param {object} position left, top
	     * @param {object} data rendering data
	     *     @param {string} data.labelText label text
	     *     @param {number} data.labelHeight label height
	     *     @param {string} data.legendColor legend color hex
	     *     @param {boolean} data.isUnselected boolean value for selected or not
	     *     @param {number} data.legendIndex legend index
	     *     @param {Array.<object>} data.legendSet legend set
	     * @private
	     */
	    _renderIcon: function(position, data) {
	        var self = this;
	        var icon;

	        this.paper.setStart();

	        if ((data.iconType === 'line' || data.iconType === 'radial') && this.paper.canvas.transform) {
	            icon = this.paper.path(chartConst.LEGEND_LINE_ICON_PATH);

	            icon.attr({
	                'stroke': data.legendColor,
	                'stroke-width': 2,
	                'stroke-opacity': data.isUnselected ? UNSELECTED_LEGEND_LABEL_OPACITY : 1
	            });
	            icon.translate(position.left, position.top);
	        } else {
	            icon = raphaelRenderUtil.renderRect(this.paper, {
	                left: position.left,
	                top: position.top + ((chartConst.LEGEND_CHECKBOX_SIZE - chartConst.LEGEND_ICON_HEIGHT) / 2),
	                width: chartConst.LEGEND_ICON_WIDTH,
	                height: chartConst.LEGEND_ICON_HEIGHT
	            }, {
	                'stroke-width': 0,
	                fill: data.legendColor,
	                opacity: data.isUnselected ? UNSELECTED_LEGEND_LABEL_OPACITY : 1
	            });
	        }

	        icon.data('icon', data.iconType);
	        icon.data('index', data.legendIndex);
	        icon.click(function() {
	            self.eventBus.fire('labelClicked', data.legendIndex);
	        });

	        data.legendSet.push(icon);
	    },

	    selectLegend: function(index, legendSet) {
	        legendSet.forEach(function(element) {
	            var indexData = element.data('index');
	            var attributeName = element.data('icon') === 'line' ? 'stroke-opacity' : 'opacity';

	            if (snippet.isNull(indexData) || snippet.isUndefined(indexData)) {
	                element.attr(attributeName, 1);
	            } else if (!snippet.isUndefined(indexData)) {
	                if (snippet.isNumber(index) && indexData !== index) {
	                    element.attr(attributeName, UNSELECTED_LEGEND_LABEL_OPACITY);
	                } else {
	                    element.attr(attributeName, 1);
	                }
	            }
	        });
	    },

	    /**
	     * get checkbox area's width depends on checkbox visibility
	     * @returns {number} - checkbox region's width
	     */
	    _getCheckboxWidth: function() {
	        return this._showCheckbox ? (this._checkBoxWidth + chartConst.LEGEND_LABEL_LEFT_PADDING) : 0;
	    },

	    /**
	     * Get width of a label when parameter is given.
	     * Otherwise, returns maximum width of labels
	     * @param {number} [index] - legend index
	     * @returns {number} - maximum label width  label width
	     */
	    _getLabelWidth: function(index) {
	        var labelWidth;
	        if (index) {
	            labelWidth = this.labelWidths[index] || 0;
	        } else {
	            labelWidth = arrayUtil.max(this.labelWidths);
	        }

	        return labelWidth;
	    },

	    /**
	     * calulate a whole legend width before start rendering
	     * @returns {number} - calculate label
	     */
	    _calculateLegendWidth: function() {
	        return this._calculateSingleLegendWidth();
	    },

	    /**
	     * calculate a single legend width of index `legendIndex`
	     * @param {number} legendIndex - index of legend label
	     * @returns {number} - calculate single legend width
	     */
	    _calculateSingleLegendWidth: function(legendIndex) {
	        return chartConst.LEGEND_AREA_H_PADDING
	            + this._getCheckboxWidth()
	            + getIconWidth()
	            + this._getLabelWidth(legendIndex)
	            + chartConst.LEGEND_AREA_H_PADDING;
	    },

	    /**
	     * set component dimension by comparaing label height and icon height
	     * @param {number} labelHeight - label height
	     */
	    _setComponentDimensionsBaseOnLabelHeight: function(labelHeight) {
	        this._legendItemHeight = Math.max(labelHeight, chartConst.LEGEND_CHECKBOX_SIZE);
	        this._checkBoxWidth = this._checkBoxHeight = chartConst.LEGEND_CHECKBOX_SIZE;
	    }
	});

	module.exports = RaphaelLegendComponent;


/***/ }),
/* 24 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileoverview RaphaelMapLegend is graph renderer for map chart legend.
	 * @author NHN Ent.
	 *         FE Development Lab <dl_javascript@nhnent.com>
	 */

	'use strict';

	var raphaelRenderUtil = __webpack_require__(5);
	var chartConst = __webpack_require__(8);
	var snippet = __webpack_require__(6);
	var renderUtil = __webpack_require__(7);
	var predicate = __webpack_require__(21);

	var DEGREE_HORIZONTAL_BAR = 360;
	var DEGREE_VERTICAL_BAR = 270;
	var WEDGE_BASE_HALF = 2.5; // half of wedge triagle base
	/**
	 * @classdesc RaphaelMapLegend is graph renderer for map chart legend.
	 * @class RaphaelMapLegend
	 * @private
	 */
	var RaphaelMapLegend = snippet.defineClass(/** @lends RaphaelMapLegend.prototype */ {
	    /**
	     * Render function of map chart legend.
	     * @param {object} param - param to render spectrum legend
	     *  @param {object} param.paper raphael paper
	     *  @param {object} param.layout legend layout
	     *  @param {ColorSpectrum} param.colorSpectrum map chart color model
	     *  @param {boolean} param.isHorizontal whether horizontal legend or not
	     *  @param {Array.<object>} param.legendSet legend set
	     */
	    render: function(param) {
	        var gradientBar;

	        var layout = param.layout;
	        var align = param.align;
	        var isHorizontal = predicate.isHorizontalLegend(align);
	        var legendSet = param.legendSet;
	        var theme = param.theme;
	        var labels = param.labels;
	        var minLabel = labels[0];
	        var maxLabel = labels[labels.length - 1];
	        var maxLabelWidth = renderUtil.getRenderedLabelsMaxWidth([minLabel, maxLabel]);
	        var labelHeight = renderUtil.getRenderedLabelHeight(minLabel, theme);
	        var isBoxTypeChart = predicate.isBoxTypeChart(this.chartType);
	        var position = layout.position;

	        this.layout = layout;
	        this.isHorizontal = isHorizontal;
	        this.isLeftLegend = predicate.isLegendAlignLeft(align);
	        this.isTopLegend = predicate.isLegendAlignTop(align);
	        this.theme = theme;
	        this.paper = param.paper;
	        this.legendSet = param.legendSet;
	        this.colorSpectrum = param.colorSpectrum;

	        if (predicate.isLegendAlignTop(align)) {
	            position.top += (
	                chartConst.MAP_LEGEND_AREA_PADDING_WIDE
	                 + labelHeight + (chartConst.MAP_LEGEND_LABEL_PADDING * 2)
	            );
	        } else if (predicate.isLegendAlignBottom(align)) {
	            position.top += this._calculateHorizontalLegendTooltipHeight(labels, theme)
	                + chartConst.MAP_LEGEND_PADDING_BTW_GRAPH_AND_WEDGE;

	            if (isBoxTypeChart) {
	                position.top -= chartConst.MAP_LEGEND_TOOLTIP_VERTICAL_PADDING;
	            } else {
	                position.top += chartConst.MAP_LEGEND_AREA_PADDING_WIDE;
	            }
	        } else if (predicate.isLegendAlignLeft(align)) {
	            position.left += maxLabelWidth + chartConst.MAP_LEGEND_LABEL_PADDING;
	        } else {
	            position.left = (layout.position.right
	                - maxLabelWidth - chartConst.MAP_LEGEND_LABEL_PADDING - chartConst.MAP_LEGEND_GRAPH_SIZE);
	        }

	        gradientBar = this._renderGradientBar(this.paper, layout, this.colorSpectrum, isHorizontal);

	        legendSet.push(gradientBar);

	        this.wedge = this._renderWedge(this.paper, position);
	        this.wedgeText = this._renderWedgeText(this.paper, position, theme);
	        legendSet.push(this.wedge);

	        this.gradientBar = gradientBar;
	    },

	    /**
	     * Render tick label
	     * @param {object} paper Raphael paper
	     * @param {object} baseData base data for render ticks
	     * @param {Array.<string>} labels labels
	     * @param {string} align legend align option
	     * @param {Array.<object>} legendSet legend set
	     */
	    renderTickLabels: function(paper, baseData, labels, align, legendSet) {
	        var theme = this.theme;
	        var attribute = {
	            'font-size': theme.fontSize,
	            'font-family': theme.fontFamily,
	            'font-weight': theme.fontWeight,
	            fill: '#000'
	        };
	        var minLabel = labels[0];
	        var maxLabel = labels[labels.length - 1];
	        var maxLabelWidth = renderUtil.getRenderedLabelsMaxWidth([minLabel, maxLabel]);
	        var labelHeight = renderUtil.getRenderedLabelHeight(minLabel, theme);

	        snippet.forEach(labels, function(label, labelIndex) {
	            var offsetValue = baseData.step * labelIndex;
	            var pos = snippet.extend({}, baseData.position);

	            if (predicate.isHorizontalLegend(align)) {
	                pos.left += offsetValue;
	                if (this.isTopLegend) {
	                    pos.top -= (labelHeight / 2);
	                } else {
	                    pos.top += (labelHeight / 2);
	                }
	            } else {
	                pos.top += offsetValue;
	                if (this.isLeftLegend) {
	                    attribute['text-anchor'] = 'end';
	                    pos.left = chartConst.CHART_PADDING + maxLabelWidth;
	                } else {
	                    attribute['text-anchor'] = 'start';
	                }
	            }

	            legendSet.push(raphaelRenderUtil.renderText(paper, pos, label, attribute));
	        }, this);
	    },

	    /**
	     * Render gradient bar.
	     * @param {object} paper raphael object
	     * @param {object} layout legend layout
	     * @param {ColorSpectrum} colorSpectrum map chart color model
	     * @param {boolean} isHorizontal whether horizontal legend or not
	     * @returns {object}
	     * @private
	     */
	    _renderGradientBar: function(paper, layout, colorSpectrum, isHorizontal) {
	        var width, height, degree, bound;

	        if (isHorizontal) {
	            width = layout.dimension.width;
	            height = chartConst.MAP_LEGEND_GRAPH_SIZE;
	            degree = DEGREE_HORIZONTAL_BAR;
	            this._makeWedghPath = this._makeHorizontalWedgePath;
	        } else {
	            width = chartConst.MAP_LEGEND_GRAPH_SIZE;
	            height = layout.dimension.height;
	            degree = DEGREE_VERTICAL_BAR;
	            this._makeWedghPath = this._makeVerticalWedgePath;
	        }

	        bound = {
	            left: layout.position.left,
	            top: layout.position.top,
	            width: width,
	            height: height
	        };

	        return raphaelRenderUtil.renderRect(paper, bound, {
	            fill: degree + '-' + colorSpectrum.start + '-' + colorSpectrum.end,
	            stroke: 'none'
	        });
	    },

	    /**
	     * Render wedge text
	     * @param {object} paper - raphael paper
	     * @param {object} position - position
	     * @param {object} theme - legend label theme
	     * @returns {SVGTextElement} - wedge text
	     */
	    _renderWedgeText: function(paper, position, theme) {
	        if (this.isLeftLegend) {
	            position.left += chartConst.MAP_LEGEND_WEDGE_SIZE + chartConst.MAP_LEGEND_TOOLTIP_HORIZONTAL_PADDING;
	        }

	        return raphaelRenderUtil.renderText(paper, position, '', {
	            'font-size': theme.fontSize,
	            'font-family': theme.fontFamily,
	            'font-weight': theme.fontWeight,
	            fill: theme.color
	        });
	    },

	    /**
	     * Render wedge.
	     * @param {object} paper raphael object
	     * @param {{top: number, left: number}} position base position of legend
	     * @returns {object} raphael object
	     * @private
	     */
	    _renderWedge: function(paper, position) {
	        return paper.path(this.verticalBasePath).attr({
	            fill: 'gray',
	            stroke: 'white',
	            'stroke-opacity': 0.2,
	            opacity: 0,
	            transform: 't' + position.left + ',' + position.top
	        });
	    },

	    /**
	     * Vertical base path
	     * @type {Array}
	     */
	    verticalRightBasePath: ['M', -4, 0, 'L', -8, 2.5, 'L', -8, 12.5, 'L', -28, 12.5, 'L', -28, -12.5, 'L', -8, -12.5, 'L', -8, -2.5],
	    verticalLeftBasePath: ['M', 10, 0, 'L', 14, 2.5, 'L', 14, 12.5, 'L', 34, 12.5, 'L', 34, -12.5, 'L', 14, -12.5, 'L', 14, -2.5],

	    /**
	     * Make vertical wedge path.
	     * @param {number} top top
	     * @param {object} labelDimension label width and height
	     * @returns {Array} path
	     * @private
	     */
	    _makeVerticalWedgePath: function(top, labelDimension) {
	        var isLeftLegend = this.isLeftLegend;
	        var path = this.verticalBasePath = isLeftLegend ? this.verticalLeftBasePath : this.verticalRightBasePath;
	        var PADDING_H = chartConst.MAP_LEGEND_TOOLTIP_HORIZONTAL_PADDING;
	        var PADDING_V = chartConst.MAP_LEGEND_TOOLTIP_VERTICAL_PADDING;
	        var labelWidth = labelDimension.width;
	        var labelHeight = labelDimension.height;

	        path[2] = top;
	        path[5] = top + WEDGE_BASE_HALF;
	        path[8] = path[11] = top + (labelHeight / 2) + PADDING_V;
	        path[14] = path[17] = top - (labelHeight / 2) - PADDING_V;
	        path[20] = top - WEDGE_BASE_HALF;

	        if (isLeftLegend) {
	            path[10] = path[13] = path[4] + labelWidth + (PADDING_H * 2);
	        } else {
	            path[10] = path[13] = path[4] - labelWidth - (PADDING_H * 2);
	        }

	        return path;
	    },

	    /**
	     * Horizontal base path
	     * @type {Array}
	     */
	    horizontalTopBasePath: ['M', 0, 10, 'L', 2.5, 14, 'L', 12.5, 14, 'L', 12.5, 34, 'L', -12.5, 34, 'L', -12.5, 14, 'L', -2.5, 14],
	    horizontalBottomBasePath: ['M', 0, -4, 'L', 2.5, -8, 'L', 12.5, -8, 'L', 12.5, -28, 'L', -12.5, -28, 'L', -12.5, -8, 'L', -2.5, -8],

	    /**
	     * Make horizontal wedge path.
	     * @param {number} left left
	     * @param {object} labelDimension label width and height
	     * @returns {Array} path
	     * @private
	     */
	    _makeHorizontalWedgePath: function(left, labelDimension) {
	        var path = this.horiziontalBaseBath = (this.isTopLegend ?
	            this.horizontalTopBasePath : this.horizontalBottomBasePath);
	        var PADDING_H = chartConst.MAP_LEGEND_TOOLTIP_HORIZONTAL_PADDING;
	        var PADDING_V = chartConst.MAP_LEGEND_TOOLTIP_VERTICAL_PADDING;
	        var labelWidth = labelDimension.width;
	        var labelHeight = labelDimension.height;

	        path[1] = left;
	        path[4] = left + WEDGE_BASE_HALF;
	        path[7] = path[10] = left + (labelWidth / 2) + PADDING_H;
	        path[13] = path[16] = left - (labelWidth / 2) - PADDING_H;
	        path[19] = left - WEDGE_BASE_HALF;

	        if (this.isTopLegend) {
	            path[11] = path[14] = path[5] + labelHeight + (PADDING_V * 2);
	        } else {
	            path[11] = path[14] = path[5] - labelHeight - (PADDING_V * 2);
	        }

	        return path;
	    },

	    /**
	     * Show wedge.
	     * @param {number} ratio value ratio beyond spectrum legend
	     * @param {string} label data value
	     */
	    showWedge: function(ratio, label) {
	        var labelTheme = this.theme;
	        var labelSize = raphaelRenderUtil.getRenderedTextSize(label, labelTheme.fontSize, labelTheme.fontFamily);
	        var legendSize = this.isHorizontal ? this.layout.dimension.width : this.layout.dimension.height;
	        var path = this._makeWedghPath(legendSize * ratio, labelSize);
	        var wedgeBBox, wedgeTextLeft, wedgeTextTop;

	        this.wedge.attr({
	            path: path,
	            opacity: 1,
	            fill: this.colorSpectrum.getColor(ratio)
	        });

	        wedgeBBox = this.wedge.getBBox();

	        wedgeTextLeft = wedgeBBox.x
	            + chartConst.MAP_LEGEND_TOOLTIP_HORIZONTAL_PADDING
	            + (labelSize.width / 2);
	        wedgeTextTop = wedgeBBox.y
	            + chartConst.MAP_LEGEND_TOOLTIP_VERTICAL_PADDING
	            + (labelSize.height / 2);

	        if (this.isLeftLegend) {
	            wedgeTextLeft += chartConst.MAP_LEGEND_WEDGE_SIZE;
	        }

	        if (this.isTopLegend) {
	            wedgeTextTop += chartConst.MAP_LEGEND_WEDGE_SIZE;
	        }

	        this.wedgeText.attr({
	            x: wedgeTextLeft,
	            y: wedgeTextTop,
	            text: label,
	            opacity: 1
	        });

	        this.wedge.toFront();
	        this.wedgeText.toFront();
	    },

	    /**
	     * Hide wedge
	     */
	    hideWedge: function() {
	        this.wedge.attr({
	            opacity: 0
	        });

	        this.wedgeText.attr({
	            opacity: 0
	        });
	    },

	    /**
	     * Remove location URL from fill attribute
	     * @private
	     */
	    removeLocationURLFromFillAttribute: function() {
	        var gradientBar = this.gradientBar;
	        var fillURL = gradientBar.node.getAttribute('fill');
	        this.locationURL = /url\('?([^#]+)#[^#]+'?\)/.exec(fillURL)[1];

	        gradientBar.node.setAttribute('fill', fillURL.replace(this.locationURL, ''));
	    },

	    /**
	     * Restore location URL to fill attribute
	     * @private
	     */
	    restoreLocationURLToFillAttribute: function() {
	        var gradientBar = this.gradientBar;
	        var fillURL = gradientBar.node.getAttribute('fill');

	        gradientBar.node.setAttribute('fill', fillURL.replace('#', this.locationURL + '#'));
	    },

	    /**
	     * Calculate tooltip area height of horizontal legend
	     * @param {Array.<string>} labels - labels
	     * @param {object} theme - legend label theme
	     * @returns {number} - tooltip height
	     * @private
	     */
	    _calculateHorizontalLegendTooltipHeight: function(labels, theme) {
	        var label = labels.length ? labels[labels.length - 1] : '';
	        var labelHeight = renderUtil.getRenderedLabelHeight(label, theme);

	        return (chartConst.MAP_LEGEND_TOOLTIP_VERTICAL_PADDING * 2)
	            + labelHeight + chartConst.MAP_LEGEND_WEDGE_SIZE;
	    },

	    /**
	     * Calculate tooltip area width of vertical legend
	     * @param {Array.<string>} labels - labels
	     * @param {object} theme - legend label theme
	     * @returns {number} - tooltip width
	     * @private
	     */
	    _calculateVerticalLegendTooltipWidth: function(labels, theme) {
	        var label = labels.length ? labels[labels.length - 1] : '';
	        var labelWidth = renderUtil.getRenderedLabelWidth(label, theme);

	        return (chartConst.MAP_LEGEND_TOOLTIP_HORIZONTAL_PADDING * 2)
	            + labelWidth + chartConst.MAP_LEGEND_WEDGE_SIZE;
	    }
	});

	module.exports = RaphaelMapLegend;


/***/ }),
/* 25 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileoverview RaphaelCircleLegend is graph renderer for circleLegend.
	 * @author NHN Ent.
	 *         FE Development Lab <dl_javascript@nhnent.com>
	 */

	'use strict';

	var raphaelRenderUtil = __webpack_require__(5);
	var snippet = __webpack_require__(6);

	/**
	 * @classdesc RaphaelCircleLegend is graph renderer for circleLegend.
	 * @class RaphaelCircleLegend
	 * @private
	 */
	var RaphaelCircleLegend = snippet.defineClass(/** @lends RaphaelCircleLegend.prototype */ {

	    /**
	     * Render circle and label.
	     * @param {object} paper paper object
	     * @param {{width: number, height: number}} layout - layout of circle legend area
	     * @param {number} maxRadius - pixel type maximum radius
	     * @param {Array.<number>} radiusRatios - radius ratios
	     * @param {Array.<string>} labels - circle legend labels
	     * @returns {Array.<object>}
	     * @private
	     */
	    render: function(paper, layout, maxRadius, radiusRatios, labels) {
	        var left = layout.position.left + (layout.dimension.width / 2);
	        var circleLegendSet = paper.set();

	        snippet.forEachArray(radiusRatios, function(ratio, index) {
	            var radius = maxRadius * ratio;
	            var top = layout.position.top + layout.dimension.height - radius;
	            var circle = raphaelRenderUtil.renderCircle(paper, {
	                left: left,
	                top: top
	            }, radius, {
	                fill: 'none',
	                opacity: 1,
	                stroke: '#888',
	                'stroke-width': 1
	            });

	            circleLegendSet.push(circle);

	            circleLegendSet.push(raphaelRenderUtil.renderText(paper, {
	                left: left,
	                top: top - radius - 5
	            }, labels[index]));
	        });

	        return circleLegendSet;
	    }
	});

	module.exports = RaphaelCircleLegend;


/***/ }),
/* 26 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileoverview Raphael title renderer.
	 * @author NHN Ent.
	 *         FE Development Lab <dl_javascript@nhnent.com>
	 */

	'use strict';

	var raphaelRenderUtil = __webpack_require__(5);
	var chartConst = __webpack_require__(8);
	var snippet = __webpack_require__(6);

	var RaphaelTitleComponent = snippet.defineClass(/** @lends RaphaelTitleComponent.prototype */ {
	    /**
	     * Render title
	     * @param {object} paper - paper
	     * @param {string} titleText - title text
	     * @param {{x: number, y: number}} offset - title offset x, y
	     * @param {object} theme - theme object
	     * @returns {Array.<object>} title set
	     */
	    render: function(paper, titleText, offset, theme) {
	        var fontSize = theme.fontSize;
	        var fontFamily = theme.fontFamily;
	        var titleSize = raphaelRenderUtil.getRenderedTextSize(titleText, fontSize, fontFamily);
	        var pos = {
	            left: chartConst.CHART_PADDING + (titleSize.width / 2),
	            top: chartConst.CHART_PADDING + (titleSize.height / 2) // for renderText's baseline
	        };
	        var titleSet = paper.set();

	        if (offset) {
	            if (offset.x) {
	                pos.left += offset.x;
	            } else if (offset.y) {
	                pos.top += offset.y;
	            }
	        }

	        titleSet.push(raphaelRenderUtil.renderText(paper, pos, titleText, {
	            'font-family': theme.fontFamily,
	            'font-size': theme.fontSize,
	            'font-weight': theme.fontWeight,
	            fill: theme.color,
	            'text-anchor': 'middle'
	        }));

	        return titleSet;
	    },
	    /**
	     * Resize title component
	     * @param {number} chartWidth chart width
	     * @param {Array.<object>} titleSet title set
	     */
	    resize: function(chartWidth, titleSet) {
	        titleSet.attr({
	            x: chartWidth / 2
	        });
	    }
	});

	module.exports = RaphaelTitleComponent;


/***/ }),
/* 27 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileoverview Raphael title renderer.
	 * @author NHN Ent.
	 *         FE Development Lab <dl_javascript@nhnent.com>
	 */

	'use strict';

	var raphaelRenderUtil = __webpack_require__(5);
	var AXIS_BACKGROUND_RIGHT_PADDING = 4;
	var snippet = __webpack_require__(6);
	var Y_AXIS_TITLE_PADDING = __webpack_require__(8).Y_AXIS_TITLE_PADDING;

	var RaphaelAxisComponent = snippet.defineClass(/** @lends RaphaelAxisComponent.prototype */ {
	    init: function() {
	        this.ticks = [];
	    },

	    /**
	     * Render background with plot background color
	     * @param {object} paper Raphael paper
	     * @param {object} position axis position
	     * @param {object} dimension axis dimension
	     * @param {object} theme chart theme
	     * @returns {Element} - raphael <rect> element
	     * @private
	     */
	    renderBackground: function(paper, position, dimension, theme) {
	        var background = ((theme && theme.background) || {});
	        var fillColor = (background.color || '#fff');
	        var opacity = (background.opacity || 1);

	        return raphaelRenderUtil.renderRect(paper, {
	            left: 0,
	            top: position.top,
	            width: dimension.width + position.left - AXIS_BACKGROUND_RIGHT_PADDING,
	            height: dimension.height
	        }, {
	            fill: fillColor,
	            opacity: opacity,
	            'stroke-width': 0
	        });
	    },

	    /**
	     * Render title
	     * @param {object} paper raphael paper
	     * @param {object} data rendering data
	     * @param {string} data.text text content
	     * @param {object} data.theme theme object
	     * @param {object} data.rotationInfo object
	     * @param {object} data.layout dimension and position
	     */
	    renderTitle: function(paper, data) {
	        var theme = data.theme;
	        var textAnchor = this.getRenderTitleAnchor(data.rotationInfo);
	        var attributes = {
	            'dominant-baseline': 'auto',
	            'font-family': theme.fontFamily,
	            'font-size': theme.fontSize,
	            'font-weight': theme.fontWeight,
	            fill: theme.color,
	            transform: 'none',
	            'text-anchor': textAnchor
	        };
	        var position = this.calculatePosition(paper, data);
	        var title = raphaelRenderUtil.renderText(paper, position, data.text, attributes);

	        title.node.style.userSelect = 'none';
	        title.node.style.cursor = 'default';

	        data.set.push(title);
	    },

	    /**
	     * Get title anchor
	     * @param {object} rotationInfo - isCenter, isVertical, isPositionRight
	     * @returns {string} textAnchor - middle or end or start
	     */
	    getRenderTitleAnchor: function(rotationInfo) {
	        var textAnchor = 'middle';
	        if (rotationInfo.isPositionRight) {
	            textAnchor = 'end';
	        } else if (rotationInfo.isVertical && !rotationInfo.isCenter) {
	            textAnchor = 'start';
	        }

	        return textAnchor;
	    },

	    /**
	     * Render Axis label
	     * @param {object} data data for render label
	     *       @param {{
	     *           left: number,
	     *           top: number
	     *       }} data.positionTopAndLeft left, top positions
	     *       @param {string} data.labelText label text
	     *       @param {number} data.labelSize label size
	     *       @param {object} data.paper raphael paper
	     *       @param {boolean} data.isVertical boolean value of axis is vertical
	     *       @param {boolean} data.isPositionRight boolean value of axis is right yAxis
	     *       @param {object} data.theme theme of label
	     */
	    renderLabel: function(data) {
	        var positionTopAndLeft = data.positionTopAndLeft;
	        var labelText = data.labelText;
	        var paper = data.paper;
	        var theme = data.theme;
	        var attributes = {
	            'dominant-baseline': 'central',
	            'font-family': theme.fontFamily,
	            'font-size': theme.fontSize,
	            'font-weight': theme.fontWeight,
	            fill: theme.color
	        };
	        var textObj;

	        if (data.isPositionRight) {
	            attributes['text-anchor'] = 'end';
	        } else if (data.isVertical && !data.isCenter) {
	            attributes['text-anchor'] = 'start';
	        } else {
	            attributes['text-anchor'] = 'middle';
	        }

	        textObj = raphaelRenderUtil.renderText(paper, positionTopAndLeft, labelText, attributes);

	        textObj.node.style.userSelect = 'none';
	        textObj.node.style.cursor = 'default';

	        data.set.push(textObj);
	        this.ticks.push(textObj);
	    },

	    /**
	     * Render rotated Axis label
	     * @param {object} data data for render rotated label
	     *       @param {{
	     *           left: number,
	     *           top: number
	     *       }} data.positionTopAndLeft left, top positions
	     *       @param {string} data.labelText label text
	     *       @param {object} data.paper raphael paper
	     *       @param {boolean} data.isVertical boolean value of axis is vertical
	     *       @param {object} data.theme theme of label
	     *       @param {number} data.degree rotation degree
	     */
	    renderRotatedLabel: function(data) {
	        var positionTopAndLeft = data.positionTopAndLeft;
	        var labelText = data.labelText;
	        var paper = data.paper;
	        var theme = data.theme;
	        var textObj = raphaelRenderUtil.renderText(paper, positionTopAndLeft, labelText, {
	            'dominant-baseline': 'central',
	            'font-family': theme.fontFamily,
	            'font-size': theme.fontSize,
	            'font-weight': theme.fontWeight,
	            fill: theme.color,
	            'text-anchor': 'end',
	            transform: 'r' + (-data.degree) + ',' + (positionTopAndLeft.left) + ',' + (positionTopAndLeft.top)
	        });

	        textObj.node.style.userSelect = 'none';
	        textObj.node.style.cursor = 'arrow';

	        data.set.push(textObj);
	        this.ticks.push(textObj);
	    },

	    /**
	     * Render ticks on given paper
	     * @param {object} data data for rendering ticks
	     */
	    renderTicks: function(data) {
	        var self = this;
	        var paper = data.paper;
	        var positions = data.positions;
	        var additionalSize = data.additionalSize;
	        var isVertical = data.isVertical;
	        var isCenter = data.isCenter;
	        var isPositionRight = data.isPositionRight;
	        var tickColor = data.tickColor;
	        var layout = data.layout;
	        var rightEdgeOfAxis = layout.position.left + layout.dimension.width;
	        var baseTop = layout.position.top;
	        var baseLeft = layout.position.left;
	        var tick;
	        var isContainDivensionArea = function(position) {
	            var compareType = isVertical ? 'height' : 'width';

	            return (position > layout.dimension[compareType]);
	        };

	        snippet.forEach(positions, function(position) {
	            var pathString = 'M';

	            position += additionalSize;

	            if (isContainDivensionArea(position)) {
	                return;
	            }

	            if (isVertical) {
	                if (isCenter) {
	                    pathString += baseLeft + ',' + (baseTop + position);
	                    pathString += 'H' + (baseLeft + 5);

	                    pathString += 'M' + rightEdgeOfAxis + ',' + (baseTop + position);
	                    pathString += 'H' + (rightEdgeOfAxis - 5);
	                } else if (isPositionRight) {
	                    pathString += baseLeft + ',' + (baseTop + position);
	                    pathString += 'H' + (baseLeft + 5);
	                } else {
	                    pathString += rightEdgeOfAxis + ',' + (baseTop + position);
	                    pathString += 'H' + (rightEdgeOfAxis - 5);
	                }
	            } else {
	                pathString += (baseLeft + position) + ',' + baseTop;
	                pathString += 'V' + (baseTop + 5);
	            }

	            if (!isNaN(position)) {
	                tick = paper.path(pathString).attr({
	                    stroke: tickColor,
	                    opacity: 0.5
	                });
	                data.set.push(tick);
	                self.ticks.push(tick);
	            }
	        });
	    },

	    /**
	     * Render tick line  on given paper
	     * @param {number} data data for render tick line
	     * @param {number} data.areaSize area size width or height
	     * @param {object} data.paper raphael paper
	     * @param {boolean} data.isVertical boolean value of vertical axis or not
	     */
	    renderStandardLine: function(data) {
	        var lineSize = data.areaSize;
	        var paper = data.paper;
	        var layout = data.layout;
	        var isVertical = data.isVertical;
	        var pathString = 'M';
	        var baseTop = layout.position.top;
	        var baseLeft = layout.position.left;
	        var rightEdgeOfAxis = baseLeft + layout.dimension.width;
	        var lineStartYCoord, lineEndXCoord, lineEndYCoord;
	        var minAbs = Math.abs(data.axisLimit.min);
	        var maxAbs = Math.abs(data.axisLimit.max);
	        var standardRatio = 1 - (maxAbs / (minAbs + maxAbs));

	        if (isVertical) {
	            lineStartYCoord = baseTop;
	            rightEdgeOfAxis += data.seriesDimension.width * standardRatio;
	            pathString += rightEdgeOfAxis + ',' + lineStartYCoord;
	            lineEndYCoord = baseTop + lineSize;
	            pathString += 'V' + lineEndYCoord;
	        } else {
	            pathString += baseLeft;
	            baseTop -= data.seriesDimension.height * standardRatio;
	            pathString += ',' + baseTop + 'H';
	            lineEndXCoord = (baseLeft + lineSize);
	            pathString += lineEndXCoord;
	        }

	        data.set.push(paper.path(pathString).attr({
	            'stroke-width': 1,
	            opacity: 0.5
	        }));
	    },

	    /**
	     * Render tick line  on given paper
	     * @param {number} data data for render tick line
	     * @param {number} data.areaSize area size width or height
	     * @param {object} data.paper raphael paper
	     * @param {boolean} data.isNotDividedXAxis boolean value for XAxis divided or not
	     * @param {number} data.additionalSize additional size for position and line length
	     * @param {number} data.additionalWidth additional width of tick line paper
	     * @param {number} data.additionalHeight additional height of tick line paper
	     * @param {boolean} data.isPositionRight boolean value of right yAxis or not
	     * @param {boolean} data.isCenter boolean value of center yAxis or not
	     * @param {boolean} data.isVertical boolean value of vertical axis or not
	     */
	    renderTickLine: function(data) {
	        var areaSize = data.areaSize;
	        var lineSize = areaSize;
	        var paper = data.paper;
	        var layout = data.layout;
	        var isNegativeStandard = data.isNegativeStandard;
	        var isNotDividedXAxis = data.isNotDividedXAxis;
	        var additionalSize = data.additionalSize;
	        var isPositionRight = data.isPositionRight;
	        var isCenter = data.isCenter;
	        var isVertical = data.isVertical;
	        var tickColor = data.tickColor;
	        var pathString = 'M';
	        var baseTop = layout.position.top;
	        var baseLeft = layout.position.left;
	        var verticalTickLineEndYCoord = layout.dimension.height + baseTop;
	        var rightEdgeOfAxis = baseLeft + layout.dimension.width;
	        var lineStartYCoord, lineEndXCoord, lineEndYCoord;

	        if (isPositionRight) {
	            pathString += baseLeft + ',' + baseTop;
	            pathString += 'V' + verticalTickLineEndYCoord;
	        } else if (isVertical) {
	            lineStartYCoord = baseTop;
	            if (isNegativeStandard) {
	                rightEdgeOfAxis += data.seriesDimension.width / 2;
	            }

	            pathString += rightEdgeOfAxis + ',' + lineStartYCoord;

	            if (isCenter) {
	                pathString += 'V' + verticalTickLineEndYCoord;
	                pathString += 'M' + baseLeft + ',' + lineStartYCoord;
	                pathString += 'V' + verticalTickLineEndYCoord;
	            } else {
	                lineEndYCoord = baseTop + lineSize;
	                pathString += 'V' + lineEndYCoord;
	            }
	        } else {
	            if (isNotDividedXAxis) {
	                pathString += baseLeft;
	            } else {
	                pathString += (baseLeft + additionalSize);
	            }

	            if (isNegativeStandard) {
	                baseTop -= data.seriesDimension.height / 2;
	            }

	            pathString += ',' + baseTop + 'H';

	            lineEndXCoord = (baseLeft + lineSize);

	            if (!isNotDividedXAxis) {
	                lineEndXCoord += additionalSize;
	            }

	            pathString += lineEndXCoord;
	        }

	        data.set.push(paper.path(pathString).attr({
	            'stroke-width': 1,
	            stroke: tickColor,
	            opacity: 0.5
	        }));
	    },

	    /**
	     * Animate ticks for adding data
	     * @param {number} tickSize tick size of moving
	     */
	    animateForAddingData: function(tickSize) {
	        snippet.forEach(this.ticks, function(tick) {
	            tick.animate({
	                transform: 't-' + tickSize + ',0'
	            }, 300);
	        });
	    },

	    /**
	     * Calculate axis title position, and transforma
	     * @param {Raphael.paper} paper - paper
	     * @param {object} data - options for calcultating title position
	     *  @param {object} data.rotationInfo - isCenter, isVertical, isPositionRight
	     *  @param {object} data.text - text
	     *  @param {object} data.theme - theme
	     *  @param {object} data.layout - layout
	     * @returns {object} position - top, left
	     */
	    calculatePosition: function(paper, data) {
	        var rotationInfo = data.rotationInfo;
	        var textHeight = getTextHeight(data.text, data.theme);
	        var textWidth = getTextWidth(data.text, data.theme);
	        var layout = data.layout;
	        var axisHeight = layout.dimension.height;
	        var axisWidth = layout.dimension.width;
	        var left = layout.position.left + data.additionalWidth;
	        var top = layout.position.top;
	        var adjustLeftPosition = (textWidth / 2) - data.otherSideDimension.width;
	        var position = {
	            top: top + axisHeight - (textHeight / 2),
	            left: left + ((adjustLeftPosition < 0) ? 0 : adjustLeftPosition)
	        };

	        if (rotationInfo.isVertical) {
	            if (rotationInfo.isCenter) {
	                position.top += (textHeight / 2);
	                position.left = left + (axisWidth / 2);
	            } else if (!rotationInfo.isDiverging) {
	                position.top = top - (textHeight / 2) - Y_AXIS_TITLE_PADDING;
	            }
	        } else if (!rotationInfo.isVertical) {
	            if (rotationInfo.isDiverging && rotationInfo.isYAxisCenter) {
	                position.left = left + (data.areaSize / 2);
	            } else if (rotationInfo.isDiverging && !rotationInfo.isYAxisCenter) {
	                position.left = left + (axisWidth / 2);
	            } else if (rotationInfo.isColumnType) {
	                position.left = left + (axisWidth / (data.tickCount - 1) / 2);
	            }
	        }

	        if (rotationInfo.isPositionRight) {
	            position.left += axisWidth;
	        }

	        if (!rotationInfo.isCenter) {
	            addOffset(position, data.offset);
	        }

	        return position;
	    }
	});

	/**
	 * Get a text height by theme
	 * @param {string} text - text
	 * @param {object} theme - axis theme
	 * @returns {number} text height
	 * @ignore
	 */
	function getTextHeight(text, theme) {
	    var titleSize = raphaelRenderUtil.getRenderedTextSize(text, theme.fontSize, theme.fontFamily);

	    return titleSize.height;
	}

	/**
	 * Get a text width by theme
	 * @param {string} text - text
	 * @param {object} theme - axis theme
	 * @returns {number} text width
	 * @ignore
	 */
	function getTextWidth(text, theme) {
	    var titleSize = raphaelRenderUtil.getRenderedTextSize(text, theme.fontSize, theme.fontFamily);

	    return titleSize.width;
	}

	/**
	 * Add offset to position
	 * @param {object} position - top, left
	 * @param {object} offset - x, y
	 * @ignore
	 */
	function addOffset(position, offset) {
	    if (!offset) {
	        return;
	    }

	    if (offset.x) {
	        position.left += offset.x;
	    }
	    if (offset.y) {
	        position.top += offset.y;
	    }
	}

	module.exports = RaphaelAxisComponent;


/***/ }),
/* 28 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileoverview RaphaelRadialPlot is graph renderer for radial plot.
	 * @author NHN Ent.
	 *         FE Development Lab <dl_javascript@nhnent.com>
	 */

	'use strict';

	var raphaelRenderUtil = __webpack_require__(5);
	var arrayUtil = __webpack_require__(10);
	var snippet = __webpack_require__(6);

	var STEP_TOP_ADJUSTMENT = 8;
	var STEP_LEFT_ADJUSTMENT = 3;

	/**
	 * @classdesc RaphaelRadialPlot is graph renderer for radial plot.
	 * @class RaphaelRadialPlot
	 * @private
	 */
	var RaphaelRadialPlot = snippet.defineClass(/** @lends RaphaelRadialPlot.prototype */ {
	    /**
	     * Render function of map chart legend.
	     * @param {object} params parameters
	     * @param {HTMLElement} params.container container
	     * @param {{width: number, height: number}} params.dimension - dimension of circle legend area
	     * @param {Array<Array>} params.plotPositions plot positions
	     * @param {object} params.labelData label data
	     * @returns {object} paper raphael paper
	     */
	    render: function(params) {
	        var plotSet = params.paper.set();

	        this.paper = params.paper;
	        this.layout = params.layout;
	        this.plotPositions = params.plotPositions;
	        this.theme = params.theme;
	        this.options = params.options;
	        this.labelData = params.labelData;

	        this._renderPlot(plotSet);
	        this._renderLabels(plotSet);

	        plotSet.toBack();
	        this.paper.pushDownBackgroundToBottom();

	        return plotSet;
	    },

	    /**
	     * Render plot component
	     * @param {Array.<object>} plotSet plot set
	     * @private
	     */
	    _renderPlot: function(plotSet) {
	        if (this.options.type === 'circle') {
	            this._renderCirclePlot(plotSet);
	        } else {
	            this._renderSpiderwebPlot(plotSet);
	        }

	        this._renderCategoryDots(plotSet);
	    },

	    /**
	     * Render spider web plot
	     * @param {Array.<object>} plotSet plot set
	     * @private
	     */
	    _renderSpiderwebPlot: function(plotSet) {
	        var groupPaths = this._getLinesPath(this.plotPositions);

	        this._renderLines(groupPaths, this.theme.lineColor, plotSet);
	    },

	    /**
	     * Render circle plot
	     * @param {Array.<object>} plotSet plot set
	     * @private
	     */
	    _renderCirclePlot: function(plotSet) {
	        var i, pos, radius;
	        var plotPositions = this.plotPositions;
	        var centerPoint = plotPositions[0][0];
	        var strokeColor = this.theme.lineColor;

	        for (i = 1; i < plotPositions.length; i += 1) {
	            pos = plotPositions[i][0];
	            radius = centerPoint.top - pos.top;

	            plotSet.push(raphaelRenderUtil.renderCircle(this.paper, centerPoint, radius, {
	                stroke: strokeColor,
	                'stroke-opacity': 0.05
	            }));
	        }
	    },

	    /**
	     * Render category lines
	     * @param {Array.<object>} plotSet plot set
	     * @private
	     */
	    _renderCategoryDots: function(plotSet) {
	        var bounds = this._makePlotDotBounds(arrayUtil.pivot(this.plotPositions));

	        snippet.forEachArray(bounds, function(bound) {
	            var squareDot = raphaelRenderUtil.renderRect(this.paper, bound, {
	                fill: '#000000',
	                'fill-opacity': 0.5,
	                'stroke-width': 0
	            });
	            plotSet.push(squareDot);
	        }, this);
	    },

	    _makePlotDotBounds: function(plotPositions) {
	        var bounds = snippet.map(plotPositions, function(positions) {
	            var outMostPlot = positions[positions.length - 1];
	            var bound = {
	                top: outMostPlot.top - 2,
	                left: outMostPlot.left - 2,
	                width: 4,
	                height: 4
	            };

	            return bound;
	        });
	        bounds.pop();

	        return bounds;
	    },

	    /**
	     * Render labels
	     * @param {Array.<object>} plotSet plot set
	     * @private
	     */
	    _renderLabels: function(plotSet) {
	        var paper = this.paper;
	        var theme = this.theme;
	        var labelData = this.labelData;
	        var attributes = {
	            fill: theme.lineColor,
	            'font-size': theme.label.fontSize,
	            'font-family': theme.label.fontFamily,
	            'text-anchor': 'end',
	            'font-weight': '100',
	            'dominant-baseline': 'middle'
	        };

	        snippet.forEachArray(labelData.category, function(item) {
	            var categoryAttributes = snippet.extend({}, attributes, {
	                'text-anchor': item.position.anchor,
	                fill: '#333333'
	            });
	            var label = raphaelRenderUtil.renderText(paper, item.position, item.text, categoryAttributes);

	            label.node.style.userSelect = 'none';
	            label.node.style.cursor = 'default';

	            plotSet.push(label);
	        });

	        snippet.forEachArray(labelData.step, function(item) {
	            var stepLabel = raphaelRenderUtil.renderText(paper, item.position, item.text, attributes);

	            item.position.top -= STEP_TOP_ADJUSTMENT;
	            item.position.left -= STEP_LEFT_ADJUSTMENT;

	            stepLabel.node.style.userSelect = 'none';
	            stepLabel.node.style.cursor = 'default';

	            plotSet.push(stepLabel);
	        });
	    },

	    /**
	     * Render lines.
	     * @param {Array.<Array.<string>>} groupPaths paths
	     * @param {string} lineColor line color
	     * @param {Array.<object>} plotSet plot set
	     * @returns {Array.<Array.<object>>} lines
	     * @private
	     */
	    _renderLines: function(groupPaths, lineColor, plotSet) {
	        var paper = this.paper;

	        return snippet.map(groupPaths, function(path) {
	            var line = raphaelRenderUtil.renderLine(paper, path.join(' '), lineColor, 1);
	            line.node.setAttribute('stroke-opacity', 0.05);

	            plotSet.push(line);

	            return line;
	        });
	    },

	    /**
	     * Get lines path.
	     * /todo remove duplication, copied from raphaelLineTypeBase
	     * @param {Array.<Array.<{left: number, top: number, startTop: number}>>} groupPositions positions
	     * @returns {Array.<Array.<string>>} path
	     * @private
	     */
	    _getLinesPath: function(groupPositions) {
	        var self = this;

	        return snippet.map(groupPositions, function(positions) {
	            return self._makeLinesPath(positions);
	        });
	    },

	    /**
	     * Make lines path.
	     * /todo remove duplication, copied from raphaelLineTypeBase
	     * @param {Array.<{left: number, top: number, startTop: number}>} positions positions
	     * @param {?string} [posTopType='top'] position top type
	     * @param {boolean} [connectNulls] - boolean value connect nulls or not
	     * @returns {Array.<string | number>} paths
	     * @private
	     */
	    _makeLinesPath: function(positions, posTopType, connectNulls) {
	        var path = [];
	        var prevMissing = false;

	        posTopType = posTopType || 'top';

	        snippet.map(positions, function(position) {
	            var pathCommand = (prevMissing && !connectNulls) ? 'M' : 'L';

	            if (position) {
	                path.push([pathCommand, position.left, position[posTopType]]);
	                if (prevMissing) {
	                    prevMissing = false;
	                }
	            } else {
	                prevMissing = true;
	            }
	        });

	        path = Array.prototype.concat.apply([], path);
	        path[0] = 'M';

	        return path;
	    }
	});

	module.exports = RaphaelRadialPlot;


/***/ }),
/* 29 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileoverview chart.js is entry point of Toast UI Chart.
	 * @author NHN Ent.
	 *         FE Development Lab <dl_javascript@nhnent.com>
	 */

	'use strict';

	var chartConst = __webpack_require__(8);
	var chartFactory = __webpack_require__(30);
	var pluginFactory = __webpack_require__(32);
	var themeManager = __webpack_require__(33);
	var mapManager = __webpack_require__(35);
	var objectUtil = __webpack_require__(36);
	var seriesDataImporter = __webpack_require__(37);
	var drawingToolPicker = __webpack_require__(38);

	__webpack_require__(39);
	__webpack_require__(40);
	__webpack_require__(146);

	/**
	 * Raw series datum.
	 * @typedef {{name: ?string, data: Array.<number>, stack: ?string}} rawSeriesDatum
	 * @private
	 */

	/**
	 * Raw series data.
	 * @typedef {Array.<rawSeriesDatum>} rawSeriesData
	 * @private
	 */

	/**
	 * Raw data.
	 * @typedef {{
	 *      categories: ?Array.<string>,
	 *      series: (rawSeriesData|{line: ?rawSeriesData, column: ?rawSeriesData})
	 * }} rawData
	 * @private
	 */

	/**
	 * Create chart.
	 * @param {HTMLElement} container container
	 * @param {({
	 *        series: (object|Array),
	 *        categories: Array
	 *   }|{
	 *        table: ({
	 *          elementId: string
	 *        }|{
	 *          element: HTMLElement
	 *        })
	 *   })} rawData - raw data object or data container table element or table's id
	 * @param {{
	 *   chart: {
	 *     width: number,
	 *     height: number,
	 *     title: string,
	 *     format: string
	 *   },
	 *   yAxis: {
	 *     title: string,
	 *     min: number
	 *   },
	 *   xAxis: {
	 *     title: string,
	 *     min: number
	 *   },
	 *   tooltip: {
	 *     suffix: string,
	 *     template: function
	 *   },
	 *   theme: string
	 * }} options - chart options
	 * @param {string} chartType - chart type
	 * @returns {object} chart instance.
	 * @private
	 * @ignore
	 */
	function _createChart(container, rawData, options, chartType) {
	    var theme, chart, temp;

	    if (!rawData) {
	        rawData = {};
	    }

	    if (rawData.table) {
	        rawData = seriesDataImporter.makeDataWithTable(rawData.table);
	    }

	    if (!rawData.series) {
	        rawData.series = [];
	    }

	    rawData = objectUtil.deepCopy(rawData);

	    if (chartType !== 'combo') {
	        temp = rawData.series;
	        rawData.series = {};
	        rawData.series[chartType] = temp;
	    }

	    options = options ? objectUtil.deepCopy(options) : {};
	    options.chartType = chartType;
	    options.theme = options.theme || chartConst.DEFAULT_THEME_NAME;
	    theme = themeManager.get(options.theme, chartType, rawData.series);

	    chart = chartFactory.get(options.chartType, rawData, theme, options);

	    chart.render(container);
	    chart.animateChart();

	    return chart;
	}

	/**
	 * Bar chart creator.
	 * @memberof module:chart
	 * @memberof tui.chart
	 * @param {HTMLElement} container - chart container
	 * @param {rawData} rawData - raw data
	 *      @param {Array.<string>} rawData.categories - categories
	 *      @param {Array.<Array>} rawData.series - series data
	 * @param {object} options - chart options
	 *      @param {object} options.chart - base options for chart
	 *          @param {number} options.chart.width - chart width
	 *          @param {number} options.chart.height - chart height
	 *          @param {string | object} options.chart.title - title text or title object
	 *              @param {string} options.chart.title.text - title text
	 *              @param {number} options.chart.title.offsetX - title offset x
	 *              @param {number} options.chart.title.offsetY - title offset y
	 *          @param {string | function} options.chart.format - formatter for value
	 *      @param {object} options.yAxis - options for y axis component
	 *          @param {string | object} options.yAxis.title - title text or title object
	 *              @param {string} options.yAxis.title.text - title text
	 *              @param {number} options.yAxis.title.offsetX - title offset x
	 *              @param {number} options.yAxis.title.offsetY - title offset y
	 *          @param {number} options.yAxis.labelMargin - label margin for y axis
	 *          @param {string} options.yAxis.align - align option for center y axis
	 *          @param {string} options.yAxis.type - type of axis
	 *          @param {string} options.yAxis.dateFormat - date format
	 *      @param {object} options.xAxis - options for x axis component
	 *          @param {string | object} options.xAxis.title - title text or title object
	 *              @param {string} options.xAxis.title.text - title text
	 *              @param {number} options.xAxis.title.offsetX - title offset x
	 *              @param {number} options.xAxis.title.offsetY - title offset y
	 *          @param {number} options.xAxis.labelMargin - label margin for x axis
	 *          @param {number} options.xAxis.min - minimum value for x axis
	 *          @param {number} options.xAxis.max - maximum value for x axis
	 *      @param {object} options.series - options for series component
	 *          @param {string} options.series.stackType - type of stack
	 *          @param {boolean} options.series.showLabel - whether show label or not
	 *          @param {number} options.series.barWidth - bar width
	 *          @param {boolean} options.series.allowSelect - whether allow select or not
	 *          @param {boolean} options.series.diverging - whether diverging or not
	 *      @param {object} options.tooltip - options for tooltip component
	 *          @param {string} options.tooltip.suffix - suffix for tooltip
	 *          @param {function} [options.tooltip.template] - template for tooltip
	 *          @param {string} options.tooltip.align - align option for tooltip
	 *          @param {object} options.tooltip.offsetX - tooltip offset x
	 *          @param {object} options.tooltip.offsetY - tooltip offset y
	 *          @param {boolean} options.tooltip.grouped - whether group tooltip or not
	 *      @param {object} options.legend - options for legend component
	 *          @param {string} options.legend.align - align option for legend (top|bottom|left)
	 *          @param {boolean} options.legend.showCheckbox - whether show checkbox or not (default: true)
	 *          @param {boolean} options.legend.visible - whether visible or not (default: true)
	 *          @param {number} options.legend.maxWidth - legend name display max width
	 *      @param {object} options.plot - options for plot component
	 *          @param {boolean} options.plot.showLine - whether show line or not (default: true)
	 *      @param {string} options.theme - theme name
	 *      @param {string} options.libType - type of graph library
	 * @returns {object} bar chart
	 * @api
	 * @example
	 * var chart = tui.chart; // or require('tui-chart');
	 * var container = document.getElementById('container-id'),
	 *     rawData = {
	 *       categories: ['cate1', 'cate2', 'cate3'],
	 *       series: [
	 *         {
	 *           name: 'Legend1',
	 *           data: [20, 30, 50]
	 *         },
	 *         {
	 *           name: 'Legend2',
	 *           data: [40, 40, 60]
	 *         },
	 *         {
	 *           name: 'Legend3',
	 *           data: [60, 50, 10]
	 *         },
	 *         {
	 *           name: 'Legend4',
	 *           data: [80, 10, 70]
	 *         }
	 *       ]
	 *     },
	 *     options = {
	 *       chart: {
	 *         title: 'Bar Chart'
	 *       },
	 *       yAxis: {
	 *         title: 'Y Axis'
	 *       },
	 *       xAxis: {
	 *         title: 'X Axis'
	 *       }
	 *     };
	 * chart.barChart(container, rawData, options);
	 */
	function barChart(container, rawData, options) {
	    return _createChart(container, rawData, options, chartConst.CHART_TYPE_BAR);
	}

	/**
	 * Column chart creator.
	 * @memberof module:chart
	 * @memberof tui.chart
	 * @param {HTMLElement} container - chart container
	 * @param {rawData} rawData - raw data
	 *      @param {Array.<string>} rawData.categories - categories
	 *      @param {Array.<Array>} rawData.series - series data
	 * @param {object} options - chart options
	 *      @param {object} options.chart - base options for chart
	 *          @param {number} options.chart.width - chart width
	 *          @param {number} options.chart.height - chart height
	 *          @param {string | object} options.chart.title - title text or title object
	 *              @param {string} options.chart.title.text - title text
	 *              @param {number} options.chart.title.offsetX - title offset x
	 *              @param {number} options.chart.title.offsetY - title offset y
	 *          @param {string | function} options.chart.format - formatter for value
	 *      @param {object} options.yAxis - options for y axis component
	 *          @param {string | object} options.yAxis.title - title text or title object
	 *              @param {string} options.yAxis.title.text - title text
	 *              @param {number} options.yAxis.title.offsetX - title offset x
	 *              @param {number} options.yAxis.title.offsetY - title offset y
	 *          @param {number} options.yAxis.labelMargin - label margin for y axis
	 *          @param {number} options.yAxis.min - minimum value for y axis
	 *          @param {number} options.yAxis.max - maximum value for y axis
	 *      @param {object} options.xAxis - options for x axis component
	 *          @param {string | object} options.xAxis.title - title text or title object
	 *              @param {string} options.xAxis.title.text - title text
	 *              @param {number} options.xAxis.title.offsetX - title offset x
	 *              @param {number} options.xAxis.title.offsetY - title offset y
	 *          @param {number} options.xAxis.labelMargin - label margin for x axis
	 *          @param {number} options.xAxis.labelInterval - label interval for x axis
	 *          @param {boolean} options.xAxis.rotateLabel - whether rotate label or not (default: true)
	 *          @param {string} options.xAxis.type - type of axis
	 *          @param {string} options.xAxis.dateFormat - date format
	 *      @param {object} options.series - options for series component
	 *          @param {string} options.series.stackType - type of stack
	 *          @param {boolean} options.series.showLabel - whether show label or not
	 *          @param {number} options.series.barWidth - bar width
	 *          @param {boolean} options.series.allowSelect - whether allow select or not
	 *          @param {boolean} options.series.diverging - whether diverging or not
	 *      @param {object} options.tooltip - options for tooltip component
	 *          @param {string} options.tooltip.suffix - suffix for tooltip
	 *          @param {function} [options.tooltip.template] - template for tooltip
	 *          @param {string} options.tooltip.align - align option for tooltip
	 *          @param {object} options.tooltip.offsetX - tooltip offset x
	 *          @param {object} options.tooltip.offsetY - tooltip offset y
	 *          @param {boolean} options.tooltip.grouped - whether group tooltip or not
	 *      @param {object} options.legend - options for legend component
	 *          @param {string} options.legend.align - align option for legend (top|bottom|left)
	 *          @param {boolean} options.legend.showCheckbox - whether show checkbox or not (default: true)
	 *          @param {boolean} options.legend.visible - whether visible or not (default: true)
	 *          @param {number} options.legend.maxWidth - legend name display max width
	 *      @param {object} options.plot - options for plot component
	 *          @param {boolean} options.plot.showLine - whether show line or not (default: true)
	 *      @param {string} options.theme - theme name
	 *      @param {string} options.libType - type of graph library
	 *      @param {object} options.chartExportMenu - options for exporting
	 *          @param {string} options.chartExportMenu.filename - export file name
	 * @returns {object} column chart
	 * @api
	 * @example
	 * var chart = tui.chart; // or require('tui-chart');
	 * var container = document.getElementById('container-id'),
	 *     rawData = {
	 *       categories: ['cate1', 'cate2', 'cate3'],
	 *       series: [
	 *         {
	 *           name: 'Legend1',
	 *           data: [20, 30, 50]
	 *         },
	 *         {
	 *           name: 'Legend2',
	 *           data: [40, 40, 60]
	 *         },
	 *         {
	 *           name: 'Legend3',
	 *           data: [60, 50, 10]
	 *         },
	 *         {
	 *           name: 'Legend4',
	 *           data: [80, 10, 70]
	 *         }
	 *       ]
	 *     },
	 *     options = {
	 *       chart: {
	 *         title: 'Column Chart'
	 *       },
	 *       yAxis: {
	 *         title: 'Y Axis'
	 *       },
	 *       xAxis: {
	 *         title: 'X Axis'
	 *       }
	 *     };
	 * chart.columnChart(container, rawData, options);
	 */
	function columnChart(container, rawData, options) {
	    return _createChart(container, rawData, options, chartConst.CHART_TYPE_COLUMN);
	}

	/**
	 * Line chart creator.
	 * @memberof module:chart
	 * @memberof tui.chart
	 * @param {HTMLElement} container - chart container
	 * @param {rawData} rawData - raw data
	 *      @param {?Array.<string>} rawData.categories - categories
	 *      @param {Array.<Array>} rawData.series - series data
	 * @param {object} options - chart options
	 *      @param {object} options.chart - base options for chart
	 *          @param {number} options.chart.width - chart width
	 *          @param {number} options.chart.height - chart height
	 *          @param {string | object} options.chart.title - title text or title object
	 *              @param {string} options.chart.title.text - title text
	 *              @param {number} options.chart.title.offsetX - title offset x
	 *              @param {number} options.chart.title.offsetY - title offset y
	 *          @param {string | function} options.chart.format - formatter for value
	 *      @param {object} options.yAxis - options for y axis component
	 *          @param {string | object} options.yAxis.title - title text or title object
	 *              @param {string} options.yAxis.title.text - title text
	 *              @param {number} options.yAxis.title.offsetX - title offset x
	 *              @param {number} options.yAxis.title.offsetY - title offset y
	 *          @param {number} options.yAxis.labelMargin - label margin for y axis
	 *          @param {number} options.yAxis.min - minimum value for y axis
	 *          @param {number} options.yAxis.max - maximum value for y axis
	 *      @param {object} options.xAxis - options for x axis component
	 *          @param {string | object} options.xAxis.title - title text or title object
	 *              @param {string} options.xAxis.title.text - title text
	 *              @param {number} options.xAxis.title.offsetX - title offset x
	 *              @param {number} options.xAxis.title.offsetY - title offset y
	 *          @param {number} options.xAxis.labelMargin - label margin for x axis
	 *          @param {number} options.xAxis.labelInterval - label interval for x axis
	 *          @param {string} options.xAxis.tickInterval - tick interval for x axis
	 *          @param {boolean} options.xAxis.rotateLabel - whether rotate label or not (default: true)
	 *          @param {string} options.xAxis.type - type of axis
	 *          @param {string} options.xAxis.dateFormat - date format
	 *      @param {object} options.series - options for series component
	 *          @param {boolean} options.series.showDot - whether show dot or not
	 *          @param {boolean} options.series.showLabel - whether show label or not
	 *          @param {boolean} options.series.allowSelect - whether allow select or not
	 *          @param {boolean} options.series.spline - whether spline or not
	 *          @param {boolean} options.series.zoomable - whether zoomable or not
	 *          @param {boolean} options.series.shifting - whether shifting or not
	 *      @param {object} options.tooltip - options for tooltip component
	 *          @param {string} options.tooltip.suffix - suffix for tooltip
	 *          @param {function} [options.tooltip.template] - template for tooltip
	 *          @param {string} options.tooltip.align - align option for tooltip
	 *          @param {object} options.tooltip.offsetX - tooltip offset x
	 *          @param {object} options.tooltip.offsetY - tooltip offset y
	 *          @param {boolean} options.tooltip.grouped - whether group tooltip or not
	 *      @param {object} options.legend - options for legend component
	 *          @param {string} options.legend.align - align option for legend (top|bottom|left)
	 *          @param {boolean} options.legend.showCheckbox - whether show checkbox or not (default: true)
	 *          @param {boolean} options.legend.visible - whether visible or not (default: true)
	 *          @param {number} options.legend.maxWidth - legend name display max width
	 *      @param {object} options.plot - options for plot component
	 *          @param {boolean} options.plot.showLine - whether show line or not (default: true)
	 *          @param {Array} options.plot.bands - plot bands
	 *              @param {Array.<string|number|date>} options.plot.bands.range - value range for matching
	 *              @param {string} options.plot.bands.color - band color
	 *              @param {number} options.plot.bands.opacity - band opacity
	 *          @param {Array} options.plot.lines - plot lines
	 *              @param {(string|number|date)} options.plot.lines.value - value for matching
	 *              @param {string} options.plot.lines.color - band color
	 *              @param {number} options.plot.lines.opacity - band opacity
	 *          @param {Array.<{value: (string|number|date), color: ?string, opacity: ?string}>} options.plot.lines
	 *                  - plot lines
	 *      @param {string} options.theme - theme name
	 *      @param {string} options.libType - type of graph library
	 *      @param {object} options.chartExportMenu - options for exporting
	 *          @param {string} options.chartExportMenu.filename - export file name
	 * @returns {object} bar chart
	 * @api
	 * @example
	 * var chart = tui.chart; // or require('tui-chart');
	 * var container = document.getElementById('container-id'),
	 *     rawData = {
	 *       categories: ['cate1', 'cate2', 'cate3'],
	 *       series: [
	 *         {
	 *           name: 'Legend1',
	 *           data: [20, 30, 50]
	 *         },
	 *         {
	 *           name: 'Legend2',
	 *           data: [40, 40, 60]
	 *         },
	 *         {
	 *           name: 'Legend3',
	 *           data: [60, 50, 10]
	 *         },
	 *         {
	 *           name: 'Legend4',
	 *           data: [80, 10, 70]
	 *         }
	 *       ]
	 *     },
	 *     options = {
	 *       chart: {
	 *         title: 'Line Chart'
	 *       },
	 *       yAxis: {
	 *         title: 'Y Axis'
	 *       },
	 *       xAxis: {
	 *         title: 'X Axis'
	 *       },
	 *       series: {
	 *         showDot: true
	 *       }
	 *     };
	 * chart.lineChart(container, rawData, options);
	 */
	function lineChart(container, rawData, options) {
	    return _createChart(container, rawData, options, chartConst.CHART_TYPE_LINE);
	}

	/**
	 * Area chart creator.
	 * @memberof module:chart
	 * @memberof tui.chart
	 * @param {HTMLElement} container - chart container
	 * @param {rawData} rawData - raw data
	 *      @param {?Array.<string>} rawData.categories - categories
	 *      @param {Array.<Array>} rawData.series - series data
	 * @param {object} options - chart options
	 *      @param {object} options.chart - base options for chart
	 *          @param {number} options.chart.width - chart width
	 *          @param {number} options.chart.height - chart height
	 *          @param {string | object} options.chart.title - title text or title object
	 *              @param {string} options.chart.title.text - title text
	 *              @param {number} options.chart.title.offsetX - title offset x
	 *              @param {number} options.chart.title.offsetY - title offset y
	 *          @param {string | function} options.chart.format - formatter for value
	 *      @param {object} options.yAxis - options for y axis component
	 *          @param {string | object} options.yAxis.title - title text or title object
	 *              @param {string} options.yAxis.title.text - title text
	 *              @param {number} options.yAxis.title.offsetX - title offset x
	 *              @param {number} options.yAxis.title.offsetY - title offset y
	 *          @param {number} options.yAxis.labelMargin - label margin for y axis
	 *          @param {number} options.yAxis.min - minimum value for y axis
	 *          @param {number} options.yAxis.max - maximum value for y axis
	 *      @param {object} options.xAxis - options for x axis component
	 *          @param {string | object} options.xAxis.title - title text or title object
	 *              @param {string} options.xAxis.title.text - title text
	 *              @param {number} options.xAxis.title.offsetX - title offset x
	 *              @param {number} options.xAxis.title.offsetY - title offset y
	 *          @param {number} options.xAxis.labelMargin - label margin for x axis
	 *          @param {number} options.xAxis.labelInterval - label interval for x axis
	 *          @param {boolean} options.xAxis.rotateLabel - whether rotate label or not (default: true)
	 *          @param {string} options.xAxis.tickInterval - tick interval for x axis
	 *          @param {string} options.xAxis.type - type of axis
	 *          @param {string} options.xAxis.dateFormat - date format
	 *      @param {object} options.series - options for series component
	 *          @param {boolean} options.series.showDot - whether show dot or not
	 *          @param {boolean} options.series.showLabel - whether show label or not
	 *          @param {boolean} options.series.allowSelect - whether allow select or not
	 *          @param {boolean} options.series.spline - whether spline or not
	 *          @param {boolean} options.series.zoomable - whether zoomable or not
	 *          @param {boolean} options.series.shifting - whether shifting or not
	 *      @param {object} options.tooltip - options for tooltip component
	 *          @param {string} options.tooltip.suffix - suffix for tooltip
	 *          @param {function} [options.tooltip.template] - template for tooltip
	 *          @param {string} options.tooltip.align - align option for tooltip
	 *          @param {object} options.tooltip.offsetX - tooltip offset x
	 *          @param {object} options.tooltip.offsetY - tooltip offset y
	 *          @param {boolean} options.tooltip.grouped - whether group tooltip or not
	 *      @param {object} options.legend - options for legend component
	 *          @param {string} options.legend.align - align option for legend (top|bottom|left)
	 *          @param {boolean} options.legend.showCheckbox - whether show checkbox or not (default: true)
	 *          @param {boolean} options.legend.visible - whether visible or not (default: true)
	 *          @param {number} options.legend.maxWidth - legend name display max width
	 *      @param {object} options.plot - options for plot component
	 *          @param {boolean} options.plot.showLine - whether show line or not (default: true)
	 *          @param {Array} options.plot.bands - plot bands
	 *              @param {Array.<string|number|date>} options.plot.bands.range - value range for matching
	 *              @param {string} options.plot.bands.color - band color
	 *              @param {number} options.plot.bands.opacity - band opacity
	 *          @param {Array} options.plot.lines - plot lines
	 *              @param {(string|number|date)} options.plot.lines.value - value for matching
	 *              @param {string} options.plot.lines.color - band color
	 *              @param {number} options.plot.lines.opacity - band opacity
	 *      @param {string} options.theme - theme name
	 *      @param {string} options.libType - type of graph library
	 *      @param {object} options.chartExportMenu - options for exporting
	 *          @param {string} options.chartExportMenu.filename - export file name
	 * @returns {object} bar chart
	 * @api
	 * @example
	 * var chart = tui.chart; // or require('tui-chart');
	 * var container = document.getElementById('container-id'),
	 *     rawData = {
	 *       categories: ['cate1', 'cate2', 'cate3'],
	 *       series: [
	 *         {
	 *           name: 'Legend1',
	 *           data: [20, 30, 50]
	 *         },
	 *         {
	 *           name: 'Legend2',
	 *           data: [40, 40, 60]
	 *         },
	 *         {
	 *           name: 'Legend3',
	 *           data: [60, 50, 10]
	 *         },
	 *         {
	 *           name: 'Legend4',
	 *           data: [80, 10, 70]
	 *         }
	 *       ]
	 *     },
	 *     options = {
	 *       chart: {
	 *         title: 'Area Chart'
	 *       },
	 *       yAxis: {
	 *         title: 'Y Axis'
	 *       },
	 *       xAxis: {
	 *         title: 'X Axis'
	 *       }
	 *     };
	 * chart.areaChart(container, rawData, options);
	 */
	function areaChart(container, rawData, options) {
	    return _createChart(container, rawData, options, chartConst.CHART_TYPE_AREA);
	}

	/**
	 * Bubble chart creator.
	 * @memberof module:chart
	 * @memberof tui.chart
	 * @param {HTMLElement} container - chart container
	 * @param {rawData} rawData - raw data
	 *      @param {Array.<string>} rawData.categories - categories
	 *      @param {Array.<Array>} rawData.series - series data
	 * @param {object} options - chart options
	 *      @param {object} options.chart - base options for chart
	 *          @param {number} options.chart.width - chart width
	 *          @param {number} options.chart.height - chart height
	 *          @param {string | object} options.chart.title - title text or title object
	 *              @param {string} options.chart.title.text - title text
	 *              @param {number} options.chart.title.offsetX - title offset x
	 *              @param {number} options.chart.title.offsetY - title offset y
	 *          @param {string | function} options.chart.format - formatter for value
	 *      @param {object} options.yAxis - options for y axis component
	 *          @param {string | object} options.yAxis.title - title text or title object
	 *              @param {string} options.yAxis.title.text - title text
	 *              @param {number} options.yAxis.title.offsetX - title offset x
	 *              @param {number} options.yAxis.title.offsetY - title offset y
	 *          @param {number} options.yAxis.labelMargin - label margin for y axis
	 *          @param {number} options.yAxis.min - minimum value for y axis
	 *          @param {number} options.yAxis.max - maximum value for y axis
	 *      @param {object} options.xAxis - options for x axis component
	 *          @param {string | object} options.xAxis.title - title text or title object
	 *              @param {string} options.xAxis.title.text - title text
	 *              @param {number} options.xAxis.title.offsetX - title offset x
	 *              @param {number} options.xAxis.title.offsetY - title offset y
	 *          @param {number} options.xAxis.labelMargin - label margin for x axis
	 *          @param {number} options.xAxis.labelInterval - label interval for x axis
	 *          @param {boolean} options.xAxis.rotateLabel - whether rotate label or not (default: true)
	 *          @param {number} options.xAxis.min - minimum value for y axis
	 *          @param {number} options.xAxis.max - maximum value for y axis
	 *      @param {object} options.series - options for series component
	 *          @param {boolean} options.series.showLabel - whether show label or not
	 *          @param {boolean} options.series.allowSelect - whether allow select or not
	 *      @param {object} options.tooltip - options for tooltip component
	 *          @param {string} options.tooltip.suffix - suffix for tooltip
	 *          @param {function} [options.tooltip.template] - template for tooltip
	 *          @param {string} options.tooltip.align - align option for tooltip
	 *          @param {object} options.tooltip.offsetX - tooltip offset x
	 *          @param {object} options.tooltip.offsetY - tooltip offset y
	 *      @param {object} options.legend - options for legend component
	 *          @param {string} options.legend.align - align option for legend (top|bottom|left)
	 *          @param {boolean} options.legend.showCheckbox - whether show checkbox or not (default: true)
	 *          @param {boolean} options.legend.visible - whether visible or not (default: true)
	 *          @param {number} options.legend.maxWidth - legend name display max width
	 *      @param {object} options.circleLegend - options for circleLegend
	 *          @param {boolean} options.circleLegend.visible - whether visible or not (default: true)
	 *      @param {object} options.plot - options for plot component
	 *          @param {boolean} options.plot.showLine - whether show line or not (default: true)
	 *      @param {string} options.theme - theme name
	 *      @param {string} options.libType - type of graph library
	 *      @param {object} options.chartExportMenu - options for exporting
	 *          @param {string} options.chartExportMenu.filename - export file name
	 * @returns {object} bubble chart
	 * @api
	 * @example
	 * var chart = tui.chart; // or require('tui-chart');
	 * var container = document.getElementById('container-id'),
	 *     rawData = {
	 *       series: [
	 *         {
	 *           name: 'Legend1',
	 *           data: [{
	 *              x: 10,
	 *              y: 20,
	 *              r: 15,
	 *              label: 'Lable1'
	 *           }, {
	 *              x: 20,
	 *              y: 40,
	 *              r: 10,
	 *              label: 'Lable2'
	 *           }]
	 *         },
	 *         {
	 *           name: 'Legend2',
	 *           data: [{
	 *              x: 40,
	 *              y: 10,
	 *              r: 5,
	 *              label: 'Lable3'
	 *           }, {
	 *              x: 30,
	 *              y: 40,
	 *              r: 8,
	 *              label: 'Lable4'
	 *           }]
	 *         }
	 *       ]
	 *     },
	 *     options = {
	 *       chart: {
	 *         title: 'Bubble Chart'
	 *       },
	 *       yAxis: {
	 *         title: 'Y Axis'
	 *       },
	 *       xAxis: {
	 *         title: 'X Axis'
	 *       }
	 *     };
	 * chart.bubbleChart(container, rawData, options);
	 */
	function bubbleChart(container, rawData, options) {
	    return _createChart(container, rawData, options, chartConst.CHART_TYPE_BUBBLE);
	}

	/**
	 * Scatter chart creator.
	 * @memberof module:chart
	 * @memberof tui.chart
	 * @param {HTMLElement} container - chart container
	 * @param {rawData} rawData - raw data
	 *      @param {Array.<string>} rawData.categories - categories
	 *      @param {Array.<Array>} rawData.series - series data
	 * @param {object} options - chart options
	 *      @param {object} options.chart - base options for chart
	 *          @param {number} options.chart.width - chart width
	 *          @param {number} options.chart.height - chart height
	 *          @param {string | object} options.chart.title - title text or title object
	 *              @param {string} options.chart.title.text - title text
	 *              @param {number} options.chart.title.offsetX - title offset x
	 *              @param {number} options.chart.title.offsetY - title offset y
	 *          @param {string | function} options.chart.format - formatter for value
	 *      @param {object} options.yAxis - options for y axis component
	 *          @param {string | object} options.yAxis.title - title text or title object
	 *              @param {string} options.yAxis.title.text - title text
	 *              @param {number} options.yAxis.title.offsetX - title offset x
	 *              @param {number} options.yAxis.title.offsetY - title offset y
	 *          @param {number} options.yAxis.labelMargin - label margin for y axis
	 *          @param {number} options.yAxis.min - minimum value for y axis
	 *          @param {number} options.yAxis.max - maximum value for y axis
	 *      @param {object} options.xAxis - options for x axis component
	 *          @param {string | object} options.xAxis.title - title text or title object
	 *              @param {string} options.xAxis.title.text - title text
	 *              @param {number} options.xAxis.title.offsetX - title offset x
	 *              @param {number} options.xAxis.title.offsetY - title offset y
	 *          @param {number} options.xAxis.labelMargin - label margin for x axis
	 *          @param {number} options.xAxis.min - minimum value for y axis
	 *          @param {number} options.xAxis.max - maximum value for y axis
	 *      @param {object} options.series - options for series component
	 *          @param {boolean} options.series.showLabel - whether show label or not
	 *          @param {boolean} options.series.allowSelect - whether allow select or not
	 *      @param {object} options.tooltip - options for tooltip component
	 *          @param {string} options.tooltip.suffix - suffix for tooltip
	 *          @param {function} [options.tooltip.template] - template for tooltip
	 *          @param {string} options.tooltip.align - align option for tooltip
	 *          @param {object} options.tooltip.offsetX - tooltip offset x
	 *          @param {object} options.tooltip.offsetY - tooltip offset y
	 *      @param {object} options.legend - options for legend component
	 *          @param {string} options.legend.align - align option for legend (top|bottom|left)
	 *          @param {boolean} options.legend.showCheckbox - whether show checkbox or not (default: true)
	 *          @param {boolean} options.legend.visible - whether visible or not (default: true)
	 *          @param {number} options.legend.maxWidth - legend name display max width
	 *      @param {object} options.plot - options for plot component
	 *          @param {boolean} options.plot.showLine - whether show line or not (default: true)
	 *      @param {string} options.theme - theme name
	 *      @param {string} options.libType - type of graph library
	 *      @param {object} options.chartExportMenu - options for exporting
	 *          @param {string} options.chartExportMenu.filename - export file name
	 * @returns {object} scatter chart
	 * @api
	 * @example
	 * var chart = tui.chart; // or require('tui-chart');
	 * var container = document.getElementById('container-id'),
	 *     rawData = {
	 *       series: [
	 *         {
	 *           name: 'Legend1',
	 *           data: [{
	 *              x: 10,
	 *              y: 20
	 *           }, {
	 *              x: 20,
	 *              y: 40
	 *           }]
	 *         },
	 *         {
	 *           name: 'Legend2',
	 *           data: [{
	 *              x: 40,
	 *              y: 10
	 *           }, {
	 *              x: 30,
	 *              y: 40
	 *           }]
	 *         }
	 *       ]
	 *     },
	 *     options = {
	 *       chart: {
	 *         title: 'Scatter Chart'
	 *       },
	 *       yAxis: {
	 *         title: 'Y Axis'
	 *       },
	 *       xAxis: {
	 *         title: 'X Axis'
	 *       }
	 *     };
	 * chart.scatterChart(container, rawData, options);
	 */
	function scatterChart(container, rawData, options) {
	    return _createChart(container, rawData, options, chartConst.CHART_TYPE_SCATTER);
	}

	/**
	 * Heatmap chart creator.
	 * @memberof module:chart
	 * @memberof tui.chart
	 * @param {HTMLElement} container - chart container
	 * @param {rawData} rawData - raw data
	 *      @param {{x: Array.<string | number>, y: Array.<string | number>}} rawData.categories - categories
	 *      @param {Array.<Array.<number>>} rawData.series - series data
	 * @param {object} options - chart options
	 *      @param {object} options.chart - base options for chart
	 *          @param {number} options.chart.width - chart width
	 *          @param {number} options.chart.height - chart height
	 *          @param {string | object} options.chart.title - title text or title object
	 *              @param {string} options.chart.title.text - title text
	 *              @param {number} options.chart.title.offsetX - title offset x
	 *              @param {number} options.chart.title.offsetY - title offset y
	 *          @param {string | function} options.chart.format - formatter for value
	 *      @param {object} options.yAxis - options for y axis component
	 *          @param {string | object} options.yAxis.title - title text or title object
	 *              @param {string} options.yAxis.title.text - title text
	 *              @param {number} options.yAxis.title.offsetX - title offset x
	 *              @param {number} options.yAxis.title.offsetY - title offset y
	 *          @param {number} options.yAxis.labelMargin - label margin for y axis
	 *      @param {object} options.xAxis - options for x axis component
	 *          @param {string | object} options.xAxis.title - title text or title object
	 *              @param {string} options.xAxis.title.text - title text
	 *              @param {number} options.xAxis.title.offsetX - title offset x
	 *              @param {number} options.xAxis.title.offsetY - title offset y
	 *          @param {number} options.xAxis.labelMargin - label margin for x axis
	 *      @param {object} options.series - options for series component
	 *          @param {boolean} options.series.showLabel - whether show label or not
	 *      @param {object} options.tooltip - options for tooltip component
	 *          @param {string} options.tooltip.suffix - suffix for tooltip
	 *          @param {function} [options.tooltip.template] - template for tooltip
	 *          @param {string} options.tooltip.align - align option for tooltip
	 *          @param {object} options.tooltip.offsetX - tooltip offset x
	 *          @param {object} options.tooltip.offsetY - tooltip offset y
	 *      @param {object} options.legend - options for legend component
	 *          @param {string} options.legend.align - align option for legend (top|bottom|left)
	 *          @param {boolean} options.legend.visible - whether visible or not (default: true)
	 *          @param {number} options.legend.maxWidth - legend name display max width
	 *      @param {string} options.theme - theme name
	 *      @param {string} options.libType - type of graph library
	 *      @param {object} options.chartExportMenu - options for exporting
	 *          @param {string} options.chartExportMenu.filename - export file name
	 * @returns {object} scatter chart
	 * @api
	 * @example
	 * var chart = tui.chart; // or require('tui-chart');
	 * var container = document.getElementById('container-id'),
	 *     rawData = {
	 *       categories: {
	 *           x: [10, 20, 30, 40, 50],
	 *           y: [1, 2, 3, 4, 5, 6]
	 *       },
	 *       series: [
	 *           [10, 20, 30, 40, 50],
	 *           [1, 4, 6, 7, 8],
	 *           [20, 4, 5, 70, 8],
	 *           [100, 40, 30, 80, 30],
	 *           [20, 10, 60, 90, 20],
	 *           [50, 40, 30, 20, 10]
	 *       ]
	 *     },
	 *     options = {
	 *       chart: {
	 *         title: 'Heatmap Chart'
	 *       },
	 *       yAxis: {
	 *         title: 'Y Axis'
	 *       },
	 *       xAxis: {
	 *         title: 'X Axis'
	 *       }
	 *     };
	 * chart.heatmapChart(container, rawData, options);
	 */
	function heatmapChart(container, rawData, options) {
	    return _createChart(container, rawData, options, chartConst.CHART_TYPE_HEATMAP);
	}

	/**
	 * Treemap chart creator.
	 * @memberof module:chart
	 * @memberof tui.chart
	 * @param {HTMLElement} container - chart container
	 * @param {rawData} rawData - raw data
	 *      @param {Array.<Array.<object>>} rawData.series - series data
	 * @param {object} options - chart options
	 *      @param {object} options.chart - base options for chart
	 *          @param {number} options.chart.width - chart width
	 *          @param {number} options.chart.height - chart height
	 *          @param {string | object} options.chart.title - title text or title object
	 *              @param {string} options.chart.title.text - title text
	 *              @param {number} options.chart.title.offsetX - title offset x
	 *              @param {number} options.chart.title.offsetY - title offset y
	 *          @param {string | function} options.chart.format - formatter for value
	 *      @param {object} options.series - options for series component
	 *          @param {boolean} options.series.showLabel - whether show label or not
	 *          @param {boolean} options.series.useColorValue - whether use colorValue or not
	 *          @param {boolean} options.series.zoomable - whether zoomable or not
	 *          @param {boolean} options.series.useLeafLabel - whether use leaf label or not
	 *      @param {object} options.tooltip - options for tooltip component
	 *          @param {string} options.tooltip.suffix - suffix for tooltip
	 *          @param {function} [options.tooltip.template] - template for tooltip
	 *          @param {object} options.tooltip.offsetX - tooltip offset x
	 *          @param {object} options.tooltip.offsetY - tooltip offset y
	 *      @param {object} options.legend - options for legend component
	 *          @param {string} options.legend.align - align option for legend (top|bottom|left)
	 *          @param {boolean} options.legend.visible - whether visible or not (default: true)
	 *          @param {number} options.legend.maxWidth - legend name display max width
	 *      @param {string} options.theme - theme name
	 *      @param {string} options.libType - type of graph library
	 *      @param {object} options.chartExportMenu - options for exporting
	 *          @param {string} options.chartExportMenu.filename - export file name
	 * @returns {object} scatter chart
	 * @api
	 * @example
	 * var chart = tui.chart; // or require('tui-chart');
	 * var container = document.getElementById('container-id'),
	 *     rawData = {
	 *       series: [
	 *          {
	 *              label: 'label1',
	 *              value: 6
	 *          },
	 *          {
	 *              label: 'label2',
	 *              value: 6
	 *          },
	 *          {
	 *              label: 'label3',
	 *              value: 4
	 *          },
	 *          {
	 *              label: 'label4',
	 *              value: 3
	 *          },
	 *          {
	 *              label: 'label5',
	 *              value: 2
	 *          },
	 *          {
	 *              label: 'label6',
	 *              value: 2
	 *          },
	 *          {
	 *              label: 'label7',
	 *              value: 1
	 *          }
	 *     ],
	 *     options = {
	 *       chart: {
	 *         title: 'Treemap Chart'
	 *       }
	 *     };
	 * chart.treemapChart(container, rawData, options);
	 */
	function treemapChart(container, rawData, options) {
	    return _createChart(container, rawData, options, chartConst.CHART_TYPE_TREEMAP);
	}

	/**
	 * Combo chart creator.
	 * @memberof module:chart
	 * @memberof tui.chart
	 * @param {HTMLElement} container - chart container
	 * @param {rawData} rawData - raw data
	 *      @param {Array.<string>} rawData.categories - categories
	 *      @param {Array.<Array>} rawData.series - series data
	 * @param {object} options - chart options
	 *      @param {object} options.chart - base options for chart
	 *          @param {number} options.chart.width - chart width
	 *          @param {number} options.chart.height - chart height
	 *          @param {string | object} options.chart.title - title text or title object
	 *              @param {string} options.chart.title.text - title text
	 *              @param {number} options.chart.title.offsetX - title offset x
	 *              @param {number} options.chart.title.offsetY - title offset y
	 *          @param {string | function} options.chart.format - formatter for value
	 *      @param {object|Array} options.yAxis - options for y axis component
	 *          @param {string | object} options.yAxis.title - title text or title object
	 *              @param {string} options.yAxis.title.text - title text
	 *              @param {number} options.yAxis.title.offsetX - title offset x
	 *              @param {number} options.yAxis.title.offsetY - title offset y
	 *          @param {number} options.yAxis.labelMargin - label margin for y axis
	 *          @param {number} options.yAxis.min - minimum value for y axis
	 *          @param {number} options.yAxis.max - maximum value for y axis
	 *      @param {object} options.xAxis - options for x axis component
	 *          @param {string | object} options.xAxis.title - title text or title object
	 *              @param {string} options.xAxis.title.text - title text
	 *              @param {number} options.xAxis.title.offsetX - title offset x
	 *              @param {number} options.xAxis.title.offsetY - title offset y
	 *          @param {number} options.xAxis.labelMargin - label margin for x axis
	 *          @param {number} options.xAxis.labelInterval - label interval for x axis
	 *          @param {boolean} options.xAxis.rotateLabel - whether rotate label or not (default: true)
	 *      @param {object} options.series - options for series component
	 *          @param {?object} options.series.column - options for column series component
	 *              @param {string} options.series.column.stackType - type of stack
	 *              @param {boolean} options.series.column.showLabel - whether show label or not
	 *              @param {number} options.series.column.barWidth - bar width
	 *          @param {?object} options.series.line - options for line series component
	 *              @param {boolean} options.series.line.showDot - whether show dot or not
	 *              @param {boolean} options.series.line.showLabel - whether show label or not
	 *              @param {boolean} options.series.line.spline - whether spline or not
	 *          @param {?object} options.series.area - options for line series component
	 *              @param {boolean} options.series.area.showDot - whether show dot or not
	 *              @param {boolean} options.series.area.showLabel - whether show label or not
	 *              @param {boolean} options.series.area.spline - whether spline or not
	 *          @param {?object} options.series.pie - options for pie series component
	 *              @param {boolean} options.series.pie.showLabel - whether show label or not
	 *              @param {number} options.series.pie.radiusRatio - ratio of radius for pie graph
	 *              @param {boolean} options.series.pie.startAngle - start angle
	 *              @param {boolean} options.series.pie.endAngle - end angle
	 *          @param {boolean} options.series.showDot - whether show dot or not
	 *          @param {boolean} options.series.showLabel - whether show label or not
	 *          @param {boolean} options.series.allowSelect - whether allow select or not
	 *          @param {boolean} options.series.spline - whether spline or not
	 *          @param {boolean} options.series.zoomable - whether zoomable or not
	 *          @param {boolean} options.series.shifting - whether shifting or not
	 *      @param {object} options.tooltip - options for tooltip component
	 *          @param {object} options.tooltip.column - options for column tooltip
	 *              @param {string} options.tooltip.column.suffix - suffix for tooltip
	 *              @param {function} [options.tooltip.column.template] template of tooltip
	 *              @param {string} options.tooltip.column.align - align option for tooltip
	 *              @param {number} options.tooltip.column.offsetX - tooltip offset x
	 *              @param {number} options.tooltip.column.offsetY - tooltip offset y
	 *          @param {boolean} options.tooltip.grouped - whether group tooltip or not
	 *      @param {object} options.legend - options for legend component
	 *          @param {string} options.legend.align - align option for legend (top|bottom|left)
	 *          @param {boolean} options.legend.showCheckbox - whether show checkbox or not (default: true)
	 *          @param {boolean} options.legend.visible - whether visible or not (default: true)
	 *          @param {number} options.legend.maxWidth - legend name display max width
	 *      @param {object} options.plot - options for plot component
	 *          @param {boolean} options.plot.showLine - whether show line or not (default: true)
	 *          @param {Array} options.plot.bands - plot bands for line & area combo chart
	 *              @param {Array.<string|number|date>} options.plot.bands.range - value range for matching
	 *              @param {string} options.plot.bands.color - band color
	 *              @param {number} options.plot.bands.opacity - band opacity
	 *          @param {Array} options.plot.lines - plot lines
	 *              @param {(string|number|date)} options.plot.lines.value - value for matching
	 *              @param {string} options.plot.lines.color - band color
	 *              @param {number} options.plot.lines.opacity - band opacity
	 *      @param {string} options.theme - theme name
	 *      @param {string} options.libType - type of graph library
	 *      @param {object} options.chartExportMenu - options for exporting
	 *          @param {string} options.chartExportMenu.filename - export file name
	 * @returns {object} bar chart
	 * @api
	 * @example
	 * var chart = tui.chart; // or require('tui-chart');
	 * var container = document.getElementById('container-id'),
	 *     rawData = {
	 *       categories: ['cate1', 'cate2', 'cate3'],
	 *       series: {
	 *         column: [
	 *           {
	 *             name: 'Legend1',
	 *             data: [20, 30, 50]]
	 *           },
	 *           {
	 *             name: 'Legend2',
	 *             data: [40, 40, 60]
	 *           },
	 *           {
	 *             name: 'Legend3',
	 *             data: [60, 50, 10]
	 *           },
	 *           {
	 *             name: 'Legend4',
	 *             data: [80, 10, 70]
	 *           }
	 *         },
	 *         line: [
	 *           {
	 *             name: 'Legend5',
	 *             data: [1, 2, 3]
	 *           }
	 *         ]
	 *       }
	 *     },
	 *     options = {
	 *       chart: {
	 *         title: 'Combo Chart'
	 *       },
	 *       yAxis:[
	 *         {
	 *           title: 'Y Axis',
	 *           chartType: 'line'
	 *         },
	 *         {
	 *           title: 'Y Right Axis'
	 *         }
	 *       ],
	 *       xAxis: {
	 *         title: 'X Axis'
	 *       },
	 *       series: {
	 *         showDot: true
	 *       }
	 *     };
	 * chart.comboChart(container, rawData, options);
	 */
	function comboChart(container, rawData, options) {
	    return _createChart(container, rawData, options, chartConst.CHART_TYPE_COMBO);
	}

	/**
	 * Pie chart creator.
	 * @memberof module:chart
	 * @memberof tui.chart
	 * @param {HTMLElement} container - chart container
	 * @param {rawData} rawData - raw data
	 *      @param {Array.<Array>} rawData.series - series data
	 * @param {object} options - chart options
	 *      @param {object} options.chart - base options for chart
	 *          @param {number} options.chart.width - chart width
	 *          @param {number} options.chart.height - chart height
	 *          @param {string | object} options.chart.title - title text or title object
	 *              @param {string} options.chart.title.text - title text
	 *              @param {number} options.chart.title.offsetX - title offset x
	 *              @param {number} options.chart.title.offsetY - title offset y
	 *          @param {string | function} options.chart.format - formatter for value
	 *      @param {object} options.series - options for series component
	 *          @param {boolean} options.series.showLabel - whether show label or not
	 *          @param {number} options.series.radiusRatio - ratio of radius for pie graph
	 *          @param {boolean} options.series.allowSelect - whether allow select or not
	 *          @param {boolean} options.series.startAngle - start angle
	 *          @param {boolean} options.series.endAngle - end angle
	 *      @param {object} options.tooltip - options for tooltip component
	 *          @param {string} options.tooltip.suffix - suffix for tooltip
	 *          @param {function} [options.tooltip.template] - template for tooltip
	 *          @param {string} options.tooltip.align - align option for tooltip
	 *          @param {object} options.tooltip.offset - tooltip offset
	 *              @param {number} options.tooltip.offset.x - offset x
	 *              @param {number} options.tooltip.offset.y - offset y
	 *      @param {object} options.legend - options for legend component
	 *          @param {string} options.legend.align - align option for legend (top|bottom|left|center|outer)
	 *          @param {boolean} options.legend.showCheckbox - whether show checkbox or not (default: true)
	 *          @param {boolean} options.legend.visible - whether visible or not (default: true)
	 *          @param {number} options.legend.maxWidth - legend name display max width
	 *      @param {string} options.theme - theme name
	 *      @param {string} options.libType - type of graph library
	 *      @param {object} options.chartExportMenu - options for exporting
	 *          @param {string} options.chartExportMenu.filename - export file name
	 * @returns {object} bar chart
	 * @api
	 * @example
	 * var chart = tui.chart; // or require('tui-chart');
	 * var container = document.getElementById('container-id'),
	 *     rawData = {
	 *       series: [
	 *         {
	 *           name: 'Legend1',
	 *           data: 20
	 *         },
	 *         {
	 *           name: 'Legend2',
	 *           data: 40
	 *         },
	 *         {
	 *           name: 'Legend3',
	 *           data: 60
	 *         },
	 *         {
	 *           name: 'Legend4',
	 *           data: 80
	 *         }
	 *       ]
	 *     },
	 *     options = {
	 *       chart: {
	 *         title: 'Pie Chart'
	 *       }
	 *     };
	 * chart.pieChart(container, rawData, options);
	 */
	function pieChart(container, rawData, options) {
	    return _createChart(container, rawData, options, chartConst.CHART_TYPE_PIE);
	}

	/**
	 * Map chart creator.
	 * @memberof module:chart
	 * @memberof tui.chart
	 * @param {HTMLElement} container - chart container
	 * @param {rawData} rawData chart data
	 *      @param {Array.<Array>} rawData.series - series data
	 * @param {object} options - chart options
	 *      @param {object} options.chart - base options for chart
	 *          @param {number} options.chart.width - chart width
	 *          @param {number} options.chart.height - chart height
	 *          @param {string | object} options.chart.title - title text or title object
	 *              @param {string} options.chart.title.text - title text
	 *              @param {number} options.chart.title.offsetX - title offset x
	 *              @param {number} options.chart.title.offsetY - title offset y
	 *          @param {string | function} options.chart.format - formatter for value
	 *      @param {object} options.series - options for series component
	 *          @param {boolean} options.series.showLabel - whether show label or not
	 *      @param {object} options.tooltip - options for tooltip component
	 *          @param {string} options.tooltip.suffix - suffix for tooltip
	 *          @param {function} [options.tooltip.template] - template for tooltip
	 *          @param {string} options.tooltip.align - align option for tooltip
	 *          @param {object} options.tooltip.offset - tooltip offset
	 *              @param {number} options.tooltip.offset.x - offset x
	 *              @param {number} options.tooltip.offset.y - offset y
	 *      @param {object} options.legend - options for legend component
	 *          @param {string} options.legend.align - align option for legend (top|bottom|left|center|outer)
	 *      @param {string} options.theme - theme name
	 *      @param {string} options.map map type
	 *      @param {string} options.libType - type of graph library
	 *      @param {object} options.chartExportMenu - options for exporting
	 *          @param {string} options.chartExportMenu.filename - export file name
	 * @returns {object} bar chart
	 * @api
	 * @example
	 * var chart = tui.chart; // or require('tui-chart');
	 * var container = document.getElementById('container-id'),
	 *     rawData = {
	 *       series: [
	 *         {
	 *           code: 'KR',
	 *           data: 100,
	 *           labelCoordinate: {
	 *             x: 0.6,
	 *             y: 0.7
	 *           }
	 *         },
	 *         {
	 *           code: 'JP',
	 *           data: 50
	 *         }
	 *       ]
	 *     },
	 *     options = {
	 *       chart: {
	 *         title: 'Map Chart'
	 *       },
	 *       map: 'world'
	 *     };
	 * chart.mapChart(container, rawData, options);
	 */
	function mapChart(container, rawData, options) {
	    return _createChart(container, rawData, options, chartConst.CHART_TYPE_MAP);
	}

	/**
	 * radial chart creator.
	 * @memberof module:chart
	 * @memberof tui.chart
	 * @param {HTMLElement} container - chart container
	 * @param {rawData} rawData - raw data
	 *      @param {Array.<Array>} rawData.series - series data
	 * @param {object} options - chart options
	 *      @param {object} options.chart - base options for chart
	 *          @param {number} options.chart.width - chart width
	 *          @param {number} options.chart.height - chart height
	 *          @param {string | object} options.chart.title - title text or title object
	 *              @param {string} options.chart.title.text - title text
	 *              @param {number} options.chart.title.offsetX - title offset x
	 *              @param {number} options.chart.title.offsetY - title offset y
	 *          @param {string | function} options.chart.format - formatter for value
	 *      @param {object} options.series - options for series component
	 *          @param {boolean} options.series.showDot - show dot or not (default: true)
	 *          @param {boolean} options.series.showArea - show area or not (default: true)
	 *      @param {object} options.plot - options for plot component
	 *          @param {boolean} options.plot.type - "spiderweb" or "circle" (default: "spiderweb")
	 *      @param {object|Array} options.yAxis - options for y axis component
	 *          @param {number} options.yAxis.min - minimum value for y axis
	 *          @param {number} options.yAxis.max - maximum value for y axis
	 *      @param {object} options.tooltip - options for tooltip component
	 *          @param {string} options.tooltip.suffix - suffix for tooltip
	 *          @param {function} [options.tooltip.template] - template for tooltip
	 *          @param {string} options.tooltip.align - align option for tooltip
	 *          @param {object} options.tooltip.offset - tooltip offset
	 *              @param {number} options.tooltip.offset.x - offset x
	 *              @param {number} options.tooltip.offset.y - offset y
	 *      @param {object} options.legend - options for legend component
	 *          @param {string} options.legend.align - align option for legend (top|bottom|left|center|outer)
	 *          @param {boolean} options.legend.showCheckbox - whether show checkbox or not (default: true)
	 *          @param {boolean} options.legend.visible - whether visible or not (default: true)
	 *          @param {number} options.legend.maxWidth - legend name display max width
	 *      @param {string} options.theme - theme name
	 *      @param {string} options.libType - type of graph library
	 *      @param {object} options.chartExportMenu - options for exporting
	 *          @param {string} options.chartExportMenu.filename - export file name
	 * @returns {object} bar chart
	 * @api
	 * @example
	 * var chart = tui.chart; // or require('tui-chart');
	 * var container = document.getElementById('chart-area'),
	 *     rawData = {
	 *         categories: ["June", "July", "Aug", "Sep", "Oct", "Nov"],
	 *         series: [
	 *             {
	 *                 name: 'Budget',
	 *                 data: [5000, 3000, 5000, 7000, 6000, 4000]
	 *             },
	 *             {
	 *                 name: 'Income',
	 *                 data: [8000, 8000, 7000, 2000, 5000, 3000]
	 *             },
	 *             {
	 *                 name: 'Expenses',
	 *                 data: [4000, 4000, 6000, 3000, 4000, 5000]
	 *             },
	 *             {
	 *                 name: 'Debt',
	 *                 data: [6000, 3000, 3000, 1000, 2000, 4000]
	 *             }
	 *         ]
	 *     },
	 *     options = {
	 *         chart: {
	 *             width: 600,
	 *             height: 400
	 *         },
	 *         series: {
	 *             showDot: true,
	 *             showArea: true
	 *         },
	 *         plot: {
	 *             type: 'circle'
	 *         },
	 *         yAxis: {
	 *             min: 0,
	 *             max: 9000
	 *         }
	 *     };
	 * chart.radialChart(container, rawData, options);
	 *
	 */
	function radialChart(container, rawData, options) {
	    return _createChart(container, rawData, options, chartConst.CHART_TYPE_RADIAL);
	}

	/**
	 * Boxplot chart creator.
	 * @memberof module:chart
	 * @memberof tui.chart
	 * @param {HTMLElement} container - chart container
	 * @param {rawData} rawData chart data
	 * @param {object} options - chart options
	 * @returns {object} box plot chart
	 * @api
	 * @example
	 * var chart = tui.chart; // or require('tui-chart');
	 * var container = document.getElementById('container-id'),
	 * var rawData = {
	 *  categories: ['Budget', 'Income', 'Expenses', 'Debt'],
	 *  series: [{
	 *      name: '2015',
	 *      data: [
	 *          [1000, 2500, 3714, 5500, 7000],
	 *          [1000, 2250, 3142, 4750, 6000]
	 *      ],
	 *      outliers: [
	 *          [0, 14000]
	 *      ]
	 *  }, {
	 *      name: '2016',
	 *      data: [
	 *          [2000, 4500, 6714, 11500, 13000],
	 *          [7000, 9250, 10142, 11750, 12000]
	 *      ],
	 *      outliers: [
	 *          [1, 14000]
	 *      ]
	 *  }];
	 * };
	 * var options = {
	 *      chart: {
	 *          width: 600,
	 *          height: 400
	 *      },
	 *      series: {
	 *          showDot: true,
	 *          showArea: true
	 *      },
	 *      plot: {
	 *          type: 'circle'
	 *      },
	 *      yAxis: {
	 *          min: 0,
	 *          max: 9000
	 *      }
	 *  };
	 * chart.boxplotChart(container, rawData, options);
	 */
	function boxplotChart(container, rawData, options) {
	    return _createChart(container, rawData, options, chartConst.CHART_TYPE_BOXPLOT);
	}

	/**
	 * Bullet chart creator.
	 * @memberof module:chart
	 * @memberof tui.chart
	 * @param {HTMLElement} container - chart container
	 * @param {rawData} rawData chart data
	 * @param {object} options - chart options
	 * @returns {object} box plot chart
	 * @api
	 * @example
	 * var chart = tui.chart; // or require('tui-chart');
	 * var container = document.getElementById('chart-area');
	 * var data = {
	 *   categories: ['July', 'August'],
	 *   series: [{
	 *       name: 'Budget',
	 *       data: 25,
	 *      markers: [28, 2, 15],
	 *       ranges: [[-1, 10], [10, 20], [20, 30]]
	 *   },{
	 *       name: 'Hello',
	 *       data: 11,
	 *       markers: [20],
	 *       ranges: [[0, 8], [8, 15]]
	 *   }]
	 * };
	 * var options = {
	 *    chart: {
	 *       width: 700,
	 *       height: 300,
	 *       title: 'Monthly Revenue'
	 *   },
	 *   series: {
	 *       showLabel: true,
	 *       vertical: false
	 *   }
	 * };
	 * chart.bulletChart(container, data, options);
	 */
	function bulletChart(container, rawData, options) {
	    return _createChart(container, rawData, options, chartConst.CHART_TYPE_BULLET);
	}

	/**
	 * Register theme.
	 * @memberof tui.chart
	 * @param {string} themeName - theme name
	 * @param {object} theme - application chart theme
	 *      @param {object} theme.chart - chart theme
	 *          @param {string} theme.chart.fontFamily - font family for chart
	 *          @param {string} theme.chart.background - background for chart
	 *      @param {object} theme.title - chart title theme
	 *          @param {number} theme.title.fontSize - font size
	 *          @param {string} theme.title.fontFamily - font family
	 *          @param {string} theme.title.fontWeight - font weight
	 *          @param {string} theme.title.color - font color
	 *          @param {string} theme.title.background - background
	 *      @param {object} theme.yAxis - y axis theme
	 *          @param {object} theme.yAxis.title - theme for y axis title
	 *              @param {number} theme.yAxis.title.fontSize - font size
	 *              @param {string} theme.yAxis.title.fontFamily - font family
	 *              @param {string} theme.yAxis.title.fontWeight - font weight
	 *              @param {string} theme.yAxis.title.color - font color
	 *          @param {object} theme.yAxis.label - theme for y axis label
	 *              @param {number} theme.yAxis.label.fontSize - font size
	 *              @param {string} theme.yAxis.label.fontFamily - font family
	 *              @param {string} theme.yAxis.label.fontWeight - font weight
	 *              @param {string} theme.yAxis.label.color - font color
	 *          @param {string} theme.yAxis.tickColor - color for y axis tick
	 *      @param {object} theme.xAxis - theme for x axis
	 *          @param {object} theme.xAxis.title - theme for x axis title
	 *              @param {number} theme.xAxis.title.fontSize - font size
	 *              @param {string} theme.xAxis.title.fontFamily - font family
	 *              @param {string} theme.xAxis.title.fontWeight - font weight
	 *              @param {string} theme.xAxis.title.color - font color
	 *          @param {object} theme.xAxis.label - theme for x axis label
	 *              @param {number} theme.xAxis.label.fontSize - font size
	 *              @param {string} theme.xAxis.label.fontFamily - font family
	 *              @param {string} theme.xAxis.label.fontWeight - font weight
	 *              @param {string} theme.xAxis.label.color - font color
	 *          @param {string} theme.xAxis.tickColor - color for x axis tick
	 *      @param {object} theme.plot - theme for plot
	 *          @param {string} theme.plot.lineColor - line color
	 *          @param {string} theme.plot.background - background
	 *      @param {object} theme.series theme for series
	 *          @param {Array.<string>} theme.series.colors - colors
	 *          @param {string} theme.series.borderColor - border color
	 *          @param {string} theme.series.selectionColor - selection color
	 *          @param {string} theme.series.startColor - start color
	 *          @param {string} theme.series.endColor - end color
	 *          @param {string} theme.series.overColor - over color
	 *      @param {object} theme.legend - theme for legend
	 *          @param {object} theme.legend.label - theme for legend label
	 *              @param {number} theme.legend.label.fontSize - font size
	 *              @param {string} theme.legend.label.fontFamily - font family
	 *              @param {string} theme.legend.label.fontWeight - font family
	 *              @param {string} theme.legend.label.color - font color
	 * @api
	 * @example
	 * var chart = tui.chart; // or require('tui-chart');
	 * var theme = {
	 *   yAxis: {
	 *     tickColor: '#ccbd9a',
	 *       title: {
	 *         color: '#333333'
	 *       },
	 *       label: {
	 *         color: '#6f491d'
	 *       }
	 *     },
	 *     xAxis: {
	 *       tickColor: '#ccbd9a',
	 *       title: {
	 *         color: '#333333'
	 *       },
	 *       label: {
	 *         color: '#6f491d'
	 *       }
	 *     },
	 *     plot: {
	 *       lineColor: '#e5dbc4',
	 *       background: '#f6f1e5'
	 *     },
	 *     series: {
	 *       colors: ['#40abb4', '#e78a31', '#c1c452', '#795224', '#f5f5f5'],
	 *       borderColor: '#8e6535',
	 *       selectionColor: '#cccccc',
	 *       startColor: '#efefef',
	 *       endColor: 'blue',
	 *       overColor: 'yellow'
	 *     },
	 *     legend: {
	 *       label: {
	 *         color: '#6f491d'
	 *       }
	 *     }
	 *   };
	 * chart.registerTheme('newTheme', theme);
	 */
	function registerTheme(themeName, theme) {
	    themeManager.register(themeName, theme);
	}

	/**
	 * Register map.
	 * @memberof tui.chart
	 * @param {string} mapName map name
	 * @param {Array.<{code: string, name: string, path: string}>} data map data
	 * @api
	 * @example
	 * var chart = tui.chart; // or require('tui-chart');
	 * var data = [
	 *   {
	 *     code: 'KR',
	 *     name: 'South Korea',
	 *     path: 'M835.13,346.53L837.55,350.71...',
	 *     labelCoordinate: {
	 *       x: 0.6,
	 *       y: 0.7
	 *     }
	 *   },
	 *   //...
	 * ];
	 * chart.registerMap('newMap', data);
	 */
	function registerMap(mapName, data) {
	    mapManager.register(mapName, data);
	}

	/**
	 * Register graph plugin.
	 * @memberof tui.chart
	 * @param {string} libType type of graph library
	 * @param {object} plugin plugin to control library
	 * @param {function} getPaperCallback callback function for getting paper
	 * @example
	 * var chart = tui.chart; // or require('tui-chart');
	 * var pluginRaphael = {
	 *   bar: function() {} // Render class
	 * };
	 * tui.chart.registerPlugin('raphael', pluginRaphael);
	 */
	function registerPlugin(libType, plugin, getPaperCallback) {
	    pluginFactory.register(libType, plugin);
	    drawingToolPicker.addRendererType(libType, getPaperCallback);
	}

	module.exports = {
	    barChart: barChart,
	    columnChart: columnChart,
	    lineChart: lineChart,
	    areaChart: areaChart,
	    bubbleChart: bubbleChart,
	    scatterChart: scatterChart,
	    heatmapChart: heatmapChart,
	    treemapChart: treemapChart,
	    comboChart: comboChart,
	    pieChart: pieChart,
	    mapChart: mapChart,
	    radialChart: radialChart,
	    boxplotChart: boxplotChart,
	    bulletChart: bulletChart,
	    registerTheme: registerTheme,
	    registerMap: registerMap,
	    registerPlugin: registerPlugin
	};


/***/ }),
/* 30 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileoverview  Chart factory play role register chart.
	 *                Also, you can get chart from this factory.
	 * @author NHN Ent.
	 *         FE Development Lab <dl_javascript@nhnent.com>
	 */

	'use strict';

	var chartConst = __webpack_require__(8);
	var rawDataHandler = __webpack_require__(31);
	var predicate = __webpack_require__(21);

	var charts = {};
	var factory = {
	    /**
	     * Find key for getting chart.
	     * @param {string} chartType - type of chart
	     * @param {{seriesAlias: ?object, series: object.<string, Array>}} rawData - raw data
	     * @returns {string}
	     * @private
	     */
	    _findKey: function(chartType, rawData) {
	        var key = null;
	        var chartTypeMap;

	        if (predicate.isComboChart(chartType)) {
	            chartTypeMap = rawDataHandler.getChartTypeMap(rawData);

	            if (chartTypeMap[chartConst.CHART_TYPE_COLUMN] && chartTypeMap[chartConst.CHART_TYPE_LINE]) {
	                key = chartConst.CHART_TYPE_COLUMN_LINE_COMBO;
	            } else if (chartTypeMap[chartConst.CHART_TYPE_LINE] && chartTypeMap[chartConst.CHART_TYPE_SCATTER]) {
	                key = chartConst.CHART_TYPE_LINE_SCATTER_COMBO;
	            } else if (chartTypeMap[chartConst.CHART_TYPE_AREA] && chartTypeMap[chartConst.CHART_TYPE_LINE]) {
	                key = chartConst.CHART_TYPE_LINE_AREA_COMBO;
	            } else if (chartTypeMap[chartConst.CHART_TYPE_PIE]) {
	                key = chartConst.CHART_TYPE_PIE_DONUT_COMBO;
	            }
	        } else {
	            key = chartType;
	        }

	        return key;
	    },

	    /**
	     * Get chart instance.
	     * @param {string} chartType chart type
	     * @param {object} rawData chart data
	     * @param {object} theme chart options
	     * @param {object} options chart options
	     * @returns {object} chart instance;
	     */
	    get: function(chartType, rawData, theme, options) {
	        var key = this._findKey(chartType, rawData);
	        var Chart = charts[key];
	        var chart;

	        if (!Chart) {
	            throw new Error('Not exist ' + chartType + ' chart.');
	        }

	        chart = new Chart(rawData, theme, options);

	        return chart;
	    },

	    /**
	     * Register chart.
	     * @param {string} chartType char type
	     * @param {class} ChartClass chart class
	     */
	    register: function(chartType, ChartClass) {
	        charts[chartType] = ChartClass;
	    }
	};

	module.exports = factory;


/***/ }),
/* 31 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileoverview Raw data handler.
	 * @author NHN Ent.
	 *         FE Development Lab <dl_javascript@nhnent.com>
	 */

	'use strict';

	var chartConst = __webpack_require__(8);
	var predicate = __webpack_require__(21);
	var arrayUtil = __webpack_require__(10);
	var snippet = __webpack_require__(6);

	/**
	 * Raw data Handler.
	 * @module rawDataHandler
	 * @private */
	var rawDataHandler = {
	    /**
	     * Pick stacks.
	     * @param {Array.<{stack: string}>} seriesData - raw series data
	     * @param {boolean} [divergingOption] - diverging option
	     * @returns {Array.<string>} stacks
	     */
	    pickStacks: function(seriesData, divergingOption) {
	        var stacks, uniqStacks, filteredStack;

	        stacks = snippet.map(seriesData, function(seriesDatum) {
	            return seriesDatum.stack;
	        });

	        uniqStacks = arrayUtil.unique(stacks);

	        if (divergingOption) {
	            uniqStacks = uniqStacks.slice(0, 2);
	        }

	        filteredStack = snippet.filter(uniqStacks, function(stack) {
	            return !!stack;
	        });

	        if (filteredStack.length < uniqStacks.length) {
	            filteredStack.push(chartConst.DEFAULT_STACK);
	        }

	        return filteredStack;
	    },

	    /**
	     * Sort series data from stacks.
	     * @param {Array.<{stack: ?string}>} seriesData series data
	     * @param {Array.<string>} stacks stacks
	     * @returns {Array}
	     * @private
	     */
	    _sortSeriesData: function(seriesData, stacks) {
	        var newSeriesData = [];

	        if (!stacks) {
	            stacks = this.pickStacks(seriesData);
	        }

	        snippet.forEachArray(stacks, function(stack) {
	            var filtered = snippet.filter(seriesData, function(datum) {
	                return (datum.stack || chartConst.DEFAULT_STACK) === stack;
	            });
	            newSeriesData = newSeriesData.concat(filtered);
	        });

	        return newSeriesData;
	    },

	    /**
	     * Remove stack of series data.
	     * @param {Array.<{stack: ?string}>} seriesData series data
	     */
	    removeSeriesStack: function(seriesData) {
	        snippet.forEachArray(seriesData, function(datum) {
	            delete datum.stack;
	        });
	    },

	    /**
	     * Find char type from chart name.
	     * @param {object.<string, string>} seriesAlias - alias map
	     * @param {string} seriesType - series name
	     * @returns {*}
	     */
	    findChartType: function(seriesAlias, seriesType) {
	        var chartType;

	        if (seriesAlias) {
	            chartType = seriesAlias[seriesType];
	        }

	        return chartType || seriesType;
	    },

	    /**
	     * Get chart type map.
	     * @param {{series: (Array | object)}} rawData - raw data
	     * @returns {object.<string, string>}
	     */
	    getChartTypeMap: function(rawData) {
	        var self = this;
	        var chartTypeMap = {};

	        if (snippet.isObject(rawData.series)) {
	            snippet.forEach(rawData.series, function(data, seriesType) {
	                chartTypeMap[self.findChartType(rawData.seriesAlias, seriesType)] = true;
	            });
	        }

	        return chartTypeMap;
	    },

	    /**
	     * Create minus values.
	     * @param {Array.<number>} data number data
	     * @returns {Array} minus values
	     * @private
	     */
	    _createMinusValues: function(data) {
	        return snippet.map(data, function(value) {
	            return value < 0 ? 0 : -value;
	        });
	    },

	    /**
	     * Create plus values.
	     * @param {Array.<number>} data number data
	     * @returns {Array} plus values
	     * @private
	     */
	    _createPlusValues: function(data) {
	        return snippet.map(data, function(value) {
	            return value < 0 ? 0 : value;
	        });
	    },

	    /**
	     * Make normal diverging raw series data.
	     * @param {{data: Array.<number>}} rawSeriesData raw series data
	     * @returns {{data: Array.<number>}} changed raw series data
	     * @private
	     */
	    _makeNormalDivergingRawSeriesData: function(rawSeriesData) {
	        rawSeriesData.length = Math.min(rawSeriesData.length, 2);

	        rawSeriesData[0].data = this._createMinusValues(rawSeriesData[0].data);

	        if (rawSeriesData[1]) {
	            rawSeriesData[1].data = this._createPlusValues(rawSeriesData[1].data);
	        }

	        return rawSeriesData;
	    },

	    /**
	     * Make raw series data for stacked diverging option.
	     * @param {{data: Array.<number>, stack: string}} rawSeriesData raw series data
	     * @returns {{data: Array.<number>}} changed raw series data
	     * @private
	     */
	    _makeRawSeriesDataForStackedDiverging: function(rawSeriesData) {
	        var self = this;
	        var stacks = this.pickStacks(rawSeriesData, true);
	        var result = [];
	        var leftStack = stacks[0];
	        var rightStack = stacks[1];

	        rawSeriesData = this._sortSeriesData(rawSeriesData, stacks);

	        snippet.forEachArray(rawSeriesData, function(seriesDatum) {
	            var stack = seriesDatum.stack || chartConst.DEFAULT_STACK;
	            if (stack === leftStack) {
	                seriesDatum.data = self._createMinusValues(seriesDatum.data);
	                result.push(seriesDatum);
	            } else if (stack === rightStack) {
	                seriesDatum.data = self._createPlusValues(seriesDatum.data);
	                result.push(seriesDatum);
	            }
	        });

	        return result;
	    },

	    /**
	     * Make raw series data for diverging.
	     * @param {{data: Array.<number>, stack: string}} rawSeriesData raw series data
	     * @param {?string} stackTypeOption stackType option
	     * @returns {{data: Array.<number>}} changed raw series data
	     * @private
	     */
	    _makeRawSeriesDataForDiverging: function(rawSeriesData, stackTypeOption) {
	        if (predicate.isValidStackOption(stackTypeOption)) {
	            rawSeriesData = this._makeRawSeriesDataForStackedDiverging(rawSeriesData);
	        } else {
	            rawSeriesData = this._makeNormalDivergingRawSeriesData(rawSeriesData);
	        }

	        return rawSeriesData;
	    },

	    /**
	     * Update raw series data by options.
	     * @param {object} rawData - raw data
	     * @param {{stackType: ?string, diverging: ?boolean}} seriesOptions - series options
	     */
	    updateRawSeriesDataByOptions: function(rawData, seriesOptions) {
	        var self = this;

	        seriesOptions = seriesOptions || {};

	        if (predicate.isValidStackOption(seriesOptions.stackType)) {
	            snippet.forEach(rawData.series, function(seriesDatum, seriesType) {
	                rawData.series[seriesType] = self._sortSeriesData(rawData.series[seriesType]);
	            });
	        }

	        if (seriesOptions.diverging) {
	            snippet.forEach(rawData.series, function(seriesDatum, seriesType) {
	                rawData.series[seriesType] = self._makeRawSeriesDataForDiverging(seriesDatum, seriesOptions.stackType);
	            });
	        }
	    },

	    /**
	     * Append outlier value to boxplot series data end
	     * @param {object} rawData - raw data
	     */
	    appendOutliersToSeriesData: function(rawData) {
	        var boxplot = rawData.series.boxplot;
	        snippet.forEach(boxplot, function(seriesItem) {
	            var outliers = seriesItem.outliers;

	            if (outliers && outliers.length) {
	                snippet.forEach(outliers, function(outlier) {
	                    seriesItem.data[outlier[0]].push(outlier[1]);
	                });
	            }
	        });
	    },

	    /**
	     * Filter raw data belong to checked legend.
	     * @param {object} rawData raw data
	     * @param {Array.<?boolean> | {line: ?Array.<boolean>, column: ?Array.<boolean>}} checkedLegends checked legends
	     * @returns {object} rawData
	     */
	    filterCheckedRawData: function(rawData, checkedLegends) {
	        var cloneData = JSON.parse(JSON.stringify(rawData));
	        var filteredCategories;

	        if (checkedLegends) {
	            snippet.forEach(cloneData.series, function(serieses, chartType) {
	                if (!checkedLegends[chartType]) {
	                    cloneData.series[chartType] = [];
	                } else if (checkedLegends[chartType].length) {
	                    cloneData.series[chartType] = snippet.filter(serieses, function(series, index) {
	                        return checkedLegends[chartType][index];
	                    });
	                }
	            });
	        }

	        if (cloneData.series.bullet) {
	            filteredCategories = [];
	            snippet.forEach(checkedLegends.bullet, function(isChecked, index) {
	                if (isChecked) {
	                    filteredCategories.push(rawData.categories[index]);
	                }
	            });
	            cloneData.categories = filteredCategories;
	        }

	        return cloneData;
	    },

	    /**
	     * Modify rawData to fit chart format
	     * @param {object} rawData - raw data
	     * @private
	     */
	    _makeRawSeriesDataForBulletChart: function(rawData) {
	        var bullet = rawData.series.bullet;

	        rawData.categories = rawData.categories || [];

	        rawData.categories = snippet.map(bullet, function(seriesData) {
	            return seriesData.name || '';
	        });
	    }
	};

	module.exports = rawDataHandler;


/***/ }),
/* 32 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileoverview  Plugin factory play role register rendering plugin.
	 *                Also, you can get plugin from this factory.
	 * @author NHN Ent.
	 *         FE Development Lab <dl_javascript@nhnent.com>
	 */

	'use strict';

	var chartConst = __webpack_require__(8);

	var plugins = {},
	    factory = {
	        /**
	         * Get graph renderer.
	         * @param {string} libType type of graph library
	         * @param {string} chartType chart type
	         * @returns {object} renderer instance
	         */
	        get: function(libType, chartType) {
	            var plugin = plugins[libType || chartConst.DEFAULT_PLUGIN],
	                Renderer, renderer;

	            if (!plugin) {
	                throw new Error('Not exist ' + libType + ' plugin.');
	            }

	            Renderer = plugin[chartType];
	            if (!Renderer) {
	                throw new Error('Not exist ' + chartType + ' chart renderer.');
	            }

	            renderer = new Renderer();

	            return renderer;
	        },
	        /**
	         * Plugin register.
	         * @param {string} libType type of graph library
	         * @param {object} plugin plugin to control library
	         */
	        register: function(libType, plugin) {
	            plugins[libType] = plugin;
	        }
	    };

	module.exports = factory;


/***/ }),
/* 33 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @Fileoverview  Theme manager.
	 * @author NHN Ent.
	 *         FE Development Lab <dl_javascript@nhnent.com>
	 */

	'use strict';

	var chartConst = __webpack_require__(8);
	var predicate = __webpack_require__(21);
	var defaultTheme = __webpack_require__(34);
	var snippet = __webpack_require__(6);

	var themes = {};

	module.exports = {
	    /**
	     * Theme register.
	     * @param {string} themeName theme name
	     * @param {object} theme theme
	     */
	    register: function(themeName, theme) {
	        theme = JSON.parse(JSON.stringify(theme));
	        themes[themeName] = theme;
	    },

	    /**
	     * Pick series types from raw series data.
	     * @param {string} chartType - chart type
	     * @param {object} rawSeriesData - raw series data
	     * @returns {Array}
	     * @private
	     */
	    _pickSeriesNames: function(chartType, rawSeriesData) {
	        var seriesTypes = [];
	        if (predicate.isComboChart(chartType)) {
	            snippet.forEach(rawSeriesData, function(data, seriesType) {
	                seriesTypes.push(seriesType);
	            });
	        } else {
	            seriesTypes.push(chartType);
	        }

	        return seriesTypes;
	    },

	    /**
	     * Overwrite theme
	     * @param {object} fromTheme - from theme
	     * @param {object} toTheme - to theme
	     * @private
	     */
	    _overwriteTheme: function(fromTheme, toTheme) {
	        var self = this;

	        snippet.forEach(toTheme, function(item, key) {
	            var fromItem = fromTheme[key];
	            if (!fromItem && fromItem !== 0) {
	                return;
	            }

	            if (snippet.isArray(fromItem)) {
	                toTheme[key] = fromItem.slice();
	            } else if (snippet.isObject(fromItem)) {
	                self._overwriteTheme(fromItem, item);
	            } else {
	                toTheme[key] = fromItem;
	            }
	        });
	    },

	    /**
	     * Pick valid theme properties.
	     * @param {object} theme - theme
	     * @param {string} componentType - component type (series or yAxis)
	     * @returns {object}
	     * @private
	     */
	    _pickValidTheme: function(theme, componentType) {
	        var validTheme = {};

	        snippet.forEachArray(chartConst.THEME_PROPS_MAP[componentType], function(propName) {
	            if (snippet.isExisty(theme[propName])) {
	                validTheme[propName] = theme[propName];
	            }
	        });

	        return validTheme;
	    },

	    /**
	     * Create component theme with series name
	     * @param {Array.<string>} seriesTypes - series types
	     * @param {object} fromTheme - from theme
	     * @param {object} toTheme - to theme
	     * @param {string} componentType - component type
	     * @returns {object}
	     * @private
	     */
	    _createComponentThemeWithSeriesName: function(seriesTypes, fromTheme, toTheme, componentType) {
	        var self = this;
	        var newTheme = {};

	        fromTheme = fromTheme || {};

	        snippet.forEachArray(seriesTypes, function(seriesType) {
	            var theme = fromTheme[seriesType] || self._pickValidTheme(fromTheme, componentType);

	            if (snippet.keys(theme).length) {
	                newTheme[seriesType] = JSON.parse(JSON.stringify(defaultTheme[componentType]));
	                self._overwriteTheme(theme, newTheme[seriesType]);
	            } else {
	                newTheme[seriesType] = JSON.parse(JSON.stringify(toTheme));
	            }
	        });

	        return newTheme;
	    },

	    /**
	     * Make each series's color
	     * @param {Array.<string>} themeColors Theme colors to use
	     * @param {number} seriesCount Series count
	     * @param {number} startColorIndex Start color index
	     * @returns {Array.<string>} colors
	     */
	    _makeEachSeriesColors: function(themeColors, seriesCount, startColorIndex) {
	        var colors = [];
	        var themeColorsLen = themeColors.length;
	        var colorIndex = startColorIndex || 0;
	        var i;

	        for (i = 0; i < seriesCount; i += 1) {
	            colors.push(themeColors[colorIndex]);

	            colorIndex += 1;

	            if (colorIndex >= themeColorsLen) {
	                colorIndex = 0;
	            }
	        }

	        return colors;
	    },

	    /**
	     * Set series colors theme.
	     * @param {Array.<string>} seriesTypes - series type
	     * @param {object} seriesThemes - series theme map
	     * @param {object} rawSeriesThemes - raw series theme map
	     * @param {object} rawSeriesData - raw series data
	     * @private
	     */
	    _setSeriesColors: function(seriesTypes, seriesThemes, rawSeriesThemes, rawSeriesData) {
	        var seriesColors, seriesCount, hasOwnColors;
	        var colorIndex = 0;

	        rawSeriesThemes = rawSeriesThemes || {}; // to simplify if/else statement

	        snippet.forEachArray(seriesTypes, function(seriesType) {
	            if (rawSeriesThemes[seriesType]) {
	                seriesColors = rawSeriesThemes[seriesType].colors;
	                hasOwnColors = true;
	            } else {
	                seriesColors = rawSeriesThemes.colors || defaultTheme.series.colors;
	                hasOwnColors = false;
	            }

	            seriesCount = this._getSeriesThemeColorCount(rawSeriesData[seriesType]);

	            seriesThemes[seriesType].colors = this._makeEachSeriesColors(seriesColors, seriesCount,
	                !hasOwnColors && colorIndex);

	            // To distinct between series that use default theme, we make the colors different
	            if (!hasOwnColors) {
	                colorIndex = (seriesCount + colorIndex) % seriesColors.length;
	            }
	        }, this);
	    },

	    /**
	     * Get number of series theme color from seriesData
	     * @param {object} rawSeriesDatum - raw series data contains series information
	     * @returns {number} number of series theme color
	     * @private
	     */
	    _getSeriesThemeColorCount: function(rawSeriesDatum) {
	        var seriesCount = 0;

	        if (rawSeriesDatum && rawSeriesDatum.length) {
	            if (rawSeriesDatum.colorLength) {
	                seriesCount = rawSeriesDatum.colorLength;
	            } else {
	                seriesCount = rawSeriesDatum.length;
	            }
	        }

	        return seriesCount;
	    },

	    /**
	     * Init theme.
	     * @param {string} themeName - theme name
	     * @param {object} rawTheme - raw theme
	     * @param {Array.<string>} seriesTypes - series types
	     * @param {object} rawSeriesData - raw series data
	     * @returns {object}
	     * @private
	     * @ignore
	     */
	    _initTheme: function(themeName, rawTheme, seriesTypes, rawSeriesData) {
	        var theme;

	        if (themeName !== chartConst.DEFAULT_THEME_NAME) { // customized theme that overrides default theme
	            theme = JSON.parse(JSON.stringify(defaultTheme));
	            this._overwriteTheme(rawTheme, theme);
	        } else { // default theme
	            theme = JSON.parse(JSON.stringify(rawTheme));
	        }

	        // make each component theme have theme by series name. theme.yAxis.theme -> theme.yAxis.line.theme
	        theme.yAxis = this._createComponentThemeWithSeriesName(seriesTypes, rawTheme.yAxis, theme.yAxis, 'yAxis');
	        theme.series = this._createComponentThemeWithSeriesName(seriesTypes, rawTheme.series, theme.series, 'series');

	        this._setSeriesColors(seriesTypes, theme.series, rawTheme.series, rawSeriesData);

	        return theme;
	    },

	    /**
	     * Create target themes for font inherit.
	     * @param {object} theme - theme
	     * @returns {Array.<object>}
	     * @private
	     */
	    _createTargetThemesForFontInherit: function(theme) {
	        var items = [
	            theme.title,
	            theme.xAxis.title,
	            theme.xAxis.label,
	            theme.legend.label,
	            theme.plot.label
	        ];

	        snippet.forEach(theme.yAxis, function(_theme) {
	            items.push(_theme.title, _theme.label);
	        });

	        snippet.forEach(theme.series, function(_theme) {
	            items.push(_theme.label);
	        });

	        return items;
	    },

	    /**
	     * Inherit theme font.
	     * @param {object} theme theme
	     * @private
	     */
	    _inheritThemeFont: function(theme) {
	        var targetThemes = this._createTargetThemesForFontInherit(theme);
	        var baseFont = theme.chart.fontFamily;

	        snippet.forEachArray(targetThemes, function(item) {
	            if (!item.fontFamily) {
	                item.fontFamily = baseFont;
	            }
	        });
	    },

	    /**
	     * Copy color theme to otherTheme from seriesTheme.
	     * @param {object} seriesTheme - series theme
	     * @param {object} otherTheme - other theme
	     * @param {object} seriesType - series name
	     * @private
	     */
	    _copySeriesColorTheme: function(seriesTheme, otherTheme, seriesType) {
	        otherTheme[seriesType] = {
	            colors: seriesTheme.colors,
	            borderColor: seriesTheme.borderColor,
	            selectionColor: seriesTheme.selectionColor
	        };
	    },

	    /**
	     * Copy series color theme to other components.
	     * @param {object} theme theme
	     * @private
	     * @ignore
	     */
	    _copySeriesColorThemeToOther: function(theme) {
	        var self = this;

	        snippet.forEach(theme.series, function(seriesTheme, seriesType) {
	            self._copySeriesColorTheme(seriesTheme, theme.legend, seriesType);
	            self._copySeriesColorTheme(seriesTheme, theme.tooltip, seriesType);
	        });
	    },

	    /**
	     * Get theme.
	     * @param {string} themeName - theme name
	     * @param {string} chartType - chart type
	     * @param {object} rawSeriesData - raw series data
	     * @returns {object}
	     */
	    get: function(themeName, chartType, rawSeriesData) {
	        var rawTheme = themes[themeName];
	        var theme, seriesTypes;

	        if (!rawTheme) {
	            throw new Error('Not exist ' + themeName + ' theme.');
	        }

	        seriesTypes = this._pickSeriesNames(chartType, rawSeriesData);

	        theme = this._initTheme(themeName, rawTheme, seriesTypes, rawSeriesData);

	        this._inheritThemeFont(theme, seriesTypes);
	        this._copySeriesColorThemeToOther(theme);

	        return theme;
	    }
	};


/***/ }),
/* 34 */
/***/ (function(module, exports) {

	'use strict';

	var DEFAULT_COLOR = '#000000';
	var DEFAULT_BACKGROUND = '#ffffff';
	var DEFAULT_FONTWEIGHT = 'lighter';
	var DEFAULT_FONTFAMILY = 'Arial';
	var EMPTY = '';
	var DEFAULT_AXIS = {
	    tickColor: DEFAULT_COLOR,
	    title: {
	        fontSize: 11,
	        fontFamily: DEFAULT_FONTFAMILY,
	        color: '#bbbbbb',
	        fontWeight: 'bold'
	    },
	    label: {
	        fontSize: 11,
	        fontFamily: DEFAULT_FONTFAMILY,
	        color: '#333',
	        fontWeight: 'normal'
	    }
	};

	var defaultTheme = {
	    chart: {
	        background: {
	            color: DEFAULT_BACKGROUND,
	            opacity: 1
	        },
	        fontFamily: DEFAULT_FONTFAMILY
	    },
	    title: {
	        fontSize: 18,
	        fontFamily: DEFAULT_FONTFAMILY,
	        color: DEFAULT_COLOR,
	        fontWeight: DEFAULT_FONTWEIGHT
	    },
	    yAxis: DEFAULT_AXIS,
	    xAxis: DEFAULT_AXIS,
	    plot: {
	        lineColor: '#000000',
	        background: '#ffffff',
	        label: {
	            fontSize: 11,
	            fontFamily: DEFAULT_FONTFAMILY,
	            color: '#888'
	        }
	    },
	    series: {
	        label: {
	            fontSize: 11,
	            fontFamily: DEFAULT_FONTFAMILY,
	            color: DEFAULT_COLOR,
	            fontWeight: DEFAULT_FONTWEIGHT
	        },
	        colors: ['#00a9ff', '#ffb840', '#ff5a46', '#00bd9f', '#785fff', '#f28b8c', '#989486', '#516f7d', '#29dbe3', '#dddddd'],
	        borderColor: EMPTY,
	        borderWidth: EMPTY,
	        selectionColor: EMPTY,
	        startColor: '#FFE98A',
	        endColor: '#D74177',
	        overColor: EMPTY,
	        dot: {
	            fillColor: EMPTY,
	            fillOpacity: 1,
	            strokeColor: EMPTY,
	            strokeOpacity: EMPTY,
	            strokeWidth: 0,
	            radius: 6,
	            hover: {
	                fillColor: EMPTY,
	                fillOpacity: 1,
	                strokeColor: '#fff',
	                strokeOpacity: 1,
	                strokeWidth: 4,
	                radius: 6
	            }
	        },
	        ranges: []
	    },
	    legend: {
	        label: {
	            fontSize: 11,
	            fontFamily: DEFAULT_FONTFAMILY,
	            color: '#333',
	            fontWeight: DEFAULT_FONTWEIGHT
	        }
	    },
	    tooltip: {},
	    chartExportMenu: {
	        backgroundColor: '#fff',
	        borderRadius: 0,
	        borderWidth: 1,
	        color: '#000'
	    }
	};

	module.exports = defaultTheme;


/***/ }),
/* 35 */
/***/ (function(module, exports) {

	/**
	 * @fileoverview  Map Manager.
	 * @author NHN Ent.
	 *         FE Development Lab <dl_javascript@nhnent.com>
	 */

	'use strict';

	var maps = {};

	module.exports = {
	    /**
	     * Get map data.
	     * @param {string} mapName map name
	     * @returns {Array} map data
	     */
	    get: function(mapName) {
	        var data = maps[mapName];

	        if (!data) {
	            throw new Error('Not exist ' + mapName + ' map.');
	        }

	        return data;
	    },

	    /**
	     * Register Map.
	     * @param {string} mapName map name
	     * @param {Array} data map data
	     */
	    register: function(mapName, data) {
	        maps[mapName] = data;
	    }
	};


/***/ }),
/* 36 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileoverview util for object
	 * @author NHN Ent.
	 *         FE Development Lab <dl_javascript@nhnent.com>
	 */

	'use strict';

	var snippet = __webpack_require__(6);

	/**
	 * Deep copy.
	 * @memberOf module:objectUtil
	 * @param {object|Array|*} origin - original data
	 * @returns {*}
	 */
	var deepCopy = function(origin) {
	    var clone;

	    if (snippet.isArray(origin)) {
	        clone = [];
	        snippet.forEachArray(origin, function(value, index) {
	            clone[index] = deepCopy(value);
	        });
	    } else if (snippet.isFunction(origin) || snippet.isDate(origin)) {
	        clone = origin;
	    } else if (snippet.isObject(origin)) {
	        clone = {};
	        snippet.forEach(origin, function(value, key) {
	            clone[key] = deepCopy(value);
	        });
	    } else {
	        clone = origin;
	    }

	    return clone;
	};

	/**
	 * util for object
	 * @module objectUtil
	 * @private */
	var objectUtil = {
	    deepCopy: deepCopy
	};

	module.exports = objectUtil;


/***/ }),
/* 37 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview Series data importer
	 * @author NHN Ent.
	 *         FE Development Lab <dl_javascript@nhnent.com>
	 */

	'use strict';

	var arrayUtil = __webpack_require__(10);
	var snippet = __webpack_require__(6);

	/**
	 * Get series data from 2D array
	 * @param {Array.<Array>} table2DArray - extracted 2DArray from table element
	 * @returns {{
	 *     series: Array.<object>,
	 *     categories: Array.<string>
	 *         }}
	 * @private
	 */
	function getChartDataFrom2DArray(table2DArray) {
	    var chartData;

	    if (table2DArray.length > 0) {
	        chartData = {};
	        chartData.categories = [];
	        chartData.series = [];

	        chartData.categories = table2DArray.shift().slice(1);
	        snippet.forEach(table2DArray, function(tr) {
	            var seriesDatum = {};

	            seriesDatum.name = tr[0];
	            seriesDatum.data = tr.slice(1);

	            chartData.series.push(seriesDatum);
	        });
	    }

	    return chartData;
	}

	/**
	 * Get pivoted second dimension array from table to use element.innerText
	 * @param {HTMLElement} tableElement - table element for extract chart's raw data
	 * @returns {Array.<Array>}
	 * @private
	 */
	function get2DArray(tableElement) {
	    var trs = [];
	    var secondDimensionArray = [];
	    var resultArray = [];

	    if (tableElement) {
	        trs = snippet.toArray(tableElement.getElementsByTagName('TR'));

	        snippet.forEach(trs, function(tr, index) {
	            var tagName = index === 0 ? 'TH' : 'TD';
	            var cells = snippet.toArray(tr.getElementsByTagName(tagName));
	            var rows = snippet.pluck(cells, 'innerText');

	            secondDimensionArray.push(rows);
	        });

	        if (secondDimensionArray[0].length < secondDimensionArray[1].length) {
	            secondDimensionArray[0].unshift('');
	        }

	        resultArray = arrayUtil.pivot(secondDimensionArray);
	    }

	    return resultArray;
	}

	/**
	 * Make chart data with table element
	 * @param {({
	 *     elementId:string
	 * }|{
	 *     element:HTMLElement
	 * })} table - object for table data import
	 * @returns {rawData}
	 * @ignore
	 * @api
	 */
	function makeDataWithTable(table) {
	    var element, chartData;

	    if (table.element && table.element.tagName === 'TABLE') {
	        element = table.element;
	    } else if (table.elementId) {
	        element = document.getElementById(table.elementId);
	    }

	    chartData = getChartDataFrom2DArray(get2DArray(element));

	    return chartData;
	}

	module.exports = {
	    makeDataWithTable: makeDataWithTable
	};


/***/ }),
/* 38 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var dom = __webpack_require__(9);
	var snippet = __webpack_require__(6);

	/**
	 * Get raphael paper
	 * @param {HTMLElement} container container element
	 * @param {{width:number, height:number}} dimension dimension
	 * @returns {object}
	 * @private
	 */

	/**
	 * Renderers
	 * @type {object}
	 * @ignore
	 */
	var renderers = {
	    DOM: function(container) {
	        var paper = dom.create('DIV');
	        dom.append(container, paper);

	        return paper;
	    }
	};

	var DrawingToolPicker = snippet.defineClass({
	    /**
	     * DrawingToolPicker initializer
	     * @param {{width:number, height:number}} dimension dimension
	     * @ignore
	     */
	    initDimension: function(dimension) {
	        this.dimension = dimension;
	    },

	    /**
	     * Get drawing tool paper
	     * @param {HTMLElement} container container element
	     * @param {string} rendererType component renderer type
	     * @returns {HTMLElement|object}
	     * @ignore
	     */
	    getPaper: function(container, rendererType) {
	        var paper = this[rendererType + 'Paper'];
	        var isNeedCreateNewPaper = snippet.isExisty(container)
	            && paper && dom.findParentByClass(paper.canvas, 'tui-chart') !== container;

	        if (!paper || isNeedCreateNewPaper) {
	            paper = renderers[rendererType].call(this, container, this.dimension);

	            if (rendererType !== 'DOM') {
	                this[rendererType + 'Paper'] = paper;
	            }
	        }

	        return paper;
	    }
	});

	/**
	 * Add renderer type
	 * @param {string} componentType component renderer type
	 * @param {function} callback callback function for get renderer's paper
	 */
	DrawingToolPicker.addRendererType = function(componentType, callback) {
	    renderers[componentType] = callback;
	};

	module.exports = DrawingToolPicker;


/***/ }),
/* 39 */
/***/ (function(module, exports) {

	// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON
	// Any copyright is dedicated to the Public Domain. http://creativecommons.org/publicdomain/zero/1.0/
	if (!window.JSON) {
	    window.JSON = {
	        parse: function(sJSON) { return eval('(' + sJSON + ')'); },
	        stringify: (function () {
	            var toString = Object.prototype.toString;
	            var isArray = Array.isArray || function (a) { return toString.call(a) === '[object Array]'; };
	            var escMap = {'"': '\\"', '\\': '\\\\', '\b': '\\b', '\f': '\\f', '\n': '\\n', '\r': '\\r', '\t': '\\t'};
	            var escFunc = function (m) { return escMap[m] || '\\u' + (m.charCodeAt(0) + 0x10000).toString(16).substr(1); };
	            var escRE = /[\\"\u0000-\u001F\u2028\u2029]/g;
	            return function stringify(value) {
	                if (value == null) {
	                    return 'null';
	                } else if (typeof value === 'number') {
	                    return isFinite(value) ? value.toString() : 'null';
	                } else if (typeof value === 'boolean') {
	                    return value.toString();
	                } else if (typeof value === 'object') {
	                    if (typeof value.toJSON === 'function') {
	                        return stringify(value.toJSON());
	                    } else if (isArray(value)) {
	                        var res = '[';
	                        for (var i = 0; i < value.length; i++)
	                            res += (i ? ', ' : '') + stringify(value[i]);
	                        return res + ']';
	                    } else if (toString.call(value) === '[object Object]') {
	                        var tmp = [];
	                        for (var k in value) {
	                            if (value.hasOwnProperty(k))
	                                tmp.push(stringify(k) + ': ' + stringify(value[k]));
	                        }
	                        return '{' + tmp.join(', ') + '}';
	                    }
	                }
	                return '"' + value.toString().replace(escRE, escFunc) + '"';
	            };
	        })()
	    };
	}

	// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/create
	// Any copyright is dedicated to the Public Domain. http://creativecommons.org/publicdomain/zero/1.0/
	if (typeof Object.create != 'function') {
	    Object.create = (function(undefined) {
	        var Temp = function() {};
	        return function (prototype, propertiesObject) {
	            if(prototype !== Object(prototype) && prototype !== null) {
	                throw TypeError('Argument must be an object, or null');
	            }
	            Temp.prototype = prototype || {};
	            if (propertiesObject !== undefined) {
	                Object.defineProperties(Temp.prototype, propertiesObject);
	            }
	            var result = new Temp();
	            Temp.prototype = null;
	            // to imitate the case of Object.create(null)
	            if(prototype === null) {
	                result.__proto__ = null;
	            }
	            return result;
	        };
	    })();
	}

	// http://paulirish.com/2011/requestanimationframe-for-smart-animating/
	// http://my.opera.com/emoller/blog/2011/12/20/requestanimationframe-for-smart-er-animating
	// requestAnimationFrame polyfill by Erik Möller. fixes from Paul Irish and Tino Zijdel
	// MIT license

	(function () {
	    var lastTime = 0;
	    var vendors = ['ms', 'moz', 'webkit', 'o'];
	    for (var x = 0; x < vendors.length && !window.requestAnimationFrame; ++x) {
	        window.requestAnimationFrame = window[vendors[x] + 'RequestAnimationFrame'];
	        window.cancelAnimationFrame = window[vendors[x] + 'CancelAnimationFrame']
	            || window[vendors[x] + 'CancelRequestAnimationFrame'];
	    }

	    if (!window.requestAnimationFrame) {
	        window.requestAnimationFrame = function (callback) {
	            var currTime = new Date().getTime();
	            var timeToCall = Math.max(0, 16 - (currTime - lastTime));
	            var id = window.setTimeout(function () {
	                    callback(currTime + timeToCall);
	                },
	                timeToCall);
	            lastTime = currTime + timeToCall;
	            return id;
	        };
	    }

	    if (!window.cancelAnimationFrame) {
	        window.cancelAnimationFrame = function (id) {
	            clearTimeout(id);
	        };
	    }
	}());


/***/ }),
/* 40 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var chartConst = __webpack_require__(8);
	var chartFactory = __webpack_require__(30);
	var BarChart = __webpack_require__(41);
	var ColumnChart = __webpack_require__(124);
	var LineChart = __webpack_require__(125);
	var AreaChart = __webpack_require__(127);
	var ColumnLineComboChart = __webpack_require__(128);
	var LineScatterComboChart = __webpack_require__(130);
	var LineAreaComboChart = __webpack_require__(131);
	var PieDonutComboChart = __webpack_require__(132);
	var PieChart = __webpack_require__(133);
	var BubbleChart = __webpack_require__(134);
	var ScatterChart = __webpack_require__(135);
	var HeatmapChart = __webpack_require__(136);
	var TreemapChart = __webpack_require__(139);
	var MapChart = __webpack_require__(140);
	var RadialChart = __webpack_require__(143);
	var BoxplotChart = __webpack_require__(144);
	var BulletChart = __webpack_require__(145);

	chartFactory.register(chartConst.CHART_TYPE_BAR, BarChart);
	chartFactory.register(chartConst.CHART_TYPE_COLUMN, ColumnChart);
	chartFactory.register(chartConst.CHART_TYPE_LINE, LineChart);
	chartFactory.register(chartConst.CHART_TYPE_AREA, AreaChart);
	chartFactory.register(chartConst.CHART_TYPE_COLUMN_LINE_COMBO, ColumnLineComboChart);
	chartFactory.register(chartConst.CHART_TYPE_LINE_SCATTER_COMBO, LineScatterComboChart);
	chartFactory.register(chartConst.CHART_TYPE_LINE_AREA_COMBO, LineAreaComboChart);
	chartFactory.register(chartConst.CHART_TYPE_PIE_DONUT_COMBO, PieDonutComboChart);
	chartFactory.register(chartConst.CHART_TYPE_PIE, PieChart);
	chartFactory.register(chartConst.CHART_TYPE_BUBBLE, BubbleChart);
	chartFactory.register(chartConst.CHART_TYPE_SCATTER, ScatterChart);
	chartFactory.register(chartConst.CHART_TYPE_HEATMAP, HeatmapChart);
	chartFactory.register(chartConst.CHART_TYPE_TREEMAP, TreemapChart);
	chartFactory.register(chartConst.CHART_TYPE_MAP, MapChart);
	chartFactory.register(chartConst.CHART_TYPE_RADIAL, RadialChart);
	chartFactory.register(chartConst.CHART_TYPE_BOXPLOT, BoxplotChart);
	chartFactory.register(chartConst.CHART_TYPE_BULLET, BulletChart);


/***/ }),
/* 41 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileoverview Bar chart.
	 * @author NHN Ent.
	 *         FE Development Lab <dl_javascript@nhnent.com>
	 */

	'use strict';

	var ChartBase = __webpack_require__(42);
	var chartConst = __webpack_require__(8);
	var rawDataHandler = __webpack_require__(31);
	var predicate = __webpack_require__(21);
	var snippet = __webpack_require__(6);

	var BarChart = snippet.defineClass(ChartBase, /** @lends BarChart.prototype */ {
	    /**
	     * className
	     * @type {string}
	     */
	    className: 'tui-bar-chart',
	    /**
	     * Bar chart.
	     * @constructs BarChart
	     * @extends ChartBase
	     * @mixes axisTypeMixer
	     * @param {Array.<Array>} rawData raw data
	     * @param {object} theme chart theme
	     * @param {object} options chart options
	     */
	    init: function(rawData, theme, options) {
	        rawDataHandler.updateRawSeriesDataByOptions(rawData, options.series);
	        this._updateOptionsRelatedDiverging(options);

	        ChartBase.call(this, {
	            rawData: rawData,
	            theme: theme,
	            options: options,
	            hasAxes: true
	        });
	    },

	    /**
	     * Update options related diverging option.
	     * @param {object} options - options
	     * @private
	     */
	    _updateOptionsRelatedDiverging: function(options) {
	        var isCenter;

	        options.series = options.series || {};

	        /**
	         * Whether has right y axis or not.
	         * @type {boolean}
	         */
	        this.hasRightYAxis = false;

	        if (options.series.diverging) {
	            options.yAxis = options.yAxis || {};
	            options.xAxis = options.xAxis || {};
	            options.plot = options.plot || {};

	            options.series.stackType = options.series.stackType || chartConst.NORMAL_STACK_TYPE;
	            this.hasRightYAxis = snippet.isArray(options.yAxis) && options.yAxis.length > 1;

	            isCenter = predicate.isYAxisAlignCenter(this.hasRightYAxis, options.yAxis.align);

	            options.yAxis.isCenter = isCenter;
	            options.xAxis.divided = isCenter;
	            options.series.divided = isCenter;
	            options.plot.divided = isCenter;
	        }
	    },

	    /**
	     * Add components
	     * @override
	     */
	    addComponents: function() {
	        this.componentManager.register('title', 'title');
	        this.componentManager.register('plot', 'plot');
	        this.componentManager.register('legend', 'legend');

	        this.componentManager.register('barSeries', 'barSeries');

	        this.componentManager.register('yAxis', 'axis');
	        this.componentManager.register('xAxis', 'axis');

	        if (this.hasRightYAxis) {
	            this.componentManager.register('rightYAxis', 'axis');
	        }

	        this.componentManager.register('chartExportMenu', 'chartExportMenu');
	        this.componentManager.register('tooltip', 'tooltip');
	        this.componentManager.register('mouseEventDetector', 'mouseEventDetector');
	    },

	    /**
	     * Get scale option.
	     * @returns {{xAxis: boolean}}
	     * @override
	     */
	    getScaleOption: function() {
	        return {
	            xAxis: true
	        };
	    },

	    /**
	     * On change selected legend.
	     * @param {Array.<?boolean> | {line: ?Array.<boolean>, column: ?Array.<boolean>}} checkedLegends checked legends
	     */
	    onChangeCheckedLegends: function(checkedLegends) {
	        var boundParams;

	        if (this.hasRightYAxis) {
	            boundParams = {
	                optionChartTypes: ['bar', 'bar']
	            };
	        }
	        ChartBase.prototype.onChangeCheckedLegends.call(this, checkedLegends, null, boundParams);
	    },
	    /**
	     * Add data ratios.
	     * @override
	     * modified from axisTypeMixer
	     */
	    addDataRatios: function(limitMap) {
	        var seriesOption = this.options.series || {};
	        var chartType = this.chartType;
	        var stackType = (seriesOption[chartType] || seriesOption).stackType;

	        this.dataProcessor.addDataRatios(limitMap[chartType], stackType, chartType);
	    }
	});

	module.exports = BarChart;


/***/ }),
/* 42 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileoverview ChartBase
	 * @author NHN Ent.
	 *         FE Development Lab <dl_javascript@nhnent.com>
	 */

	'use strict';

	var chartConst = __webpack_require__(8);
	var ComponentManager = __webpack_require__(43);
	var DefaultDataProcessor = __webpack_require__(101);
	var rawDataHandler = __webpack_require__(31);
	var dom = __webpack_require__(9);
	var renderUtil = __webpack_require__(7);
	var boundsAndScaleBuilder = __webpack_require__(112);
	var predicate = __webpack_require__(21);
	var snippet = __webpack_require__(6);

	var ChartBase = snippet.defineClass(/** @lends ChartBase.prototype */ {
	    /**
	     * Chart base.
	     * @constructs ChartBase
	     * @param {object} params parameters
	     *      @param {object} params.rawData raw data
	     *      @param {object} params.theme chart theme
	     *      @param {object} params.options chart options
	     *      @param {boolean} params.hasAxes whether has axes or not
	     *      @param {boolean} params.isVertical whether vertical or not
	     *      @param {DataProcessor} params.DataProcessor DataProcessor
	     */
	    init: function(params) {
	        /**
	         * theme
	         * @type {object}
	         */
	        this.theme = params.theme;

	        this._initializeOptions(params.options);

	        /**
	         * chart type
	         * @type {string}
	         */
	        this.chartType = this.options.chartType;

	        /**
	         * whether chart has axes or not
	         * @type {boolean}
	         */
	        this.hasAxes = params.hasAxes;

	        /**
	         * whether vertical or not
	         * @type {boolean}
	         */
	        this.isVertical = !!params.isVertical;

	        /**
	         * data processor
	         * @type {DataProcessor}
	         */
	        this.dataProcessor = this._createDataProcessor(params);

	        /**
	         * event bus for transmitting message
	         * @type {object}
	         */
	        this.eventBus = new snippet.CustomEvents();

	        /**
	         * previous xAxis data
	         * @type {null|object}
	         */
	        this.prevXAxisData = null;

	        /**
	         * component manager
	         * @type {ComponentManager}
	         */
	        this.componentManager = this._createComponentManager();

	        this.addComponents();

	        this._attachToEventBus();
	    },

	    /**
	     * Attach to event bus.
	     * @private
	     */
	    _attachToEventBus: function() {
	        this.eventBus.on('changeCheckedLegends', this.onChangeCheckedLegends, this);

	        if (this.onZoom) {
	            this.eventBus.on({
	                zoom: this.onZoom,
	                resetZoom: this.onResetZoom
	            }, this);
	        }
	    },

	    /**
	     * Set offset property
	     * @param {{offset: object}} options - options
	     * @param {string} fromProperty - from property name
	     * @param {string} toProperty - to property name
	     * @private
	     */
	    _setOffsetProperty: function(options, fromProperty, toProperty) {
	        if (!snippet.isExisty(options[fromProperty])) {
	            return;
	        }

	        options.offset = options.offset || {};
	        options.offset[toProperty] = options[fromProperty];
	        delete options[fromProperty];
	    },

	    /**
	     * Initialize offset.
	     * @param {{offsetX: ?number, offsetY: ?number}} options - offset options
	     * @private
	     */
	    _initializeOffset: function(options) {
	        if (!options) {
	            return;
	        }

	        this._setOffsetProperty(options, 'offsetX', 'x');
	        this._setOffsetProperty(options, 'offsetY', 'y');
	    },

	    /**
	     * Initialize title options.
	     * @param {
	     *      Array.<{title: (string | {text: string, offsetX: number, offsetY: number})}> |
	     *      {title: (string | {text: string, offsetX: number, offsetY: number})}
	     * } targetOptions - target options
	     * @private
	     */
	    _initializeTitleOptions: function(targetOptions) {
	        var self = this;
	        var optionsSet;

	        if (!targetOptions) {
	            return;
	        }

	        optionsSet = snippet.isArray(targetOptions) ? targetOptions : [targetOptions];
	        snippet.forEachArray(optionsSet, function(options) {
	            var title = options.title;

	            if (snippet.isString(title)) {
	                options.title = {
	                    text: title
	                };
	            }

	            self._initializeOffset(options.title);
	        });
	    },

	    /**
	     * Initialize tooltip options.
	     * @param {{grouped: ?boolean, offsetX: ?number, offsetY: ?number}} options - tooltip options
	     * @private
	     */
	    _initializeTooltipOptions: function(options) {
	        options.grouped = !!options.grouped;
	        this._initializeOffset(options);

	        delete options.position;
	    },

	    /**
	     * Initialize options.
	     * @param {object} options - options for chart
	     * @private
	     */
	    _initializeOptions: function(options) {
	        options.chartTypes = this.charTypes;
	        options.xAxis = options.xAxis || {};
	        options.series = options.series || {};
	        options.tooltip = options.tooltip || {};
	        options.legend = options.legend || {};
	        options.chartExportMenu = options.chartExportMenu || {};

	        this._initializeTitleOptions(options.chart);
	        this._initializeTitleOptions(options.xAxis);
	        this._initializeTitleOptions(options.yAxis);

	        if (snippet.isUndefined(options.legend.visible)) {
	            options.legend.visible = true;
	        }

	        if (snippet.isUndefined(options.chartExportMenu.visible)) {
	            options.chartExportMenu.visible = true;
	        }

	        this._initializeTooltipOptions(options.tooltip);

	        /**
	         * options
	         * @type {object}
	         */
	        this.options = options;
	    },

	    /**
	     * Create dataProcessor for processing raw data.
	     * @param {object} params parameters
	     *      @param {object} params.rawData - raw data
	     *      @param {DataProcessor} params.DataProcessor - DataProcessor class
	     *      @param {{chart: object, chartType: string}} params.options - chart options
	     *      @param {Array} params.seriesTypes series - chart types for rendering series
	     * @returns {object} data processor
	     * @private
	     */
	    _createDataProcessor: function(params) {
	        var DataProcessor, dataProcessor;

	        DataProcessor = params.DataProcessor || DefaultDataProcessor;
	        dataProcessor = new DataProcessor(params.rawData, this.chartType, params.options, this.seriesTypes);

	        return dataProcessor;
	    },

	    /**
	     * Create ComponentManager.
	     * @returns {ComponentManager}
	     * @private
	     */
	    _createComponentManager: function() {
	        return new ComponentManager({
	            options: this.options,
	            theme: this.theme,
	            dataProcessor: this.dataProcessor,
	            hasAxes: this.hasAxes,
	            eventBus: this.eventBus,
	            isVertical: this.isVertical,
	            seriesTypes: this.seriesTypes || [this.chartType]
	        });
	    },

	    /**
	     * Add components.
	     * @abstract
	     */
	    addComponents: function() {},

	    /**
	     * Get scale option.
	     * @abstract
	     */
	    getScaleOption: function() {},

	    /**
	     * Build bounds and scale data.
	     * @param {object} prevXAxisData - previous xAxis data
	     * @param {boolean} addingDataMode - whether adding data mode or not
	     * @returns {{
	     *      layoutBounds: {
	     *          dimensionMap: {
	     *              xAxis: {width: number, height: number},
	     *              yAxis: {width: number, height: number},
	     *              rightYAxis: {width: number, height: number},
	     *              series: {width: number, height: number},
	     *              extendedSeries: {width: number, height: number},
	     *              mouseEventDetector: {width: number, height: number},
	     *              legend: {width: number, height: number},
	     *              tooltip: {width: number, height: number}
	     *          },
	     *          positionMap: {
	     *              xAxis: {left: number, top: number},
	     *              yAxis: {left: number, top: number},
	     *              rightYAxis: {left: number, top: number},
	     *              series: {left: number, top: number},
	     *              extendedSeries: {left: number, top: number},
	     *              mouseEventDetector: {left: number, top: number},
	     *              legend: {left: number, top: number},
	     *              tooltip: {left: number, top: number}
	     *          }
	     *      },
	     *      limitMap: {
	     *          xAxis: {min: number, max: number},
	     *          yAxis: {min: number, max: number}
	     *      },
	     *      axisDataMap: {
	     *          xAxis: object,
	     *          yAxis: object,
	     *          yRightAxis: object
	     *      },
	     *      maxRadius: ?number
	     * }}
	     * @private
	     */
	    _buildBoundsAndScaleData: function(prevXAxisData, addingDataMode) {
	        return boundsAndScaleBuilder.build(this.dataProcessor, this.componentManager, {
	            chartType: this.chartType,
	            seriesTypes: this.seriesTypes,
	            options: this.options,
	            theme: this.theme,
	            hasAxes: this.hasAxes,
	            scaleOption: this.getScaleOption(),
	            isVertical: this.isVertical,
	            hasRightYAxis: this.hasRightYAxis,
	            addedDataCount: this._dynamicDataHelper ? this._dynamicDataHelper.addedDataCount : null,
	            prevXAxisData: prevXAxisData,
	            addingDataMode: addingDataMode
	        });
	    },

	    /**
	     * Add data ratios.
	     * @abstract
	     */
	    addDataRatios: function() {},

	    /**
	     * Make chart ready for render, it should be invoked before render, rerender, resize and zoom.
	     * @param {?boolean} addingDataMode - whether adding data mode or not
	     * @returns {object} Bounds and scale data
	     */
	    readyForRender: function(addingDataMode) {
	        var boundsAndScale = this._buildBoundsAndScaleData(this.prevXAxisData, addingDataMode);

	        if (boundsAndScale.axisDataMap.xAxis) {
	            this.prevXAxisData = boundsAndScale.axisDataMap.xAxis;
	        }

	        this.addDataRatios(boundsAndScale.limitMap);

	        return boundsAndScale;
	    },

	    /**
	     * Render chart.
	     * @param {HTMLElement} wrapper chart wrapper element
	     */
	    render: function(wrapper) {
	        var container = dom.create('DIV', 'tui-chart ' + this.className);
	        var componentManager = this.componentManager;
	        var dataProcessor = this.dataProcessor;
	        var seriesVisibilityMap = dataProcessor.getLegendVisibility();
	        var rawData = rawDataHandler.filterCheckedRawData(dataProcessor.rawData, seriesVisibilityMap);
	        var raphaelPaper = componentManager.drawingToolPicker.getPaper(container, chartConst.COMPONENT_TYPE_RAPHAEL);
	        var boundsAndScale;

	        this.dataProcessor.initData(rawData);

	        raphaelPaper.changeChartBackgroundColor(this.theme.chart.background.color);
	        raphaelPaper.changeChartBackgroundOpacity(this.theme.chart.background.opacity);
	        renderUtil.renderFontFamily(container, this.theme.chart.fontFamily);

	        dom.append(wrapper, container);

	        boundsAndScale = this.readyForRender();

	        renderUtil.renderDimension(container, boundsAndScale.dimensionMap.chart);
	        componentManager.render('render', boundsAndScale, {
	            checkedLegends: seriesVisibilityMap
	        }, container);

	        this.chartContainer = container;
	        this.paper = raphaelPaper;
	    },

	    /**
	     * Rerender.
	     * @param {Array.<?boolean> | {line: ?Array.<boolean>, column: ?Array.<boolean>}} checkedLegends checked legends
	     * @param {?object} rawData rawData
	     */
	    rerender: function(checkedLegends, rawData) {
	        var dataProcessor = this.dataProcessor;
	        var boundsAndScale;

	        if (!rawData) {
	            rawData = rawDataHandler.filterCheckedRawData(
	                dataProcessor.getZoomedRawData(),
	                checkedLegends
	            );
	        }

	        this.dataProcessor.initData(rawData);

	        boundsAndScale = this.readyForRender();

	        this.componentManager.render('rerender', boundsAndScale, {
	            checkedLegends: checkedLegends
	        }, this.chartContainer);
	    },

	    /**
	     * On change checked legend.
	     * @param {Array.<?boolean> | {line: ?Array.<boolean>, column: ?Array.<boolean>}} checkedLegends checked legends
	     * @param {?object} rawData rawData
	     * @param {?object} boundsParams addition params for calculating bounds
	     */
	    onChangeCheckedLegends: function(checkedLegends, rawData, boundsParams) {
	        this.rerender(checkedLegends, rawData, boundsParams);
	    },

	    /**
	     * Animate chart.
	     */
	    animateChart: function() {
	        this.componentManager.execute('animateComponent');
	    },

	    /**
	     * Register of user event.
	     * @param {string} eventName event name
	     * @param {function} func event callback
	     */
	    on: function(eventName, func) {
	        if (chartConst.PUBLIC_EVENT_MAP[eventName]) {
	            this.eventBus.on(chartConst.PUBLIC_EVENT_PREFIX + eventName, func);
	        }
	    },

	    /**
	     * Remove user event.
	     * @param {string} eventName event name
	     * @param {function} func event callback
	     */
	    off: function(eventName, func) {
	        if (chartConst.PUBLIC_EVENT_MAP[eventName]) {
	            this.eventBus.off(chartConst.PUBLIC_EVENT_PREFIX + eventName, func);
	        }
	    },

	    /**
	     * Update dimension of chart.
	     * @param {{width: number, height: number}} dimension dimension
	     * @returns {boolean} whether updated or not
	     * @private
	     */
	    _updateChartDimension: function(dimension) {
	        var updated = false;
	        var options = this.options;

	        options.chart = options.chart || {};

	        if (dimension.width && dimension.width > 0 && options.chart.width !== dimension.width) {
	            options.chart.width = dimension.width;
	            updated = true;
	        }

	        if (dimension.height && dimension.height > 0 && options.chart.height !== dimension.height) {
	            options.chart.height = dimension.height;
	            updated = true;
	        }

	        return updated;
	    },

	    /**
	     * Public API for resizable.
	     * @param {object} dimension dimension
	     *      @param {number} dimension.width width
	     *      @param {number} dimension.height height
	     * @api
	     */
	    resize: function(dimension) {
	        var updated, boundsAndScale, chartDimension;

	        if (!dimension) {
	            return;
	        }

	        updated = this._updateChartDimension(dimension);

	        if (!updated) {
	            return;
	        }

	        boundsAndScale = this.readyForRender();
	        chartDimension = boundsAndScale.dimensionMap.chart;

	        renderUtil.renderDimension(this.chartContainer, chartDimension);
	        this.paper.resizeBackground(chartDimension.width, chartDimension.height);

	        this.componentManager.render('resize', boundsAndScale);
	    },

	    /**
	     * Set tooltip align option.
	     * @param {string} align align (left|center|right, top|middle|bottom)
	     * @api
	     */
	    setTooltipAlign: function(align) {
	        this.componentManager.get('tooltip').setAlign(align);
	    },

	    /**
	     * Set tooltip offset option.
	     * @param {object} offset - tooltip offset
	     *      @param {number} offset.x - offset x
	     *      @param {number} offset.y - offset y
	     * @api
	     */
	    setTooltipOffset: function(offset) {
	        this.componentManager.get('tooltip').setOffset(offset);
	    },

	    /**
	     * Set position option.
	     * @param {object} position moving position
	     *      @param {number} position.left left
	     *      @param {number} position.top top
	     * @api
	     * @deprecated
	     */
	    setTooltipPosition: function(position) {
	        this.componentManager.get('tooltip').setPosition(position);
	    },

	    /**
	     * Reset tooltip align option.
	     * @api
	     */
	    resetTooltipAlign: function() {
	        this.componentManager.get('tooltip').resetAlign();
	    },

	    /**
	     * Reset tooltip position.
	     * @api
	     */
	    resetTooltipOffset: function() {
	        this.componentManager.get('tooltip').resetOffset();
	    },

	    /**
	     * Reset tooltip position.
	     * @api
	     * @deprecated
	     */
	    resetTooltipPosition: function() {
	        this.resetTooltipOffset();
	    },

	    /**
	     * Show series label.
	     * @api
	     */
	    showSeriesLabel: function() {
	        var seriesSet = this.componentManager.where({componentType: 'series'});

	        snippet.forEachArray(seriesSet, function(series) {
	            series.showLabel();
	        });
	    },

	    /**
	     * Hide series label.
	     * @api
	     */
	    hideSeriesLabel: function() {
	        var seriesSet = this.componentManager.where({componentType: 'series'});

	        snippet.forEachArray(seriesSet, function(series) {
	            series.hideLabel();
	        });
	    },

	    /**
	     * Add data.
	     * @abstract
	     */
	    addData: function() {},

	    /**
	     * Add plot line.
	     * @abstract
	     */
	    addPlotLine: function() {},

	    /**
	     * Add plot band.
	     * @abstract
	     */
	    addPlotBand: function() {},

	    /**
	     * Remove plot line.
	     * @abstract
	     */
	    removePlotLine: function() {},

	    /**
	     * Remove plot band.
	     * @abstract
	     */
	    removePlotBand: function() {},

	    /**
	     * Get series item bound by indexes
	     * @param {number} index - tooltip data's category index
	     * @param {number} seriesIndex - tooltip data's series index
	     * @param {number} [outlierIndex] - outlier index of tooltip, exists only hovered on boxplot chart's outlier point
	     *
	     * @returns {?object} - series item bound
	     * @private
	     */
	    _getSeriesData: function(index, seriesIndex, outlierIndex) {
	        var indexes = {
	            index: index,
	            seriesIndex: seriesIndex,
	            outlierIndex: outlierIndex
	        };

	        if (seriesIndex < 0) {
	            return null;
	        }

	        return this.componentManager.get('mouseEventDetector').findDataByIndexes(indexes);
	    },

	    /**
	     * find series index by legend label
	     * @param {string} chartType - chart tyoe
	     * @param {string} legendLabel - legend label
	     * @returns {number} - if not found return -1, else return found series index
	     * @private
	     */
	    _findSeriesIndexByLabel: function(chartType, legendLabel) {
	        var labels = this.dataProcessor.getLegendLabels(chartType);
	        var seriesIndex = -1;
	        var i = 0;
	        var len = labels ? labels.length : 0;

	        for (; i < len; i += 1) {
	            if (labels[i] === legendLabel) {
	                seriesIndex = i;
	                break;
	            }
	        }

	        return seriesIndex;
	    },

	    /**
	     * @param {number} index - category index
	     * @param {number} seriesIndex - series index
	     * @returns {object}
	     */
	    _findDataByIndexes: function(index, seriesIndex) {
	        return this.componentManager.get('mouseEventDetector').findDataByIndexes(index, seriesIndex);
	    },

	    /**
	     * show tooltip by index of series item
	     * @param {object} params - data needed for making a tooltip
	     * @ignore
	     */
	    showTooltip: function(params) {
	        var isGroupTooltip, mouseEventDetector, foundSeriesIndex, foundData;

	        if (!predicate.isSupportPublicShowTooptipAPI(this.chartType)) {
	            return;
	        }

	        isGroupTooltip = this.options.tooltip && this.options.tooltip.grouped;
	        mouseEventDetector = this.componentManager.get('mouseEventDetector');

	        if (isGroupTooltip) {
	            foundData = {indexes: {groupIndex: params.index}};
	        } else {
	            foundSeriesIndex = this._findSeriesIndexByLabel(params.chartType, params.legend);
	            foundData = this._getSeriesData(params.index, foundSeriesIndex, params.outlierIndex);
	        }

	        if (foundData) {
	            foundData.silent = true;
	            mouseEventDetector._showTooltip(foundData);
	        } else {
	            this.hideTooltip();
	        }
	    },

	    /**
	     * hide tooltip
	     * @ignore
	     */
	    hideTooltip: function() {
	        var isGroupTooltip, mouseEventDetector;

	        if (!predicate.isSupportPublicShowTooptipAPI(this.chartType)) {
	            return;
	        }

	        isGroupTooltip = this.options.tooltip && this.options.tooltip.grouped;
	        mouseEventDetector = this.componentManager.get('mouseEventDetector');

	        if ((isGroupTooltip && mouseEventDetector.prevIndex >= 0) ||
	            (!isGroupTooltip && mouseEventDetector.prevFoundData)) {
	            mouseEventDetector._hideTooltip({silent: true});
	        }
	    }
	});

	module.exports = ChartBase;


/***/ }),
/* 43 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileoverview ComponentManager manages components of chart.
	 * @author NHN Ent.
	 *         FE Development Lab <dl_javascript@nhnent.com>
	 */

	'use strict';

	var chartConst = __webpack_require__(8);
	var dom = __webpack_require__(9);
	var Axis = __webpack_require__(44);
	var Plot = __webpack_require__(46);
	var title = __webpack_require__(47);
	var RadialPlot = __webpack_require__(48);
	var ChartExportMenu = __webpack_require__(50);
	var DrawingToolPicker = __webpack_require__(38);

	// legends
	var Legend = __webpack_require__(56);
	var SpectrumLegend = __webpack_require__(58);
	var CircleLegend = __webpack_require__(59);

	// tooltips
	var Tooltip = __webpack_require__(60);
	var GroupTooltip = __webpack_require__(66);
	var MapChartTooltip = __webpack_require__(68);

	// mouse event detectors
	var MapChartEventDetector = __webpack_require__(69);
	var mouseEventDetector = __webpack_require__(73);

	// series
	var BarSeries = __webpack_require__(80);
	var ColumnSeries = __webpack_require__(84);
	var LineSeries = __webpack_require__(85);
	var RadialSeries = __webpack_require__(87);
	var AreaSeries = __webpack_require__(88);
	var BubbleSeries = __webpack_require__(89);
	var ScatterSeries = __webpack_require__(91);
	var MapSeries = __webpack_require__(92);
	var PieSeries = __webpack_require__(93);
	var HeatmapSeries = __webpack_require__(94);
	var TreemapSeries = __webpack_require__(95);
	var BoxplotSeries = __webpack_require__(97);
	var BulletSeries = __webpack_require__(98);

	var Zoom = __webpack_require__(99);

	var snippet = __webpack_require__(6);

	var COMPONENT_FACTORY_MAP = {
	    axis: Axis,
	    plot: Plot,
	    radialPlot: RadialPlot,
	    legend: Legend,
	    spectrumLegend: SpectrumLegend,
	    circleLegend: CircleLegend,
	    tooltip: Tooltip,
	    groupTooltip: GroupTooltip,
	    mapChartTooltip: MapChartTooltip,
	    mapChartEventDetector: MapChartEventDetector,
	    mouseEventDetector: mouseEventDetector,
	    barSeries: BarSeries,
	    columnSeries: ColumnSeries,
	    lineSeries: LineSeries,
	    radialSeries: RadialSeries,
	    areaSeries: AreaSeries,
	    bubbleSeries: BubbleSeries,
	    scatterSeries: ScatterSeries,
	    mapSeries: MapSeries,
	    pieSeries: PieSeries,
	    heatmapSeries: HeatmapSeries,
	    treemapSeries: TreemapSeries,
	    boxplotSeries: BoxplotSeries,
	    bulletSeries: BulletSeries,
	    zoom: Zoom,
	    chartExportMenu: ChartExportMenu,
	    title: title
	};

	var ComponentManager = snippet.defineClass(/** @lends ComponentManager.prototype */ {
	    /**
	     * ComponentManager manages components of chart.
	     * @param {object} params parameters
	     *      @param {object} params.theme - theme
	     *      @param {object} params.options - options
	     *      @param {DataProcessor} params.dataProcessor - data processor
	     *      @param {boolean} params.hasAxes - whether has axes or not
	     * @constructs ComponentManager
	     * @private
	     */
	    init: function(params) {
	        var chartOption = params.options.chart;
	        var width = snippet.pick(chartOption, 'width') || chartConst.CHART_DEFAULT_WIDTH;
	        var height = snippet.pick(chartOption, 'height') || chartConst.CHART_DEFAULT_HEIGHT;

	        /**
	         * Components
	         * @type {Array.<object>}
	         */
	        this.components = [];

	        /**
	         * componentFactory map.
	         * @type {object}
	         */
	        this.componentMap = {};

	        /**
	         * theme
	         * @type {object}
	         */
	        this.theme = params.theme || {};

	        /**
	         * options
	         * @type {object}
	         */
	        this.options = params.options || {};

	        /**
	         * data processor
	         * @type {DataProcessor}
	         */
	        this.dataProcessor = params.dataProcessor;

	        /**
	         * whether chart has axes or not
	         * @type {boolean}
	         */
	        this.hasAxes = params.hasAxes;

	        /**
	         * whether chart is vertical or not
	         * @type {boolean}
	         */
	        this.isVertical = params.isVertical;

	        /**
	         * event bus for transmitting message
	         * @type {object}
	         */
	        this.eventBus = params.eventBus;

	        /**
	         * Drawing tool picker
	         * @type {object}
	         */
	        this.drawingToolPicker = new DrawingToolPicker();

	        this.drawingToolPicker.initDimension({
	            width: width,
	            height: height
	        });

	        /**
	         * seriesTypes of chart
	         * @type {Array.<string>}
	         */
	        this.seriesTypes = params.seriesTypes;
	    },

	    /**
	     * Make component options.
	     * @param {object} options options
	     * @param {string} optionKey component option key
	     * @param {string} componentName component name
	     * @param {number} index component index
	     * @returns {object} options
	     * @private
	     */
	    _makeComponentOptions: function(options, optionKey, componentName, index) {
	        options = options || this.options[optionKey];
	        options = snippet.isArray(options) ? options[index] : options || {};

	        return options;
	    },

	    /**
	     * Register component.
	     * The component refers to a component of the chart.
	     * The component types are axis, legend, plot, series and mouseEventDetector.
	     * Chart Component Description : https://i-msdn.sec.s-msft.com/dynimg/IC267997.gif
	     * @param {string} name component name
	     * @param {string} classType component factory name
	     * @param {object} params params that for alternative charts
	     */
	    register: function(name, classType, params) {
	        var index, component, componentType, componentFactory, optionKey;

	        params = params || {};

	        params.name = name;

	        index = params.index || 0;

	        componentFactory = COMPONENT_FACTORY_MAP[classType];
	        componentType = componentFactory.componentType;

	        params.chartTheme = this.theme;
	        params.chartOptions = this.options;
	        params.seriesTypes = this.seriesTypes;

	        if (componentType === 'axis') {
	            // Get theme and options by axis name
	            // As axis has 3 types(xAxis, yAxis, rightYAxis)
	            optionKey = name;
	        } else {
	            optionKey = componentType;
	        }

	        params.theme = this.theme[optionKey];
	        params.options = this.options[optionKey];

	        if (!params.theme && optionKey === 'rightYAxis') {
	            params.theme = this.theme.yAxis;
	        }

	        if (!params.options && optionKey === 'rightYAxis') {
	            params.options = this.options.yAxis;
	        }

	        if (optionKey === 'series') {
	            snippet.forEach(this.seriesTypes, function(seriesType) {
	                if (name.indexOf(seriesType) === 0) {
	                    params.options = params.options[seriesType] || params.options; // For combo chart, options are set for each chart
	                    params.theme = params.theme[seriesType]; // For combo, single chart, themes are set for each chart

	                    if (snippet.isArray(params.options)) {
	                        params.options = params.options[index] || {};
	                    }

	                    return false;
	                }

	                return true;
	            });
	        }

	        params.dataProcessor = this.dataProcessor;
	        params.hasAxes = this.hasAxes;
	        params.isVertical = this.isVertical;
	        params.eventBus = this.eventBus;

	        // alternative scale models for charts that do not use common scale models like maps
	        params.alternativeModel = this.alternativeModel;

	        component = componentFactory(params);

	        // component creation can be refused by factory, according to option data
	        if (component) {
	            component.componentName = name;
	            component.componentType = componentType;

	            this.components.push(component);
	            this.componentMap[name] = component;
	        }
	    },

	    /**
	     * Make data for rendering.
	     * @param {string} name - component name
	     * @param {string} type - component type
	     * @param {object} paper - raphael object
	     * @param {{
	     *      layoutBounds: {
	     *          dimensionMap: object,
	     *          positionMap: object
	     *      },
	     *      limitMap: object,
	     *      axisDataMap: object,
	     *      maxRadius: ?number
	     * }} boundsAndScale - bounds and scale data
	     * @param {?object} additionalData - additional data
	     * @returns {object}
	     * @private
	     */
	    _makeDataForRendering: function(name, type, paper, boundsAndScale, additionalData) {
	        var data = snippet.extend({
	            paper: paper
	        }, additionalData);

	        if (boundsAndScale) {
	            snippet.extend(data, boundsAndScale);

	            data.layout = {
	                dimension: data.dimensionMap[name] || data.dimensionMap[type],
	                position: data.positionMap[name] || data.positionMap[type]
	            };
	        }

	        return data;
	    },

	    /**
	     * Render components.
	     * @param {string} funcName - function name for executing
	     * @param {{
	     *      layoutBounds: {
	     *          dimensionMap: object,
	     *          positionMap: object
	     *      },
	     *      limitMap: object,
	     *      axisDataMap: object,
	     *      maxRadius: ?number
	     * }} boundsAndScale - bounds and scale data
	     * @param {?object} additionalData - additional data
	     * @param {?HTMLElement} container - container
	     */
	    render: function(funcName, boundsAndScale, additionalData, container) {
	        var self = this;
	        var name, type;

	        var elements = snippet.map(this.components, function(component) {
	            var element = null;
	            var data, result, paper;

	            if (component[funcName]) {
	                name = component.componentName;
	                type = component.componentType;
	                paper = self.drawingToolPicker.getPaper(container, component.drawingType);
	                data = self._makeDataForRendering(name, type, paper, boundsAndScale, additionalData);

	                result = component[funcName](data);

	                if (result && !result.paper) {
	                    element = result;
	                }
	            }

	            return element;
	        });

	        if (container) {
	            dom.append(container, elements);
	        }
	    },

	    /**
	     * Find components to conditionMap.
	     * @param {object} conditionMap condition map
	     * @returns {Array.<object>} filtered components
	     */
	    where: function(conditionMap) {
	        return snippet.filter(this.components, function(component) {
	            var contained = true;

	            snippet.forEach(conditionMap, function(value, key) {
	                if (component[key] !== value) {
	                    contained = false;
	                }

	                return contained;
	            });

	            return contained;
	        });
	    },

	    /**
	     * Execute components.
	     * @param {string} funcName - function name
	     */
	    execute: function(funcName) {
	        var args = Array.prototype.slice.call(arguments, 1);

	        snippet.forEachArray(this.components, function(component) {
	            if (component[funcName]) {
	                component[funcName].apply(component, args);
	            }
	        });
	    },

	    /**
	     * Get component.
	     * @param {string} name component name
	     * @returns {object} component instance
	     */
	    get: function(name) {
	        return this.componentMap[name];
	    },

	    /**
	     * Whether has component or not.
	     * @param {string} name - comopnent name
	     * @returns {boolean}
	     */
	    has: function(name) {
	        return !!this.get(name);
	    }
	});

	module.exports = ComponentManager;


/***/ }),
/* 44 */
/***/ (function(module, exports, __webpack_require__) {

	/**

	 * @fileoverview  Axis component.
	 * @author NHN Ent.
	 *         FE Development Lab <dl_javascript@nhnent.com>
	 */

	'use strict';

	var chartConst = __webpack_require__(8);
	var predicate = __webpack_require__(21);
	var calculator = __webpack_require__(45);
	var pluginFactory = __webpack_require__(32);
	var renderUtil = __webpack_require__(7);
	var snippet = __webpack_require__(6);

	var Axis = snippet.defineClass(/** @lends Axis.prototype */ {
	    /**
	     * Axis component.
	     * @constructs Axis
	     * @private
	     * @param {object} params parameters
	     *      @param {object} params.bound axis bound
	     *      @param {object} params.theme axis theme
	     *      @param {object} params.options axis options
	     *      @param {object} params.dataProcessor data processor of chart
	     *      @param {object} params.seriesType series type
	     *      @param {boolean} params.isYAxis boolean value for axis is vertical or not
	     */
	    init: function(params) {
	        /**
	         * Axis view className
	         * @type {string}
	         */
	        this.className = 'tui-chart-axis-area';

	        /**
	         * Data processor
	         * @type {DataProcessor}
	         */
	        this.dataProcessor = params.dataProcessor;

	        /**
	         * Options
	         * @type {object}
	         */
	        this.options = params.options || {};

	        /**
	         * Axis Theme
	         * Use chart background theme object for render yAxis background on dynamicDataShifting chart
	         * @type {object}
	         */
	        this.theme = snippet.extend({}, params.theme, {
	            background: params.chartTheme.chart.background
	        });

	        /**
	         * Whether label type axis or not.
	         * @type {boolean}
	         */
	        this.isLabelAxis = false;

	        /**
	         * Whether vertical type or not.
	         * @type {boolean}
	         */
	        this.isYAxis = params.isYAxis;

	        /**
	         * Whether data dynamic shifting or not.
	         * @type {boolean}
	         */
	        this.shifting = params.shifting;

	        /**
	         * cached axis data
	         * @type {object}
	         */
	        this.data = {};

	        /**
	         * layout bounds information for this components
	         * @type {null|{dimension:{width:number, height:number}, position:{left:number, top:number, ?right:number}}}
	         */
	        this.layout = null;

	        /**
	         * dimension map for layout of chart
	         * @type {null|object}
	         */
	        this.dimensionMap = null;

	        /**
	         * axis data map
	         * @type {null|object}
	         */
	        this.axisDataMap = null;

	        /**
	         * Renderer
	         * @type {object}
	         */
	        this.graphRenderer = pluginFactory.get(chartConst.COMPONENT_TYPE_RAPHAEL, 'axis');

	        /**
	         * Drawing type
	         * @type {string}
	         */
	        this.drawingType = chartConst.COMPONENT_TYPE_RAPHAEL;

	        /**
	         * Paper additional width
	         * @type {number}
	         */
	        this.paperAdditionalWidth = 0;

	        /**
	         * Paper additional height
	         * @type {number}
	         */
	        this.paperAdditionalHeight = 0;

	        /**
	         * Raphael Element for axis background
	         * We should caching this for prevent making background multiply
	         * @type {Raphael.Element}
	         */
	        this._elBg = null;

	        this.isRightYAxis = params.name === 'rightYAxis';
	    },

	    /**
	     * Render vertical axis background
	     * @private
	     */
	    _renderBackground: function() {
	        var dimension = snippet.extend({}, this.layout.dimension);
	        var position = snippet.extend({}, this.layout.position);

	        if (this._elBg) {
	            this._elBg.remove();
	        }

	        this._elBg = this.graphRenderer.renderBackground(this.paper, position, dimension, this.theme.background);
	    },
	    /**
	     * Render child containers like title area, label area and tick area.
	     * @param {number} size xAxis width or yAxis height
	     * @param {number} tickCount tick count
	     * @param {Array.<number|string>} categories categories
	     * @param {number} additionalWidth additional width
	     * @private
	     */
	    _renderChildContainers: function(size, tickCount, categories, additionalWidth) {
	        var isYAxisLineType = this.isYAxis && this.data.aligned;
	        var axisLimit = this.limitMap[this.dataProcessor.chartType];
	        var isNegativeLimitChart = !this.data.limit && axisLimit && axisLimit.min < 0;
	        var isBarChart = predicate.isBarTypeChart(this.dataProcessor.chartType);
	        var seriesOption = this.dataProcessor.getOption('series') || {};
	        var isDivergingOption = seriesOption.diverging;

	        additionalWidth = additionalWidth || 0;

	        if (this.isYAxis && !this.data.isPositionRight && !this.options.isCenter && this.shifting) {
	            this._renderBackground();
	        }

	        this._renderTitleArea(size, additionalWidth);

	        if (this.options.showLabel !== false) {
	            this._renderLabelArea(size, tickCount, categories, additionalWidth);
	        }

	        if (!isYAxisLineType) {
	            this._renderTickArea(size, tickCount, additionalWidth);
	        }
	        if (isNegativeLimitChart && isBarChart && !isDivergingOption) {
	            this._renderNegativeStandardsLine(size, additionalWidth, this.dimensionMap.series, axisLimit);
	        }
	    },

	    /**
	     * Render divided xAxis if yAxis rendered in the center.
	     * @param {{width: number, height:number}} dimension axis area width and height
	     * @private
	     */
	    _renderDividedAxis: function(dimension) {
	        var axisData = this.data;
	        var lSideWidth = Math.round(dimension.width / 2);
	        var rSideWidth = dimension.width - lSideWidth - 1;
	        var tickCount = axisData.tickCount;
	        var halfTickCount = parseInt(tickCount / 2, 10) + 1;
	        var categories = axisData.labels;
	        var lCategories = categories.slice(0, halfTickCount);
	        var rCategories = categories.slice(halfTickCount - 1, tickCount);
	        var tickInterval = lSideWidth / halfTickCount;
	        var secondXAxisAdditionalPosition = lSideWidth + this.dimensionMap.yAxis.width - 1;

	        this.paperAdditionalWidth = tickInterval;

	        this._renderChildContainers(lSideWidth, halfTickCount, lCategories, 0);
	        this._renderChildContainers(rSideWidth + 1, halfTickCount, rCategories,
	            secondXAxisAdditionalPosition);
	    },

	    /**
	     * Render single axis if not divided.
	     * @param {{width: number, height: number}} dimension axis area dimension
	     * @private
	     */
	    _renderNotDividedAxis: function(dimension) {
	        var axisData = this.data;
	        var isYAxis = this.isYAxis;
	        var size = isYAxis ? dimension.height : dimension.width;
	        var additionalSize = 0;

	        if (axisData.positionRatio) {
	            additionalSize = size * axisData.positionRatio;
	        }

	        this._renderChildContainers(size, axisData.tickCount, axisData.labels, additionalSize);
	    },

	    /**
	     * Render axis area.
	     * @private
	     */
	    _renderAxisArea: function() {
	        var dimension = this.layout.dimension;
	        var axisData = this.data;

	        this.isLabelAxis = axisData.isLabelAxis;

	        if (this.options.divided) {
	            this.containerWidth = dimension.width + this.dimensionMap.yAxis.width;
	            this._renderDividedAxis(dimension);
	            dimension.width = this.containerWidth;
	        } else {
	            dimension.width += this.options.isCenter ? 1 : 0;
	            this._renderNotDividedAxis(dimension);
	        }
	    },

	    /**
	     * Set data for rendering.
	     * @param {{
	     *      options: ?object,
	     *      layout: {
	     *          dimension: {width: number, height: number},
	     *          position: {left: number, top: number}
	     *      },
	     *      dimensionMap: object,
	     *      axisDataMap: object
	     * }} data - bounds and scale data
	     * @private
	     */
	    _setDataForRendering: function(data) {
	        this.layout = data.layout;
	        this.dimensionMap = data.dimensionMap;
	        this.limitMap = data.limitMap;
	        this.data = data.axisDataMap[this.componentName];
	        this.options = this.data.options;
	    },

	    /**
	     * @param {object} data - bounds and scale data
	     */
	    render: function(data) {
	        this.paper = data.paper;
	        this.axisSet = data.paper.set();

	        this._setDataForRendering(data);
	        this._renderAxisArea();
	    },

	    /**
	     * Rerender axis component.
	     * @param {object} data - bounds and scale data
	     */
	    rerender: function(data) {
	        this.axisSet.remove();

	        this.render(data);
	    },

	    /**
	     * Resize axis component.
	     * @param {object} data - bounds and scale data
	     */
	    resize: function(data) {
	        this.rerender(data);
	    },

	    /**
	     * Zoom.
	     * @param {object} data - bounds and scale data
	     */
	    zoom: function(data) {
	        this.rerender(data);
	    },

	    /**
	     * get other side axis dimension
	     * @returns {object}
	     * @private
	     */
	    _getOtherSideDimension: function() {
	        return this.dimensionMap[this.isYAxis ? 'xAxis' : 'yAxis'];
	    },

	    /**
	     * Title area renderer
	     * @param {number} size - area size
	     * @param {number} additionalWidth - right side xAxis position
	     * @private
	     */
	    _renderTitleArea: function(size, additionalWidth) {
	        var title = this.options.title || {};
	        var yAxisOption = this.dataProcessor.getOption('yAxis');
	        var seriesOption = this.dataProcessor.getOption('series') || {};

	        if (title.text) {
	            this.graphRenderer.renderTitle(this.paper, {
	                text: title.text,
	                offset: title.offset,
	                theme: this.theme.title,
	                rotationInfo: {
	                    isVertical: this.isYAxis,
	                    isPositionRight: this.data.isPositionRight,
	                    isCenter: this.options.isCenter,
	                    isColumnType: predicate.isColumnTypeChart(
	                        this.dataProcessor.chartType, this.dataProcessor.seriesTypes
	                    ),
	                    isDiverging: seriesOption.diverging,
	                    isYAxisCenter: yAxisOption && yAxisOption.align === 'center'
	                },
	                layout: this.layout,
	                areaSize: size,
	                additionalWidth: additionalWidth,
	                otherSideDimension: this._getOtherSideDimension(),
	                tickCount: this.data.tickCount,
	                set: this.axisSet
	            });
	        }
	    },

	    /**
	     * Render tick line.
	     * @param {number} areaSize - width or height
	     * @param {boolean} isNotDividedXAxis - whether is not divided x axis or not.
	     * @param {number} additionalSize - additional size
	     * @private
	     */
	    _renderTickLine: function(areaSize, isNotDividedXAxis, additionalSize) {
	        this.graphRenderer.renderTickLine({
	            areaSize: areaSize,
	            additionalSize: additionalSize,
	            additionalWidth: this.paperAdditionalWidth,
	            additionalHeight: this.paperAdditionalHeight,
	            isPositionRight: this.data.isPositionRight,
	            isCenter: this.data.options.isCenter,
	            isNotDividedXAxis: isNotDividedXAxis,
	            isVertical: this.isYAxis,
	            tickColor: this.theme.tickColor,
	            layout: this.layout,
	            paper: this.paper,
	            set: this.axisSet
	        });
	    },

	    /**
	     * Render ticks.
	     * @param {number} size - width or height
	     * @param {number} tickCount - tick count
	     * @param {boolean} isNotDividedXAxis - whether is not divided x axis or not.
	     * @param {number} [additionalSize] - additional size
	     * @private
	     */
	    _renderTicks: function(size, tickCount, isNotDividedXAxis, additionalSize) {
	        var tickColor = this.theme.tickColor;
	        var axisData = this.data;
	        var sizeRatio = axisData.sizeRatio || 1;
	        var isYAxis = this.isYAxis;
	        var isCenter = this.data.options.isCenter;
	        var isPositionRight = this.data.isPositionRight;
	        var positions = calculator.makeTickPixelPositions((size * sizeRatio), tickCount);
	        var additionalHeight = this.paperAdditionalHeight + 1;
	        var additionalWidth = this.paperAdditionalWidth;

	        positions.length = axisData.tickCount;

	        this.graphRenderer.renderTicks({
	            paper: this.paper,
	            layout: this.layout,
	            positions: positions,
	            isVertical: isYAxis,
	            isCenter: isCenter,
	            additionalSize: additionalSize,
	            additionalWidth: additionalWidth,
	            additionalHeight: additionalHeight,
	            isPositionRight: isPositionRight,
	            tickColor: tickColor,
	            set: this.axisSet
	        });
	    },

	    _renderNegativeStandardsLine: function(size, additionalSize, seriesDimension, axisLimit) {
	        this.graphRenderer.renderStandardLine({
	            areaSize: size,
	            isVertical: this.isYAxis,
	            layout: this.layout,
	            paper: this.paper,
	            set: this.axisSet,
	            seriesDimension: seriesDimension,
	            axisLimit: axisLimit
	        });
	    },

	    /**
	     * Render tick area.
	     * @param {number} size - width or height
	     * @param {number} tickCount - tick count
	     * @param {number} [additionalSize] - additional size (width or height)
	     * @private
	     */
	    _renderTickArea: function(size, tickCount, additionalSize) {
	        var isNotDividedXAxis = !this.isYAxis && !this.options.divided;

	        this._renderTickLine(size, isNotDividedXAxis, (additionalSize || 0));
	        this._renderTicks(size, tickCount, isNotDividedXAxis, (additionalSize || 0));
	    },

	    /**
	     * Render label area.
	     * @param {number} size label area size
	     * @param {number} tickCount tick count
	     * @param {Array.<string>} categories categories
	     * @param {number} [additionalSize] additional size (width or height)
	     * @private
	     */
	    _renderLabelArea: function(size, tickCount, categories, additionalSize) {
	        var sizeRatio = this.data.sizeRatio || 1;
	        var tickPixelPositions = calculator.makeTickPixelPositions((size * sizeRatio), tickCount, 0);
	        var labelDistance = tickPixelPositions[1] - tickPixelPositions[0];

	        this._renderLabels(tickPixelPositions, categories, labelDistance, (additionalSize || 0));
	    },

	    /**
	     * Make html of rotation labels.
	     * @param {Array.<object>} positions label position array
	     * @param {string[]} categories categories
	     * @param {number} labelSize label size
	     * @param {number} additionalSize additional size
	     * @private
	     */
	    _renderRotationLabels: function(positions, categories, labelSize, additionalSize) {
	        var renderer = this.graphRenderer;
	        var isYAxis = this.isYAxis;
	        var theme = this.theme.label;
	        var degree = this.data.degree;
	        var halfWidth = labelSize / 2;
	        var horizontalTop = this.layout.position.top + chartConst.X_AXIS_LABEL_PADDING;
	        var baseLeft = this.layout.position.left;
	        var labelMargin = this.options.labelMargin || 0;

	        snippet.forEach(positions, function(position, index) {
	            var labelPosition = position + (additionalSize || 0);
	            var positionTopAndLeft = {};

	            if (isYAxis) {
	                positionTopAndLeft.top = labelPosition + halfWidth;
	                positionTopAndLeft.left = labelSize + labelMargin;
	            } else {
	                positionTopAndLeft.top = horizontalTop + labelMargin;
	                positionTopAndLeft.left = baseLeft + labelPosition - theme.fontSize;

	                if (this.isLabelAxis) {
	                    positionTopAndLeft.left += halfWidth;
	                }
	            }

	            renderer.renderRotatedLabel({
	                degree: degree,
	                labelText: categories[index],
	                paper: this.paper,
	                positionTopAndLeft: positionTopAndLeft,
	                set: this.axisSet,
	                theme: theme
	            });
	        }, this);
	    },

	    /**
	     * Make html of normal labels.
	     * @param {Array.<object>} positions label position array
	     * @param {string[]} categories categories
	     * @param {number} labelSize label size
	     * @param {number} additionalSize additional size
	     * @private
	     */
	    _renderNormalLabels: function(positions, categories, labelSize, additionalSize) {
	        var renderer = this.graphRenderer;
	        var isYAxis = this.isYAxis;
	        var isPositionRight = this.data.isPositionRight;
	        var isCategoryLabel = this.isLabelAxis;
	        var theme = this.theme.label;
	        var dataProcessor = this.dataProcessor;
	        var isLineTypeChart = predicate.isLineTypeChart(dataProcessor.chartType, dataProcessor.seriesTypes);
	        var isPointOnColumn = isLineTypeChart && this.options.pointOnColumn;
	        var layout = this.layout;
	        var labelMargin = this.options.labelMargin || 0;

	        snippet.forEach(positions, function(position, index) {
	            var labelPosition = position + additionalSize;
	            var halfLabelDistance = labelSize / 2;
	            var positionTopAndLeft = {};
	            /*
	             * to prevent printing `undefined` text, when category label is not set
	             */
	            if (labelPosition < 0) {
	                return;
	            }

	            if (isYAxis) {
	                positionTopAndLeft = this._getYAxisLabelPosition(layout, {
	                    labelPosition: labelPosition,
	                    isCategoryLabel: isCategoryLabel,
	                    halfLabelDistance: halfLabelDistance,
	                    isPositionRight: isPositionRight
	                });
	            } else {
	                positionTopAndLeft = this._getXAxisLabelPosition(layout, {
	                    labelMargin: labelMargin,
	                    labelHeight: renderUtil.getRenderedLabelsMaxHeight(categories, theme),
	                    labelPosition: labelPosition,
	                    isCategoryLabel: isCategoryLabel,
	                    isLineTypeChart: isLineTypeChart,
	                    isPointOnColumn: isPointOnColumn,
	                    halfLabelDistance: halfLabelDistance
	                });
	            }

	            positionTopAndLeft.top = Math.round(positionTopAndLeft.top);
	            positionTopAndLeft.left = Math.round(positionTopAndLeft.left);

	            renderer.renderLabel({
	                isPositionRight: isPositionRight,
	                isVertical: isYAxis,
	                isCenter: this.options.isCenter,
	                labelSize: labelSize,
	                labelText: categories[index],
	                paper: this.paper,
	                positionTopAndLeft: positionTopAndLeft,
	                set: this.axisSet,
	                theme: theme
	            });
	        }, this);
	    },

	    /**
	     * @param {object} layout - axis dimension, position
	     * @param {object} params - optional data needed to render axis labels
	     * @returns {object} top, left positon of y axis
	     */
	    _getYAxisLabelPosition: function(layout, params) {
	        var labelTopPosition = params.labelPosition;
	        var labelLeftPosition;

	        if (params.isCategoryLabel) {
	            labelTopPosition += params.halfLabelDistance + layout.position.top;
	        } else {
	            labelTopPosition = layout.dimension.height + layout.position.top - labelTopPosition;
	        }

	        if (params.isPositionRight) {
	            labelLeftPosition = layout.position.left + layout.dimension.width;
	        } else if (this.options.isCenter) {
	            labelLeftPosition = layout.position.left + (layout.dimension.width / 2);
	        } else {
	            labelLeftPosition = layout.position.left;
	        }

	        return {
	            top: labelTopPosition,
	            left: labelLeftPosition
	        };
	    },

	    /**
	     * @param {object} layout - axis dimension, position
	     * @param {object} params - optional data needed to render axis labels
	     * @returns {object} top, left positon of y axis
	     */
	    _getXAxisLabelPosition: function(layout, params) {
	        var labelTopPosition = layout.position.top
	            + chartConst.X_AXIS_LABEL_PADDING
	            + params.labelMargin + (params.labelHeight / 2);
	        var labelLeftPosition = params.labelPosition + layout.position.left;

	        if (params.isCategoryLabel) {
	            if (!params.isLineTypeChart || params.isPointOnColumn) {
	                labelLeftPosition += params.halfLabelDistance;
	            }
	        }

	        return {
	            top: labelTopPosition,
	            left: labelLeftPosition
	        };
	    },

	    /**
	     * Make labels html.
	     * @param {Array.<object>} positions - positions for labels
	     * @param {Array.<string>} categories - categories
	     * @param {number} labelSize label size
	     * @param {number} additionalSize additional size
	     * @private
	     */
	    _renderLabels: function(positions, categories, labelSize, additionalSize) {
	        var isRotationlessXAxis = !this.isYAxis && this.isLabelAxis && (this.options.rotateLabel === false);
	        var hasRotatedXAxisLabel = this.componentName === 'xAxis' && this.data.degree;
	        var axisLabels;

	        if (isRotationlessXAxis) {
	            axisLabels = this.data.multilineLabels;
	        } else {
	            axisLabels = categories;
	        }

	        if (axisLabels.length) {
	            positions.length = axisLabels.length;
	        }

	        axisLabels = renderUtil.addPrefixSuffix(axisLabels, this.options.prefix, this.options.suffix);

	        if (hasRotatedXAxisLabel) {
	            this._renderRotationLabels(positions, axisLabels, labelSize, additionalSize);
	        } else {
	            this._renderNormalLabels(positions, axisLabels, labelSize, additionalSize);
	        }
	    },
	    /**
	     * Animate axis for adding data
	     * @param {object} data rendering data
	     */
	    animateForAddingData: function(data) {
	        if (!this.isYAxis) {
	            this.graphRenderer.animateForAddingData(data.tickSize);
	        }
	    }
	});

	/**
	 * Factory for Axis
	 * @param {object} axisParam parameter
	 * @returns {object}
	 * @ignore
	 */
	function axisFactory(axisParam) {
	    var chartType = axisParam.chartOptions.chartType;
	    var name = axisParam.name;

	    axisParam.isYAxis = (name === 'yAxis' || name === 'rightYAxis');
	    axisParam.shifting = axisParam.chartOptions.series.shifting;

	    // In combo chart, the theme is divided into series name considering two YAxis(yAxis and rightYAxis)
	    // @todo change theme structure so that access theme by axis type, not considering chart type
	    //     like theme.xAxis, theme.yAxis, theme.rightYAxis
	    if (chartType === 'combo') {
	        if (axisParam.isYAxis) {
	            axisParam.theme = axisParam.theme[axisParam.seriesTypes[0]];
	        } else if (name === 'rightYAxis') {
	            axisParam.componentType = 'yAxis';
	            axisParam.theme = axisParam.theme[axisParam.seriesTypes[1]];
	            axisParam.index = 1;
	        }
	    // @todo I do not know why the single type chart with yAxis branches once again as the chart name inside it. I feel inconsistent
	    } else if (axisParam.isYAxis) {
	        axisParam.theme = axisParam.theme[chartType];
	    // single chart, xAxis
	    } else {
	        axisParam.theme = axisParam.theme;
	    }

	    return new Axis(axisParam);
	}

	axisFactory.componentType = 'axis';
	axisFactory.Axis = Axis;

	module.exports = axisFactory;


/***/ }),
/* 45 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileoverview calculator.
	 * @author NHN Ent.
	 *         FE Development Lab <dl_javascript@nhnent.com>
	 */

	'use strict';

	var snippet = __webpack_require__(6);
	var arrayUtil = __webpack_require__(10);
	var PERCENT_DIVISOR = 100;

	/**
	 * Calculator.
	 * @module calculator
	 * @private */
	var calculator = {
	    /**
	     * Calculate limit from chart min, max data.
	     *  - http://peltiertech.com/how-excel-calculates-automatic-chart-axis-limits/
	     * @memberOf module:calculator
	     * @param {number} min min minimum value of user data
	     * @param {number} max max maximum value of user data
	     * @returns {{min: number, max: number}} limit axis limit
	     */
	    calculateLimit: function(min, max) {
	        var saveMin = 0,
	            limit = {},
	            iodValue; // increase or decrease value;

	        if (min < 0) {
	            saveMin = min;
	            max -= min;
	            min = 0;
	        }

	        iodValue = (max - min) / 20;
	        limit.max = max + iodValue + saveMin;

	        if (max / 6 > min) {
	            limit.min = saveMin;
	        } else {
	            limit.min = min - iodValue + saveMin;
	        }

	        return limit;
	    },

	    /**
	     * Make tick positions of pixel type.
	     * @memberOf module:calculator
	     * @param {number} size area width or height
	     * @param {number} count tick count
	     * @param {?number} additionalPosition additional position
	     * @returns {Array.<number>} positions
	     */
	    makeTickPixelPositions: function(size, count, additionalPosition) {
	        var positions = [];

	        additionalPosition = additionalPosition || 0;

	        if (count > 0) {
	            positions = snippet.map(snippet.range(0, count), function(index) {
	                var ratio = index === 0 ? 0 : (index / (count - 1));

	                return (ratio * size) + additionalPosition;
	            });
	            positions[positions.length - 1] -= 1;
	        }

	        return positions;
	    },

	    /**
	     * Make labels from limit.
	     * @memberOf module:calculator
	     * @param {{min: number, max: number}} limit axis limit
	     * @param {number} step step between max and min
	     * @returns {string[]} labels
	     * @private
	     */
	    makeLabelsFromLimit: function(limit, step) {
	        var multipleNum = calculator.findMultipleNum(step);
	        var min = Math.round(limit.min * multipleNum);
	        var max = Math.round(limit.max * multipleNum);
	        var labels = snippet.range(min, max + 1, step * multipleNum);

	        return snippet.map(labels, function(label) {
	            return label / multipleNum;
	        });
	    },

	    /**
	     * Calculate step from limit.
	     * @memberOf module:calculator
	     * @param {{min: number, max: number}} limit axis limit
	     * @param {number} count value count
	     * @returns {number} step
	     */
	    calculateStepFromLimit: function(limit, count) {
	        return calculator.divide(calculator.subtract(limit.max, limit.min), (count - 1));
	    },

	    /**
	     * Sum plus values.
	     * @param {Array.<number>} values values
	     * @returns {number} sum
	     */
	    sumPlusValues: function(values) {
	        var plusValues = snippet.filter(values, function(value) {
	            return value > 0;
	        });

	        return calculator.sum(plusValues);
	    },

	    /**
	     * Sum minus values.
	     * @param {Array.<number>} values values
	     * @returns {number} sum
	     */
	    sumMinusValues: function(values) {
	        var minusValues = snippet.filter(values, function(value) {
	            return value < 0;
	        });

	        return calculator.sum(minusValues);
	    },

	    /**
	     * Make percentage value.
	     * @param {number} value - value
	     * @param {number} totalValue - total value
	     * @returns {number}
	     */
	    makePercentageValue: function(value, totalValue) {
	        return value / totalValue * PERCENT_DIVISOR;
	    },

	    /**
	     * Calculate ratio for making bound.
	     * @param {number} value - value
	     * @param {number} divNumber - number for division
	     * @param {number} subNumber - number for subtraction
	     * @param {number} baseRatio - base ratio
	     * @returns {number}
	     */
	    calculateRatio: function(value, divNumber, subNumber, baseRatio) {
	        return ((value - subNumber) / divNumber) * baseRatio;
	    }
	};

	/**
	 * Get length after decimal point.
	 * @memberOf module:calculator
	 * @param {string | number} value target value
	 * @returns {number} result length
	 */
	var getDecimalLength = function(value) {
	    var valueArr = String(value).split('.');

	    return valueArr.length === 2 ? valueArr[1].length : 0;
	};

	/**
	 * Find multiple num.
	 * @memberOf module:calculator
	 * @param {...Array} target values
	 * @returns {number} multiple num
	 */
	var findMultipleNum = function() {
	    var args = [].slice.call(arguments);
	    var underPointLens = snippet.map(args, function(value) {
	        return calculator.getDecimalLength(value);
	    });
	    var underPointLen = arrayUtil.max(underPointLens);

	    return Math.pow(10, underPointLen);
	};

	/**
	 * Modulo operation for floating point operation.
	 * @memberOf module:calculator
	 * @param {number} target target values
	 * @param {number} modNum mod num
	 * @returns {number} result mod
	 */
	var mod = function(target, modNum) {
	    var multipleNum = calculator.findMultipleNum(modNum);
	    var result;

	    if (multipleNum === 1) {
	        result = target % modNum;
	    } else {
	        result = ((target * multipleNum) % (modNum * multipleNum)) / multipleNum;
	    }

	    return result;
	};

	/**
	 * 'add' is function for add operation to floating point.
	 * @memberOf module:calculator
	 * @param {number} a target a
	 * @param {number} b target b
	 * @returns {number}
	 */
	var add = function(a, b) {
	    var multipleNum = calculator.findMultipleNum(a, b);

	    return ((a * multipleNum) + (b * multipleNum)) / multipleNum;
	};

	/**
	 * 'subtract' is function for subtract operation to floating point.
	 * @memberOf module:calculator
	 * @param {number} a target a
	 * @param {number} b target b
	 * @returns {number}
	 */
	var subtract = function(a, b) {
	    var multipleNum = calculator.findMultipleNum(a, b);

	    return ((a * multipleNum) - (b * multipleNum)) / multipleNum;
	};

	/**
	 * 'multiply' is function for multiply operation to floating point.
	 * @param {number} a target a
	 * @param {number} b target b
	 * @returns {number}
	 */
	var multiply = function(a, b) {
	    var multipleNum = calculator.findMultipleNum(a, b);

	    return ((a * multipleNum) * (b * multipleNum)) / (multipleNum * multipleNum);
	};

	/**
	 * 'divide' is function for divide operation to floating point.
	 * @memberOf module:calculator
	 * @param {number} a target a
	 * @param {number} b target b
	 * @returns {number}
	 */
	var divide = function(a, b) {
	    var multipleNum = calculator.findMultipleNum(a, b);

	    return (a * multipleNum) / (b * multipleNum);
	};

	/**
	 * Sum.
	 * @memberOf module:calculator
	 * @param {Array.<number>} values target values
	 * @returns {number} result value
	 */
	var sum = function(values) {
	    var copyArr = values.slice();
	    copyArr.unshift(0);

	    return snippet.reduce(copyArr, function(base, value) {
	        return calculator.add(parseFloat(base), parseFloat(value));
	    });
	};

	calculator.getDecimalLength = getDecimalLength;
	calculator.findMultipleNum = findMultipleNum;
	calculator.mod = mod;
	calculator.add = add;
	calculator.subtract = subtract;
	calculator.multiply = multiply;
	calculator.divide = divide;
	calculator.sum = sum;

	module.exports = calculator;


/***/ }),
/* 46 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileoverview Plot component.
	 * @author NHN Ent.
	 *         FE Development Lab <dl_javascript@nhnent.com>
	 */

	'use strict';

	var chartConst = __webpack_require__(8);
	var predicate = __webpack_require__(21);
	var calculator = __webpack_require__(45);
	var snippet = __webpack_require__(6);
	var map = snippet.map;

	var Plot = snippet.defineClass(/** @lends Plot.prototype */ {
	    /**
	     * Plot component.
	     * @constructs Plot
	     * @private
	     * @param {object} params parameters
	     *      @param {number} params.vTickCount vertical tick count
	     *      @param {number} params.hTickCount horizontal tick count
	     *      @param {object} params.theme axis theme
	     */
	    init: function(params) {
	        /**
	         * Plot view className
	         * @type {string}
	         */
	        this.className = 'tui-chart-plot-area';

	        /**
	         * Data processor
	         * @type {DataProcessor}
	         */
	        this.dataProcessor = params.dataProcessor;

	        /**
	         * Options
	         * @type {object}
	         */
	        this.options = params.options || {};
	        this.options.showLine = snippet.isUndefined(this.options.showLine) ? true : this.options.showLine;
	        this.options.lines = this.options.lines || [];
	        this.options.bands = this.options.bands || [];

	        /**
	         * x axis type option
	         * @type {?string}
	         */
	        this.xAxisTypeOption = params.xAxisTypeOption;

	        /**
	         * Theme
	         * @type {object}
	         */
	        this.theme = params.theme || {};

	        /**
	         * chart type
	         * @type {string}
	         */
	        this.chartType = params.chartType;

	        /**
	         * sub charts type
	         * @type {Array.<string>}
	         */
	        this.chartTypes = params.chartTypes;

	        /**
	         * layout bounds information for this components
	         * @type {null|{dimension:{width:number, height:number}, position:{left:number, top:number}}}
	         */
	        this.layout = null;

	        /**
	         * axis data map
	         * @type {null|object}
	         */
	        this.axisDataMap = null;

	        this.drawingType = chartConst.COMPONENT_TYPE_RAPHAEL;
	    },

	    /**
	     * Render plot area.
	     * @param {object} paper paper object
	     * @private
	     */
	    _renderPlotArea: function(paper) {
	        var dimension;

	        dimension = this.layout.dimension;

	        if (predicate.isLineTypeChart(this.chartType, this.chartTypes)) {
	            this._renderOptionalLines(paper, dimension);
	        }

	        if (this.options.showLine) {
	            this._renderPlotLines(paper, dimension);
	        }
	    },

	    /**
	     * Set data for rendering.
	     * @param {{
	     *      layout: {
	     *          dimension: {width: number, height: number},
	     *          position: {left: number, top: number}
	     *      },
	     *      axisDataMap: object
	     * }} data - bounds and scale data
	     * @private
	     */
	    _setDataForRendering: function(data) {
	        if (data) {
	            this.layout = data.layout;
	            this.dimensionMap = data.dimensionMap;
	            this.axisDataMap = data.axisDataMap;
	            this.paper = data.paper;
	        }
	    },

	    /**
	     * Render plot component.
	     * @param {object} data - bounds and scale data
	     */
	    render: function(data) {
	        var paper = (data && data.paper) || this.paper;
	        this.plotSet = paper.set();
	        this.additionalPlotSet = paper.set();

	        this._setDataForRendering(data);
	        this._renderPlotArea(this.paper);

	        this.additionalPlotSet.toBack();
	        this.plotSet.toBack();
	        paper.pushDownBackgroundToBottom();
	    },

	    /**
	     * Rerender.
	     * @param {object} data - bounds and scale data
	     */
	    rerender: function(data) {
	        this.additionalPlotSet.remove();
	        this.plotSet.remove();
	        this.render(data);
	    },

	    /**
	     * Resize plot component.
	     * @param {object} data - bounds and scale data
	     */
	    resize: function(data) {
	        this.rerender(data);
	    },

	    /**
	     * Zoom.
	     * @param {object} data - bounds and scale data
	     */
	    zoom: function(data) {
	        this.rerender(data);
	    },

	    /**
	     * Make template params for vertical line.
	     * @param {object} additionalParams - additional params
	     * @returns {object}
	     * @private
	     */
	    _makeVerticalLineTemplateParams: function(additionalParams) {
	        return snippet.extend({
	            className: 'vertical',
	            positionType: 'left',
	            width: '1px'
	        }, additionalParams);
	    },

	    /**
	     * Make template params for horizontal line.
	     * @param {object} additionalParams - additional params
	     * @returns {object}
	     * @private
	     */
	    _makeHorizontalLineTemplateParams: function(additionalParams) {
	        return snippet.extend({
	            className: 'horizontal',
	            positionType: 'bottom',
	            height: '1px'
	        }, additionalParams);
	    },

	    /**
	     * Render line
	     * @param {number} offsetPosition - start percentage offsetPosition
	     * @param {object} attributes - line attributes
	     * @returns {object} path
	     * @private
	     */
	    _renderLine: function(offsetPosition, attributes) {
	        var top = this.layout.position.top;
	        var height = this.layout.dimension.height;
	        var pathString = 'M' + offsetPosition + ',' + top + 'V' + (top + height);
	        var path = this.paper.path(pathString);

	        path.attr({
	            opacity: attributes.opacity || 1,
	            stroke: attributes.color
	        });

	        this.additionalPlotSet.push(path);

	        return path;
	    },

	    /**
	     * Render band
	     * @param {number} offsetPosition - start percentage offsetPosition
	     * @param {number} plotWidth - plotWidth
	     * @param {object} attributes - band attributes
	     * @returns {object} band
	     * @private
	     */
	    _renderBand: function(offsetPosition, plotWidth, attributes) {
	        var position = this.layout.position;
	        var dimension = this.layout.dimension;
	        var remainingWidth = dimension.width - offsetPosition + position.left;
	        var bandWidth = plotWidth < 0 ? remainingWidth : plotWidth;
	        var rect = this.paper.rect(offsetPosition, position.top, bandWidth, dimension.height);

	        rect.attr({
	            fill: attributes.color,
	            opacity: attributes.opacity || 1,
	            stroke: attributes.color
	        });

	        this.additionalPlotSet.push(rect);

	        return rect;
	    },

	    /**
	     * Create value range for optional line.
	     * @param {{range: ?Array.<number>, value: ?number}} optionalLineData - optional line data
	     * @returns {Array.<number>}
	     * @private
	     */
	    _createOptionalLineValueRange: function(optionalLineData) {
	        var range = optionalLineData.range || [optionalLineData.value];

	        if (predicate.isDatetimeType(this.xAxisTypeOption)) {
	            range = map(range, function(value) {
	                var date = new Date(value);

	                return date.getTime() || value;
	            });
	        }

	        return range;
	    },

	    /**
	     * Create position for optional line, when value axis.
	     * @param {{dataMin: number, distance: number}} xAxisData - x axis data
	     * @param {number} width - width
	     * @param {number} value - value
	     * @returns {number|null}
	     * @private
	     */
	    _createOptionalLinePosition: function(xAxisData, width, value) {
	        var ratio = (value - xAxisData.dataMin) / xAxisData.distance;
	        var position = ratio * width;

	        if (ratio === 1) {
	            position -= 1;
	        }

	        if (position < 0) {
	            position = null;
	        }

	        return position;
	    },

	    /**
	     * Create position for optional line, when label axis.
	     * @param {number} width - width
	     * @param {number} value - value
	     * @returns {number|null}
	     * @private
	     */
	    _createOptionalLinePositionWhenLabelAxis: function(width, value) {
	        var dataProcessor = this.dataProcessor;
	        var index = dataProcessor.findCategoryIndex(value);
	        var position = null;
	        var ratio;

	        if (!snippet.isNull(index)) {
	            ratio = (index === 0) ? 0 : (index / (dataProcessor.getCategoryCount() - 1));
	            position = ratio * width;
	        }

	        if (ratio === 1) {
	            position -= 1;
	        }

	        return position;
	    },

	    /**
	     * Create position map for optional line.
	     * @param {{range: ?Array.<number>, value: ?number}} optionalLineData - optional line data
	     * @param {{isLabelAxis: boolean, dataMin: number, distance: number}} xAxisData - x axis data
	     * @param {number} width - width
	     * @returns {{start: number, end: number}}
	     * @private
	     */
	    _createOptionalLinePositionMap: function(optionalLineData, xAxisData, width) {
	        var categories = this.dataProcessor.getCategories();
	        var range = this._createOptionalLineValueRange(optionalLineData);
	        var startPosition, endPosition;

	        if (xAxisData.isLabelAxis) {
	            startPosition = this._createOptionalLinePositionWhenLabelAxis(width, range[0]);
	            endPosition = this._createOptionalLinePositionWhenLabelAxis(width, range[1]);
	        } else {
	            startPosition = this._createOptionalLinePosition(xAxisData, width, range[0]);
	            endPosition = range[1] && this._createOptionalLinePosition(xAxisData, width, range[1]);
	        }

	        if (snippet.isNull(startPosition)) {
	            startPosition = this._isBeforeVisibleCategories(range[0], categories[0]) ? 0 : -1;
	        }

	        if (snippet.isNull(endPosition)) {
	            endPosition = this._isAfterVisibleCatgories(range[1], categories[categories.length - 1]) ? width : -1;
	        }

	        return {
	            start: startPosition,
	            end: endPosition
	        };
	    },

	    /**
	     * @param {string} value - value of starting point
	     * @param {string} firstCategory - first visible category data
	     * @returns {boolean} - whether starting point value is at before first visible category data or not
	     * @private
	     */
	    _isBeforeVisibleCategories: function(value, firstCategory) {
	        var dataProcessor = this.dataProcessor;
	        var valueIndex, firstCategoryIndex;

	        if (!snippet.isExisty(value)) {
	            return false;
	        }

	        if (predicate.isDatetimeType(this.xAxisTypeOption)) {
	            return value < firstCategory;
	        }

	        valueIndex = dataProcessor.findAbsoluteCategoryIndex(value);
	        firstCategoryIndex = dataProcessor.findAbsoluteCategoryIndex(firstCategory);

	        return (valueIndex >= 0) && (valueIndex < firstCategoryIndex);
	    },

	    /**
	     * @param {string} value - value of end point
	     * @param {string} lastCategory - last visible category data
	     * @returns {boolean} - whether end point value is at after last visible category data or not
	     * @private
	     */
	    _isAfterVisibleCatgories: function(value, lastCategory) {
	        var dataProcessor = this.dataProcessor;
	        var valueIndex, lastCategoryIndex;

	        if (!snippet.isExisty(value)) {
	            return false;
	        }

	        if (predicate.isDatetimeType(this.xAxisTypeOption)) {
	            return value > lastCategory;
	        }

	        valueIndex = dataProcessor.findAbsoluteCategoryIndex(value);
	        lastCategoryIndex = dataProcessor.findAbsoluteCategoryIndex(lastCategory);

	        return (valueIndex >= 0) && (valueIndex > lastCategoryIndex);
	    },

	    /**
	     * Render optional line.
	     * @param {Array.<number>} xAxisData - positions
	     * @param {number} width - standard width
	     * @param {object} attributes - template parameters
	     * @param {object} optionalLineData - optional line information
	     * @returns {object}
	     * @private
	     */
	    _renderOptionalLine: function(xAxisData, width, attributes, optionalLineData) {
	        var positionMap = this._createOptionalLinePositionMap(optionalLineData, xAxisData, width);
	        var line;

	        if (positionMap.start >= 0 && positionMap.start <= width) {
	            attributes.width = 1;

	            attributes.color = optionalLineData.color || 'transparent';
	            attributes.opacity = optionalLineData.opacity;

	            line = this._renderLine(positionMap.start + this.layout.position.left, attributes);
	        }

	        return line;
	    },

	    /**
	     * Render optional band.
	     * @param {Array.<number>} xAxisData - positions
	     * @param {number} width - standard width
	     * @param {object} attributes - template parameters
	     * @param {object} optionalLineData - optional line information
	     * @returns {object}
	     * @private
	     */
	    _makeOptionalBand: function(xAxisData, width, attributes, optionalLineData) {
	        var range = optionalLineData.range;
	        var positionMaps;

	        if (range && range.length) {
	            this._makeRangeTo2DArray(optionalLineData);
	        }

	        positionMaps = map(optionalLineData.range, function(rangeItem) {
	            return this._createOptionalLinePositionMap({range: rangeItem}, xAxisData, width);
	        }, this);

	        if (optionalLineData.mergeOverlappingRanges) {
	            positionMaps.sort(compareByStartPosition);
	            positionMaps = this._mergeOverlappingPositionMaps(positionMaps);
	        }

	        return map(positionMaps, function(positionMap) {
	            var isStartPositionInsidePlotArea = (positionMap.start) >= 0 && (positionMap.start <= width);
	            var bandWidth, band;

	            if (isStartPositionInsidePlotArea && positionMap.end >= 0) {
	                attributes.color = optionalLineData.color || 'transparent';
	                attributes.opacity = optionalLineData.opacity;
	                bandWidth = positionMap.end - positionMap.start;
	                band = this._renderBand(positionMap.start + this.layout.position.left, bandWidth, attributes);
	            }

	            return band;
	        }, this);
	    },

	    /**
	     * Make optional lines html.
	     * @param {Array.<object>} lines - optional lines
	     * @param {{width: number, height: number}} dimension - dimension
	     * @returns {string}
	     * @private
	     */
	    _makeOptionalLines: function(lines, dimension) {
	        var width = dimension.width;
	        var xAxisData = this.axisDataMap.xAxis;
	        var templateParams = this._makeVerticalLineTemplateParams({
	            height: dimension.height + 'px'
	        });
	        var makeOptionalLineHtml = snippet.bind(this._renderOptionalLine, this, xAxisData, width, templateParams);

	        return map(lines, makeOptionalLineHtml);
	    },

	    /**
	     * Make optional lines html.
	     * @param {Array.<object>} lines - optional lines
	     * @param {{width: number, height: number}} dimension - dimension
	     * @returns {string}
	     * @private
	     */
	    _makeOptionalBands: function(lines, dimension) {
	        var width = dimension.width;
	        var xAxisData = this.axisDataMap.xAxis;
	        var templateParams = this._makeVerticalLineTemplateParams({
	            height: dimension.height + 'px'
	        });
	        var makeOptionalLineHtml = snippet.bind(this._makeOptionalBand, this, xAxisData, width, templateParams);

	        return map(lines, makeOptionalLineHtml);
	    },

	    /**
	     * Render optional lines and bands.
	     * @param {object} paper - paper
	     * @param {{width: number, height: number}} dimension - dimension
	     * @private
	     */
	    _renderOptionalLines: function(paper, dimension) {
	        var optionalLines = [];
	        optionalLines = optionalLines.concat(this._makeOptionalBands(this.options.bands, dimension));
	        optionalLines = optionalLines.concat(this._makeOptionalLines(this.options.lines, dimension));

	        this.optionalLines = optionalLines;
	    },

	    /**
	     * Maker html for vertical lines
	     * @param {{width: number, height: number}} dimension - dimension
	     * @private
	     */
	    _renderVerticalLines: function(dimension) {
	        var positions = this._makeHorizontalPositions(dimension.width);
	        var self = this;
	        var layout = this.layout;
	        var left = layout.position.left;
	        var top = layout.position.top;
	        var lineColor = this.theme.lineColor;

	        snippet.forEach(positions, function(position) {
	            var pathString = 'M' + (position + left) + ',' + top + 'V' + (top + layout.dimension.height);

	            var path = self.paper.path(pathString);

	            path.attr({
	                stroke: lineColor,
	                'stroke-width': 1,
	                'stroke-opacity': 0.05
	            });

	            self.plotSet.push(path);
	        });
	    },

	    /**
	     * Maker html for horizontal lines.
	     * @param {{width: number, height: number}} dimension - dimension
	     * @private
	     */
	    _renderHorizontalLines: function(dimension) {
	        var positions = this._makeVerticalPositions(dimension.height);
	        var self = this;
	        var layout = this.layout;
	        var left = layout.position.left;
	        var top = layout.position.top;
	        var distance = positions[1] - positions[0];
	        var lineColor = this.theme.lineColor;

	        snippet.forEach(positions, function(position, index) {
	            var pathString = 'M' + left + ',' + ((distance * index) + top) + 'H' + (left + layout.dimension.width);
	            var path = self.paper.path(pathString);

	            path.attr({
	                stroke: lineColor,
	                'stroke-width': 1,
	                'stroke-opacity': 0.05
	            });

	            self.plotSet.push(path);
	        });
	    },

	    /**
	     * Render plot lines.
	     * @param {HTMLElement} container - container element
	     * @param {{width: number, height: number}} dimension plot area dimension
	     * @private
	     */
	    _renderPlotLines: function(container, dimension) {
	        if (!this.options.hideLine) {
	            this._renderVerticalLines(dimension);
	            this._renderHorizontalLines(dimension);
	        }
	    },

	    /**
	     * Make positions for vertical line.
	     * @param {number} height plot height
	     * @returns {Array.<number>} positions
	     * @private
	     */
	    _makeVerticalPositions: function(height) {
	        var axisDataMap = this.axisDataMap;
	        var yAxis = axisDataMap.yAxis || axisDataMap.rightYAxis;
	        var positions = calculator.makeTickPixelPositions(height, yAxis.validTickCount);

	        positions.shift();

	        return positions;
	    },

	    /**
	     * Make divided positions of plot.
	     * @param {number} width - plot width
	     * @param {number} tickCount - tick count
	     * @returns {Array.<number>}
	     * @private
	     */
	    _makeDividedPlotPositions: function(width, tickCount) {
	        var yAxisWidth = this.dimensionMap.yAxis.width;
	        var leftWidth, rightWidth, leftPositions, rightPositions;

	        tickCount = parseInt(tickCount / 2, 10) + 1;
	        width -= yAxisWidth;
	        leftWidth = Math.round((width) / 2);
	        rightWidth = width - leftWidth;

	        leftPositions = calculator.makeTickPixelPositions(leftWidth, tickCount);
	        rightPositions = calculator.makeTickPixelPositions(rightWidth, tickCount, leftWidth + yAxisWidth);

	        leftPositions.pop();
	        rightPositions.shift();

	        return leftPositions.concat(rightPositions);
	    },

	    /**
	     * Make positions for horizontal line.
	     * @param {number} width plot width
	     * @returns {Array.<number>} positions
	     * @private
	     */
	    _makeHorizontalPositions: function(width) {
	        var tickCount = this.axisDataMap.xAxis.validTickCount;
	        var positions;

	        if (this.options.divided) {
	            positions = this._makeDividedPlotPositions(width, tickCount);
	        } else {
	            positions = calculator.makeTickPixelPositions(width, tickCount);
	            positions.shift();
	        }

	        return positions;
	    },

	    /**
	     * Add plot line.
	     * @param {{index: number, color: string, id: string}} data - data
	     */
	    addPlotLine: function(data) {
	        this.options.lines.push(data);
	        this.rerender();
	    },

	    /**
	     * Add plot band.
	     * @param {{range: Array.<number>, color: string, id: string}} data - data
	     */
	    addPlotBand: function(data) {
	        this.options.bands.push(data);
	        this.rerender();
	    },

	    /**
	     * Remove plot line.
	     * @param {string} id - line id
	     */
	    removePlotLine: function(id) {
	        this.options.lines = snippet.filter(this.options.lines, function(line) {
	            return line.id !== id;
	        });
	        this.rerender();
	    },

	    /**
	     * Remove plot band.
	     * @param {string} id - band id
	     */
	    removePlotBand: function(id) {
	        this.options.bands = snippet.filter(this.options.bands, function(band) {
	            return band.id !== id;
	        });
	        this.rerender();
	    },

	    /**
	     * Animate for adding data.
	     * @param {{tickSize: number, shifting: boolean}} data - data for animation
	     */
	    animateForAddingData: function(data) {
	        var self = this;

	        if (!this.dataProcessor.isCoordinateType()) {
	            if (data.shifting) {
	                snippet.forEach(this.optionalLines, function(line) {
	                    var bbox = line.getBBox();

	                    if (bbox.x - data.tickSize < self.layout.position.left) {
	                        line.animate({
	                            transform: 'T' + data.tickSize + ',' + bbox.y,
	                            opacity: 0
	                        }, 300, 'linear', function() {
	                            line.remove();
	                        });
	                    } else {
	                        line.animate({
	                            transform: 'T' + data.tickSize + ',' + bbox.y
	                        }, 300);
	                    }
	                });
	            }
	        }
	    },

	    /**
	     * Check if  optionalLineData has range property and range property is 2D array
	     * @param {{range: ?Array.<number>}} optionalLineData - optional line data
	     * @private
	     */
	    _makeRangeTo2DArray: function(optionalLineData) {
	        var range = optionalLineData.range;
	        var isOneDimensionArray = range && snippet.isArray(range) &&
	            (range.length === 0 || !snippet.isArray(range[0]));

	        if (isOneDimensionArray) {
	            optionalLineData.range = [range];
	        }
	    },

	    /**
	     * check if some areas are overlapped, and then merge overlapping area
	     * @param {Array.<{start: number, end: number}>} positionMaps - original positionMaps
	     * @returns {Array.<{start: number, end: number}>} - inspected positionMaps
	     * @private
	     */
	    _mergeOverlappingPositionMaps: function(positionMaps) {
	        var i = 1;
	        var len = positionMaps.length;
	        var processedMap, previous, current;

	        if (len) {
	            processedMap = [positionMaps[0]];
	            previous = processedMap[0];
	        }

	        for (; i < len; i += 1) {
	            current = positionMaps[i];

	            if (current.start <= previous.end) {
	                previous.end = Math.max(current.end, previous.end);
	            } else {
	                processedMap.push(current);
	                previous = current;
	            }
	        }

	        return processedMap;
	    }
	});

	/**
	 * Compare positionMap by it's start value
	 * @param {{start: number, end: number}} previous - previouse plot band positionMap
	 * @param {{start: number, end: number}} current - current plot band positionMap
	 * @returns {number} - comparison of whether a is greater than b
	 * @ignore
	 */
	function compareByStartPosition(previous, current) {
	    return previous.start - current.start;
	}

	/**
	 * Factory for Plot
	 * @param {object} param parameter
	 * @returns {object}
	 * @ignore
	 */
	function plotFactory(param) {
	    var chartType = param.chartOptions.chartType;
	    var seriesTypes = param.seriesTypes;
	    var xAxisType = param.chartOptions.xAxis.type;

	    // same among bar, chart, line, area charts
	    param.chartType = chartType;
	    param.chartTypes = seriesTypes;
	    param.xAxisTypeOption = xAxisType;

	    return new Plot(param);
	}

	plotFactory.componentType = 'plot';
	plotFactory.Plot = Plot;

	module.exports = plotFactory;


/***/ }),
/* 47 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileoverview  Title component.
	 * @author NHN Ent.
	 *         FE Development Lab <dl_javascript@nhnent.com>
	 */

	'use strict';

	var chartConst = __webpack_require__(8);
	var pluginFactory = __webpack_require__(32);
	var snippet = __webpack_require__(6);

	var Title = snippet.defineClass(/** @lends Title.prototype */ {
	    /**
	     * Title component.
	     * @constructs Title
	     * @param {object} params parameters
	     *      @param {object} params.bound title bound
	     *      @param {object} params.theme title theme
	     *      @param {object} params.options title options
	     *      @param {object} params.text title text content
	     */
	    init: function(params) {
	        /**
	         * Theme
	         * @type {object}
	         */
	        this.theme = params.theme || {};

	        /**
	         * Title text content
	         * @type {string}
	         */
	        this.titleText = params.text;

	        /**
	         * Relative offset position
	         * @type {object}
	         */
	        this.offset = params.offset;

	        /**
	         * Graph renderer
	         * @type {object}
	         */
	        this.graphRenderer = pluginFactory.get(chartConst.COMPONENT_TYPE_RAPHAEL, 'title');

	        /**
	         * Drawing type
	         * @type {string}
	         */
	        this.drawingType = chartConst.COMPONENT_TYPE_RAPHAEL;
	    },

	    /**
	     * Render title component
	     * @param {object} data data for render title
	     */
	    render: function(data) {
	        this.titleSet = this._renderTitleArea(data.paper);
	    },

	    /**
	     * Render title component
	     * @param {object} data data for render title
	     */
	    resize: function(data) {
	        var dimensionMap = data.dimensionMap;
	        var legendWidth = dimensionMap.legend ? dimensionMap.legend.width : 0;
	        var width = dimensionMap.series.width + legendWidth;
	        this.graphRenderer.resize(width, this.titleSet);
	    },

	    /**
	     * Render title component
	     * @param {object} data data for render title
	     */
	    rerender: function(data) {
	        this.titleSet.remove();

	        this.render(data);
	    },

	    /**
	     * Render title on given paper
	     * @param {object} paper paper object
	     * @returns {object} raphael paper
	     * @private
	     */
	    _renderTitleArea: function(paper) {
	        return this.graphRenderer.render(paper, this.titleText, this.offset, this.theme);
	    }
	});

	/**
	 * Factory for Title
	 * @param {object} param parameter
	 * @returns {object|null}
	 * @ignore
	 */
	function titleFactory(param) {
	    var options = param.chartOptions.chart || {title: {}};
	    var title = null;

	    if (options.title && options.title.text) {
	        param.text = options.title.text;
	        param.offset = options.title.offset;

	        title = new Title(param);
	    }

	    return title;
	}

	titleFactory.componentType = 'title';
	titleFactory.Title = Title;

	module.exports = titleFactory;


/***/ }),
/* 48 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileoverview Radial plot component.
	 * @author NHN Ent.
	 *         FE Development Lab <dl_javascript@nhnent.com>
	 */

	'use strict';

	var geom = __webpack_require__(49);
	var chartConst = __webpack_require__(8);
	var pluginFactory = __webpack_require__(32);
	var snippet = __webpack_require__(6);

	var RadialPlot = snippet.defineClass(/** @lends Plot.prototype */ {
	    /**
	     * plot component className
	     * @type {string}
	     */
	    className: 'tui-chart-plot-area',

	    /**
	     * Plot component.
	     * @constructs Plot
	     * @param {object} params parameters
	     *      @param {number} params.vTickCount vertical tick count
	     *      @param {number} params.hTickCount horizontal tick count
	     *      @param {object} params.theme axis theme
	     */
	    init: function(params) {
	        /**
	         * Options
	         * @type {object}
	         */
	        this.options = snippet.extend({
	            type: 'spiderweb'
	        }, params.options);

	        /**
	         * Theme
	         * @type {object}
	         */
	        this.theme = params.theme || {};

	        /**
	         * Graph renderer
	         * @type {object}
	         */
	        this.graphRenderer = pluginFactory.get(chartConst.COMPONENT_TYPE_RAPHAEL, 'radialPlot');

	        this.drawingType = chartConst.COMPONENT_TYPE_RAPHAEL;
	    },

	    /**
	     * Render plot area
	     * @param {object} paper paper object
	     * @param {object} layout layout
	     * @param {Array.<Array>} plotPositions plot positions
	     * @param {object} labelData label data
	     * @returns {Array.<object>} plotSet
	     */
	    _renderPlotArea: function(paper, layout, plotPositions, labelData) {
	        var renderParams = {
	            paper: paper,
	            layout: layout,
	            plotPositions: plotPositions,
	            labelData: labelData,
	            theme: this.theme,
	            options: this.options
	        };

	        return this.graphRenderer.render(renderParams);
	    },

	    /**
	     * Make plot positions for render
	     * @param {object} axisDataMap axisDataMap
	     * @param {object} layout layout
	     * @returns {Array.<Array>} plot positions
	     */
	    _makePositions: function(axisDataMap, layout) {
	        var width = layout.dimension.width - chartConst.RADIAL_PLOT_PADDING - chartConst.RADIAL_MARGIN_FOR_CATEGORY;
	        var height = layout.dimension.height - chartConst.RADIAL_PLOT_PADDING - chartConst.RADIAL_MARGIN_FOR_CATEGORY;
	        var centerX = (width / 2) + (chartConst.RADIAL_PLOT_PADDING / 2) + (chartConst.RADIAL_MARGIN_FOR_CATEGORY / 2)
	            + layout.position.left;
	        var centerY = (height / 2) - (chartConst.RADIAL_PLOT_PADDING / 2) - (chartConst.RADIAL_MARGIN_FOR_CATEGORY / 2)
	            - layout.position.top;
	        var stepCount = axisDataMap.yAxis.tickCount;
	        var angleStepCount = axisDataMap.xAxis.labels.length;

	        return makeSpiderWebPositions({
	            width: width,
	            height: height,
	            centerX: centerX,
	            centerY: centerY,
	            angleStepCount: angleStepCount,
	            stepCount: stepCount
	        });
	    },

	    /**
	     * Make category positions
	     * @param {object} axisDataMap axisDataMap
	     * @param {object} layout layout
	     * @returns {Array.<object>} category positions
	     */
	    _makeCategoryPositions: function(axisDataMap, layout) {
	        var width = layout.dimension.width - chartConst.RADIAL_PLOT_PADDING - chartConst.RADIAL_CATEGORY_PADDING;
	        var height = layout.dimension.height - chartConst.RADIAL_PLOT_PADDING - chartConst.RADIAL_CATEGORY_PADDING;
	        var centerX = (width / 2) + (chartConst.RADIAL_PLOT_PADDING / 2) + (chartConst.RADIAL_CATEGORY_PADDING / 2)
	            + layout.position.left;
	        var centerY = (height / 2) - (chartConst.RADIAL_PLOT_PADDING / 2) - (chartConst.RADIAL_CATEGORY_PADDING / 2)
	            - layout.position.top;
	        var angleStepCount = axisDataMap.xAxis.labels.length;

	        return makeRadialCategoryPositions({
	            width: width,
	            height: height,
	            centerX: centerX,
	            centerY: centerY,
	            angleStepCount: angleStepCount
	        });
	    },

	    /**
	     * Make label data
	     * @param {object} axisDataMap axisDataMap
	     * @param {object} dimension dimension
	     * @param {Array.<Array>} plotPositions plot positions
	     * @returns {object}
	     */
	    _makeLabelData: function(axisDataMap, dimension, plotPositions) {
	        var categories = axisDataMap.xAxis.labels;
	        var stepLabels = axisDataMap.yAxis.labels;
	        var categoryPositions = this._makeCategoryPositions(axisDataMap, dimension);
	        var categoryLabelData = [];
	        var stepLabelData = [];
	        var i, j;

	        for (i = 0; i < categories.length; i += 1) {
	            categoryLabelData.push({
	                text: categories[i],
	                position: categoryPositions[i]
	            });
	        }

	        // skip last step label. it could overlapped by category label
	        for (j = 0; j < (stepLabels.length - 1); j += 1) {
	            stepLabelData.push({
	                text: stepLabels[j],
	                position: plotPositions[j][0]
	            });
	        }

	        return {
	            category: categoryLabelData,
	            step: stepLabelData
	        };
	    },

	    /**
	     * Render plot component.
	     * @param {object} data - bounds and scale data
	     */
	    render: function(data) {
	        var plotPositions = this._makePositions(data.axisDataMap, data.layout);
	        var labelData = this._makeLabelData(data.axisDataMap, data.layout, plotPositions);

	        this.plotSet = this._renderPlotArea(data.paper, data.layout, plotPositions, labelData);
	    },

	    /**
	     * Re render plot component
	     * @param {object} data - bounds and scale data
	     */
	    rerender: function(data) {
	        this.plotSet.remove();

	        this.render(data);
	    },

	    /**
	     * Resize plot component.
	     * @param {object} data - bounds and scale data
	     */
	    resize: function(data) {
	        this.rerender(data);
	    }
	});

	/**
	 * Make Spider web positions
	 * @param {object} params parameters
	 *     @param {number} params.width width
	 *     @param {number} params.height height
	 *     @param {number} params.centerX center x coordinate
	 *     @param {number} params.centerY cneter y coordinate
	 *     @param {number} params.angleStepCount angle step count
	 *     @param {number} params.stepCount step count
	 * @returns {Array<Array>} positions
	 * @private
	 */
	function makeSpiderWebPositions(params) {
	    var width = params.width;
	    var height = params.height;
	    var centerX = params.centerX;
	    var centerY = params.centerY;
	    var angleStepCount = params.angleStepCount;
	    var stepCount = params.stepCount;
	    var radius = Math.min(width, height) / 2;
	    var angleStep = 360 / angleStepCount;
	    var points = [];
	    var stepPoints, pointY, point, stepPixel, i, j;

	    stepPixel = radius / (stepCount - 1); // As there is not size in step 0, one step is removed

	    for (i = 0; i < stepCount; i += 1) {
	        stepPoints = [];
	        // point Y of first pixel to rotate
	        pointY = centerY + (stepPixel * i);

	        for (j = 0; j < angleStepCount; j += 1) {
	            point = geom.rotatePointAroundOrigin(centerX, centerY, centerX, pointY, angleStep * j);

	            stepPoints.push({
	                left: point.x,
	                top: height - point.y // convert y to top
	            });
	        }

	        stepPoints.push(stepPoints[0]);

	        points[i] = stepPoints;
	    }

	    return points;
	}

	/**
	 * Make radial category positions
	 * @param {object} params parameters
	 *     @param {number} params.width width
	 *     @param {number} params.height height
	 *     @param {number} params.centerX center x coordinate
	 *     @param {number} params.centerY cneter y coordinate
	 *     @param {number} params.angleStepCount angle step count
	 * @returns {Array<object>} category positions
	 * @private
	 */
	function makeRadialCategoryPositions(params) {
	    var width = params.width;
	    var height = params.height;
	    var centerX = params.centerX;
	    var centerY = params.centerY;
	    var angleStepCount = params.angleStepCount;
	    var radius = Math.min(height, width) / 2;
	    var angleStep = 360 / angleStepCount;
	    var points = [];
	    var anchor, point, i, pointY, reversedAngle;

	    pointY = centerY + radius;

	    for (i = 0; i < angleStepCount; i += 1) {
	        reversedAngle = 360 - (angleStep * i);
	        point = geom.rotatePointAroundOrigin(centerX, centerY, centerX, pointY, reversedAngle);

	        if (reversedAngle > 0 && reversedAngle < 180) {
	            anchor = 'end';
	        } else if (reversedAngle > 180 && reversedAngle < 360) {
	            anchor = 'start';
	        } else {
	            anchor = 'middle';
	        }

	        points.push({
	            left: point.x,
	            top: height - point.y, // convert y to top
	            anchor: anchor
	        });
	    }

	    return points;
	}

	function RadialPlotFactory(param) {
	    return new RadialPlot(param);
	}

	RadialPlotFactory.componentType = 'plot';
	RadialPlotFactory.RadialPlot = RadialPlot;

	module.exports = RadialPlotFactory;


/***/ }),
/* 49 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileoverview module for geometric operation
	 * @author NHN Ent.
	 *         FE Development Lab <dl_javascript@nhnent.com>
	 */

	'use strict';

	var chartConst = __webpack_require__(8);

	/**
	 * Rotate a point around the origin with an angle.
	 * @param {number} centerX center point x
	 * @param {number} centerY center point y
	 * @param {number} pointX point x to rotate
	 * @param {number} pointY point y to rotate
	 * @param {number} angle angle
	 * @returns {object} x, y
	 * @ignore
	 */
	function rotatePointAroundOrigin(centerX, centerY, pointX, pointY, angle) {
	    var rad = angle * (Math.PI / 180);

	    var newX = ((pointX - centerX) * Math.cos(rad)) - ((pointY - centerY) * Math.sin(rad));
	    var newY = ((pointX - centerX) * Math.sin(rad)) + ((pointY - centerY) * Math.cos(rad));

	    newX += centerX;
	    newY += centerY;

	    return {
	        x: newX,
	        y: newY
	    };
	}
	/**
	 * Calculate adjacent.
	 * @param {number} degree degree
	 * @param {number} hypotenuse hypotenuse
	 * @returns {number} adjacent
	 * @ignore
	 *
	 *   H : Hypotenuse
	 *   A : Adjacent
	 *   O : Opposite
	 *   D : Degree
	 *
	 *        /|
	 *       / |
	 *    H /  | O
	 *     /   |
	 *    /\ D |
	 *    -----
	 *       A
	 */
	function calculateAdjacent(degree, hypotenuse) {
	    return Math.cos(degree * chartConst.RAD) * hypotenuse;
	}

	/**
	 * Calculate opposite.
	 * @param {number} degree degree
	 * @param {number} hypotenuse hypotenuse
	 * @returns {number} opposite
	 * @ignore
	 */
	function calculateOpposite(degree, hypotenuse) {
	    return Math.sin(degree * chartConst.RAD) * hypotenuse;
	}

	/**
	 * Calculate rotated width.
	 * @param {number} degree - degree
	 * @param {number} width - width
	 * @param {number} height - height
	 * @returns {number}
	 * @ignore
	 */
	function calculateRotatedWidth(degree, width, height) {
	    var centerHalf = calculateAdjacent(degree, width / 2);
	    var sideHalf = calculateAdjacent(chartConst.ANGLE_90 - degree, height / 2);

	    return (centerHalf + sideHalf) * 2;
	}

	/**
	 * Calculate rotated height
	 * @param {number} degree - degree
	 * @param {number} width - width
	 * @param {number} height - height
	 * @returns {number}
	 * @ignore
	 */
	function calculateRotatedHeight(degree, width, height) {
	    var centerHalf = calculateOpposite(degree, width / 2);
	    var sideHalf = calculateOpposite(chartConst.ANGLE_90 - degree, height / 2);

	    return (centerHalf + sideHalf) * 2;
	}

	module.exports = {
	    rotatePointAroundOrigin: rotatePointAroundOrigin,
	    calculateAdjacent: calculateAdjacent,
	    calculateRotatedHeight: calculateRotatedHeight,
	    calculateRotatedWidth: calculateRotatedWidth,
	    calculateOpposite: calculateOpposite
	};


/***/ }),
/* 50 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileoverview chartExportMenu component.
	 * @author NHN Ent.
	 *         FE Development Lab <dl_javascript@nhnent.com>
	 */

	'use strict';

	var chartConst = __webpack_require__(8);
	var chartExporter = __webpack_require__(51);
	var dom = __webpack_require__(9);
	var eventListener = __webpack_require__(55);
	var predicate = __webpack_require__(21);
	var renderUtil = __webpack_require__(7);
	var snippet = __webpack_require__(6);

	var CHART_EXPORT_MENU_ITEMS = ['xls', 'csv', 'png', 'jpeg'];
	var CLASS_NAME_CHART_EXPORT_MENU_OPENED = 'menu-opened';

	var ChartExportMenu = snippet.defineClass(/** @lends ChartExportMenu.prototype */ {
	    /**
	     * ChartExportMenu component.
	     * @constructs ChartExportMenu
	     * @private
	     * @param {object} params parameters
	     */
	    init: function(params) {
	        /**
	         * ChartExportMenu view className
	         * @type {string}
	         */
	        this.className = 'tui-chart-chartExportMenu-area';

	        /**
	         * Data processor
	         * @type {DataProcessor}
	         */
	        this.dataProcessor = params.dataProcessor;

	        /**
	         * chart title
	         * @type {string}
	         */
	        this.chartTitle = params.chartTitle || 'tui-chart';

	        /**
	         * export filename
	         * @type {string}
	         */
	        this.exportFilename = params.exportFilename || this.chartTitle;

	        /**
	         * chart type
	         * @type {string}
	         */
	        this.chartType = params.chartType;

	        /**
	         * layout bounds information for this components
	         * @type {null|{dimension:{width:number, height:number}, position:{right:number, top:number}}}
	         */
	        this.layout = null;

	        /**
	         * chartExportMenu container
	         * @type {HTMLElement}
	         */
	        this.chartExportMenuContainer = null;

	        /**
	         * chartExportMenu element
	         * @type {HTMLElement}
	         */
	        this.chartExportMenu = null;

	        /**
	         * chartExportMenu options
	         */
	        this.options = params.options;

	        /**
	         * Event bus
	         * @type {EventBus}
	         */
	        this.eventBus = params.eventBus;

	        this.drawingType = chartConst.COMPONENT_TYPE_DOM;

	        this.theme = params.theme || null;
	    },

	    /**
	     * Create chartExportMenuButton
	     * @returns {HTMLElement}
	     * @private
	     */
	    _createChartExportMenuButton: function() {
	        var menuButton = dom.create('div', chartConst.CLASS_NAME_CHART_EXPORT_MENU_BUTTON);

	        if (this.options.buttonClass) {
	            dom.addClass(menuButton, this.options.buttonClass);
	        }

	        return menuButton;
	    },
	    /**
	     * Render chartExportMenu area.
	     * @param {HTMLElement} chartExportMenuContainer chartExportMenu area element
	     * @private
	     */
	    _renderChartExportMenuArea: function(chartExportMenuContainer) {
	        var menuButton = this._createChartExportMenuButton();
	        var dimension = this.layout.dimension;

	        chartExportMenuContainer.appendChild(menuButton);

	        renderUtil.renderDimension(chartExportMenuContainer, dimension);
	        renderUtil.renderPosition(chartExportMenuContainer, this.layout.position);
	    },

	    /**
	     * Render chartExportMenu area.
	     * @param {HTMLElement} chartExportMenuContainer chartExportMenu area element
	     * @private
	     */
	    _renderChartExportMenu: function(chartExportMenuContainer) {
	        var seriesDataModelMap = this.dataProcessor.seriesDataModelMap;
	        var isDataDownloadAvailable = this.isDataDownloadAvailable(seriesDataModelMap);
	        var isDownloadSupported = chartExporter.isDownloadSupported;
	        var isImageExtension = chartExporter.isImageExtension;
	        var isImageDownloadAvailable = chartExporter.isImageDownloadAvailable;
	        var menuElement = dom.create('ul', chartConst.CLASS_NAME_CHART_EXPORT_MENU);
	        var menuHead = dom.create('li', chartConst.CLASS_NAME_CHART_EXPORT_MENU_HEAD);
	        var menuBody = dom.create('li', chartConst.CLASS_NAME_CHART_EXPORT_MENU_BODY);
	        var menuStyle = menuElement.style;
	        var menuTheme = this.theme;
	        var menuItems = [];

	        if (isDownloadSupported && (isDataDownloadAvailable || isImageDownloadAvailable)) {
	            menuItems = snippet.map(CHART_EXPORT_MENU_ITEMS, function(exportItemType) {
	                var itemElement;

	                if ((!isImageExtension(exportItemType) && isDataDownloadAvailable)
	                    || (isImageExtension(exportItemType) && isImageDownloadAvailable)
	                ) {
	                    itemElement = dom.create('li', chartConst.CLASS_NAME_CHART_EXPORT_MENU_ITEM);
	                    itemElement.id = exportItemType;
	                    itemElement.innerHTML = exportItemType;
	                }

	                return itemElement;
	            });
	        } else {
	            menuStyle.width = '200px';
	            menuItems[0] = dom.create('li', chartConst.CLASS_NAME_CHART_EXPORT_MENU_ITEM);
	            menuItems[0].innerHTML = 'Browser does not support client-side download.';
	        }

	        if (menuTheme) {
	            if (menuTheme.borderWidth) {
	                menuStyle.borderWidth = menuTheme.borderWidth;
	            }

	            if (menuTheme.borderRadius) {
	                menuStyle.borderRadius = menuTheme.borderRadius;
	            }

	            if (menuTheme.backgroundColor) {
	                menuStyle.backgroundColor = menuTheme.backgroundColor;
	            }

	            if (menuTheme.color) {
	                menuStyle.color = menuTheme.color;
	            }
	        }

	        if (this.options.menuClass) {
	            dom.addClass(menuElement, this.options.menuClass);
	        }

	        menuHead.innerHTML = 'Export to';

	        dom.append(menuBody, menuItems);
	        dom.append(menuElement, menuHead);
	        dom.append(menuElement, menuBody);

	        this.chartExportMenu = menuElement;

	        dom.append(chartExportMenuContainer, menuElement);
	    },

	    /**
	     * Set data for rendering.
	     * @param {{
	     *      layout: {
	     *          dimension: {width: number, height: number},
	     *          position: {left: number, top: number}
	     *      },
	     *      axisDataMap: object
	     * }} data - bounds and scale data
	     * @private
	     */
	    _setDataForRendering: function(data) {
	        if (data) {
	            this.layout = data.layout;
	            this.dimensionMap = data.dimensionMap;
	            this.axisDataMap = data.axisDataMap;
	        }
	    },

	    /**
	     * Render chartExportMenu component.
	     * @param {object} data - bounds and scale data
	     * @returns {HTMLElement} chartExportMenu element
	     */
	    render: function(data) {
	        var container = null;

	        if (chartExporter.isDownloadSupported) {
	            container = this.container = data.paper;

	            dom.addClass(container, this.className);

	            this._setDataForRendering(data);
	            this._renderChartExportMenuArea(container);
	            this._renderChartExportMenu(container);
	            this.chartExportMenuContainer = container;
	            this._attachEvent();
	        }

	        return container;
	    },

	    /**
	     * Rerender.
	     */
	    rerender: function() {
	        this._hideChartExportMenu();
	    },

	    /**
	     * Resize.
	     */
	    resize: function() {
	    },

	    /**
	     * Show chart export menu
	     * @private
	     */
	    _showChartExportMenu: function() {
	        dom.addClass(this.chartExportMenuContainer, CLASS_NAME_CHART_EXPORT_MENU_OPENED);
	        this.chartExportMenu.style.display = 'block';
	    },

	    /**
	     * Hide chart export menu
	     * @private
	     */
	    _hideChartExportMenu: function() {
	        if (this.chartExportMenuContainer) {
	            dom.removeClass(this.chartExportMenuContainer, CLASS_NAME_CHART_EXPORT_MENU_OPENED);
	            this.chartExportMenu.style.display = 'none';
	        }
	    },

	    /**
	     * onclick event handler
	     * @param {MouseEvent} e mouse event
	     * @private
	     */
	    _onClick: function(e) {
	        var elTarget = e.target || e.srcElement;
	        var svgElement = this.container.parentNode.getElementsByTagName('svg')[0];

	        if (dom.hasClass(elTarget, chartConst.CLASS_NAME_CHART_EXPORT_MENU_ITEM)) {
	            if (elTarget.id) {
	                this.eventBus.fire('beforeImageDownload');

	                chartExporter.exportChart(this.exportFilename, elTarget.id,
	                    this.dataProcessor.rawData, svgElement, this.options);

	                this.eventBus.fire('afterImageDownload');
	            }

	            this._hideChartExportMenu();
	        } else if (dom.hasClass(elTarget, chartConst.CLASS_NAME_CHART_EXPORT_MENU_BUTTON)
	            && (this.chartExportMenuContainer === elTarget.parentNode)
	            && !dom.hasClass(this.chartExportMenuContainer, CLASS_NAME_CHART_EXPORT_MENU_OPENED)) {
	            this._showChartExportMenu();
	        } else {
	            this._hideChartExportMenu();
	        }
	    },

	    /**
	     * Return boolean value for chart data is able to export
	     * @param {object} seriesDataModels series data model
	     * @returns {boolean}
	     */
	    isDataDownloadAvailable: function(seriesDataModels) {
	        var result = true;

	        if (predicate.isTreemapChart(this.chartType)) {
	            result = false;
	        } else {
	            snippet.forEach(seriesDataModels, function(seriesDataModel) {
	                if (seriesDataModel.isCoordinateType) {
	                    result = false;
	                }

	                return false;
	            });
	        }

	        return result;
	    },

	    /**
	     * Attach browser event.
	     * @private
	     */
	    _attachEvent: function() {
	        eventListener.on(this.chartExportMenuContainer.parentNode, 'click', this._onClick, this);
	    },

	    /**
	     * Detach browser event.
	     * @private
	     */
	    _detachEvent: function() {
	        eventListener.off(this.chartExportMenuContainer.parentNode, 'click', this._onClick);
	    }
	});

	/**
	 * Factory for ChartExportMenu
	 * @param {object} params parameter
	 * @returns {object|null}
	 * @ignore
	 */
	function chartExportMenuFactory(params) {
	    var isVisible = params.options.visible;
	    var chartExportMenu = null;
	    var chartOption = params.chartOptions.chart || {};
	    var exportingOption = params.chartOptions.chartExportMenu;

	    if (chartOption.title) {
	        params.chartTitle = chartOption.title.text;
	    }

	    if (exportingOption && exportingOption.filename) {
	        params.exportFilename = exportingOption.filename;
	    }

	    if (isVisible) {
	        chartExportMenu = new ChartExportMenu(params);
	    }

	    return chartExportMenu;
	}

	chartExportMenuFactory.componentType = 'chartExportMenu';

	module.exports = chartExportMenuFactory;


/***/ }),
/* 51 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview Chart exporter
	 * @author NHN Ent.
	 *         FE Development Lab <dl_javascript@nhnent.com>
	 */

	'use strict';

	var arrayUtil = __webpack_require__(10);
	var dataExporter = __webpack_require__(52);
	var imageExporter = __webpack_require__(54);
	var snippet = __webpack_require__(6);

	var browser = snippet.browser;

	var isIE10OrIE11 = browser.msie && (browser.version === 10 || browser.version === 11);
	var isImageDownloadAvailable = !isIE10OrIE11
	    || (isIE10OrIE11 && document.createElement('canvas').getContext('2d').drawSvg);
	var isDownloadAttributeSupported = snippet.isExisty(document.createElement('a').download);
	var isMsSaveOrOpenBlobSupported = window.Blob && window.navigator.msSaveOrOpenBlob;

	/**
	 * Return given extension type is image format
	 * @param {string} extension extension
	 * @returns {boolean}
	 * @ignore
	 */
	function isImageExtension(extension) {
	    return arrayUtil.any(imageExporter.getExtensions(), function(imageExtension) {
	        return extension === imageExtension;
	    });
	}
	/**
	 * Return given extension type is data format
	 * @param {string} extension extension
	 * @returns {boolean}
	 * @ignore
	 */
	function isDataExtension(extension) {
	    return arrayUtil.any(dataExporter.getExtensions(), function(dataExtension) {
	        return extension === dataExtension;
	    });
	}

	/**
	 * Download chart data with given export type
	 * @param {string} fileName - file name = chart title
	 * @param {string} extension - file extension
	 * @param {object} rawData - chart raw data
	 * @param {HTMLElement} svgElement - svg element
	 * @param {object} [downloadOptions] download option
	 * @ignore
	 */
	function exportChart(fileName, extension, rawData, svgElement, downloadOptions) {
	    var downloadOption = (downloadOptions && downloadOptions[extension] ? downloadOptions[extension] : {});

	    if (isImageExtension(extension)) {
	        imageExporter.downloadImage(fileName, extension, svgElement);
	    } else if (isDataExtension(extension)) {
	        dataExporter.downloadData(fileName, extension, rawData, downloadOption);
	    }
	}

	module.exports = {
	    exportChart: exportChart,
	    isDownloadSupported: isDownloadAttributeSupported || isMsSaveOrOpenBlobSupported,
	    isImageDownloadAvailable: isImageDownloadAvailable,
	    isImageExtension: isImageExtension,

	    /**
	     * Add file extension to dataExtension
	     * @param {string} type file extension type
	     * @param {string} extension file extension
	     */
	    addExtension: function(type, extension) {
	        var isValidExtension = extension && snippet.isString(extension);
	        var exporter, extensions;

	        if (type === 'data') {
	            exporter = dataExporter;
	        } else if (type === 'image') {
	            exporter = imageExporter;
	        }

	        if (exporter && isValidExtension) {
	            extensions = exporter.getExtensions();
	            extensions.push(extension);
	        }
	    }
	};


/***/ }),
/* 52 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview Chart data exporter
	 * @author NHN Ent.
	 *         FE Development Lab <dl_javascript@nhnent.com>
	 */

	'use strict';

	var downloader = __webpack_require__(53);
	var chartConst = __webpack_require__(8);
	var snippet = __webpack_require__(6);

	var DATA_URI_HEADERS = {
	    xls: 'data:application/vnd.ms-excel;base64,',
	    csv: 'data:text/csv;charset=utf-8,%EF%BB%BF' /* BOM for utf-8 */
	};
	var DATA_URI_BODY_MAKERS = {
	    xls: _makeXlsBodyWithRawData,
	    csv: _makeCsvBodyWithRawData
	};
	var dataExtensions = [].concat([], chartConst.DATA_EXTENSIONS);

	var dataExporter = {
	    /**
	     * Download chart data
	     * @param {string} fileName file name
	     * @param {string} extension file extension
	     * @param {object} rawData raw data of chart
	     * @param {object} [downloadOption] download option
	     */
	    downloadData: function(fileName, extension, rawData, downloadOption) {
	        var chartData2DArray = _get2DArrayFromRawData(rawData);
	        var content = DATA_URI_HEADERS[extension] + DATA_URI_BODY_MAKERS[extension](chartData2DArray, downloadOption);

	        downloader.execDownload(fileName, extension, content);
	    },

	    /**
	     * Returns data extensions
	     * @returns {Array.<string>}
	     */
	    getExtensions: function() {
	        return dataExtensions;
	    }
	};

	/**
	 * Get pivoted second dimension array from table to use element.innerText
	 * @param {rawData} rawData - chart's raw data
	 * @returns {Array.<Array>}
	 * @private
	 */
	function _get2DArrayFromRawData(rawData) {
	    var resultArray = [];
	    var categories;
	    var isHeatMap = (rawData.categories && snippet.isExisty(rawData.categories.x));
	    var isBullet = (rawData.series && snippet.isExisty(rawData.series.bullet));
	    var return2DArrayData = false;

	    if (rawData) {
	        if (isHeatMap) {
	            return2DArrayData = _get2DArrayFromHeatmapRawData(rawData);
	        } else if (isBullet) {
	            return2DArrayData = _get2DArrayFromBulletRawData(rawData);
	        } else if (rawData.categories) {
	            categories = rawData.categories;
	        }
	        if (return2DArrayData) {
	            return return2DArrayData;
	        }

	        resultArray.push([''].concat(categories));

	        snippet.forEach(rawData.series, function(seriesDatum) {
	            snippet.forEach(seriesDatum, function(seriesItem) {
	                var row = [seriesItem.name].concat(seriesItem.data);

	                resultArray.push(row);
	            });
	        });
	    }

	    return resultArray;
	}

	/**
	 * Make table head data for Excel
	 * @param {number} maxRangeCount - max range count
	 * @param {number} maxMarkerCount - max marker count
	 * @returns {Array.<string>} - table head data
	 * @private
	 */
	function _makeTHeadForBullet(maxRangeCount, maxMarkerCount) {
	    var tableHead = ['', chartConst.BULLET_TYPE_ACTUAL];
	    var i = 0;

	    for (; i < maxRangeCount; i += 1) {
	        tableHead.push(chartConst.BULLET_TYPE_RANGE + i);
	    }

	    i = 0;
	    for (; i < maxMarkerCount; i += 1) {
	        tableHead.push(chartConst.BULLET_TYPE_MARKER + i);
	    }

	    return tableHead;
	}

	/**
	 * Make table cells from bullet ranges
	 * @param {Array.<Array.<number>>} ranges - series item's ranges data
	 * @param {number} maxRangeCount - max range count
	 * @returns {Array.<number>} - cells containing range data
	 * @private
	 */
	function _makeTCellsFromBulletRanges(ranges, maxRangeCount) {
	    var cells = [];
	    var i = 0;
	    var dataText;

	    for (; i < maxRangeCount; i += 1) {
	        dataText = '';

	        if (ranges && ranges[i]) {
	            dataText = ((ranges[i].length > 0) ? ranges[i][0] : '') +
	             '~' + ((ranges[i].length > 1) ? ranges[i][1] : '');
	        }
	        cells.push(dataText);
	    }

	    return cells;
	}

	/**
	 * Make table cells from bullet markers
	 * @param {Array.<Array.<number>>} markers - series item's markers data
	 * @param {number} maxMarkerCount - max marker count
	 * @returns {Array.<number>} - cells containing marker data
	 * @private
	 */
	function _makeTCellsFromBulletMarkers(markers, maxMarkerCount) {
	    var cells = [];
	    var i = 0;
	    var dataText;

	    for (; i < maxMarkerCount; i += 1) {
	        dataText = markers && markers[i] ? markers[i] : '';
	        cells.push(dataText);
	    }

	    return cells;
	}

	/**
	 * Make table data for importing in excel, by using bullet chart raw data
	 * @param {object} rawData - raw data
	 * @param {object} [options] download option
	 * @returns {Array.<Array.<string>>} - table data for importing in excel
	 * @private
	 */
	function _get2DArrayFromBulletRawData(rawData) {
	    var resultArray = [];
	    var maxCounts = _calculateMaxCounts(rawData.series.bullet);
	    var maxRangeCount = maxCounts.maxRangeCount;
	    var maxMarkerCount = maxCounts.maxMarkerCount;

	    resultArray.push(_makeTHeadForBullet(maxRangeCount, maxMarkerCount));

	    snippet.forEach(rawData.series.bullet, function(seriesItem) {
	        var row = [seriesItem.name, seriesItem.data];

	        row = row.concat(_makeTCellsFromBulletRanges(seriesItem.ranges, maxRangeCount));
	        row = row.concat(_makeTCellsFromBulletMarkers(seriesItem.markers, maxMarkerCount));
	        resultArray.push(row);
	    });

	    return resultArray;
	}

	/**
	 * Calculate maxinum count of range and marker property
	 * @param {object} bulletSeries - raw series data of bullet chart
	 * @returns {object} - maximum count of range and marker property
	 * @private
	 */
	function _calculateMaxCounts(bulletSeries) {
	    var maxRangeCount = 0;
	    var maxMarkerCount = 0;

	    snippet.forEach(bulletSeries, function(series) {
	        maxRangeCount = Math.max(maxRangeCount, series.ranges.length);
	        maxMarkerCount = Math.max(maxMarkerCount, series.markers.length);
	    });

	    return {
	        maxRangeCount: maxRangeCount,
	        maxMarkerCount: maxMarkerCount
	    };
	}

	/**
	 * Make table data for importing in excel, by using heatmap chart raw data
	 * @param {object} rawData - raw data
	 * @returns {Array.<Array.<string>>} - table data for importing in excel
	 * @private
	 */
	function _get2DArrayFromHeatmapRawData(rawData) {
	    var resultArray = [];

	    resultArray.push([''].concat(rawData.categories.x));

	    snippet.forEach(rawData.series, function(seriesDatum) {
	        snippet.forEach(seriesDatum, function(seriesItem, index) {
	            var row = [rawData.categories.y[index]].concat(seriesItem);

	            resultArray.push(row);
	        });
	    });

	    return resultArray;
	}

	/**
	 * Get table element from chart data 2D array for xls content
	 * @param {Array.<Array<*>>} chartData2DArray - chart data 2D array
	 * @returns {string}
	 * @private
	 */
	function _getTableElementStringForXls(chartData2DArray) {
	    var tableElementString = '<table>';
	    snippet.forEach(chartData2DArray, function(row, rowIndex) {
	        var cellTagName = rowIndex === 0 ? 'th' : 'td';

	        tableElementString += '<tr>';

	        snippet.forEach(row, function(cell, cellIndex) {
	            var cellNumberClass = (rowIndex !== 0 || cellIndex === 0) ? ' class="number"' : '';
	            var cellString = '<' + cellTagName + cellNumberClass + '>' + cell + '</' + cellTagName + '>';

	            tableElementString += cellString;
	        });

	        tableElementString += '</tr>';
	    });

	    tableElementString += '</table>';

	    return tableElementString;
	}

	/**
	 * Make xls file with chart series data
	 * @param {Array.<Array.<object>>} chartData2DArray - chart chartData2DArray
	 * @returns {string} base64 xls file content
	 * @private
	 */
	function _makeXlsBodyWithRawData(chartData2DArray) {
	    var xlsString = '<html xmlns:o="urn:schemas-microsoft-com:office:office" ' +
	        'xmlns:x="urn:schemas-microsoft-com:office:excel" ' +
	        'xmlns="http://www.w3.org/TR/REC-html40">' +
	        '<head>' +
	            '<!--[if gte mso 9]>' +
	                '<xml>' +
	                    '<x:ExcelWorkbook>' +
	                        '<x:ExcelWorksheets>' +
	                            '<x:ExcelWorksheet>' +
	                                '<x:Name>Ark1</x:Name>' +
	                                '<x:WorksheetOptions>' +
	                                    '<x:DisplayGridlines/>' +
	                                '</x:WorksheetOptions>' +
	                            '</x:ExcelWorksheet>' +
	                        '</x:ExcelWorksheets>' +
	                        '</x:ExcelWorkbook>' +
	                '</xml>' +
	            '<![endif]-->' +
	            '<meta name=ProgId content=Excel.Sheet>' +
	            '<meta charset=UTF-8>' +
	        '</head>' +
	        '<body>' +
	            _getTableElementStringForXls(chartData2DArray) +
	        '</body>' +
	        '</html>';

	    return window.btoa(unescape(encodeURIComponent(xlsString)));
	}

	/**
	 * Make csv text with chart series data
	 * @param {Array.<Array.<object>>} chartData2DArray - chart chartData2DArray
	 * @param {object} [option] - download option
	 * @param {object} [option.itemDelimiter = ','] - item delimiter
	 * @param {object} [option.lineDelimiter = '\n'] - line delimiter
	 * @returns {string} URI encoded csv text
	 * @private
	 */
	function _makeCsvBodyWithRawData(chartData2DArray, option) {
	    var csvText = '';
	    var lineDelimiter = (option && option.lineDelimiter) || '\u000a';
	    var itemDelimiter = (option && option.itemDelimiter) || ',';
	    var lastRowIndex = chartData2DArray.length - 1;

	    snippet.forEachArray(chartData2DArray, function(row, rowIndex) {
	        var lastCellIndex = row.length - 1;

	        snippet.forEachArray(row, function(cell, cellIndex) {
	            var cellContent = (snippet.isNumber(cell) ? cell : '"' + cell + '"');

	            csvText += cellContent;

	            if (cellIndex < lastCellIndex) {
	                csvText += itemDelimiter;
	            }
	        });

	        if (rowIndex < lastRowIndex) {
	            csvText += lineDelimiter;
	        }
	    });

	    return encodeURIComponent(csvText);
	}

	// export private methods for Test
	dataExporter._makeCsvBodyWithRawData = _makeCsvBodyWithRawData;
	dataExporter._makeXlsBodyWithRawData = _makeXlsBodyWithRawData;
	dataExporter._get2DArrayFromRawData = _get2DArrayFromRawData;
	dataExporter._get2DArrayFromBulletRawData = _get2DArrayFromBulletRawData;
	dataExporter._get2DArrayFromHeatmapRawData = _get2DArrayFromHeatmapRawData;
	dataExporter._makeTCellsFromBulletRanges = _makeTCellsFromBulletRanges;
	dataExporter._makeTCellsFromBulletMarkers = _makeTCellsFromBulletMarkers;
	dataExporter._makeTHeadForBullet = _makeTHeadForBullet;

	module.exports = dataExporter;


/***/ }),
/* 53 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview File downloader for client-side download
	 * @author NHN Ent.
	 *         FE Development Lab <dl_javascript@nhnent.com>
	 */

	'use strict';

	var snippet = __webpack_require__(6);
	var arrayUtil = __webpack_require__(10);
	var chartConst = __webpack_require__(8);

	var DOWNLOAD_HANDLERS = {
	    downloadAttribute: downloadWithAnchorElementDownloadAttribute,
	    msSaveOrOpenBlob: downloadWithMsSaveOrOpenBlob
	};

	/**
	 * Return download method name of current browser supports
	 * @returns {string}
	 * @ignore
	 */
	function getDownloadMethod() {
	    var isDownloadAttributeSupported = snippet.isExisty(document.createElement('a').download);
	    var isMsSaveOrOpenBlobSupported = window.Blob && window.navigator.msSaveOrOpenBlob;
	    var method;

	    if (isMsSaveOrOpenBlobSupported) {
	        method = 'msSaveOrOpenBlob';
	    } else if (isDownloadAttributeSupported) {
	        method = 'downloadAttribute';
	    }

	    return method;
	}

	/**
	 * Base64 string to blob
	 * original source ref: https://github.com/miguelmota/base64toblob/blob/master/base64toblob.js
	 * Licence: MIT Licence
	 * @param {string} base64String - base64 string
	 * @returns {Blob}
	 * @ignore
	 */
	function base64toBlob(base64String) {
	    var contentType = base64String.substr(0, base64String.indexOf(';base64,')).substr(base64String.indexOf(':') + 1);
	    var sliceSize = 1024;
	    var byteCharacters = atob(base64String.substr(base64String.indexOf(',') + 1));
	    var byteArrays = [];
	    var offset, slice, byteNumbers, i, byteArray, resultBlob;

	    for (offset = 0; offset < byteCharacters.length; offset += sliceSize) {
	        slice = byteCharacters.slice(offset, offset + sliceSize);

	        byteNumbers = new Array(slice.length);

	        for (i = 0; i < slice.length; i += 1) {
	            byteNumbers[i] = slice.charCodeAt(i);
	        }

	        byteArray = new window.Uint8Array(byteNumbers);

	        byteArrays.push(byteArray);
	    }

	    resultBlob = new Blob(byteArrays, {type: contentType});

	    return resultBlob;
	}

	/**
	 * Return given extension type is image format
	 * @param {string} extension extension
	 * @returns {boolean}
	 * @ignore
	 */
	function isImageExtension(extension) {
	    return arrayUtil.any(chartConst.IMAGE_EXTENSIONS, function(imageExtension) {
	        return extension === imageExtension;
	    });
	}

	/**
	 * Download content to file with msSaveOrOpenBlob
	 * @param {string} fileName - file name
	 * @param {string} extension - file extension
	 * @param {string} content - file content
	 * @ignore
	 */
	function downloadWithMsSaveOrOpenBlob(fileName, extension, content) {
	    var blobObject = isImageExtension(extension) ? base64toBlob(content) : new Blob([content]);

	    window.navigator.msSaveOrOpenBlob(blobObject, fileName + '.' + extension);
	}

	/**
	 * Download content to file with anchor element's download attribute
	 * @param {string} fileName - file name
	 * @param {string} extension - file extension
	 * @param {string} content - file content
	 * @ignore
	 */
	function downloadWithAnchorElementDownloadAttribute(fileName, extension, content) {
	    var anchorElement;

	    if (content) {
	        anchorElement = document.createElement('a');

	        anchorElement.href = content;
	        anchorElement.target = '_blank';
	        anchorElement.download = fileName + '.' + extension;

	        document.body.appendChild(anchorElement);

	        anchorElement.click();
	        anchorElement.remove();
	    }
	}

	/**
	 * Download content to file with given filename and extension
	 * @param {string} fileName - file name
	 * @param {string} extension - file extension
	 * @param {string} content - file content
	 * @ignore
	 */
	function execDownload(fileName, extension, content) {
	    var downloadMethod = getDownloadMethod();

	    if (downloadMethod && snippet.isString(content)) {
	        DOWNLOAD_HANDLERS[downloadMethod](fileName, extension, content);
	    }
	}

	module.exports = {
	    execDownload: execDownload
	};


/***/ }),
/* 54 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview Chart image exporter
	 * @author NHN Ent.
	 *         FE Development Lab <dl_javascript@nhnent.com>
	 */

	'use strict';

	var downloader = __webpack_require__(53);
	var chartConst = __webpack_require__(8);
	var snippet = __webpack_require__(6);

	var browser = snippet.browser;
	var isIE10OrIE11 = browser.msie && (browser.version === 10 || browser.version === 11);
	var DOMURL = window.URL || window.webkitURL || window;
	var imageExtensions = [].concat([], chartConst.IMAGE_EXTENSIONS);

	/**
	 * Return svg outerHTML string
	 * @param {HTMLElement} svgElement svg element
	 * @returns {string}
	 * @ignore
	 */
	function getSvgString(svgElement) {
	    var svgParent = svgElement.parentNode;
	    var tempWrapper = document.createElement('DIV');
	    var svgString;

	    tempWrapper.appendChild(svgElement);
	    svgString = tempWrapper.innerHTML;
	    svgParent.appendChild(svgElement);

	    tempWrapper = null;
	    svgParent = null;

	    return svgString;
	}

	/**
	 * Download with SVG string and canvg
	 * @param {HTMLElement} canvas canvas element
	 * @param {string} svgString svg HTML string
	 * @param {string} fileName file name
	 * @param {string} extension file extension
	 * @ignore
	 */
	function downloadSvgWithCanvg(canvas, svgString, fileName, extension) {
	    var ctx = canvas.getContext('2d');

	    // remove name space for IE
	    if (isIE10OrIE11) {
	        svgString = svgString.replace(/xmlns:NS1=""/, '');
	        svgString = svgString.replace(/NS1:xmlns:xlink="http:\/\/www\.w3\.org\/1999\/xlink"/, '');
	        svgString = svgString.replace(/xmlns="http:\/\/www\.w3\.org\/2000\/svg"/, '');
	        svgString = svgString.replace(/xmlns:xlink="http:\/\/www\.w3\.org\/1999\/xlink"/, '');
	    }

	    ctx.drawSvg(svgString, 0, 0);

	    downloader.execDownload(fileName, extension, canvas.toDataURL('image/' + extension, 1));
	}

	/**
	 * Download with SVG string and blob URL
	 * @param {HTMLElement} canvas canvas element
	 * @param {string} svgString svg HTML string
	 * @param {string} fileName file name
	 * @param {string} extension file extension
	 * @ignore
	 */
	function downloadSvgWithBlobURL(canvas, svgString, fileName, extension) {
	    var ctx = canvas.getContext('2d');
	    var blob = new Blob([svgString], {type: 'image/svg+xml'});
	    var url = DOMURL.createObjectURL(blob);
	    var img = new Image();

	    img.onload = function() {
	        ctx.drawImage(img, 0, 0, canvas.width, canvas.height);

	        downloader.execDownload(fileName, extension, canvas.toDataURL('image/' + extension, 1));

	        DOMURL.revokeObjectURL(url);
	    };

	    img.src = url;
	}

	module.exports = {
	    /**
	     * Download image with png format
	     * @param {string} fileName - file name to save
	     * @param {string} extension - extension type
	     * @param {HTMLElement} imageSourceElement - image source element
	     */
	    downloadImage: function(fileName, extension, imageSourceElement) {
	        var svgString, parentNode, canvas;

	        if (imageSourceElement.tagName === 'svg') {
	            parentNode = imageSourceElement.parentNode;

	            canvas = document.createElement('canvas');

	            canvas.width = parentNode.offsetWidth;
	            canvas.height = parentNode.offsetHeight;

	            svgString = getSvgString(imageSourceElement);

	            if (isIE10OrIE11) {
	                downloadSvgWithCanvg(canvas, svgString, fileName, extension);
	            } else {
	                downloadSvgWithBlobURL(canvas, svgString, fileName, extension);
	            }
	        } else if (imageSourceElement.tagName === 'canvas') {
	            canvas = imageSourceElement;

	            downloader.execDownload(fileName, extension, canvas.toDataURL('image/' + extension, 1));
	        }
	    },

	    /**
	     * Returns data extensions
	     * @returns {Array.<string>}
	     */
	    getExtensions: function() {
	        return imageExtensions;
	    }
	};


/***/ }),
/* 55 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileoverview Event listener.
	 * @author NHN Ent.
	 *         FE Development Lab <dl_javascript@nhnent.com>
	 */

	'use strict';

	var snippet = __webpack_require__(6);

	var bindHandlerMap = {};

	/**
	 * Event listener.
	 * @module eventListener
	 * @private */
	var eventListener = {
	    /**
	     * Add event listener for IE.
	     * @memberOf module:eventListener
	     * @param {HTMLElement} target target element
	     * @param {string} type event type
	     * @param {function} handler callback function
	     * @param {?object} context context for callback
	     * @private
	     */
	    _attachEvent: function(target, type, handler, context) {
	        var bindHandler;

	        if (context) {
	            bindHandler = snippet.bind(handler, context);
	        } else {
	            bindHandler = handler;
	        }

	        bindHandlerMap[type + handler] = bindHandler;
	        target.attachEvent('on' + type, bindHandler);
	    },

	    /**
	     * Add event listener for other browsers.
	     * @memberOf module:eventListener
	     * @param {HTMLElement} target - target element
	     * @param {string} type - event type
	     * @param {function} handler - handler
	     * @param {object} [context] - context for handler
	     * @private
	     */
	    _addEventListener: function(target, type, handler, context) {
	        var bindHandler;

	        if (context) {
	            bindHandler = snippet.bind(handler, context);
	        } else {
	            bindHandler = handler;
	        }

	        bindHandlerMap[type + handler] = bindHandler;
	        target.addEventListener(type, bindHandler);
	    },

	    /**
	     * Bind DOM event.
	     * @memberOf module:eventListener
	     * @memberOf module:eventListener
	     * @param {HTMLElement} target target element
	     * @param {string} type event type
	     * @param {function} handler handler function
	     * @param {object} [context] - context for handler
	     * @private
	     */
	    _bindEvent: function(target, type, handler, context) {
	        var bindEvent;

	        if ('addEventListener' in target) {
	            bindEvent = this._addEventListener;
	        } else if ('attachEvent' in target) {
	            bindEvent = this._attachEvent;
	        }
	        eventListener._bindEvent = bindEvent;

	        bindEvent(target, type, handler, context);
	    },

	    /**
	     * Bind DOM events.
	     * @memberOf module:eventListener
	     * @param {HTMLElement} target - target element
	     * @param {string | object} types - type or map of type and handler
	     * @param {function | object} [handler] - handler or context
	     * @param {object} [context] - context
	     */
	    on: function(target, types, handler, context) {
	        var handlerMap = {};
	        if (snippet.isString(types)) {
	            handlerMap[types] = handler;
	        } else {
	            handlerMap = types;
	            context = handler;
	        }

	        snippet.forEach(handlerMap, function(_handler, type) {
	            eventListener._bindEvent(target, type, _handler, context);
	        });
	    },

	    /**
	     * Remove event listener for IE.
	     * @memberOf module:eventListener
	     * @param {HTMLElement} target - target element
	     * @param {string} type - event type
	     * @param {function} handler - handler
	     * @private
	     */
	    _detachEvent: function(target, type, handler) {
	        if (bindHandlerMap[type + handler]) {
	            target.detachEvent('on' + type, bindHandlerMap[type + handler]);
	            delete bindHandlerMap[type + handler];
	        }
	    },

	    /**
	     * Add event listener for other browsers.
	     * @memberOf module:eventListener
	     * @param {HTMLElement} target - target element
	     * @param {string} type - event type
	     * @param {function} handler - handler
	     * @private
	     */
	    _removeEventListener: function(target, type, handler) {
	        target.removeEventListener(type, bindHandlerMap[type + handler]);
	        delete bindHandlerMap[type + handler];
	    },

	    /**
	     * Unbind DOM event.
	     * @memberOf module:eventListener
	     * @param {HTMLElement} target - target element
	     * @param {string} type - event type
	     * @param {function} handler - handler
	     * @private
	     */
	    _unbindEvent: function(target, type, handler) {
	        var unbindEvent;
	        if ('removeEventListener' in target) {
	            unbindEvent = eventListener._removeEventListener;
	        } else if ('detachEvent' in target) {
	            unbindEvent = eventListener._detachEvent;
	        }
	        eventListener._unbindEvent = unbindEvent;

	        unbindEvent(target, type, handler);
	    },

	    /**
	     * Unbind DOM events.
	     * @memberOf module:eventListener
	     * @param {HTMLElement} target - target element
	     * @param {string | object} types - type or map of type and handler
	     * @param {function} [handler] - handler
	     */
	    off: function(target, types, handler) {
	        var handlerMap = {};
	        if (snippet.isString(types)) {
	            handlerMap[types] = handler;
	        } else {
	            handlerMap = types;
	        }

	        snippet.forEach(handlerMap, function(_handler, type) {
	            eventListener._unbindEvent(target, type, _handler);
	        });
	    }
	};

	module.exports = eventListener;


/***/ }),
/* 56 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileoverview  Legend component.
	 * @author NHN Ent.
	 *         FE Development Lab <dl_javascript@nhnent.com>
	 */

	'use strict';

	var chartConst = __webpack_require__(8);
	var LegendModel = __webpack_require__(57);
	var pluginFactory = __webpack_require__(32);
	var predicate = __webpack_require__(21);
	var raphaelRenderUtil = __webpack_require__(5);
	var snippet = __webpack_require__(6);

	var ICON_HEIGHT = chartConst.LEGEND_ICON_HEIGHT;

	var Legend = snippet.defineClass(/** @lends Legend.prototype */ {
	    /**
	     * Legend component.
	     * @constructs Legend
	     * @private
	     * @param {object} params parameters
	     *      @param {object} params.theme - axis theme
	     *      @param {?Array.<string>} params.seriesTypes - series types
	     *      @param {string} params.chart - chart type
	     *      @param {object} params.dataProcessor - data processor
	     *      @param {object} params.eventBus - chart event bus
	     */
	    init: function(params) {
	        /**
	         * legend theme
	         * @type {object}
	         */
	        this.theme = params.theme;

	        /**
	         * options
	         * @type {Object}
	         */
	        this.options = params.options || {};

	        /**
	         * chart type
	         * @type {string}
	         */
	        this.chartType = params.chartType;

	        /**
	         * series types
	         * @type {?Array.<string>}
	         */
	        this.seriesTypes = params.seriesTypes || [this.chartType];

	        /**
	         * event bus for transmitting message
	         * @type {object}
	         */
	        this.eventBus = params.eventBus;

	        /**
	         * Legend view className
	         */
	        this.className = 'tui-chart-legend-area';

	        /**
	         * DataProcessor instance
	         * @type {DataProcessor}
	         */
	        this.dataProcessor = params.dataProcessor;

	        /**
	         * legend model
	         */
	        this.legendModel = new LegendModel({
	            theme: this.theme,
	            labels: params.dataProcessor.getLegendLabels(),
	            legendData: params.dataProcessor.getLegendData(),
	            seriesTypes: this.seriesTypes,
	            chartType: this.chartType
	        });

	        /**
	         * layout bounds information for this components
	         * @type {null|{dimension:{width:number, height:number}, position:{left:number, top:number}}}
	         */
	        this.layout = null;

	        /**
	         * Graph renderer
	         * @type {object}
	         */
	        this.graphRenderer = pluginFactory.get(chartConst.COMPONENT_TYPE_RAPHAEL, 'legend');

	        /**
	         * Paper for rendering legend
	         * @type {object}
	         */
	        this.paper = null;

	        this.drawingType = chartConst.COMPONENT_TYPE_RAPHAEL;
	    },

	    /**
	     * Set data for rendering.
	     * @param {{
	     *      layout: {
	     *          dimension: {width: number, height: number},
	     *          position: {left: number, top: number}
	     *      }
	     * }} data - bounds data
	     * @private
	     */
	    _setDataForRendering: function(data) {
	        if (data) {
	            this.layout = data.layout;
	            this.paper = data.paper;
	        }
	    },

	    /**
	     * Render legend component.
	     * @param {object} data - bounds data
	     */
	    _render: function(data) {
	        this._setDataForRendering(data);
	        this.legendSet = this._renderLegendArea(data.paper);
	    },

	    /**
	     * Render legend component and listen legend event.
	     * @param {object} data - bounds data
	     */
	    render: function(data) {
	        this._render(data);

	        this._listenEvents();
	    },

	    /**
	     * Rerender.
	     * @param {object} data - bounds data
	     */
	    rerender: function(data) {
	        this.legendSet.remove();

	        this._render(data);
	    },

	    /**
	     * Rerender, when resizing chart.
	     * @param {object} data - bounds data
	     */
	    resize: function(data) {
	        this.rerender(data);
	    },

	    /**
	     * Get legend rendering data
	     * @param {object} legendData legned data
	     * @param {number} labelHeight lebel height
	     * @param {Array.<number>} labelWidths label widths
	     * @returns {Array.<object>}
	     * @private
	     */
	    _getLegendRenderingData: function(legendData, labelHeight, labelWidths) {
	        var maxWidth = this.options.maxWidth;
	        var colorByPoint = (predicate.isBarTypeChart(this.chartType) || predicate.isBoxplotChart(this.chartType))
	            && this.dataProcessor.options.series.colorByPoint;

	        return snippet.map(legendData, function(legendDatum, index) {
	            var checkbox = this.options.showCheckbox === false ? null : {
	                checked: this.legendModel.isCheckedIndex(index)
	            };
	            var legendLabel = legendDatum.label;

	            if (maxWidth) {
	                legendLabel = raphaelRenderUtil.getEllipsisText(legendLabel, maxWidth, this.theme.label);
	            }

	            return {
	                checkbox: checkbox,
	                iconType: legendDatum.chartType || 'rect',
	                colorByPoint: colorByPoint,
	                index: index,
	                theme: legendDatum.theme,
	                label: legendLabel,
	                labelHeight: labelHeight,
	                labelWidth: labelWidths[index],
	                isUnselected: this.legendModel.isUnselectedIndex(index)
	            };
	        }, this);
	    },

	    /**
	     * Render legend area.
	     * @param {object} paper paper object
	     * @returns {Array.<object>}
	     * @private
	     */
	    _renderLegendArea: function(paper) {
	        var legendData = this.legendModel.getData();
	        var graphRenderer = this.graphRenderer;
	        var isHorizontal = predicate.isHorizontalLegend(this.options.align);
	        var basePosition = this.layout.position;
	        var labelWidths = graphRenderer.makeLabelWidths(legendData, this.theme.label, this.options.maxWidth);
	        var labelTheme = legendData[0] ? legendData[0].theme : {};
	        var labelHeight = graphRenderer.getRenderedLabelHeight('DEFAULT_TEXT', labelTheme) - 1;
	        var labelCount = labelWidths.length;
	        var legendItemHeight = Math.max(ICON_HEIGHT, labelHeight);
	        var dimensionHeight = (chartConst.LINE_MARGIN_TOP + legendItemHeight) * (isHorizontal ? 1 : labelCount);
	        var left = basePosition.left;

	        if (!predicate.isLegendAlignLeft(this.options.align)) {
	            left += chartConst.LEGEND_AREA_H_PADDING;
	        }

	        return graphRenderer.render({
	            paper: paper,
	            legendData: this._getLegendRenderingData(legendData, labelHeight, labelWidths),
	            isHorizontal: isHorizontal,
	            position: {
	                left: left,
	                top: basePosition.top
	            },
	            dimension: {
	                height: dimensionHeight,
	                width: this.layout.dimension.width
	            },
	            labelTheme: this.theme.label,
	            labelWidths: labelWidths,
	            eventBus: this.eventBus
	        });
	    },

	    /**
	     * Fire onChangeCheckedLegends event.
	     * @private
	     */
	    _fireChangeCheckedLegendsEvent: function() {
	        this.eventBus.fire('changeCheckedLegends', this.legendModel.getCheckedIndexes());
	    },

	    /**
	     * Fire selectLegend event.
	     * @param {{chartType: string, index: number}} data data
	     * @private
	     */
	    _fireSelectLegendEvent: function(data) {
	        var index = this.legendModel.getSelectedIndex();
	        var legendIndex = !snippet.isNull(index) ? data.seriesIndex : index;

	        this.eventBus.fire('selectLegend', data.chartType, legendIndex);
	    },

	    /**
	     * Fire selectLegend public event.
	     * @param {{label: string, chartType: string, index: number}} data data
	     * @private
	     */
	    _fireSelectLegendPublicEvent: function(data) {
	        this.eventBus.fire(chartConst.PUBLIC_EVENT_PREFIX + 'selectLegend', {
	            legend: data.label,
	            chartType: data.chartType,
	            index: data.index
	        });
	    },

	    /**
	     * Select legend.
	     * @param {number} index index
	     * @private
	     */
	    _selectLegend: function(index) {
	        var data = this.legendModel.getDatum(index);

	        this.legendModel.toggleSelectedIndex(index);

	        if (!snippet.isNull(this.legendModel.getSelectedIndex()) && !this.legendModel.isCheckedSelectedIndex()) {
	            this.legendModel.checkSelectedIndex();
	            this._fireChangeCheckedLegendsEvent();
	        }

	        this.dataProcessor.selectLegendIndex = this.legendModel.getSelectedIndex();
	        this.graphRenderer.selectLegend(this.dataProcessor.selectLegendIndex, this.legendSet);

	        this._fireSelectLegendEvent(data);
	        this._fireSelectLegendPublicEvent(data);
	    },

	    /**
	     * Get checked indexes.
	     * @returns {Array} checked indexes
	     * @private
	     */
	    _getCheckedIndexes: function() {
	        var checkedIndexes = [];

	        snippet.forEachArray(this.legendModel.checkedWholeIndexes, function(checkbox, index) {
	            if (checkbox) {
	                checkedIndexes.push(index);
	            }
	        });

	        return checkedIndexes;
	    },

	    /**
	     * Check legend.
	     * @private
	     */
	    _checkLegend: function() {
	        var selectedData = this.legendModel.getSelectedDatum();

	        if (!this.legendModel.isCheckedSelectedIndex()) {
	            this.legendModel.updateSelectedIndex(null);
	        }

	        this._fireChangeCheckedLegendsEvent();

	        if (selectedData) {
	            this._fireSelectLegendEvent(selectedData);
	        }
	    },

	    /**
	     * On click event handler.
	     * @param {number} index checkbox index
	     * @private
	     */
	    _checkboxClick: function(index) {
	        var checkedIndexes;

	        this.legendModel.toggleCheckedIndex(index);

	        checkedIndexes = this._getCheckedIndexes();

	        if (checkedIndexes.length > 0) {
	            this.legendModel.updateCheckedLegendsWith(checkedIndexes);
	            this._checkLegend();
	        } else {
	            this.legendModel.toggleCheckedIndex(index);
	        }
	    },

	    /**
	     * On click event handler.
	     * @param {number} index selected index
	     * @private
	     */
	    _labelClick: function(index) {
	        this._selectLegend(index);
	    },

	    /**
	     * Listen legend events
	     * @private
	     */
	    _listenEvents: function() {
	        this.eventBus.on('checkboxClicked', this._checkboxClick, this);
	        this.eventBus.on('labelClicked', this._labelClick, this);
	    }
	});

	snippet.CustomEvents.mixin(Legend);

	/**
	 * Factory for Legend
	 * @param {object} params parameter
	 * @returns {object|null}
	 * @ignore
	 */
	function legendFactory(params) {
	    var isLegendVisible = snippet.isUndefined(params.options.visible) ? true : params.options.visible;
	    var seriesTypes = params.dataProcessor.seriesTypes;
	    var chartType = params.chartOptions.chartType;
	    var legend = null;

	    if (isLegendVisible) {
	        params.seriesTypes = seriesTypes;
	        params.chartType = chartType;

	        // @todo should extends additionalParams added when addComponents(), should grasp the omitted
	        legend = new Legend(params);
	    }

	    return legend;
	}

	legendFactory.componentType = 'legend';
	legendFactory.Legend = Legend;

	module.exports = legendFactory;


/***/ }),
/* 57 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileoverview LegendModel is a model for legend area(checkbox, icon, label text)
	 * @author NHN Ent.
	 *         FE Development Lab <dl_javascript@nhnent.com>
	 */

	'use strict';

	var snippet = __webpack_require__(6);

	var concat = Array.prototype.concat;
	var forEachArray = snippet.forEachArray;

	var LegendModel = snippet.defineClass(/** @lends LegendModel.prototype */ {
	    /**
	     * LegendModel is legend model.
	     * @constructs LegendModel
	     * @private
	     * @param {object} params parameters
	     *      @param {number} params.labels legend labels
	     *      @param {object} params.bound axis bound
	     *      @param {object} params.theme axis theme
	     */
	    init: function(params) {
	        /**
	         * legend theme
	         * @type {Object}
	         */
	        this.theme = params.theme;

	        /**
	         * legend labels
	         * @type {Array.<string> | {column: ?Array.<string>, line: ?Array.<string>}}
	         */
	        this.labels = params.labels;

	        /**
	         * label infos
	         * @type {Array.<{chartType: string, label: string, index: number}>}
	         */
	        this.legendData = params.legendData;

	        /**
	         * chart types
	         * @type {?Array.<string>}
	         */
	        this.seriesTypes = params.seriesTypes || [];

	        /**
	         * chart type
	         * @type {string}
	         */
	        this.chartType = params.chartType;

	        /**
	         * Legend data
	         * @type {?Array}
	         */
	        this.data = null;

	        /**
	         * Selected legend index.
	         * @type {?number}
	         */
	        this.selectedIndex = null;

	        /**
	         * sending data to series
	         * @type {object}
	         */
	        this.checkedIndexesMap = {};

	        /**
	         * checked indexes
	         * @type {Array}
	         */
	        this.checkedWholeIndexes = [];

	        this._setData();
	        this._initCheckedIndexes();
	    },

	    /**
	     * Initialize checked data.
	     * @private
	     */
	    _initCheckedIndexes: function() {
	        var self = this;
	        var checkedIndexes = [];
	        forEachArray(this.legendData, function(legendDatum, index) {
	            if (legendDatum.visible) {
	                checkedIndexes.push(index);
	            }
	            self.checkedWholeIndexes[index] = legendDatum.visible;
	        });

	        this.updateCheckedLegendsWith(checkedIndexes);
	    },

	    /**
	     * Set theme to legend data.
	     * @param {Array.<object>} legendData - legend data
	     * @param {{
	     *     colors: Array.<string>,
	     *     borderColor: ?string
	     *     }} colorTheme - legend theme
	     * @param {Array.<boolean>} [checkedIndexes] - checked indexes
	     * @private
	     */
	    _setThemeToLegendData: function(legendData, colorTheme, checkedIndexes) {
	        var seriesIndex = 0;

	        forEachArray(legendData, function(datum, index) {
	            var itemTheme = {
	                color: colorTheme.colors[index]
	            };

	            if (colorTheme.borderColor) {
	                itemTheme.borderColor = colorTheme.borderColor;
	            }

	            datum.theme = itemTheme;
	            datum.index = index;

	            if (!checkedIndexes || !snippet.isUndefined(checkedIndexes[index])) {
	                datum.seriesIndex = seriesIndex;
	                seriesIndex += 1;
	            } else {
	                datum.seriesIndex = -1;
	            }
	        });
	    },

	    /**
	     * Set legend data.
	     * @private
	     */
	    _setData: function() {
	        var self = this;
	        var theme = this.theme;
	        var chartType = this.chartType;
	        var seriesTypes = this.seriesTypes;
	        var legendData = this.legendData;
	        var checkedIndexesMap = this.checkedIndexesMap;
	        var data, startIndex;

	        if (!seriesTypes || seriesTypes.length < 2) {
	            this._setThemeToLegendData(legendData, theme[chartType], checkedIndexesMap[chartType]);
	            data = legendData;
	        } else {
	            startIndex = 0;
	            data = concat.apply([], snippet.map(seriesTypes, function(seriesType) {
	                var labelLen = self.labels[seriesType].length;
	                var endIndex = startIndex + labelLen;
	                var slicedLegendData, checkedIndexes;

	                slicedLegendData = legendData.slice(startIndex, endIndex);
	                checkedIndexes = checkedIndexesMap[seriesType];
	                startIndex = endIndex;
	                self._setThemeToLegendData(slicedLegendData, theme[seriesType], checkedIndexes);

	                return slicedLegendData;
	            }));
	        }

	        this.data = data;
	    },

	    /**
	     * Get legend data.
	     * @returns {Array.<{chartType: string, label: string, theme: object}>} legend data
	     */
	    getData: function() {
	        return this.data;
	    },

	    /**
	     * Get legend datum by index.
	     * @param {number} index legend index
	     * @returns {{chartType: string, label: string, theme: object}} legend datum
	     */
	    getDatum: function(index) {
	        return this.data[index];
	    },

	    /**
	     * Get legend datum by label
	     * @param {string} label - legend label
	     * @returns {{chartType: string, label: string, theme: object}} legend datum
	     */
	    getDatumByLabel: function(label) {
	        var foundDatum = null;
	        forEachArray(this.data, function(datum) {
	            if (datum.label === label) {
	                foundDatum = datum;
	            }

	            return !foundDatum;
	        });

	        return foundDatum;
	    },

	    /**
	     * Get selected datum.
	     * @returns {{chartType: string, label: string, theme: Object}} legend datum
	     */
	    getSelectedDatum: function() {
	        return this.getDatum(this.selectedIndex);
	    },

	    /**
	     * Update selected index.
	     * @param {?number} value value
	     */
	    updateSelectedIndex: function(value) {
	        this.selectedIndex = value;
	    },

	    /**
	     * Toggle selected index.
	     * @param {number} index legend index
	     */
	    toggleSelectedIndex: function(index) {
	        var selectedIndex;

	        if (this.selectedIndex === index) {
	            selectedIndex = null;
	        } else {
	            selectedIndex = index;
	        }

	        this.updateSelectedIndex(selectedIndex);
	    },

	    /**
	     * Get selected index.
	     * @returns {number} selected index
	     */
	    getSelectedIndex: function() {
	        return this.selectedIndex;
	    },

	    /**
	     * Whether unselected index or not.
	     * @param {number} index legend index
	     * @returns {boolean} true if selected
	     */
	    isUnselectedIndex: function(index) {
	        return !snippet.isNull(this.selectedIndex) && (this.selectedIndex !== index);
	    },

	    /**
	     * Whether checked selected index or not.
	     * @returns {boolean} true if checked
	     */
	    isCheckedSelectedIndex: function() {
	        return this.isCheckedIndex(this.selectedIndex);
	    },

	    /**
	     * Toggle checked index.
	     * @param {number} index legend index
	     */
	    toggleCheckedIndex: function(index) {
	        this.checkedWholeIndexes[index] = !this.checkedWholeIndexes[index];
	    },

	    /**
	     * Update checked index.
	     * @param {number} index legend index
	     * @private
	     */
	    _updateCheckedIndex: function(index) {
	        this.checkedWholeIndexes[index] = true;
	    },

	    /**
	     * Whether checked index.
	     * @param {number} index legend index
	     * @returns {boolean} true if checked
	     */
	    isCheckedIndex: function(index) {
	        return !!this.checkedWholeIndexes[index];
	    },

	    /**
	     * Add sending datum.
	     * @param {number} index legend index
	     */
	    _addSendingDatum: function(index) {
	        var legendDatum = this.getDatum(index);
	        if (!this.checkedIndexesMap[legendDatum.chartType]) {
	            this.checkedIndexesMap[legendDatum.chartType] = [];
	        }
	        this.checkedIndexesMap[legendDatum.chartType][legendDatum.index] = true;
	    },

	    /**
	     * Check selected index;
	     */
	    checkSelectedIndex: function() {
	        this._updateCheckedIndex(this.selectedIndex);
	        this._addSendingDatum(this.selectedIndex);
	        this._setData();
	    },

	    /**
	     * Get checked indexes.
	     * @returns {object} object data that whether series has checked or not
	     */
	    getCheckedIndexes: function() {
	        return this.checkedIndexesMap;
	    },

	    /**
	     * Reset checked data.
	     * @private
	     */
	    _resetCheckedData: function() {
	        this.checkedWholeIndexes = [];
	        this.checkedIndexesMap = {};
	    },

	    /**
	     * Update checked legend's indexes
	     * @param {Array.<number>} indexes indexes
	     */
	    updateCheckedLegendsWith: function(indexes) {
	        var self = this;

	        this._resetCheckedData();
	        forEachArray(indexes, function(index) {
	            self._updateCheckedIndex(index);
	            self._addSendingDatum(index);
	        });
	        this._setData();
	    }
	});

	module.exports = LegendModel;


/***/ }),
/* 58 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileoverview  Spectrum Legend component.
	 * @author NHN Ent.
	 *         FE Development Lab <dl_javascript@nhnent.com>
	 */

	'use strict';

	var chartConst = __webpack_require__(8);
	var predicate = __webpack_require__(21);
	var pluginFactory = __webpack_require__(32);
	var snippet = __webpack_require__(6);

	var SpectrumLegend = snippet.defineClass(/** @lends SpectrumLegend.prototype */ {
	    /**
	     * Spectrum Legend component.
	     * @constructs SpectrumLegend
	     * @private
	     * @param {object} params parameters
	     *      @param {object} params.theme axis theme
	     *      @param {?Array.<string>} params.options legend options
	     *      @param {MapChartDataProcessor} params.dataProcessor data processor
	     */
	    init: function(params) {
	        var libType = params.libType;

	        /**
	         * chart type
	         * @type {string}
	         */
	        this.chartType = params.chartType;

	        /**
	         * legend theme
	         * @type {Object}
	         */
	        this.theme = params.theme;

	        if (!predicate.isTreemapChart(this.chartType)) {
	            this.theme.label.color = '#fff';
	        }

	        /**
	         * options
	         * @type {object}
	         */
	        this.options = params.options || {};

	        /**
	         * data processor
	         * @type {DataProcessor}
	         */
	        this.dataProcessor = params.dataProcessor;

	        /**
	         * color spectrum
	         * @type {ColorSpectrum}
	         */
	        this.colorSpectrum = params.colorSpectrum;

	        /**
	         * event bus for transmitting message
	         * @type {object}
	         */
	        this.eventBus = params.eventBus;

	        /**
	         * Graph renderer
	         * @type {object}
	         */
	        this.graphRenderer = pluginFactory.get(libType, 'mapLegend');

	        /**
	         * Whether horizontal legend or not.
	         * @type {boolean}
	         */
	        this.isHorizontal = predicate.isHorizontalLegend(this.options.align);

	        /**
	         * scale data for legend
	         * @type {null|object}
	         */
	        this.scaleData = null;

	        this.drawingType = chartConst.COMPONENT_TYPE_RAPHAEL;

	        this._attachToEventBus();
	    },

	    /**
	     * Attach to event bus.
	     * @private
	     */
	    _attachToEventBus: function() {
	        this.eventBus.on({
	            showWedge: this.onShowWedge,
	            hideTooltip: this.onHideWedge
	        }, this);
	        this.eventBus.on('beforeImageDownload', snippet.bind(this._removeLocationURLFromFillAttribute, this));
	        this.eventBus.on('afterImageDownload', snippet.bind(this._restoreLocationURLToFillAttribute, this));
	    },

	    /**
	     * Remove location URL from fill attribute
	     * @private
	     */
	    _removeLocationURLFromFillAttribute: function() {
	        this.graphRenderer.removeLocationURLFromFillAttribute();
	    },

	    /**
	     * Restore location URL to fill attribute
	     * @private
	     */
	    _restoreLocationURLToFillAttribute: function() {
	        this.graphRenderer.restoreLocationURLToFillAttribute();
	    },

	    /**
	     * Make base data to make tick html.
	     * @returns {{startPositionValue: number, step: number, positionType: string, labelSize: ?number}} base data
	     * @private
	     */
	    _makeBaseDataToMakeTickArea: function() {
	        var dimension = this.layout.dimension;
	        var scaleData = this.scaleData;
	        var stepCount = scaleData.stepCount || scaleData.tickCount - 1;
	        var align = this.options.align;
	        var baseData = {};

	        baseData.position = this.layout.position;

	        if (this.isHorizontal) {
	            baseData.step = dimension.width / stepCount;

	            if (predicate.isLegendAlignTop(align)) {
	                baseData.position.top -= chartConst.MAP_LEGEND_LABEL_PADDING;
	            } else {
	                baseData.position.top += chartConst.MAP_LEGEND_GRAPH_SIZE + chartConst.MAP_LEGEND_LABEL_PADDING;
	            }
	        } else {
	            baseData.step = dimension.height / stepCount;

	            if (predicate.isLegendAlignLeft(align)) {
	                baseData.position.left = chartConst.CHART_PADDING;
	            } else {
	                baseData.position.left += chartConst.MAP_LEGEND_GRAPH_SIZE + chartConst.MAP_LEGEND_LABEL_PADDING;
	            }
	        }

	        return baseData;
	    },

	    /**
	     * Render tick area.
	     * @param {Array.<object>} legendSet legend set
	     * @private
	     */
	    _renderTickArea: function(legendSet) {
	        if (this.options.reversed) {
	            this.scaleData.labels.sort(function(prev, next) {
	                return next - prev;
	            });
	        }

	        this.graphRenderer.renderTickLabels(this.paper, this._makeBaseDataToMakeTickArea(),
	            this.scaleData.labels, this.options.align, legendSet);
	    },

	    /**
	     * Make graph dimension of vertical legend
	     * @returns {{width: number, height: number}} dimension
	     * @private
	     */
	    _makeVerticalGraphDimension: function() {
	        return {
	            width: chartConst.MAP_LEGEND_GRAPH_SIZE,
	            height: this.layout.dimension.height
	        };
	    },

	    /**
	     * Make graph dimension of horizontal legend
	     * @returns {{width: number, height: number}} dimension
	     * @private
	     */
	    _makeHorizontalGraphDimension: function() {
	        return {
	            width: this.layout.dimension.width,
	            height: chartConst.MAP_LEGEND_GRAPH_SIZE
	        };
	    },

	    /**
	     * Render graph.
	     * @param {Array.<object>} legendSet legend set
	     * @private
	     */
	    _renderGraph: function(legendSet) {
	        var position = this.layout.position;
	        var dimension, startForSwap;

	        if (this.isHorizontal) {
	            dimension = this._makeHorizontalGraphDimension();
	        } else {
	            dimension = this._makeVerticalGraphDimension();
	        }

	        if (this.options.reversed) {
	            startForSwap = this.colorSpectrum.start;
	            this.colorSpectrum.start = this.colorSpectrum.end;
	            this.colorSpectrum.end = startForSwap;
	        }

	        this.graphRenderer.render({
	            paper: this.paper,
	            layout: {
	                dimension: dimension,
	                position: position
	            },
	            colorSpectrum: this.colorSpectrum,
	            align: this.options.align,
	            legendSet: legendSet,
	            theme: this.theme.label,
	            labels: this.scaleData.labels
	        });
	    },

	    /**
	     * Render legend area.
	     * @returns {Array.<object>}
	     * @private
	     */
	    _renderLegendArea: function() {
	        var legendSet = this.paper.set();

	        this._renderGraph(legendSet);
	        this._renderTickArea(legendSet);

	        return legendSet;
	    },

	    /**
	     * Set data for rendering.
	     * @param {{
	     *      layout: object,
	     *      legendScaleData: object
	     * }} data - scale data
	     * @private
	     */
	    _setDataForRendering: function(data) {
	        this.layout = data.layout;
	        this.paper = data.paper;
	        this.scaleData = data.legendScaleData;
	    },

	    /**
	     * Render legend component.
	     * @param {object} data - scale data
	     */
	    render: function(data) {
	        this._setDataForRendering(data);
	        this.legendSet = this._renderLegendArea();
	    },

	    /**
	     * Rerender legend component.
	     * @param {object} data - scale data
	     */
	    rerender: function(data) {
	        this.legendSet.remove();
	        this.render(data);
	    },

	    /**
	     * Resize legend component.
	     * @param {object} data - scale data
	     */
	    resize: function(data) {
	        this.rerender(data);
	    },

	    /**
	     * On show wedge.
	     * @param {number} ratio ratio
	     * @param {string} label label
	     */
	    onShowWedge: function(ratio, label) {
	        ratio = this.options.reversed ? 1 - ratio : ratio;
	        this.graphRenderer.showWedge(ratio, label);
	    },

	    /**
	     * On hide wedge.
	     */
	    onHideWedge: function() {
	        this.graphRenderer.hideWedge();
	    }
	});

	/**
	 * Factory for SpectrumLegend
	 * @param {object} params parameter
	 * @returns {object|null}
	 * @ignore
	 */
	function spectrumLegendFactory(params) {
	    var isLegendVisible = snippet.isUndefined(params.options.visible) ? true : params.options.visible;
	    var chartType = params.chartOptions.chartType;
	    var spectrumLegend = null;

	    if (isLegendVisible) {
	        params.chartType = chartType;

	        spectrumLegend = new SpectrumLegend(params);
	    }

	    return spectrumLegend;
	}

	spectrumLegendFactory.componentType = 'legend';
	spectrumLegendFactory.SpectrumLegend = SpectrumLegend;

	module.exports = spectrumLegendFactory;


/***/ }),
/* 59 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileoverview  Circle legend component render a legend in the form of overlapping circles
	 *                  by representative radius values.
	 * @author NHN Ent.
	 *         FE Development Lab <dl_javascript@nhnent.com>
	 */

	'use strict';

	var chartConst = __webpack_require__(8);
	var calculator = __webpack_require__(45);
	var renderUtil = __webpack_require__(7);
	var pluginFactory = __webpack_require__(32);
	var snippet = __webpack_require__(6);

	var CircleLegend = snippet.defineClass(/** @lends CircleLegend.prototype */ {
	    /**
	     * ratios for rendering circle
	     * @type {Array.<number>}
	     */
	    circleRatios: [1, 0.5, 0.25],
	    /**
	     * Circle legend component render a legend in the form of overlapping circles by representative radius values.
	     * @constructs CircleLegend
	     * @private
	     * @param {object} params parameters
	     *      @param {?string} params.libType - library type for graph rendering
	     *      @param {string} params.chartType - chart type
	     *      @param {DataProcessor} params.dataProcessor - DataProcessor
	     *      @param {string} params.baseFontFamily - base fontFamily of chart
	     */
	    init: function(params) {
	        var libType = params.libType;

	        /**
	         * chart type
	         * @type {string}
	         */
	        this.chartType = params.chartType;

	        /**
	         * data processor
	         * @type {DataProcessor}
	         */
	        this.dataProcessor = params.dataProcessor;

	        /**
	         * theme for label of circle legend area
	         * @type {{fontSize: number, fontFamily: *}}
	         */
	        this.labelTheme = {
	            fontSize: chartConst.CIRCLE_LEGEND_LABEL_FONT_SIZE,
	            fontFamily: params.baseFontFamily
	        };

	        /**
	         * Graph renderer
	         * @type {object}
	         */
	        this.graphRenderer = pluginFactory.get(libType, 'circleLegend');

	        /**
	         * layout bounds information for this components
	         * @type {null|{dimension:{width:number, height:number}, position:{left:number, top:number}}}
	         */
	        this.layout = null;

	        /**
	         * max radius for rendering circle legend
	         * @type {null|number}
	         */
	        this.maxRadius = null;

	        this.drawingType = chartConst.COMPONENT_TYPE_RAPHAEL;
	    },

	    /**
	     * Format label.
	     * @param {number} label - label
	     * @param {number} decimalLength - decimal length
	     * @returns {string}
	     * @private
	     */
	    _formatLabel: function(label, decimalLength) {
	        var formatFunctions = this.dataProcessor.getFormatFunctions();
	        var formattedLabel;

	        if (decimalLength === 0) {
	            formattedLabel = String(parseInt(label, 10));
	        } else {
	            formattedLabel = renderUtil.formatToDecimal(String(label), decimalLength);
	        }

	        return renderUtil.formatValue({
	            value: formattedLabel,
	            formatFunctions: formatFunctions,
	            chartType: this.chartType,
	            areaType: 'circleLegend',
	            valueType: 'r'
	        });
	    },

	    /**
	     * Make label html.
	     * @returns {Array.<string>}
	     * @private
	     */
	    _makeLabels: function() {
	        var self = this;
	        var maxValueRadius = this.dataProcessor.getMaxValue(this.chartType, 'r');
	        var decimalLength = calculator.getDecimalLength(maxValueRadius);

	        return snippet.map(this.circleRatios, function(ratio) {
	            return self._formatLabel(maxValueRadius * ratio, decimalLength);
	        });
	    },

	    /**
	     * Render for circle legend area.
	     * @param {object} paper paper object
	     * @returns {Array.<object>}
	     * @private
	     */
	    _render: function(paper) {
	        return this.graphRenderer.render(paper, this.layout, this.maxRadius, this.circleRatios, this._makeLabels());
	    },

	    /**
	     * Set data for rendering.
	     * @param {{
	     *      layout: {
	     *          dimension: {width: number, height: number},
	     *          position: {left: number, top: number}
	     *      },
	     *      maxRadius: number
	     * }} data - bounds data
	     * @private
	     */
	    _setDataForRendering: function(data) {
	        this.layout = data.layout;
	        this.maxRadius = data.maxRadius;
	    },

	    /**
	     * Render.
	     * @param {object} data - bounds data
	     */
	    render: function(data) {
	        this._setDataForRendering(data);
	        this.circleLegendSet = this._render(data.paper);
	    },

	    /**
	     * Rerender.
	     * @param {object} data - bounds data
	     */
	    rerender: function(data) {
	        this.circleLegendSet.remove();

	        this._setDataForRendering(data);
	        this.circleLegendSet = this._render(data.paper);
	    },

	    /**
	     * Resize.
	     * @param {object} data - bounds data
	     */
	    resize: function(data) {
	        this.rerender(data);
	    }
	});

	/**
	 * Factory for CircleLegend
	 * @param {object} params parameter
	 * @returns {object|null}
	 * @ignore
	 */
	function circleLegendFactory(params) {
	    var chartType = params.chartOptions.chartType;
	    var chartTheme = params.chartTheme;
	    var visibleOption = snippet.pick(params.chartOptions, 'circleLegend', 'visible');
	    var circleLegend = null;
	    var isLegendVisible;

	    if (snippet.isUndefined(visibleOption)) {
	        isLegendVisible = true;
	    } else {
	        isLegendVisible = visibleOption;
	    }

	    if (isLegendVisible) {
	        params.chartType = chartType;
	        params.baseFontFamily = chartTheme.chart.fontFamily;

	        circleLegend = new CircleLegend(params);
	    }

	    return circleLegend;
	}

	circleLegendFactory.componentType = 'legend';
	circleLegendFactory.CircleLegend = CircleLegend;

	module.exports = circleLegendFactory;


/***/ }),
/* 60 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileoverview NormalTooltip component.
	 * @author NHN Ent.
	 *         FE Development Lab <dl_javascript@nhnent.com>
	 */

	'use strict';

	var normalTooltipFactory = __webpack_require__(61);
	var groupTooltipFactory = __webpack_require__(66);
	var mapChartTooltipFactory = __webpack_require__(68);
	var predicate = __webpack_require__(21);
	var snippet = __webpack_require__(6);

	/**
	 * Label formatter function for pie chart
	 * @param {object} seriesItem series item
	 * @param {object} tooltipDatum tooltip datum object
	 * @param {string} labelPrefix label prefix
	 * @returns {object}
	 * @ignore
	 */
	function pieTooltipLabelFormatter(seriesItem, tooltipDatum, labelPrefix) {
	    var ratioLabel;
	    var percentageString = (seriesItem.ratio * 100).toFixed(4);
	    var percent = parseFloat(percentageString);
	    var needSlice = (percent < 0.0009 || percentageString.length > 5);

	    percentageString = needSlice ? percentageString.substr(0, 4) : String(percent);
	    ratioLabel = percentageString + '&nbsp;%&nbsp;' || '';

	    tooltipDatum.ratioLabel = labelPrefix + ratioLabel;
	    tooltipDatum.label = seriesItem.tooltipLabel || (seriesItem.label ? seriesItem.label : '');

	    return tooltipDatum;
	}

	/**
	 * Factory for Tooltip
	 * @param {object} params parameter
	 * @returns {object|null}
	 * @ignore
	 */
	function tooltipFactory(params) {
	    var chartType = params.chartOptions.chartType;
	    var seriesTypes = params.seriesTypes;
	    var xAxisOptions = params.chartOptions.xAxis;
	    var colors = [];
	    var factory;

	    snippet.forEach(snippet.filter(params.chartTheme.legend, function(item) {
	        return snippet.isArray(item.colors);
	    }), function(series) {
	        colors = colors.concat(series.colors);
	    });

	    if (chartType === 'map') {
	        factory = mapChartTooltipFactory;
	    } else if (params.options.grouped) {
	        factory = groupTooltipFactory;
	    } else {
	        factory = normalTooltipFactory;
	    }

	    if (chartType === 'pie' || predicate.isPieDonutComboChart(chartType, seriesTypes)) {
	        params.labelFormatter = pieTooltipLabelFormatter;
	    }

	    params.chartType = chartType;
	    params.chartTypes = seriesTypes;
	    params.xAxisType = xAxisOptions.type;
	    params.dateFormat = xAxisOptions.dateFormat;
	    params.colors = colors;

	    return factory(params);
	}

	tooltipFactory.componentType = 'tooltip';

	module.exports = tooltipFactory;


/***/ }),
/* 61 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileoverview NormalTooltip component.
	 * @author NHN Ent.
	 *         FE Development Lab <dl_javascript@nhnent.com>
	 */

	'use strict';

	var TooltipBase = __webpack_require__(62);
	var singleTooltipMixer = __webpack_require__(63);
	var chartConst = __webpack_require__(8);
	var predicate = __webpack_require__(21);
	var tooltipTemplate = __webpack_require__(64);
	var snippet = __webpack_require__(6);

	/**
	 * @classdesc NormalTooltip component.
	 * @class NormalTooltip
	 * @private
	 */
	var NormalTooltip = snippet.defineClass(TooltipBase, /** @lends NormalTooltip.prototype */ {
	    /**
	     * NormalTooltip component.
	     * @constructs NormalTooltip
	     * @private
	     * @override
	     */
	    init: function(params) {
	        /**
	         * Color spectrum
	         * @type {ColorSpectrum}
	         */
	        this.colorSpectrum = params.colorSpectrum;

	        TooltipBase.apply(this, arguments);
	    },

	    /**
	     * Make tooltip html.
	     * @param {string} category category
	     * @param {{value: string, legend: string, chartType: string, suffix: ?string}} item item data
	     * @returns {string} tooltip html
	     * @private
	     */
	    _makeTooltipHtml: function(category, item) {
	        var template = this._getTooltipTemplate(item);
	        return template(snippet.extend({
	            categoryVisible: category ? 'show' : 'hide',
	            category: category
	        }, item));
	    },

	    /**
	     * get tooltip template from a templates collection
	     * @param {{value: string, legend: string, chartType: string, suffix: ?string}} item item data
	     * @returns {string} tooltip template
	     * @private
	     */
	    _getTooltipTemplate: function(item) {
	        var template = tooltipTemplate.tplDefault;

	        if (predicate.isBoxplotChart(this.chartType)) {
	            template = this._getBoxplotTooltipTemplate(item);
	        } else if (predicate.isPieChart(this.chartType) ||
	            predicate.isPieDonutComboChart(this.chartType, this.chartTypes)) {
	            template = tooltipTemplate.tplPieChart;
	        } else if (this.dataProcessor.coordinateType) {
	            template = tooltipTemplate.tplCoordinatetypeChart;
	        } else if (predicate.isBulletChart(this.chartType)) {
	            template = tooltipTemplate.tplBulletChartDefault;
	        } else if (predicate.isHeatmapChart(this.chartType)) {
	            template = tooltipTemplate.tplHeatmapChart;
	        }

	        return template;
	    },

	    /**
	     * Get tooltip template of box plot chart
	     * If item has outlierIndex, return outlier template
	     * Otherwise, return box plot default template
	     * @param {{value: string, legend: string, chartType: string, suffix: ?string}} item item data
	     * @returns {string} tooltip template
	     * @private
	     */
	    _getBoxplotTooltipTemplate: function(item) {
	        var template = tooltipTemplate.tplBoxplotChartDefault;

	        if (snippet.isNumber(item.outlierIndex)) {
	            template = tooltipTemplate.tplBoxplotChartOutlier;
	            item.label = item.outliers[item.outlierIndex].label;
	        }

	        return template;
	    },

	    /**
	     * Make html for value types like x, y, r
	     * @param {{x: ?number, y: ?number, r: ?number}} data - data
	     * @param {Array.<string>} valueTypes - types of value
	     * @returns {string}
	     * @private
	     */
	    _makeHtmlForValueTypes: function(data, valueTypes) {
	        return snippet.map(valueTypes, function(type) {
	            return (data[type]) ? '<tr><td>' + type + '</td><td class="' + chartConst.CLASS_NAME_TOOLTIP_VALUE + '">' + data[type] + '</td></tr>' : '';
	        }).join('');
	    },

	    /**
	     * Make single tooltip html.
	     * @param {string} chartType chart type
	     * @param {{groupIndex: number, index: number}} indexes indexes
	     * @returns {string} tooltip html
	     * @private
	     */
	    _makeSingleTooltipHtml: function(chartType, indexes) {
	        var groupIndex = indexes.groupIndex;
	        var data = snippet.extend({}, snippet.pick(this.data, chartType, indexes.groupIndex, indexes.index));
	        var colorByPoint = (predicate.isBarTypeChart(this.chartType) || predicate.isBoxplotChart(this.chartType))
	            && this.dataProcessor.options.series.colorByPoint;
	        var seriesIndex = indexes.index;
	        var color;

	        if (predicate.isBulletChart(this.chartType)) {
	            seriesIndex = groupIndex;
	        } else if (predicate.isTreemapChart(this.chartType)) {
	            seriesIndex = data.tooltipColorIndex;
	        }

	        color = colorByPoint ? '#aaa' : this.tooltipColors[chartType][seriesIndex];

	        if (predicate.isBoxplotChart(this.chartType) && snippet.isNumber(indexes.outlierIndex)) {
	            data.outlierIndex = indexes.outlierIndex;
	        }
	        if (this.colorSpectrum) {
	            color = this.colorSpectrum.getColor(data.colorRatio || data.ratio);
	        }

	        data.chartType = this.chartType;
	        data.cssText = 'background-color: ' + color;
	        data = snippet.extend({
	            suffix: this.suffix
	        }, data);
	        data.valueTypes = this._makeHtmlForValueTypes(data, ['x', 'y', 'r']);

	        return this.templateFunc(data.category, data, this.getRawCategory(groupIndex));
	    },

	    /**
	     * Set default align option of tooltip.
	     * @private
	     * @override
	     */
	    _setDefaultTooltipPositionOption: function() {
	        if (this.options.align) {
	            return;
	        }

	        if (this.isVertical) {
	            this.options.align = chartConst.TOOLTIP_DEFAULT_ALIGN_OPTION;
	        } else {
	            this.options.align = chartConst.TOOLTIP_DEFAULT_HORIZONTAL_ALIGN_OPTION;
	        }
	    },

	    /**
	     * Make parameters for show tooltip user event.
	     * @param {{groupIndex: number, index: number}} indexes indexes
	     * @param {object} additionParams addition parameters
	     * @returns {{chartType: string, legend: string, legendIndex: number, index: number}} parameters for show tooltip
	     * @private
	     */
	    _makeShowTooltipParams: function(indexes, additionParams) {
	        var legendIndex = indexes.index;
	        var legendData = this.dataProcessor.getLegendItem(legendIndex);
	        var chartType;

	        var params;

	        if (!legendData) {
	            return null;
	        }

	        chartType = legendData.chartType;
	        params = snippet.extend({
	            chartType: chartType,
	            legend: legendData.label,
	            legendIndex: legendIndex,
	            index: indexes.groupIndex
	        }, additionParams);

	        if (predicate.isBoxplotChart(chartType) &&
	            snippet.isNumber(indexes.outlierIndex)) {
	            params.outlierIndex = indexes.outlierIndex;
	        }

	        return params;
	    },

	    /**
	     * Make tooltip datum.
	     * @param {string} legendLabel - legend label
	     * @param {string} category - category
	     * @param {SeriesItem} seriesItem - SeriesItem
	     * @returns {Object}
	     * @private
	     */
	    _makeTooltipDatum: function(legendLabel, category, seriesItem) {
	        var tooltipLabel = seriesItem.tooltipLabel;
	        var labelFormatter = this.labelFormatter;
	        var tooltipDatum = {
	            legend: legendLabel || '',
	            label: tooltipLabel || (seriesItem.label ? seriesItem.label : ''),
	            category: category || ''
	        };

	        if (labelFormatter) {
	            tooltipDatum = labelFormatter(seriesItem, tooltipDatum, '');
	        }

	        tooltipDatum.category = category || '';

	        return snippet.extend(tooltipDatum, seriesItem.pickValueMapForTooltip());
	    },

	    /**
	     * Make tooltip data.
	     * @returns {Array.<object>} tooltip data
	     * @override
	     */
	    makeTooltipData: function() {
	        var self = this;
	        var orgLegendLabels = this.dataProcessor.getLegendLabels();
	        var isPivot = predicate.isTreemapChart(this.chartType);
	        var legendLabels = {};
	        var tooltipData = {};

	        if (snippet.isArray(orgLegendLabels)) {
	            legendLabels[this.chartType] = orgLegendLabels;
	        } else {
	            legendLabels = orgLegendLabels;
	        }

	        this.dataProcessor.eachBySeriesGroup(function(seriesGroup, groupIndex, chartType) {
	            var data, isBulletChart;

	            chartType = chartType || self.chartType;
	            isBulletChart = predicate.isBulletChart(chartType);

	            data = seriesGroup.map(function(seriesItem, index) {
	                var category = self.dataProcessor.makeTooltipCategory(groupIndex, index, self.isVertical);
	                var legendIndex = isBulletChart ? groupIndex : index;

	                if (!seriesItem) {
	                    return null;
	                }

	                return self._makeTooltipDatum(legendLabels[chartType][legendIndex], category, seriesItem);
	            });

	            if (!tooltipData[chartType]) {
	                tooltipData[chartType] = [];
	            }

	            tooltipData[chartType].push(data);
	        }, isPivot);

	        return tooltipData;
	    }
	});

	singleTooltipMixer.mixin(NormalTooltip);

	function normalTooltipFactory(params) {
	    return new NormalTooltip(params);
	}

	normalTooltipFactory.componentType = 'tooltip';
	normalTooltipFactory.NormalTooltip = NormalTooltip;

	module.exports = normalTooltipFactory;


/***/ }),
/* 62 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileoverview TooltipBase is base class of tooltip components.
	 * @author NHN Ent.
	 *         FE Development Lab <dl_javascript@nhnent.com>
	 */

	'use strict';

	var snippet = __webpack_require__(6);
	var raphael = __webpack_require__(3);
	var chartConst = __webpack_require__(8),
	    dom = __webpack_require__(9),
	    predicate = __webpack_require__(21),
	    renderUtil = __webpack_require__(7);

	var TooltipBase = snippet.defineClass(/** @lends TooltipBase.prototype */ {
	    /**
	     * TooltipBase is base class of tooltip components.
	     * @constructs TooltipBase
	     * @private
	     * @param {object} params - parameters
	     *      @param {string} params.chartType - chart type
	     *      @param {Array.<string>} params.chartTypes - chart types
	     *      @param {DataProcessor} params.dataProcessor - DataProcessor instance
	     *      @param {object} params.options - tooltip options
	     *      @param {object} params.theme - tooltip theme
	     *      @param {boolean} params.isVertical - whether vertical or not
	     *      @param {object} params.eventBus - snippet.CustomEvents instance
	     *      @param {object} params.labelTheme - theme for label
	     *      @param {string} params.xAxisType - xAxis type
	     *      @param {string} params.dateFormat - date format
	     *      @param {object} params.labelFormatter - label formatter function
	     */
	    init: function(params) {
	        var isPieChart = predicate.isPieChart(params.chartType);

	        /**
	         * Chart type
	         * @type {string}
	         */
	        this.chartType = params.chartType;

	        /**
	         * Chart types
	         * @type {Array.<string>}
	         */
	        this.chartTypes = params.chartTypes;

	        /**
	         * Data processor
	         * @type {DataProcessor}
	         */
	        this.dataProcessor = params.dataProcessor;

	        /**
	         * Options
	         * @type {object}
	         */
	        this.options = params.options;
	        this.colors = params.colors;

	        /**
	         * Theme
	         * @type {object}
	         */
	        this.theme = params.theme;

	        /**
	         * whether vertical or not
	         * @type {boolean}
	         */
	        this.isVertical = params.isVertical;

	        /**
	         * event bus for transmitting message
	         * @type {object}
	         */
	        this.eventBus = params.eventBus;

	        /**
	         * label theme
	         * @type {object}
	         */
	        this.labelTheme = params.labelTheme;

	        /**
	         * x axis type
	         * @type {?string}
	         */
	        this.xAxisType = params.xAxisType;

	        /**
	         * dateFormat option for xAxis
	         * @type {?string}
	         */
	        this.dateFormat = params.dateFormat;

	        /**
	         * tooltip options for each chart
	         * @type {?function}
	         */
	        this.labelFormatter = params.labelFormatter;

	        /**
	         * className
	         * @type {string}
	         */
	        this.className = 'tui-chart-tooltip-area';

	        /**
	         * Tooltip container.
	         * @type {HTMLElement}
	         */
	        this.tooltipContainer = null;

	        /**
	         * Tooltip suffix.
	         * @type {string}
	         */
	        this.suffix = this.options.suffix ? '&nbsp;' + this.options.suffix : '';

	        /**
	         * Tooltip template function.
	         * @type {function}
	         */
	        this.templateFunc = this.options.template || snippet.bind(this._makeTooltipHtml, this);

	        /**
	         * Tooltip animation time.
	         * @type {number}
	         */
	        this.animationTime = isPieChart ? chartConst.TOOLTIP_PIE_ANIMATION_TIME : chartConst.TOOLTIP_ANIMATION_TIME;

	        /**
	         * TooltipBase base data.
	         * @type {Array.<Array.<object>>}
	         */
	        this.data = [];

	        /**
	         * layout bounds information for this components
	         * @type {null|{dimension:{width:number, height:number}, position:{left:number, top:number}}}
	         */
	        this.layout = null;

	        /**
	         * dimension map for layout of chart
	         * @type {null|object}
	         */
	        this.dimensionMap = null;

	        /**
	         * position map for layout of chart
	         * @type {null|object}
	         */
	        this.positionMap = null;

	        /**
	         * Drawing type
	         * @type {string}
	         */
	        this.drawingType = chartConst.COMPONENT_TYPE_DOM;

	        this._setDefaultTooltipPositionOption();
	        this._saveOriginalPositionOptions();

	        this._attachToEventBus();
	    },

	    /**
	     * Attach to event bus.
	     * @private
	     */
	    _attachToEventBus: function() {
	        this.eventBus.on({
	            showTooltip: this.onShowTooltip,
	            hideTooltip: this.onHideTooltip
	        }, this);

	        if (this.onShowTooltipContainer) {
	            this.eventBus.on({
	                showTooltipContainer: this.onShowTooltipContainer,
	                hideTooltipContainer: this.onHideTooltipContainer
	            }, this);
	        }
	    },

	    /**
	     * Make tooltip html.
	     * @private
	     * @abstract
	     */
	    _makeTooltipHtml: function() {},

	    /**
	     * Set default align option of tooltip.
	     * @private
	     * @abstract
	     */
	    _setDefaultTooltipPositionOption: function() {},

	    /**
	     * Save position options.
	     * @private
	     */
	    _saveOriginalPositionOptions: function() {
	        this.orgPositionOptions = {
	            align: this.options.align,
	            offset: this.options.offset
	        };
	    },

	    /**
	     * Render tooltip component.
	     * @param {HTMLElement} iconElement - icon element
	     */
	    makeLineLegendIcon: function(iconElement) {
	        var iconElementLength = iconElement.length;
	        var icon, strokeColor, paper, line;
	        var i = 0;

	        for (; i < iconElementLength; i += 1) {
	            icon = iconElement[i];
	            strokeColor = icon.style['background-color'];
	            paper = raphael(icon, 10, 10);
	            line = paper.path(chartConst.LEGEND_LINE_ICON_PATH);
	            icon.style['background-color'] = '';
	            line.attr({
	                'stroke': strokeColor,
	                'stroke-width': 2,
	                'stroke-opacity': 1
	            });
	        }
	    },

	    /**
	     * Make tooltip data.
	     * @private
	     * @abstract
	     */
	    makeTooltipData: function() {},

	    /**
	     * Set data for rendering.
	     * @param {{
	     *      layout: {
	     *          dimension: {width: number, height: number},
	     *          position: {left: number, top: number}
	     *      },
	     *      dimensionMap: object
	     * }} data - bounds data
	     * @private
	     */
	    _setDataForRendering: function(data) {
	        this.layout = data.layout;
	        this.dimensionMap = data.dimensionMap;
	        this.positionMap = data.positionMap;
	    },

	    /**
	     * Render tooltip component.
	     * @param {object} data - bounds data
	     * @returns {HTMLElement} tooltip element
	     */
	    render: function(data) {
	        var el = data.paper;

	        dom.addClass(el, this.className);

	        this._setDataForRendering(data);
	        this.data = this.makeTooltipData();
	        this.tooltipColors = this.makeTooltipLegendColor(data.checkedLegends);
	        renderUtil.renderPosition(el, this.layout.position);

	        this.tooltipContainer = el;

	        return el;
	    },

	    /**
	     * Rerender.
	     * @param {object} data - bounds data
	     */
	    rerender: function(data) {
	        this.resize(data);
	        this.data = this.makeTooltipData();
	        this.tooltipColors = this.makeTooltipLegendColor(data.checkedLegends);
	    },

	    /**
	     * make legend color
	     * @param {object | Array.<boolean>}checkedLegends checked legends
	     * @returns {{colors: Array.<string>}} legend colors
	     * @private
	     */
	    makeTooltipLegendColor: function(checkedLegends) {
	        var colors = {};

	        if (checkedLegends) {
	            snippet.forEach(this.theme, function(themeItem, themeKey) {
	                if (!colors[themeKey]) {
	                    colors[themeKey] = [];
	                }
	                snippet.forEach(checkedLegends[themeKey], function(checked, index) {
	                    if (checked) {
	                        colors[themeKey].push(this.theme[themeKey].colors[index]);
	                    }
	                }, this);
	            }, this);
	        }

	        return colors;
	    },
	    /**
	     * Resize tooltip component.
	     * @param {object} data - bounds data
	     * @override
	     */
	    resize: function(data) {
	        this._setDataForRendering(data);

	        renderUtil.renderPosition(this.tooltipContainer, this.layout.position);
	        if (this.positionModel) {
	            this.positionModel.updateBound(this.layout);
	        }
	    },

	    /**
	     * Zoom.
	     */
	    zoom: function() {
	        this.data = this.makeTooltipData();
	    },

	    /**
	     * Get tooltip element.
	     * @returns {HTMLElement} tooltip element
	     * @private
	     */
	    _getTooltipElement: function() {
	        var tooltipElement;

	        if (!this.tooltipElement) {
	            this.tooltipElement = tooltipElement = dom.create('DIV', 'tui-chart-tooltip');
	            dom.append(this.tooltipContainer, tooltipElement);
	        }

	        return this.tooltipElement;
	    },

	    /**
	     * onShowTooltip is callback of mouse event detector showTooltip for SeriesView.
	     * @param {object} params coordinate event parameters
	     */
	    onShowTooltip: function(params) {
	        var tooltipElement = this._getTooltipElement();
	        var isScatterCombo = predicate.isComboChart(this.chartType) && predicate.isScatterChart(params.chartType);
	        var prevPosition;

	        if ((!predicate.isChartToDetectMouseEventOnSeries(params.chartType) || isScatterCombo)
	            && tooltipElement.offsetWidth) {
	            prevPosition = {
	                left: tooltipElement.offsetLeft,
	                top: tooltipElement.offsetTop
	            };
	        }

	        this._showTooltip(tooltipElement, params, prevPosition);
	    },

	    /**
	     * Get tooltip dimension
	     * @param {HTMLElement} tooltipElement tooltip element
	     * @returns {{width: number, height: number}} rendered tooltip dimension
	     */
	    getTooltipDimension: function(tooltipElement) {
	        return {
	            width: tooltipElement.offsetWidth,
	            height: tooltipElement.offsetHeight
	        };
	    },

	    /**
	     * Move to Position.
	     * @param {HTMLElement} tooltipElement tooltip element
	     * @param {{left: number, top: number}} position position
	     * @param {{left: number, top: number}} prevPosition prev position
	     * @private
	     */
	    _moveToPosition: function(tooltipElement, position, prevPosition) {
	        if (prevPosition) {
	            this._slideTooltip(tooltipElement, prevPosition, position);
	        } else {
	            renderUtil.renderPosition(tooltipElement, position);
	        }
	    },

	    /**
	     * Slide tooltip
	     * @param {HTMLElement} tooltipElement tooltip element
	     * @param {{left: number, top: number}} prevPosition prev position
	     * @param {{left: number, top: number}} position position
	     * @private
	     */
	    _slideTooltip: function(tooltipElement, prevPosition, position) {
	        var moveTop = position.top - prevPosition.top,
	            moveLeft = position.left - prevPosition.left;

	        renderUtil.cancelAnimation(this.slidingAnimation);

	        this.slidingAnimation = renderUtil.startAnimation(this.animationTime, function(ratio) {
	            var left = moveLeft * ratio,
	                top = moveTop * ratio;
	            tooltipElement.style.left = (prevPosition.left + left) + 'px';
	            tooltipElement.style.top = (prevPosition.top + top) + 'px';
	        });
	    },

	    /**
	     * onHideTooltip is callback of mouse event detector hideTooltip for SeriesView
	     * @param {number|object} prevFound - showing tooltip object in case single tooltip,
	     *                                  - showing tooltip index in case group tooltip
	     * @param {{silent: {boolean}}} [options] - hide tooltip options
	     */
	    onHideTooltip: function(prevFound, options) {
	        var tooltipElement = this._getTooltipElement();

	        this._hideTooltip(tooltipElement, prevFound, options);
	    },

	    /**
	     * Set align option.
	     * @param {string} align align
	     */
	    setAlign: function(align) {
	        this.options.align = align;
	        if (this.positionModel) {
	            this.positionModel.updateOptions(this.options);
	        }
	    },

	    /**
	     * Update offset option.
	     * @param {{x: number, y: number}} offset - offset
	     * @private
	     */
	    _updateOffsetOption: function(offset) {
	        this.options.offset = offset;

	        if (this.positionModel) {
	            this.positionModel.updateOptions(this.options);
	        }
	    },

	    /**
	     * Set offset.
	     * @param {{x: number, y: number}} offset - offset
	     */
	    setOffset: function(offset) {
	        var offsetOption = snippet.extend({}, this.options.offset);

	        if (snippet.isExisty(offset.x)) {
	            offsetOption.x = offset.x;
	        }

	        if (snippet.isExisty(offset.y)) {
	            offsetOption.y = offset.y;
	        }

	        this._updateOffsetOption(snippet.extend({}, this.options.offset, offsetOption));
	    },

	    /**
	     * Set position option.
	     * @param {{left: number, top: number}} position moving position
	     * @deprecated
	     */
	    setPosition: function(position) {
	        var offsetOption = snippet.extend({}, this.options.offset);

	        if (snippet.isExisty(position.left)) {
	            offsetOption.x = position.left;
	        }

	        if (snippet.isExisty(position.top)) {
	            offsetOption.y = position.y;
	        }

	        this._updateOffsetOption(offsetOption);
	    },

	    /**
	     * Reset align option.
	     */
	    resetAlign: function() {
	        var align = this.orgPositionOptions.align;

	        this.options.align = align;

	        if (this.positionModel) {
	            this.positionModel.updateOptions(this.options);
	        }
	    },

	    /**
	     * Reset offset option.
	     */
	    resetOffset: function() {
	        this.options.offset = this.orgPositionOptions.offset;
	        this._updateOffsetOption(this.options.offset);
	    },

	    /**
	     * Get category's raw data
	     * @param {number} index - index of categories
	     * @param {string} format - date format
	     * @returns {string} - category's raw data
	     */
	    getRawCategory: function(index, format) {
	        var axis = this.isVertical ? 'x' : 'y';
	        var categories = this.dataProcessor.categoriesMap ? this.dataProcessor.categoriesMap[axis] : null;
	        var rawCategory = '';

	        if (categories) {
	            rawCategory = categories[index];
	        }

	        if (format) {
	            rawCategory = renderUtil.formatDate(rawCategory, format);
	        }

	        return rawCategory;
	    }
	});

	module.exports = TooltipBase;


/***/ }),
/* 63 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileoverview singleTooltipMixer is single tooltip mixer of map chart.
	 * @author NHN Ent.
	 *         FE Development Lab <dl_javascript@nhnent.com>
	 */

	'use strict';

	var snippet = __webpack_require__(6);
	var chartConst = __webpack_require__(8),
	    predicate = __webpack_require__(21),
	    dom = __webpack_require__(9),
	    renderUtil = __webpack_require__(7);

	/**
	 * singleTooltipMixer is single tooltip mixer of map chart.
	 * @mixin
	 * @private */
	var singleTooltipMixer = {
	    /**
	     * Set data indexes.
	     * @param {HTMLElement} elTooltip tooltip element
	     * @param {{groupIndex: number, index:number}} indexes indexes
	     * @private
	     */
	    _setIndexesCustomAttribute: function(elTooltip, indexes) {
	        elTooltip.setAttribute('data-groupIndex', indexes.groupIndex);
	        elTooltip.setAttribute('data-index', indexes.index);
	    },

	    /**
	     * Get data indexes
	     * @param {HTMLElement} elTooltip tooltip element
	     * @returns {{groupIndex: number, index: number}} indexes
	     * @private
	     */
	    _getIndexesCustomAttribute: function(elTooltip) {
	        var groupIndex = elTooltip.getAttribute('data-groupIndex');
	        var index = elTooltip.getAttribute('data-index');
	        var indexes = null;

	        if (!snippet.isNull(groupIndex) && !snippet.isNull(index)) {
	            indexes = {
	                groupIndex: parseInt(groupIndex, 10),
	                index: parseInt(index, 10)
	            };
	        }

	        return indexes;
	    },

	    /**
	     * Set showed custom attribute.
	     * @param {HTMLElement} elTooltip tooltip element
	     * @param {boolean} status whether showed or not
	     * @private
	     */
	    _setShowedCustomAttribute: function(elTooltip, status) {
	        elTooltip.setAttribute('data-showed', status);
	    },

	    /**
	     * Whether showed tooltip or not.
	     * @param {HTMLElement} elTooltip tooltip element
	     * @returns {boolean} whether showed tooltip or not
	     * @private
	     */
	    _isShowedTooltip: function(elTooltip) {
	        var isShowed = elTooltip.getAttribute('data-showed');

	        return isShowed === 'true' || isShowed === true; // true in ie7
	    },

	    /**
	     * Make tooltip position for bullet chart
	     * @param {object} params - mouse position
	     * @returns {object} - position of single tooltip
	     * @private
	     */
	    _makeTooltipPositionForBulletChart: function(params) {
	        var mousePosition = params.mousePosition;
	        var tooltipAreaPosition = this.layout.position;

	        return {
	            left: mousePosition.left - tooltipAreaPosition.left,
	            top: mousePosition.top - tooltipAreaPosition.top
	        };
	    },

	    /**
	     * Make left position of not bar chart.
	     * @param {number} baseLeft base left
	     * @param {string} alignOption align option
	     * @param {number} minusWidth minus width
	     * @param {number} lineGap line gap
	     * @returns {number} left position value
	     * @private
	     */
	    _makeLeftPositionOfNotBarChart: function(baseLeft, alignOption, minusWidth, lineGap) {
	        var left = baseLeft;
	        var offsetNegative = minusWidth || 0;
	        var lineGapOffset = lineGap || chartConst.TOOLTIP_GAP;

	        if (alignOption.indexOf('left') > -1) {
	            left -= offsetNegative + lineGapOffset;
	        } else if (alignOption.indexOf('center') > -1 && offsetNegative) {
	            left -= offsetNegative / 2;
	        } else {
	            left += lineGapOffset;
	        }

	        return left;
	    },

	    /**
	     * Make top position of not bar chart.
	     * @param {number} baseTop base top
	     * @param {string} alignOption align option
	     * @param {number} tooltipHeight tooltip height
	     * @param {number} lineGap line gap
	     * @returns {number} top position value
	     * @private
	     */
	    _makeTopPositionOfNotBarChart: function(baseTop, alignOption, tooltipHeight, lineGap) {
	        var top = baseTop;
	        var offsetNegative = tooltipHeight || 0;

	        if (alignOption.indexOf('bottom') > -1) {
	            top += offsetNegative + lineGap;
	        } else if (alignOption.indexOf('middle') > -1 && offsetNegative) {
	            top += offsetNegative / 2;
	        } else {
	            top -= offsetNegative + chartConst.TOOLTIP_GAP;
	        }

	        return top;
	    },

	    /**
	     * Make tooltip position for not bar chart.
	     * @param {object} params parameters
	     *      @param {{bound: object}} params.data graph information
	     *      @param {{width: number, height: number}} params.dimension tooltip dimension
	     *      @param {string} params.alignOption position option (ex: 'left top')
	     * @returns {{top: number, left: number}} position
	     * @private
	     */
	    _makeTooltipPositionForNotBarChart: function(params) {
	        var bound = params.bound,
	            positionOption = params.positionOption,
	            minusWidth = params.dimension.width - (bound.width || 0),
	            lineGap = bound.width ? 0 : chartConst.TOOLTIP_GAP,
	            alignOption = params.alignOption || '',
	            tooltipHeight = params.dimension.height,
	            baseLeft = bound.left - this.layout.position.left + positionOption.left,
	            baseTop = bound.top - this.layout.position.top + positionOption.top - chartConst.TOOLTIP_GAP;

	        return {
	            left: this._makeLeftPositionOfNotBarChart(baseLeft, alignOption, minusWidth, lineGap),
	            top: this._makeTopPositionOfNotBarChart(baseTop, alignOption, tooltipHeight, lineGap)
	        };
	    },

	    /**
	     * Make tooltip position to event position.
	     * @param {object} params parameters
	     *      @param {{left: number, top: number}} params.bound bound
	     *      @param {{left: number, top: number}} params.mousePosition mouse position
	     * @returns {{top: number, left: number}} position
	     * @private
	     */
	    _makeTooltipPositionToMousePosition: function(params) {
	        if (!params.bound) {
	            params.bound = params.bound || {};
	            snippet.extend(params.bound, params.mousePosition);
	        }

	        return this._makeTooltipPositionForNotBarChart(params);
	    },

	    /**
	     * Make left position for bar chart.
	     * @param {number} baseLeft base left
	     * @param {string} alignOption align option
	     * @param {number} tooltipWidth tooltip width
	     * @returns {number} left position value
	     * @private
	     */
	    _makeLeftPositionForBarChart: function(baseLeft, alignOption, tooltipWidth) {
	        var left = baseLeft;

	        if (alignOption.indexOf('left') > -1) {
	            left -= tooltipWidth;
	        } else if (alignOption.indexOf('center') > -1) {
	            left -= tooltipWidth / 2;
	        } else {
	            left += chartConst.TOOLTIP_GAP;
	        }

	        return left;
	    },

	    /**
	     * Make top position for bar chart.
	     * @param {number} baseTop base top
	     * @param {string} alignOption align option
	     * @param {number} minusHeight minus width
	     * @returns {number} top position value
	     * @private
	     */
	    _makeTopPositionForBarChart: function(baseTop, alignOption, minusHeight) {
	        var top = baseTop;

	        if (alignOption.indexOf('top') > -1) {
	            top -= minusHeight;
	        } else if (alignOption.indexOf('middle') > -1) {
	            top -= minusHeight / 2;
	        }

	        return top;
	    },

	    /**
	     * Make tooltip position for bar chart.
	     * @param {object} params parameters
	     *      @param {{bound: object}} params.data graph information
	     *      @param {{width: number, height: number}} params.dimension tooltip dimension
	     *      @param {string} params.alignOption position option (ex: 'left top')
	     * @returns {{top: number, left: number}} position
	     * @private
	     */
	    _makeTooltipPositionForBarChart: function(params) {
	        var position = this.layout.position;
	        var bound = params.bound,
	            positionOption = params.positionOption,
	            minusHeight = params.dimension.height - (bound.height || 0),
	            alignOption = params.alignOption || '',
	            tooltipWidth = params.dimension.width,
	            baseLeft = bound.left + bound.width + positionOption.left - position.left,
	            baseTop = bound.top + positionOption.top - position.top;

	        return {
	            left: this._makeLeftPositionForBarChart(baseLeft, alignOption, tooltipWidth),
	            top: this._makeTopPositionForBarChart(baseTop, alignOption, minusHeight)
	        };
	    },

	    /**
	     * Make tooltip position for treemap chart.
	     * @param {object} params parameters
	     *      @param {{bound: object}} params.data - graph information
	     *      @param {{width: number, height: number}} params.dimension - tooltip dimension
	     * @returns {{left: number, top: number}}
	     * @private
	     */
	    _makeTooltipPositionForTreemapChart: function(params) {
	        var position = this.layout.position;
	        var bound = params.bound;
	        var positionOption = params.positionOption;
	        var labelHeight = renderUtil.getRenderedLabelHeight(chartConst.MAX_HEIGHT_WORD, this.labelTheme);

	        return {
	            left: bound.left + ((bound.width - params.dimension.width) / 2) + positionOption.left - position.left,
	            top: bound.top + (bound.height / 2) - labelHeight + positionOption.top - position.top
	        };
	    },

	    /**
	     * Adjust position.
	     * @param {{width: number, height: number}} tooltipDimension tooltip dimension
	     * @param {{left: number, top: number}} position position
	     * @returns {{left: number, top: number}} adjusted position
	     * @private
	     */
	    _adjustPosition: function(tooltipDimension, position) {
	        var chartDimension = this.dimensionMap.chart;
	        var areaPosition = this.layout.position;

	        position.left = Math.max(position.left, -areaPosition.left);
	        position.left = Math.min(position.left, chartDimension.width - areaPosition.left - tooltipDimension.width);
	        position.top = Math.max(position.top, -areaPosition.top);
	        position.top = Math.min(position.top, chartDimension.height - areaPosition.top - tooltipDimension.height);

	        return position;
	    },

	    /**
	     * Make tooltip position.
	     * @param {object} params parameters
	     *      @param {{left: number, top: number, width: number, height: number}} params.bound graph bound
	     *      @param {string} params.chartType chart type
	     *      @param {boolean} params.allowNegativeTooltip whether allow negative tooltip or not
	     *      @param {{width: number, height: number}} params.dimension tooltip dimension
	     *      @param {string} params.alignOption position option (ex: 'left top')
	     * @returns {{top: number, left: number}} position
	     * @private
	     */
	    _makeTooltipPosition: function(params) {
	        var position = {},
	            sizeType, positionType, addPadding;

	        if (params.mousePosition) {
	            position = this._makeTooltipPositionToMousePosition(params);
	        } else {
	            if (predicate.isBarChart(params.chartType)) {
	                position = this._makeTooltipPositionForBarChart(params);
	                sizeType = 'width';
	                positionType = 'left';
	                addPadding = 1;
	            } else if (predicate.isTreemapChart(params.chartType)) {
	                position = this._makeTooltipPositionForTreemapChart(params);
	            } else {
	                position = this._makeTooltipPositionForNotBarChart(params);
	                sizeType = 'height';
	                positionType = 'top';
	                addPadding = -1;
	            }

	            if (params.allowNegativeTooltip) {
	                position = this._moveToSymmetry(position, {
	                    bound: params.bound,
	                    indexes: params.indexes,
	                    dimension: params.dimension,
	                    chartType: params.chartType,
	                    sizeType: sizeType,
	                    positionType: positionType,
	                    addPadding: addPadding
	                });
	            }

	            position = this._adjustPosition(params.dimension, position);
	        }

	        return position;
	    },

	    /**
	     * Move to symmetry.
	     * @param {{left: number, top: number}} position tooltip position
	     * @param {object} params parameters
	     *      @param {{left: number, top: number, width: number, height: number}} params.bound graph bound
	     *      @param {string} params.id tooltip id
	     *      @param {{width: number, height: number}} params.dimension tooltip dimension
	     *      @param {string} params.sizeType size type (width or height)
	     *      @param {string} params.positionType position type (left or top)
	     *      @param {number} params.addPadding add padding
	     * @returns {{left: number, top: number}} moved position
	     * @private
	     */
	    _moveToSymmetry: function(position, params) {
	        var bound = params.bound;
	        var sizeType = params.sizeType;
	        var positionType = params.positionType;
	        var seriesType = params.seriesType || params.chartType;
	        var value = this.dataProcessor.getValue(params.indexes.groupIndex, params.indexes.index, seriesType);
	        var direction = predicate.isBarChart(this.chartType) ? -1 : 1;
	        var tooltipSize, barSize, movedPositionValue;

	        if (value < 0) {
	            tooltipSize = params.dimension[sizeType];
	            barSize = bound[sizeType];
	            movedPositionValue = position[positionType]
	                + ((barSize + tooltipSize) * direction);
	            position[positionType] = movedPositionValue;
	        }

	        return position;
	    },

	    /**
	     * Whether changed indexes or not.
	     * @param {{groupIndex: number, index: number}} prevIndexes prev indexes
	     * @param {{groupIndex: number, index: number}} indexes indexes
	     * @returns {boolean} whether changed or not
	     * @private
	     */
	    _isChangedIndexes: function(prevIndexes, indexes) {
	        return !!prevIndexes && (prevIndexes.groupIndex !== indexes.groupIndex || prevIndexes.index !== indexes.index);
	    },

	    /**
	     * Show tooltip.
	     * @param {HTMLElement} elTooltip tooltip element
	     * @param {{indexes: {groupIndex: number, index: number}, bound: object}} params tooltip data
	     * @param {{left: number, top: number}} prevPosition prev position
	     * @private
	     */
	    _showTooltip: function(elTooltip, params, prevPosition) {
	        var boundingClientRect = this.tooltipContainer.parentNode.getBoundingClientRect();
	        var indexes = params.indexes;
	        var prevIndexes = this._getIndexesCustomAttribute(elTooltip);
	        var offset = this.options.offset || {};
	        var positionOption = {};
	        var prevChartType = elTooltip && elTooltip.getAttribute('data-chart-type');
	        var position;

	        if (!params.bound && params.mousePosition) {
	            params.bound = {
	                left: params.mousePosition.left - boundingClientRect.left + chartConst.CHART_PADDING,
	                top: params.mousePosition.top - boundingClientRect.top + chartConst.CHART_PADDING
	            };
	        }

	        if (this._isChangedIndexes(prevIndexes, indexes) || prevChartType !== params.chartType) {
	            this.eventBus.fire('hoverOffSeries', prevIndexes, prevChartType);
	        }

	        elTooltip.innerHTML = this._makeSingleTooltipHtml(params.seriesType || params.chartType, indexes);

	        if (params.chartType === 'line') {
	            this.makeLineLegendIcon(elTooltip.querySelectorAll('.tui-chart-legend-rect.line'));
	        }

	        elTooltip.setAttribute('data-chart-type', params.chartType);
	        this._setIndexesCustomAttribute(elTooltip, indexes);
	        this._setShowedCustomAttribute(elTooltip, true);

	        this._fireBeforeShowTooltipPublicEvent(indexes, params.silent);

	        dom.addClass(elTooltip, 'show');

	        positionOption.left = offset.x || 0;
	        positionOption.top = offset.y || 0;

	        position = this._makeTooltipPosition(snippet.extend({
	            dimension: this.getTooltipDimension(elTooltip),
	            positionOption: positionOption,
	            alignOption: this.options.align || ''
	        }, params));

	        this._moveToPosition(elTooltip, position, prevPosition);
	        this.eventBus.fire('hoverSeries', indexes, params.chartType);
	        this._fireAfterShowTooltipPublicEvent(indexes, {
	            element: elTooltip,
	            position: position
	        }, params.silent);
	        delete params.silent;
	    },

	    /**
	     * To call beforeShowTooltip callback of public event.
	     * @param {{groupIndex: number, index: number}} indexes indexes
	     * @param {boolean} [silent] - whether invoke a public beforeHideTooltip event or not
	     * @private
	     */
	    _fireBeforeShowTooltipPublicEvent: function(indexes, silent) {
	        var params;

	        if (silent) {
	            return;
	        }

	        params = this._makeShowTooltipParams(indexes);
	        this.eventBus.fire(chartConst.PUBLIC_EVENT_PREFIX + 'beforeShowTooltip', params);
	    },

	    /**
	     * To call afterShowTooltip callback of public event.
	     * @param {{groupIndex: number, index: number}} indexes indexes
	     * @param {object} additionParams addition parameters
	     * @param {boolean} [silent] - whether invoke a public beforeHideTooltip event or not
	     * @private
	     */
	    _fireAfterShowTooltipPublicEvent: function(indexes, additionParams, silent) {
	        var params;

	        if (silent) {
	            return;
	        }

	        params = this._makeShowTooltipParams(indexes, additionParams);
	        this.eventBus.fire(chartConst.PUBLIC_EVENT_PREFIX + 'afterShowTooltip', params);
	    },

	    /**
	     * Execute hiding tooltip.
	     * @param {HTMLElement} tooltipElement tooltip element
	     * @private
	     */
	    _executeHidingTooltip: function(tooltipElement) {
	        dom.removeClass(tooltipElement, 'show');
	        tooltipElement.removeAttribute('data-groupIndex');
	        tooltipElement.removeAttribute('data-index');
	        tooltipElement.style.cssText = '';
	    },

	    /**
	     * Hide tooltip.
	     * @param {HTMLElement} tooltipElement - tooltip element
	     * @param {object} prevFoundData - data represented by tooltip elements
	     * @param {{silent: {boolean}}} [options] - options for hiding a tooltip element
	     * @private
	     */
	    _hideTooltip: function(tooltipElement, prevFoundData, options) {
	        var self = this;
	        var indexes = this._getIndexesCustomAttribute(tooltipElement);
	        var chartType = tooltipElement.getAttribute('data-chart-type');
	        var silent = !!(options && options.silent);

	        if (predicate.isChartToDetectMouseEventOnSeries(chartType)) {
	            this.eventBus.fire('hoverOffSeries', indexes, chartType);
	            this._fireBeforeHideTooltipPublicEvent(indexes, silent);
	            this._executeHidingTooltip(tooltipElement);
	        } else if (chartType) {
	            this._setShowedCustomAttribute(tooltipElement, false);
	            this.eventBus.fire('hoverOffSeries', indexes, chartType);

	            if (this._isChangedIndexes(this.prevIndexes, indexes)) {
	                delete this.prevIndexes;
	            }

	            setTimeout(function() {
	                if (self._isShowedTooltip(tooltipElement)) {
	                    return;
	                }
	                self._fireBeforeHideTooltipPublicEvent(indexes, silent);
	                self._executeHidingTooltip(tooltipElement);
	            }, chartConst.HIDE_DELAY);
	        }
	    },

	    /**
	     * To call afterShowTooltip callback of public event.
	     * @param {{groupIndex: number, index: number}} indexes indexes=
	     * @param {boolean} [silent] - whether invoke a public beforeHideTooltip event or not
	     * @private
	     */
	    _fireBeforeHideTooltipPublicEvent: function(indexes, silent) {
	        var params;
	        if (silent) {
	            return;
	        }

	        this.eventBus.fire(chartConst.PUBLIC_EVENT_PREFIX + 'beforeHideTooltip', params);
	    },

	    /**
	     * On show tooltip container.
	     */
	    onShowTooltipContainer: function() {
	        this.tooltipContainer.style.zIndex = chartConst.TOOLTIP_ZINDEX;
	    },

	    /**
	     * On hide tooltip container.
	     */
	    onHideTooltipContainer: function() {
	        this.tooltipContainer.style.zIndex = 0;
	    },

	    /**
	     * Mix in.
	     * @param {function} func target function
	     * @ignore
	     */
	    mixin: function(func) {
	        snippet.extend(func.prototype, this);
	    }
	};

	module.exports = singleTooltipMixer;


/***/ }),
/* 64 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileoverview This is templates of tooltip.
	 * @author NHN Ent.
	 *         FE Development Lab <dl_javascript@nhnent.com>
	 */

	'use strict';

	var templateMaker = __webpack_require__(65);

	var htmls = {
	    HTML_DEFAULT_TEMPLATE: '<div class="tui-chart-default-tooltip">' +
	        '<div class="tui-chart-tooltip-head {{ categoryVisible }}">{{ category }}</div>' +
	        '<div class="tui-chart-tooltip-body">' +
	            '<span class="tui-chart-legend-rect {{ chartType }}" style="{{ cssText }}"></span>' +
	            '<span>{{ legend }}</span>' +
	            '<span class="tui-chart-tooltip-value">{{ label }}{{ suffix }}</span>' +
	        '</div>' +
	    '</div>',

	    HTML_PIE_TEMPLATE: '<div class="tui-chart-default-tooltip">' +
	        '<div class="tui-chart-tooltip-head {{ categoryVisible }}">{{ category }}</div>' +
	        '<div class="tui-chart-tooltip-body">' +
	            '<span class="tui-chart-legend-rect {{ chartType }}" style="{{ cssText }}"></span>' +
	            '<span>{{ legend }}</span>' +
	            '<span class="tui-chart-tooltip-value">{{ ratioLabel }} ( {{ label }} {{ suffix }})</span>' +
	        '</div>' +
	    '</div>',

	    HTML_COORDINATE_TYPE_CHART_TEMPLATE: '<div class="tui-chart-default-tooltip">' +
	        '<div class="tui-chart-tooltip-head {{ categoryVisible }}">' +
	            '<span class="tui-chart-legend-rect {{ chartType }}" style="{{ cssText }}"></span>' +
	            '{{ category }}' +
	        '</div>' +
	        '<div class="tui-chart-tooltip-body">' +
	            '<span class="tui-chart-legend-rect {{ chartType }}" style="{{ cssText }}"></span>' +
	            '<span>{{ legend }}</span>' +
	            '<span class="tui-chart-tooltip-value">{{ label }}</span>' +
	        '</div><table class="tui-chart-tooltip-body">{{ valueTypes }}</table>' +
	    '</div>',

	    HTML_GROUP: '<div class="tui-chart-default-tooltip tui-chart-group-tooltip">' +
	        '<div class="tui-chart-tooltip-head">{{ category }}</div>' +
	        '<table class="tui-chart-tooltip-body">' +
	            '{{ items }}' +
	        '</table>' +
	    '</div>',

	    HTML_GROUP_TYPE: '<tr>' +
	        '<td colspan="3" class="tui-chart-tooltip-type">{{ type }}</div>' +
	    '</tr>',

	    HTML_GROUP_ITEM: '<tr>' +
	        '<td>' +
	            '<div class="tui-chart-legend-rect {{ chartType }}" style="{{ cssText }}"></div>' +
	        '</td>' +
	        '<td>{{ legend }}</td>' +
	        '<td class="tui-chart-tooltip-value">{{ value }} {{ suffix }}</td>' +
	    '</tr>',

	    GROUP_CSS_TEXT: 'background-color:{{ color }}',
	    HTML_MAP_CHART_DEFAULT_TEMPLATE: '<div class="tui-chart-default-tooltip">' +
	        '<div class="tui-chart-tooltip-body">' +
	            '<span class="tui-chart-legend-rect {{ chartType }}" style="{{ cssText }}"></span>' +
	            '<span>{{ name }}</span>' +
	            '<span class="tui-chart-tooltip-value">{{ value }}{{ suffix }}</span>' +
	        '</div>' +
	    '</div>',
	    HTML_HEATMAP_TEMPLATE: '<div class="tui-chart-default-tooltip">' +
	            '<div class="tui-chart-tooltip-head {{ categoryVisible }}">{{ category }}</div>' +
	            '<div class="tui-chart-tooltip-body">' +
	                '<span class="tui-chart-legend-rect {{ chartType }}" style="{{ cssText }}"></span>' +
	                '<span>{{ label }}{{ suffix }}</span>' +
	            '</div>' +
	        '</div>',
	    HTML_BOXPLOT_TEMPLATE: '<div class="tui-chart-default-tooltip">' +
	        '<div class="tui-chart-tooltip-head {{ categoryVisible }}">{{ category }}</div>' +
	            '<table class="tui-chart-tooltip-body">' +
	                '<tr>' +
	        '<td colspan="2"><span class="tui-chart-legend-rect {{ chartType }}" style="{{ cssText }}"></span>{{ legend }}</td>' +
	                '</tr>' +
	                '<tr>' +
	                    '<td>Maximum: </td>' +
	                    '<td class="tui-chart-tooltip-value">{{ maxLabel }} {{ suffix }}</td>' +
	                '</tr>' +
	                '<tr>' +
	                    '<td>Upper Quartile: </td>' +
	                    '<td class="tui-chart-tooltip-value">{{ uqLabel }} {{ suffix }}</td>' +
	                '</tr>' +
	                '<tr>' +
	                    '<td>Median: </td>' +
	                    '<td class="tui-chart-tooltip-value">{{ medianLabel }} {{ suffix }}</td>' +
	                '</tr>' +
	                '<tr>' +
	                    '<td>Lower Quartile: </td>' +
	                    '<td class="tui-chart-tooltip-value">{{ lqLabel }} {{ suffix }}</td>' +
	                '</tr>' +
	                '<tr>' +
	                    '<td>Minimum: </td>' +
	                    '<td class="tui-chart-tooltip-value">{{ minLabel }} {{ suffix }}</td>' +
	                '</tr>' +
	            '</table>' +
	    '</div>',
	    HTML_BOXPLOT_OUTLIER: '<div class="tui-chart-default-tooltip">' +
	        '<div class="tui-chart-tooltip-head {{ categoryVisible }}">{{ category }}</div>' +
	            '<div class="tui-chart-tooltip-body">' +
	                '<span>{{ legend }}</span>' +
	            '</div>' +
	            '<div class="tui-chart-tooltip-body">' +
	                '<span>Outlier: </span>' +
	                '<span class="tui-chart-tooltip-value">{{ label }} {{ suffix }}</span>' +
	            '</div>' +
	    '</div>',
	    HTML_BULLET_TEMPLATE: '<div class="tui-chart-default-tooltip">' +
	            '<div class="tui-chart-tooltip-body {{ categoryVisible }}">' +
	            '<span class="tui-chart-legend-rect {{ chartType }}" style="{{ cssText }}"></span>' +
	            '<span>{{ category }}</span>' +
	            '<span class="tui-chart-tooltip-value">{{ label }} {{ suffix }}</span>' +
	        '</div>' +
	    '</div>'
	};

	module.exports = {
	    tplDefault: templateMaker.template(htmls.HTML_DEFAULT_TEMPLATE),
	    tplPieChart: templateMaker.template(htmls.HTML_PIE_TEMPLATE),
	    tplCoordinatetypeChart: templateMaker.template(htmls.HTML_COORDINATE_TYPE_CHART_TEMPLATE),
	    tplGroup: templateMaker.template(htmls.HTML_GROUP),
	    tplGroupType: templateMaker.template(htmls.HTML_GROUP_TYPE),
	    tplGroupItem: templateMaker.template(htmls.HTML_GROUP_ITEM),
	    tplGroupCssText: templateMaker.template(htmls.GROUP_CSS_TEXT),
	    tplMapChartDefault: templateMaker.template(htmls.HTML_MAP_CHART_DEFAULT_TEMPLATE),
	    tplHeatmapChart: templateMaker.template(htmls.HTML_HEATMAP_TEMPLATE),
	    tplBoxplotChartDefault: templateMaker.template(htmls.HTML_BOXPLOT_TEMPLATE),
	    tplBoxplotChartOutlier: templateMaker.template(htmls.HTML_BOXPLOT_OUTLIER),
	    tplBulletChartDefault: templateMaker.template(htmls.HTML_BULLET_TEMPLATE)
	};


/***/ }),
/* 65 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileoverview This is template maker.
	 * @author NHN Ent.
	 *         FE Development Lab <dl_javascript@nhnent.com>
	 */

	'use strict';

	var snippet = __webpack_require__(6);

	module.exports = {
	    /**
	     * This is template maker.
	     * @param {string} html html
	     * @returns {function} template function
	     * @eaxmple
	     *
	     *   var template = templateMaker.template('<span>{{ name }}</span>'),
	     *       result = template({name: 'John');
	     *   console.log(result); // <span>John</span>
	     *
	     */
	    template: function(html) {
	        return function(data) {
	            var result = html;
	            snippet.forEach(data, function(value, key) {
	                var regExp = new RegExp('{{\\s*' + key + '\\s*}}', 'g');
	                result = result.replace(regExp, String(value).replace('$', '＄'));
	            });

	            return result;
	        };
	    }
	};


/***/ }),
/* 66 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileoverview Group tooltip component.
	 * @author NHN Ent.
	 *         FE Development Lab <dl_javascript@nhnent.com>
	 */

	'use strict';

	var TooltipBase = __webpack_require__(62);
	var GroupTooltipPositionModel = __webpack_require__(67);
	var chartConst = __webpack_require__(8);
	var dom = __webpack_require__(9);
	var renderUtil = __webpack_require__(7);
	var defaultTheme = __webpack_require__(34);
	var tooltipTemplate = __webpack_require__(64);
	var snippet = __webpack_require__(6);
	var predicate = __webpack_require__(21);

	/**
	 * @classdesc GroupTooltip component.
	 * @class GroupTooltip
	 * @private
	 */
	var GroupTooltip = snippet.defineClass(TooltipBase, /** @lends GroupTooltip.prototype */ {
	    /**
	     * Group tooltip component.
	     * @constructs GroupTooltip
	     * @private
	     * @override
	     */
	    init: function(params) {
	        this.prevIndex = null;
	        this.isBullet = predicate.isBulletChart(params.chartType);
	        TooltipBase.call(this, params);
	    },

	    /**
	     * Make tooltip html.
	     * @param {string} category category
	     * @param {Array.<{value: string, legend: string, chartType: string, suffix: ?string}>} items items data
	     * @param {string} rawCategory raw category
	     * @param {number} groupIndex group index
	     * @returns {string} tooltip html
	     * @private
	     */
	    _makeTooltipHtml: function(category, items, rawCategory, groupIndex) {
	        var template = tooltipTemplate.tplGroupItem;
	        var cssTextTemplate = tooltipTemplate.tplGroupCssText;
	        var colorByPoint = (predicate.isBarTypeChart(this.chartType) || predicate.isBoxplotChart(this.chartType))
	            && this.dataProcessor.options.series.colorByPoint;
	        var colors = this._makeColors(this.theme, groupIndex);
	        var prevType, itemsHtml;

	        itemsHtml = snippet.map(items, function(item, index) {
	            var type = item.type;
	            var typeVisible = (type !== 'data') && (prevType !== type);
	            var itemHtml = '';

	            prevType = type;

	            if (!item.value) {
	                return null;
	            }

	            if (typeVisible) {
	                itemHtml = tooltipTemplate.tplGroupType({
	                    type: type
	                });
	            }

	            itemHtml += template(snippet.extend({
	                cssText: cssTextTemplate({color: colorByPoint ? '#aaa' : colors[index]})
	            }, item));

	            return itemHtml;
	        }).join('');

	        return tooltipTemplate.tplGroup({
	            category: category,
	            items: itemsHtml
	        });
	    },

	    /**
	     * Set default align option of tooltip.
	     * @private
	     * @override
	     */
	    _setDefaultTooltipPositionOption: function() {
	        if (this.options.align) {
	            return;
	        }

	        if (this.isVertical) {
	            this.options.align = chartConst.TOOLTIP_DEFAULT_GROUP_ALIGN_OPTION;
	        } else {
	            this.options.align = chartConst.TOOLTIP_DEFAULT_GROUP_HORIZONTAL_ALIGN_OPTION;
	        }
	    },

	    /**
	     * Render tooltip component.
	     * @returns {HTMLElement}
	     * @override
	     */
	    render: function(data) {
	        var container = TooltipBase.prototype.render.call(this, data);
	        var chartDimension = this.dimensionMap.chart;
	        var bound = this.layout;

	        if (data.checkedLegends) {
	            this.theme = this._updateLegendTheme(data.checkedLegends);
	        }

	        this.positionModel = new GroupTooltipPositionModel(chartDimension, bound, this.isVertical, this.options);

	        return container;
	    },

	    /**
	     * Rerender.
	     * @param {{checkedLegends: Array.<boolean>}} data rendering data
	     * @override
	     */
	    rerender: function(data) {
	        TooltipBase.prototype.rerender.call(this, data);
	        this.prevIndex = null;

	        if (data.checkedLegends) {
	            this.theme = this._updateLegendTheme(data.checkedLegends);
	        }
	    },

	    /**
	     * Zoom.
	     */
	    zoom: function() {
	        this.prevIndex = null;
	        TooltipBase.prototype.zoom.call(this);
	    },

	    /**
	     * Update legend theme.
	     * @param {object | Array.<boolean>}checkedLegends checked legends
	     * @returns {{colors: Array.<string>}} legend theme
	     * @private
	     */
	    _updateLegendTheme: function(checkedLegends) {
	        var colors = [];

	        snippet.forEachArray(this.dataProcessor.getOriginalLegendData(), function(item) {
	            var _checkedLegends = checkedLegends[item.chartType] || checkedLegends;
	            if (_checkedLegends[item.index]) {
	                colors.push(item.theme.color);
	            }
	        });

	        return {
	            colors: colors
	        };
	    },

	    /**
	     * Make tooltip data.
	     * @returns {Array.<object>} tooltip data
	     * @override
	     */
	    makeTooltipData: function() {
	        var length = this.dataProcessor.getCategoryCount(this.isVertical);

	        return snippet.map(this.dataProcessor.getSeriesGroups(), function(seriesGroup, index) {
	            var values = seriesGroup.map(function(item) {
	                return {
	                    type: item.type || 'data',
	                    label: item.label
	                };
	            });

	            return {
	                category: this.dataProcessor.makeTooltipCategory(index, length - index, this.isVertical),
	                values: values
	            };
	        }, this);
	    },

	    /**
	     * Make colors.
	     * @param {object} theme tooltip theme
	     * @param {number} [groupIndex] groupIndex
	     * @returns {Array.<string>} colors
	     * @private
	     */
	    _makeColors: function(theme, groupIndex) {
	        var colorIndex = 0,
	            legendLabels = this.dataProcessor.getLegendData(),
	            defaultColors, colors, prevChartType;

	        if (this.isBullet) {
	            return this.dataProcessor.getGraphColors()[groupIndex];
	        }

	        if (theme.colors) {
	            return theme.colors;
	        }

	        defaultColors = defaultTheme.series.colors.slice(0, legendLabels.length);

	        return snippet.map(snippet.pluck(legendLabels, 'chartType'), function(chartType) {
	            var color;

	            if (prevChartType !== chartType) {
	                colors = theme[chartType] ? theme[chartType].colors : defaultColors;
	                colorIndex = 0;
	            }

	            prevChartType = chartType;
	            color = colors[colorIndex];
	            colorIndex += 1;

	            return color;
	        });
	    },

	    /**
	     * Make rendering data about legend item.
	     * @param {Array.<string>} values values
	     * @param {number} groupIndex groupIndex
	     * @returns {Array.<{value: string, legend: string, chartType: string, suffix: ?string}>} legend item data.
	     * @private
	     */
	    _makeItemRenderingData: function(values, groupIndex) {
	        var dataProcessor = this.dataProcessor,
	            suffix = this.suffix;

	        return snippet.map(values, function(data, index) {
	            var item = {
	                value: data.label,
	                type: data.type,
	                suffix: suffix,
	                legend: ''
	            };
	            var legendLabel;

	            if (this.isBullet) {
	                legendLabel = dataProcessor.getLegendItem(groupIndex);
	            } else {
	                legendLabel = dataProcessor.getLegendItem(index);
	                item.legend = legendLabel.label;
	            }

	            item.chartType = legendLabel.chartType;

	            return item;
	        }, this);
	    },

	    /**
	     * Make tooltip.
	     * @param {number} groupIndex group index
	     * @returns {string} tooltip html
	     * @private
	     */
	    _makeGroupTooltipHtml: function(groupIndex) {
	        var data = this.data[groupIndex];
	        var items, htmlString = '';

	        if (data) {
	            items = this._makeItemRenderingData(data.values, groupIndex);
	            htmlString = this.templateFunc(data.category, items, this.getRawCategory(groupIndex), groupIndex);
	        }

	        return htmlString;
	    },

	    /**
	     * Get tooltip sector element.
	     * @returns {HTMLElement} sector element
	     * @private
	     */
	    _getTooltipSectorElement: function() {
	        var groupTooltipSector;

	        if (!this.groupTooltipSector) {
	            this.groupTooltipSector = groupTooltipSector = dom.create('DIV', 'tui-chart-group-tooltip-sector');
	            dom.append(this.tooltipContainer, groupTooltipSector);
	        }

	        return this.groupTooltipSector;
	    },

	    /**
	     * Make bound about tooltip sector of vertical type chart.
	     * @param {number} height height
	     * @param {{start: number, end: number}} range range
	     * @param {boolean} isLine whether line or not
	     * @returns {{dimension: {width: number, height: number}, position: {left: number, top: number}}} bound
	     * @private
	     */
	    _makeVerticalTooltipSectorBound: function(height, range, isLine) {
	        var width;

	        if (isLine) {
	            width = 1;
	        } else {
	            width = range.end - range.start;
	        }

	        return {
	            dimension: {
	                width: width,
	                height: height
	            },
	            position: {
	                left: range.start,
	                top: chartConst.SERIES_EXPAND_SIZE
	            }
	        };
	    },

	    /**
	     * Make bound about tooltip sector of horizontal type chart.
	     * @param {number} width width
	     * @param {{start: number, end:number}} range range
	     * @returns {{dimension: {width: number, height: number}, position: {left: number, top: number}}} bound
	     * @private
	     */
	    _makeHorizontalTooltipSectorBound: function(width, range) {
	        return {
	            dimension: {
	                width: width,
	                height: range.end - range.start
	            },
	            position: {
	                left: chartConst.SERIES_EXPAND_SIZE,
	                top: range.start
	            }
	        };
	    },

	    /**
	     * Make bound about tooltip sector.
	     * @param {number} size width or height
	     * @param {{start: number, end:number}} range range
	     * @param {boolean} isVertical whether vertical or not
	     * @param {boolean} isLine whether line type or not
	     * @returns {{dimension: {width: number, height: number}, position: {left: number, top: number}}} bound
	     * @private
	     */
	    _makeTooltipSectorBound: function(size, range, isVertical, isLine) {
	        var bound;

	        if (isVertical) {
	            bound = this._makeVerticalTooltipSectorBound(size, range, isLine);
	        } else {
	            bound = this._makeHorizontalTooltipSectorBound(size, range);
	        }

	        return bound;
	    },

	    /**
	     * Show tooltip sector.
	     * @param {number} size width or height
	     * @param {{start: number, end:number}} range range
	     * @param {boolean} isVertical whether vertical or not
	     * @param {number} index index
	     * @param {boolean} [isMoving] whether moving or not
	     * @private
	     */
	    _showTooltipSector: function(size, range, isVertical, index, isMoving) {
	        var groupTooltipSector = this._getTooltipSectorElement(),
	            isLine = (range.start === range.end),
	            bound = this._makeTooltipSectorBound(size, range, isVertical, isLine);

	        if (isLine) {
	            this.eventBus.fire('showGroupTooltipLine', bound);
	        } else {
	            renderUtil.renderDimension(groupTooltipSector, bound.dimension);
	            renderUtil.renderPosition(groupTooltipSector, bound.position);
	            dom.addClass(groupTooltipSector, 'show');
	        }

	        if (isMoving) {
	            index -= 1;
	        }

	        this.eventBus.fire('showGroupAnimation', index);
	    },

	    /**
	     * Hide tooltip sector.
	     * @param {number} index index
	     * @private
	     */
	    _hideTooltipSector: function(index) {
	        var groupTooltipSector = this._getTooltipSectorElement();

	        if (!dom.hasClass(groupTooltipSector, 'show')) {
	            this.eventBus.fire('hideGroupTooltipLine');
	        } else {
	            dom.removeClass(groupTooltipSector, 'show');
	        }
	        this.eventBus.fire('hideGroupAnimation', index);
	        this.eventBus.fire('hideGroupTooltipLine');
	    },

	    /**
	     * Show tooltip.
	     * @param {HTMLElement} elTooltip tooltip element
	     * @param {{index: number, range: {start: number, end: number},
	     *          size: number, direction: string, isVertical: boolean
	     *        }} params coordinate event parameters
	     * @param {{left: number, top: number}} prevPosition prev position
	     * @private
	     */
	    _showTooltip: function(elTooltip, params, prevPosition) {
	        var dimension, position;

	        if (!snippet.isNull(this.prevIndex)) {
	            this.eventBus.fire('hideGroupAnimation', this.prevIndex);
	        }

	        elTooltip.innerHTML = this._makeGroupTooltipHtml(params.index);

	        this._fireBeforeShowTooltipPublicEvent(params.index, params.range, params.silent);

	        if (document.getElementsByClassName) {
	            this.makeLineLegendIcon(elTooltip.querySelectorAll('.tui-chart-legend-rect.line'));
	        }

	        dom.addClass(elTooltip, 'show');

	        this._showTooltipSector(params.size, params.range, params.isVertical, params.index, params.isMoving);

	        dimension = this.getTooltipDimension(elTooltip);
	        position = this.positionModel.calculatePosition(dimension, params.range);

	        this._moveToPosition(elTooltip, position, prevPosition);

	        this._fireAfterShowTooltipPublicEvent(params.index, params.range, {
	            element: elTooltip,
	            position: position
	        }, params.silent);

	        this.prevIndex = params.index;
	    },

	    /**
	     * To call beforeShowTooltip callback of public event.
	     * @param {number} index index
	     * @param {{start: number, end: number}} range range
	     * @param {boolean} [silent] - whether invoke a public beforeHideTooltip event or not
	     * @private
	     */
	    _fireBeforeShowTooltipPublicEvent: function(index, range, silent) {
	        if (silent) {
	            return;
	        }

	        this.eventBus.fire(chartConst.PUBLIC_EVENT_PREFIX + 'beforeShowTooltip', {
	            chartType: this.chartType,
	            index: index,
	            range: range
	        });
	    },

	    /**
	     * To call afterShowTooltip callback of public event.
	     * @param {number} index index
	     * @param {{start: number, end: number}} range range
	     * @param {object} additionParams addition parameters
	     * @param {boolean} [silent] - whether invoke a public beforeHideTooltip event or not
	     * @private
	     */
	    _fireAfterShowTooltipPublicEvent: function(index, range, additionParams, silent) {
	        if (silent) {
	            return;
	        }
	        this.eventBus.fire(chartConst.PUBLIC_EVENT_PREFIX + 'afterShowTooltip', snippet.extend({
	            chartType: this.chartType,
	            index: index,
	            range: range
	        }, additionParams));
	    },

	    /**
	     * Hide tooltip.
	     * @param {HTMLElement} tooltipElement tooltip element
	     * @param {number} prevFoundIndex - showing tooltip index
	     * @param {object} [options] - options for hiding tooltip
	     * @private
	     */
	    _hideTooltip: function(tooltipElement, prevFoundIndex, options) {
	        var silent = !!(options && options.silent);
	        this.prevIndex = null;
	        this._fireBeforeHideTooltipPublicEvent(prevFoundIndex, silent);
	        this._hideTooltipSector(prevFoundIndex);
	        dom.removeClass(tooltipElement, 'show');
	        tooltipElement.style.cssText = '';
	    },

	    /**
	     * To call beforeHideTooltip callback of public event.
	     * @param {number} index index
	     * @param {boolean} [silent] - options for hiding tooltip
	     * @private
	     */
	    _fireBeforeHideTooltipPublicEvent: function(index, silent) {
	        if (silent) {
	            return;
	        }

	        this.eventBus.fire(chartConst.PUBLIC_EVENT_PREFIX + 'beforeHideTooltip', {
	            chartType: this.chartType,
	            index: index
	        });
	    }
	});

	function groupTooltipFactory(params) {
	    return new GroupTooltip(params);
	}

	groupTooltipFactory.componentType = 'tooltip';
	groupTooltipFactory.GroupTooltip = GroupTooltip;

	module.exports = groupTooltipFactory;


/***/ }),
/* 67 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileoverview GroupTooltipPositionModel is position model for group tooltip..
	 * @author NHN Ent.
	 *         FE Development Lab <dl_javascript@nhnent.com>
	 */

	'use strict';

	var chartConst = __webpack_require__(8);
	var snippet = __webpack_require__(6);

	var GroupTooltipPositionModel = snippet.defineClass(/** @lends GroupTooltipPositionModel.prototype */ {
	    /**
	     * GroupTooltipPositionModel is position model for group tooltip.
	     * @constructs GroupTooltipPositionModel
	     * @private
	     * @param {{width: number, height: number}} chartDimension chart dimension
	     * @param {{
	     *      dimension: {width: number, height: number},
	     *      position: {left: number, top: number}
	     * }} areaBound tooltip area bound
	     * @param {boolean} isVertical whether vertical or not
	     * @param {{align: ?string, position: {left: number, top: number}}} options tooltip options
	     */
	    init: function(chartDimension, areaBound, isVertical, options) {
	        /**
	         * chart dimension
	         * @type {{width: number, height: number}}
	         */
	        this.chartDimension = chartDimension;

	        /**
	         * tooltip area bound
	         * @type {{dimension: {width: number, height: number}, position: {left: number, top: number}}}
	         */
	        this.areaBound = areaBound;

	        /**
	         * Whether vertical or not
	         * @type {boolean}
	         */
	        this.isVertical = isVertical;

	        /**
	         * tooltip options
	         * @type {{align: ?string, position: {left: number, top: number}}}
	         */
	        this.options = options;

	        /**
	         * For caching
	         * @type {object}
	         */
	        this.positions = {};

	        this._setData(chartDimension, areaBound, isVertical, options);
	    },

	    /**
	     * Get horizontal direction.
	     * @param {?string} alignOption align option
	     * @returns {string} direction
	     * @private
	     */
	    _getHorizontalDirection: function(alignOption) {
	        var direction;

	        alignOption = alignOption || '';
	        if (alignOption.indexOf('left') > -1) {
	            direction = chartConst.TOOLTIP_DIRECTION_BACKWARD;
	        } else if (alignOption.indexOf('center') > -1) {
	            direction = chartConst.TOOLTIP_DIRECTION_CENTER;
	        } else {
	            direction = chartConst.TOOLTIP_DIRECTION_FORWARD;
	        }

	        return direction;
	    },

	    /**
	     * Make vertical data.
	     * @param {{width: number, height: number}} chartDimension chart dimension
	     * @param {{
	     *      dimension: {width: number, height: number},
	     *      position: {left: number, top: number}
	     * }} areaBound tooltip area bound
	     * @param {?string} alignOption align option
	     * @returns {{
	     *      positionType: string, sizeType: string, direction: (string),
	     *      areaPosition: number, areaSize: number, chartSize: number,
	     *      basePosition: (number)
	     * }} vertical data
	     * @private
	     */
	    _makeVerticalData: function(chartDimension, areaBound, alignOption) {
	        var hDirection = this._getHorizontalDirection(alignOption);

	        return {
	            positionType: 'left',
	            sizeType: 'width',
	            direction: hDirection,
	            areaPosition: areaBound.position.left,
	            areaSize: areaBound.dimension.width,
	            chartSize: chartDimension.width,
	            basePosition: chartConst.SERIES_EXPAND_SIZE
	        };
	    },

	    /**
	     * Get vertical direction.
	     * @param {?string} alignOption align option
	     * @returns {string} direction
	     * @private
	     */
	    _getVerticalDirection: function(alignOption) {
	        var direction;

	        alignOption = alignOption || '';

	        if (alignOption.indexOf('top') > -1) {
	            direction = chartConst.TOOLTIP_DIRECTION_BACKWARD;
	        } else if (alignOption.indexOf('bottom') > -1) {
	            direction = chartConst.TOOLTIP_DIRECTION_FORWARD;
	        } else {
	            direction = chartConst.TOOLTIP_DIRECTION_CENTER;
	        }

	        return direction;
	    },

	    /**
	     * Make horizontal data.
	     * @param {{width: number, height: number}} chartDimension chart dimension
	     * @param {{
	     *      dimension: {width: number, height: number},
	     *      position: {left: number, top: number}
	     * }} areaBound tooltip area bound
	     * @param {?string} alignOption align option
	     * @returns {{
	     *      positionType: string, sizeType: string, direction: (string),
	     *      areaPosition: number, areaSize: number, chartSize: number,
	     *      basePosition: (number)
	     * }} horizontal data
	     * @private
	     */
	    _makeHorizontalData: function(chartDimension, areaBound, alignOption) {
	        var vDirection = this._getVerticalDirection(alignOption);

	        return {
	            positionType: 'top',
	            sizeType: 'height',
	            direction: vDirection,
	            areaPosition: areaBound.position.top,
	            areaSize: areaBound.dimension.height,
	            chartSize: chartDimension.height,
	            basePosition: chartConst.SERIES_EXPAND_SIZE
	        };
	    },

	    /**
	     * Set data.
	     * @param {{width: number, height: number}} chartDimension chart dimension
	     * @param {{
	     *      dimension: {width: number, height: number},
	     *      position: {left: number, top: number}
	     * }} areaBound tooltip area bound
	     * @param {boolean} isVertical whether vertical or not
	     * @param {{align: ?string, position: {left: number, top: number}}} options tooltip options
	     * @private
	     */
	    _setData: function(chartDimension, areaBound, isVertical, options) {
	        var verticalData = this._makeVerticalData(chartDimension, areaBound, options.align);
	        var horizontalData = this._makeHorizontalData(chartDimension, areaBound, options.align);
	        var offset = options.offset || {};

	        if (isVertical) {
	            this.mainData = verticalData;
	            this.subData = horizontalData;
	        } else {
	            this.mainData = horizontalData;
	            this.subData = verticalData;
	        }

	        this.positionOption = {};
	        this.positionOption.left = offset.x || 0;
	        this.positionOption.top = offset.y || 0;

	        this.positions = {};
	    },

	    /**
	     * Calculate main position value.
	     * @param {number} tooltipSize tooltip size (width or height)
	     * @param {{start: number, end: number}} range range
	     * @param {object} data data
	     *      @param {string} data.direction direction
	     *      @param {number} data.basePosition basePosition
	     * @returns {number} position value
	     * @private
	     */
	    _calculateMainPositionValue: function(tooltipSize, range, data) {
	        var isLine = (range.start === range.end),
	            lineTypePadding = 9,
	            otherTypePadding = 5,
	            padding = isLine ? lineTypePadding : otherTypePadding,
	            value = data.basePosition;

	        if (data.direction === chartConst.TOOLTIP_DIRECTION_FORWARD) {
	            value += range.end + padding;
	        } else if (data.direction === chartConst.TOOLTIP_DIRECTION_BACKWARD) {
	            value += range.start - tooltipSize - padding;
	        } else if (isLine) {
	            value += range.start - (tooltipSize / 2);
	        } else {
	            value += range.start + ((range.end - range.start - tooltipSize) / 2);
	        }

	        return value;
	    },

	    /**
	     * Calculate sub position value.
	     * @param {number} tooltipSize tooltip size (width or height)
	     * @param {object} data data
	     *      @param {number} data.areaSize tooltip area size (width or height)
	     *      @param {string} data.direction direction
	     *      @param {number} data.basePosition basePosition
	     * @returns {number} position value
	     * @private
	     */
	    _calculateSubPositionValue: function(tooltipSize, data) {
	        var middle = data.areaSize / 2,
	            value;

	        if (data.direction === chartConst.TOOLTIP_DIRECTION_FORWARD) {
	            value = middle + data.basePosition;
	        } else if (data.direction === chartConst.TOOLTIP_DIRECTION_BACKWARD) {
	            value = middle - tooltipSize + data.basePosition;
	        } else {
	            value = middle - (tooltipSize / 2) + data.basePosition;
	        }

	        return value;
	    },

	    /**
	     * Make position value diff.
	     * @param {number} value positoin value
	     * @param {number} tooltipSize tooltip size (width or height)
	     * @param {object} data data
	     *      @param {number} data.chartSize chart size (width or height)
	     *      @param {number} data.areaPosition tooltip area position (left or top)
	     * @returns {number} diff
	     * @private
	     */
	    _makePositionValueDiff: function(value, tooltipSize, data) {
	        return value + data.areaPosition + tooltipSize - data.chartSize;
	    },

	    /**
	     * Adjust backward position value.
	     * @param {number} value position value
	     * @param {{start: number, end: number}} range range
	     * @param {number} tooltipSize tooltip size (width or height)
	     * @param {object} data data
	     *      @param {number} data.chartSize chart size (width or height)
	     *      @param {number} data.areaPosition tooltip area position (left or top)
	     *      @param {number} data.basePosition basePosition
	     * @returns {number} position value
	     * @private
	     */
	    _adjustBackwardPositionValue: function(value, range, tooltipSize, data) {
	        var changedValue;

	        if (value < -data.areaPosition) {
	            changedValue = this._calculateMainPositionValue(tooltipSize, range, {
	                direction: chartConst.TOOLTIP_DIRECTION_FORWARD,
	                basePosition: data.basePosition
	            });
	            if (this._makePositionValueDiff(changedValue, tooltipSize, data) > 0) {
	                value = -data.areaPosition;
	            } else {
	                value = changedValue;
	            }
	        }

	        return value;
	    },

	    /**
	     * Adjust forward position value.
	     * @param {number} value position value
	     * @param {{start: number, end: number}} range range
	     * @param {number} tooltipSize tooltip size (width or height)
	     * @param {object} data data
	     *      @param {number} data.chartSize chart size (width or height)
	     *      @param {number} data.areaPosition tooltip area position (left or top)
	     *      @param {number} data.basePosition basePosition
	     * @returns {number} position value
	     * @private
	     */
	    _adjustForwardPositionValue: function(value, range, tooltipSize, data) {
	        var diff = this._makePositionValueDiff(value, tooltipSize, data),
	            changedValue;

	        if (diff > 0) {
	            changedValue = this._calculateMainPositionValue(tooltipSize, range, {
	                direction: chartConst.TOOLTIP_DIRECTION_BACKWARD,
	                basePosition: data.basePosition
	            });
	            if (changedValue < -data.areaPosition) {
	                value -= diff;
	            } else {
	                value = changedValue;
	            }
	        }

	        return value;
	    },

	    /**
	     * Adjust main position value
	     * @param {number} value position value
	     * @param {{start: number, end: number}} range range
	     * @param {number} tooltipSize tooltip size (width or height)
	     * @param {object} data data
	     *      @param {number} data.chartSize chart size (width or height)
	     *      @param {number} data.areaPosition tooltip area position (left or top)
	     * @returns {number} position value
	     * @private
	     */
	    _adjustMainPositionValue: function(value, range, tooltipSize, data) {
	        if (data.direction === chartConst.TOOLTIP_DIRECTION_BACKWARD) {
	            value = this._adjustBackwardPositionValue(value, range, tooltipSize, data);
	        } else if (data.direction === chartConst.TOOLTIP_DIRECTION_FORWARD) {
	            value = this._adjustForwardPositionValue(value, range, tooltipSize, data);
	        } else {
	            value = Math.max(value, -data.areaPosition);
	            value = Math.min(value, data.chartSize - data.areaPosition - tooltipSize);
	        }

	        return value;
	    },

	    /**
	     * Adjust sub position value.
	     * @param {number} value position value
	     * @param {number} tooltipSize tooltip size (width or height)
	     * @param {object} data data
	     *      @param {number} data.chartSize chart size (width or height)
	     *      @param {number} data.areaPosition tooltip area position (left or top)
	     *      @param {number} data.basePosition basePosition
	     * @returns {number} position value
	     * @private
	     */
	    _adjustSubPositionValue: function(value, tooltipSize, data) {
	        if (data.direction === chartConst.TOOLTIP_DIRECTION_FORWARD) {
	            value = Math.min(value, data.chartSize - data.areaPosition - tooltipSize);
	        } else {
	            value = Math.max(value, -data.areaPosition);
	        }

	        return value;
	    },

	    /**
	     * Make caching key.
	     * @param {{start: number, end: number}} range range
	     * @returns {string} key
	     * @private
	     */
	    _makeCachingKey: function(range) {
	        return range.start + '-' + range.end;
	    },

	    /**
	     * Add position option.
	     * @param {number} position position
	     * @param {string} positionType position type (left or top)
	     * @returns {number} position
	     * @private
	     */
	    _addPositionOptionValue: function(position, positionType) {
	        return position + this.positionOption[positionType];
	    },

	    /**
	     * Make main position value.
	     * @param {{width: number, height: number}} tooltipDimension tooltip dimension
	     * @param {{start: number, end: number}} range tooltip sector range
	     * @param {{
	     *      positionType: string, sizeType: string, direction: (string),
	     *      areaPosition: number, areaSize: number, chartSize: number,
	     *      basePosition: (number)
	     * }} main main data
	     * @returns {number} position value
	     * @private
	     */
	    _makeMainPositionValue: function(tooltipDimension, range, main) {
	        var value;

	        value = this._calculateMainPositionValue(tooltipDimension[main.sizeType], range, main);
	        value = this._addPositionOptionValue(value, main.positionType);
	        value = this._adjustMainPositionValue(value, range, tooltipDimension[main.sizeType], main);

	        return value;
	    },

	    /**
	     * Make sub position value.
	     * @param {{width: number, height: number}} tooltipDimension tooltip dimension
	     * @param {{
	     *      positionType: string, sizeType: string, direction: (string),
	     *      areaPosition: number, areaSize: number, chartSize: number,
	     *      basePosition: (number)
	     * }} sub sub data
	     * @returns {number} position value
	     * @private
	     */
	    _makeSubPositionValue: function(tooltipDimension, sub) {
	        var value;

	        value = this._calculateSubPositionValue(tooltipDimension[sub.sizeType], sub);
	        value = this._addPositionOptionValue(value, sub.positionType);
	        value = this._adjustSubPositionValue(value, tooltipDimension[sub.sizeType], sub);

	        return value;
	    },

	    /**
	     * Calculate group tooltip position.
	     * @param {{width: number, height: number}} tooltipDimension tooltip dimension
	     * @param {{start: number, end: number}} range tooltip sector range
	     * @returns {{left: number, top: number}} group tooltip position
	     */
	    calculatePosition: function(tooltipDimension, range) {
	        var key = this._makeCachingKey(range),
	            main = this.mainData,
	            sub = this.subData,
	            position = this.positions[key];

	        if (!position) {
	            position = {};
	            position[main.positionType] = this._makeMainPositionValue(tooltipDimension, range, main);
	            position[sub.positionType] = this._makeSubPositionValue(tooltipDimension, sub);
	            this.positions[key] = position;
	        }

	        return position;
	    },

	    /**
	     * Update tooltip options for position calculation.
	     * @param {{align: ?string, position: {left: number, top: number}}} options tooltip options
	     */
	    updateOptions: function(options) {
	        this.options = options;
	        this._setData(this.chartDimension, this.areaBound, this.isVertical, options);
	    },

	    /**
	     * Update tooltip bound for position calculation.
	     * @param {{
	     *      dimension: {width: number, height: number},
	     *      position: {left: number, top: number}
	     * }} bound tooltip area bound
	     */
	    updateBound: function(bound) {
	        this.areaBound = bound;
	        this._setData(this.chartDimension, bound, this.isVertical, this.options);
	    }
	});

	module.exports = GroupTooltipPositionModel;


/***/ }),
/* 68 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileoverview Tooltip component for map chart.
	 * @author NHN Ent.
	 *         FE Development Lab <dl_javascript@nhnent.com>
	 */

	'use strict';

	var chartConst = __webpack_require__(8);
	var TooltipBase = __webpack_require__(62);
	var singleTooltipMixer = __webpack_require__(63);
	var tooltipTemplate = __webpack_require__(64);
	var snippet = __webpack_require__(6);

	/**
	 * @classdesc MapChartTooltip component.
	 * @class MapChartTooltip
	 * @private
	 */
	var MapChartTooltip = snippet.defineClass(TooltipBase, /** @lends MapChartTooltip.prototype */ {
	    /**
	     * Map chart tooltip component.
	     * @constructs MapChartTooltip
	     * @private
	     * @override
	     */
	    init: function(params) {
	        /**
	         * Map model
	         * @type {MapChartMapModel}
	         */
	        this.mapModel = params.mapModel;

	        /**
	         * Color spectrum
	         * @type {ColorSpectrum}
	         */
	        this.colorSpectrum = params.colorSpectrum;

	        TooltipBase.apply(this, arguments);
	    },

	    /**
	     * Make tooltip html.
	     * @param {{name: string, value: number}} datum tooltip datum
	     * @returns {string} tooltip html
	     * @private
	     */
	    _makeTooltipHtml: function(datum) {
	        return tooltipTemplate.tplMapChartDefault(datum);
	    },

	    /**
	     * Make single tooltip html.
	     * @param {string} chartType chart type
	     * @param {{groupIndex: number, index: number}} indexes indexes
	     * @returns {string} tooltip html
	     * @private
	     */
	    _makeSingleTooltipHtml: function(chartType, indexes) {
	        var datum = this.mapModel.getDatum(indexes.index),
	            suffix = this.options.suffix ? ' ' + this.options.suffix : '';

	        return this.templateFunc({
	            name: datum.name || datum.code,
	            value: datum.label,
	            suffix: suffix,
	            cssText: 'background-color: ' + this.colorSpectrum.getColor(datum.ratio)
	        });
	    },

	    /**
	     * Make parameters for show tooltip user event.
	     * @param {{groupIndex: number, index: number}} indexes indexes
	     * @param {object} additionParams addition parameters
	     * @returns {{chartType: string, legend: string, legendIndex: number, index: number}} parameters for show tooltip
	     * @private
	     */
	    _makeShowTooltipParams: function(indexes, additionParams) {
	        var datum = this.mapModel.getDatum(indexes.index),
	            params;

	        params = snippet.extend({
	            chartType: this.chartType,
	            code: datum.code,
	            name: datum.name,
	            value: datum.label,
	            index: indexes.index
	        }, additionParams);

	        return params;
	    },

	    /**
	     * Set default align option of tooltip.
	     * @private
	     * @override
	     */
	    _setDefaultTooltipPositionOption: function() {
	        if (!this.options.align) {
	            this.options.align = chartConst.TOOLTIP_DEFAULT_ALIGN_OPTION;
	        }
	    }
	});

	singleTooltipMixer.mixin(MapChartTooltip);

	function mapChartTooltipFactory(params) {
	    return new MapChartTooltip(params);
	}

	mapChartTooltipFactory.componentType = 'tooltip';

	module.exports = mapChartTooltipFactory;


/***/ }),
/* 69 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileoverview MapChartEventDetector is mouse event detector for map chart.
	 * @author NHN Ent.
	 *         FE Development Lab <dl_javascript@nhnent.com>
	 */

	'use strict';

	var MouseEventDetectorBase = __webpack_require__(70);
	var chartConst = __webpack_require__(8);
	var eventListener = __webpack_require__(55);
	var dom = __webpack_require__(9);
	var renderUtil = __webpack_require__(7);
	var snippet = __webpack_require__(6);

	var MapChartEventDetector = snippet.defineClass(MouseEventDetectorBase, /** @lends MapChartEventDetector.prototype */ {
	    /**
	     * MapChartEventDetector is mouse event detector for map chart.
	     * @param {object} params parameters
	     *      @param {string} params.chartType - chart type
	     * @constructs MapChartEventDetector
	     * @private
	     * @extends MouseEventDetectorBase
	     */
	    init: function(params) {
	        /**
	         * chart type
	         * {string}
	         *
	         */
	        this.chartType = params.chartType;

	        /**
	         * event bus for transmitting message
	         * @type {object}
	         */
	        this.eventBus = params.eventBus;

	        /**
	         * whether mouse down or not
	         * @type {boolean}
	         */
	        this.isDown = false;

	        this.drawingType = chartConst.COMPONENT_TYPE_DOM;
	    },

	    /**
	     * Render event handle layer area
	     * @param {HTMLElement} mouseEventDetectorContainer mouse event detector container element
	     * @private
	     */
	    _renderMouseEventDetectorArea: function(mouseEventDetectorContainer) {
	        renderUtil.renderDimension(mouseEventDetectorContainer, this.layout.dimension);
	        renderUtil.renderPosition(mouseEventDetectorContainer, this.layout.position);
	    },

	    /**
	     * On click.
	     * @private
	     * @override
	     */
	    _onClick: function() {},

	    /**
	     * Call 'dragStartMapSeries' event, when occur mouse down event.
	     * @param {mouseevent} e mouse event
	     * @private
	     * @override
	     */
	    _onMousedown: function(e) {
	        this.isDown = true;
	        this.eventBus.fire('dragStartMapSeries', {
	            left: e.clientX,
	            top: e.clientY
	        });
	    },

	    /**
	     * Drag end.
	     * @private
	     */
	    _dragEnd: function() {
	        this.isDrag = false;
	        dom.removeClass(this.mouseEventDetectorContainer, 'drag');
	        this.eventBus.fire('dragEndMapSeries');
	    },

	    /**
	     * If drag, call dragEnd function.
	     * But if not drag, occur click event.
	     * @param {mouseevent} e mouse event
	     * @private
	     * @override
	     */
	    _onMouseup: function(e) {
	        this.isDown = false;

	        if (this.isDrag) {
	            this._dragEnd();
	        } else {
	            this._onMouseEvent('click', e);
	        }

	        this.isMove = false;
	    },

	    /**
	     * If mouse downed, set drag mode.
	     * But if not downed, set move mode.
	     * @param {mouseevent} e mouse event
	     * @private
	     * @override
	     */
	    _onMousemove: function(e) {
	        if (this.isDown) {
	            if (!this.isDrag) {
	                dom.addClass(this.mouseEventDetectorContainer, 'drag');
	            }
	            this.isDrag = true;
	            this.eventBus.fire('dragMapSeries', {
	                left: e.clientX,
	                top: e.clientY
	            });
	        } else {
	            this.isMove = true;
	            this._onMouseEvent('move', e);
	        }
	    },

	    /**
	     * If drag mode, call dragEnd.
	     * But if not drag mode, occur move event.
	     * @private
	     * @override
	     */
	    _onMouseout: function(e) {
	        if (this.isDrag) {
	            this._dragEnd();
	        } else {
	            this._onMouseEvent('move', e);
	        }
	        this.isDown = false;
	    },

	    /**
	     * On mouse wheel.
	     * @param {mouseevent} e mouse event
	     * @returns {?boolean}
	     * @private
	     */
	    _onMousewheel: function(e) {
	        var wheelDelta = e.wheelDelta || e.detail * chartConst.FF_WHEELDELTA_ADJUSTING_VALUE;

	        this.eventBus.fire('wheel', wheelDelta, {
	            left: e.clientX,
	            top: e.clientY
	        });

	        if (e.preventDefault) {
	            e.preventDefault();
	        }

	        return false;
	    },

	    /**
	     * Attach event.
	     * @param {HTMLElement} target target element
	     * @override
	     */
	    attachEvent: function(target) {
	        MouseEventDetectorBase.prototype.attachEvent.call(this, target);

	        if (snippet.browser.firefox) {
	            eventListener.on(target, 'DOMMouseScroll', this._onMousewheel, this);
	        } else {
	            eventListener.on(target, 'mousewheel', this._onMousewheel, this);
	        }
	    }
	});

	function mapChartEventDetectorFactory(params) {
	    return new MapChartEventDetector(params);
	}

	mapChartEventDetectorFactory.componentType = 'mouseEventDetector';

	module.exports = mapChartEventDetectorFactory;


/***/ }),
/* 70 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileoverview MouseEventDetectorBase is base class for mouse event detector components.
	 * @author NHN Ent.
	 *         FE Development Lab <dl_javascript@nhnent.com>
	 */

	'use strict';

	var TickBaseCoordinateModel = __webpack_require__(71);
	var BoundsBaseCoordinateModel = __webpack_require__(72);
	var chartConst = __webpack_require__(8);
	var eventListener = __webpack_require__(55);
	var predicate = __webpack_require__(21);
	var dom = __webpack_require__(9);
	var renderUtil = __webpack_require__(7);
	var snippet = __webpack_require__(6);

	var MouseEventDetectorBase = snippet.defineClass(/** @lends MouseEventDetectorBase.prototype */ {
	    /**
	     * MouseEventDetectorBase is base class for mouse event detector components.
	     * @constructs MouseEventDetectorBase
	     * @private
	     * @param {object} params parameters
	     *      @param {string} params.chartType - chart type
	     *      @param {Array.<string>} params.chartTypes - chart types
	     *      @param {boolean} params.isVertical - whether vertical or not
	     *      @param {DataProcessor} params.dataProcessor - DataProcessor instance
	     *      @param {boolean} params.allowSelect - whether has allowSelect option or not
	     */
	    init: function(params) {
	        var isLineTypeChart;

	        /**
	         * type of chart
	         * @type {string}
	         */
	        this.chartType = params.chartType;

	        /**
	         * chartTypes is available in combo chart
	         * @type {Array.<string>}
	         */
	        this.chartTypes = params.chartTypes;

	        /**
	         * whether vertical or not
	         * @type {boolean}
	         */
	        this.isVertical = params.isVertical;

	        /**
	         * data processor
	         * @type {DataProcessor}
	         */
	        this.dataProcessor = params.dataProcessor;

	        /**
	         * whether allow select series or not
	         * @type {boolean}
	         */
	        this.allowSelect = params.allowSelect;

	        /**
	         * event bus for transmitting message
	         * @type {object}
	         */
	        this.eventBus = params.eventBus;

	        /**
	         * layout bounds information for this components
	         * @type {null|{dimension:{width:number, height:number}, position:{left:number, top:number}}}
	         */
	        this.layout = null;

	        /**
	         * selected series item.
	         * @type {null | object}
	         */
	        this.selectedData = null;

	        isLineTypeChart = predicate.isLineTypeChart(this.chartType, this.chartTypes);
	        /**
	         * expand size
	         * @type {number}
	         */
	        this.expandSize = isLineTypeChart ? chartConst.SERIES_EXPAND_SIZE : 0;

	        /**
	         * series item bounds data
	         * @type {Array}
	         */
	        this.seriesItemBoundsData = [];

	        /**
	         * series count
	         * @type {number}
	         */
	        this.seriesCount = predicate.isComboChart(this.chartType) ? 2 : 1;

	        this._attachToEventBus();

	        this.drawingType = chartConst.COMPONENT_TYPE_DOM;
	    },

	    /**
	     * Attach to event bus.
	     * @private
	     */
	    _attachToEventBus: function() {
	        this.eventBus.on('receiveSeriesData', this.onReceiveSeriesData, this);
	    },

	    /**
	     * Get bound for rendering.
	     * @returns {{
	     *      dimension: {width: number, height: number},
	     *      position: {left: number, top: number}
	     * }}
	     * @private
	     */
	    _getRenderingBound: function() {
	        var renderingBound = renderUtil.expandBound(this.layout);

	        return renderingBound;
	    },

	    /**
	     * Render event handle layer area.
	     * @param {HTMLElement} mouseEventDetectorContainer - container element for mouse event detector
	     * @param {number} tickCount - tick count
	     * @private
	     */
	    _renderMouseEventDetectorArea: function(mouseEventDetectorContainer, tickCount) {
	        var dimension = this.layout.dimension;
	        var renderingBound, tbcm;

	        this.dimension = dimension;
	        tbcm = new TickBaseCoordinateModel(this.layout, tickCount, this.chartType, this.isVertical, this.chartTypes);
	        this.tickBaseCoordinateModel = tbcm;
	        renderingBound = this._getRenderingBound();
	        renderUtil.renderDimension(mouseEventDetectorContainer, renderingBound.dimension);
	        renderUtil.renderPosition(mouseEventDetectorContainer, renderingBound.position);
	    },

	    /**
	     * Set data for rendering.
	     * @param {{
	     *      layout: {
	     *          dimension: {width: number, height: number},
	     *          position: {left: number, top: number}
	     *      }
	     * }} data - bounds data
	     * @private
	     */
	    _setDataForRendering: function(data) {
	        this.layout = data.layout;
	    },

	    /**
	     * Pick tick count.
	     * @param {{xAxis: object, yAxis: object}} axisDataMap - axis data map
	     * @returns {number}
	     * @private
	     */
	    _pickTickCount: function(axisDataMap) {
	        var tickCount;

	        if (this.isVertical) {
	            tickCount = axisDataMap.xAxis.eventTickCount || axisDataMap.xAxis.tickCount;
	        } else {
	            tickCount = axisDataMap.yAxis.tickCount;
	        }

	        return tickCount;
	    },

	    /**
	     * Render for mouseEventDetector component.
	     * @param {object} data - bounds data and tick count
	     * @returns {HTMLElement} container for mouse event detector
	     */
	    render: function(data) {
	        var container = data.paper;
	        var tickCount;
	        this.positionMap = data.positionMap;

	        dom.addClass(container, 'tui-chart-series-custom-event-area');
	        container.style.backgroundColor = 'aliceblue';

	        if (data.axisDataMap.xAxis) {
	            tickCount = this._pickTickCount(data.axisDataMap);
	        }

	        this._setDataForRendering(data);
	        this._renderMouseEventDetectorArea(container, tickCount);
	        this.attachEvent(container);
	        this.mouseEventDetectorContainer = container;

	        this.transparentChild = this._createTransparentChild();
	        dom.append(container, this.transparentChild);

	        return container;
	    },

	    /**
	     * Create a transparent element
	     * @param {string} height - value of css heigth property
	     * @returns {HTMLElement} transparent element
	     * @private
	     */
	    _createTransparentChild: function() {
	        var child = document.createElement('DIV');
	        var style = child.style;

	        style.backgroundColor = '#fff';
	        style.height = renderUtil.getStyle(this.mouseEventDetectorContainer).height;
	        renderUtil.setOpacity(child, 0);

	        return child;
	    },

	    /**
	     * Calculate layer position by client position.
	     * @param {number} clientX - clientX
	     * @param {number} [clientY] - clientY
	     * @param {boolean} [checkLimit] - whether check limit or not
	     * @returns {{x: number, y: ?number}}
	     * @private
	     */
	    _calculateLayerPosition: function(clientX, clientY, checkLimit) {
	        var bound = this.mouseEventDetectorContainer.getBoundingClientRect();
	        var seriesPosition = this.positionMap.series;
	        var expandSize = this.expandSize;
	        var layerPosition = {};
	        var maxLeft, minLeft;

	        checkLimit = snippet.isUndefined(checkLimit) ? true : checkLimit;

	        if (checkLimit) {
	            maxLeft = bound.right - expandSize;
	            minLeft = bound.left + expandSize;
	            clientX = Math.min(Math.max(clientX, minLeft), maxLeft);
	        }

	        layerPosition.x = clientX - bound.left + seriesPosition.left - chartConst.CHART_PADDING;

	        if (!snippet.isUndefined(clientY)) {
	            layerPosition.y = clientY - bound.top + seriesPosition.top - chartConst.CHART_PADDING;
	        }

	        return layerPosition;
	    },

	    /**
	     * Create BoundsBaseCoordinateModel from seriesItemBoundsData for mouse event detector.
	     * @param {{chartType: string, data: object}} seriesItemBoundsDatum - series item bounds datum
	     */
	    onReceiveSeriesData: function(seriesItemBoundsDatum) {
	        var seriesItemBoundsData = this.seriesItemBoundsData;
	        var seriesCount = this.seriesCount;

	        if (seriesItemBoundsData.length === seriesCount) {
	            seriesItemBoundsData = [];
	        }

	        seriesItemBoundsData.push(seriesItemBoundsDatum);

	        if (seriesItemBoundsData.length === seriesCount) {
	            this.boundsBaseCoordinateModel = new BoundsBaseCoordinateModel(seriesItemBoundsData);
	        }
	    },

	    /**
	     * Rerender mouse event detector component.
	     * @param {object} data - bounds data and tick count
	     */
	    rerender: function(data) {
	        var tickCount;

	        if (data.axisDataMap.xAxis) {
	            tickCount = this._pickTickCount(data.axisDataMap);
	        }

	        this.selectedData = null;
	        this._setDataForRendering(data);
	        this._renderMouseEventDetectorArea(this.mouseEventDetectorContainer, tickCount);

	        this.transparentChild.style.height = renderUtil.getStyle(this.mouseEventDetectorContainer).height;
	    },

	    /**
	     * Rerender, when resizing chart.
	     * @param {object} data - bounds data and tick count
	     */
	    resize: function(data) {
	        this.containerBound = null;
	        this.rerender(data);
	    },

	    /**
	     * Whether changed select data or not.
	     * @param {object} prev - previous data
	     * @param {object} cur - current data
	     * @returns {boolean}
	     * @private
	     */
	    _isChangedSelectData: function(prev, cur) {
	        return !prev || !cur || prev.chartType !== cur.chartType ||
	            prev.indexes.groupIndex !== cur.indexes.groupIndex || prev.indexes.index !== cur.indexes.index;
	    },

	    /**
	     * Find coordinate data from boundsCoordinateModel.
	     * @param {{x: number, y: number}} layerPosition - layer position
	     * @returns {object}
	     * @private
	     */
	    _findDataFromBoundsCoordinateModel: function(layerPosition) {
	        var layerX = layerPosition.x;
	        var layerY = layerPosition.y;
	        var groupIndex;

	        if (predicate.isTreemapChart(this.chartType)) {
	            groupIndex = 0;
	        } else {
	            groupIndex = this.tickBaseCoordinateModel.findIndex(this.isVertical ? layerX : layerY);
	        }

	        return this.boundsBaseCoordinateModel.findData(groupIndex, layerX, layerY);
	    },

	    /**
	     * Find data.
	     * @param {number} clientX - clientX
	     * @param {number} clientY - clientY
	     * @returns {object}
	     * @private
	     */
	    _findData: function(clientX, clientY) {
	        var layerPosition = this._calculateLayerPosition(clientX, clientY);

	        return this._findDataFromBoundsCoordinateModel(layerPosition);
	    },

	    /**
	     * Show tooltip
	     * @private
	     * @abstract
	     */
	    _showTooltip: function() {},

	    /**
	     * hide tooltip
	     * @private
	     * @abstract
	     */
	    _hideTooltip: function() {},

	    /**
	     * When mouse event happens,
	     * hide MouseEventDetector container so that detect event of series elements
	     * and send mouse position data to series component
	     * @param {string} eventType - mouse event detector type
	     * @param {MouseEvent} e - mouse event
	     * @private
	     */
	    _onMouseEvent: function(eventType, e) {
	        dom.addClass(this.mouseEventDetectorContainer, 'hide');
	        this.eventBus.fire(eventType + 'Series', {
	            left: e.clientX,
	            top: e.clientY
	        });
	        dom.removeClass(this.mouseEventDetectorContainer, 'hide');
	    },

	    /**
	     * Unselect selected data.
	     * @private
	     */
	    _unselectSelectedData: function() {
	        this.eventBus.fire('unselectSeries', this.selectedData);
	        this.selectedData = null;
	    },

	    /**
	     * Call 'selectSeries' event, when changed found position data.
	     * And call 'unselectSeries' event, when not changed found position data.
	     * @param {MouseEvent} e - mouse event
	     * @private
	     */
	    _onClick: function(e) {
	        var foundData = this._findData(e.clientX, e.clientY);

	        if (!this._isChangedSelectData(this.selectedData, foundData)) {
	            this._unselectSelectedData();
	        } else if (foundData) {
	            if (this.selectedData) {
	                this._unselectSelectedData();
	            }

	            this.eventBus.fire('selectSeries', foundData);
	            if (this.allowSelect) {
	                this.selectedData = foundData;
	            }
	        }
	    },

	    /**
	     * On mouse down
	     * @private
	     * @abstract
	     */
	    _onMousedown: function() {},

	    /**
	     * On mouse up
	     * @private
	     * @abstract
	     */
	    _onMouseup: function() {},

	    /**
	     * Store client position, when occur mouse move event.
	     * @param {MouseEvent} e - mouse event
	     * @abstract
	     * @private
	     */
	    _onMousemove: function() {},

	    /**
	     * Abstract mouseout handler
	     * @abstract
	     * @private
	     */
	    _onMouseout: function() {},

	    /**
	     * Attach mouse event.
	     * @param {HTMLElement} target - target element
	     */
	    attachEvent: function(target) {
	        eventListener.on(target, {
	            click: this._onClick,
	            mousedown: this._onMousedown,
	            mouseup: this._onMouseup,
	            mousemove: this._onMousemove,
	            mouseout: this._onMouseout
	        }, this);
	    },

	    /**
	     * find data by indexes
	     * @abstract
	     */
	    findDataByIndexes: function() {},

	    /**
	     * Set prevClientPosition by MouseEvent
	     * @param {?MouseEvent} event - mouse event
	     */
	    _setPrevClientPosition: function(event) {
	        if (!event) {
	            this.prevClientPosition = null;
	        } else {
	            this.prevClientPosition = {
	                x: event.clientX,
	                y: event.clientY
	            };
	        }
	    }
	});

	snippet.CustomEvents.mixin(MouseEventDetectorBase);

	module.exports = MouseEventDetectorBase;


/***/ }),
/* 71 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileoverview TickBaseDataModel is tick base data model.
	 * @author NHN Ent.
	 *         FE Development Lab <dl_javascript@nhnent.com>
	 */

	'use strict';

	var predicate = __webpack_require__(21);
	var arrayUtil = __webpack_require__(10);
	var snippet = __webpack_require__(6);

	var TickBaseDataModel = snippet.defineClass(/** @lends TickBaseDataModel.prototype */ {
	    /**
	     * TickBaseDataModel is tick base data model.
	     * @param {{
	     *     dimension: {
	     *         width: number,
	     *         height: number
	     *     }, position: {
	     *         left: number,
	     *         top: number
	     *     }
	     * }} layout layout
	     * @param {number} tickCount tick count
	     * @param {string} chartType chart type
	     * @param {boolean} isVertical whether vertical or not
	     * @param {Array.<string>} [chartTypes] - chart types of combo chart
	     * @constructs TickBaseDataModel
	     * @private
	     */
	    init: function(layout, tickCount, chartType, isVertical, chartTypes) {
	        /**
	         * whether line type or not
	         * @type {boolean}
	         */
	        this.isLineType = predicate.isLineTypeChart(chartType, chartTypes);

	        this.data = this._makeData(layout, tickCount, isVertical);
	    },

	    /**
	     * Get each tick ranges
	     * @param {number} tickCount tick count
	     * @param {number} firstPosition first position value
	     * @param {number} tickInterval tick distance
	     * @returns {Array.<object>}
	     * @private
	     */
	    _getRanges: function(tickCount, firstPosition, tickInterval) {
	        var prev = firstPosition;
	        var halfInterval = tickInterval / 2;

	        return snippet.map(snippet.range(0, tickCount), function() {
	            var limit = {
	                min: prev - halfInterval,
	                max: prev + halfInterval
	            };

	            prev += tickInterval;

	            return limit;
	        });
	    },

	    /**
	     * Make tick base data about line type chart.
	     * @param {number} width width
	     * @param {number} tickCount tick count
	     * @param {number} firstPosition firstPosition of group
	     * @returns {Array} tick base data
	     * @private
	     */
	    _makeLineTypeData: function(width, tickCount, firstPosition) {
	        var tickInterval = (width + 1) / (tickCount - 1);
	        var ranges = this._getRanges(tickCount, (firstPosition || 0), tickInterval);

	        ranges[tickCount - 1].max -= 1;

	        return ranges;
	    },

	    /**
	     * Make tick base data about non line type chart.
	     * @param {number} size width or height
	     * @param {number} tickCount tick count
	     * @param {number} firstPosition firstPosition of group
	     * @returns {Array} tick base data
	     * @private
	     */
	    _makeNormalData: function(size, tickCount, firstPosition) {
	        var len = tickCount - 1;
	        var tickInterval = size / len;
	        var prev = (firstPosition || 0);

	        return snippet.map(snippet.range(0, len), function() {
	            var max = arrayUtil.min([size + prev, tickInterval + prev]);
	            var limit = {
	                min: prev,
	                max: max
	            };
	            prev = max;

	            return limit;
	        });
	    },

	    /**
	     * Make tick base data for mouse event detector.
	     * @param {{dimension: object, position: object}} layout layout
	     * @param {number} tickCount tick count
	     * @param {boolean} isVertical whether vertical or not
	     * @returns {Array.<object>} tick base data
	     * @private
	     */
	    _makeData: function(layout, tickCount, isVertical) {
	        var sizeType = isVertical ? 'width' : 'height';
	        var positionType = isVertical ? 'left' : 'top';
	        var data;

	        if (this.isLineType) {
	            data = this._makeLineTypeData(layout.dimension[sizeType], tickCount, layout.position[positionType]);
	        } else {
	            data = this._makeNormalData(layout.dimension[sizeType], tickCount, layout.position[positionType]);
	        }

	        return data;
	    },

	    /**
	     * Find index.
	     * @param {number} pointValue mouse position point value
	     * @returns {number} group index
	     */
	    findIndex: function(pointValue) {
	        var foundIndex = -1;

	        snippet.forEachArray(this.data, function(limit, index) {
	            if (limit.min < pointValue && limit.max >= pointValue) {
	                foundIndex = index;

	                return false;
	            }

	            return true;
	        });

	        return foundIndex;
	    },

	    /**
	     * Get last index.
	     * @returns {number}
	     */
	    getLastIndex: function() {
	        return this.data.length - 1;
	    },

	    /**
	     * Make range of tooltip position.
	     * @param {number} index index
	     * @param {number} positionValue positionValue
	     * @returns {{start: number, end: number}} range type value
	     * @private
	     */
	    makeRange: function(index, positionValue) {
	        var limit = this.data[index],
	            range, center;
	        if (this.isLineType) {
	            center = parseInt(limit.max - ((limit.max - limit.min) / 2), 10);
	            range = {
	                start: center,
	                end: center
	            };
	        } else {
	            range = {
	                start: limit.min - (positionValue || 0),
	                end: limit.max - (positionValue || 0)
	            };
	        }

	        return range;
	    }
	});

	module.exports = TickBaseDataModel;


/***/ }),
/* 72 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileoverview BoundsBaseCoordinateModel is data model for mouse event detector of bounds type.
	 * @author NHN Ent.
	 *         FE Development Lab <dl_javascript@nhnent.com>
	 */

	'use strict';

	/**
	 * position
	 * @typedef {{left: number, top: number}} position
	 * @private
	 */

	/**
	 * bound
	 * @typedef {{
	 *      dimension: {width: number, height: number},
	 *      position: position
	 *}} bound
	 * @private
	 */

	/**
	 * group bound
	 *  @typedef {Array.<Array.<bound>>} groupBound
	 * @private
	 */

	/**
	 * group position
	 *  @typedef {Array.<Array.<position>>} groupPosition
	 * @private
	 */

	/**
	 * series info
	 * @typedef {{
	 *      chartType: {string},
	 *      data: {
	 *          groupBounds: ?groupBound,
	 *          groupValues: ?Array.<Array.<number>>,
	 *          groupPositions: ?groupPosition
	 *      }
	 *}} seriesInfo
	 * @private
	 */

	var chartConst = __webpack_require__(8);
	var predicate = __webpack_require__(21);
	var arrayUtil = __webpack_require__(10);
	var snippet = __webpack_require__(6);

	var BoundsBaseCoordinateModel = snippet.defineClass(/** @lends BoundsBaseCoordinateModel.prototype */ {
	    /**
	     * BoundsBaseCoordinateModel is data mode for mouse event detector of bounds type.
	     * @constructs BoundsBaseCoordinateModel
	     * @private
	     * @param {Array} seriesItemBoundsData - series item bounds data
	     */
	    init: function(seriesItemBoundsData) {
	        this.data = this._makeData(seriesItemBoundsData);
	    },

	    /**
	     * @param {string} chartType - chart type
	     * @param {object} indexes - index of SeriesDataModel
	     * @param {boolean} allowNegativeTooltip - whether allow negative tooltip or not
	     * @param {object} bound - coordinate data for rendering graph
	     * @returns {object} - `sendData`: tooltip contents, `bound`: for detecting hovered or not
	     * @private
	     */
	    _makeTooltipData: function(chartType, indexes, allowNegativeTooltip, bound) {
	        return {
	            sendData: {
	                chartType: chartType,
	                indexes: indexes,
	                allowNegativeTooltip: allowNegativeTooltip,
	                bound: bound
	            },
	            bound: {
	                left: bound.left,
	                top: bound.top,
	                right: bound.left + bound.width,
	                bottom: bound.top + bound.height
	            }
	        };
	    },

	    /**
	     * Make position data for rect type graph
	     * @param {groupBound} groupBounds group bounds
	     * @param {string} chartType chart type
	     * @returns {Array}
	     * @private
	     */
	    _makeRectTypePositionData: function(groupBounds, chartType) {
	        var allowNegativeTooltip = !predicate.isBoxTypeChart(chartType);

	        return snippet.map(groupBounds, function(bounds, groupIndex) {
	            return snippet.map(bounds, function(bound, index) {
	                if (!bound) {
	                    return null;
	                }

	                return this._makeTooltipData(
	                    chartType,
	                    {
	                        groupIndex: groupIndex,
	                        index: index
	                    },
	                    allowNegativeTooltip,
	                    bound.end || bound
	                );
	            }, this);
	        }, this);
	    },

	    /**
	     * Make position data for rect type graph
	     * @param {groupBound} groupBounds group bounds
	     * @param {string} chartType chart type
	     * @param {object} resultData resultData
	     * @private
	     */
	    _makeOutliersPositionDataForBoxplot: function(groupBounds, chartType, resultData) {
	        var allowNegativeTooltip = !predicate.isBoxTypeChart(chartType);
	        var _groupBounds = [].concat(groupBounds);

	        snippet.forEach(_groupBounds, function(bounds, groupIndex) {
	            snippet.forEach(bounds, function(bound, index) {
	                var outliers;

	                if (bound.outliers && bound.outliers.length) {
	                    outliers = snippet.map(bound.outliers, function(outlier, outlierIndex) {
	                        var outlierBound = {
	                            top: outlier.top - 3,
	                            left: outlier.left - 3,
	                            width: 6,
	                            height: 6
	                        };

	                        return this._makeTooltipData(
	                            chartType,
	                            {
	                                groupIndex: groupIndex,
	                                index: index,
	                                outlierIndex: outlierIndex
	                            },
	                            allowNegativeTooltip,
	                            outlierBound
	                        );
	                    }, this);

	                    resultData[groupIndex] = resultData[groupIndex].concat(outliers);
	                }
	            }, this);
	        }, this);
	    },

	    /**
	     * Make position data for dot type graph
	     * @param {groupPositions} groupPositions group positions
	     * @param {string} chartType chart type
	     * @returns {Array.<Array.<object>>}
	     * @private
	     */
	    _makeDotTypePositionData: function(groupPositions, chartType) {
	        if (!groupPositions) {
	            return [];
	        }

	        return snippet.map(arrayUtil.pivot(groupPositions), function(positions, groupIndex) {
	            return snippet.map(positions, function(position, index) {
	                if (!position) {
	                    return null;
	                }

	                return {
	                    sendData: {
	                        chartType: chartType,
	                        indexes: {
	                            groupIndex: groupIndex,
	                            index: index
	                        },
	                        bound: position
	                    },
	                    bound: {
	                        left: position.left - chartConst.DOT_RADIUS,
	                        top: position.top - chartConst.DOT_RADIUS,
	                        right: position.left + chartConst.DOT_RADIUS,
	                        bottom: position.top + chartConst.DOT_RADIUS
	                    }
	                };
	            });
	        });
	    },

	    /**
	     * Join data.
	     * @param {Array.<Array.<Array.<object>>>} dataGroupSet data group set
	     * @returns {Array.<Array.<object>>} joined data
	     * @private
	     */
	    _joinData: function(dataGroupSet) {
	        var results = [];
	        snippet.forEachArray(dataGroupSet, function(dataGroup) {
	            snippet.forEachArray(dataGroup, function(data, index) {
	                var additionalIndex;

	                if (!results[index]) {
	                    results[index] = data;
	                } else {
	                    additionalIndex = results[index].length;
	                    snippet.forEachArray(data, function(datum) {
	                        if (datum) {
	                            datum.sendData.indexes.legendIndex = datum.sendData.indexes.index + additionalIndex;
	                        }
	                    });
	                    results[index] = results[index].concat(data);
	                }
	            });
	        });

	        return results;
	    },

	    /**
	     * Make data for detecting mouse event.
	     * @param {Array} seriesItemBoundsData - series item bounds data
	     * @returns {Array.<Array.<object>>} coordinate data
	     * @private
	     */
	    _makeData: function(seriesItemBoundsData) {
	        var data = snippet.map(seriesItemBoundsData, function(info) {
	            var result;

	            if (predicate.isLineTypeChart(info.chartType)) {
	                result = this._makeDotTypePositionData(info.data.groupPositions, info.chartType);
	            } else {
	                result = this._makeRectTypePositionData(info.data.groupBounds, info.chartType);
	            }

	            if (predicate.isBoxplotChart(info.chartType)) {
	                this._makeOutliersPositionDataForBoxplot(info.data.groupBounds, info.chartType, result);
	            }

	            return result;
	        }, this);

	        return this._joinData(data);
	    },

	    /**
	     * Find candidates.
	     * @param {{bound: {left: number, top: number, right: number, bottom: number}}} data data
	     * @param {number} layerX layerX
	     * @param {number} layerY layerY
	     * @returns {Array.<{sendData: object}>} candidates
	     * @private
	     */
	    _findCandidates: function(data, layerX, layerY) {
	        return snippet.filter(data, function(datum) {
	            var bound = datum && datum.bound,
	                included = false,
	                includedX, includedY;

	            if (bound) {
	                includedX = bound.left <= layerX && bound.right >= layerX;
	                includedY = bound.top <= layerY && bound.bottom >= layerY;
	                included = includedX && includedY;
	            }

	            return included;
	        });
	    },

	    /**
	     * Find data.
	     * @param {number} groupIndex group index
	     * @param {number} layerX mouse position x
	     * @param {number} layerY mouse position y
	     * @returns {object} tooltip data
	     */
	    findData: function(groupIndex, layerX, layerY) {
	        var min = 10000;
	        var result = null;
	        var candidates;

	        if (groupIndex > -1 && this.data[groupIndex]) {
	            // extract data containing layerX, layerY
	            candidates = this._findCandidates(this.data[groupIndex], layerX, layerY);

	            // find nearest data to top position among extracted data
	            snippet.forEachArray(candidates, function(data) {
	                var diff = Math.abs(layerY - data.bound.top);

	                if (min > diff) {
	                    min = diff;
	                    result = data.sendData;
	                }
	            });
	        }

	        return result;
	    },

	    /**
	     * Find data by indexes.
	     * @param {{index: {number}, seriesIndex: {number}}} indexes - indexe of series item displaying a tooltip
	     * @param {number} [indexes.outlierIndex] - index of outlier of boxplot series, it only exists in boxplot chart
	     * @returns {object} tooltip data
	     */
	    findDataByIndexes: function(indexes) {
	        var foundData = this.data[indexes.index][indexes.seriesIndex].sendData;

	        if (snippet.isNumber(indexes.outlierIndex)) {
	            return this._findOutlierDataByIndexes(indexes);
	        }

	        return foundData;
	    },

	    /**
	     * find plot chart data by indexes
	     * @param {{
	     *  index: {number},
	     *  seriesIndex: {number},
	     *  outlierIndex: {number}
	     * }} indexes - indexe of series item displaying a tooltip
	     * @returns {object} - outlier tooltip data
	     */
	    _findOutlierDataByIndexes: function(indexes) {
	        var foundData = null;

	        snippet.forEachArray(this.data[indexes.index], function(datum) {
	            var datumIndexes = datum.sendData.indexes;
	            var found = (datumIndexes.index === indexes.seriesIndex) &&
	                (datumIndexes.outlierIndex === indexes.outlierIndex);

	            if (found) {
	                foundData = datum.sendData;
	            }

	            return !found;
	        });

	        return foundData;
	    }
	});

	module.exports = BoundsBaseCoordinateModel;


/***/ }),
/* 73 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @author NHN Ent.
	 *         FE Development Lab <dl_javascript@nhnent.com>
	 */

	'use strict';

	var predicate = __webpack_require__(21);
	var areaTypeEventDetectorFactory = __webpack_require__(74);
	var simpleEventDetectorFactory = __webpack_require__(77);
	var groupTypeEventDetectorFactory = __webpack_require__(78);
	var boundsTypeEventDetectorFactory = __webpack_require__(79);
	var mapChartEventDetectorFactory = __webpack_require__(69);

	/**
	 * Factory for MouseEventDetector
	 * @param {object} params parameter
	 * @returns {object}
	 * @ignore
	 */
	function mouseEventDetectorFactory(params) {
	    var chartType = params.chartOptions.chartType;
	    var seriesTypes = params.seriesTypes;
	    var zoomable = params.chartOptions.series.zoomable;
	    var seriesAllowSelect = params.chartOptions.series.allowSelect;
	    var factory;

	    if (params.chartOptions.tooltip.grouped) {
	        factory = groupTypeEventDetectorFactory;
	    } else if (predicate.isMapChart(chartType)) {
	        factory = mapChartEventDetectorFactory;
	    } else if (predicate.isBarTypeChart(chartType)
	        || predicate.isBoxplotChart(chartType)
	        || predicate.isHeatmapChart(chartType)
	        || predicate.isTreemapChart(chartType)
	        || predicate.isBulletChart(chartType)
	    ) {
	        factory = boundsTypeEventDetectorFactory;
	    } else if (predicate.isCoordinateTypeChart(chartType)
	        || predicate.isPieChart(chartType)
	        || predicate.isPieDonutComboChart(chartType, seriesTypes)
	    ) {
	        factory = simpleEventDetectorFactory;
	    } else {
	        factory = areaTypeEventDetectorFactory;
	    }

	    params.chartType = chartType;
	    // @todo replace chartType, chartTypes to seriesTypes, problem of the whole component
	    params.chartTypes = seriesTypes;
	    params.zoomable = zoomable;
	    params.allowSelect = seriesAllowSelect;

	    return factory(params);
	}

	mouseEventDetectorFactory.componentType = 'mouseEventDetector';

	module.exports = mouseEventDetectorFactory;


/***/ }),
/* 74 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileoverview AreaTypeEventDetector is mouse event detector for line type chart.
	 * @author NHN Ent.
	 *         FE Development Lab <dl_javascript@nhnent.com>
	 */

	'use strict';

	var MouseEventDetectorBase = __webpack_require__(70);
	var zoomMixer = __webpack_require__(75);
	var AreaTypeDataModel = __webpack_require__(76);
	var snippet = __webpack_require__(6);

	var AREA_DETECT_DISTANCE_THRESHHOLD = 50;

	var AreaTypeEventDetector = snippet.defineClass(MouseEventDetectorBase, /** @lends AreaTypeEventDetector.prototype */ {
	    /**
	     * AreaTypeEventDetector is mouse event detector for line type chart.
	     * @param {object} params parameters
	     * @constructs AreaTypeEventDetector
	     * @private
	     * @extends MouseEventDetectorBase
	     */
	    init: function(params) {
	        MouseEventDetectorBase.call(this, params);

	        /**
	         * previous found data
	         * @type {null | object}
	         */
	        this.prevFoundData = null;

	        /**
	         * previous client position of mouse event (clientX, clientY)
	         * @type {null | object}
	         */
	        this.prevClientPosition = null;

	        /**
	         * whether zoomable or not
	         * @type {boolean}
	         */
	        this.zoomable = params.zoomable;

	        if (this.zoomable) {
	            snippet.extend(this, zoomMixer);
	            this._initForZoom(params.zoomable);
	        }
	    },

	    /**
	     * Animate for adding data.
	     */
	    animateForAddingData: function() {
	        var foundData, isMoving;

	        if (!this.prevClientPosition) {
	            return;
	        }

	        foundData = this._findData(this.prevClientPosition.x, this.prevClientPosition.y);

	        if (foundData) {
	            isMoving = this.prevFoundData && (this.prevFoundData.indexes.groupIndex === foundData.indexes.groupIndex);
	            this._showTooltip(foundData, isMoving);
	        }

	        this.prevFoundData = foundData;
	    },

	    /**
	     * Create areaTypeDataModel from seriesItemBoundsData for mouse event detector.
	     * @param {Array.<object>} seriesItemBoundsDatum - series item bounds datum
	     * @override
	     */
	    onReceiveSeriesData: function(seriesItemBoundsDatum) {
	        var seriesItemBoundsData = this.seriesItemBoundsData;
	        var seriesCount = this.seriesCount;

	        if (seriesItemBoundsData.length === seriesCount) {
	            seriesItemBoundsData = [];
	        }

	        seriesItemBoundsData.push(seriesItemBoundsDatum);

	        if (seriesItemBoundsData.length === seriesCount) {
	            this.dataModel = new AreaTypeDataModel(seriesItemBoundsData);
	        }

	        if (this.zoomable) {
	            this._showTooltipAfterZoom();
	        }
	    },

	    /**
	     * Find data by client position.
	     * @param {number} clientX - clientX
	     * @param {number} clientY - clientY
	     * @returns {object}
	     * @private
	     * @override
	     */
	    _findData: function(clientX, clientY) {
	        var layerPosition = this._calculateLayerPosition(clientX, clientY);
	        var selectLegendIndex = this.dataProcessor.selectLegendIndex;

	        return this.dataModel.findData(layerPosition, AREA_DETECT_DISTANCE_THRESHHOLD, selectLegendIndex);
	    },

	    /**
	     * Find data by client position for zoomable
	     * @param {number} clientX - clientX
	     * @param {number} clientY - clientY
	     * @returns {object}
	     * @private
	     */
	    _findDataForZoomable: function(clientX, clientY) {
	        var layerPosition = this._calculateLayerPosition(clientX, clientY);

	        return this.dataModel.findData(layerPosition);
	    },

	    /**
	     * Get first model data.
	     * @param {number} index - index
	     * @returns {object}
	     * @private
	     */
	    _getFirstData: function(index) {
	        return this.dataModel.getFirstData(index);
	    },

	    /**
	     * Get last model data.
	     * @param {number} index - index
	     * @returns {object}
	     * @private
	     */
	    _getLastData: function(index) {
	        return this.dataModel.getLastData(index);
	    },

	    /**
	     * Show tooltip.
	     * @param {object} foundData - model data
	     * @private
	     */
	    _showTooltip: function(foundData) {
	        this.eventBus.fire('showTooltip', foundData);
	        this.prevFoundData = foundData;
	    },

	    /**
	     * Hide tooltip.
	     * @param {{silent: {boolean}}} [options] - options for hiding tooltip
	     * @private
	     */
	    _hideTooltip: function(options) {
	        this.eventBus.fire('hideTooltip', this.prevFoundData, options);
	        this.prevFoundData = null;
	    },

	    /**
	     * On mousemove.
	     * @param {MouseEvent} e - mouse event
	     * @private
	     * @override
	     */
	    _onMousemove: function(e) {
	        var dragMoseupResult, foundData;

	        this._setPrevClientPosition(e);

	        foundData = this._findData(e.clientX, e.clientY);

	        if (this.zoomable) {
	            dragMoseupResult = this._isAfterDragMouseup();
	        }

	        if (dragMoseupResult || !this._isChangedSelectData(this.prevFoundData, foundData)) {
	            return;
	        }

	        if (foundData) {
	            this._showTooltip(foundData);
	        } else if (this.prevFoundData) {
	            this._hideTooltip();
	        }

	        this.prevFoundData = foundData;
	    },

	    /**
	     * On mouseout.
	     * @private
	     * @override
	     */
	    _onMouseout: function() {
	        if (this.prevFoundData) {
	            this._hideTooltip();
	        }

	        this.prevClientPosition = null;
	        this.prevFoundData = null;
	    },

	    /**
	     * find data by indexes
	     * @param {{index: {number}, seriesIndex: {number}}} indexes - indexe of series item displaying a tooltip
	     * @returns {object} - series item data
	     */
	    findDataByIndexes: function(indexes) {
	        return this.dataModel.findDataByIndexes(indexes);
	    },

	    /**
	     * Set prevClientPosition by MouseEvent
	     * @param {?MouseEvent} event - mouse event
	     */
	    _setPrevClientPosition: function(event) {
	        if (!event) {
	            this.prevClientPosition = null;
	        } else {
	            this.prevClientPosition = {
	                x: event.clientX,
	                y: event.clientY
	            };
	        }
	    }
	});

	function areaTypeEventDetectorFactory(params) {
	    return new AreaTypeEventDetector(params);
	}

	areaTypeEventDetectorFactory.componentType = 'mouseEventDetector';

	module.exports = areaTypeEventDetectorFactory;


/***/ }),
/* 75 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileoverview  Mixer for zoom event of area type mouse event detector.
	 * @author NHN Ent.
	 *         FE Development Lab <dl_javascript@nhnent.com>
	 */

	'use strict';

	var MouseEventDetectorBase = __webpack_require__(70);
	var chartConst = __webpack_require__(8);
	var dom = __webpack_require__(9);
	var renderUtil = __webpack_require__(7);
	var eventListener = __webpack_require__(55);
	var snippet = __webpack_require__(6);

	/**
	 * Mixer for zoom event of area type mouse event detector.
	 * @mixin
	 * @private */
	var zoomMixer = {
	    /**
	     * Initialize for zoom.
	     * @param {boolean} zoomable - whether zoomable or not
	     * @private
	     */
	    _initForZoom: function(zoomable) {
	        /**
	         * whether zoomable or not
	         * @type {boolean}
	         */
	        this.zoomable = zoomable;

	        /**
	         * drag start index.
	         * @type {null | object}
	         */
	        this.dragStartIndexes = null;

	        /**
	         * start client position(clientX, clientY) of mouse event.
	         * @type {null | {x: number, y: number}}
	         */
	        this.startClientPosition = null;

	        /**
	         * start layerX position
	         * @type {null | number}
	         */
	        this.startLayerX = null;

	        /**
	         * drag selection element
	         * @type {null | HTMLElement}
	         */
	        this.dragSelectionElement = null;

	        /**
	         * container bound
	         * @type {null | {left: number, right: number, top: number}}
	         */
	        this.containerBound = null;

	        /**
	         * whether show tooltip after zoom or not.
	         * @type {boolean}
	         */
	        this.isShowTooltipAfterZoom = false;

	        /**
	         * whether after mouseup or not.
	         * @type {boolean}
	         */
	        this.afterMouseup = false;

	        /**
	         * previouse distance of range
	         * @type {null | number}
	         */
	        this.prevDistanceOfRange = null;

	        /**
	         * whether reverse move or not.
	         * @type {null | number}
	         */
	        this.reverseMove = null;

	        /**
	         * reset zoom button element.
	         * @type {null | HTMLElement}
	         */
	        this.resetZoomBtn = null;
	    },

	    /**
	     * Show tooltip after zoom.
	     * @private
	     */
	    _showTooltipAfterZoom: function() {
	        var isShowTooltipAfterZoom = this.isShowTooltipAfterZoom;
	        var lastDataBeforeZoom;

	        this.isShowTooltipAfterZoom = false;

	        if (!isShowTooltipAfterZoom || !this.dragStartIndexes) {
	            return;
	        }

	        if (this.reverseMove) {
	            lastDataBeforeZoom = this._getFirstData(this.dragStartIndexes.index);
	        } else {
	            lastDataBeforeZoom = this._getLastData(this.dragEndIndexes.index);
	        }

	        if (lastDataBeforeZoom) {
	            this._showTooltip(lastDataBeforeZoom);
	        }
	    },

	    /**
	     * Update dimension for drag selection element.
	     * @param {HTMLElement} selectionElement - drag selection element
	     * @private
	     */
	    _updateDimensionForDragSelection: function(selectionElement) {
	        renderUtil.renderDimension(selectionElement, {
	            height: this.layout.dimension.height
	        });
	    },

	    /**
	     * Render drag selection.
	     * @returns {HTMLElement}
	     * @private
	     */
	    _renderDragSelection: function() {
	        var selectionElement = dom.create('DIV', 'tui-chart-drag-selection');

	        this._updateDimensionForDragSelection(selectionElement);

	        return selectionElement;
	    },

	    /**
	     * Render.
	     * @param {object} data - data for rendering
	     * @returns {HTMLElement}
	     * @override
	     */
	    render: function(data) {
	        var container = MouseEventDetectorBase.prototype.render.call(this, data);
	        var selectionElement = this._renderDragSelection();

	        dom.append(container, selectionElement);
	        this.dragSelectionElement = selectionElement;

	        return container;
	    },

	    /**
	     * Resize.
	     * @param {{tickCount: number}} data - data for resizing
	     * @override
	     */
	    resize: function(data) {
	        this.containerBound = null;
	        MouseEventDetectorBase.prototype.resize.call(this, data);
	        this._updateDimensionForDragSelection(this.dragSelectionElement);
	    },

	    /**
	     * On click
	     * @private
	     * @override
	     */
	    _onClick: function() {},

	    /**
	     * Whether after drag mouseup or not.
	     * @returns {boolean}
	     * @private
	     */
	    _isAfterDragMouseup: function() {
	        var afterMouseup = this.afterMouseup;

	        if (afterMouseup) {
	            this.afterMouseup = false;
	        }

	        return afterMouseup;
	    },

	    /**
	     * Bind drag event for zoom.
	     * @param {HTMLElement} target - target element
	     * @private
	     */
	    _bindDragEvent: function(target) {
	        if (target.setCapture) {
	            target.setCapture();
	        }

	        eventListener.on(document, 'mousemove', this._onDrag, this);
	        eventListener.off(this.mouseEventDetectorContainer, 'mouseup', this._onMouseup, this);
	        eventListener.on(document, 'mouseup', this._onMouseupAfterDrag, this);
	    },

	    /**
	     * Unbind drag event for zoom.
	     * @private
	     */
	    _unbindDragEvent: function() {
	        if (this.downTarget && this.downTarget.releaseCapture) {
	            this.downTarget.releaseCapture();
	        }

	        eventListener.off(document, 'mousemove', this._onDrag, this);
	        eventListener.off(document, 'mouseup', this._onMouseupAfterDrag, this);
	        eventListener.on(this.mouseEventDetectorContainer, 'mouseup', this._onMouseup, this);
	    },

	    /**
	     * On mouse down.
	     * @param {MouseEvent} e - mouse event
	     * @private
	     * @override
	     */
	    _onMousedown: function(e) {
	        var target;

	        if (!this.zoomable) {
	            return;
	        }

	        target = e.target || e.srcElement;

	        this.startClientPosition = {
	            x: e.clientX,
	            y: e.clientY
	        };
	        this.startLayerX = this._calculateLayerPosition(e.clientX).x;
	        this.downTarget = target;

	        this._bindDragEvent(target);
	    },

	    /**
	     * Show drag selection.
	     * @param {number} clientX - clientX
	     * @private
	     */
	    _showDragSelection: function(clientX) {
	        var layerX = this._calculateLayerPosition(clientX).x;
	        var left = Math.min(layerX, this.startLayerX) - this.layout.position.left;
	        var width = Math.abs(layerX - this.startLayerX);
	        var element = this.dragSelectionElement;

	        element.style.left = left + 'px';
	        element.style.width = width + 'px';

	        dom.addClass(element, 'show');
	    },

	    /**
	     * Hide drag selection.
	     * @private
	     */
	    _hideDragSelection: function() {
	        dom.removeClass(this.dragSelectionElement, 'show');
	    },

	    /**
	     * On mouse drag.
	     * @param {MouseEvent} e - mouse event
	     * @private
	     */
	    _onDrag: function(e) {
	        var clientPos = this.startClientPosition;
	        var target = e.target || e.srcElement;
	        var dataForZoomable;

	        if (clientPos) {
	            dataForZoomable = this._findDataForZoomable(clientPos.x, clientPos.y);

	            if (!dom.hasClass(target, chartConst.CLASS_NAME_RESET_ZOOM_BTN)) {
	                if (snippet.isNull(this.dragStartIndexes)) {
	                    this.dragStartIndexes = dataForZoomable ? dataForZoomable.indexes : {};
	                } else {
	                    this._showDragSelection(e.clientX);
	                }
	            }
	        }
	    },

	    /**
	     * Adjust index range for ensure three indexes.
	     * @param {number} startIndex - start index
	     * @param {number} endIndex - end index
	     * @returns {Array.<number>}
	     * @private
	     */
	    _adjustIndexRange: function(startIndex, endIndex) {
	        var indexRange = [startIndex, endIndex].sort(function(a, b) {
	            return a - b;
	        });
	        var distanceOfRange = indexRange[1] - indexRange[0];

	        if (distanceOfRange === 0) {
	            if (indexRange[0] === 0) {
	                indexRange[1] += 2;
	            } else {
	                indexRange[0] -= 1;
	                indexRange[1] += 1;
	            }
	        } else if (distanceOfRange === 1) {
	            if (indexRange[0] === 0) {
	                indexRange[1] += 1;
	            } else {
	                indexRange[0] -= 1;
	            }
	        }

	        return indexRange;
	    },

	    /**
	     * Fire zoom mouse event detector.
	     * @param {number} startIndex - start index
	     * @param {number} endIndex - end index
	     * @private
	     */
	    _fireZoom: function(startIndex, endIndex) {
	        var reverseMove = startIndex > endIndex;
	        var indexRange = this._adjustIndexRange(startIndex, endIndex);
	        var distanceOfRange = indexRange[1] - indexRange[0];

	        if (this.prevDistanceOfRange === distanceOfRange) {
	            return;
	        }

	        this.prevDistanceOfRange = distanceOfRange;
	        this.reverseMove = reverseMove;
	        this.eventBus.fire('zoom', indexRange);
	    },

	    /**
	     * Set flag about whether show tooltip after zoom or not.
	     * @param {number} clientX - clientX of mouse event
	     * @param {number} clientY - clientY of mouse event
	     * @private
	     */
	    _setIsShowTooltipAfterZoomFlag: function(clientX, clientY) {
	        var layerX = this._calculateLayerPosition(clientX, clientY, false).x;
	        var limitLayerX = this._calculateLayerPosition(clientX, clientY).x;

	        this.isShowTooltipAfterZoom = (layerX === limitLayerX);
	    },

	    /**
	     * On mouseup after drag event.
	     * @param {MouseEvent} e - mouse event
	     * @private
	     */
	    _onMouseupAfterDrag: function(e) {
	        // @TODO: define zoomable policy, when there is no data
	        // To find dragEndIndex for zoom, data should not be null.
	        // To avoid zooming avoid zooming with no data, check dragStartIndexes first
	        // Becault chart without data returns invalid dragStartIndexes
	        var foundedDragEndData = this._findDataForZoomable(e.clientX, e.clientY);
	        var target;

	        this._unbindDragEvent();

	        if (snippet.isNull(this.dragStartIndexes)) {
	            target = e.target || e.srcElement;
	            if (dom.hasClass(target, chartConst.CLASS_NAME_RESET_ZOOM_BTN)) {
	                this._hideTooltip();
	                this.prevDistanceOfRange = null;
	                this.eventBus.fire('resetZoom');
	            } else {
	                MouseEventDetectorBase.prototype._onClick.call(this, e);
	            }
	        } else if (this.dragStartIndexes && foundedDragEndData) {
	            this.dragEndIndexes = foundedDragEndData.indexes;
	            this._setIsShowTooltipAfterZoomFlag(e.clientX, e.clientY);
	            this._hideDragSelection();
	            this._fireZoom(this.dragStartIndexes.groupIndex, this.dragEndIndexes.groupIndex);
	        } else {
	            this._setIsShowTooltipAfterZoomFlag(e.clientX, e.clientY);
	            this._hideDragSelection();
	        }

	        this.startClientPosition = null;
	        this.dragStartIndexes = null;
	        this.startLayerX = null;
	        this.afterMouseup = true;
	    },

	    /**
	     * Render reset zoom button element.
	     * @returns {HTMLElement}
	     * @private
	     */
	    _renderResetZoomBtn: function() {
	        var resetBtn = dom.create('DIV', chartConst.CLASS_NAME_RESET_ZOOM_BTN);

	        return resetBtn;
	    },

	    /**
	     * Zoom.
	     * @param {object} data - data for rendering
	     */
	    zoom: function(data) {
	        this.prevFoundData = null;
	        this.rerender(data);
	        this._updateDimensionForDragSelection(this.dragSelectionElement);

	        if (!this.resetZoomBtn) {
	            this.resetZoomBtn = this._renderResetZoomBtn();
	            dom.append(this.mouseEventDetectorContainer, this.resetZoomBtn);
	        } else if (data.isResetZoom) {
	            this.mouseEventDetectorContainer.removeChild(this.resetZoomBtn);
	            this.resetZoomBtn = null;
	        }
	    }
	};

	module.exports = zoomMixer;


/***/ }),
/* 76 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileoverview AreaTypeDataModel is data model for mouse event detector of area type.
	 * @author NHN Ent.
	 *         FE Development Lab <dl_javascript@nhnent.com>
	 */

	'use strict';

	var predicate = __webpack_require__(21);
	var arrayUtil = __webpack_require__(10);
	var snippet = __webpack_require__(6);

	var concat = Array.prototype.concat;

	var AreaTypeDataModel = snippet.defineClass(/** @lends AreaTypeDataModel.prototype */ {
	    /**
	     * AreaTypeDataModel is data mode for mouse event detector of area type.
	     * @constructs AreaTypeDataModel
	     * @private
	     * @param {Array} seriesItemBoundsData - series item bounds data
	     */
	    init: function(seriesItemBoundsData) {
	        this.data = this._makeData(seriesItemBoundsData);

	        /**
	         * last group index
	         * @type {number}
	         */
	        this.lastGroupIndex = 0;
	    },

	    /**
	     * Make data for detecting mouse event.
	     * @param {Array} seriesItemBoundsData - series item bounds data
	     * @returns {Array}
	     * @private
	     */
	    _makeData: function(seriesItemBoundsData) {
	        var lastGroupIndex = 0;
	        var seriesItemBoundsLength = seriesItemBoundsData.length;
	        var data = snippet.map(seriesItemBoundsData, function(seriesDatum, seriesIndex) {
	            var groupPositions = seriesDatum.data.groupPositions || seriesDatum.data.groupBounds;
	            var chartType = seriesDatum.chartType;

	            if (predicate.isLineTypeChart(chartType) || predicate.isRadialChart(chartType)) {
	                groupPositions = arrayUtil.pivot(groupPositions);
	            }

	            lastGroupIndex = Math.max(groupPositions.length - 1, lastGroupIndex);

	            return snippet.map(groupPositions, function(positions, groupIndex) {
	                return snippet.map(positions, function(position, index) {
	                    var datum = null;

	                    if (position) {
	                        datum = {
	                            chartType: chartType,
	                            indexes: {
	                                groupIndex: groupIndex,
	                                index: index
	                            },
	                            bound: position
	                        };
	                    }

	                    // Add legendIndex to datum on making multi series chart data, especially for LineScatterComboChart.
	                    if (seriesItemBoundsLength > 1) {
	                        datum.indexes.legendIndex = seriesIndex;
	                    }

	                    return datum;
	                });
	            });
	        });

	        data = concat.apply([], data);
	        this.lastGroupIndex = lastGroupIndex;

	        return snippet.filter(concat.apply([], data), function(datum) {
	            return !!datum;
	        });
	    },

	    /**
	     * Find Data by layer position.
	     * @param {{x: number, y: number}} layerPosition - layer position
	     * @param {number} [distanceLimit] distance limitation to find data
	     * @param {number} selectLegendIndex select legend sereis index
	     * @returns {object}
	     */
	    findData: function(layerPosition, distanceLimit, selectLegendIndex) {
	        var min = 100000;
	        var findFoundMap = {};
	        var findFound;

	        distanceLimit = distanceLimit || Number.MAX_VALUE;

	        snippet.forEach(this.data, function(datum) {
	            var xDiff = layerPosition.x - datum.bound.left;
	            var yDiff = layerPosition.y - datum.bound.top;
	            var distance = Math.sqrt(Math.pow(xDiff, 2) + Math.pow(yDiff, 2));

	            if (distance < distanceLimit && distance <= min) {
	                min = distance;
	                findFound = datum;
	                findFoundMap[datum.indexes.index] = datum;
	            }
	        });

	        if (!snippet.isNull(selectLegendIndex) && findFoundMap[selectLegendIndex]) {
	            findFound = findFoundMap[selectLegendIndex];
	        }

	        return findFound;
	    },

	    /**
	     * Find data by indexes.
	     * @param {{index: {number}, seriesIndex: {number}}} indexes - indexe of series item displaying a tooltip
	     * @returns {object}
	     */
	    findDataByIndexes: function(indexes) {
	        var foundData = null;

	        snippet.forEachArray(this.data, function(datum) {
	            if (datum.indexes.groupIndex === indexes.index && datum.indexes.index === indexes.seriesIndex) {
	                foundData = datum;
	            }

	            return !foundData;
	        });

	        return foundData;
	    },

	    /**
	     * Get first data.
	     * @param {number} index - index
	     * @returns {object}
	     */
	    getFirstData: function(index) {
	        var indexes = {
	            index: 0,
	            seriesIndex: index
	        };

	        return this.findDataByIndexes(indexes);
	    },

	    /**
	     * Get last data.
	     * @param {number} index - index
	     * @returns {object}
	     */
	    getLastData: function(index) {
	        var indexes = {
	            index: this.lastGroupIndex,
	            seriesIndex: index
	        };

	        return this.findDataByIndexes(indexes);
	    }
	});

	module.exports = AreaTypeDataModel;


/***/ }),
/* 77 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileoverview SimpleEventDetector is event handle layer for simply sending clientX, clientY.
	 * @author NHN Ent.
	 *         FE Development Lab <dl_javascript@nhnent.com>
	 */

	'use strict';

	var chartConst = __webpack_require__(8);
	var MouseEventDetectorBase = __webpack_require__(70);
	var renderUtil = __webpack_require__(7);
	var snippet = __webpack_require__(6);

	var SimpleEventDetector = snippet.defineClass(MouseEventDetectorBase, /** @lends SimpleEventDetector.prototype */ {
	    /**
	     * SimpleEventDetector is event handle layer for simply sending clientX, clientY.
	     * @constructs SimpleEventDetector
	     * @private
	     * @param {object} params parameters
	     *      @param {string} params.chartType - chart type
	     * @extends MouseEventDetectorBase
	     */
	    init: function(params) {
	        /**
	         * chart type
	         * @type {string}
	         */
	        this.chartType = params.chartType;

	        this.drawingType = chartConst.COMPONENT_TYPE_DOM;

	        /**
	         * event bus for transmitting message
	         * @type {object}
	         */
	        this.eventBus = params.eventBus;
	    },

	    /**
	     * Render mouse event detector area
	     * @param {HTMLElement} mouseEventDetectorContainer - container element for mouse event detector
	     * @private
	     */
	    _renderMouseEventDetectorArea: function(mouseEventDetectorContainer) {
	        renderUtil.renderDimension(mouseEventDetectorContainer, this.layout.dimension);
	        renderUtil.renderPosition(mouseEventDetectorContainer, this.layout.position);
	    },

	    /**
	     * Initialize data of mouse event detector
	     * @override
	     */
	    onReceiveSeriesData: function() {},

	    /**
	     * On click.
	     * @param {MouseEvent} e - mouse event
	     * @private
	     * @override
	     */
	    _onClick: function(e) {
	        this._onMouseEvent('click', e);
	    },

	    /**
	     * On mouse move.
	     * @param {MouseEvent} e - mouse event
	     * @private
	     * @override
	     */
	    _onMousemove: function(e) {
	        this._onMouseEvent('move', e);
	    },

	    /**
	     * On mouse out.
	     * @param {MouseEvent} e - mouse event
	     * @private
	     * @override
	     */
	    _onMouseout: function(e) {
	        this._onMouseEvent('move', e);
	    }
	});

	function simpleTypeEventDetectorFactory(params) {
	    return new SimpleEventDetector(params);
	}

	simpleTypeEventDetectorFactory.componentType = 'mouseEventDetector';

	module.exports = simpleTypeEventDetectorFactory;


/***/ }),
/* 78 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileoverview GroupTypeEventDetector is mouse event detector for grouped tooltip.
	 * @author NHN Ent.
	 *         FE Development Lab <dl_javascript@nhnent.com>
	 */

	'use strict';

	var chartConst = __webpack_require__(8);
	var EventDetectorBase = __webpack_require__(70);
	var zoomMixer = __webpack_require__(75);
	var snippet = __webpack_require__(6);

	var GroupTypeEventDetector = snippet.defineClass(EventDetectorBase, /** @lends GroupTypeEventDetector.prototype */ {
	    /**
	     * GroupTypeEventDetector is mouse event detector for grouped tooltip.
	     * @param {object} params parameters
	     * @constructs GroupTypeEventDetector
	     * @private
	     * @extends EventDetectorBase
	     */
	    init: function(params) {
	        EventDetectorBase.call(this, params);

	        /**
	         * previous index of group data
	         * @type {null}
	         */
	        this.prevIndex = null;

	        /**
	         * whether zoomable or not
	         * @type {boolean}
	         */
	        this.zoomable = params.zoomable;

	        /**
	         * type of size
	         * @type {string}
	         */
	        this.sizeType = this.isVertical ? 'height' : 'width';

	        if (this.zoomable) {
	            snippet.extend(this, zoomMixer);
	            this._initForZoom(params.zoomable);
	        }
	    },

	    /**
	     * Initialize data of mouse event detector
	     * @param {Array.<object>} seriesInfos series infos
	     * @override
	     */
	    initMouseEventDetectorData: function(seriesInfos) {
	        EventDetectorBase.prototype.initMouseEventDetectorData.call(this, seriesInfos);

	        if (this.zoomable) {
	            this._showTooltipAfterZoom();
	        }
	    },

	    /**
	     * Find data by client position.
	     * @param {number} clientX - clientX
	     * @param {number} clientY - clientY
	     * @returns {object}
	     * @private
	     */
	    _findGroupData: function(clientX, clientY) {
	        var layerPosition = this._calculateLayerPosition(clientX, clientY, true);
	        var pointValue;

	        if (this.isVertical) {
	            pointValue = layerPosition.x;
	        } else {
	            pointValue = layerPosition.y;
	        }

	        return {
	            indexes: {
	                groupIndex: this.tickBaseCoordinateModel.findIndex(pointValue)
	            }
	        };
	    },

	    /**
	     * Find data by client position for zoomable
	     * @param {number} clientX - clientX
	     * @param {number} clientY - clientY
	     * @returns {object}
	     * @private
	     */
	    _findDataForZoomable: function(clientX, clientY) {
	        return this._findGroupData(clientX, clientY);
	    },

	    /**
	     * Get first data.
	     * @returns {{indexes: {groupIndex: number}}} - data
	     * @private
	     */
	    _getFirstData: function() {
	        return {
	            indexes: {
	                groupIndex: 0
	            }
	        };
	    },

	    /**
	     * Get last data.
	     * @returns {{indexes: {groupIndex: number}}} - data
	     * @private
	     */
	    _getLastData: function() {
	        return {
	            indexes: {
	                groupIndex: this.tickBaseCoordinateModel.getLastIndex()
	            }
	        };
	    },

	    /**
	     * Whether outer position or not.
	     * @param {number} layerX layerX
	     * @param {number} layerY layerY
	     * @returns {boolean} result boolean
	     * @private
	     */
	    _isOuterPosition: function(layerX, layerY) {
	        var dimension = this.dimension;
	        var width = dimension.width;
	        var height = dimension.height;
	        var position = this.layout.position;
	        var top = position.top;
	        var left = position.left;

	        return layerX < left || layerX > left + width ||
	            layerY < top || layerY > top + height;
	    },

	    /**
	     * Show tooltip.
	     * @param {{indexes: {groupIndex: number}, silent: boolean}} foundData - data
	     * @param {boolean} [isMoving] - whether moving or not
	     * @private
	     */
	    _showTooltip: function(foundData, isMoving) {
	        var index = foundData.indexes.groupIndex;
	        var positionValue = (this.isVertical ? this.layout.position.left : this.layout.position.top)
	            - chartConst.CHART_PADDING;

	        /**
	         * Can be called with showTooltip function
	         * At this time, the index may be larger than the data size.
	         */
	        if (this.tickBaseCoordinateModel.data.length > index) {
	            this.eventBus.fire('showTooltip', {
	                index: index,
	                range: this.tickBaseCoordinateModel.makeRange(index, positionValue),
	                size: this.dimension[this.sizeType],
	                isVertical: this.isVertical,
	                isMoving: isMoving,
	                silent: foundData.silent
	            });
	            this.prevIndex = index;
	        }
	    },

	    /**
	     * Hide tooltip
	     * @param {{silent: {boolean}}} [options] - options for hiding tooltip
	     * @private
	     */
	    _hideTooltip: function(options) {
	        this.eventBus.fire('hideTooltip', this.prevIndex, options);
	        this.prevIndex = null;
	    },

	    /**
	     * If found position data by client position, show tooltip.
	     * And if not found, call onMouseout function.
	     * @param {MouseEvent} e mouse event object
	     * @private
	     * @override
	     */
	    _onMousemove: function(e) {
	        var foundData, index;

	        if (this.zoomable && this._isAfterDragMouseup()) {
	            return;
	        }

	        foundData = this._findGroupData(e.clientX, e.clientY);

	        index = foundData.indexes.groupIndex;

	        if (index === -1) {
	            this._onMouseout(e);
	        } else if (this.prevIndex !== index) {
	            this._showTooltip(foundData);
	        }
	    },

	    /**
	     * If mouse position gets out mouse event detector area, hide tooltip.
	     * @override
	     */
	    _onMouseout: function(e) {
	        var layerPosition;

	        layerPosition = this._calculateLayerPosition(e.clientX, e.clientY, false);

	        if (this._isOuterPosition(layerPosition.x, layerPosition.y) && !snippet.isNull(this.prevIndex)) {
	            this._hideTooltip();
	        }
	    }
	});

	function groupTypeEventDetectorFactory(params) {
	    return new GroupTypeEventDetector(params);
	}

	groupTypeEventDetectorFactory.componentType = 'mouseEventDetector';

	module.exports = groupTypeEventDetectorFactory;


/***/ }),
/* 79 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileoverview BoundsTypeEventDetector is mouse event detector for bounds type charts
	 *                                                                              like bar, column, heatmap, treemap.
	 * @author NHN Ent.
	 *         FE Development Lab <dl_javascript@nhnent.com>
	 */

	'use strict';

	var EventDetectorBase = __webpack_require__(70);
	var chartConst = __webpack_require__(8);
	var predicate = __webpack_require__(21);
	var dom = __webpack_require__(9);
	var snippet = __webpack_require__(6);

	var BoundsTypeEventDetector = snippet.defineClass(EventDetectorBase, /** @lends BoundsTypeEventDetector.prototype */ {
	    /**
	     * BoundsTypeEventDetector is mouse event detector for bounds type charts like bar, column, heatmap, treemap.
	     * @constructs BoundsTypeEventDetector
	     * @private
	     * @extends EventDetectorBase
	     */
	    init: function() {
	        EventDetectorBase.apply(this, arguments);

	        /**
	         * previous found data
	         * @type {null | object}
	         */
	        this.prevFoundData = null;

	        /**
	         * history array for treemap chart.
	         * @type {array}
	         */
	        this.zoomHistory = [-1];

	        /**
	         * button for zoom history back
	         * @type {null | HTMLElement}
	         */
	        this.historyBackBtn = null;
	    },

	    /**
	     * Attach to event bus.
	     * @private
	     * @override
	     */
	    _attachToEventBus: function() {
	        EventDetectorBase.prototype._attachToEventBus.call(this);

	        this.eventBus.on('afterZoom', this.onAfterZoom, this);
	    },

	    /**
	     * Show tooltip.
	     * @param {object} foundData - model data
	     * @private
	     */
	    _showTooltip: function(foundData) {
	        this.eventBus.fire('showTooltip', foundData);
	        this.prevFoundData = foundData;
	    },

	    /**
	     * Hide tooltip.
	     * @param {{silent: {boolean}}} [options] - options for hiding a tooltip
	     * @private
	     */
	    _hideTooltip: function(options) {
	        this.eventBus.fire('hideTooltip', this.prevFoundData, options);
	        this.prevFoundData = null;
	        this.styleCursor(false);
	    },

	    /**
	     * Style css cursor.
	     * @param {boolean} hasChild - whether has child or not
	     */
	    styleCursor: function(hasChild) {
	        var container = this.mouseEventDetectorContainer;
	        if (hasChild) {
	            container.style.cursor = 'pointer';
	        } else {
	            container.style.cursor = 'default';
	        }
	    },

	    /**
	     * On mousemove.
	     * @param {MouseEvent} e - mouse event
	     * @private
	     * @override
	     */
	    _onMousemove: function(e) {
	        var clientX = e.clientX;
	        var clientY = e.clientY;
	        var layerPosition = this._calculateLayerPosition(clientX, clientY);
	        var foundData = this._findDataFromBoundsCoordinateModel(layerPosition);
	        var seriesItem;

	        if (!this._isChangedSelectData(this.prevFoundData, foundData)) {
	            return;
	        }

	        if (this.prevFoundData) {
	            this._hideTooltip();
	        }

	        this.prevFoundData = foundData;

	        if (!foundData) {
	            return;
	        }

	        if (predicate.isTreemapChart(this.chartType)) {
	            seriesItem = this._getSeriesItemByIndexes(foundData.indexes);
	            this.styleCursor(seriesItem.hasChild);
	        } else if (predicate.isBulletChart(this.chartType)) {
	            foundData.mousePosition = {
	                left: clientX,
	                top: clientY
	            };
	        }
	        this._showTooltip(foundData);
	    },

	    /**
	     * Zoom history back.
	     * @private
	     */
	    _zoomHistoryBack: function() {
	        var index = this.zoomHistory[this.zoomHistory.length - 2];

	        this.zoomHistory.pop();
	        this.eventBus.fire('zoom', index);

	        if (this.zoomHistory.length === 1) {
	            this.mouseEventDetectorContainer.removeChild(this.historyBackBtn);
	            this.historyBackBtn = null;
	        }
	    },

	    /**
	     * Get seriesItem by indexes
	     * @param {{groupIndex: number, index: number}} indexes - indexes
	     * @returns {SeriesItem}
	     * @private
	     */
	    _getSeriesItemByIndexes: function(indexes) {
	        var seriesDataModel = this.dataProcessor.getSeriesDataModel(chartConst.CHART_TYPE_TREEMAP);

	        return seriesDataModel.getSeriesItem(indexes.groupIndex, indexes.index, true);
	    },

	    /**
	     * On mousemove.
	     * @param {MouseEvent} e - mouse event
	     * @private
	     * @override
	     */
	    _onClick: function(e) {
	        var target = e.target || e.srcElement;
	        var layerPosition, foundData, seriesItem;

	        EventDetectorBase.prototype._onClick.call(this, e);

	        if (!predicate.isTreemapChart(this.chartType)) {
	            return;
	        }

	        if (dom.hasClass(target, chartConst.CLASS_NAME_RESET_ZOOM_BTN)) {
	            this._hideTooltip();
	            this._zoomHistoryBack();

	            return;
	        }

	        layerPosition = this._calculateLayerPosition(e.clientX, e.clientY);
	        foundData = this._findDataFromBoundsCoordinateModel(layerPosition);

	        if (foundData) {
	            seriesItem = this._getSeriesItemByIndexes(foundData.indexes);

	            if (!seriesItem.hasChild) {
	                return;
	            }

	            this._hideTooltip();
	            this.eventBus.fire('zoom', foundData.indexes.index);
	        }
	    },

	    /**
	     * On mouseout.
	     * @override
	     */
	    _onMouseout: function(e) {
	        // do not cache getBoundingClientRect() - if not, it will cause error when chart location changed
	        var bound = this.mouseEventDetectorContainer.getBoundingClientRect();
	        var clientX = e.clientX;
	        var clientY = e.clientY;

	        if ((bound.left <= clientX) && (bound.top <= clientY) &&
	            (bound.right >= clientX) && (bound.bottom >= clientY)) {
	            return;
	        }

	        if (this.prevFoundData) {
	            this._hideTooltip();
	        }

	        this.prevFoundData = null;
	    },

	    /**
	     * On after zoom.
	     * @param {number} index - index of target seriesItem
	     */
	    onAfterZoom: function(index) {
	        if (!this.historyBackBtn) {
	            this.historyBackBtn = dom.create('DIV', chartConst.CLASS_NAME_RESET_ZOOM_BTN);
	            dom.append(this.mouseEventDetectorContainer, this.historyBackBtn);
	        }

	        if (this.zoomHistory[this.zoomHistory.length - 1] !== index) {
	            this.zoomHistory.push(index);
	        }
	    },

	    /**
	     * Find data by indexes.
	     * @param {{index: {number}, seriesIndex: {number}}} indexes - indexe of series item displaying a tooltip
	     * @param {number} [indexes.outlierIndex] - index of outlier of boxplot series, it only exists in boxplot chart
	     * @returns {object} - series item data
	     */
	    findDataByIndexes: function(indexes) {
	        return this.boundsBaseCoordinateModel.findDataByIndexes(indexes);
	    }
	});

	function boundsTypeEventDetectorFactory(params) {
	    return new BoundsTypeEventDetector(params);
	}

	boundsTypeEventDetectorFactory.componentType = 'mouseEventDetector';

	module.exports = boundsTypeEventDetectorFactory;


/***/ }),
/* 80 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileoverview Bar chart series component.

	 * @author NHN Ent.
	 *         FE Development Lab <dl_javascript@nhnent.com>
	 */

	'use strict';

	var Series = __webpack_require__(81);
	var BarTypeSeriesBase = __webpack_require__(82);
	var chartConst = __webpack_require__(8);
	var predicate = __webpack_require__(21);
	var snippet = __webpack_require__(6);

	var BarChartSeries = snippet.defineClass(Series, /** @lends BarChartSeries.prototype */ {
	    /**
	     * Bar chart series component.
	     * @constructs BarChartSeries
	     * @private
	     * @extends Series
	     * @param {object} params parameters
	     *      @param {object} params.model series model
	     *      @param {object} params.options series options
	     *      @param {object} params.theme series theme
	     */
	    init: function() {
	        Series.apply(this, arguments);
	    },

	    /**
	     * Make bound of bar chart.
	     * @param {number} width width
	     * @param {number} height height
	     * @param {number} top top position value
	     * @param {number} startLeft start left position value
	     * @param {number} endLeft end left position value
	     * @returns {{
	     *      start: {left: number, top: number, width: number, height: number},
	     *      end: {left: number, top: number, width: number, height: number}
	     * }} column chart bound
	     * @private
	     */
	    _makeBound: function(width, height, top, startLeft, endLeft) {
	        return {
	            start: {
	                top: top,
	                left: startLeft,
	                width: 0,
	                height: height
	            },
	            end: {
	                top: top,
	                left: endLeft,
	                width: width,
	                height: height
	            }
	        };
	    },

	    /**
	     * Calculate additional left for divided option.
	     * @param {number} value value
	     * @returns {number}
	     * @private
	     */
	    _calculateAdditionalLeft: function(value) {
	        var additionalLeft = 0;

	        if (this.options.divided && value > 0) {
	            additionalLeft = this.dimensionMap.yAxis.width + chartConst.OVERLAPPING_WIDTH;
	        }

	        return additionalLeft;
	    },

	    /**
	     * Make bar chart bound.
	     * @param {{
	     *      baseBarSize: number,
	     *      groupSize: number,
	     *      barSize: number,
	     *      pointInterval: number,
	     *      firstAdditionalPosition: number,
	     *      basePosition: number
	     * }} baseData base data for making bound
	     * @param {{
	     *      baseTop: number,
	     *      top: number,
	     *      plusLeft: number,
	     *      minusLeft: number,
	     *      prevStack: ?string
	     * }} iterationData iteration data
	     * @param {?boolean} isStackType whether stackType option or not.
	     * @param {SeriesItem} seriesItem series item
	     * @param {number} index index
	     * @returns {{
	     *      start: {left: number, top: number, width: number, height: number},
	     *      end: {left: number, top: number, width: number, height: number}
	     * }}
	     * @private
	     */
	    _makeBarChartBound: function(baseData, iterationData, isStackType, seriesItem, index) {
	        var barWidth = baseData.baseBarSize * seriesItem.ratioDistance;
	        var additionalLeft = this._calculateAdditionalLeft(seriesItem.value);
	        var barStartLeft = baseData.baseBarSize * seriesItem.startRatio;
	        var startLeft = baseData.basePosition + barStartLeft + additionalLeft;
	        var changedStack = (seriesItem.stack !== iterationData.prevStack);
	        var pointCount, endLeft, bound, boundTop;
	        var isOverLapBar = (baseData.barSize * baseData.itemCount > baseData.groupSize);
	        var barInterval = isOverLapBar ? baseData.pointInterval : baseData.barSize;

	        if (!isStackType || (!this.options.diverging && changedStack)) {
	            pointCount = isStackType ? this.dataProcessor.findStackIndex(seriesItem.stack) : index;
	            iterationData.top = iterationData.baseTop + (barInterval * pointCount);
	            iterationData.plusLeft = 0;
	            iterationData.minusLeft = 0;
	        }

	        if (seriesItem.value >= 0) {
	            endLeft = startLeft + iterationData.plusLeft;
	            iterationData.plusLeft += barWidth;
	        } else {
	            iterationData.minusLeft -= barWidth;
	            endLeft = startLeft + iterationData.minusLeft;
	        }

	        iterationData.prevStack = seriesItem.stack;

	        if (isOverLapBar) {
	            boundTop = iterationData.top + baseData.pointInterval - (baseData.barSize / 2);
	        } else {
	            boundTop = iterationData.top + baseData.pointInterval - (baseData.barSize / 2)
	                + ((baseData.pointInterval - baseData.barSize) / 2 * (baseData.itemCount - 1));
	        }

	        bound = this._makeBound(barWidth, baseData.barSize, boundTop, startLeft, endLeft);

	        return bound;
	    },

	    /**
	     * Make series bounds for rendering
	     * @returns {Array.<Array.<object>>} bounds
	     * @private
	     */
	    _makeBounds: function() {
	        var self = this;
	        var seriesDataModel = this._getSeriesDataModel();
	        var isStacked = predicate.isValidStackOption(this.options.stackType);
	        var dimension = this.layout.dimension;
	        var baseData = this._makeBaseDataForMakingBound(dimension.height, dimension.width);

	        return seriesDataModel.map(function(seriesGroup, groupIndex) {
	            var baseTop = (groupIndex * baseData.groupSize) + self.layout.position.top;
	            var iterationData = {
	                baseTop: baseTop,
	                top: baseTop,
	                plusLeft: 0,
	                minusLeft: 0,
	                prevStack: null
	            };
	            var iteratee = snippet.bind(self._makeBarChartBound, self, baseData, iterationData, isStacked);

	            return seriesGroup.map(iteratee);
	        });
	    },

	    /**
	     * Calculate top position of sum label.
	     * @param {{left: number, top: number}} bound bound
	     * @param {number} labelHeight label height
	     * @returns {number} top position value
	     * @private
	     */
	    _calculateTopPositionOfSumLabel: function(bound, labelHeight) {
	        return bound.top + ((bound.height - labelHeight + chartConst.TEXT_PADDING) / 2);
	    }
	});

	BarTypeSeriesBase.mixin(BarChartSeries);

	function barSeriesFactory(params) {
	    var libType = params.chartOptions.libType;
	    var chartTheme = params.chartTheme;

	    params.libType = libType;
	    params.chartType = 'bar';
	    params.chartBackground = chartTheme.chart.background;

	    return new BarChartSeries(params);
	}

	// @todo let's find better way
	barSeriesFactory.componentType = 'series';
	barSeriesFactory.BarChartSeries = BarChartSeries;

	module.exports = barSeriesFactory;


/***/ }),
/* 81 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileoverview Series base component.
	 * @author NHN Ent.
	 *         FE Development Lab <dl_javascript@nhnent.com>
	 */

	'use strict';

	var snippet = __webpack_require__(6);

	var LABEL_FADE_IN_DURATION = 600;
	var browser = snippet.browser;
	var IS_IE7 = browser.msie && browser.version === 7;

	var chartConst = __webpack_require__(8);
	var dom = __webpack_require__(9);
	var predicate = __webpack_require__(21);
	var renderUtil = __webpack_require__(7);
	var pluginFactory = __webpack_require__(32);
	var raphaelRenderUtil = __webpack_require__(5);

	var Series = snippet.defineClass(/** @lends Series.prototype */ {
	    /**
	     * Series component className
	     * @type {string}
	     */
	    className: 'tui-chart-series-area', /**
	     * Series base component.
	     * @constructs Series
	     * @private
	     * @param {object} params parameters
	     *      @param {object} params.options series options
	     *      @param {object} params.theme series theme
	     */
	    init: function(params) {
	        var libType = params.libType;

	        /**
	         * Chart type
	         * @type {string}
	         */
	        this.chartType = params.chartType;

	        /**
	         * Series name
	         * @tpye {string}
	         */
	        this.seriesType = params.seriesType || params.chartType;

	        /**
	         * Component type
	         * @type {string}
	         */
	        this.componentType = params.componentType;

	        /**
	         * Data processor
	         * @type {DataProcessor}
	         */
	        this.dataProcessor = params.dataProcessor;

	        /**
	         * event bus for transmitting message
	         * @type {object}
	         */
	        this.eventBus = params.eventBus;

	        /**
	         * chart background.
	         * @type {string}
	         */
	        this.chartBackground = params.chartBackground;

	        /**
	         * Options
	         * @type {object}
	         */
	        this.options = params.options || {};

	        /**
	         * Theme
	         * @type {object}
	         */

	        this.orgTheme = this.theme = params.theme;

	        /**
	         * Graph renderer
	         * @type {object}
	         */
	        this.graphRenderer = pluginFactory.get(libType, params.chartType);

	        /**
	         * series container
	         * @type {HTMLElement}
	         */
	        this.seriesContainer = null;

	        /**
	         * series label container
	         * @type {HTMLElement}
	         */
	        this.seriesLabelContainer = null;

	        /**
	         * series data
	         * @type {Array.<object>}
	         */
	        this.seriesData = [];

	        /**
	         * Selected legend index
	         * @type {?number}
	         */
	        this.selectedLegendIndex = null;

	        /**
	         * effector for show layer
	         * @type {object}
	         */
	        this.labelShowEffector = null;

	        /**
	         * raphael object
	         * @type {null|object}
	         */
	        this.paper = null;

	        /**
	         * limit(min, max) data for series
	         * @type {null|{min:number, max:number}}
	         */
	        this.limit = null;

	        /**
	         * aligned
	         * @type {null|boolean}
	         */
	        this.aligned = null;

	        /**
	         * layout bounds information for this components
	         * @type {null|{dimension:{width:number, height:number}, position:{left:number, top:number}}}
	         */
	        this.layout = null;

	        /**
	         * dimension map for layout of chart
	         * @type {null|object}
	         */
	        this.dimensionMap = null;

	        /**
	         * position map for layout of chart
	         * @type {null|object}
	         */
	        this.positionMap = null;

	        /**
	         * axis data map
	         * @type {null|object}
	         */
	        this.axisDataMap = null;

	        /**
	         * before axis data map
	         * @type {null|object}
	         */
	        this.beforeAxisDataMap = null;

	        /**
	         * Drawing type
	         * @type {string}
	         */
	        this.drawingType = chartConst.COMPONENT_TYPE_RAPHAEL;

	        /**
	         * whether series lable is supported
	         * @type {boolean}
	         */
	        this.supportSeriesLable = true;

	        this._attachToEventBus();
	    },

	    /**
	     * Attach to event bus.
	     * @private
	     */
	    _attachToEventBus: function() {
	        var firstRenderCheck = snippet.bind(function() {
	            this.isInitRenderCompleted = true;
	            this.eventBus.off('load', firstRenderCheck);
	        }, this);

	        this.eventBus.on(chartConst.PUBLIC_EVENT_PREFIX + 'load', firstRenderCheck);

	        this.eventBus.on({
	            selectLegend: this.onSelectLegend,
	            selectSeries: this.onSelectSeries,
	            unselectSeries: this.onUnselectSeries,
	            hoverSeries: this.onHoverSeries,
	            hoverOffSeries: this.onHoverOffSeries,
	            showGroupAnimation: this.onShowGroupAnimation,
	            hideGroupAnimation: this.onHideGroupAnimation
	        }, this);

	        if (this.onShowTooltip) {
	            this.eventBus.on('showTooltip', this.onShowTooltip, this);
	        }

	        if (this.onShowGroupTooltipLine) {
	            this.eventBus.on({
	                showGroupTooltipLine: this.onShowGroupTooltipLine,
	                hideGroupTooltipLine: this.onHideGroupTooltipLine
	            }, this);
	        }

	        if (this.onClickSeries) {
	            this.eventBus.on({
	                clickSeries: this.onClickSeries,
	                moveSeries: this.onMoveSeries
	            }, this);
	        }
	    },

	    /**
	     * Get seriesDataModel.
	     * @returns {SeriesDataModel}
	     * @private
	     */
	    _getSeriesDataModel: function() {
	        return this.dataProcessor.getSeriesDataModel(this.seriesType);
	    },

	    /**
	     * Make series data.
	     * @private
	     * @abstract
	     */
	    _makeSeriesData: function() {},

	    /**
	     * Get seriesData
	     * @returns {object} series data
	     */
	    getSeriesData: function() {
	        return this.seriesData;
	    },

	    /**
	     * Render series label.
	     * @private
	     * @abstract
	     */
	    _renderSeriesLabel: function() {},

	    /**
	     * Render series label area
	     * @param {object} paper series label area element
	     * @returns {Array.<object>}
	     * @private
	     */
	    _renderSeriesLabelArea: function(paper) {
	        return this._renderSeriesLabel(paper);
	    },

	    /**
	     * Send boudns to mouseEventDetector component.
	     * @param {object} seriesData - series data
	     * @private
	     */
	    _sendBoundsToMouseEventDetector: function(seriesData) {
	        this.eventBus.fire('receiveSeriesData', {
	            chartType: this.chartType,
	            data: seriesData
	        });
	    },

	    /**
	     * Render series area.
	     * @param {object} paper - raphael object
	     * @param {function} funcRenderGraph - function for graph rendering
	     * @private
	     */
	    _renderSeriesArea: function(paper, funcRenderGraph) {
	        var dimension, seriesData;

	        dimension = this.dimensionMap.extendedSeries;

	        this.seriesData = seriesData = this._makeSeriesData();

	        this._sendBoundsToMouseEventDetector(seriesData);

	        if (this.hasDataForRendering(seriesData) || this.chartType === 'map') {
	            if (funcRenderGraph) {
	                this.seriesSet = funcRenderGraph(dimension, seriesData, paper);
	            }

	            if (predicate.isShowLabel(this.options) && this.supportSeriesLable) {
	                this.labelSet = this._renderSeriesLabelArea(paper);
	            }
	        }
	    },

	    /**
	     * Make parameters for graph rendering.
	     * @param {{width: number, height: number}} dimension dimension
	     * @param {object} seriesData series data
	     * @returns {object} parameters for graph rendering
	     * @private
	     */
	    _makeParamsForGraphRendering: function(dimension, seriesData) {
	        return snippet.extend({
	            dimension: dimension,
	            position: this.layout.position,
	            chartType: this.seriesType,
	            theme: this.theme,
	            options: this.options
	        }, seriesData);
	    },

	    /**
	     * Render raphael graph.
	     * @param {{width: number, height: number}} dimension - dimension
	     * @param {object} seriesData - series data
	     * @param {object} [paper] - raphael paper
	     * @returns {object}
	     * @private
	     */
	    _renderGraph: function(dimension, seriesData, paper) {
	        var params = this._makeParamsForGraphRendering(dimension, seriesData);

	        return this.graphRenderer.render(paper, params);
	    },

	    /**
	     * Set data for rendering.
	     * @param {{
	     *      paper: ?object,
	     *      limit: {
	     *          min: number,
	     *          max: number
	     *      },
	     *      aligned: boolean,
	     *      layout: {
	     *          dimension: {width: number, height: number},
	     *          position: {left: number, top: number}
	     *      },
	     *      dimensionMap: object,
	     *      positionMap: object,
	     *      axisDataMap: object
	     * }} data - data for rendering
	     * @private
	     */
	    _setDataForRendering: function(data) {
	        this.paper = data.paper;
	        this.limit = data.limitMap[this.chartType];
	        if (data.axisDataMap && data.axisDataMap.xAxis) {
	            this.aligned = data.axisDataMap.xAxis.aligned;
	        }
	        this.layout = data.layout;
	        this.dimensionMap = data.dimensionMap;
	        this.positionMap = data.positionMap;
	        this.axisDataMap = data.axisDataMap;
	    },

	    /**
	     * Render series component.
	     * @param {object} data - data for rendering
	     */
	    render: function(data) {
	        var checkedLegends;
	        this.paper = data.paper;
	        this._setDataForRendering(data);
	        this._clearSeriesContainer();
	        this.beforeAxisDataMap = this.axisDataMap;

	        if (data.checkedLegends) {
	            checkedLegends = data.checkedLegends[this.seriesType];
	            if (!this.options.colorByPoint) {
	                this.theme = this._getCheckedSeriesTheme(this.orgTheme, checkedLegends);
	            }
	        }

	        this._renderSeriesArea(data.paper, snippet.bind(this._renderGraph, this));

	        if (this.paper.pushDownBackgroundToBottom) {
	            this.paper.pushDownBackgroundToBottom();
	        }
	    },

	    /**
	     * Get checked series theme.
	     * @param {object} theme legend theme
	     * @param {?Array.<?boolean>} checkedLegends checked legends
	     * @returns {object} checked series theme
	     * @private
	     */
	    _getCheckedSeriesTheme: function(theme, checkedLegends) {
	        var cloneTheme;

	        if (!checkedLegends.length) {
	            return theme;
	        }

	        cloneTheme = JSON.parse(JSON.stringify(theme));
	        cloneTheme.colors = snippet.filter(cloneTheme.colors, function(color, index) {
	            return checkedLegends[index];
	        });

	        return cloneTheme;
	    },

	    /**
	     * Clear series container.
	     * @private
	     */
	    _clearSeriesContainer: function() {
	        if (this.seriesSet && this.seriesSet.remove) {
	            this.seriesSet.forEach(function(series) {
	                series.remove();
	            }, this);
	            this.seriesSet.remove();
	        }
	        if (this.labelSet && this.labelSet.remove) {
	            this.labelSet.forEach(function(label) {
	                label.remove();
	            }, this);
	            this.labelSet.remove();
	        }

	        this.seriesData = [];
	    },

	    /**
	     * Rerender series
	     * @param {object} data - data for rendering
	     */
	    rerender: function(data) {
	        var checkedLegends;

	        if (this.dataProcessor.getGroupCount(this.seriesType)) {
	            if (data.checkedLegends) {
	                checkedLegends = data.checkedLegends[this.seriesType];
	                this.theme = this._getCheckedSeriesTheme(this.orgTheme, checkedLegends);
	            }

	            this._setDataForRendering(data);
	            this._clearSeriesContainer();
	            this._renderSeriesArea(data.paper, snippet.bind(this._renderGraph, this));

	            if (this.labelShowEffector) {
	                clearInterval(this.labelShowEffector.timerId);
	            }

	            // if rerender have excuted in the middle of animate,
	            // we should rerun animate
	            if (checkedLegends || !this.isInitRenderCompleted) {
	                this.animateComponent(true);
	            }

	            if (!snippet.isNull(this.selectedLegendIndex)) {
	                this.graphRenderer.selectLegend(this.selectedLegendIndex);
	            }
	        } else {
	            this._clearSeriesContainer();
	        }
	    },

	    /**
	     * Return whether label visible or not.
	     * @returns {boolean}
	     * @private
	     */
	    _isLabelVisible: function() {
	        return !!(this.options.showLabel || this.options.showLegend);
	    },

	    /**
	     * Resize raphael graph by given dimension and series data
	     * @param {{width: number, height: number}} dimension - chart dimension
	     * @param {object} seriesData - series data
	     * @returns {Array.<object>}
	     * @private
	     */
	    _resizeGraph: function(dimension, seriesData) {
	        this.graphRenderer.resize(snippet.extend({
	            dimension: this.dimensionMap.chart
	        }, seriesData));

	        return this.seriesSet;
	    },

	    /**
	     * Resize series component.
	     * }} bound series bound
	     * @param {object} data data for rendering
	     */
	    resize: function(data) {
	        this._clearSeriesContainer();
	        this._setDataForRendering(data);
	        this._renderSeriesArea(data.paper, snippet.bind(this._resizeGraph, this));
	    },

	    /**
	     * Set element's top, left given top, left position
	     * @param {HTMLElement} el - series element
	     * @param {{top: number, left: number}} position - series top, left position
	     * @private
	     */
	    _renderPosition: function(el, position) {
	        var hiddenWidth = renderUtil.isOldBrowser() ? 1 : 0;

	        renderUtil.renderPosition(el, {
	            top: position.top - (hiddenWidth),
	            left: position.left - (hiddenWidth * 2)
	        });
	    },

	    /**
	     * Get limit distance from zero point.
	     * @param {number} size chart size (width or height)
	     * @param {{min: number, max: number}} limit limit
	     * @returns {{toMax: number, toMin: number}} pixel distance
	     * @private
	     */
	    _getLimitDistanceFromZeroPoint: function(size, limit) {
	        var min = limit.min,
	            max = limit.max,
	            distance = max - min,
	            toMax = 0,
	            toMin = 0;

	        if (min <= 0 && max >= 0) {
	            toMax = (distance + min) / distance * size;
	            toMin = (distance - max) / distance * size;
	        } else if (min > 0) {
	            toMax = size;
	        }

	        return {
	            toMax: toMax,
	            toMin: toMin
	        };
	    },

	    /**
	     * Find label element.
	     * @param {HTMLElement} elTarget target element
	     * @returns {HTMLElement} label element
	     * @private
	     */
	    _findLabelElement: function(elTarget) {
	        var elLabel = null;

	        if (dom.hasClass(elTarget, chartConst.CLASS_NAME_SERIES_LABEL)) {
	            elLabel = elTarget;
	        } else {
	            elLabel = dom.findParentByClass(elTarget, chartConst.CLASS_NAME_SERIES_LABEL);
	        }

	        return elLabel;
	    },

	    /**
	     * To call showAnimation function of graphRenderer.
	     * @param {{groupIndex: number, index: number}} data data
	     * @param {string} chartType - chart type
	     */
	    onHoverSeries: function(data, chartType) {
	        if (chartType !== this.chartType) {
	            return;
	        }

	        if (!this.graphRenderer.showAnimation) {
	            return;
	        }

	        this.graphRenderer.showAnimation(data);
	    },

	    /**
	     * To call hideAnimation function of graphRenderer.
	     * @param {{groupIndex: number, index: number}} data data
	     * @param {string} chartType - chart type
	     */
	    onHoverOffSeries: function(data, chartType) {
	        if (chartType !== this.chartType) {
	            return;
	        }

	        if (!this.graphRenderer.hideAnimation || !data) {
	            return;
	        }

	        this.graphRenderer.hideAnimation(data);
	    },

	    /**
	     * To call showGroupAnimation function of graphRenderer.
	     * @param {number} index index
	     */
	    onShowGroupAnimation: function(index) {
	        if (!this.graphRenderer.showGroupAnimation) {
	            return;
	        }
	        this.graphRenderer.showGroupAnimation(index);
	    },

	    /**
	     * To call hideGroupAnimation function of graphRenderer.
	     * @param {number} index index
	     */
	    onHideGroupAnimation: function(index) {
	        if (!this.graphRenderer.hideGroupAnimation) {
	            return;
	        }
	        this.graphRenderer.hideGroupAnimation(index);
	    },

	    /**
	     * Animate component.
	     * @param {boolean} [isRerendering] - whether rerendering or not
	     */
	    animateComponent: function(isRerendering) {
	        if (this.graphRenderer.animate && this.seriesSet) {
	            this.graphRenderer.animate(snippet.bind(this.animateSeriesLabelArea, this, isRerendering), this.seriesSet);
	        } else {
	            this.animateSeriesLabelArea(isRerendering);
	        }
	    },

	    /**
	     * Fire load event.
	     * @param {boolean} [isRerendering] - whether rerendering or not
	     * @private
	     */
	    _fireLoadEvent: function(isRerendering) {
	        if (!isRerendering) {
	            this.eventBus.fire(chartConst.PUBLIC_EVENT_PREFIX + 'load');
	        }
	    },

	    /**
	     * Animate series label area.
	     * @param {boolean} [isRerendering] - whether rerendering or not
	     */
	    animateSeriesLabelArea: function(isRerendering) {
	        if (!this._isLabelVisible()) {
	            this._fireLoadEvent(isRerendering);

	            return;
	        }

	        if (IS_IE7) {
	            this._fireLoadEvent(isRerendering);
	            this.labelSet.attr({
	                opacity: 1
	            });
	        } else if (this.labelSet && this.labelSet.length) {
	            raphaelRenderUtil.animateOpacity(this.labelSet, 0, 1, LABEL_FADE_IN_DURATION);
	        }
	    },

	    /**
	     * Make exportation data for public event of series type.
	     * @param {object} seriesData series data
	     * @returns {{chartType: string, legend: string, legendIndex: number, index: number}} export data
	     * @private
	     */
	    _makeExportationSeriesData: function(seriesData) {
	        var indexes = seriesData.indexes;
	        var legendIndex = snippet.isExisty(indexes.legendIndex) ? indexes.legendIndex : indexes.index;
	        var legendData = this.dataProcessor.getLegendItem(legendIndex);
	        var index = snippet.isExisty(indexes.groupIndex) ? indexes.groupIndex : 0;
	        var seriesItem = this._getSeriesDataModel().getSeriesItem(index, indexes.index);
	        var result;

	        if (snippet.isExisty(seriesItem)) {
	            result = {
	                chartType: legendData.chartType,
	                legend: legendData.label,
	                legendIndex: legendIndex
	            };
	            result.index = seriesItem.index;
	        }

	        return result;
	    },

	    /**
	     * Execute graph renderer.
	     * @param {{left: number, top: number}} position mouse position
	     * @param {string} funcName function name
	     * @returns {*} result.
	     * @private
	     */
	    _executeGraphRenderer: function(position, funcName) {
	        var isShowLabel = false;
	        var result;

	        this.eventBus.fire('hideTooltipContainer');
	        if (this.seriesLabelContainer && dom.hasClass(this.seriesLabelContainer, 'show')) {
	            dom.removeClass(this.seriesLabelContainer, 'show');
	            isShowLabel = true;
	        }

	        result = this.graphRenderer[funcName](position);

	        if (isShowLabel) {
	            dom.addClass(this.seriesLabelContainer, 'show');
	        }

	        this.eventBus.fire('showTooltipContainer');

	        return result;
	    },

	    /**
	     * To call selectSeries callback of public event.
	     * @param {object} seriesData - series data
	     * @param {?boolean} shouldSelect - whether should select or not
	     */
	    onSelectSeries: function(seriesData, shouldSelect) {
	        var eventName;

	        if (seriesData.chartType !== this.chartType) {
	            return;
	        }

	        eventName = chartConst.PUBLIC_EVENT_PREFIX + 'selectSeries';

	        this.eventBus.fire(eventName, this._makeExportationSeriesData(seriesData));
	        shouldSelect = snippet.isEmpty(shouldSelect) ? true : shouldSelect;

	        if (this.options.allowSelect && this.graphRenderer.selectSeries && shouldSelect) {
	            this.graphRenderer.selectSeries(seriesData.indexes);
	        }
	    },

	    /**
	     * To call unselectSeries callback of public event.
	     * @param {object} seriesData series data.
	     */
	    onUnselectSeries: function(seriesData) {
	        var eventName;

	        if (seriesData.chartType !== this.chartType) {
	            return;
	        }

	        eventName = chartConst.PUBLIC_EVENT_PREFIX + 'unselectSeries';

	        this.eventBus.fire(eventName, this._makeExportationSeriesData(seriesData));
	        if (this.options.allowSelect && this.graphRenderer.unselectSeries) {
	            this.graphRenderer.unselectSeries(seriesData.indexes);
	        }
	    },

	    /**
	     *On select legend.
	     * @param {string} seriesType - series name
	     * @param {?number} legendIndex - legend index
	     */
	    onSelectLegend: function(seriesType, legendIndex) {
	        if ((this.seriesType !== seriesType) && !snippet.isNull(legendIndex)) {
	            legendIndex = -1;
	        }

	        this.selectedLegendIndex = legendIndex;

	        if (this._getSeriesDataModel().getGroupCount()) {
	            this.graphRenderer.selectLegend(legendIndex);
	        }
	    },

	    /**
	     * Show label.
	     */
	    showLabel: function() {
	        this.options.showLabel = true;

	        if (!this.seriesLabelContainer && this.supportSeriesLable) {
	            this._renderSeriesLabelArea(this.paper);
	        }
	    },

	    /**
	     * Hide label.
	     */
	    hideLabel: function() {
	        this.options.showLabel = false;

	        if (this.seriesLabelContainer) {
	            dom.removeClass(this.seriesLabelContainer, 'show');
	            dom.removeClass(this.seriesLabelContainer, 'opacity');
	        }
	    },
	    /**
	     * Return boolean value whether seriesData contains data
	     * @param {object} seriesData seriesData object
	     * @returns {boolean}
	     */
	    hasDataForRendering: function(seriesData) {
	        return !!(seriesData && seriesData.isAvailable());
	    }
	});

	module.exports = Series;


/***/ }),
/* 82 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileoverview BarTypeSeriesBase is base class for bar type series.
	 * @author NHN Ent.
	 *         FE Development Lab <dl_javascript@nhnent.com>
	 */

	'use strict';

	var chartConst = __webpack_require__(8);
	var labelHelper = __webpack_require__(83);
	var predicate = __webpack_require__(21);
	var calculator = __webpack_require__(45);
	var renderUtil = __webpack_require__(7);
	var raphaelRenderUtil = __webpack_require__(5);
	var snippet = __webpack_require__(6);

	var DEFAULT_BAR_SIZE_RATIO_BY_POINT_INTERVAL = 0.85;

	var BarTypeSeriesBase = snippet.defineClass(/** @lends BarTypeSeriesBase.prototype */ {
	    /**
	     * Make series data.
	     * @returns {object} add data
	     * @private
	     * @override
	     */
	    _makeSeriesData: function() {
	        var groupBounds = this._makeBounds(this.layout.dimension);

	        this.groupBounds = groupBounds;

	        return {
	            groupBounds: groupBounds,
	            seriesDataModel: this._getSeriesDataModel(),
	            isAvailable: function() {
	                return groupBounds && groupBounds.length > 0;
	            }
	        };
	    },

	    /**
	     * Get bar width option size.
	     * @param {number} pointInterval point interval
	     * @param {number} [optionBarWidth] barWidth option
	     * @returns {number} option size
	     * @private
	     */
	    _getBarWidthOptionSize: function(pointInterval, optionBarWidth) {
	        var optionsSize = 0;

	        if (optionBarWidth) {
	            if ((optionBarWidth / 2) >= pointInterval) {
	                optionBarWidth = pointInterval * 2;
	            } else if (optionBarWidth < 0) {
	                optionBarWidth = 0;
	            }
	            optionsSize = optionBarWidth;
	        }

	        return optionsSize;
	    },

	    /**
	     * Calculate difference between optionSize and barSize.
	     * @param {number} barSize bar size
	     * @param {number} optionSize option size
	     * @param {number} itemCount item count
	     * @returns {number} addition padding
	     * @private
	     */
	    _calculateAdditionalPosition: function(barSize, optionSize, itemCount) {
	        var additionalPosition = 0;

	        if (optionSize && optionSize < barSize) {
	            additionalPosition = (barSize / 2) + ((barSize - optionSize) * itemCount / 2);
	        }

	        return additionalPosition;
	    },

	    /**
	     * Make base data for making bound.
	     * @param {number} baseGroupSize base group size
	     * @param {number} baseBarSize base bar size
	     * @returns {undefined|{
	     *      baseBarSize: number,
	     *      groupSize: number,
	     *      barSize: number,
	     *      pointInterval: number,
	     *      firstAdditionalPosition: number,
	     *      basePosition: number
	     * }}
	     * @private
	     */
	    _makeBaseDataForMakingBound: function(baseGroupSize, baseBarSize) {
	        var isStackType = predicate.isValidStackOption(this.options.stackType);
	        var seriesDataModel = this._getSeriesDataModel();
	        var groupSize = baseGroupSize / seriesDataModel.getGroupCount();
	        var columnTopOffset = -this.layout.position.top + chartConst.CHART_PADDING;
	        var positionValue, itemCount, barSize, optionSize, basePosition, pointInterval, baseBounds;
	        var zeroToMin = this._getLimitDistanceFromZeroPoint(baseBarSize, this.limit).toMin;

	        if (predicate.isColumnChart(this.chartType)) {
	            positionValue = columnTopOffset;
	        } else if (predicate.isBoxplotChart(this.chartType)) {
	            positionValue = this.layout.position.top - chartConst.CHART_PADDING;
	        } else {
	            positionValue = this.layout.position.left;
	        }

	        if (seriesDataModel.rawSeriesData.length > 0) {
	            if (!isStackType) {
	                itemCount = seriesDataModel.getFirstSeriesGroup().getSeriesItemCount();
	            } else {
	                itemCount = this.options.diverging ? 1 : this.dataProcessor.getStackCount(this.seriesType);
	            }

	            pointInterval = groupSize / (itemCount + 1);
	            barSize = pointInterval * DEFAULT_BAR_SIZE_RATIO_BY_POINT_INTERVAL;
	            optionSize = this.options.barWidth || this.options.pointWidth;
	            barSize = this._getBarWidthOptionSize(pointInterval, optionSize) || barSize;
	            basePosition = zeroToMin + positionValue;

	            if (predicate.isColumnChart(this.chartType)) {
	                basePosition = baseBarSize - basePosition;
	            }

	            if (predicate.isBoxplotChart(this.chartType) && zeroToMin) {
	                basePosition -= zeroToMin * 2;
	            }

	            baseBounds = {
	                baseBarSize: baseBarSize,
	                groupSize: groupSize,
	                barSize: barSize,
	                pointInterval: pointInterval,
	                firstAdditionalPosition: pointInterval,
	                basePosition: basePosition,
	                itemCount: itemCount
	            };
	        }

	        return baseBounds;
	    },

	    /**
	     * Render normal series label.
	     * @param {object} paper paper
	     * @returns {Array.<object>}
	     * @private
	     */
	    _renderNormalSeriesLabel: function(paper) {
	        var graphRenderer = this.graphRenderer;
	        var seriesDataModel = this._getSeriesDataModel();
	        var boundsSet = this.seriesData.groupBounds;
	        var labelTheme = this.theme.label;
	        var selectedIndex = this.selectedLegendIndex;
	        var groupLabels = seriesDataModel.map(function(seriesGroup) {
	            return seriesGroup.map(function(seriesDatum) {
	                var label = {
	                    end: seriesDatum.endLabel
	                };

	                if (snippet.isExisty(seriesDatum.start)) {
	                    label.start = seriesDatum.startLabel;
	                }

	                return label;
	            });
	        });
	        var positionsSet;

	        if (predicate.isBarChart(this.chartType)) {
	            positionsSet = labelHelper.boundsToLabelPositionsForBarChart(seriesDataModel, boundsSet, labelTheme);
	        } else {
	            positionsSet = labelHelper.boundsToLabelPositionsForColumnChart(seriesDataModel, boundsSet, labelTheme);
	        }

	        return graphRenderer.renderSeriesLabel(paper, positionsSet, groupLabels, labelTheme, selectedIndex);
	    },

	    /**
	     * Make sum values.
	     * @param {Array.<number>} values values
	     * @returns {number} sum result.
	     */
	    _makeSumValues: function(values) {
	        var sum = calculator.sum(values);

	        return renderUtil.formatValue({
	            value: sum,
	            formatFunctions: this.dataProcessor.getFormatFunctions(),
	            chartType: this.chartType,
	            areaType: 'series'
	        });
	    },

	    /**
	     * Make stackType label position.
	     * @param {{width: number, height: number, left: number, top: number}} bound element bound
	     * @returns {{left: number, top: number}} position
	     * @private
	     */
	    _makeStackedLabelPosition: function(bound) {
	        var left = bound.left + (bound.width / 2);
	        var top = bound.top + (bound.height / 2);

	        return {
	            left: left,
	            top: top
	        };
	    },

	    /**
	     * Make labels html, when has stackType option.
	     * @param {object} params parameters
	     *      @param {number} params.groupIndex group index
	     *      @param {Array.<object>} params.bounds bounds,
	     * @returns {string} label positions
	     * @private
	     */
	    _makeStackedLabelPositions: function(params) {
	        var self = this;
	        var seriesGroup = params.seriesGroup;
	        var positions = seriesGroup.map(function(seriesItem, index) {
	            var bound = params.bounds[index];
	            var position;

	            if (bound && seriesItem) {
	                position = self._makeStackedLabelPosition(bound.end);
	            }

	            return {
	                end: position
	            };
	        });

	        return positions;
	    },

	    getGroupLabels: function(seriesDataModel, sumPlusValues, sumMinusValues) {
	        var isNormalStack = predicate.isNormalStack(this.options.stackType);

	        return seriesDataModel.map(function(seriesGroup) {
	            var labels = seriesGroup.map(function(seriesDatum) {
	                return {
	                    end: seriesDatum.endLabel
	                };
	            });
	            var minusSum;

	            if (isNormalStack) {
	                sumPlusValues.push(calculator.sumPlusValues(seriesGroup.pluck('value')));

	                minusSum = calculator.sumMinusValues(seriesGroup.pluck('value'));
	                if (minusSum < 0) {
	                    sumMinusValues.push(minusSum);
	                }
	            }

	            return labels;
	        });
	    },

	    getGroupPositions: function(seriesDataModel, groupBounds) {
	        var self = this;

	        return seriesDataModel.map(function(seriesGroup, index) {
	            return self._makeStackedLabelPositions({
	                seriesGroup: seriesGroup,
	                bounds: groupBounds[index]
	            });
	        });
	    },

	    /**
	     * Render series label, when has stackType option.
	     * @param {object} paper paper
	     * @returns {Array.<object>}
	     * @private
	     */
	    _renderStackedSeriesLabel: function(paper) {
	        var self = this;
	        var sumPlusValues = [];
	        var sumMinusValues = [];
	        var labelTheme = this.theme.label;
	        var groupBounds = this.seriesData.groupBounds;
	        var seriesDataModel = this._getSeriesDataModel();
	        var groupPositions = this.getGroupPositions(seriesDataModel, groupBounds);
	        var groupLabels = this.getGroupLabels(seriesDataModel, sumPlusValues, sumMinusValues);
	        var isStacked = true;
	        var isNormalStack = predicate.isNormalStack(this.options.stackType);
	        var isBarChart = predicate.isBarChart(this.chartType);
	        var dimensionType = isBarChart ? 'width' : 'height';
	        var positionType = isBarChart ? 'left' : 'top';
	        var direction = isBarChart ? 1 : -1;

	        if (isNormalStack) {
	            snippet.forEach(groupLabels, function(labels, index) {
	                var plusSumValue = sumPlusValues[index];
	                var minusSumValue = sumMinusValues[index];

	                if (minusSumValue < 0 && self.options.diverging) {
	                    minusSumValue *= -1;
	                }

	                labels.push({
	                    end: renderUtil.formatToComma(plusSumValue)
	                });

	                if (sumMinusValues.length) {
	                    labels.push({
	                        end: renderUtil.formatToComma(minusSumValue)
	                    });
	                }
	            });

	            snippet.forEach(groupPositions, function(positions, index) {
	                var bounds = groupBounds[index];
	                var lastBound = bounds[bounds.length - 1].end;
	                var firstBound = bounds[Math.max(parseInt(bounds.length / 2, 10), 1) - 1].end;
	                var plusEnd = self._makeStackedLabelPosition(lastBound);
	                var minusEnd = self._makeStackedLabelPosition(firstBound);
	                var plusLabel = sumPlusValues[index];
	                var minusLabel = sumMinusValues[index];
	                var plusLabelSize = raphaelRenderUtil.getRenderedTextSize(plusLabel, labelTheme.fontSize,
	                    labelTheme.fontFamily);
	                var minusLabelSize = raphaelRenderUtil.getRenderedTextSize(minusLabel, labelTheme.fontSize,
	                    labelTheme.fontFamily);
	                var lastBoundEndPosition = ((lastBound[dimensionType] + plusLabelSize[dimensionType]) / 2);
	                var firstBoundStartPosition = ((firstBound[dimensionType] + minusLabelSize[dimensionType]) / 2);

	                plusEnd[positionType] += (lastBoundEndPosition + chartConst.LEGEND_LABEL_LEFT_PADDING) * direction;
	                minusEnd[positionType] -= (firstBoundStartPosition + chartConst.LEGEND_LABEL_LEFT_PADDING) * direction;

	                positions.push({
	                    end: plusEnd
	                });
	                if (sumMinusValues.length) {
	                    positions.push({
	                        end: minusEnd
	                    });
	                }
	            });
	        }

	        return this.graphRenderer.renderSeriesLabel(paper, groupPositions, groupLabels, labelTheme, isStacked);
	    },

	    /**
	     * Render series label.
	     * @param {object} paper paper
	     * @returns {Array.<object>}
	     * @private
	     */
	    _renderSeriesLabel: function(paper) {
	        var labelSet;

	        if (this.options.stackType) {
	            labelSet = this._renderStackedSeriesLabel(paper);
	        } else {
	            labelSet = this._renderNormalSeriesLabel(paper);
	        }

	        return labelSet;
	    }
	});

	BarTypeSeriesBase.mixin = function(func) {
	    snippet.extend(func.prototype, BarTypeSeriesBase.prototype);
	};

	module.exports = BarTypeSeriesBase;


/***/ }),
/* 83 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileoverview  renderingLabelHelper is helper for rendering of series label.
	 * @author NHN Ent.
	 *         FE Development Lab <dl_javascript@nhnent.com>
	 */

	'use strict';

	var chartConst = __webpack_require__(8);
	var renderUtil = __webpack_require__(7);
	var snippet = __webpack_require__(6);

	/**
	 * renderingLabelHelper is helper for rendering of series label.
	 * @module renderingLabelHelper
	 * @private
	 */
	var renderingLabelHelper = {
	    /**
	     * Calculate left position for center align of series label.
	     * @param {{left: number, top: number, width:number, height: number}} bound - bound
	     * @returns {number}
	     * @private
	     */
	    _calculateLeftPositionForCenterAlign: function(bound) {
	        return bound.left + (bound.width / 2);
	    },

	    /**
	     * Calculate top position for middle align of series label.
	     * @param {{left: number, top: number, width:number, height: number}} bound - bound
	     * @returns {number}
	     * @private
	     */
	    _calculateTopPositionForMiddleAlign: function(bound) {
	        return bound.top + (bound.height / 2);
	    },

	    /**
	     * Make position for type of bound for rendering label.
	     * @param {{left: number, top: number, width:number, height: number}} bound - bound
	     * @returns {{left: number, top: number}}
	     * @private
	     */
	    _makePositionForBoundType: function(bound) {
	        return {
	            left: this._calculateLeftPositionForCenterAlign(bound),
	            top: this._calculateTopPositionForMiddleAlign(bound)
	        };
	    },

	    /**
	     * Make position map for rendering label.
	     * @param {SeriesItem} seriesItem - series itemyuio
	     * @param {{left: number, top: number, width: number, height: number}} bound - bound
	     * @param {number} labelHeight - label height
	     * @param {object} theme - theme for series label
	     * @param {function} makePosition - function for making position of label
	     * @returns {{end: *}}
	     * @private
	     */
	    _makePositionMap: function(seriesItem, bound, labelHeight, theme, makePosition) {
	        var value = seriesItem.value;
	        var isOppositeSide = value >= 0;
	        var positionMap = {
	            end: makePosition(bound, labelHeight, seriesItem.endLabel || seriesItem.label, theme, isOppositeSide)
	        };

	        if (seriesItem.isRange) {
	            isOppositeSide = value < 0;
	            positionMap.start = makePosition(bound, labelHeight, seriesItem.startLabel, theme, isOppositeSide);
	        }

	        return positionMap;
	    },

	    /**
	     * Bounds to label positions.
	     * @param {SeriesDataModel} seriesDataModel - series data model
	     * @param {Array.<Array.<{left: number, top: number, width: number, height: number}>>} boundsSet - bounds set
	     * @param {object} theme - theme for series label
	     * @param {function} [makePosition] - function for making position of label
	     * @param {boolean} [isPivot] - whether pivot or not
	     * @returns {Array.<Object>}
	     */
	    boundsToLabelPositions: function(seriesDataModel, boundsSet, theme, makePosition, isPivot) {
	        var self = this;
	        var labelHeight = renderUtil.getRenderedLabelHeight(chartConst.MAX_HEIGHT_WORD, theme);

	        makePosition = makePosition || snippet.bind(this._makePositionForBoundType, this);
	        isPivot = !!isPivot;

	        return seriesDataModel.map(function(seriesGroup, groupIndex) {
	            var bounds = boundsSet[groupIndex];

	            return seriesGroup.map(function(seriesItem, index) {
	                var bound = bounds[index].end;

	                return self._makePositionMap(seriesItem, bound, labelHeight, theme, makePosition);
	            });
	        }, isPivot);
	    },

	    /**
	     * Make label position for bar chart.
	     * @param {{left: number, top: number, width:number, height: number}} bound - bound
	     * @param {number} labelHeight - label height
	     * @param {string} label - label
	     * @param {object} theme - theme for series label
	     * @param {boolean} isOppositeSide - whether opossite side or not
	     * @returns {{left: number, top: number}}
	     * @private
	     */
	    _makePositionForBarChart: function(bound, labelHeight, label, theme, isOppositeSide) {
	        var labelWidth = renderUtil.getRenderedLabelWidth(label, theme);
	        var left = bound.left;

	        if (isOppositeSide) {
	            left += bound.width + chartConst.SERIES_LABEL_PADDING;
	        } else {
	            left -= labelWidth + chartConst.SERIES_LABEL_PADDING;
	        }

	        return {
	            left: left,
	            top: this._calculateTopPositionForMiddleAlign(bound)
	        };
	    },

	    /**
	     * Bounds to label positions for bar chart.
	     * @param {SeriesDataModel} seriesDataModel - series data model
	     * @param {Array.<Array.<{left: number, top: number, width: number, height: number}>>} boundsSet - bounds set
	     * @param {object} theme - theme for series label
	     * @returns {*|Array.<Object>|Array}
	     */
	    boundsToLabelPositionsForBarChart: function(seriesDataModel, boundsSet, theme) {
	        var makePositionFunction = snippet.bind(this._makePositionForBarChart, this);

	        return this.boundsToLabelPositions(seriesDataModel, boundsSet, theme, makePositionFunction);
	    },

	    /**
	     * Make label position for column chart.
	     * @param {{left: number, top: number, width:number, height: number}} bound - bound
	     * @param {number} labelHeight - label height
	     * @param {string} label - label
	     * @param {object} theme - theme for series label
	     * @param {boolean} isOppositeSide - whether opossite side or not
	     * @returns {{left: number, top: number}}
	     * @private
	     */
	    _makePositionForColumnChart: function(bound, labelHeight, label, theme, isOppositeSide) {
	        var top = bound.top;

	        if (isOppositeSide) {
	            top -= labelHeight + chartConst.SERIES_LABEL_PADDING;
	        } else {
	            top += bound.height + chartConst.SERIES_LABEL_PADDING;
	        }

	        return {
	            left: this._calculateLeftPositionForCenterAlign(bound),
	            top: top
	        };
	    },

	    /**
	     * Bounds to label positions for column chart.
	     * @param {SeriesDataModel} seriesDataModel - series data model
	     * @param {Array.<Array.<{left: number, top: number, width: number, height: number}>>} boundsSet - bounds set
	     * @param {object} theme - theme for series label
	     * @returns {*|Array.<Object>|Array}
	     */
	    boundsToLabelPositionsForColumnChart: function(seriesDataModel, boundsSet, theme) {
	        var makePositionFunction = snippet.bind(this._makePositionForColumnChart, this);

	        return this.boundsToLabelPositions(seriesDataModel, boundsSet, theme, makePositionFunction);
	    },

	    /**
	     * Make labels html for treemap chart.
	     * @param {Array.<SeriesItem>} seriesItems - seriesItems
	     * @param {object.<string, {left: number, top: number, width: number, height: number}>} boundMap - bound map
	     * @returns {string}
	     */
	    boundsToLabelPostionsForTreemap: function(seriesItems, boundMap) {
	        var self = this;
	        var positions = snippet.map(seriesItems, function(seriesItem) {
	            var bound = boundMap[seriesItem.id];
	            var position;

	            if (bound) {
	                position = self._makePositionForBoundType(bound);
	            }

	            return position;
	        });

	        return positions;
	    }
	};

	module.exports = renderingLabelHelper;


/***/ }),
/* 84 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileoverview Column chart series component.
	 * @author NHN Ent.
	 *         FE Development Lab <dl_javascript@nhnent.com>
	 */

	'use strict';

	var Series = __webpack_require__(81);
	var BarTypeSeriesBase = __webpack_require__(82);
	var chartConst = __webpack_require__(8);
	var predicate = __webpack_require__(21);
	var renderUtil = __webpack_require__(7);
	var snippet = __webpack_require__(6);

	var ColumnChartSeries = snippet.defineClass(Series, /** @lends ColumnChartSeries.prototype */ {
	    /**
	     * Column chart series component.
	     * @constructs ColumnChartSeries
	     * @private
	     * @extends Series
	     * @param {object} params parameters
	     *      @param {object} params.model series model
	     *      @param {object} params.options series options
	     *      @param {object} params.theme series theme
	     */
	    init: function() {
	        Series.apply(this, arguments);
	    },

	    /**
	     * Make bound of column chart.
	     * @param {number} width width
	     * @param {number} height height
	     * @param {number} left top position value
	     * @param {number} startTop start top position value
	     * @param {number} endTop end top position value
	     * @returns {{
	     *      start: {left: number, top: number, width: number, height: number},
	     *      end: {left: number, top: number, width: number, height: number}
	     * }} column chart bound
	     * @private
	     */
	    _makeBound: function(width, height, left, startTop, endTop) {
	        return {
	            start: {
	                top: startTop,
	                left: left,
	                width: width,
	                height: 0
	            },
	            end: {
	                top: endTop,
	                left: left,
	                width: width,
	                height: height
	            }
	        };
	    },

	    /**
	     * Make column chart bound.
	     * @param {{
	     *      baseBarSize: number,
	     *      groupSize: number,
	     *      barSize: number,
	     *      pointInterval: number,
	     *      firstAdditionalPosition: number,
	     *      basePosition: number
	     * }} baseData base data for making bound
	     * @param {{
	     *      baseLeft: number,
	     *      left: number,
	     *      plusTop: number,
	     *      minusTop: number,
	     *      prevStack: ?string
	     * }} iterationData iteration data
	     * @param {?boolean} isStackType whether stackType option or not.
	     * @param {SeriesItem} seriesItem series item
	     * @param {number} index index
	     * @returns {{
	     *      start: {left: number, top: number, width: number, height: number},
	     *      end: {left: number, top: number, width: number, height: number}
	     * }}
	     * @private
	     */
	    _makeColumnChartBound: function(baseData, iterationData, isStackType, seriesItem, index) {
	        var barHeight = Math.abs(baseData.baseBarSize * seriesItem.ratioDistance);
	        var barStartTop = baseData.baseBarSize * seriesItem.startRatio;
	        var startTop = baseData.basePosition + barStartTop + chartConst.SERIES_EXPAND_SIZE;
	        var changedStack = (seriesItem.stack !== iterationData.prevStack);
	        var pointCount, endTop, bound, boundLeft;
	        var isOverLapBar = (baseData.barSize * baseData.itemCount > baseData.groupSize);
	        var columnInterval = isOverLapBar ? baseData.pointInterval : baseData.barSize;

	        if (!isStackType || (!this.options.diverging && changedStack)) {
	            pointCount = isStackType ? this.dataProcessor.findStackIndex(seriesItem.stack) : index;
	            iterationData.left = iterationData.baseLeft + (columnInterval * pointCount);
	            iterationData.plusTop = 0;
	            iterationData.minusTop = 0;
	        }

	        if (seriesItem.value >= 0) {
	            iterationData.plusTop -= barHeight;
	            endTop = startTop + iterationData.plusTop;
	        } else {
	            endTop = startTop + iterationData.minusTop;
	            iterationData.minusTop += barHeight;
	        }

	        iterationData.prevStack = seriesItem.stack;

	        if (isOverLapBar) {
	            boundLeft = iterationData.left + baseData.pointInterval - (baseData.barSize / 2);
	        } else {
	            boundLeft = iterationData.left + baseData.pointInterval - (baseData.barSize / 2)
	                + ((baseData.pointInterval - baseData.barSize) / 2 * (baseData.itemCount - 1));
	        }

	        bound = this._makeBound(baseData.barSize, barHeight, boundLeft, startTop, endTop);

	        return bound;
	    },

	    /**
	     * Make bounds of column chart.
	     * @returns {Array.<Array.<object>>} bounds
	     * @private
	     */
	    _makeBounds: function() {
	        var self = this;
	        var seriesDataModel = this._getSeriesDataModel();
	        var isStackType = predicate.isValidStackOption(this.options.stackType);
	        var dimension = this.layout.dimension;
	        var baseData = this._makeBaseDataForMakingBound(dimension.width, dimension.height);

	        return seriesDataModel.map(function(seriesGroup, groupIndex) {
	            var baseLeft = (groupIndex * baseData.groupSize) + self.layout.position.left;
	            var iterationData = {
	                baseLeft: baseLeft,
	                left: baseLeft,
	                plusTop: 0,
	                minusTop: 0,
	                prevStack: null
	            };
	            var iteratee = snippet.bind(self._makeColumnChartBound, self, baseData, iterationData, isStackType);

	            return seriesGroup.map(iteratee);
	        });
	    },

	    /**
	     * Calculate left position of sum label.
	     * @param {{left: number, top: number}} bound bound
	     * @param {string} formattedSum formatted sum.
	     * @returns {number} left position value
	     * @private
	     */
	    _calculateLeftPositionOfSumLabel: function(bound, formattedSum) {
	        var labelWidth = renderUtil.getRenderedLabelWidth(formattedSum, this.theme.label);

	        return bound.left + ((bound.width - labelWidth + chartConst.TEXT_PADDING) / 2);
	    }
	});

	BarTypeSeriesBase.mixin(ColumnChartSeries);

	function columnSeriesFactory(params) {
	    var libType = params.chartOptions.libType;
	    var chartTheme = params.chartTheme;

	    params.libType = libType;
	    params.chartType = 'column';
	    params.chartBackground = chartTheme.chart.background;

	    return new ColumnChartSeries(params);
	}

	columnSeriesFactory.componentType = 'series';
	columnSeriesFactory.ColumnChartSeries = ColumnChartSeries;

	module.exports = columnSeriesFactory;


/***/ }),
/* 85 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileoverview Line chart series component.
	 * @author NHN Ent.
	 *         FE Development Lab <dl_javascript@nhnent.com>
	 */

	'use strict';

	var Series = __webpack_require__(81);

	var LineTypeSeriesBase = __webpack_require__(86);
	var snippet = __webpack_require__(6);

	var LineChartSeries = snippet.defineClass(Series, /** @lends LineChartSeries.prototype */ {
	    /**
	     * Line chart series component.
	     * @constructs LineChartSeries
	     * @private
	     * @extends Series
	     * @mixes LineTypeSeriesBase
	     * @param {object} params parameters
	     *      @param {object} params.model series model
	     *      @param {object} params.options series options
	     *      @param {object} params.theme series theme
	     */
	    init: function() {
	        Series.apply(this, arguments);

	        /**
	         * object for requestAnimationFrame
	         * @type {null | {id: number}}
	         */
	        this.movingAnimation = null;
	    },

	    /**
	     * Make positions for rendering graph and sending to mouse event detector.
	     * @param {number} [seriesWidth] - series width
	     * @returns {Array.<Array.<{left: number, top: number}>>} positions
	     * @private
	     */
	    _makePositions: function(seriesWidth) {
	        return this._makeBasicPositions(seriesWidth);
	    },

	    /**
	     * Make series data for rendering graph and sending to mouse event detector.
	     * @returns {object} series data
	     * @private
	     * @override
	     */
	    _makeSeriesData: function() {
	        var groupPositions = this._makePositions();

	        return {
	            chartBackground: this.chartBackground,
	            groupPositions: groupPositions,
	            isAvailable: function() {
	                return groupPositions && groupPositions.length > 0;
	            }
	        };
	    },

	    /**
	     * Rerender.
	     * @param {object} data - data for rerendering
	     * @override
	     */
	    rerender: function(data) {
	        var paper;

	        this._cancelMovingAnimation();

	        paper = Series.prototype.rerender.call(this, data);

	        return paper;
	    }
	});

	LineTypeSeriesBase.mixin(LineChartSeries);

	function lineSeriesFactory(params) {
	    var libType = params.chartOptions.libType;
	    var chartTheme = params.chartTheme;

	    params.libType = libType;
	    params.chartType = 'line';
	    params.chartBackground = chartTheme.chart.background;

	    return new LineChartSeries(params);
	}

	lineSeriesFactory.componentType = 'series';

	module.exports = lineSeriesFactory;


/***/ }),
/* 86 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileoverview LineTypeSeriesBase is base class for line type series.
	 * @author NHN Ent.
	 *         FE Development Lab <dl_javascript@nhnent.com>
	 */

	'use strict';

	var arrayUtil = __webpack_require__(10);
	var chartConst = __webpack_require__(8);
	var predicate = __webpack_require__(21);
	var calculator = __webpack_require__(45);
	var renderUtil = __webpack_require__(7);
	var snippet = __webpack_require__(6);

	/**
	 * @classdesc LineTypeSeriesBase is base class for line type series.
	 * @class LineTypeSeriesBase
	 * @private
	 * @mixin
	 * @private */
	var LineTypeSeriesBase = snippet.defineClass(/** @lends LineTypeSeriesBase.prototype */ {
	    /**
	     * Make positions for default data type.
	     * @param {number} [seriesWidth] - width of series area
	     * @returns {Array.<Array.<object>>}
	     * @private
	     */
	    _makePositionsForDefaultType: function(seriesWidth) {
	        var dimension = this.layout.dimension;
	        var seriesDataModel = this._getSeriesDataModel();
	        var width = seriesWidth || dimension.width || 0;
	        var height = dimension.height;
	        var len = seriesDataModel.getGroupCount();
	        var baseTop = this.layout.position.top;
	        var baseLeft = this.layout.position.left;
	        var step;

	        if (this.aligned) {
	            step = width / (len > 1 ? (len - 1) : len);
	        } else {
	            step = width / len;
	            baseLeft += (step / 2);
	        }

	        return seriesDataModel.map(function(seriesGroup) {
	            return seriesGroup.map(function(seriesItem, index) {
	                var position;

	                if (!snippet.isNull(seriesItem.end)) {
	                    position = {
	                        left: baseLeft + (step * index),
	                        top: baseTop + height - (seriesItem.ratio * height)
	                    };

	                    if (snippet.isExisty(seriesItem.startRatio)) {
	                        position.startTop = baseTop + height - (seriesItem.startRatio * height);
	                    }
	                }

	                return position;
	            });
	        }, true);
	    },

	    /**
	     * Make positions for coordinate data type.
	     * @param {number} [seriesWidth] - width of series area
	     * @returns {Array.<Array.<object>>}
	     * @private
	     */
	    _makePositionForCoordinateType: function(seriesWidth) {
	        var dimension = this.layout.dimension;
	        var seriesDataModel = this._getSeriesDataModel();
	        var width = seriesWidth || dimension.width || 0;
	        var height = dimension.height;
	        var xAxis = this.axisDataMap.xAxis;
	        var additionalLeft = 0;
	        var baseTop = this.layout.position.top;
	        var baseLeft = this.layout.position.left;

	        if (xAxis.sizeRatio) {
	            additionalLeft = calculator.multiply(width, xAxis.positionRatio);
	            width = calculator.multiply(width, xAxis.sizeRatio);
	        }

	        return seriesDataModel.map(function(seriesGroup) {
	            return seriesGroup.map(function(seriesItem) {
	                var position;

	                if (!snippet.isNull(seriesItem.end)) {
	                    position = {
	                        left: baseLeft + (seriesItem.ratioMap.x * width) + additionalLeft,
	                        top: baseTop + height - (seriesItem.ratioMap.y * height)
	                    };

	                    if (snippet.isExisty(seriesItem.ratioMap.start)) {
	                        position.startTop =
	                            height - (seriesItem.ratioMap.start * height) + chartConst.SERIES_EXPAND_SIZE;
	                    }
	                }

	                return position;
	            });
	        }, true);
	    },

	    /**
	     * Make basic positions for rendering line graph.
	     * @param {number} [seriesWidth] - width of series area
	     * @returns {Array.<Array.<object>>}
	     * @private
	     */
	    _makeBasicPositions: function(seriesWidth) {
	        var positions;

	        if (this.dataProcessor.isCoordinateType()) {
	            positions = this._makePositionForCoordinateType(seriesWidth);
	        } else {
	            positions = this._makePositionsForDefaultType(seriesWidth);
	        }

	        return positions;
	    },

	    /**
	     * Calculate label position top.
	     * @param {{top: number, startTop: number}} basePosition - base position
	     * @param {number} value - value of seriesItem
	     * @param {number} labelHeight - label height
	     * @param {boolean} [isStart] - whether start value of seriesItem or not
	     * @returns {number} position top
	     * @private
	     */
	    _calculateLabelPositionTop: function(basePosition, value, labelHeight, isStart) {
	        var baseTop = basePosition.top,
	            top;

	        if (predicate.isValidStackOption(this.options.stackType)) {
	            top = ((basePosition.startTop + baseTop - labelHeight) / 2) + 1;
	        } else if ((value >= 0 && !isStart) || (value < 0 && isStart)) {
	            top = baseTop - labelHeight - chartConst.SERIES_LABEL_PADDING;
	        } else {
	            top = baseTop + chartConst.SERIES_LABEL_PADDING;
	        }

	        return top;
	    },

	    /**
	     * Make label position for rendering label of series area.
	     * @param {{left: number, top: number, startTop: ?number}} basePosition - base position for calculating
	     * @param {number} labelHeight - label height
	     * @param {(string | number)} label - label of seriesItem
	     * @param {number} value - value of seriesItem
	     * @param {boolean} [isStart] - whether start label position or not
	     * @returns {{left: number, top: number}}
	     * @private
	     */
	    _makeLabelPosition: function(basePosition, labelHeight, label, value, isStart) {
	        return {
	            left: basePosition.left,
	            top: this._calculateLabelPositionTop(basePosition, value, labelHeight / 2, isStart)

	        };
	    },

	    /**
	     * Get label positions for line type chart
	     * @param {object} seriesDataModel series data model
	     * @param {object} theme label theme
	     * @returns {object}
	     * @private
	     */
	    _getLabelPositions: function(seriesDataModel, theme) {
	        var self = this;
	        var basePositions = arrayUtil.pivot(this.seriesData.groupPositions);
	        var labelHeight = renderUtil.getRenderedLabelHeight(chartConst.MAX_HEIGHT_WORD, theme);

	        return seriesDataModel.map(function(seriesGroup, groupIndex) {
	            return seriesGroup.map(function(seriesItem, index) {
	                var basePosition = basePositions[groupIndex][index];
	                var end = self._makeLabelPosition(basePosition, labelHeight, seriesItem.endLabel, seriesItem.end);
	                var position = {
	                    end: end
	                };

	                if (seriesItem.isRange) {
	                    basePosition.top = basePosition.startTop;
	                    position.start =
	                        self._makeLabelPosition(basePosition, labelHeight, seriesItem.startLabel, seriesItem.start);
	                }

	                return position;
	            });
	        });
	    },

	    /**
	     * Get label texts
	     * @param {object} seriesDataModel sereis data model
	     * @returns {Array.<string>}
	     * @private
	     */
	    _getLabelTexts: function(seriesDataModel) {
	        return seriesDataModel.map(function(seriesGroup) {
	            return seriesGroup.map(function(seriesDatum) {
	                var label = {
	                    end: seriesDatum.endLabel
	                };

	                if (seriesDatum.isRange) {
	                    label.start = seriesDatum.startLabel;
	                }

	                return label;
	            });
	        });
	    },

	    /**
	     * Render series label.
	     * @param {object} paper paper
	     * @returns {Array.<object>}
	     * @private
	     */
	    _renderSeriesLabel: function(paper) {
	        var theme = this.theme.label;
	        var seriesDataModel = this._getSeriesDataModel();
	        var groupLabels = this._getLabelTexts(seriesDataModel);
	        var positionsSet = this._getLabelPositions(seriesDataModel, theme);

	        return this.graphRenderer.renderSeriesLabel(paper, positionsSet, groupLabels, theme);
	    },

	    /**
	     * To call showGroupTooltipLine function of graphRenderer.
	     * @param {{
	     *      dimension: {width: number, height: number},
	     *      position: {left: number, top: number}
	     * }} bound bound
	     */
	    onShowGroupTooltipLine: function(bound) {
	        if (!this.graphRenderer.showGroupTooltipLine) {
	            return;
	        }

	        this.graphRenderer.showGroupTooltipLine(bound, this.layout);
	    },

	    /**
	     * To call hideGroupTooltipLine function of graphRenderer.
	     */
	    onHideGroupTooltipLine: function() {
	        if (!this.seriesData
	            || !this.seriesData.isAvailable()
	            || !this.graphRenderer.hideGroupTooltipLine
	        ) {
	            return;
	        }
	        this.graphRenderer.hideGroupTooltipLine();
	    },

	    /**
	     * Zoom by mouse drag.
	     * @param {object} data - data
	     */
	    zoom: function(data) {
	        this._cancelMovingAnimation();
	        this._clearSeriesContainer(data.paper);
	        this._setDataForRendering(data);
	        this._renderSeriesArea(data.paper, snippet.bind(this._renderGraph, this));
	        this.animateComponent(true);

	        if (!snippet.isNull(this.selectedLegendIndex)) {
	            this.graphRenderer.selectLegend(this.selectedLegendIndex);
	        }
	    },

	    /**
	     * Whether changed or not.
	     * @param {{min: number, max: number}} before - before limit
	     * @param {{min: number, max: number}} after - after limit
	     * @returns {boolean}
	     * @private
	     */
	    _isChangedLimit: function(before, after) {
	        return before.min !== after.min || before.max !== after.max;
	    },

	    /**
	     * Whether changed axis limit(min, max) or not.
	     * @returns {boolean}
	     * @private
	     */
	    _isChangedAxisLimit: function() {
	        var beforeAxisDataMap = this.beforeAxisDataMap;
	        var axisDataMap = this.axisDataMap;
	        var changed = true;

	        if (beforeAxisDataMap) {
	            changed = this._isChangedLimit(beforeAxisDataMap.yAxis.limit, axisDataMap.yAxis.limit);

	            if (axisDataMap.xAxis.limit) {
	                changed = changed || this._isChangedLimit(beforeAxisDataMap.xAxis.limit, axisDataMap.xAxis.limit);
	            }
	        }

	        this.beforeAxisDataMap = axisDataMap;

	        return changed;
	    },

	    /**
	     * Animate for motion of series area.
	     * @param {function} callback - callback function
	     * @private
	     */
	    _animate: function(callback) {
	        var self = this;
	        var duration = chartConst.ADDING_DATA_ANIMATION_DURATION;
	        var changedLimit = this._isChangedAxisLimit();

	        if (changedLimit && this.seriesLabelContainer) {
	            this.seriesLabelContainer.innerHTML = '';
	        }

	        if (!callback) {
	            return;
	        }

	        this.movingAnimation = renderUtil.startAnimation(duration, callback, function() {
	            self.movingAnimation = null;
	        });
	    },

	    /**
	     * Make top of zero point for adding data.
	     * @returns {number}
	     * @private
	     * @override
	     */
	    _makeZeroTopForAddingData: function() {
	        var seriesHeight = this.layout.dimension.height;
	        var limit = this.axisDataMap.yAxis.limit;

	        return this._getLimitDistanceFromZeroPoint(seriesHeight, limit).toMax + chartConst.SERIES_EXPAND_SIZE;
	    },

	    /**
	     * Animate for adding data.
	     * @param {{tickSize: number}} data - parameters for adding data.
	     */
	    animateForAddingData: function(data) {
	        var dimension = this.dimensionMap.extendedSeries;
	        var seriesWidth = this.layout.dimension.width;
	        var tickSize = data.tickSize;
	        var shiftingOption = this.options.shifting;
	        var seriesData, paramsForRendering, groupPositions, zeroTop;

	        this.limit = data.limitMap[this.chartType];
	        this.axisDataMap = data.axisDataMap;

	        seriesData = this._makeSeriesData();
	        paramsForRendering = this._makeParamsForGraphRendering(dimension, seriesData);

	        if (shiftingOption) {
	            seriesWidth += tickSize;
	        }

	        groupPositions = this._makePositions(seriesWidth);
	        zeroTop = this._makeZeroTopForAddingData();

	        this.graphRenderer.animateForAddingData(paramsForRendering, tickSize, groupPositions, shiftingOption, zeroTop);
	    },

	    /**
	     * Cancel moving animation.
	     * @private
	     */
	    _cancelMovingAnimation: function() {
	        if (this.movingAnimation) {
	            cancelAnimationFrame(this.movingAnimation.id);
	            this.movingAnimation = null;
	        }
	    }
	});

	LineTypeSeriesBase.mixin = function(func) {
	    snippet.extend(func.prototype, LineTypeSeriesBase.prototype);
	};

	module.exports = LineTypeSeriesBase;


/***/ }),
/* 87 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileoverview Radial chart series component.
	 * @author NHN Ent.
	 *         FE Development Lab <dl_javascript@nhnent.com>
	 */

	'use strict';

	var Series = __webpack_require__(81);
	var chartConst = __webpack_require__(8);
	var geom = __webpack_require__(49);
	var snippet = __webpack_require__(6);

	var RadialChartSeries = snippet.defineClass(Series, /** @lends RadialChartSeries.prototype */ {
	    /**
	     * Line chart series component.
	     * @constructs RadialChartSeries
	     * @private
	     * @extends Series
	     * @param {object} params parameters
	     *      @param {object} params.model series model
	     *      @param {object} params.options series options
	     *      @param {object} params.theme series theme
	     */
	    init: function() {
	        Series.apply(this, arguments);

	        this.options = snippet.extend({
	            showDot: false,
	            showArea: false
	        }, this.options);

	        /**
	         * object for requestAnimationFrame
	         * @type {null | {id: number}}
	         */
	        this.movingAnimation = null;

	        this.drawingType = chartConst.COMPONENT_TYPE_RAPHAEL;
	    },

	    /**
	     * Make positions data for radial series
	     * @param {Array.<Array>} seriesGroups series data per category
	     * @param {number} groupCount category count
	     * @returns {Array.<Array.<object>>}
	     * @private
	     */
	    _makePositionsForRadial: function(seriesGroups, groupCount) {
	        var layout = this.layout;
	        var dimension = layout.dimension;
	        var width = dimension.width - chartConst.RADIAL_PLOT_PADDING - chartConst.RADIAL_MARGIN_FOR_CATEGORY;
	        var height = dimension.height - chartConst.RADIAL_PLOT_PADDING - chartConst.RADIAL_MARGIN_FOR_CATEGORY;
	        var centerX = (width / 2) + (chartConst.RADIAL_PLOT_PADDING / 2) + (chartConst.RADIAL_MARGIN_FOR_CATEGORY / 2)
	            + layout.position.left;
	        var centerY = (height / 2) - (chartConst.RADIAL_PLOT_PADDING / 2) - (chartConst.RADIAL_MARGIN_FOR_CATEGORY / 2)
	            - layout.position.top;

	        var stepAngle = 360 / groupCount;
	        var radius;

	        radius = Math.min(width, height) / 2;

	        return snippet.map(seriesGroups, function(seriesGroup) {
	            var positions = snippet.map(seriesGroup, function(seriesItem, index) {
	                var position, y, angle, point, valueSize;

	                if (!snippet.isNull(seriesItem.end)) {
	                    valueSize = seriesItem.ratio * radius;

	                    // center y + real vaule size
	                    y = centerY + valueSize;

	                    // turn angle to clockwise
	                    angle = 360 - (stepAngle * index);

	                    point = geom.rotatePointAroundOrigin(centerX, centerY, centerX, y, angle);

	                    position = {
	                        left: point.x,
	                        top: height - point.y // convert y coordinate to top
	                    };
	                }

	                return position;
	            });

	            positions.push(positions[0]);

	            return positions;
	        }, true);
	    },

	    /**
	     * Get pivoted seriesGroups
	     * @returns {Array.<Array>} series group
	     * @private
	     */
	    _getSeriesGroups: function() {
	        var seriesDataModel = this._getSeriesDataModel();

	        return seriesDataModel.map(function(group) {
	            return group.map(function(item) {
	                return item;
	            });
	        }, true);
	    },

	    /**
	     * Make series data for rendering graph and sending to mouse event detector.
	     * @returns {object} series data
	     * @private
	     * @override
	     */
	    _makeSeriesData: function() {
	        var groups = this._getSeriesGroups();
	        var groupPositions = this._makePositionsForRadial(groups, this._getSeriesDataModel().getGroupCount());

	        return {
	            groupPositions: groupPositions,
	            isAvailable: function() {
	                return groupPositions && groupPositions.length > 0;
	            }
	        };
	    },

	    /**
	     * Rerender.
	     * @param {object} data - data for rerendering
	     * @returns {Raphael.Paper} raphael paper
	     * @override
	     */
	    rerender: function(data) {
	        return Series.prototype.rerender.call(this, data);
	    }
	});

	function radialSeriesFactory(params) {
	    var chartType = params.chartOptions.chartType;
	    var libType = params.chartOptions.libType;
	    var chartTheme = params.chartTheme;

	    params.libType = libType;
	    params.chartType = chartType;
	    params.chartBackground = chartTheme.background;

	    return new RadialChartSeries(params);
	}

	radialSeriesFactory.componentType = 'series';
	radialSeriesFactory.RadialChartSeries = RadialChartSeries;

	module.exports = radialSeriesFactory;


/***/ }),
/* 88 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileoverview Area chart series component.
	 * @author NHN Ent.
	 *         FE Development Lab <dl_javascript@nhnent.com>
	 */

	'use strict';

	var Series = __webpack_require__(81);
	var LineTypeSeriesBase = __webpack_require__(86);
	var predicate = __webpack_require__(21);
	var snippet = __webpack_require__(6);

	var AreaChartSeries = snippet.defineClass(Series, /** @lends AreaChartSeries.prototype */ {
	    /**
	     * Area chart series component.
	     * @constructs AreaChartSeries
	     * @private
	     * @extends Series
	     * @mixes LineTypeSeriesBase
	     */
	    init: function() {
	        Series.apply(this, arguments);

	        /**
	         * object for requestAnimationFrame
	         * @type {null | {id: number}}
	         */
	        this.movingAnimation = null;
	    },

	    /**
	     * Make position top of zero point.
	     * @returns {number} position top
	     * @private
	     */
	    _makePositionTopOfZeroPoint: function() {
	        var dimension = this.layout.dimension;
	        var limit = this.axisDataMap.yAxis.limit;
	        var baseTop = this.layout.position.top;
	        var top = this._getLimitDistanceFromZeroPoint(dimension.height, limit).toMax + baseTop;

	        if (limit.min >= 0 && !top) {
	            top = dimension.height;
	        }

	        return top;
	    },

	    /**
	     * Make positions, when has stackType option.
	     * @param {Array.<Array.<{left: number, top: number}>>} groupPositions group positions
	     * @returns {Array.<Array.<{left: number, top: number, startTop: number}>>} stackType positions
	     * @private
	     */
	    _makeStackedPositions: function(groupPositions) {
	        var height = this.layout.dimension.height;
	        var baseTop = this.layout.position.top;
	        var firstStartTop = this._makePositionTopOfZeroPoint();
	        var prevPositionTops = [];

	        return snippet.map(groupPositions, function(positions) {
	            return snippet.map(positions, function(position, index) {
	                var prevTop = prevPositionTops[index] || firstStartTop;
	                var positionTop = position ? position.top : 0;
	                var stackedHeight = height - positionTop + baseTop;
	                var top = position ? prevTop - stackedHeight : prevTop;

	                if (position) {
	                    position.startTop = prevTop;
	                    position.top = top;
	                }

	                prevPositionTops[index] = top;

	                return position;
	            });
	        });
	    },

	    /**
	     * Make series positions.
	     * @param {number} seriesWidth - width of series area
	     * @returns {Array.<Array.<{left: number, top: number, startTop: number}>>} stackType positions
	     * @private
	     */
	    _makePositions: function(seriesWidth) {
	        var groupPositions = this._makeBasicPositions(seriesWidth);

	        if (predicate.isValidStackOption(this.options.stackType)) {
	            groupPositions = this._makeStackedPositions(groupPositions);
	        }

	        return groupPositions;
	    },

	    /**
	     * Make series data.
	     * @returns {object} series data
	     * @private
	     * @override
	     */
	    _makeSeriesData: function() {
	        var dimension = this.layout.dimension;
	        var baseTop = this.layout.position.top;
	        var zeroTop = this._getLimitDistanceFromZeroPoint(dimension.height, this.limit).toMax + baseTop;
	        var groupPositions = this._makePositions();

	        return {
	            chartBackground: this.chartBackground,
	            groupPositions: groupPositions,
	            hasRangeData: this._getSeriesDataModel().hasRangeData(),
	            zeroTop: zeroTop,
	            isAvailable: function() {
	                return groupPositions && groupPositions.length > 0;
	            }
	        };
	    },

	    /**
	     * Rerender.
	     * @param {object} data - data for rerendering
	     * @override
	     */
	    rerender: function(data) {
	        var paper;

	        this._cancelMovingAnimation();

	        paper = Series.prototype.rerender.call(this, data);

	        return paper;
	    }
	});

	LineTypeSeriesBase.mixin(AreaChartSeries);

	function areaSeriesFactory(params) {
	    var libType = params.chartOptions.libType;
	    var chartTheme = params.chartTheme;

	    params.libType = libType;
	    params.chartType = 'area';
	    params.chartBackground = chartTheme.chart.background;

	    return new AreaChartSeries(params);
	}

	areaSeriesFactory.componentType = 'series';
	areaSeriesFactory.AreaChartSeries = AreaChartSeries;

	module.exports = areaSeriesFactory;


/***/ }),
/* 89 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileoverview Bubble chart series component.
	 * @author NHN Ent.
	 *         FE Development Lab <dl_javascript@nhnent.com>
	 */

	'use strict';

	var chartConst = __webpack_require__(8);
	var Series = __webpack_require__(81);
	var CoordinateTypeSeriesBase = __webpack_require__(90);
	var snippet = __webpack_require__(6);

	var BubbleChartSeries = snippet.defineClass(Series, /** @lends BubbleChartSeries.prototype */ {
	    /**
	     * Bubble chart series component.
	     * @constructs BubbleChartSeries
	     * @private
	     * @extends Series
	     */
	    init: function() {
	        /**
	         * previous clicked index.
	         * @type {?number}
	         */
	        this.prevClickedIndex = null;

	        /**
	         * max radius for rendering circle graph
	         * @type {null|number}
	         */
	        this.maxRadius = null;

	        this.drawingType = chartConst.COMPONENT_TYPE_RAPHAEL;

	        Series.apply(this, arguments);
	    },

	    /**
	     * Calculate step value for label axis.
	     * @returns {number}
	     * @private
	     */
	    _calculateStep: function() {
	        var step = 0;
	        var dimension, size, len;
	        var hasVerticalCategory = this.dataProcessor.isXCountGreaterThanYCount(this.chartType);

	        if (this.dataProcessor.hasCategories(hasVerticalCategory)) {
	            dimension = this.layout.dimension;
	            len = this.dataProcessor.getCategoryCount(hasVerticalCategory);

	            if (hasVerticalCategory) {
	                size = dimension.height;
	            } else {
	                size = dimension.width;
	            }

	            step = size / len;
	        }

	        return step;
	    },

	    /**
	     * Make bound for bubble chart.
	     * @param {{x: number, y: number, r: number}} ratioMap - ratio map
	     * @param {number} positionByStep - position value by step
	     * @param {number} maxRadius - max radius
	     * @returns {{left: number, top: number, radius: number}}
	     * @private
	     */
	    _makeBound: function(ratioMap, positionByStep, maxRadius) {
	        var dimension = this.layout.dimension;
	        var position = this.layout.position;
	        var left = snippet.isExisty(ratioMap.x) ? (ratioMap.x * dimension.width) : positionByStep;
	        var top = snippet.isExisty(ratioMap.y) ? (ratioMap.y * dimension.height) : positionByStep;

	        return {
	            left: position.left + left,
	            top: position.top + dimension.height - top,
	            radius: Math.max(maxRadius * ratioMap.r, 2)
	        };
	    },

	    /**
	     * Make bounds for bubble chart.
	     * @returns {Array.<Array.<{left: number, top: number, radius: number}>>} positions
	     * @private
	     */
	    _makeBounds: function() {
	        var self = this;
	        var seriesDataModel = this._getSeriesDataModel();
	        var maxRadius = this.maxRadius;
	        var step = this._calculateStep();
	        var start = step ? step / 2 : 0;

	        return seriesDataModel.map(function(seriesGroup, index) {
	            var positionByStep = start + (step * index);

	            return seriesGroup.map(function(seriesItem) {
	                var hasRationMap = (seriesItem && seriesItem.ratioMap);

	                return hasRationMap ? self._makeBound(seriesItem.ratioMap, positionByStep, maxRadius) : null;
	            });
	        });
	    },

	    /**
	     * Set data for rendering.
	     * @param {{
	     *      paper: ?object,
	     *      limit: {
	     *          min: number,
	     *          max: number
	     *      },
	     *      aligned: boolean,
	     *      layout: {
	     *          dimension: {width: number, height: number},
	     *          position: {left: number, top: number}
	     *      },
	     *      dimensionMap: object,
	     *      positionMap: object,
	     *      axisDataMap: object,
	     *      maxRadius: number
	     * }} data - data for rendering
	     * @private
	     */
	    _setDataForRendering: function(data) {
	        this.maxRadius = data.maxRadius;
	        Series.prototype._setDataForRendering.call(this, data);
	    }
	});

	CoordinateTypeSeriesBase.mixin(BubbleChartSeries);

	function bubbleSeriesFactory(params) {
	    var libType = params.chartOptions.libType;
	    var chartTheme = params.chartTheme;

	    params.libType = libType;
	    params.chartType = 'bubble';
	    params.chartBackground = chartTheme.chart.background;

	    return new BubbleChartSeries(params);
	}

	bubbleSeriesFactory.componentType = 'series';
	bubbleSeriesFactory.BubbleChartSeries = BubbleChartSeries;

	module.exports = bubbleSeriesFactory;


/***/ }),
/* 90 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileoverview CoordinateTypeSeriesBase is base class for coordinate type series.
	 * @author NHN Ent.
	 *         FE Development Lab <dl_javascript@nhnent.com>
	 */

	'use strict';

	var snippet = __webpack_require__(6);
	var CoordinateTypeSeriesBase = snippet.defineClass(/** @lends CoordinateTypeSeriesBase.prototype */ {
	    /**
	     * Make series data.
	     * @returns {{
	     *      groupBounds: Array.<Array.<{left: number, top: number, radius: number}>>,
	     *      seriesDataModel: SeriesDataModel
	     * }} series data
	     * @private
	     * @override
	     */
	    _makeSeriesData: function() {
	        var groupBounds = this._makeBounds();

	        return {
	            groupBounds: groupBounds,
	            seriesDataModel: this._getSeriesDataModel(),
	            isAvailable: function() {
	                return groupBounds && groupBounds.length > 0;
	            }
	        };
	    },

	    /**
	     * showTooltip is callback of mouseover event to series element.
	     * @param {object} params parameters
	     *      @param {boolean} params.allowNegativeTooltip whether allow negative tooltip or not
	     * @param {{top:number, left: number, width: number, height: number}} bound graph bound information
	     * @param {number} groupIndex group index
	     * @param {number} index index
	     * @param {{left: number, top: number}} mousePosition mouse position
	     */
	    showTooltip: function(params, bound, groupIndex, index, mousePosition) {
	        this.eventBus.fire('showTooltip', snippet.extend({
	            indexes: {
	                groupIndex: groupIndex,
	                index: index
	            },
	            mousePosition: mousePosition
	        }, params));
	    },

	    /**
	     * hideTooltip is callback of mouseout event to series element.
	     */
	    hideTooltip: function() {
	        this.eventBus.fire('hideTooltip');
	    },

	    /**
	     * Render raphael graph.
	     * @param {{width: number, height: number}} dimension dimension
	     * @param {object} seriesData series data
	     * @param {object} paper paper object
	     * @private
	     * @override
	     */
	    _renderGraph: function(dimension, seriesData, paper) {
	        var showTooltip = snippet.bind(this.showTooltip, this, {
	            chartType: this.chartType
	        });
	        var callbacks = {
	            showTooltip: showTooltip,
	            hideTooltip: snippet.bind(this.hideTooltip, this)
	        };
	        var params = this._makeParamsForGraphRendering(dimension, seriesData);

	        return this.graphRenderer.render(paper, params, callbacks);
	    },

	    /**
	     * If click series, showing selected state.
	     * @param {{left: number, top: number}} position - mouse position
	     */
	    onClickSeries: function(position) {
	        var indexes = this._executeGraphRenderer(position, 'findIndexes');
	        var prevIndexes = this.prevClickedIndexes;
	        var allowSelect = this.options.allowSelect;
	        var shouldSelect;

	        if (indexes && prevIndexes) {
	            this.onUnselectSeries({
	                chartType: this.chartType,
	                indexes: prevIndexes
	            });
	            this.prevClickedIndexes = null;
	        }

	        if (!indexes) {
	            return;
	        }

	        shouldSelect = !prevIndexes ||
	            (indexes.index !== prevIndexes.index) || (indexes.groupIndex !== prevIndexes.groupIndex);

	        if (allowSelect && shouldSelect) {
	            this.onSelectSeries({
	                chartType: this.chartType,
	                indexes: indexes
	            }, shouldSelect);
	            this.prevClickedIndexes = indexes;
	        }
	    },

	    /**
	     * If mouse move series, call 'moveMouseOnSeries' of graph render.
	     * @param {{left: number, top: number}} position mouse position
	     */
	    onMoveSeries: function(position) {
	        this._executeGraphRenderer(position, 'moveMouseOnSeries');
	    }
	});

	CoordinateTypeSeriesBase.mixin = function(func) {
	    snippet.extend(func.prototype, CoordinateTypeSeriesBase.prototype);
	};

	module.exports = CoordinateTypeSeriesBase;


/***/ }),
/* 91 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileoverview Scatter chart series component.
	 * @author NHN Ent.
	 *         FE Development Lab <dl_javascript@nhnent.com>
	 */

	'use strict';

	var Series = __webpack_require__(81);
	var CoordinateTypeSeriesBase = __webpack_require__(90);
	var chartConst = __webpack_require__(8);
	var snippet = __webpack_require__(6);

	var ScatterChartSeries = snippet.defineClass(Series, /** @lends ScatterChartSeries.prototype */ {
	    /**
	     * Scatter chart series component.
	     * @constructs ScatterChartSeries
	     * @private
	     * @extends Series
	     */
	    init: function() {
	        /**
	         * previous clicked index.
	         * @type {?number}
	         */
	        this.prevClickedIndex = null;
	        Series.apply(this, arguments);
	    },

	    /**
	     * Make bound for scatter chart.
	     * @param {{x: number, y: number, r: number}} ratioMap - ratio map
	     * @returns {{left: number, top: number, raius: number}}
	     * @private
	     */
	    _makeBound: function(ratioMap) {
	        var dimension = this.layout.dimension;
	        var basePosition = this.layout.position;

	        return {
	            left: basePosition.left + (ratioMap.x * dimension.width),
	            top: dimension.height - (ratioMap.y * dimension.height) + basePosition.top,
	            radius: chartConst.SCATTER_RADIUS
	        };
	    },

	    /**
	     * Make bounds for scatter chart.
	     * @returns {Array.<Array.<{left: number, top: number, radius: number}>>} positions
	     * @private
	     */
	    _makeBounds: function() {
	        var self = this;
	        var seriesDataModel = this._getSeriesDataModel();

	        return seriesDataModel.map(function(seriesGroup) {
	            return seriesGroup.map(function(seriesItem) {
	                var hasRatioMap = (seriesItem && seriesItem.ratioMap);

	                return hasRatioMap ? self._makeBound(seriesItem.ratioMap) : null;
	            });
	        });
	    }
	});

	CoordinateTypeSeriesBase.mixin(ScatterChartSeries);

	function scatterSeriesFactory(params) {
	    var libType = params.chartOptions.libType;
	    var chartTheme = params.chartTheme;

	    params.libType = libType;
	    params.chartType = 'scatter';
	    params.chartBackground = chartTheme.chart.background;

	    return new ScatterChartSeries(params);
	}

	scatterSeriesFactory.componentType = 'series';
	scatterSeriesFactory.ScatterChartSeries = ScatterChartSeries;

	module.exports = scatterSeriesFactory;


/***/ }),
/* 92 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileoverview Map chart series component.
	 * @author NHN Ent.
	 *         FE Development Lab <dl_javascript@nhnent.com>
	 */

	'use strict';

	var Series = __webpack_require__(81);
	var chartConst = __webpack_require__(8);
	var snippet = __webpack_require__(6);

	var browser = snippet.browser;
	var IS_LTE_IE8 = browser.msie && browser.version <= 8;

	var MapChartSeries = snippet.defineClass(Series, /** @lends MapChartSeries.prototype */ {
	    /**
	     * Map chart series component.
	     * @constructs MapChartSeries
	     * @private
	     * @extends Series
	     * @param {object} params parameters
	     *      @param {object} params.options series options
	     *      @param {object} params.theme series theme
	     *      @param {MapChartDataProcessor} params.dataProcessor data processor for map chart
	     */
	    init: function(params) {
	        /**
	         * Base position.
	         * @type {{left: number, top: number}}
	         */
	        this.basePosition = {
	            left: 0,
	            top: 0
	        };

	        /**
	         * Zoom magnification.
	         * @type {number}
	         */
	        this.zoomMagn = 1;

	        /**
	         * Map ratio.
	         * @type {number}
	         */
	        this.mapRatio = 1;

	        /**
	         * Graph dimension.
	         * @type {{}}
	         */
	        this.graphDimension = {};

	        /**
	         * Limit position.
	         * @type {{}}
	         */
	        this.limitPosition = {};

	        /**
	         * Map model.
	         * @type {MapChartMapModel}
	         */
	        this.mapModel = params.mapModel;

	        /**
	         * Color spectrum
	         * @type {ColorSpectrum}
	         */
	        this.colorSpectrum = params.colorSpectrum;

	        /**
	         * Previous mouse position.
	         * @type {?{left: number, top: number}}
	         */
	        this.prevPosition = null;

	        /**
	         * Previous moved index.
	         * @type {?number}
	         */
	        this.prevMovedIndex = null;

	        /**
	         * Whether drag or not.
	         * @type {boolean}
	         */
	        this.isDrag = false;

	        /**
	         * Start position.
	         * @type {?{left: number, top: number}}
	         */
	        this.startPosition = null;

	        Series.call(this, params);
	    },

	    /**
	     * Attach to event bus.
	     * @private
	     */
	    _attachToEventBus: function() {
	        Series.prototype._attachToEventBus.call(this);

	        if (!IS_LTE_IE8) {
	            this.eventBus.on({
	                dragStartMapSeries: this.onDragStartMapSeries,
	                dragMapSeries: this.onDragMapSeries,
	                dragEndMapSeries: this.onDragEndMapSeries,
	                zoomMap: this.onZoomMap
	            }, this);
	        }
	    },

	    /**
	     * Set map ratio.
	     * @param {object} [graphDimension] graph dimension
	     * @private
	     */
	    _setMapRatio: function(graphDimension) {
	        var seriesDimension = this.layout.dimension;
	        var mapDimension = graphDimension || this.mapModel.getMapDimension();
	        var widthRatio = seriesDimension.width / mapDimension.width;
	        var heightRatio = seriesDimension.height / mapDimension.height;

	        this.mapRatio = Math.min(widthRatio, heightRatio);
	    },

	    /**
	     * Set graph dimension.
	     * @private
	     */
	    _setGraphDimension: function() {
	        var seriesDimension = this.layout.dimension;

	        this.graphDimension = {
	            width: seriesDimension.width * this.zoomMagn,
	            height: seriesDimension.height * this.zoomMagn
	        };
	    },

	    /**
	     * Render series component.
	     * @param {object} data data for rendering
	     */
	    render: function(data) {
	        Series.prototype.render.call(this, data);
	        this._setMapRatio();
	    },

	    /**
	     * Set limit position to move map.
	     * @private
	     */
	    _setLimitPositionToMoveMap: function() {
	        var seriesDimension = this.layout.dimension;
	        var graphDimension = this.graphDimension;

	        this.limitPosition = {
	            left: seriesDimension.width - graphDimension.width,
	            top: seriesDimension.height - graphDimension.height
	        };
	    },

	    /**
	     * Render raphael graph.
	     * @private
	     * @override
	     */
	    _renderGraph: function() {
	        this._setGraphDimension();

	        this._setLimitPositionToMoveMap();

	        this.graphRenderer.render(this.paper, {
	            colorSpectrum: this.colorSpectrum,
	            mapModel: this.mapModel,
	            layout: this.layout,
	            theme: this.theme
	        });
	    },

	    /**
	     * Render series label.
	     * @returns {Array.<object>}
	     * @private
	     */
	    _renderSeriesLabel: function() {
	        var labelData = this.mapModel.getLabelData(this.zoomMagn * this.mapRatio);

	        return this.graphRenderer.renderSeriesLabels(this.paper, labelData, this.theme.label);
	    },

	    /**
	     * Render series area.
	     * @param {HTMLElement} seriesContainer series area element
	     * @param {object} data data for rendering
	     * @param {function} funcRenderGraph function for graph rendering
	     * @private
	     */
	    _renderSeriesArea: function(seriesContainer, data, funcRenderGraph) {
	        Series.prototype._renderSeriesArea.call(this, seriesContainer, data, funcRenderGraph);
	    },

	    /**
	     * Adjust map position.
	     * @param {{left: number, top: number}} targetPosition target position
	     * @returns {{left: number, top: number}} adjusted position
	     * @private
	     */
	    _adjustMapPosition: function(targetPosition) {
	        return {
	            left: Math.max(Math.min(targetPosition.left, 0), this.limitPosition.left),
	            top: Math.max(Math.min(targetPosition.top, 0), this.limitPosition.top)
	        };
	    },

	    /**
	     * Update base position for zoom.
	     * @param {{width: number, height: number}} prevDimension previous dimension
	     * @param {{left: number, top: number}} prevLimitPosition previous limit position
	     * @param {number} changedRatio changed ratio
	     * @private
	     */
	    _updateBasePositionForZoom: function(prevDimension, prevLimitPosition, changedRatio) {
	        var prevBasePosition = this.basePosition,
	            prevLeft = prevBasePosition.left - (prevLimitPosition.left / 2),
	            prevTop = prevBasePosition.top - (prevLimitPosition.top / 2),
	            newBasePosition = {
	                left: (prevLeft * changedRatio) + (this.limitPosition.left / 2),
	                top: (prevTop * changedRatio) + (this.limitPosition.top / 2)
	            };

	        this.basePosition = this._adjustMapPosition(newBasePosition);
	    },

	    /**
	     * Zoom.
	     * @param {number} changedRatio changed ratio
	     * @param {object} position position
	     * @private
	     */
	    _zoom: function(changedRatio, position) {
	        var prevDimension = this.graphDimension,
	            prevLimitPosition = this.limitPosition;

	        this._setGraphDimension();

	        this._setLimitPositionToMoveMap();
	        this._updateBasePositionForZoom(prevDimension, prevLimitPosition, changedRatio);

	        this._setMapRatio(this.graphDimension);

	        this.graphRenderer.scaleMapPaths(changedRatio, position, this.mapRatio, prevDimension, prevDimension);
	    },

	    /**
	     * Update positions to resize.
	     * @param {number} prevMapRatio previous ratio
	     * @private
	     */
	    _updatePositionsToResize: function(prevMapRatio) {
	        var changedRatio = this.mapRatio / prevMapRatio;

	        this.basePosition.left *= changedRatio;
	        this.basePosition.top *= changedRatio;

	        this.limitPosition.left *= changedRatio;
	        this.limitPosition.top *= changedRatio;
	    },

	    /**
	     * If click series, showing selected state.
	     * @param {{left: number, top: number}} position - mouse position
	     */
	    onClickSeries: function(position) {
	        var foundIndex = this._executeGraphRenderer(position, 'findSectorIndex');

	        if (!snippet.isNull(foundIndex)) {
	            this.eventBus.fire('selectSeries', {
	                chartType: this.chartType,
	                index: foundIndex,
	                code: this.mapModel.getDatum(foundIndex).code
	            });
	        }
	    },

	    /**
	     * Whether changed position or not.
	     * @param {?{left: number, top: number}} prevPosition previous position
	     * @param {{left: number, top: number}} position position
	     * @returns {boolean} result boolean
	     * @private
	     */
	    _isChangedPosition: function(prevPosition, position) {
	        return !prevPosition || prevPosition.left !== position.left || prevPosition.top !== position.top;
	    },

	    /**
	     * Show wedge of spectrum legend.
	     * @param {number} index map data index
	     * @private
	     */
	    _showWedge: function(index) {
	        var datum = this.mapModel.getDatum(index);

	        if (!snippet.isUndefined(datum.ratio)) {
	            this.eventBus.fire('showWedge', datum.ratio, datum.label);
	        }
	    },

	    /**
	     * Show tooltip.
	     * @param {number} index map data index
	     * @param {{left: number, top: number}} mousePosition mouse position
	     * @private
	     */
	    _showTooltip: function(index, mousePosition) {
	        this.eventBus.fire('showTooltip', {
	            chartType: this.chartType,
	            indexes: {
	                index: index
	            },
	            mousePosition: {
	                left: mousePosition.left,
	                top: mousePosition.top - chartConst.TOOLTIP_GAP
	            }
	        });
	    },

	    /**
	     * On move series.
	     * @param {{left: number, top: number}} position position
	     */
	    onMoveSeries: function(position) {
	        var foundIndex = this._executeGraphRenderer(position, 'findSectorIndex');

	        if (!snippet.isNull(foundIndex)) {
	            if (this.prevMovedIndex !== foundIndex) {
	                if (!snippet.isNull(this.prevMovedIndex)) {
	                    this.graphRenderer.restoreColor(this.prevMovedIndex);
	                    this.eventBus.fire('hideTooltip');
	                }

	                this.graphRenderer.changeColor(foundIndex);
	            }

	            if (this._isChangedPosition(this.prevPosition, position)) {
	                this._showTooltip(foundIndex, {
	                    left: position.left,
	                    top: position.top
	                });
	                this.prevMovedIndex = foundIndex;
	            }

	            this._showWedge(foundIndex);
	        } else if (!snippet.isNull(this.prevMovedIndex)) {
	            this.graphRenderer.restoreColor(this.prevMovedIndex);
	            this.eventBus.fire('hideTooltip');
	            this.prevMovedIndex = null;
	        }
	        this.prevPosition = position;
	    },

	    /**
	     * On drag start series.
	     * @param {{left: number, top: number}} position position
	     */
	    onDragStartMapSeries: function(position) {
	        this.startPosition = {
	            left: position.left,
	            top: position.top
	        };
	    },

	    /**
	     * Move position.
	     * @param {{left: number, top: number}} startPosition start position
	     * @param {{left: number, top: number}} endPosition end position
	     * @private
	     */
	    _movePosition: function(startPosition, endPosition) {
	        var movementPosition = {
	            x: (endPosition.left - startPosition.left) * this.mapRatio,
	            y: (endPosition.top - startPosition.top) * this.mapRatio
	        };

	        this.graphRenderer.moveMapPaths(movementPosition, this.graphDimension);
	    },

	    /**
	     * On drag series.
	     * @param {{left: number, top: number}} position position
	     */
	    onDragMapSeries: function(position) {
	        this._movePosition(this.startPosition, position);

	        this.startPosition = position;

	        if (!this.isDrag) {
	            this.isDrag = true;
	            this.eventBus.fire('hideTooltip');
	        }
	    },

	    /**
	     * On drag end series.
	     */
	    onDragEndMapSeries: function() {
	        this.isDrag = false;
	    },

	    /**
	     * On zoom map.
	     * @param {number} newMagn new zoom magnification
	     * @param {?{left: number, top: number}} position mouse position
	     */
	    onZoomMap: function(newMagn, position) {
	        var changedRatio = newMagn / this.zoomMagn;
	        var positions = this.layout.position;
	        var layerPosition = position ? position : {
	            left: this.layout.dimension.width / 2,
	            top: this.layout.dimension.height / 2
	        };

	        this.zoomMagn = newMagn;

	        this._zoom(changedRatio, {
	            left: layerPosition.left - positions.left,
	            top: layerPosition.top - positions.top
	        });

	        this.eventBus.fire(chartConst.PUBLIC_EVENT_PREFIX + 'zoom', newMagn);
	    },

	    /**
	     * Make exportation data for public event of series type.
	     * @param {object} seriesData - series data
	     * @returns {{
	     *     chartType: string,
	     *     code: string,
	     *     index: number
	     *     }}
	     * @private
	     */
	    _makeExportationSeriesData: function(seriesData) {
	        return seriesData;
	    }
	});

	function mapSeriesFactory(params) {
	    var libType = params.chartOptions.libType;

	    params.libType = libType;
	    params.chartType = 'map';

	    return new MapChartSeries(params);
	}

	mapSeriesFactory.componentType = 'series';
	mapSeriesFactory.MapChartSeries = MapChartSeries;

	module.exports = mapSeriesFactory;


/***/ }),
/* 93 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileoverview Pie chart series component.
	 * @author NHN Ent.
	 *         FE Development Lab <dl_javascript@nhnent.com>
	 */

	'use strict';

	var Series = __webpack_require__(81);
	var chartConst = __webpack_require__(8);
	var predicate = __webpack_require__(21);
	var snippet = __webpack_require__(6);
	var raphaelRenderUtil = __webpack_require__(5);
	var COMBO_PIE1 = 'pie1';

	var PieChartSeries = snippet.defineClass(Series, /** @lends PieChartSeries.prototype */ {
	    /**
	     * Line chart series component.
	     * @constructs PieChartSeries
	     * @private
	     * @extends Series
	     * @param {object} params parameters
	     *      @param {object} params.model series model
	     *      @param {object} params.options series options
	     *      @param {object} params.theme series theme
	     */
	    init: function(params) {
	        Series.call(this, params);

	        this.isCombo = !!params.isCombo;

	        this.isShowOuterLabel = predicate.isShowOuterLabel(this.options);

	        this.isLabelAlignOuter = predicate.isLabelAlignOuter(this.options.labelAlign);

	        this.legendMaxWidth = params.legendMaxWidth;

	        this.drawingType = chartConst.COMPONENT_TYPE_RAPHAEL;

	        /**
	         * range for quadrant.
	         * @type {?number}
	         */
	        this.quadrantRange = null;

	        /**
	         * previous clicked index.
	         * @type {?number}
	         */
	        this.prevClickedIndex = null;

	        /**
	         * series legend names
	         * @type {Array}
	         */
	        this.legendLabels = [];

	        /**
	         * series values.
	         * @type {Array}
	         */
	        this.valueLabels = [];

	        /**
	         * max legend width
	         * @type {number}
	         */
	        this.legendLongestWidth = 0;

	        /**
	         * labelTheme
	         * @type {object}
	         */
	        this.labelTheme = this.theme.label;

	        this._setDefaultOptions();
	    },

	    /**
	     * Make legendlabes
	     * @returns {Array.<string>}
	     * @private
	     */
	    _getLegendLabels: function() {
	        return snippet.map(this.dataProcessor.getLegendLabels(this.seriesType), function(legendName) {
	            return raphaelRenderUtil.getEllipsisText(legendName, this.legendMaxWidth, this.labelTheme);
	        }, this);
	    },

	    /**
	     * Make valid angle.
	     * @param {number} angle - angle
	     * @param {number} defaultAngle - default angle
	     * @returns {number}
	     * @private
	     */
	    _makeValidAngle: function(angle, defaultAngle) {
	        if (snippet.isUndefined(angle)) {
	            angle = defaultAngle;
	        } else if (angle < 0) {
	            angle = chartConst.ANGLE_360 - (Math.abs(angle) % chartConst.ANGLE_360);
	        } else if (angle > 0) {
	            angle = angle % chartConst.ANGLE_360;
	        }

	        return angle;
	    },

	    /**
	     * Transform radius range.
	     * @param {Array.<number>} radiusRange - radius range
	     * @returns {Array}
	     * @private
	     */
	    _transformRadiusRange: function(radiusRange) {
	        radiusRange = radiusRange || ['0%', '100%'];

	        return snippet.map(radiusRange, function(percent) {
	            var ratio = parseInt(percent, 10) * 0.01;

	            return Math.max(Math.min(ratio, 1), 0);
	        });
	    },

	    /**
	     * Set default options for series of pie type chart.
	     * @private
	     */
	    _setDefaultOptions: function() {
	        var options = this.options;

	        options.startAngle = this._makeValidAngle(options.startAngle, 0);
	        options.endAngle = this._makeValidAngle(options.endAngle, options.startAngle);
	        options.radiusRange = this._transformRadiusRange(options.radiusRange);

	        if (options.radiusRange.length === 1) {
	            options.radiusRange.unshift(0);
	        }
	    },

	    /**
	     * Calculate angle for rendering.
	     * @returns {number}
	     * @private
	     */
	    _calculateAngleForRendering: function() {
	        var startAngle = this.options.startAngle;
	        var endAngle = this.options.endAngle;
	        var renderingAngle;

	        if (startAngle < endAngle) {
	            renderingAngle = endAngle - startAngle;
	        } else if (startAngle > endAngle) {
	            renderingAngle = chartConst.ANGLE_360 - (startAngle - endAngle);
	        } else {
	            renderingAngle = chartConst.ANGLE_360;
	        }

	        return renderingAngle;
	    },

	    /**
	     * Make sectors information.
	     * @param {{cx: number, cy: number, r: number}} circleBound circle bound
	     * @returns {Array.<object>} sectors information
	     * @private
	     */
	    _makeSectorData: function(circleBound) {
	        var self = this;
	        var cx = circleBound.cx;
	        var cy = circleBound.cy;
	        var r = circleBound.r;
	        var angle = this.options.startAngle;
	        var angleForRendering = this._calculateAngleForRendering();
	        var seriesGroup = this._getSeriesDataModel().getFirstSeriesGroup();
	        var holeRatio = this.options.radiusRange[0];
	        var centerR = r * 0.5;
	        var paths;

	        if (holeRatio) {
	            centerR += centerR * holeRatio;
	        }

	        if (!seriesGroup) {
	            return null;
	        }
	        paths = seriesGroup.map(function(seriesItem) {
	            var ratio = seriesItem ? seriesItem.ratio : 0;
	            var currentAngle = angleForRendering * ratio;
	            var endAngle = angle + currentAngle;
	            var popupAngle = angle + (currentAngle / 2);

	            var angles = {
	                start: {
	                    startAngle: angle,
	                    endAngle: angle
	                },
	                end: {
	                    startAngle: angle,
	                    endAngle: endAngle
	                }
	            };
	            var positionData = {
	                cx: cx,
	                cy: cy,
	                angle: popupAngle
	            };

	            angle = endAngle;

	            return {
	                ratio: ratio,
	                angles: angles,
	                centerPosition: self._getArcPosition(snippet.extend({
	                    r: centerR
	                }, positionData)),
	                outerPosition: self._getArcPosition(snippet.extend({
	                    r: r + (self.legendLongestWidth / 2) + chartConst.PIE_GRAPH_LEGEND_LABEL_INTERVAL
	                }, positionData))
	            };
	        });

	        return paths;
	    },
	    /**
	     * Make value labels
	     * @returns {Array.<string>}
	     * @private
	     */
	    _makeValueLabel: function() {
	        var seriesGroup = this._getSeriesDataModel().getFirstSeriesGroup();

	        return seriesGroup.map(function(seriesItem) {
	            return seriesItem.label;
	        }, this);
	    },

	    /**
	     * Make series data.
	     * @returns {{
	     *      chartBackground: string,
	     *      circleBound: ({cx: number, cy: number, r: number}),
	     *      sectorData: Array.<object>
	     * }} add data for graph rendering
	     * @private
	     * @override
	     */
	    _makeSeriesData: function() {
	        var circleBound, sectorData;

	        this.valueLabels = this._makeValueLabel();
	        this.legendLabels = this._getLegendLabels();
	        this.legendLongestWidth = this._getMaxLengthLegendWidth();

	        circleBound = this._makeCircleBound();
	        sectorData = this._makeSectorData(circleBound);

	        return {
	            chartBackground: this.chartBackground,
	            circleBound: circleBound,
	            sectorData: sectorData,
	            isAvailable: function() {
	                return sectorData && sectorData.length > 0;
	            }
	        };
	    },

	    /**
	     * Get quadrant from angle.
	     * @param {number} angle - angle
	     * @param {boolean} isEnd whether end quadrant
	     * @returns {number}
	     * @private
	     */
	    _getQuadrantFromAngle: function(angle, isEnd) {
	        var quadrant = parseInt(angle / chartConst.ANGLE_90, 10) + 1;

	        if (isEnd && (angle % chartConst.ANGLE_90 === 0)) {
	            quadrant += (quadrant === 1) ? 3 : -1;
	        }

	        return quadrant;
	    },

	    /**
	     * Get range for quadrant.
	     * @returns {{start: number, end: number}}
	     * @private
	     */
	    _getRangeForQuadrant: function() {
	        if (!this.quadrantRange) {
	            this.quadrantRange = {
	                start: this._getQuadrantFromAngle(this.options.startAngle),
	                end: this._getQuadrantFromAngle(this.options.endAngle, true)
	            };
	        }

	        return this.quadrantRange;
	    },

	    /**
	     * Whether in range for quadrant.
	     * @param {number} start - start quadrant
	     * @param {number} end - end quadrant
	     * @returns {boolean}
	     * @private
	     */
	    _isInQuadrantRange: function(start, end) {
	        var quadrantRange = this._getRangeForQuadrant();

	        return quadrantRange.start === start && quadrantRange.end === end;
	    },

	    /**
	     * Calculate base size.
	     * @returns {number}
	     * @private
	     */
	    _calculateBaseSize: function() {
	        var dimension = this.layout.dimension;
	        var width = dimension.width;
	        var height = dimension.height;
	        var quadrantRange;

	        if (!this.isCombo) {
	            quadrantRange = this._getRangeForQuadrant();
	            if (this._isInQuadrantRange(2, 3) || this._isInQuadrantRange(4, 1)) {
	                height *= 2;
	            } else if (this._isInQuadrantRange(1, 2) || this._isInQuadrantRange(3, 4)) {
	                width *= 2;
	            } else if (quadrantRange.start === quadrantRange.end) {
	                width *= 2;
	                height *= 2;
	            }
	        }

	        return Math.min(width, height);
	    },

	    /**
	     * Calculate radius.
	     * @returns {number}
	     * @private
	     */
	    _calculateRadius: function() {
	        var isComboPie1 = this.isCombo && (this.seriesType === COMBO_PIE1);
	        var isShowOuterLabel = this.isShowOuterLabel;
	        var baseSize = this._calculateBaseSize();
	        var radiusRatio = 0;

	        if (isComboPie1) {
	            isShowOuterLabel = this.dataProcessor.isComboDonutShowOuterLabel();
	        }

	        radiusRatio = isShowOuterLabel ? chartConst.PIE_GRAPH_SMALL_RATIO : chartConst.PIE_GRAPH_DEFAULT_RATIO;

	        return baseSize * radiusRatio * this.options.radiusRange[1] / 2;
	    },

	    /**
	     * Calculate center x, y.
	     * @param {number} radius - radius
	     * @returns {{cx: number, cy: number}}
	     * @private
	     */
	    _calculateCenterXY: function(radius) {
	        var dimension = this.layout.dimension;
	        var position = this.layout.position;
	        var halfRadius = radius / 2;
	        var cx = (dimension.width / 2) + position.left;
	        var cy = (dimension.height / 2) + position.top;

	        if (!this.isCombo) {
	            if (this._isInQuadrantRange(1, 1)) {
	                cx -= halfRadius;
	                cy += halfRadius;
	            } else if (this._isInQuadrantRange(1, 2)) {
	                cx -= halfRadius;
	            } else if (this._isInQuadrantRange(2, 2)) {
	                cx -= halfRadius;
	                cy -= halfRadius;
	            } else if (this._isInQuadrantRange(2, 3)) {
	                cy -= halfRadius;
	            } else if (this._isInQuadrantRange(3, 3)) {
	                cx += halfRadius;
	                cy -= halfRadius;
	            } else if (this._isInQuadrantRange(3, 4)) {
	                cx += halfRadius;
	            } else if (this._isInQuadrantRange(4, 1)) {
	                cy += halfRadius;
	            } else if (this._isInQuadrantRange(4, 4)) {
	                cx += halfRadius;
	                cy += halfRadius;
	            }
	        }

	        return {
	            cx: cx,
	            cy: cy
	        };
	    },

	    /**
	     * Make circle bound
	     * @returns {{cx: number, cy: number, r: number}} circle bounds
	     * @private
	     */
	    _makeCircleBound: function() {
	        var radius = this._calculateRadius();
	        var centerXY = this._calculateCenterXY(radius);

	        return snippet.extend({
	            r: radius
	        }, centerXY);
	    },

	    /**
	     * Get arc position.
	     * @param {object} params parameters
	     *      @param {number} params.cx center x
	     *      @param {number} params.cy center y
	     *      @param {number} params.r radius
	     *      @param {number} params.angle angle(degree)
	     * @returns {{left: number, top: number}} arc position
	     * @private
	     */
	    _getArcPosition: function(params) {
	        return {
	            left: params.cx + (params.r * Math.sin(params.angle * chartConst.RAD)),
	            top: params.cy - (params.r * Math.cos(params.angle * chartConst.RAD))
	        };
	    },

	    /**
	     * Render raphael graph.
	     * @param {{width: number, height: number}} dimension dimension
	     * @param {object} seriesData series data
	     * @param {object} paper paper object
	     * @private
	     * @override
	     */
	    _renderGraph: function(dimension, seriesData, paper) {
	        var showTootltip = snippet.bind(this.showTooltip, this, {
	            allowNegativeTooltip: !!this.allowNegativeTooltip,
	            seriesType: this.seriesType,
	            chartType: this.chartType
	        });
	        var callbacks = {
	            showTooltip: showTootltip,
	            hideTooltip: snippet.bind(this.hideTooltip, this)
	        };
	        var params = this._makeParamsForGraphRendering(dimension, seriesData);
	        var currentSeriesName = this.seriesType;
	        var seriesDataModelMap = this.dataProcessor.seriesDataModelMap;
	        var pastSeriesNames = [];
	        var pastIndex = 0;

	        snippet.forEach(this.dataProcessor.seriesTypes, function(seriesType) {
	            var needNext = true;

	            if (seriesType !== currentSeriesName) {
	                pastSeriesNames.push(seriesType);
	            } else {
	                needNext = false;
	            }

	            return needNext;
	        });

	        snippet.forEach(pastSeriesNames, function(seriesType) {
	            pastIndex += seriesDataModelMap[seriesType].baseGroups.length;
	        });

	        params.additionalIndex = pastIndex;

	        return this.graphRenderer.render(paper, params, callbacks);
	    },

	    /**
	     * showTooltip is mouseover event callback on series graph.
	     * @param {object} params parameters
	     *      @param {boolean} params.allowNegativeTooltip whether allow negative tooltip or not
	     * @param {{top:number, left: number, width: number, height: number}} bound graph bound information
	     * @param {number} groupIndex group index
	     * @param {number} index index
	     * @param {{left: number, top: number}} mousePosition mouse position
	     */
	    showTooltip: function(params, bound, groupIndex, index, mousePosition) {
	        this.eventBus.fire('showTooltip', snippet.extend({
	            indexes: {
	                groupIndex: groupIndex,
	                index: index
	            },
	            mousePosition: mousePosition
	        }, params));
	    },

	    /**
	     * hideTooltip is mouseout event callback on series graph.
	     */
	    hideTooltip: function() {
	        this.eventBus.fire('hideTooltip');
	    },
	    /**
	     * legendh max length width
	     * @returns {number} max width
	     * @private
	     */
	    _getMaxLengthLegendWidth: function() {
	        var lableWidths = snippet.map(this.legendLabels, function(label) {
	            return raphaelRenderUtil.getRenderedTextSize(
	                label,
	                this.labelTheme.fontSize,
	                this.labelTheme.fontFamily
	            ).width;
	        }, this);

	        lableWidths.sort(function(prev, next) {
	            return prev - next;
	        });

	        return lableWidths[lableWidths.length - 1];
	    },

	    /**
	     * Make series data by selection.
	     * @param {number} index index
	     * @returns {{indexes: {index: number, groupIndex: number}}} series data
	     * @private
	     */
	    _makeSeriesDataBySelection: function(index) {
	        return {
	            indexes: {
	                index: index,
	                groupIndex: index
	            }
	        };
	    },

	    /**
	     * Pick poistions from sector data.
	     * @param {string} positionType position type
	     * @param {string} dataType legend or value label
	     * @returns {Array} positions
	     * @private
	     */
	    _pickPositionsFromSectorData: function(positionType, dataType) {
	        var options = this.options;
	        var legendLabelHeight = raphaelRenderUtil.getRenderedTextSize(this.legendLabels[0], this.labelTheme.fontSize,
	            this.labelTheme.fontFamily).height;

	        var valueLabelHeight = raphaelRenderUtil.getRenderedTextSize(this.valueLabels[0],
	            chartConst.PIE_GRAPH_LEGEND_LABEL_SIZE, this.labelTheme.fontFamily).height;

	        return snippet.map(this.seriesData.sectorData, function(datum) {
	            var position = datum.ratio ? snippet.extend({}, datum[positionType]) : null;
	            if (options.showLegend && options.showLabel && !this.isLabelAlignOuter) {
	                if (dataType === 'value') {
	                    position.top -= valueLabelHeight / 2;
	                } else if (dataType === 'legend') {
	                    position.top += legendLabelHeight / 2;
	                }
	            }

	            return position;
	        }, this);
	    },

	    /**
	     * Add end position.
	     * @param {number} centerLeft center left
	     * @param {Array.<object>} positions positions
	     * @private
	     */
	    _addEndPosition: function(centerLeft, positions) {
	        snippet.forEachArray(positions, function(position) {
	            var end;

	            if (!position) {
	                return;
	            }

	            end = snippet.extend({}, position.middle);
	            if (end.left < centerLeft) {
	                end.left -= chartConst.SERIES_OUTER_LABEL_PADDING;
	            } else {
	                end.left += chartConst.SERIES_OUTER_LABEL_PADDING;
	            }
	            position.end = end;
	        });
	    },

	    /**
	     * Move to outer position.
	     * @param {number} centerLeft center left
	     * @param {object} position position
	     * @param {string} label label
	     * @returns {{left: number, top: number}} outer position
	     * @private
	     */
	    _moveToOuterPosition: function(centerLeft, position, label) {
	        var positionEnd = position.end;
	        var left = positionEnd.left;
	        var top = positionEnd.top;
	        var OffsetX = (this.graphRenderer.getRenderedLabelWidth(label, this.labelTheme) / 2)
	            + chartConst.SERIES_LABEL_PADDING;

	        if (left < centerLeft) {
	            left -= OffsetX;
	        } else {
	            left += OffsetX;
	        }

	        return {
	            left: left,
	            top: top
	        };
	    },

	    /**
	     * set series position
	     * @param {object} params position infos
	     * @param {Array.<string>} labels labels array
	     * @returns {Array.<number>}
	     * @private
	     */
	    _setSeriesPosition: function(params, labels) {
	        var positions = [];
	        if (params.funcMoveToPosition) {
	            positions = snippet.map(params.positions, function(position, index) {
	                var outerPosition = null;

	                if (position) {
	                    outerPosition = params.funcMoveToPosition(position, labels[index]);
	                }

	                return outerPosition;
	            });
	        } else {
	            positions = params.positions;
	        }

	        return positions;
	    },

	    /**
	     * Render series label.
	     * @param {object} paper paper
	     * @returns {Array.<object>}
	     * @private
	     */
	    _renderSeriesLabel: function(paper) {
	        var legendLabelPosition;
	        var renderOption = {};
	        var positions = [];
	        var labelSet = paper.set();
	        var graphRenderLabel = snippet.bind(function(dataType, labels) {
	            var colors;
	            var theme = snippet.extend({}, this.theme.label);
	            if (this.isLabelAlignOuter && dataType === 'legend') {
	                colors = this.theme.colors;
	                theme.fontWeight = 'bold';
	            }
	            theme.fontSize = (dataType === 'value') ? 16 : theme.fontSize;

	            positions = this._setSeriesPosition(renderOption, labels);
	            this.graphRenderer.renderLabels({
	                dataType: dataType,
	                paper: paper,
	                labelSet: labelSet,
	                positions: positions,
	                labels: labels,
	                theme: theme,
	                colors: colors
	            });
	        }, this);

	        if (this.options.showLabel) {
	            renderOption.positions = this._pickPositionsFromSectorData('centerPosition', 'value');
	            graphRenderLabel('value', this.valueLabels);
	        }
	        if (this.options.showLegend) {
	            legendLabelPosition = this.isLabelAlignOuter ? 'outerPosition' : 'centerPosition';
	            renderOption.positions = this._pickPositionsFromSectorData(legendLabelPosition, 'legend');
	            graphRenderLabel('legend', this.legendLabels);
	        }

	        return labelSet;
	    },

	    /**
	     * Whether detected label element or not.
	     * @param {{left: number, top: number}} position - mouse position
	     * @returns {boolean}
	     * @private
	     */
	    _isDetectedLabel: function(position) {
	        var labelElement = document.elementFromPoint(position.left, position.top);

	        return snippet.isString(labelElement.className);
	    },

	    /**
	     * On click series.
	     * @param {{left: number, top: number}} position mouse position
	     */
	    onClickSeries: function(position) {
	        var sectorInfo = this._executeGraphRenderer(position, 'findSectorInfo');
	        var prevIndex = this.prevClickedIndex;
	        var allowSelect = this.options.allowSelect;
	        var foundIndex, shouldSelect;

	        if ((sectorInfo || this._isDetectedLabel(position)) && snippet.isExisty(prevIndex) && allowSelect) {
	            this.onUnselectSeries({
	                indexes: {
	                    index: prevIndex
	                }
	            });
	            this.prevClickedIndex = null;
	        }

	        if (!sectorInfo || sectorInfo.chartType !== this.seriesType) {
	            return;
	        }

	        foundIndex = sectorInfo.index;
	        shouldSelect = foundIndex > -1 && (foundIndex !== prevIndex);

	        if (allowSelect && !shouldSelect) {
	            return;
	        }

	        this.onSelectSeries({
	            chartType: this.chartType,
	            indexes: {
	                index: foundIndex,
	                legendIndex: sectorInfo.legendIndex
	            }
	        }, shouldSelect);

	        if (allowSelect && foundIndex > -1) {
	            this.prevClickedIndex = foundIndex;
	        }
	    },

	    /**
	     * On move series.
	     * @param {{left: number, top: number}} position mouse position
	     */
	    onMoveSeries: function(position) {
	        this._executeGraphRenderer(position, 'moveMouseOnSeries');
	    }
	});

	function pieSeriesFactory(params) {
	    var libType = params.chartOptions.libType;
	    var chartTheme = params.chartTheme;
	    var chartType = params.chartOptions.chartType;
	    var legendOption = params.chartOptions.legend;

	    params.libType = libType;
	    params.chartType = 'pie';

	    if (chartType === 'combo') {
	        // elias series mapping key is used as a seriesType(ex. pie1)
	        // It is now distinguished to follow current structure
	        // elias will not be needed after chart constructor is integrated
	        params.seriesType = params.name.split('Series')[0];
	        params.isCombo = true;
	    }

	    if (legendOption) {
	        params.legendMaxWidth = legendOption.maxWidth;
	    }

	    params.chartBackground = chartTheme.chart.background;

	    return new PieChartSeries(params);
	}

	pieSeriesFactory.componentType = 'series';
	pieSeriesFactory.PieChartSeries = PieChartSeries;

	module.exports = pieSeriesFactory;


/***/ }),
/* 94 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileoverview Series component for rendering graph of heatmap chart.
	 * @author NHN Ent.
	 *         FE Development Lab <dl_javascript@nhnent.com>
	 */

	'use strict';

	var Series = __webpack_require__(81);
	var labelHelper = __webpack_require__(83);
	var snippet = __webpack_require__(6);

	var HeatmapChartSeries = snippet.defineClass(Series, /** @lends HeatmapChartSeries.prototype */ {
	    /**
	     * Series component for rendering graph of heatmap chart.
	     * @constructs HeatmapChartSeries
	     * @private
	     * @param {object} params - parameters
	     * @extends Series
	     */
	    init: function(params) {
	        /**
	         * Color spectrum
	         * @type {ColorSpectrum}
	         */
	        this.colorSpectrum = params.colorSpectrum;

	        Series.call(this, params);
	    },

	    /**
	     * Make series data for rendering graph and sending to mouse event detector.
	     * @returns {{
	     *      groupBounds: Array.<Array.<{left: number, top: number, radius: number}>>,
	     *      seriesDataModel: SeriesDataModel
	     * }} series data
	     * @private
	     * @override
	     */
	    _makeSeriesData: function() {
	        var groupBounds = this._makeBounds();
	        var seriesDataModel = this._getSeriesDataModel();

	        return {
	            colorSpectrum: this.colorSpectrum,
	            groupBounds: groupBounds,
	            seriesDataModel: seriesDataModel,
	            isAvailable: function() {
	                return groupBounds && groupBounds.length > 0;
	            }
	        };
	    },

	    /**
	     * Make bound for graph rendering.
	     * @param {number} blockWidth - block width
	     * @param {number} blockHeight - block height
	     * @param {number} x - x index
	     * @param {number} y - y index
	     * @returns {{end: {left: number, top: number, width: number, height: number}}}
	     * @private
	     */
	    _makeBound: function(blockWidth, blockHeight, x, y) {
	        var height = this.layout.dimension.height;
	        var left = (blockWidth * x) + this.layout.position.left;
	        var top = height - (blockHeight * (y + 1)) + this.layout.position.top;

	        return {
	            end: {
	                left: left,
	                top: top,
	                width: blockWidth,
	                height: blockHeight
	            }
	        };
	    },

	    /**
	     * Make bounds for graph rendering.
	     * @returns {Array.<Array.<{left: number, top: number, radius: number}>>} positions
	     * @private
	     */
	    _makeBounds: function() {
	        var self = this;
	        var seriesDataModel = this._getSeriesDataModel();
	        var dimension = this.layout.dimension;
	        var blockWidth = dimension.width / this.dataProcessor.getCategoryCount(false);
	        var blockHeight = dimension.height / this.dataProcessor.getCategoryCount(true);

	        return seriesDataModel.map(function(seriesGroup, x) {
	            return seriesGroup.map(function(seriesItem, y) {
	                return self._makeBound(blockWidth, blockHeight, x, y);
	            });
	        });
	    },

	    /**
	     * Call showWedge event of spectrum legend, when call showTooltip event.
	     * @param {{indexes: {groupIndex: number, index: number}}} params - parameters
	     */
	    onShowTooltip: function(params) {
	        var seriesDataModel = this._getSeriesDataModel();
	        var indexes = params.indexes;
	        var item = seriesDataModel.getSeriesItem(indexes.groupIndex, indexes.index);

	        this.eventBus.fire('showWedge', item.ratio, item.label);
	    },

	    /**
	     * Render series label.
	     * @param {object} paper - paper
	     * @returns {Array.<object>}
	     * @private
	     */
	    _renderSeriesLabel: function(paper) {
	        var sdm = this._getSeriesDataModel();
	        var boundsSet = this.seriesData.groupBounds;
	        var labelTheme = this.theme.label;
	        var selectedIndex = this.selectedLegendIndex;
	        var positionsSet = labelHelper.boundsToLabelPositions(sdm, boundsSet, labelTheme);
	        var labels = sdm.map(function(datum) {
	            return datum.valuesMap.value;
	        });

	        return this.graphRenderer.renderSeriesLabel(paper, positionsSet, labels, labelTheme, selectedIndex);
	    },

	    /**
	     * Resize.
	     * @override
	     */
	    resize: function() {
	        this.boundMap = null;

	        Series.prototype.resize.apply(this, arguments);
	    },

	    /**
	     * Make exportation data for public event of series type.
	     * @param {object} seriesData - series data
	     * @returns {{x: number, y: number}}
	     * @private
	     */
	    _makeExportationSeriesData: function(seriesData) {
	        return {
	            x: seriesData.indexes.groupIndex,
	            y: seriesData.indexes.index
	        };
	    }
	});

	function heatmapChartSeriesFactory(params) {
	    var libType = params.chartOptions.libType;

	    params.libType = libType;
	    params.chartType = 'heatmap';

	    return new HeatmapChartSeries(params);
	}

	heatmapChartSeriesFactory.componentType = 'series';
	heatmapChartSeriesFactory.HeatmapChartSeries = HeatmapChartSeries;

	module.exports = heatmapChartSeriesFactory;


/***/ }),
/* 95 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileoverview Series component for rendering graph of treemap chart.
	 * @author NHN Ent.
	 *         FE Development Lab <dl_javascript@nhnent.com>
	 */

	'use strict';

	var Series = __webpack_require__(81);
	var squarifier = __webpack_require__(96);
	var labelHelper = __webpack_require__(83);
	var chartConst = __webpack_require__(8);
	var predicate = __webpack_require__(21);
	var snippet = __webpack_require__(6);

	var TreemapChartSeries = snippet.defineClass(Series, /** @lends TreemapChartSeries.prototype */ {
	    /**
	     * Series component for rendering graph of treemap chart.
	     * @constructs TreemapChartSeries
	     * @private
	     * @param {object} params - parameters
	     * @extends Series
	     */
	    init: function(params) {
	        Series.call(this, params);

	        this.theme.borderColor = this.theme.borderColor || chartConst.TREEMAP_DEFAULT_BORDER;
	        this.theme.label.color = this.options.useColorValue ? '#000' : '#fff';

	        /**
	         * root id
	         * @type {string}
	         */
	        this.rootId = chartConst.TREEMAP_ROOT_ID;

	        /**
	         * start depth of seriesItem for rendering graph
	         * @type {number}
	         */
	        this.startDepth = 1;

	        /**
	         * selected group
	         * @type {null | number}
	         */
	        this.selectedGroup = null;

	        /**
	         * bound map
	         * @type {null|object.<string, object>}
	         */
	        this.boundMap = null;

	        /**
	         * color spectrum
	         * @type {ColorSpectrum}
	         */
	        this.colorSpectrum = params.colorSpectrum;

	        this._initOptions();
	    },

	    /**
	     * Initialize options.
	     * @private
	     */
	    _initOptions: function() {
	        this.options.useColorValue = !!this.options.useColorValue;

	        if (snippet.isUndefined(this.options.zoomable)) {
	            this.options.zoomable = !this.options.useColorValue;
	        }

	        if (snippet.isUndefined(this.options.useLeafLabel)) {
	            this.options.useLeafLabel = !this.options.zoomable;
	        }
	    },

	    /**
	     * Make series data.
	     * @returns {{
	     *      groupBounds: object.<string, {left: number, top: number, width: number, height: number}>,
	     *      seriesDataModel: SeriesDataModel
	     * }}
	     * @private
	     * @override
	     */
	    _makeSeriesData: function() {
	        var boundMap = this._getBoundMap();
	        var groupBounds = this._makeBounds(boundMap);

	        return {
	            boundMap: boundMap,
	            groupBounds: groupBounds,
	            seriesDataModel: this._getSeriesDataModel(),
	            startDepth: this.startDepth,
	            isPivot: true,
	            colorSpectrum: this.options.useColorValue ? this.colorSpectrum : null,
	            chartBackground: this.chartBackground,
	            zoomable: this.options.zoomable,
	            isAvailable: function() {
	                return groupBounds && groupBounds.length > 0;
	            }
	        };
	    },

	    /**
	     * Make bound map by dimension.
	     * @param {string | number} parent - parent id
	     * @param {object.<string, {left: number, top: number, width: number, height: number}>} boundMap - bound map
	     * @param {object} layout - layout
	     * @returns {object.<string, {left: number, top: number, width: number, height: number}>}
	     * @private
	     */
	    _makeBoundMap: function(parent, boundMap, layout) {
	        var self = this;
	        var seriesDataModel = this._getSeriesDataModel();
	        var defaultLayout = snippet.extend({}, this.layout.dimension, this.layout.position);
	        var seriesItems;

	        layout = layout || defaultLayout;
	        seriesItems = seriesDataModel.findSeriesItemsByParent(parent);
	        boundMap = snippet.extend(boundMap || {}, squarifier.squarify(layout, seriesItems));

	        snippet.forEachArray(seriesItems, function(seriesItem) {
	            boundMap = self._makeBoundMap(seriesItem.id, boundMap, boundMap[seriesItem.id]);
	        });

	        return boundMap;
	    },

	    /**
	     * Make bounds for rendering graph.
	     * @param {object.<string, {left: number, top: number, width: number, height: number}>} boundMap - bound map
	     * @returns {Array.<Array.<{left: number, top: number, width: number, height: number}>>}
	     * @private
	     */
	    _makeBounds: function(boundMap) {
	        var startDepth = this.startDepth;
	        var seriesDataModel = this._getSeriesDataModel();
	        var isValid;

	        if (this.options.zoomable) {
	            isValid = function(seriesItem) {
	                return seriesItem.depth === startDepth;
	            };
	        } else {
	            isValid = function(seriesItem) {
	                return !seriesItem.hasChild;
	            };
	        }

	        return seriesDataModel.map(function(seriesGroup) {
	            return seriesGroup.map(function(seriesItem) {
	                var bound = boundMap[seriesItem.id];
	                var result = null;

	                if (bound && isValid(seriesItem)) {
	                    result = {
	                        end: bound
	                    };
	                }

	                return result;
	            }, true);
	        }, true);
	    },

	    /**
	     * Get bound map for rendering graph.
	     * @returns {object.<string, {left: number, top: number, width: number, height: number}>}
	     * @private
	     */
	    _getBoundMap: function() {
	        if (!this.boundMap) {
	            this.boundMap = this._makeBoundMap(this.rootId);
	        }

	        return this.boundMap;
	    },

	    /**
	     * Whether should dimmed or not.
	     * @param {SeriesDataModel} seriesDataModel - SeriesDataModel for treemap
	     * @param {SeriesItem} hoverSeriesItem - hover SeriesItem
	     * @param {SeriesItem} seriesItem - target SeriesItem
	     * @returns {boolean}
	     * @private
	     */
	    _shouldDimmed: function(seriesDataModel, hoverSeriesItem, seriesItem) {
	        var shouldTransparent = false;
	        var parent;

	        if (hoverSeriesItem && seriesItem.id !== hoverSeriesItem.id && seriesItem.group === hoverSeriesItem.group) {
	            parent = seriesDataModel.findParentByDepth(seriesItem.id, hoverSeriesItem.depth + 1);

	            if (parent && parent.parent === hoverSeriesItem.id) {
	                shouldTransparent = true;
	            }
	        }

	        return shouldTransparent;
	    },

	    /**
	     * Render series label.
	     * @param {object} paper - paper
	     * @returns {Array.<object>}
	     * @private
	     */
	    _renderSeriesLabel: function(paper) {
	        var seriesDataModel = this._getSeriesDataModel();
	        var boundMap = this._getBoundMap();
	        var labelTheme = this.theme.label;
	        var labelTemplate = this.options.labelTemplate;
	        var positions, seriesItems, labels;

	        if (this.options.useLeafLabel) {
	            seriesItems = seriesDataModel.findLeafSeriesItems(this.selectedGroup);
	        } else {
	            seriesItems = seriesDataModel.findSeriesItemsByDepth(this.startDepth, this.selectedGroup);
	        }

	        labels = snippet.map(seriesItems, function(seriesItem) {
	            var labelText = labelTemplate ? labelTemplate(seriesItem.pickLabelTemplateData()) : seriesItem.label;

	            return labelText;
	        });

	        positions = labelHelper.boundsToLabelPostionsForTreemap(seriesItems, boundMap, labelTheme);

	        return this.graphRenderer.renderSeriesLabelForTreemap(paper, positions, labels, labelTheme);
	    },

	    /**
	     * Resize.
	     * @override
	     */
	    resize: function() {
	        this.boundMap = null;

	        Series.prototype.resize.apply(this, arguments);
	    },

	    /**
	     * Zoom.
	     * @param {string | number} rootId - root id
	     * @param {number} startDepth - start depth
	     * @param {number} group - group
	     * @private
	     */
	    _zoom: function(rootId, startDepth, group) {
	        this._clearSeriesContainer();
	        this.boundMap = null;
	        this.rootId = rootId;
	        this.startDepth = startDepth;
	        this.selectedGroup = group;
	        this._renderSeriesArea(this.paper, snippet.bind(this._renderGraph, this));
	        this.animateComponent(true);
	    },

	    /**
	     * Zoom
	     * @param {{index: number}} data - data for zoom
	     */
	    zoom: function(data) {
	        var detectedIndex = data.index;
	        var seriesDataModel, seriesItem;

	        this.labelSet.remove();

	        if (detectedIndex === -1) {
	            this._zoom(chartConst.TREEMAP_ROOT_ID, 1, null);

	            return;
	        }

	        seriesDataModel = this._getSeriesDataModel();
	        seriesItem = seriesDataModel.getSeriesItem(0, detectedIndex, true);

	        if (!seriesItem || !seriesItem.hasChild) {
	            return;
	        }

	        this._zoom(seriesItem.id, seriesItem.depth + 1, seriesItem.group);
	        this.eventBus.fire('afterZoom', detectedIndex);
	    },

	    /**
	     * Make exportation data for public event of series type.
	     * @param {object} seriesData series data
	     * @returns {{chartType: string, legend: string, legendIndex: number, index: number}} export data
	     * @private
	     */
	    _makeExportationSeriesData: function(seriesData) {
	        var indexes = seriesData.indexes;
	        var seriesItem = this._getSeriesDataModel().getSeriesItem(indexes.groupIndex, indexes.index, true);

	        return snippet.extend({
	            chartType: this.chartType,
	            indexes: seriesItem.indexes
	        });
	    },

	    /**
	     * To call showAnimation function of graphRenderer.
	     * @param {{groupIndex: number, index: number}} indexes - indexes
	     */
	    onHoverSeries: function(indexes) {
	        var item, ratio;

	        if (!predicate.isShowLabel(this.options)) {
	            return;
	        }

	        item = this._getSeriesDataModel().getSeriesItem(indexes.groupIndex, indexes.index, true);
	        ratio = item.colorRatio;

	        this.graphRenderer.showAnimation(indexes, this.options.useColorValue, 0.6);

	        if (ratio > -1) {
	            this.eventBus.fire('showWedge', ratio, item.colorValue);
	        }
	    },

	    /**
	     * To call hideAnimation function of graphRenderer.
	     * @param {{groupIndex: number, index: number}} indexes - indexes
	     */
	    onHoverOffSeries: function(indexes) {
	        if (!predicate.isShowLabel(this.options) || !indexes) {
	            return;
	        }

	        this.graphRenderer.hideAnimation(indexes, this.options.useColorValue);
	    }
	});

	function treemapChartSeriesFactory(params) {
	    var libType = params.chartOptions.libType;
	    var chartTheme = params.chartTheme;

	    params.libType = libType;
	    params.chartType = 'treemap';
	    params.chartBackground = chartTheme.chart.background;

	    return new TreemapChartSeries(params);
	}

	treemapChartSeriesFactory.componentType = 'series';
	treemapChartSeriesFactory.TreemapChartSeries = TreemapChartSeries;

	module.exports = treemapChartSeriesFactory;


/***/ }),
/* 96 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileoverview squarifier create squarified bounds for rendering graph of treemap chart.
	 * @author NHN Ent.
	 *         FE Development Lab <dl_javascript@nhnent.com>
	 */

	'use strict';

	var calculator = __webpack_require__(45);
	var arrayUtil = __webpack_require__(10);
	var snippet = __webpack_require__(6);

	var squarifier = {
	    /**
	     * bound map
	     * @type {object.<string, {width: number, height: number, left: number, top: number}>}
	     */
	    boundMap: {},

	    /**
	     * Make base bound for calculating bounds.
	     * @param {{width: number, height: number, left: number, top: number}} layout - layout
	     * @returns {{width: number, height: number, left: number, top: number}}
	     * @private
	     */
	    _makeBaseBound: function(layout) {
	        return snippet.extend({}, layout);
	    },

	    /**
	     * Calculate scale for calculating weight.
	     * @param {Array.<number>} values - values
	     * @param {number} width - width of series area
	     * @param {number} height - height of series area
	     * @returns {number}
	     * @private
	     */
	    _calculateScale: function(values, width, height) {
	        return (width * height) / calculator.sum(values);
	    },

	    /**
	     * Make base data for creating squarified bounds.
	     * @param {Array.<SeriesItem>} seriesItems - SeriesItems
	     * @param {number} width - width of series area
	     * @param {number} height - height of series area
	     * @returns {Array.<{itme: SeriesItem, weight: number}>}
	     * @private
	     */
	    _makeBaseData: function(seriesItems, width, height) {
	        var scale = this._calculateScale(snippet.pluck(seriesItems, 'value'), width, height);
	        var data = snippet.map(seriesItems, function(seriesItem) {
	            return {
	                id: seriesItem.id,
	                weight: seriesItem.value * scale
	            };
	        }).sort(function(a, b) {
	            return b.weight - a.weight;
	        });

	        return data;
	    },

	    /**
	     * Calculate worst aspect ratio.
	     * Referred function worst() in https://www.win.tue.nl/~vanwijk/stm.pdf
	     * @param {number} sum - sum for weights
	     * @param {number} min - minimum weight
	     * @param {number} max - maximum weight
	     * @param {number} baseSize - base size (width or height)
	     * @returns {number}
	     * @private
	     */
	    _worst: function(sum, min, max, baseSize) {
	        var sumSquare = sum * sum;
	        var sizeSquare = baseSize * baseSize;

	        return Math.max((sizeSquare * max) / sumSquare, sumSquare / (sizeSquare * min));
	    },

	    /**
	     * Whether changed stack direction or not.
	     * @param {number} sum - sum for weights
	     * @param {Array.<number>} weights - weights
	     * @param {number} baseSize - base size
	     * @param {number} newWeight - new weight
	     * @returns {boolean}
	     * @private
	     */
	    _changedStackDirection: function(sum, weights, baseSize, newWeight) {
	        var min = arrayUtil.min(weights);
	        var max = arrayUtil.max(weights);
	        var beforeWorst = this._worst(sum, min, max, baseSize);
	        var newWorst = this._worst(sum + newWeight, Math.min(min, newWeight), Math.max(max, newWeight), baseSize);

	        return newWorst >= beforeWorst;
	    },

	    /**
	     * Whether type of vertical stack or not.
	     * @param {{width: number, height: number}} baseBound - base bound
	     * @returns {boolean}
	     * @private
	     */
	    _isVerticalStack: function(baseBound) {
	        return baseBound.height < baseBound.width;
	    },

	    /**
	     * Select base size from baseBound.
	     * @param {{width: number, height: number}} baseBound - base bound
	     * @returns {number}
	     * @private
	     */
	    _selectBaseSize: function(baseBound) {
	        return this._isVerticalStack(baseBound) ? baseBound.height : baseBound.width;
	    },

	    /**
	     * Calculate fixed size.
	     * @param {number} baseSize - base size
	     * @param {number} sum - sum for weights
	     * @param {Array.<{weight: number}>} row - row
	     * @returns {number}
	     * @private
	     */
	    _calculateFixedSize: function(baseSize, sum, row) {
	        var weights;

	        if (!sum) {
	            weights = snippet.pluck(row, 'weight');
	            sum = calculator.sum(weights);
	        }

	        return sum / baseSize;
	    },

	    /**
	     * Add bounds.
	     * @param {number} startPosition - start position
	     * @param {Array.<{weight: number}>} row - row
	     * @param {number} fixedSize - fixed size
	     * @param {function} callback - callback function
	     * @private
	     */
	    _addBounds: function(startPosition, row, fixedSize, callback) {
	        snippet.reduce([startPosition].concat(row), function(storedPosition, rowDatum) {
	            var dynamicSize = rowDatum.weight / fixedSize;

	            callback(dynamicSize, storedPosition, rowDatum.id);

	            return storedPosition + dynamicSize;
	        });
	    },

	    /**
	     * Add bound.
	     * @param {number} left - left position
	     * @param {number} top - top position
	     * @param {number} width - width
	     * @param {number} height - height
	     * @param {string | number} id - id of seriesItem
	     * @private
	     */
	    _addBound: function(left, top, width, height, id) {
	        this.boundMap[id] = {
	            left: left,
	            top: top,
	            width: width,
	            height: height
	        };
	    },

	    /**
	     * Add bounds for type of vertical stack.
	     * @param {Array.<{weight: number}>} row - row
	     * @param {{left: number, top: number, width: number, height: number}} baseBound - base bound
	     * @param {number} baseSize - base size
	     * @param {number} sum - sum for weights of row
	     * @private
	     */
	    _addBoundsForVerticalStack: function(row, baseBound, baseSize, sum) {
	        var self = this;
	        var fixedWidth = this._calculateFixedSize(baseSize, sum, row);

	        this._addBounds(baseBound.top, row, fixedWidth, function(dynamicHeight, storedTop, id) {
	            self._addBound(baseBound.left, storedTop, fixedWidth, dynamicHeight, id);
	        });

	        baseBound.left += fixedWidth;
	        baseBound.width -= fixedWidth;
	    },

	    /**
	     * Add bounds for type of horizontal stack.
	     * @param {Array.<{weight: number}>} row - row
	     * @param {{left: number, top: number, width: number, height: number}} baseBound - base bound
	     * @param {number} baseSize - base size
	     * @param {number} sum - sum for weights of row
	     * @private
	     */
	    _addBoundsForHorizontalStack: function(row, baseBound, baseSize, sum) {
	        var self = this;
	        var fixedHeight = this._calculateFixedSize(baseSize, sum, row);

	        this._addBounds(baseBound.left, row, fixedHeight, function(dynamicWidth, storedLeft, id) {
	            self._addBound(storedLeft, baseBound.top, dynamicWidth, fixedHeight, id);
	        });

	        baseBound.top += fixedHeight;
	        baseBound.height -= fixedHeight;
	    },

	    /**
	     * Get adding bounds function.
	     * @param {{width: number, height: number}} baseBound - base bound
	     * @returns {*}
	     * @private
	     */
	    _getAddingBoundsFunction: function(baseBound) {
	        var addBound;

	        if (this._isVerticalStack(baseBound)) {
	            addBound = snippet.bind(this._addBoundsForVerticalStack, this);
	        } else {
	            addBound = snippet.bind(this._addBoundsForHorizontalStack, this);
	        }

	        return addBound;
	    },

	    /**
	     * Create squarified bound map for graph rendering.
	     * @param {object} layout - series area layout
	     * @param {Array.<SeriesItem>} seriesItems - seriesItems
	     * @returns {object.<string, {width: number, height: number, left: number, top: number}>}
	     */
	    squarify: function(layout, seriesItems) {
	        var self = this;
	        var baseBound = this._makeBaseBound(layout);
	        var baseData = this._makeBaseData(seriesItems, baseBound.width, baseBound.height);
	        var row = [];
	        var baseSize, addBounds;

	        this.boundMap = {};

	        snippet.forEachArray(baseData, function(datum) {
	            var weights = snippet.pluck(row, 'weight');
	            var sum = calculator.sum(weights);

	            if (row.length && self._changedStackDirection(sum, weights, baseSize, datum.weight)) {
	                addBounds(row, baseBound, baseSize, sum);
	                row = [];
	            }

	            if (!row.length) {
	                baseSize = self._selectBaseSize(baseBound);
	                addBounds = self._getAddingBoundsFunction(baseBound);
	            }

	            row.push(datum);
	        });

	        if (row.length) {
	            addBounds(row, baseBound, baseSize);
	        }

	        return this.boundMap;
	    }
	};

	module.exports = squarifier;


/***/ }),
/* 97 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileoverview Boxplot chart series component.
	 * @author NHN Ent.
	 *         FE Development Lab <dl_javascript@nhnent.com>
	 */

	'use strict';

	var Series = __webpack_require__(81);
	var BarTypeSeriesBase = __webpack_require__(82);
	var chartConst = __webpack_require__(8);
	var predicate = __webpack_require__(21);
	var renderUtil = __webpack_require__(7);
	var snippet = __webpack_require__(6);

	var BoxplotChartSeries = snippet.defineClass(Series, /** @lends BoxplotChartSeries.prototype */ {
	    /**
	     * Boxplot chart series component.
	     * @constructs BoxplotChartSeries
	     * @private
	     * @extends Series
	     * @param {object} params parameters
	     *      @param {object} params.model series model
	     *      @param {object} params.options series options
	     *      @param {object} params.theme series theme
	     */
	    init: function() {
	        Series.apply(this, arguments);

	        /**
	         * whether series label is supported
	         * @type {boolean}
	         */
	        this.supportSeriesLable = false;
	    },

	    /**
	     * Make boxplot chart bound.
	     * @param {{
	     *      baseBarSize: number,
	     *      groupSize: number,
	     *      barSize: number,
	     *      pointInterval: number,
	     *      firstAdditionalPosition: number,
	     *      basePosition: number
	     * }} baseData base data for making bound
	     * @param {{
	     *      baseLeft: number,
	     *      left: number,
	     *      plusTop: number,
	     *      minusTop: number,
	     *      prevStack: ?string
	     * }} iterationData iteration data
	     * @param {?boolean} isStackType whether stackType option or not.
	     * @param {SeriesItem} seriesItem series item
	     * @param {number} index index
	     * @returns {{
	     *      start: {left: number, top: number, width: number, height: number},
	     *      end: {left: number, top: number, width: number, height: number}
	     * }}
	     * @private
	     */
	    _makeBoxplotChartBound: function(baseData, iterationData, isStackType, seriesItem, index) {
	        var boxHeight = Math.abs(baseData.baseBarSize * seriesItem.ratioDistance);
	        var boxStartTop = baseData.baseBarSize * (1 - seriesItem.lqRatio);
	        var startTop = baseData.basePosition + boxStartTop + chartConst.SERIES_EXPAND_SIZE;
	        var baseTopPosition = baseData.basePosition + chartConst.SERIES_EXPAND_SIZE;
	        var pointCount, endTop, boundLeft, outliers;

	        pointCount = index;
	        iterationData.left = iterationData.baseLeft + (baseData.pointInterval * pointCount);
	        iterationData.plusTop = 0;
	        iterationData.minusTop = 0;

	        if (seriesItem.value >= 0) {
	            iterationData.plusTop -= boxHeight;
	            endTop = startTop + iterationData.plusTop;
	        } else {
	            endTop = startTop + iterationData.minusTop;
	            iterationData.minusTop += boxHeight;
	        }

	        boundLeft = iterationData.left + baseData.pointInterval - (baseData.barSize / 2);

	        outliers = snippet.map(seriesItem.outliers, function(outlier) {
	            return {
	                top: (baseData.baseBarSize * (1 - outlier.ratio)) + baseTopPosition,
	                left: boundLeft + (baseData.barSize / 2)
	            };
	        });

	        return {
	            start: {
	                top: startTop,
	                left: boundLeft,
	                width: baseData.barSize,
	                height: 0
	            },
	            end: {
	                top: endTop,
	                left: boundLeft,
	                width: baseData.barSize,
	                height: boxHeight
	            },
	            min: {
	                top: (baseData.baseBarSize * (1 - seriesItem.minRatio)) + baseTopPosition,
	                left: boundLeft,
	                width: baseData.barSize,
	                height: 0
	            },
	            max: {
	                top: (baseData.baseBarSize * (1 - seriesItem.maxRatio)) + baseTopPosition,
	                left: boundLeft,
	                width: baseData.barSize,
	                height: 0
	            },
	            median: {
	                top: (baseData.baseBarSize * (1 - seriesItem.medianRatio)) + baseTopPosition,
	                left: boundLeft,
	                width: baseData.barSize,
	                height: 0
	            },
	            outliers: outliers
	        };
	    },

	    /**
	     * Make bounds of boxplot chart.
	     * @returns {Array.<Array.<object>>} bounds
	     * @private
	     */
	    _makeBounds: function() {
	        var self = this;
	        var seriesDataModel = this._getSeriesDataModel();
	        var isStackType = predicate.isValidStackOption(this.options.stackType);
	        var dimension = this.layout.dimension;
	        var baseData = this._makeBaseDataForMakingBound(dimension.width, dimension.height);

	        return seriesDataModel.map(function(seriesGroup, groupIndex) {
	            var baseLeft = (groupIndex * baseData.groupSize) + self.layout.position.left;
	            var iterationData = {
	                baseLeft: baseLeft,
	                left: baseLeft,
	                plusTop: 0,
	                minusTop: 0,
	                prevStack: null
	            };
	            var iteratee = snippet.bind(self._makeBoxplotChartBound, self, baseData, iterationData, isStackType);

	            return seriesGroup.map(iteratee);
	        });
	    },

	    /**
	     * Calculate left position of sum label.
	     * @param {{left: number, top: number}} bound bound
	     * @param {string} formattedSum formatted sum.
	     * @returns {number} left position value
	     * @private
	     */
	    _calculateLeftPositionOfSumLabel: function(bound, formattedSum) {
	        var labelWidth = renderUtil.getRenderedLabelWidth(formattedSum, this.theme.label);

	        return bound.left + ((bound.width - labelWidth + chartConst.TEXT_PADDING) / 2);
	    }
	});

	BarTypeSeriesBase.mixin(BoxplotChartSeries);

	function boxplotSeriesFactory(params) {
	    var libType = params.chartOptions.libType;
	    var chartTheme = params.chartTheme;

	    params.libType = libType;
	    params.chartType = 'boxplot';
	    params.chartBackground = chartTheme.chart.background;

	    return new BoxplotChartSeries(params);
	}

	boxplotSeriesFactory.componentType = 'series';
	boxplotSeriesFactory.BoxplotChartSeries = BoxplotChartSeries;

	module.exports = boxplotSeriesFactory;


/***/ }),
/* 98 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileoverview Bullet chart series component.
	 * @author NHN Ent.
	 *         FE Development Lab <dl_javascript@nhnent.com>
	 */

	'use strict';

	var Series = __webpack_require__(81);
	var renderUtil = __webpack_require__(7);
	var chartConst = __webpack_require__(8);
	var snippet = __webpack_require__(6);

	var BulletChartSeries = snippet.defineClass(Series, /** @lends BulletChartSeries.prototype */ {
	    /**
	     * Bullet chart series component.
	     * @constructs BulletChartSeries
	     * @private
	     * @extends Series
	     * @param {object} params series initialization data
	     */
	    init: function(params) {
	        Series.call(this, params);

	        /**
	         * true if graph stratches vertically
	         * false if graph stratches horizontally
	         * @type {boolean}
	         */
	        this.isVertical = params.isVertical;
	    },

	    /**
	     * Create data for rendering series
	     * @returns {object} - data for rendering series
	     * @override
	     * @private
	     */
	    _makeSeriesData: function() {
	        var groupBounds = this._makeBounds();

	        return {
	            groupBounds: groupBounds,
	            seriesDataModel: this._getSeriesDataModel(),
	            isVertical: this.isVertical,
	            isAvailable: function() {
	                return groupBounds && groupBounds.length > 0;
	            }
	        };
	    },

	    /**
	     * Create bounds data
	     * @returns {Array.<Bound>} - bound data of bullet graph components
	     * @private
	     */
	    _makeBounds: function() {
	        var self = this;
	        var seriesDataModel = this._getSeriesDataModel();
	        var baseData = this._makeBaseDataForMakingBound();
	        var iterationData = {
	            renderedItemCount: 0,
	            top: baseData.categoryAxisTop,
	            left: baseData.categoryAxisLeft
	        };

	        return seriesDataModel.map(function(seriesGroup) {
	            var iteratee = snippet.bind(self._makeBulletChartBound, self, baseData, iterationData);
	            var bounds = seriesGroup.map(iteratee);

	            self._updateIterationData(iterationData, baseData.itemWidth);

	            return bounds;
	        });
	    },

	    /**
	     * prepare a base data before making a bound
	     * @returns {object} - base data
	     * @private
	     */
	    _makeBaseDataForMakingBound: function() {
	        var groupCount = this._getSeriesDataModel().getGroupCount();
	        var dimension = this.layout.dimension;
	        var width = dimension.width;
	        var height = dimension.height;
	        var position = this.layout.position;
	        var categoryAxisTop = position.top;
	        var categoryAxisLeft = position.left;
	        var categoryAxisWidth, valueAxisWidth, itemWidth;

	        if (this.isVertical) {
	            categoryAxisTop += height;
	            categoryAxisWidth = width;
	            valueAxisWidth = height;
	        } else {
	            categoryAxisWidth = height;
	            valueAxisWidth = width;
	        }

	        itemWidth = categoryAxisWidth / groupCount;

	        return {
	            categoryAxisTop: categoryAxisTop,
	            categoryAxisLeft: categoryAxisLeft,
	            categoryAxisWidth: categoryAxisWidth,
	            valueAxisWidth: valueAxisWidth,
	            itemWidth: itemWidth
	        };
	    },

	    /**
	     * Create a bullet chart bound before making a base data
	     * @param {object} baseData - base data for making a tooltip
	     * @param {object} iterationData - increasing data while generating a graph data: index of item, graph position
	     * @param {object} item - series item
	     * @returns {Bound} - bullet graph bound
	     * @private
	     */
	    _makeBulletChartBound: function(baseData, iterationData, item) {
	        var type = item.type;
	        var bound;

	        if (type === chartConst.BULLET_TYPE_ACTUAL) {
	            bound = this._makeBarBound(item, chartConst.BULLET_ACTUAL_HEIGHT_RATIO, baseData, iterationData);
	        } else if (type === chartConst.BULLET_TYPE_RANGE) {
	            bound = this._makeBarBound(item, chartConst.BULLET_RANGES_HEIGHT_RATIO, baseData, iterationData);
	        } else if (type === chartConst.BULLET_TYPE_MARKER) {
	            bound = this._makeLineBound(item, chartConst.BULLET_MARKERS_HEIGHT_RATIO, baseData, iterationData);
	        }

	        bound.type = type;

	        return bound;
	    },

	    /**
	     * Create bar type bound data
	     * @param {object} model - series item data
	     * @param {number} widthRatio - thickness compare to graph area
	     * @param {object} baseData - base data needed for making a bar bound
	     * @param {object} iterationData - data for setting up position
	     * @returns {object} - bar type bound data
	     * @private
	     */
	    _makeBarBound: function(model, widthRatio, baseData, iterationData) {
	        var barWidth = baseData.itemWidth * widthRatio;
	        var barHeight = baseData.valueAxisWidth * model.ratioDistance;
	        var barEndHeight = baseData.valueAxisWidth * model.endRatio;
	        var bound;

	        if (this.isVertical) {
	            bound = this._makeVerticalBarBound(iterationData, baseData, barWidth, barHeight, barEndHeight);
	        } else {
	            bound = this._makeHorizontalBarBound(iterationData, baseData, barWidth, barHeight, barEndHeight);
	        }

	        return bound;
	    },

	    /**
	     * create a bound of bar type component, when it is virtical chart
	     * @param {object} iterationData - increasing data while generating a graph data: graph position
	     * @param {object} baseData - base data
	     * @param {number} barWidth - width of bar
	     * @param {number} barHeight - bar size from start position to end position
	     * @param {number} barEndHeight - bar size from axis start point to end position
	     * @returns {object} - bound data
	     * @private
	     */
	    _makeVerticalBarBound: function(iterationData, baseData, barWidth, barHeight, barEndHeight) {
	        return {
	            top: iterationData.top - barEndHeight,
	            left: iterationData.left + ((baseData.itemWidth - barWidth) / 2),
	            width: barWidth,
	            height: barHeight
	        };
	    },

	    /**
	     * create a bound of bar type component, when it is a horizontal chart
	     * @param {object} iterationData - increasing data while generating a graph data: graph position
	     * @param {object} baseData - base data
	     * @param {number} barWidth - width of bar
	     * @param {number} barHeight - bar size from start position to end position
	     * @param {number} barEndHeight - bar size from axis start point to end position
	     * @returns {object} - bound data
	     * @private
	     */
	    _makeHorizontalBarBound: function(iterationData, baseData, barWidth, barHeight, barEndHeight) {
	        return {
	            top: iterationData.top + ((baseData.itemWidth - barWidth) / 2),
	            left: iterationData.left + barEndHeight - barHeight,
	            width: barHeight,
	            height: barWidth
	        };
	    },

	    /**
	     * Create line type bound data
	     * @param {object} model - series item data
	     * @param {number} widthRatio - graph thickness compare to graph area
	     * @param {object} baseData - base data needed for making a line bound
	     * @param {object} iterationData - data for setting up position
	     * @returns {object} - line type bound data
	     * @private
	     */
	    _makeLineBound: function(model, widthRatio, baseData, iterationData) {
	        var lineWidth = baseData.itemWidth * widthRatio;
	        var endHeight = baseData.valueAxisWidth * model.endRatio;
	        var width = chartConst.BULLET_MARKER_DETECT_PADDING;
	        var height = chartConst.BULLET_MARKER_DETECT_PADDING;
	        var top, left;

	        if (this.isVertical) {
	            top = iterationData.top - endHeight;
	            left = iterationData.left + ((baseData.itemWidth - lineWidth) / 2);
	            width = lineWidth;
	        } else {
	            top = iterationData.top + ((baseData.itemWidth - lineWidth) / 2);
	            left = iterationData.left + endHeight;
	            height = lineWidth;
	        }

	        return {
	            top: top,
	            left: left,
	            length: lineWidth,
	            width: width,
	            height: height
	        };
	    },

	    /**
	     * update iterationData after making a graph bound
	     * @param {object} iterationData - iteration data
	     * @param {number} itemWidth - size of category axis area
	     * @private
	     */
	    _updateIterationData: function(iterationData, itemWidth) {
	        iterationData.renderedItemCount += 1;

	        if (this.isVertical) {
	            iterationData.left += itemWidth;
	        } else {
	            iterationData.top += itemWidth;
	        }
	    },

	    /**
	    * Render series area.
	    * @param {object} paper - raphael object
	    * @param {function} funcRenderGraph - function for graph rendering
	    * @private
	    */
	    _renderSeriesArea: function(paper, funcRenderGraph) {
	        Series.prototype._renderSeriesArea.call(this, paper, funcRenderGraph);

	        this.dataProcessor.setGraphColors(this.graphRenderer.getGraphColors());
	    },

	    /**
	     * Render series labels
	     * Series labels are shown only when `options.series.showLabel` is enabled
	     * @param {object} paper paper
	     * @returns {Array.<SVGElement>} - svg label sets
	     * @override
	     * @private
	     */
	    _renderSeriesLabel: function(paper) {
	        var theme = this.theme.label;
	        var seriesDataModel = this._getSeriesDataModel();
	        var groupLabels = this._getLabelTexts(seriesDataModel);
	        var positionsSet = this._calculateLabelPositions(seriesDataModel, theme);

	        return this.graphRenderer.renderSeriesLabel(paper, positionsSet, groupLabels, theme);
	    },

	    /**
	     * Get label texts needed for enabling `options.series.showLabel` option
	     * @param {object} seriesDataModel - seriesDataModel
	     * @returns {Array.<string>} - actual data and marker data label
	     * @private
	     */
	    _getLabelTexts: function(seriesDataModel) {
	        return seriesDataModel.map(function(seriesGroup) {
	            var seriesLabels = [];

	            seriesGroup.each(function(seriesDatum) {
	                if (seriesDatum.type !== chartConst.BULLET_TYPE_RANGE) {
	                    seriesLabels.push(seriesDatum.endLabel);
	                }
	            });

	            return seriesLabels;
	        });
	    },

	    /**
	     * calculate a label position
	     * @param {object} seriesDataModel - bullet chart's series data model
	     * @param {object} theme - style needed to calculate the size of the text
	     * @returns {Array.<object>} - position of label text
	     * @private
	     */
	    _calculateLabelPositions: function(seriesDataModel, theme) {
	        var serieses = this.seriesData.groupBounds;
	        var labelHeight = renderUtil.getRenderedLabelHeight(chartConst.MAX_HEIGHT_WORD, theme);

	        return snippet.map(serieses, function(series) {
	            var bounds = [];

	            snippet.forEach(series, function(item) {
	                if (item.type !== chartConst.BULLET_TYPE_RANGE) {
	                    bounds.push(this._makePositionByBound(item, labelHeight));
	                }
	            }, this);

	            return bounds;
	        }, this);
	    },

	    /**
	     * make position top, left data using bound data and label height
	     * @param {object} bound - bound data
	     * @param {number} labelHeight - label's height
	     * @returns {object} - position top, left
	     * @private
	     */
	    _makePositionByBound: function(bound, labelHeight) {
	        var boundTop = bound.top;
	        var boundLeft = bound.left;
	        var width, height;
	        var position = {};

	        if (this.isVertical) {
	            width = bound.width || bound.length;
	            position.top = boundTop - labelHeight;
	            position.left = boundLeft + (width / 2);
	        } else {
	            width = bound.width || 0;
	            height = bound.height || bound.length;
	            position.top = boundTop + (height / 2);
	            position.left = boundLeft + 5 + (width || 0);
	        }

	        return position;
	    }
	});

	/**
	 * BulletChartSeries factory function
	 * @param {object} params - series initialization data
	 * @returns {BulletChartSeries} - bullet chart series
	 */
	function bulletSeriesFactory(params) {
	    var chartTheme = params.chartTheme;

	    params.libType = params.chartOptions.libType;
	    params.chartType = 'bullet';
	    params.chartBackground = chartTheme.chart.background;

	    return new BulletChartSeries(params);
	}

	bulletSeriesFactory.componentType = 'series';
	bulletSeriesFactory.BulletChartSeries = BulletChartSeries;

	module.exports = bulletSeriesFactory;


/***/ }),
/* 99 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileoverview Zoom component.
	 * @author NHN Ent.
	 *         FE Development Lab <dl_javascript@nhnent.com>
	 */

	'use strict';

	var snippet = __webpack_require__(6);
	var IS_MSIE_VERSION_LTE_THAN_8 = snippet.browser.msie && snippet.browser.version <= 8;

	var seriesTemplate = __webpack_require__(100);
	var chartConst = __webpack_require__(8);
	var dom = __webpack_require__(9);
	var renderUtil = __webpack_require__(7);
	var eventListener = __webpack_require__(55);
	var predicate = __webpack_require__(21);

	var Zoom = snippet.defineClass(/** @lends Zoom.prototype */{
	    /**
	     * zoom component className
	     * @type {string}
	     */
	    className: 'tui-chart-zoom-area',
	    /**
	     * Zoom component.
	     * @param {{eventBus: object}} params - parameters
	     * @constructs Zoom
	     * @private
	     */
	    init: function(params) {
	        var seriesTypes = params.seriesTypes;
	        var isMapChart = (seriesTypes && seriesTypes.length) ? predicate.isMapChart(seriesTypes[0]) : false;
	        var legendOption = params.dataProcessor.options.legend;
	        var isLegendTop = predicate.isLegendAlignTop(legendOption.align);
	        var isLegendVisible = legendOption.visible !== false;

	        this.isMapLegendTop = (isMapChart && isLegendTop && isLegendVisible);

	        /**
	         * event bus for transmitting message
	         * @type {object}
	         */
	        this.eventBus = params.eventBus;

	        /**
	         * Magnification.
	         * @type {number}
	         */
	        this.magn = 1;

	        /**
	         * Stacked wheelDelta.
	         * @type {number}
	         */
	        this.stackedWheelDelta = 0;

	        this.drawingType = chartConst.COMPONENT_TYPE_DOM;

	        this._attachToEventBus();
	    },

	    /**
	     * Attach to event bus.
	     * @private
	     */
	    _attachToEventBus: function() {
	        this.eventBus.on('wheel', this.onWheel, this);
	    },

	    /**
	     * Render.
	     * @param {{positionMap: {series: {left: number, top: number}}}} data - data for rendering
	     * @returns {HTMLElement} zoom container
	     */
	    render: function(data) {
	        var container;
	        var positionTop;
	        var position;

	        if (!IS_MSIE_VERSION_LTE_THAN_8) {
	            positionTop = data.positionMap.series.top
	                - chartConst.MAP_CHART_ZOOM_AREA_HEIGHT + chartConst.MAP_CHART_ZOOM_AREA_WIDTH;

	            if (this.isMapLegendTop) {
	                positionTop = data.positionMap.legend.top - chartConst.MAP_CHART_ZOOM_AREA_WIDTH;
	            }

	            position = {
	                top: positionTop,
	                right: chartConst.CHART_PADDING
	            };

	            container = dom.create('DIV', this.className);

	            container.innerHTML += seriesTemplate.ZOOM_BUTTONS;
	            renderUtil.renderPosition(container, position);
	            this._attachEvent(container);
	        }

	        return container;
	    },

	    /**
	     * Find button element.
	     * @param {HTMLElement} target target element.
	     * @returns {?HTMLElement} button element
	     * @private
	     */
	    _findBtnElement: function(target) {
	        var btnClassName = 'tui-chart-zoom-btn',
	            btnElement = target;

	        if (!dom.hasClass(target, btnClassName)) {
	            btnElement = dom.findParentByClass(target, btnClassName);
	        }

	        return btnElement;
	    },

	    /**
	     * Zoom
	     * @param {number} magn magnification
	     * @param {?{left: number, top: number}} position mouse position
	     * @private
	     */
	    _zoom: function(magn, position) {
	        this.eventBus.fire('zoomMap', magn, position);
	    },

	    /**
	     * On click.
	     * @param {MouseEvent} e mouse event
	     * @returns {?boolean} prevent default for ie
	     * @private
	     */
	    _onClick: function(e) {
	        var target = e.target || e.srcElement;
	        var btnElement = this._findBtnElement(target);
	        var zoomDirection = btnElement.getAttribute('data-magn');
	        var magn = this._calculateMagn(zoomDirection);

	        if (magn > 5) {
	            this.magn = 5;
	        } else if (magn < 1) {
	            this.magn = 1;
	        } else if (magn >= 1) {
	            this._zoom(magn);
	        }

	        if (e.preventDefault) {
	            e.preventDefault();
	        }

	        return false;
	    },

	    /**
	     * Attach event.
	     * @param {HTMLElement} target target element
	     * @private
	     */
	    _attachEvent: function(target) {
	        eventListener.on(target, 'click', this._onClick, this);
	    },

	    /**
	     * Calculate magnification from zoomDirection.
	     * @param {number} zoomDirection zoomDirection (positive is zoomIn)
	     * @returns {number} magnification
	     * @private
	     */
	    _calculateMagn: function(zoomDirection) {
	        if (zoomDirection > 0) {
	            this.magn += 0.1;
	        } else if (zoomDirection < 0) {
	            this.magn -= 0.1;
	        }

	        return this.magn;
	    },

	    /**
	     * On wheel.
	     * @param {number} wheelDelta wheelDelta
	     * @param {{left: number, top: number}} position mouse position
	     */
	    onWheel: function(wheelDelta, position) {
	        var magn = this._calculateMagn(wheelDelta);

	        if (magn > 5) {
	            this.magn = 5;
	        } else if (magn < 1) {
	            this.magn = 1;
	        } else if (magn >= 1) {
	            this._zoom(magn, position);
	        }
	    }
	});

	function zoomFactory(params) {
	    return new Zoom(params);
	}

	zoomFactory.componentType = 'zoom';

	module.exports = zoomFactory;


/***/ }),
/* 100 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileoverview This is templates of series.
	 * @author NHN Ent.
	 *         FE Development Lab <dl_javascript@nhnent.com>
	 */

	'use strict';

	var templateMaker = __webpack_require__(65);

	var htmls = {
	    HTML_SERIES_LABEL: '<div class="tui-chart-series-label" style="{{ cssText }}"{{ rangeLabelAttribute }}>' +
	        '{{ label }}</div>',
	    TEXT_CSS_TEXT: 'left:{{ left }}px;top:{{ top }}px;font-family:{{ fontFamily }};' +
	        'font-size:{{ fontSize }}px;font-weight:{{ fontWeight }}{{opacity}}',
	    TEXT_CSS_TEXT_FOR_LINE_TYPE: 'left:{{ left }}%;top:{{ top }}%;font-family:{{ fontFamily }};' +
	    'font-size:{{ fontSize }}px;font-weight:{{ fontWeight }}{{opacity}}',
	    HTML_ZOOM_BUTTONS: '<a class="tui-chart-zoom-btn zoom-in" href="#" data-magn="1"></a>' +
	        '<a class="tui-chart-zoom-btn zoom-out" href="#" data-magn="-1"></a>',
	    HTML_SERIES_BLOCK: '<div class="tui-chart-series-block" style="{{ cssText }}">{{ label }}</div>'
	};

	module.exports = {
	    tplSeriesLabel: templateMaker.template(htmls.HTML_SERIES_LABEL),
	    tplCssText: templateMaker.template(htmls.TEXT_CSS_TEXT),
	    tplCssTextForLineType: templateMaker.template(htmls.TEXT_CSS_TEXT_FOR_LINE_TYPE),
	    ZOOM_BUTTONS: htmls.HTML_ZOOM_BUTTONS,
	    tplSeriesBlock: templateMaker.template(htmls.HTML_SERIES_BLOCK)
	};


/***/ }),
/* 101 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileoverview DataProcessor process rawData.
	 * rawData.categories --> categories
	 * rawData.series --> SeriesDataModel, legendLabels, legendData
	 * @author NHN Ent.
	 *         FE Development Lab <dl_javascript@nhnent.com>
	 */

	'use strict';

	var chartConst = __webpack_require__(8);
	var DataProcessorBase = __webpack_require__(102);
	var SeriesDataModel = __webpack_require__(103);
	var SeriesDataModelForBoxplot = __webpack_require__(107);
	var SeriesDataModelForBullet = __webpack_require__(109);
	var SeriesDataModelForTreemap = __webpack_require__(110);
	var SeriesGroup = __webpack_require__(104);
	var rawDataHandler = __webpack_require__(31);
	var predicate = __webpack_require__(21);
	var renderUtil = __webpack_require__(7);
	var calculator = __webpack_require__(45);
	var objectUtil = __webpack_require__(36);
	var snippet = __webpack_require__(6);

	var concat = Array.prototype.concat;

	var isUndefined = snippet.isUndefined;

	/*
	 * Raw series datum.
	 * @typedef {{name: ?string, data: Array.<number>, stack: ?string}} rawSeriesDatum
	 */

	/*
	 * Raw series data.
	 * @typedef {Array.<rawSeriesDatum>} rawSeriesData
	 */

	/*
	 * Raw data by user.
	 * @typedef {{
	 *      categories: ?Array.<string>,
	 *      series: (rawSeriesData|{line: ?rawSeriesData, column: ?rawSeriesData})
	 * }} rawData
	 */

	/*
	 * SeriesDataModel is base model for drawing graph of chart series area,
	 *      and create from rawSeriesData by user,
	 * SeriesDataModel.groups has SeriesGroups.
	 */

	/*
	 * SeriesGroup is a element of SeriesDataModel.groups.
	 * SeriesGroup.items has SeriesItem.
	 */

	var DataProcessor = snippet.defineClass(DataProcessorBase, /** @lends DataProcessor.prototype */{
	    /**
	     * Data processor.
	     * @constructs DataProcessor
	     * @private
	     * @param {rawData} rawData raw data
	     * @param {string} chartType chart type
	     * @param {object} options options
	     * @param {Array.<string>} seriesTypes chart types
	     */
	    init: function(rawData, chartType, options, seriesTypes) {
	        /**
	         * original raw data.
	         * @type {{categories: ?Array.<string>, series: Array.<object>}}
	         */
	        this.originalRawData = objectUtil.deepCopy(rawData);

	        /**
	         * chart type
	         * @type {string}
	         */
	        this.chartType = chartType;

	        /**
	         * chart options
	         * @type {Object}
	         */
	        this.options = options;

	        /**
	         * seriesTypes is sorted chart types for rendering series area of combo chart.
	         * @type {Array.<string>}
	         */
	        this.seriesTypes = seriesTypes;

	        /**
	         * legend data for rendering legend of group tooltip
	         * @type {Array.<{chartType: string, label: string}>}
	         */
	        this.originalLegendData = null;

	        /**
	         * select legend index
	         * @type {number}
	         */
	        this.selectLegendIndex = null;

	        /**
	         * dynamic data array for adding data.
	         * @type {Array.<{category: string | number, values: Array.<number>}>}
	         */
	        this.dynamicData = [];

	        this.defaultValues = [0, 500];

	        this.initData(rawData);
	        this.initZoomedRawData();
	        this.baseInit();
	    },

	    /**
	     * Get original raw data.
	     * @returns {rawData} raw data
	     */
	    getOriginalRawData: function() {
	        return objectUtil.deepCopy(this.originalRawData);
	    },

	    /**
	     * Get zoomed raw data.
	     * @returns {*|null}
	     */
	    getZoomedRawData: function() {
	        var zoomedRawData = this.zoomedRawData;

	        if (zoomedRawData) {
	            zoomedRawData = objectUtil.deepCopy(zoomedRawData);
	        } else {
	            zoomedRawData = this.getOriginalRawData();
	        }

	        return zoomedRawData;
	    },

	    /**
	     * Filter seriesData by index range.
	     * @param {Array.<{data: Array}>} seriesData - series data
	     * @param {number} startIndex - start index
	     * @param {number} endIndex - end index
	     * @returns {Array.<Array.<object>>}
	     * @private
	     */
	    _filterSeriesDataByIndexRange: function(seriesData, startIndex, endIndex) {
	        snippet.forEachArray(seriesData, function(seriesDatum) {
	            seriesDatum.data = seriesDatum.data.slice(startIndex, endIndex + 1);
	        });

	        return seriesData;
	    },

	    /**
	     * Filter raw data by index range.
	     * @param {{series: Array.<object>, categories: Array.<string>}} rawData - raw data
	     * @param {Array.<number>} indexRange - index range for zoom
	     * @returns {*}
	     * @private
	     */
	    _filterRawDataByIndexRange: function(rawData, indexRange) {
	        var self = this;
	        var startIndex = indexRange[0];
	        var endIndex = indexRange[1];

	        snippet.forEach(rawData.series, function(seriesDataSet, seriesType) {
	            rawData.series[seriesType] = self._filterSeriesDataByIndexRange(seriesDataSet, startIndex, endIndex);
	        });

	        if (rawData.categories) {
	            rawData.categories = rawData.categories.slice(startIndex, endIndex + 1);
	        }

	        return rawData;
	    },

	    /**
	     * Update raw data for zoom
	     * @param {Array.<number>} indexRange - index range for zoom
	     */
	    updateRawDataForZoom: function(indexRange) {
	        var rawData = this.getRawData();
	        var zoomedRawData = this.getZoomedRawData();

	        this.zoomedRawData = this._filterRawDataByIndexRange(zoomedRawData, indexRange);
	        rawData = this._filterRawDataByIndexRange(rawData, indexRange);
	        this.initData(rawData);
	    },

	    /**
	     * Init zoomed raw data.
	     */
	    initZoomedRawData: function() {
	        this.zoomedRawData = null;
	    },

	    /**
	     * Initialize data.
	     * @param {rawData} rawData raw data
	     */
	    initData: function(rawData) {
	        /**
	         * raw data
	         * @type {rawData}
	         */
	        this.rawData = rawData;

	        /**
	         * categoriesMap
	         * @type {null|object}
	         */
	        this.categoriesMap = null;

	        /**
	         * categories isDatetype true or false
	         * @type {null|object}
	         */
	        this.categoriesIsDateTime = {};

	        /**
	         * stacks
	         * @type {Array.<number>}
	         */
	        this.stacks = null;

	        /**
	         * seriesDataModel map
	         * @type {object.<string, SeriesDataModel>}
	         */
	        this.seriesDataModelMap = {};

	        /**
	         * SeriesGroups
	         * @type {Array.<SeriesGroup>}
	         */
	        this.seriesGroups = null;

	        /**
	         * map of values of SeriesItems
	         * @type {Object.<string, Array.<number>>}
	         */
	        this.valuesMap = {};

	        /**
	         * legend labels for rendering legend area
	         * @type {{column: Array.<string>, line: Array.<string> | Array.<string>}}
	         */
	        this.legendLabels = null;

	        /**
	         * legend data for rendering legend
	         * @type {Array.<{chartType: string, label: string}>}
	         */
	        this.legendData = null;

	        /**
	         * multiline categories
	         * @type {Array.<string>}
	         */
	        this.multilineCategories = null;

	        /**
	         * whether coordinate type data or not
	         * @type {null|boolean}
	         */
	        this.coordinateType = null;
	    },

	    /**
	     * Get raw data.
	     * @returns {rawData}
	     */
	    getRawData: function() {
	        return this.rawData;
	    },

	    /**
	     * Find chart type from series name.
	     * @param {string} seriesType - series name
	     * @returns {*}
	     */
	    findChartType: function(seriesType) {
	        return rawDataHandler.findChartType(this.rawData.seriesAlias, seriesType);
	    },

	    /**
	     * Escape categories.
	     * @param {Array.<string, number>} categories - cetegories
	     * @returns {*|Array.<Object>|Array}
	     * @private
	     */
	    _escapeCategories: function(categories) {
	        return snippet.map(categories, function(category) {
	            return snippet.encodeHTMLEntity(String(category));
	        });
	    },

	    /**
	     * Map categories.
	     * @param {Array.<string | number>} categories - categories
	     * @param {string} [axisName] - axis name like 'x' or 'y'
	     * @returns {Array.<string | number>}
	     * @private
	     */
	    _mapCategories: function(categories, axisName) {
	        var axisType = axisName + 'Axis';
	        var options = this.options[axisType] || {};
	        var isDateTime = false;

	        if (snippet.isArray(options)) {
	            isDateTime = snippet.filter(options, function(option) {
	                return option.type && predicate.isDatetimeType(option.type);
	            });
	        } else {
	            isDateTime = options.type && predicate.isDatetimeType(options.type);
	        }
	        if (isDateTime) {
	            categories = snippet.map(categories, function(value) {
	                return this.chageDatetypeToTimestamp(value);
	            }, this);
	        } else {
	            categories = this._escapeCategories(categories);
	        }
	        this.categoriesIsDateTime[axisName] = isDateTime;

	        return categories;
	    },

	    /**
	     * Process categories.
	     * @param {string} type - category type (x or y)
	     * @returns {null | Array.<string>} processed categories
	     * @private
	     */
	    _processCategories: function(type) {
	        var rawCategories = this.rawData.categories;
	        var categoriesMap = {};

	        if (snippet.isArray(rawCategories)) {
	            categoriesMap[type] = this._mapCategories(rawCategories, type);
	        } else if (rawCategories) {
	            if (rawCategories.x) {
	                categoriesMap.x = this._mapCategories(rawCategories.x, 'x');
	            }

	            if (rawCategories.y) {
	                categoriesMap.y = this._mapCategories(rawCategories.y, 'y').reverse();
	            }
	        }

	        return categoriesMap;
	    },

	    /**
	     * Get Categories
	     * @param {boolean} isVertical - whether vertical or not
	     * @returns {Array.<string>}}
	     */
	    getCategories: function(isVertical) {
	        var type = isVertical ? 'y' : 'x';
	        var foundCategories = [];

	        if (!this.categoriesMap) {
	            this.categoriesMap = this._processCategories(type);
	        }

	        if (snippet.isExisty(isVertical)) {
	            foundCategories = this.categoriesMap[type] || [];
	        } else {
	            snippet.forEach(this.categoriesMap, function(categories) {
	                foundCategories = categories;

	                return false;
	            });
	        }

	        return foundCategories;
	    },

	    /**
	     * Get Category date type
	     * @param {boolean} isVertical - whether vertical or not
	     * @returns {boolean}
	     */
	    getCategorieDateType: function(isVertical) {
	        var type = isVertical ? 'y' : 'x';

	        return this.categoriesIsDateTime[type];
	    },

	    /**
	     * value to timestamp of datetype category
	     * @param {string} dateTypeValue - datetype category value
	     * @returns {boolean}
	     */
	    chageDatetypeToTimestamp: function(dateTypeValue) {
	        var date = new Date(dateTypeValue);
	        if (!(date.getTime() > 0)) {
	            date = new Date(parseInt(dateTypeValue, 10));
	        }

	        return date.getTime() || dateTypeValue;
	    },

	    /**
	     * Get category count.
	     * @param {boolean} isVertical - whether vertical or not
	     * @returns {*}
	     */
	    getCategoryCount: function(isVertical) {
	        var categories = this.getCategories(isVertical);

	        return categories ? categories.length : 0;
	    },

	    /**
	     * Whether has categories or not.
	     * @param {boolean} isVertical - whether vertical or not
	     * @returns {boolean}
	     */
	    hasCategories: function(isVertical) {
	        return !!this.getCategoryCount(isVertical);
	    },

	    /**
	     * Whether count of x data grater than count of y data.
	     * @param {string} chartType - chart type
	     * @returns {boolean}
	     */
	    isXCountGreaterThanYCount: function(chartType) {
	        var seriesDataModel = this.getSeriesDataModel(chartType);

	        return seriesDataModel.isXCountGreaterThanYCount();
	    },

	    /**
	     * Whether has x value or not.
	     * @param {string} chartType - chart type
	     * @returns {boolean}
	     */
	    hasXValue: function(chartType) {
	        var hasVerticalCategory = this.isXCountGreaterThanYCount(chartType);

	        return !this.hasCategories(hasVerticalCategory) || hasVerticalCategory;
	    },

	    /**
	     * Whether has y value or not.
	     * @param {string} chartType - chart type
	     * @returns {boolean}
	     */
	    hasYValue: function(chartType) {
	        var hasVerticalCategory = this.isXCountGreaterThanYCount(chartType);

	        return !this.hasCategories(hasVerticalCategory) || !hasVerticalCategory;
	    },

	    /**
	     * Get category.
	     * @param {number} index index
	     * @param {boolean} isVertical - whether vertical or not
	     * @returns {string} category
	     */
	    getCategory: function(index, isVertical) {
	        return this.getCategories(isVertical)[index];
	    },

	    /**
	     * Find category index by value
	     * @param {string} value - category value
	     * @returns {null|number}
	     */
	    findCategoryIndex: function(value) {
	        var categories = this.getCategories();
	        var isDateType = this.getCategorieDateType();
	        var foundIndex = null;

	        snippet.forEachArray(categories, function(category, index) {
	            if (isDateType) {
	                value = this.chageDatetypeToTimestamp(value);
	            }

	            if (category === value) {
	                foundIndex = index;
	            }

	            return snippet.isNull(foundIndex);
	        }, this);

	        return foundIndex;
	    },

	    /**
	     * @param {string} value - category
	     * @returns {number} - found: category index, not found: -1
	     */
	    findAbsoluteCategoryIndex: function(value) {
	        var originalCategories = this.originalRawData ? this.originalRawData.categories : null;
	        var index = -1;

	        if (!originalCategories) {
	            return index;
	        }

	        snippet.forEach(originalCategories, function(category, categoryIndex) {
	            var found = category === value;
	            if (found) {
	                index = categoryIndex;
	            }

	            return !found;
	        });

	        return index;
	    },

	    /**
	     * Get tooltip category.
	     * @param {number} categoryIndex - category index
	     * @param {boolean} isVertical - whether vertical category or not
	     * @returns {string}
	     * @private
	     */
	    _getTooltipCategory: function(categoryIndex, isVertical) {
	        var category = this.getCategory(categoryIndex, isVertical);
	        var axisType = isVertical ? 'yAxis' : 'xAxis';
	        var axisOption = this.options[axisType] || {};
	        var tooltipOption = this.options.tooltip || {};

	        if (predicate.isDatetimeType(tooltipOption.type)) {
	            category = renderUtil.formatDate(category, tooltipOption.dateFormat);
	        } else if (predicate.isDatetimeType(axisOption.type)) {
	            category = renderUtil.formatDate(category, axisOption.dateFormat);
	        }

	        return category;
	    },
	    /**
	     * Make category for tooltip.
	     * @param {number} categoryIndex - category index
	     * @param {number} oppositeIndex - opposite index
	     * @param {boolean} isVerticalChart - whether vertical chart or not
	     * @returns {string}
	     */
	    makeTooltipCategory: function(categoryIndex, oppositeIndex, isVerticalChart) {
	        var isVertical = !isVerticalChart;
	        var category = this._getTooltipCategory(categoryIndex, isVertical);
	        var categoryCount = this.getCategoryCount(!isVertical);

	        if (categoryCount) {
	            category += ', ' + this._getTooltipCategory(categoryCount - oppositeIndex - 1, !isVertical);
	        }

	        return category;
	    },

	    /**
	     * Get stacks from raw series data.
	     * @param {string} seriesType seriesType to count stacks
	     * @returns {Array.<string>}
	     */
	    getStacks: function(seriesType) {
	        if (!this.stacks) {
	            this.stacks = rawDataHandler.pickStacks(this.rawData.series[seriesType]);
	        }

	        return this.stacks;
	    },

	    /**
	     * Get stack count.
	     * @param {string} seriesType - series type
	     * @returns {Number}
	     */
	    getStackCount: function(seriesType) {
	        return this.getStacks(seriesType).length;
	    },

	    /**
	     * Find stack index from stack list by stack value.
	     * @param {string} stack stack
	     * @returns {number}
	     */
	    findStackIndex: function(stack) {
	        return snippet.inArray(stack, this.getStacks());
	    },

	    /**
	     * Whether coordinate type or not.
	     * @returns {boolean}
	     */
	    isCoordinateType: function() {
	        var chartType = this.chartType;
	        var coordinateType = this.coordinateType;

	        if (!snippet.isExisty(coordinateType)) {
	            coordinateType = predicate.isCoordinateTypeChart(chartType);
	            coordinateType = coordinateType || predicate.isLineScatterComboChart(chartType, this.seriesTypes);
	            coordinateType = coordinateType || (predicate.isLineTypeChart(chartType) && !this.hasCategories());
	            this.coordinateType = coordinateType;
	        }

	        return coordinateType;
	    },

	    /**
	     * Get SeriesDataModel.
	     * @param {string} seriesType - series name
	     * @returns {SeriesDataModel}
	     */
	    getSeriesDataModel: function(seriesType) {
	        var rawSeriesData, chartType, SeriesDataModelClass;

	        if (!this.seriesDataModelMap[seriesType]) {
	            chartType = this.findChartType(seriesType);
	            rawSeriesData = this.rawData.series[seriesType];

	            if (predicate.isBoxplotChart(this.chartType)) {
	                SeriesDataModelClass = SeriesDataModelForBoxplot;
	            } else if (predicate.isTreemapChart(this.chartType)) {
	                SeriesDataModelClass = SeriesDataModelForTreemap;
	            } else if (predicate.isBulletChart(this.chartType)) {
	                SeriesDataModelClass = SeriesDataModelForBullet;
	            } else {
	                SeriesDataModelClass = SeriesDataModel;
	            }

	            this.seriesDataModelMap[seriesType] = new SeriesDataModelClass(rawSeriesData, chartType,
	                this.options, this.getFormatFunctions(), this.isCoordinateType());
	        }

	        return this.seriesDataModelMap[seriesType];
	    },

	    /**
	     * Get chart option
	     * @param {string} optionType option category
	     * @returns {object}
	     */
	    getOption: function(optionType) {
	        return this.options[optionType];
	    },

	    /**
	     * Get group count.
	     * @param {string} chartType chart type
	     * @returns {number}
	     */
	    getGroupCount: function(chartType) {
	        return this.getSeriesDataModel(chartType).getGroupCount();
	    },

	    /**
	     * Push category.
	     * @param {string} category - category
	     * @private
	     */
	    _pushCategory: function(category) {
	        if (this.rawData.categories) {
	            this.rawData.categories.push(category);
	            this.originalRawData.categories.push(category);
	        }
	    },

	    /**
	     * Shift category.
	     * @private
	     */
	    _shiftCategory: function() {
	        if (this.rawData.categories) {
	            this.rawData.categories.shift();
	            this.originalRawData.categories.shift();
	        }
	    },

	    /**
	     * Find raw series datum by name.
	     * @param {string} name - legend name
	     * @param {string} [seriesType] - series name
	     * @returns {object}
	     * @private
	     */
	    _findRawSeriesDatumByName: function(name, seriesType) {
	        var foundSeriesDatum = null;
	        var seriesData = this.rawData.series[seriesType];

	        snippet.forEachArray(seriesData, function(seriesDatum) {
	            var isEqual = seriesDatum.name === name;

	            if (isEqual) {
	                foundSeriesDatum = seriesDatum;
	            }

	            return !isEqual;
	        });

	        return foundSeriesDatum;
	    },

	    /**
	     * Push value to data property of series.
	     * @param {{name: string, data: Array}} seriesDatum - series datum
	     * @param {Array.<number>|{x: number, y: number, r: number}|number} value - value
	     * @param {string} seriesType - sereis name
	     * @private
	     */
	    _pushValue: function(seriesDatum, value, seriesType) {
	        var rawSeriesDatum = this._findRawSeriesDatumByName(seriesDatum.name, seriesType);

	        seriesDatum.data.push(value);

	        if (rawSeriesDatum) {
	            rawSeriesDatum.data.push(value);
	        }
	    },

	    /**
	     * Push values to series of originalRawData and series of rawData.
	     * @param {Array.<{name: string, data: Array}>} seriesData - series data
	     * @param {Array} values - values
	     * @param {string} [seriesType] - series name
	     * @private
	     */
	    _pushValues: function(seriesData, values, seriesType) {
	        var self = this;

	        snippet.forEachArray(seriesData, function(seriesDatum, index) {
	            self._pushValue(seriesDatum, values[index], seriesType);
	        });
	    },

	    /**
	     * Push series data.
	     * @param {Array.<number>} values - values
	     * @private
	     */
	    _pushSeriesData: function(values) {
	        var self = this;
	        var temp;

	        if (this.chartType !== 'combo' && snippet.isArray(values)) {
	            temp = values;
	            values = {};
	            values[this.chartType] = temp;
	        }

	        snippet.forEach(this.originalRawData.series, function(seriesData, seriesType) {
	            self._pushValues(seriesData, values[seriesType], seriesType);
	        });
	    },

	    /**
	     * Shift values.
	     * @param {Array.<{name: string, data: Array}>} seriesData - series data
	     * @param {string} seriesType - series name
	     * @private
	     */
	    _shiftValues: function(seriesData, seriesType) {
	        var self = this;

	        snippet.forEachArray(seriesData, function(seriesDatum) {
	            var rawSeriesDatum = self._findRawSeriesDatumByName(seriesDatum.name, seriesType);

	            seriesDatum.data.shift();
	            if (rawSeriesDatum) {
	                rawSeriesDatum.data.shift();
	            }
	        });
	    },

	    /**
	     * Shift series data.
	     * @private
	     */
	    _shiftSeriesData: function() {
	        var self = this;

	        snippet.forEach(this.originalRawData.series, function(seriesData, seriesType) {
	            self._shiftValues(seriesData, seriesType);
	        });
	    },

	    /**
	     * Add dynamic data.
	     * @param {string} category - category
	     * @param {Array.<number>} values - values
	     */
	    addDynamicData: function(category, values) {
	        this.dynamicData.push({
	            category: category,
	            values: values
	        });
	    },

	    /**
	     * Push dynamic data.
	     * @param {{category: string, values: Array.<number>}} data - adding data
	     * @private
	     */
	    _pushDynamicData: function(data) {
	        this._pushCategory(data.category);
	        this._pushSeriesData(data.values);
	    },

	    /**
	     * Push dynamic data for coordinate type.
	     * @param {object.<string, Array.<number>|object.<string, number>>} data - adding data
	     * @private
	     */
	    _pushDynamicDataForCoordinateType: function(data) {
	        var self = this;
	        snippet.forEachArray(this.originalRawData.series, function(seriesDatum) {
	            self._pushValue(seriesDatum, data[seriesDatum.name]);
	        });
	    },

	    /**
	     * Add data from dynamic data.
	     * @returns {boolean}
	     */
	    addDataFromDynamicData: function() {
	        var datum = this.dynamicData.shift();

	        if (datum) {
	            if (this.isCoordinateType()) {
	                this._pushDynamicDataForCoordinateType(datum.values);
	            } else {
	                this._pushDynamicData(datum);
	            }

	            this.initData(this.rawData);
	        }

	        return !!datum;
	    },

	    /**
	     * Shift data.
	     */
	    shiftData: function() {
	        this._shiftCategory();
	        this._shiftSeriesData();

	        this.initData(this.rawData);
	    },

	    /**
	     * Add data from remain dynamic data.
	     * @param {boolean} shiftingOption - whether has shifting option or not.
	     */
	    addDataFromRemainDynamicData: function(shiftingOption) {
	        var self = this;
	        var dynamicData = this.dynamicData;

	        this.dynamicData = [];

	        snippet.forEach(dynamicData, function(datum) {
	            self._pushCategory(datum.category);
	            self._pushSeriesData(datum.values);
	            if (shiftingOption) {
	                self._shiftCategory();
	                self._shiftSeriesData();
	            }
	        });

	        this.initData(this.rawData);
	    },

	    /**
	     * Traverse all SeriesDataModel by seriesTypes, and executes iteratee function.
	     * @param {function} iteratee iteratee function
	     * @private
	     */
	    _eachByAllSeriesDataModel: function(iteratee) {
	        var self = this,
	            seriesTypes = this.seriesTypes || [this.chartType];

	        snippet.forEachArray(seriesTypes, function(chartType) {
	            return iteratee(self.getSeriesDataModel(chartType), chartType);
	        });
	    },

	    /**
	     * Whether valid all SeriesDataModel or not.
	     * @returns {boolean}
	     */
	    isValidAllSeriesDataModel: function() {
	        var isValid = true;

	        this._eachByAllSeriesDataModel(function(seriesDataModel) {
	            isValid = !!seriesDataModel.getGroupCount();

	            return isValid;
	        });

	        return isValid;
	    },

	    /**
	     * Make SeriesGroups.
	     * @returns {Array.<SeriesGroup>}
	     * @private
	     */
	    _makeSeriesGroups: function() {
	        var joinedGroups = [],
	            seriesGroups;

	        this._eachByAllSeriesDataModel(function(seriesDataModel) {
	            seriesDataModel.each(function(seriesGroup, index) {
	                if (!joinedGroups[index]) {
	                    joinedGroups[index] = [];
	                }
	                joinedGroups[index] = joinedGroups[index].concat(seriesGroup.items);
	            });
	        });

	        seriesGroups = snippet.map(joinedGroups, function(items) {
	            return new SeriesGroup(items);
	        });

	        return seriesGroups;
	    },

	    /**
	     * Get SeriesGroups.
	     * @returns {Array.<SeriesGroup>}
	     */
	    getSeriesGroups: function() {
	        if (!this.seriesGroups) {
	            this.seriesGroups = this._makeSeriesGroups();
	        }

	        return this.seriesGroups;
	    },

	    /**
	     * Get value.
	     * @param {number} groupIndex group index
	     * @param {number} index index
	     * @param {?string} chartType chart type
	     * @returns {number} value
	     */
	    getValue: function(groupIndex, index, chartType) {
	        return this.getSeriesDataModel(chartType).getValue(groupIndex, index);
	    },

	    /**
	     * Get fallback datetime values
	     * @returns {number[]} milliseconds
	     */
	    getDefaultDatetimeValues: function() {
	        var hour = 60 * 60 * 1000;
	        var now = Date.now();

	        return [now - hour, now];
	    },

	    /**
	     * Return boolean value of whether seriesData empty or not
	     * @param {string} chartType Type string of chart
	     * @returns {boolean}
	     */
	    isSeriesDataEmpty: function(chartType) {
	        var rawData = this.rawData;
	        var seriesNotExist = rawData && !rawData.series;

	        return (
	            !rawData
	            || seriesNotExist
	            || (!(rawData.series[chartType])
	                || (rawData.series[chartType] && !(rawData.series[chartType].length)))
	        );
	    },

	    /**
	     * Return boolean value of whether axis limit option empty or not
	     * @param {string} axisType Type string of axis
	     * @returns {boolean}
	     */
	    isLimitOptionsEmpty: function(axisType) {
	        var axisOption = this.options[axisType] || {};

	        return isUndefined(axisOption.min) && isUndefined(axisOption.max);
	    },

	    /**
	     * Return boolean value of whether axis limit option empty or not
	     * @param {string} axisType Type string of axis
	     * @returns {boolean}
	     */
	    isLimitOptionsInsufficient: function(axisType) {
	        var axisOption = this.options[axisType] || {};

	        return isUndefined(axisOption.min) || isUndefined(axisOption.max);
	    },

	    /**
	     * Create values that picked value from SeriesItems of specific SeriesDataModel.
	     * @param {?string} chartType - type of chart
	     * @param {?string} valueType - type of value like value, x, y, r.
	     * @param {?string} axisName - name of axis value 'xAxis' 'yAxis'
	     * @returns {Array.<number>}
	     * @private
	     */
	    _createValues: function(chartType, valueType, axisName) {
	        var values, plotValues;
	        var options = this.options;
	        var plotOptions = options.plot;
	        var axisOption = options[axisName] || {};
	        var type = axisOption.type;
	        var isEmptyRawData = this.isSeriesDataEmpty(chartType);
	        var isEmptyLimitOptions = this.isLimitOptionsEmpty(axisName);

	        var isInsufficientLimitOptions = this.isLimitOptionsInsufficient(axisName);
	        var isLineOrAreaChart = (predicate.isLineChart(chartType) || predicate.isAreaChart(chartType)
	            || predicate.isLineAreaComboChart(chartType, this.seriesTypes));
	        var valueCandidate = this.defaultValues;

	        if (predicate.isComboChart(chartType)) {
	            values = [];
	            this._eachByAllSeriesDataModel(function(seriesDataModel) {
	                values = values.concat(seriesDataModel.getValues(valueType));
	            });
	        } else if (isEmptyRawData && isInsufficientLimitOptions) {
	            if (!isEmptyLimitOptions && isInsufficientLimitOptions) {
	                valueCandidate = valueCandidate.concat([(axisOption.min || axisOption.max)]);
	            }

	            if (valueType === 'x' && type === 'datetime') {
	                values = this.getDefaultDatetimeValues();

	                if (isLineOrAreaChart && plotOptions) {
	                    plotValues = this.getValuesFromPlotOptions(plotOptions, type);
	                    values = values.concat(plotValues);
	                }
	            } else {
	                values = valueCandidate;
	            }
	        } else {
	            values = this.getSeriesDataModel(chartType).getValues(valueType);
	        }

	        return values;
	    },

	    /**
	     * Get values of plot lines, and bands if it exist
	     * @param {{lines: Array.<object>, bands: Array.<object>}} plotOptions plot options
	     * @param {string} [axisType] axis value type 'value' 'datetime'
	     * @returns {Array.<number>}
	     */
	    getValuesFromPlotOptions: function(plotOptions, axisType) {
	        var values = [];

	        if (plotOptions.lines) {
	            snippet.forEach(plotOptions.lines, function(line) {
	                values.push(axisType !== 'datetime' ? line.value : new Date(line.value));
	            });
	        }

	        if (plotOptions.bands) {
	            snippet.forEach(plotOptions.bands, function(line) {
	                var ranges = snippet.map(line.range, function(range) {
	                    return axisType !== 'datetime' ? range : new Date(range);
	                });

	                values = values.concat(ranges);
	            });
	        }

	        return values;
	    },

	    /**
	     * Get values from valuesMap.
	     * @param {?string} chartType - type of chart
	     * @param {?string} valueType - type of value like value, x, y, r.
	     * @param {?string} axisType - type of axis value 'value', 'datetime'
	     * @returns {Array.<number>}
	     */
	    getValues: function(chartType, valueType, axisType) {
	        var mapKey;

	        // chartType = chartType || chartConst.DUMMY_KEY;
	        mapKey = chartType + valueType;

	        if (!this.valuesMap[mapKey]) {
	            this.valuesMap[mapKey] = this._createValues(chartType, valueType, axisType);
	        }

	        return this.valuesMap[mapKey];
	    },

	    /**
	     * Traverse SeriesGroup of all SeriesDataModel, and executes iteratee function.
	     * @param {function} iteratee iteratee function
	     * @param {boolean} [isPivot] - whether pivot or not
	     */
	    eachBySeriesGroup: function(iteratee, isPivot) {
	        this._eachByAllSeriesDataModel(function(seriesDataModel, chartType) {
	            seriesDataModel.each(function(seriesGroup, groupIndex) {
	                iteratee(seriesGroup, groupIndex, chartType);
	            }, isPivot);
	        });
	    },

	    /**
	     * Pick legend label.
	     * @param {object} item item
	     * @returns {string} label
	     * @private
	     */
	    _pickLegendLabel: function(item) {
	        return item.name ? snippet.encodeHTMLEntity(item.name) : null;
	    },

	    /**
	     * Pick legend visibility.
	     * @param {object} item item
	     * @returns {boolean}
	     * @private
	     */
	    _isVisibleLegend: function(item) {
	        var visibility = true;
	        if (snippet.isExisty(item.visible) && item.visible === false) {
	            visibility = false;
	        }

	        return visibility;
	    },

	    /**
	     * Pick legend labels or visibilities from raw data.
	     * @param {string} dataType data type of picking values
	     * @returns {string[]|boolean[]} labels or visibilities
	     * @private
	     */
	    _pickLegendData: function(dataType) {
	        var seriesData = this.rawData.series;
	        var result = {};
	        var pickerMethod;

	        if (dataType === 'visibility') {
	            pickerMethod = this._isVisibleLegend;
	        } else if (dataType === 'label') {
	            pickerMethod = this._pickLegendLabel;
	        }

	        if (pickerMethod) {
	            snippet.forEach(seriesData, function(seriesDatum, seriesType) {
	                result[seriesType] = snippet.map(seriesDatum, pickerMethod);
	            });

	            result = snippet.filter(result, snippet.isExisty);
	        }

	        return result;
	    },

	    /**
	     * Get legend labels.
	     * @param {?string} chartType chart type
	     * @returns {Array.<string> | {column: ?Array.<string>, line: ?Array.<string>}} legend labels
	     */
	    getLegendLabels: function(chartType) {
	        if (!this.legendLabels) {
	            this.legendLabels = this._pickLegendData('label');
	        }

	        return this.legendLabels[chartType] || this.legendLabels;
	    },

	    /**
	     * Get legend visibility.
	     * @param {?string} chartType chart type
	     * @returns {Array.<string> | {column: ?Array.<string>, line: ?Array.<string>}} legend labels
	     */
	    getLegendVisibility: function(chartType) {
	        if (!this.legendVisibilities) {
	            this.legendVisibilities = this._pickLegendData('visibility');
	        }

	        return this.legendVisibilities[chartType] || this.legendVisibilities;
	    },

	    /**
	     * Make legend data.
	     * @returns {Array} labels
	     * @private
	     */
	    _makeLegendData: function() {
	        var legendLabels = this.getLegendLabels(this.chartType);
	        var seriesTypes = this.seriesTypes || [this.chartType];
	        var legendLabelsMap, legendData;
	        var legendVisibilities = this.getLegendVisibility();

	        if (snippet.isArray(legendLabels)) {
	            legendLabelsMap = [this.chartType];
	            legendLabelsMap[this.chartType] = legendLabels;
	        } else {
	            seriesTypes = this.seriesTypes;
	            legendLabelsMap = legendLabels;
	        }

	        legendData = snippet.map(seriesTypes, function(chartType) {
	            return snippet.map(legendLabelsMap[chartType], function(label, index) {
	                var is2DArray = snippet.isArray(legendVisibilities[chartType]);

	                return {
	                    chartType: chartType,
	                    label: label,
	                    visible: is2DArray ? legendVisibilities[chartType][index] : legendVisibilities[index]
	                };
	            });
	        });

	        return concat.apply([], legendData);
	    },

	    /**
	     * Get legend data.
	     * @returns {Array.<{chartType: string, label: string}>} legend data
	     */
	    getLegendData: function() {
	        if (!this.legendData) {
	            this.legendData = this._makeLegendData();
	        }

	        if (!this.originalLegendData) {
	            this.originalLegendData = this.legendData;
	        }

	        return this.legendData;
	    },

	    /**
	     * get original legend data.
	     * @returns {Array.<{chartType: string, label: string}>}
	     */
	    getOriginalLegendData: function() {
	        return this.originalLegendData;
	    },

	    /**
	     * Get legend item.
	     * @param {number} index index
	     * @returns {{chartType: string, label: string}} legend data
	     */
	    getLegendItem: function(index) {
	        return this.getLegendData()[index];
	    },

	    /**
	     * Get first label of SeriesItem.
	     * @param {?string} chartType chartType
	     * @returns {string} formatted value
	     */
	    getFirstItemLabel: function(chartType) {
	        return this.getSeriesDataModel(chartType).getFirstItemLabel();
	    },

	    /**
	     * Add data ratios of pie chart.
	     * @param {string} chartType - type of chart.
	     */
	    addDataRatiosOfPieChart: function(chartType) {
	        this.getSeriesDataModel(chartType).addDataRatiosOfPieChart();
	    },

	    /**
	     * Add data ratios for chart of coordinate type.
	     * @param {string} chartType - type of chart.
	     * @param {{x: {min: number, max: number}, y: {min: number, max: number}}} limitMap - limit map
	     * @param {boolean} [hasRadius] - whether has radius or not
	     */
	    addDataRatiosForCoordinateType: function(chartType, limitMap, hasRadius) {
	        if (predicate.isLineTypeChart(chartType)) {
	            this._addStartValueToAllSeriesItem(limitMap.yAxis, chartType);
	        }
	        this.getSeriesDataModel(chartType).addDataRatiosForCoordinateType(limitMap, hasRadius);
	    },

	    /**
	     * Add start value to all series item.
	     * @param {{min: number, max: number}} limit - limit
	     * @param {string} chartType - chart type
	     * @private
	     */
	    _addStartValueToAllSeriesItem: function(limit, chartType) {
	        var start = 0;

	        if (limit.min >= 0) {
	            start = limit.min;
	        } else if (limit.max <= 0) {
	            start = limit.max;
	        }

	        this.getSeriesDataModel(chartType).addStartValueToAllSeriesItem(start);
	    },

	    /**
	     * Register percent values.
	     * @param {{min: number, max: number}} limit axis limit
	     * @param {string} stackType stackType option
	     * @param {string} chartType chart type
	     */
	    addDataRatios: function(limit, stackType, chartType) {
	        var seriesDataModel = this.getSeriesDataModel(chartType);

	        this._addStartValueToAllSeriesItem(limit, chartType);
	        seriesDataModel.addDataRatios(limit, stackType);
	    },

	    /**
	     * Add data ratios for treemap chart.
	     * @param {{min: number, max: number}} limit - limit
	     * @param {string} chartType - chart type
	     */
	    addDataRatiosForTreemapChart: function(limit, chartType) {
	        this.getSeriesDataModel(chartType).addDataRatios(limit);
	    },

	    /**
	     * Create base values for normal stackType chart.
	     * @param {string} chartType - chart type
	     * @returns {Array.<number>}
	     * @private
	     */
	    _createBaseValuesForNormalStackedChart: function(chartType) {
	        var seriesDataModel = this.getSeriesDataModel(chartType);
	        var baseValues = [];

	        seriesDataModel.each(function(seriesGroup) {
	            var valuesMap = seriesGroup._makeValuesMapPerStack();

	            snippet.forEach(valuesMap, function(values) {
	                var plusSum = calculator.sumPlusValues(values);
	                var minusSum = calculator.sumMinusValues(values);
	                baseValues = baseValues.concat([plusSum, minusSum]);
	            });
	        });

	        return baseValues;
	    },

	    /**
	     * Create base values for calculating limit
	     * @param {string} chartType - chart type
	     * @param {boolean} isSingleYAxis = whether single y axis or not
	     * @param {string} stackType - stack type
	     * @param {string} valueType - value type
	     * @param {string} axisType - value type
	     * @returns {Array.<number>}
	     */
	    createBaseValuesForLimit: function(chartType, isSingleYAxis, stackType, valueType, axisType) {
	        var baseValues;

	        if (predicate.isComboChart(this.chartType) && isSingleYAxis) {
	            baseValues = this.getValues(this.chartType, valueType);
	            if (predicate.isNormalStackChart(chartType, stackType)) {
	                baseValues = baseValues.concat(this._createBaseValuesForNormalStackedChart(chartType));
	            }
	        } else if (predicate.isTreemapChart(chartType)) {
	            baseValues = this.getValues(chartType, 'colorValue');
	        } else if (predicate.isNormalStackChart(chartType, stackType)) {
	            baseValues = this._createBaseValuesForNormalStackedChart(chartType);
	        } else {
	            baseValues = this.getValues(chartType, valueType, axisType);
	        }

	        return baseValues;
	    },

	    /**
	     * Find overflow item than graph area
	     * @param {string} chartType - chart type
	     * @param {string} valueType - value type
	     * @returns {{minItem: SeriesItem, maxItem: SeriesItem}}
	     */
	    findOverflowItem: function(chartType, valueType) {
	        var seriesDataModel = this.getSeriesDataModel(chartType);
	        var maxRadiusValue = seriesDataModel.getMaxValue('r');
	        var isBiggerRatioThanHalfRatio = function(seriesItem) {
	            return (seriesItem.r / maxRadiusValue) > chartConst.HALF_RATIO;
	        };

	        return {
	            minItem: seriesDataModel.findMinSeriesItem(valueType, isBiggerRatioThanHalfRatio),
	            maxItem: seriesDataModel.findMaxSeriesItem(valueType, isBiggerRatioThanHalfRatio)
	        };
	    },

	    /**
	     * Register color and opacity data of tooltip icon
	     * @param {Array.<Array.<object>>} colors - color and opacities setGraphColors
	     * @ignore
	     */
	    setGraphColors: function(colors) {
	        this.graphColors = colors;
	    },

	    /**
	     * Get color and opacity data of tooltip data
	     * @returns {Array.<Array.<object>>} - color and opacities set
	     * @ignore
	     */
	    getGraphColors: function() {
	        return this.graphColors;
	    },

	    /**
	     * Check The donut chart on pie donut combo chart has outer label align option
	     * @returns {boolean} - whether donut chart has outer label align option or not
	     * @ignore
	     */
	    isComboDonutShowOuterLabel: function() {
	        var seriesOptions = this.options.series;

	        return (seriesOptions && seriesOptions.pie2 && seriesOptions.pie2.labelAlign === 'outer');
	    }
	});

	module.exports = DataProcessor;


/***/ }),
/* 102 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileoverview data processor base.
	 * @author NHN Ent.
	 *         FE Development Lab <dl_javascript@nhnent.com>
	 */

	'use strict';

	var arrayUtil = __webpack_require__(10);
	var renderUtil = __webpack_require__(7);
	var calculator = __webpack_require__(45);
	var snippet = __webpack_require__(6);

	/**
	 * @classdesc data processor base.
	 * @class DataProcessorBase
	 * @private
	 */
	var DataProcessorBase = snippet.defineClass(/** @lends DataProcessorBase.prototype */{
	    /**
	     * Initialize.
	     */
	    baseInit: function() {
	        /**
	         * functions for formatting
	         * @type {Array.<function>}
	         */
	        this.formatFunctions = null;
	    },

	    /**
	     * Get values.
	     * @abstract
	     * @returns {Array}
	     */
	    getValues: function() {},

	    /**
	     * Get max value.
	     * @param {?string} chartType - type of chart
	     * @param {?string} valueType - type of value like value, x, y, r
	     * @returns {number}
	     */
	    getMaxValue: function(chartType, valueType) {
	        return arrayUtil.max(this.getValues(chartType, valueType));
	    },

	    /**
	     * Get max value.
	     * @param {?string} chartType - type of chart
	     * @param {?string} valueType - type of value like value, x, y, r
	     * @returns {number}
	     */
	    getMinValue: function(chartType, valueType) {
	        return arrayUtil.min(this.getValues(chartType, valueType));
	    },

	    /**
	     * Get formatted max value.
	     * @param {?string} chartType - type of chart
	     * @param {?string} areaType - type of area like circleLegend
	     * @param {?string} valueType - type of value like value, x, y, r
	     * @returns {string | number}
	     */
	    getFormattedMaxValue: function(chartType, areaType, valueType) {
	        var maxValue = this.getMaxValue(chartType, valueType);
	        var formatFunctions = this.getFormatFunctions();

	        return renderUtil.formatValue({
	            value: maxValue,
	            formatFunctions: formatFunctions,
	            chartType: chartType,
	            areaType: areaType,
	            valueType: valueType
	        });
	    },

	    /**
	     * Get formatted max value.
	     * @param {?string} chartType - type of chart
	     * @param {?string} areaType - type of area like circleLegend
	     * @param {?string} valueType - type of value like value, x, y, r
	     * @returns {string | number}
	     */
	    getFormattedMinValue: function(chartType, areaType, valueType) {
	        var maxValue = this.getMinValue(chartType, valueType);
	        var formatFunctions = this.getFormatFunctions();

	        return renderUtil.formatValue({
	            value: maxValue,
	            formatFunctions: formatFunctions,
	            chartType: chartType,
	            areaType: areaType,
	            valueType: valueType
	        });
	    },

	    /**
	     * Pick max length under point.
	     * @param {string[]} values chart values
	     * @returns {number} max length under point
	     * @private
	     */
	    _pickMaxLenUnderPoint: function(values) {
	        var max = 0;

	        snippet.forEachArray(values, function(value) {
	            var len = calculator.getDecimalLength(value);
	            if (len > max) {
	                max = len;
	            }
	        });

	        return max;
	    },

	    /**
	     * Whether zero fill format or not.
	     * @param {string} format format
	     * @returns {boolean} result boolean
	     * @private
	     */
	    _isZeroFill: function(format) {
	        return format.length > 2 && format.charAt(0) === '0';
	    },

	    /**
	     * Whether decimal format or not.
	     * @param {string} format format
	     * @returns {boolean} result boolean
	     * @private
	     */
	    _isDecimal: function(format) {
	        var indexOf = format.indexOf('.');

	        return indexOf > -1 && indexOf < format.length - 1;
	    },

	    /**
	     * Whether comma format or not.
	     * @param {string} format format
	     * @returns {boolean} result boolean
	     * @private
	     */
	    _isComma: function(format) {
	        return format.indexOf(',') > -1;
	    },

	    /**
	     * Format to zero fill.
	     * @param {number} len length of result
	     * @param {string} value target value
	     * @returns {string} formatted value
	     * @private
	     */
	    _formatToZeroFill: function(len, value) {
	        var isMinus = value < 0;

	        value = renderUtil.formatToZeroFill(Math.abs(value), len);

	        return (isMinus ? '-' : '') + value;
	    },

	    /**
	     * Format to Decimal.
	     * @param {number} len length of under decimal point
	     * @param {string} value target value
	     * @returns {string} formatted value
	     * @private
	     */
	    _formatToDecimal: function(len, value) {
	        return renderUtil.formatToDecimal(value, len);
	    },

	    /**
	     * Find simple type format functions.
	     * @param {string} format - simple format
	     * @returns {Array.<function>}
	     */
	    _findSimpleTypeFormatFunctions: function(format) {
	        var funcs = [];
	        var len;

	        if (this._isDecimal(format)) {
	            len = this._pickMaxLenUnderPoint([format]);
	            funcs = [snippet.bind(this._formatToDecimal, this, len)];
	        } else if (this._isZeroFill(format)) {
	            len = format.length;
	            funcs = [snippet.bind(this._formatToZeroFill, this, len)];

	            return funcs;
	        }

	        if (this._isComma(format)) {
	            funcs.push(renderUtil.formatToComma);
	        }

	        return funcs;
	    },

	    /**
	     * Find format functions.
	     * @returns {function[]} functions
	     */
	    _findFormatFunctions: function() {
	        var format = snippet.pick(this.options, 'chart', 'format');
	        var funcs = [];

	        if (snippet.isFunction(format)) {
	            funcs = [format];
	        } else if (snippet.isString(format)) {
	            funcs = this._findSimpleTypeFormatFunctions(format);
	        }

	        return funcs;
	    },

	    /**
	     * Get format functions.
	     * @returns {Array.<function>} functions
	     */
	    getFormatFunctions: function() {
	        if (!this.formatFunctions) {
	            this.formatFunctions = this._findFormatFunctions();
	        }

	        return this.formatFunctions;
	    }
	});

	module.exports = DataProcessorBase;


/***/ }),
/* 103 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileoverview SeriesDataModel is base model for drawing graph of chart series area,
	 *                  and create from rawSeriesData by user,
	 * SeriesDataModel.groups has SeriesGroups.
	 * @author NHN Ent.
	 *         FE Development Lab <dl_javascript@nhnent.com>
	 */

	'use strict';

	/*
	 * Raw series datum.
	 * @typedef {{name: ?string, data: Array.<number>, stack: ?string}} rawSeriesDatum
	 */

	/*
	 * Raw series data.
	 * @typedef {Array.<rawSeriesDatum>} rawSeriesData
	 */

	/*
	 * Groups.
	 * @typedef {Array.<SeriesGroup>} groups
	 */

	/*
	 * SeriesGroup is a element of SeriesDataModel.groups.
	 * SeriesGroup.items has SeriesItem.
	 */

	/*
	 * SeriesItem is a element of SeriesGroup.items.
	 * SeriesItem has processed terminal data like value, ratio, etc.
	 */

	var SeriesGroup = __webpack_require__(104);
	var SeriesItem = __webpack_require__(105);
	var SeriesItemForCoordinateType = __webpack_require__(106);
	var predicate = __webpack_require__(21);
	var calculator = __webpack_require__(45);
	var arrayUtil = __webpack_require__(10);
	var snippet = __webpack_require__(6);

	var concat = Array.prototype.concat;

	var SeriesDataModel = snippet.defineClass(/** @lends SeriesDataModel.prototype */{
	    /**
	     * SeriesDataModel is base model for drawing graph of chart series area,
	     *      and create from rawSeriesData by user.
	     * SeriesDataModel.groups has SeriesGroups.
	     * @constructs SeriesDataModel
	     * @private
	     * @param {rawSeriesData} rawSeriesData - raw series data
	     * @param {string} chartType - chart type
	     * @param {object} options - options
	     * @param {Array.<function>} formatFunctions - format functions
	     * @param {boolean} isCoordinateType - whether coordinate type or not
	     */
	    init: function(rawSeriesData, chartType, options, formatFunctions, isCoordinateType) {
	        /**
	         * chart type
	         * @type {string}
	         */
	        this.chartType = chartType;

	        /**
	         * chart options
	         * @type {Object}
	         */
	        this.options = options || {};

	        /**
	         * functions for formatting
	         * @type {Array.<function>}
	         */
	        this.formatFunctions = formatFunctions;

	        /**
	         * rawData.series
	         * @type {rawSeriesData}
	         */
	        this.rawSeriesData = rawSeriesData || [];

	        /**
	         * whether coordinate type or not
	         * @type {boolean}
	         */
	        this.isCoordinateType = isCoordinateType;

	        /**
	         * baseGroups is base data for making SeriesGroups.
	         * SeriesGroups is made by pivoted baseGroups, lf line type chart.
	         * @type {Array.Array<SeriesItem>}
	         */
	        this.baseGroups = null;

	        /**
	         * groups has SeriesGroups.
	         * @type {Array.<SeriesGroup>}
	         */
	        this.groups = null;

	        this.options.series = this.options.series || {};

	        /**
	         * whether diverging chart or not.
	         * @type {boolean}
	         */
	        this.isDivergingChart = predicate.isDivergingChart(chartType, this.options.series.diverging);

	        /**
	         * map of values by value type like value, x, y, r.
	         * @type {object.<string, Array.<number>>}
	         */
	        this.valuesMap = {};

	        this._removeRangeValue();
	    },

	    /**
	     * Remove range value of item, if has stackType option.
	     * @private
	     */
	    _removeRangeValue: function() {
	        var seriesOption = snippet.pick(this.options, 'series') || {};
	        var allowRange = predicate.isAllowRangeData(this.chartType) &&
	                !predicate.isValidStackOption(seriesOption.stackType) && !seriesOption.spline;

	        if (allowRange || this.isCoordinateType) {
	            return;
	        }

	        snippet.forEachArray(this.rawSeriesData, function(rawItem) {
	            if (!snippet.isArray(rawItem.data)) {
	                return;
	            }
	            snippet.forEachArray(rawItem.data, function(value, index) {
	                if (snippet.isExisty(value)) {
	                    rawItem.data[index] = concat.apply(value)[0];
	                }
	            });
	        });
	    },

	    /**
	     * Create base groups.
	     * Base groups is two-dimensional array by seriesItems.
	     * @returns {Array.<Array.<(SeriesItem | SeriesItemForCoordinateType)>>}
	     * @private
	     */
	    _createBaseGroups: function() {
	        var chartType = this.chartType;
	        var formatFunctions = this.formatFunctions;
	        var xAxisOption = this.options.xAxis;
	        var isDivergingChart = this.isDivergingChart;
	        var isCoordinateType = this.isCoordinateType;
	        var isPieChart = predicate.isPieChart(this.chartType);
	        var hasRawDatumAsArray = predicate.isHeatmapChart(this.chartType) || predicate.isTreemapChart(this.chartType);
	        var sortValues, SeriesItemClass;

	        if (isCoordinateType) {
	            SeriesItemClass = SeriesItemForCoordinateType;
	            sortValues = function(items) {
	                items.sort(function(a, b) {
	                    return a.x - b.x;
	                });
	            };
	        } else {
	            SeriesItemClass = SeriesItem;
	            sortValues = function() {};
	        }

	        return snippet.map(this.rawSeriesData, function(rawDatum) {
	            var stack, data, legendName, items;

	            data = snippet.isArray(rawDatum) ? rawDatum : [].concat(rawDatum.data);

	            if (!hasRawDatumAsArray) {
	                stack = rawDatum.stack;
	            }
	            if (rawDatum.name) {
	                legendName = rawDatum.name;
	            }

	            if (isCoordinateType || isPieChart) {
	                data = snippet.filter(data, snippet.isExisty);
	            }

	            items = snippet.map(data, function(datum, index) {
	                return new SeriesItemClass({
	                    datum: datum,
	                    chartType: chartType,
	                    formatFunctions: formatFunctions,
	                    index: index,
	                    legendName: legendName,
	                    stack: stack,
	                    isDivergingChart: isDivergingChart,
	                    xAxisType: xAxisOption.type,
	                    dateFormat: xAxisOption.dateFormat
	                });
	            });
	            sortValues(items);

	            return items;
	        });
	    },

	    /**
	     * Get base groups.
	     * @returns {Array.Array.<SeriesItem>}
	     * @private
	     */
	    _getBaseGroups: function() {
	        if (!this.baseGroups) {
	            this.baseGroups = this._createBaseGroups();
	        }

	        return this.baseGroups;
	    },

	    /**
	     * Create SeriesGroups from rawData.series.
	     * @param {boolean} isPivot - whether pivot or not.
	     * @returns {Array.<SeriesGroup>}
	     * @private
	     */
	    _createSeriesGroupsFromRawData: function(isPivot) {
	        var baseGroups = this._getBaseGroups();

	        if (isPivot) {
	            baseGroups = arrayUtil.pivot(baseGroups);
	        }

	        return snippet.map(baseGroups, function(items) {
	            return new SeriesGroup(items);
	        });
	    },

	    /**
	     * Get SeriesGroups.
	     * @returns {(Array.<SeriesGroup>|object)}
	     * @private
	     */
	    _getSeriesGroups: function() {
	        if (!this.groups) {
	            this.groups = this._createSeriesGroupsFromRawData(true);
	        }

	        return this.groups;
	    },

	    /**
	     * Get group count.
	     * @returns {Number}
	     */
	    getGroupCount: function() {
	        return this._getSeriesGroups().length;
	    },

	    /**
	     * Get pivot groups.
	     * @returns {(Array.<SeriesGroup>|object)}
	     */
	    _getPivotGroups: function() {
	        if (!this.pivotGroups) {
	            this.pivotGroups = this._createSeriesGroupsFromRawData();
	        }

	        return this.pivotGroups;
	    },

	    /**
	     * Get SeriesGroup.
	     * @param {number} index - index
	     * @param {boolean} [isPivot] - whether pivot or not
	     * @returns {SeriesGroup}
	     */
	    getSeriesGroup: function(index, isPivot) {
	        return isPivot ? this._getPivotGroups()[index] : this._getSeriesGroups()[index];
	    },

	    /**
	     * Get first SeriesGroup.
	     * @param {boolean} [isPivot] - whether pivot or not
	     * @returns {SeriesGroup}
	     */
	    getFirstSeriesGroup: function(isPivot) {
	        return this.getSeriesGroup(0, isPivot);
	    },

	    /**
	     * Get first label of SeriesItem.
	     * @returns {string} formatted value
	     */
	    getFirstItemLabel: function() {
	        return this.getFirstSeriesGroup().getFirstSeriesItem().label;
	    },

	    /**
	     * Get series item.
	     * @param {number} groupIndex - index of series groups
	     * @param {number} index - index of series items
	     * @param {boolean} [isPivot] - whether pivot or not
	     * @returns {SeriesItem}
	     */
	    getSeriesItem: function(groupIndex, index, isPivot) {
	        return this.getSeriesGroup(groupIndex, isPivot).getSeriesItem(index);
	    },

	    /**
	     * Get first series item.
	     * @returns {SeriesItem}
	     */
	    getFirstSeriesItem: function() {
	        return this.getSeriesItem(0, 0);
	    },

	    /**
	     * Get value.
	     * @param {number} groupIndex - index of series groups
	     * @param {number} index - index of series items
	     * @returns {number} value
	     */
	    getValue: function(groupIndex, index) {
	        return this.getSeriesItem(groupIndex, index).value;
	    },

	    /**
	     * Get minimum value.
	     * @param {string} valueType - value type like value, x, y, r.
	     * @returns {number}
	     */
	    getMinValue: function(valueType) {
	        return arrayUtil.min(this.getValues(valueType));
	    },

	    /**
	     * Get maximum value.
	     * @param {string} valueType - value type like value, x, y, r.
	     * @returns {number}
	     */
	    getMaxValue: function(valueType) {
	        return arrayUtil.max(this.getValues(valueType));
	    },

	    /**
	     * Traverse seriesGroups, and returns to found SeriesItem by result of execution seriesGroup.find with condition.
	     * @param {function} condition - condition function
	     * @returns {SeriesItem}
	     * @private
	     */
	    _findSeriesItem: function(condition) {
	        var foundItem;

	        this.each(function(seriesGroup) {
	            foundItem = seriesGroup.find(condition);

	            return !foundItem;
	        });

	        return foundItem;
	    },

	    /**
	     * Find SeriesItem by value.
	     * @param {string} valueType - value type like value, x, y, r.
	     * @param {number} value - comparing value
	     * @param {function} condition - condition function
	     * @returns {SeriesItem}
	     * @private
	     */
	    _findSeriesItemByValue: function(valueType, value, condition) {
	        condition = condition || function() {
	            return null;
	        };

	        return this._findSeriesItem(function(seriesItem) {
	            return seriesItem && (seriesItem[valueType] === value) && condition(seriesItem);
	        });
	    },

	    /**
	     * Find minimum SeriesItem.
	     * @param {string} valueType - value type like value, x, y, r.
	     * @param {function} condition - condition function
	     * @returns {SeriesItem}
	     */
	    findMinSeriesItem: function(valueType, condition) {
	        var minValue = this.getMinValue(valueType);

	        return this._findSeriesItemByValue(valueType, minValue, condition);
	    },

	    /**
	     * Find maximum SeriesItem.
	     * @param {string} valueType - value type like value, x, y, r.
	     * @param {function} condition - condition function
	     * @returns {*|SeriesItem}
	     */
	    findMaxSeriesItem: function(valueType, condition) {
	        var maxValue = this.getMaxValue(valueType);

	        return this._findSeriesItemByValue(valueType, maxValue, condition);
	    },

	    /**
	     * Create values that picked value from SeriesItems of SeriesGroups.
	     * @param {?string} valueType - type of value
	     * @returns {Array.<number>}
	     * @private
	     */
	    _createValues: function(valueType) {
	        var values = this.map(function(seriesGroup) {
	            return seriesGroup.getValues(valueType);
	        });

	        values = concat.apply([], values);

	        return snippet.filter(values, function(value) {
	            return !isNaN(value);
	        });
	    },

	    /**
	     * Get values form valuesMap.
	     * @param {?string} valueType - type of value
	     * @returns {Array.<number>}
	     */
	    getValues: function(valueType) {
	        valueType = valueType || 'value';

	        if (!this.valuesMap[valueType]) {
	            this.valuesMap[valueType] = this._createValues(valueType);
	        }

	        return this.valuesMap[valueType];
	    },

	    /**
	     * Whether count of x values greater than count of y values.
	     * @returns {boolean}
	     */
	    isXCountGreaterThanYCount: function() {
	        return this.getValues('x').length > this.getValues('y').length;
	    },

	    /**
	     * Add ratios, when has normal stackType option.
	     * @param {{min: number, max: number}} limit - axis limit
	     * @private
	     */
	    _addRatiosWhenNormalStacked: function(limit) {
	        var distance = Math.abs(limit.max - limit.min);

	        this.each(function(seriesGroup) {
	            seriesGroup.addRatios(distance);
	        });
	    },

	    /**
	     * Calculate base ratio for calculating ratio of item.
	     * @returns {number}
	     * @private
	     */
	    _calculateBaseRatio: function() {
	        var values = this.getValues(),
	            plusSum = calculator.sumPlusValues(values),
	            minusSum = Math.abs(calculator.sumMinusValues(values)),
	            ratio = (plusSum > 0 && minusSum > 0) ? 0.5 : 1;

	        return ratio;
	    },

	    /**
	     * Add ratios, when has percent stackType option.
	     * @private
	     */
	    _addRatiosWhenPercentStacked: function() {
	        var baseRatio = this._calculateBaseRatio();

	        this.each(function(seriesGroup) {
	            seriesGroup.addRatiosWhenPercentStacked(baseRatio);
	        });
	    },

	    /**
	     * Add ratios, when has diverging stackType option.
	     * @private
	     */
	    _addRatiosWhenDivergingStacked: function() {
	        this.each(function(seriesGroup) {
	            var values = seriesGroup.pluck('value'),
	                plusSum = calculator.sumPlusValues(values),
	                minusSum = Math.abs(calculator.sumMinusValues(values));

	            seriesGroup.addRatiosWhenDivergingStacked(plusSum, minusSum);
	        });
	    },

	    /**
	     * Make subtraction value for making ratio of no option chart.
	     * @param {{min: number, max: number}} limit - limit
	     * @returns {number}
	     * @private
	     */
	    _makeSubtractionValue: function(limit) {
	        var allowMinusPointRender = predicate.allowMinusPointRender(this.chartType),
	            subValue = 0;

	        if (!allowMinusPointRender && predicate.isMinusLimit(limit)) {
	            subValue = limit.max;
	        } else if (allowMinusPointRender || limit.min >= 0) {
	            subValue = limit.min;
	        }

	        return subValue;
	    },

	    /**
	     * Add ratios, when has not option.
	     * @param {{min: number, max: number}} limit - axis limit
	     * @private
	     */
	    _addRatios: function(limit) {
	        var distance = Math.abs(limit.max - limit.min),
	            subValue = this._makeSubtractionValue(limit);

	        this.each(function(seriesGroup) {
	            seriesGroup.addRatios(distance, subValue);
	        });
	    },

	    /**
	     * Add data ratios.
	     * @param {{min: number, max: number}} limit - axis limit
	     * @param {string} stackType - stackType option
	     * @private
	     */
	    addDataRatios: function(limit, stackType) {
	        var isAllowedStackOption = predicate.isAllowedStackOption(this.chartType);

	        if (isAllowedStackOption && predicate.isNormalStack(stackType)) {
	            this._addRatiosWhenNormalStacked(limit);
	        } else if (isAllowedStackOption && predicate.isPercentStack(stackType)) {
	            if (this.isDivergingChart) {
	                this._addRatiosWhenDivergingStacked();
	            } else {
	                this._addRatiosWhenPercentStacked();
	            }
	        } else {
	            this._addRatios(limit);
	        }
	    },

	    /**
	     * Add data ratios of pie chart.
	     */
	    addDataRatiosOfPieChart: function() {
	        this.each(function(seriesGroup) {
	            var sum = calculator.sum(seriesGroup.pluck('value'));

	            seriesGroup.addRatios(sum);
	        });
	    },

	    /**
	     * Add ratios of data for chart of coordinate type.
	     * @param {{x: {min: number, max: number}, y: {min: number, max: number}}} limitMap - limit map
	     * @param {boolean} [hasRadius] - whether has radius or not
	     */
	    addDataRatiosForCoordinateType: function(limitMap, hasRadius) {
	        var xLimit = limitMap.xAxis;
	        var yLimit = limitMap.yAxis;
	        var maxRadius = hasRadius ? arrayUtil.max(this.getValues('r')) : 0;
	        var xDistance, xSubValue, yDistance, ySubValue;

	        if (xLimit) {
	            xDistance = Math.abs(xLimit.max - xLimit.min);
	            xSubValue = this._makeSubtractionValue(xLimit);
	        }

	        if (yLimit) {
	            yDistance = Math.abs(yLimit.max - yLimit.min);
	            ySubValue = this._makeSubtractionValue(yLimit);
	        }

	        this.each(function(seriesGroup) {
	            seriesGroup.each(function(item) {
	                if (!item) {
	                    return;
	                }

	                item.addRatio('x', xDistance, xSubValue);
	                item.addRatio('y', yDistance, ySubValue);
	                item.addRatio('r', maxRadius, 0);

	                if (snippet.isExisty(item.start)) {
	                    item.addRatio('start', yDistance, ySubValue);
	                }
	            });
	        });
	    },

	    /**
	     * Add start to all series item.
	     * @param {number} start - start value
	     */
	    addStartValueToAllSeriesItem: function(start) {
	        this.each(function(seriesGroup) {
	            seriesGroup.addStartValueToAllSeriesItem(start);
	        });
	    },

	    /**
	     * Whether has range data or not.
	     * @returns {boolean}
	     */
	    hasRangeData: function() {
	        var hasRangeData = false;

	        this.each(function(seriesGroup) {
	            hasRangeData = seriesGroup.hasRangeData();

	            return !hasRangeData;
	        });

	        return hasRangeData;
	    },

	    /**
	     * Traverse groups, and executes iteratee function.
	     * @param {function} iteratee - iteratee function
	     * @param {boolean} isPivot - whether pivot or not
	     */
	    each: function(iteratee, isPivot) {
	        var groups = isPivot ? this._getPivotGroups() : this._getSeriesGroups();

	        snippet.forEachArray(groups, function(seriesGroup, index) {
	            return iteratee(seriesGroup, index);
	        });
	    },

	    /**
	     * Traverse groups, and returns to result of execution about iteratee function.
	     * @param {function} iteratee - iteratee function
	     * @param {boolean} isPivot - whether pivot or not
	     * @returns {Array}
	     */
	    map: function(iteratee, isPivot) {
	        var results = [];

	        this.each(function(seriesGroup, index) {
	            results.push(iteratee(seriesGroup, index));
	        }, isPivot);

	        return results;
	    }
	});

	module.exports = SeriesDataModel;


/***/ }),
/* 104 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileoverview SeriesGroup is a element of SeriesDataModel.groups.
	 * SeriesGroup.items has SeriesItem.
	 * @author NHN Ent.
	 *         FE Development Lab <dl_javascript@nhnent.com>
	 */

	'use strict';

	var calculator = __webpack_require__(45);
	var snippet = __webpack_require__(6);

	var SeriesGroup = snippet.defineClass(/** @lends SeriesGroup.prototype */{
	    /**
	     * SeriesGroup is a element of SeriesDataModel.groups.
	     * SeriesGroup.items has SeriesItem.
	     * @constructs SeriesGroup
	     * @private
	     * @param {Array.<SeriesItem>} seriesItems - series items
	     */
	    init: function(seriesItems) {
	        /**
	         * items has SeriesItem
	         * @type {Array.<SeriesItem>}
	         */
	        this.items = seriesItems;

	        /**
	         * map of values by value type like value, x, y, r.
	         * @type {Array.<number>}
	         */
	        this.valuesMap = {};

	        this.valuesMapPerStack = null;
	    },

	    /**
	     * Get series item count.
	     * @returns {number}
	     */
	    getSeriesItemCount: function() {
	        return this.items.length;
	    },

	    /**
	     * Get series item.
	     * @param {number} index - index of items
	     * @returns {SeriesItem}
	     */
	    getSeriesItem: function(index) {
	        return this.items[index];
	    },

	    /**
	     * Get first SeriesItem.
	     * @returns {SeriesItem}
	     */
	    getFirstSeriesItem: function() {
	        return this.getSeriesItem(0);
	    },

	    /**
	     * Create values that picked value from SeriesItems.
	     * @param {?string} valueType - type of value
	     * @returns {Array.<number>}
	     * @private
	     */
	    _createValues: function(valueType) {
	        var values = [];

	        this.each(function(item) {
	            if (!item) {
	                return;
	            }

	            if (snippet.isExisty(item[valueType])) {
	                values.push(item[valueType]);
	            }
	            if (snippet.isExisty(item.start)) {
	                values.push(item.start);
	            }
	        });

	        return values;
	    },

	    /**
	     * Get values from valuesMap.
	     * @param {?string} valueType - type of value
	     * @returns {Array}
	     */
	    getValues: function(valueType) {
	        valueType = valueType || 'value';

	        if (!this.valuesMap[valueType]) {
	            this.valuesMap[valueType] = this._createValues(valueType);
	        }

	        return this.valuesMap[valueType];
	    },

	    /**
	     * Make values map per stack.
	     * @returns {object}
	     * @private
	     */
	    _makeValuesMapPerStack: function() {
	        var valuesMap = {};

	        this.each(function(item) {
	            if (!valuesMap[item.stack]) {
	                valuesMap[item.stack] = [];
	            }
	            valuesMap[item.stack].push(item.value);
	        });

	        return valuesMap;
	    },

	    /**
	     * Get values map per stack.
	     * @returns {*|Object}
	     */
	    getValuesMapPerStack: function() {
	        if (!this.valuesMapPerStack) {
	            this.valuesMapPerStack = this._makeValuesMapPerStack();
	        }

	        return this.valuesMapPerStack;
	    },

	    /**
	     * Make sum map per stack.
	     * @returns {object} sum map
	     * @private
	     */
	    _makeSumMapPerStack: function() {
	        var valuesMap = this.getValuesMapPerStack(),
	            sumMap = {};

	        snippet.forEach(valuesMap, function(values, key) {
	            sumMap[key] = calculator.sum(snippet.map(values, function(value) {
	                return Math.abs(value);
	            }));
	        });

	        return sumMap;
	    },

	    /**
	     * Add start value to all series item.
	     * @param {number} start start value
	     */
	    addStartValueToAllSeriesItem: function(start) {
	        this.each(function(item) {
	            if (!item) {
	                return;
	            }
	            item.addStart(start);
	        });
	    },

	    /**
	     * Add ratios when percent stackType.
	     * @param {number} baseRatio - base ratio
	     */
	    addRatiosWhenPercentStacked: function(baseRatio) {
	        var sumMap = this._makeSumMapPerStack();

	        this.each(function(item) {
	            var dividingNumber = sumMap[item.stack];

	            item.addRatio(dividingNumber, 0, baseRatio);
	        });
	    },

	    /**
	     * Add ratios when diverging stacked.
	     * @param {number} plusSum - sum of plus number
	     * @param {number} minusSum - sum of minus number
	     */
	    addRatiosWhenDivergingStacked: function(plusSum, minusSum) {
	        this.each(function(item) {
	            var dividingNumber = (item.value >= 0) ? plusSum : minusSum;

	            item.addRatio(dividingNumber, 0, 0.5);
	        });
	    },

	    /**
	     * Add ratios.
	     * @param {number} divNumber dividing number
	     * @param {number} subValue subtraction value
	     */
	    addRatios: function(divNumber, subValue) {
	        this.each(function(item) {
	            if (!item) {
	                return;
	            }
	            item.addRatio(divNumber, subValue);
	        });
	    },

	    /**
	     * Whether has range data or not.
	     * @returns {boolean}
	     */
	    hasRangeData: function() {
	        var hasRangeData = false;

	        this.each(function(seriesItem) {
	            hasRangeData = seriesItem && seriesItem.isRange;

	            return !hasRangeData;
	        });

	        return hasRangeData;
	    },

	    /**
	     * Traverse items, and executes iteratee function.
	     * @param {function} iteratee - iteratee function
	     */
	    each: function(iteratee) {
	        snippet.forEachArray(this.items, iteratee);
	    },

	    /**
	     * Traverse items, and returns to results of execution about iteratee function.
	     * @param {function} iteratee - iteratee function
	     * @returns {Array}
	     */
	    map: function(iteratee) {
	        return snippet.map(this.items, iteratee);
	    },

	    /**
	     * Traverse items, and returns to picked result at item.
	     * @param {string} key key for pick
	     * @returns {Array}
	     */
	    pluck: function(key) {
	        var items = snippet.filter(this.items, snippet.isExisty);

	        return snippet.pluck(items, key);
	    },

	    /**
	     * Traverse items, and returns to found SeriesItem by condition function.
	     * @param {function} condition - condition function
	     * @returns {SeriesItem|null}
	     */
	    find: function(condition) {
	        var foundItem;

	        this.each(function(seriesItem) {
	            if (condition(seriesItem)) {
	                foundItem = seriesItem;
	            }

	            return !foundItem;
	        });

	        return foundItem || null;
	    },

	    /**
	     * Traverse items, and returns to filter SeriesItems by condition function.
	     * @param {function} condition - condition function
	     * @returns {Array}
	     */
	    filter: function(condition) {
	        return snippet.filter(this.items, condition);
	    }
	});

	module.exports = SeriesGroup;


/***/ }),
/* 105 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileoverview SeriesItem is a element of SeriesGroup.items.
	 * SeriesItem has processed terminal data like value, ratio, etc.
	 * @author NHN Ent.
	 *         FE Development Lab <dl_javascript@nhnent.com>
	 */

	'use strict';

	var chartConst = __webpack_require__(8);
	var renderUtil = __webpack_require__(7);
	var calculator = __webpack_require__(45);
	var predicate = __webpack_require__(21);
	var snippet = __webpack_require__(6);

	var SeriesItem = snippet.defineClass(/** @lends SeriesItem.prototype */{
	    /**
	     * SeriesItem is a element of SeriesGroup.items.
	     * SeriesItem has processed terminal data like value, ratio, etc.
	     * @constructs SeriesItem
	     * @private
	     * @param {object} params - parameters
	     *      @param {number} params.datum - value
	     *      @param {string} params.chartType - type of chart
	     *      @param {?Array.<function>} params.formatFunctions - format functions
	     *      @param {number} params.index - raw data index
	     *      @param {?string} params.stack - stack
	     */
	    init: function(params) {
	        /**
	         * type of chart
	         * @type {string}
	         */
	        this.chartType = params.chartType;

	        /**
	         * for group stack option.
	         * @type {string}
	         */
	        this.stack = params.stack || chartConst.DEFAULT_STACK;

	        /**
	         * whether diverging chart or not
	         * @type {boolean}
	         */
	        this.isDivergingChart = params.isDivergingChart;

	        /**
	         * format functions
	         * @type {Array.<function>}
	         */
	        this.formatFunctions = params.formatFunctions;

	        /**
	         * whether range item or not
	         * @type {boolean}
	         */
	        this.isRange = false;

	        /**
	         * value of item
	         * @type {number}
	         */
	        this.value = null;

	        /**
	         * label
	         * @type {string}
	         */
	        this.label = null;

	        /**
	         * ratio of value about distance of limit
	         * @type {number}
	         */
	        this.ratio = null;

	        /**
	         * end value of item.
	         * @type {number}
	         */
	        this.end = null;

	        /**
	         * end label
	         * @type {number}
	         */
	        this.endLabel = null;

	        /**
	         * ratio of end value
	         * @type {number}
	         */
	        this.endRatio = null;

	        /**
	         * start value of item.
	         * @type {number}
	         */
	        this.start = null;

	        /**
	         * start label
	         * @type {number}
	         */
	        this.startLabel = null;

	        /**
	         * ratio of start value
	         * @type {number}
	         */

	        this.startRatio = null;

	        /**
	         * distance of start ratio and end ratio
	         * @type {null}
	         */
	        this.ratioDistance = null;

	        if (predicate.isBulletChart(this.chartType)) {
	            /**
	             * @type {string}
	             */
	            this.type = params.type;
	        }

	        /**
	         * series legend name
	         * @type {string}
	         */
	        this.legendName = params.legendName;

	        this._initValues(params.datum, params.index);
	    },

	    /**
	     * Initialize values of item.
	     * @param {number|Array.<number>} rawValue - raw value
	     * @param {number} index - raw data index
	     * @private
	     */
	    _initValues: function(rawValue, index) {
	        var values = this._createValues(rawValue);
	        var areaType = 'makingSeriesLabel';
	        var hasStart = values.length > 1;
	        var value = values[0];

	        this.value = this.end = value;
	        this.index = index;

	        if (this.isDivergingChart) {
	            value = Math.abs(value);
	        }

	        if (snippet.isNull(value)) {
	            this.label = '';
	        } else {
	            this.label = renderUtil.formatValue({
	                value: value,
	                formatFunctions: this.formatFunctions,
	                chartType: this.chartType,
	                areaType: areaType,
	                legendName: this.legendName
	            });
	        }

	        this.endLabel = this.label;

	        if (hasStart) {
	            this.addStart(values[1], true);
	            this._updateFormattedValueforRange();
	            this.isRange = true;
	        }
	    },

	    /**
	     * Crete sorted values.
	     * @param {Array.<number>|number} value value
	     * @returns {Array.<number>}
	     * @private
	     */
	    _createValues: function(value) {
	        var values = snippet.map([].concat(value), function(newValue) {
	            return snippet.isNull(newValue) ? null : parseFloat(newValue);
	        });

	        values = values.sort(function(a, b) {
	            if (a < 0 && b < 0) {
	                return a - b;
	            }

	            return b - a;
	        });

	        return values;
	    },

	    /**
	     * Add start.
	     * @param {number} value - value
	     * @ignore
	     */
	    addStart: function(value) {
	        if (!snippet.isNull(this.start)) {
	            return;
	        }

	        this.start = value;
	        this.startLabel = renderUtil.formatValue({
	            value: value,
	            formatFunctions: this.formatFunctions,
	            chartType: this.chartType,
	            areaType: 'series',
	            legendName: this.legendName
	        });
	    },

	    /**
	     * Update formatted value for range.
	     * @private
	     */
	    _updateFormattedValueforRange: function() {
	        this.label = this.startLabel + ' ~ ' + this.endLabel;
	    },

	    /**
	     * Add ratio.
	     * @param {number} divNumber - number for division
	     * @param {?number} subNumber - number for subtraction
	     * @param {?number} baseRatio - base ratio
	     */
	    addRatio: function(divNumber, subNumber, baseRatio) {
	        divNumber = divNumber || 1;
	        baseRatio = baseRatio || 1;
	        subNumber = subNumber || 0;

	        this.ratio = this.endRatio = calculator.calculateRatio(this.value, divNumber, subNumber, baseRatio);

	        if (snippet.isExisty(this.start)) {
	            this.startRatio = calculator.calculateRatio(this.start, divNumber, subNumber, baseRatio);
	            this.ratioDistance = Math.abs(this.endRatio - this.startRatio);
	        }
	    },

	    /**
	     * Get formatted value for tooltip.
	     * @param {string} valueType - value type
	     * @returns {string}
	     * @private
	     */
	    _getFormattedValueForTooltip: function(valueType) {
	        return renderUtil.formatValue({
	            value: this[valueType],
	            formatFunctions: this.formatFunctions,
	            chartType: this.chartType,
	            areaType: 'tooltip',
	            valueType: valueType,
	            legendName: this.legendName
	        });
	    },

	    /**
	     * Pick value map for tooltip.
	     * @returns {{value: number, start: ?number, end: ?number}}
	     */
	    pickValueMapForTooltip: function() {
	        var valueMap = {
	            value: this._getFormattedValueForTooltip('value'),
	            ratio: this.ratio
	        };

	        if (snippet.isExisty(this.start)) {
	            valueMap.start = this._getFormattedValueForTooltip('start');
	            valueMap.end = this._getFormattedValueForTooltip('end');
	            valueMap.startRatio = this.startRatio;
	            valueMap.endRatio = this.endRatio;
	        }

	        return valueMap;
	    }
	});

	module.exports = SeriesItem;


/***/ }),
/* 106 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileoverview SeriesItemForCoordinateType is a element of SeriesGroup.items.
	 * SeriesItemForCoordinateType has processed terminal data like x, y, r, xRatio, yRatio, rRatio.
	 * @author NHN Ent.
	 *         FE Development Lab <dl_javascript@nhnent.com>
	 */

	'use strict';

	var predicate = __webpack_require__(21);
	var renderUtil = __webpack_require__(7);
	var snippet = __webpack_require__(6);

	var SeriesItemForCoordinateType = snippet.defineClass(/** @lends SeriesItemForCoordinateType.prototype */{
	    /**
	     * SeriesItemForCoordinateType is a element of SeriesGroup.items.
	     * SeriesItemForCoordinateType has processed terminal data like x, y, r, xRatio, yRatio, rRatio.
	     * @constructs SeriesItemForCoordinateType
	     * @private
	     * @param {object} params - parameters
	     *      @param {Array.<number>|{x: number, y:number, r: ?number, label: ?string}} params.datum - raw series datum
	     *      @param {string} params.chartType - type of chart
	     *      @param {?Array.<function>} params.formatFunctions - format functions
	     *      @param {number} params.index - raw data index
	     */
	    init: function(params) {
	        /**
	         * type of chart
	         * @type {string}
	         */
	        this.chartType = params.chartType;

	        /**
	         * format functions
	         * @type {Array.<function>}
	         */
	        this.formatFunctions = params.formatFunctions;

	        /**
	         * x axis type
	         * @type {?string}
	         */
	        this.xAxisType = params.xAxisType;

	        /**
	         * date format
	         * @type {?string}
	         */
	        this.dateFormat = params.dateFormat;

	        /**
	         * ratio map
	         * @type {object}
	         */
	        this.ratioMap = {};

	        this._initData(params.datum, params.index);
	    },

	    /**
	     * Initialize data of item.
	     @param {Array.<number>|{x: number, y:number, r: ?number, label: ?string}} rawSeriesDatum - raw series datum
	     * @param {number} index - raw data index
	     * @private
	     */
	    _initData: function(rawSeriesDatum, index) {
	        var date;

	        if (snippet.isArray(rawSeriesDatum)) {
	            this.x = rawSeriesDatum[0] || 0;
	            this.y = rawSeriesDatum[1] || 0;
	            if (predicate.isBubbleChart(this.chartType)) {
	                this.r = rawSeriesDatum[2];
	                this.label = rawSeriesDatum[3] || '';
	            } else {
	                this.label = rawSeriesDatum[2] || '';
	            }
	        } else {
	            this.x = rawSeriesDatum.x;
	            this.y = rawSeriesDatum.y;
	            this.r = rawSeriesDatum.r;
	            this.label = rawSeriesDatum.label || '';
	        }

	        if (predicate.isDatetimeType(this.xAxisType)) {
	            date = snippet.isDate(this.x) ? this.x : (new Date(this.x));
	            this.x = date.getTime() || 0;
	        }

	        this.index = index;

	        if (!this.label) {
	            if (predicate.isLineTypeChart(this.chartType) && predicate.isDatetimeType(this.xAxisType)) {
	                this.label = renderUtil.formatDate(this.x, this.dateFormat);
	            } else {
	                this.label = renderUtil.formatValue({
	                    value: this.x,
	                    formatFunctions: this.formatFunctions,
	                    chartType: this.chartType,
	                    areaType: 'series'
	                });
	            }
	            this.label += ',&nbsp;' + renderUtil.formatValue({
	                value: this.y,
	                formatFunctions: this.formatFunctions,
	                chartType: this.chartType,
	                areaType: 'series'
	            });
	        }
	    },

	    /**
	     * Add start.
	     * @param {number} value - value
	     * @private
	     */
	    addStart: function(value) {
	        this.start = value;
	    },

	    /**
	     * Add ratio.
	     * @param {string} valueType - type of value like x, y, r
	     * @param {?number} divNumber - number for division
	     * @param {?number} subNumber - number for subtraction
	     */
	    addRatio: function(valueType, divNumber, subNumber) {
	        if (!snippet.isExisty(this.ratioMap[valueType]) && divNumber) {
	            this.ratioMap[valueType] = (this[valueType] - subNumber) / divNumber;
	        }
	    },

	    /**
	     * Get formatted value for tooltip.
	     * @param {string} valueType - value type
	     * @returns {string}
	     * @private
	     */
	    _getFormattedValueForTooltip: function(valueType) {
	        var ratio = this.ratioMap[valueType];
	        var value = this[valueType];
	        var formattedValue = renderUtil.formatValue({
	            value: value,
	            formatFunctions: this.formatFunctions,
	            chartType: this.chartType,
	            areaType: 'tooltip',
	            valueType: valueType
	        });

	        return snippet.isNumber(ratio) ? formattedValue : value;
	    },

	    /**
	     * Pick value map for tooltip.
	     * @returns {{x: (number | null), y: (number | null), r: (number | null)}}
	     */
	    pickValueMapForTooltip: function() {
	        var valueMap = {
	            x: this._getFormattedValueForTooltip('x'),
	            y: this._getFormattedValueForTooltip('y'),
	            xRatio: this.ratioMap.x,
	            yRatio: this.ratioMap.y
	        };

	        if (snippet.isExisty(this.r)) {
	            valueMap.r = this._getFormattedValueForTooltip('r');
	            valueMap.rRatio = this.ratioMap.r;
	        }

	        return valueMap;
	    }
	});

	module.exports = SeriesItemForCoordinateType;


/***/ }),
/* 107 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileoverview SeriesDataModelForBoxplot is boxplot series model for drawing graph of chart series area,
	 *                  and create from rawSeriesData by user,
	 * SeriesDataModel.groups has SeriesGroups.
	 * @author NHN Ent.
	 *         FE Development Lab <dl_javascript@nhnent.com>
	 */

	'use strict';

	/*
	 * Raw series datum.
	 * @typedef {{name: ?string, data: Array.<number>, stack: ?string}} rawSeriesDatum
	 */

	/*
	 * Raw series data.
	 * @typedef {Array.<rawSeriesDatum>} rawSeriesData
	 */

	/*
	 * Groups.
	 * @typedef {Array.<SeriesGroup>} groups
	 */

	/*
	 * SeriesGroup is a element of SeriesDataModel.groups.
	 * SeriesGroup.items has SeriesItem.
	 */

	/*
	 * SeriesItem is a element of SeriesGroup.items.
	 * SeriesItem has processed terminal data like value, ratio, etc.
	 */

	var SeriesItemForBoxplot = __webpack_require__(108);
	var SeriesDataModel = __webpack_require__(103);
	var snippet = __webpack_require__(6);

	var concat = Array.prototype.concat;

	var SeriesDataModelForBoxplot = snippet.defineClass(SeriesDataModel, /** @lends SeriesDataModelForBoxplot.prototype */{
	    /**
	     * SeriesDataModelForBoxplot is series model for boxplot chart
	     * SeriesDataModel.groups has SeriesGroups.
	     * @constructs SeriesDataModel
	     * @param {rawSeriesData} rawSeriesData - raw series data
	     * @param {string} chartType - chart type
	     * @param {object} options - options
	     * @param {Array.<function>} formatFunctions - format functions
	     */
	    init: function(rawSeriesData, chartType, options, formatFunctions) {
	        /**
	         * chart type
	         * @type {string}
	         */
	        this.chartType = chartType;

	        /**
	         * chart options
	         * @type {Object}
	         */
	        this.options = options || {};

	        /**
	         * functions for formatting
	         * @type {Array.<function>}
	         */
	        this.formatFunctions = formatFunctions;

	        /**
	         * rawData.series
	         * @type {rawSeriesData}
	         */
	        this.rawSeriesData = rawSeriesData || [];

	        /**
	         * baseGroups is base data for making SeriesGroups.
	         * SeriesGroups is made by pivoted baseGroups, lf line type chart.
	         * @type {Array.Array<SeriesItem>}
	         */
	        this.baseGroups = null;

	        /**
	         * groups has SeriesGroups.
	         * @type {Array.<SeriesGroup>}
	         */
	        this.groups = null;

	        this.options.series = this.options.series || {};

	        /**
	         * map of values by value type like value, x, y, r.
	         * @type {object.<string, Array.<number>>}
	         */
	        this.valuesMap = {};
	    },

	    /**
	     * Create base groups.
	     * Base groups is two-dimensional array by seriesItems.
	     * @returns {Array.<Array.<(SeriesItem | SeriesItemForCoordinateType)>>}
	     * @private
	     * @override
	     */
	    _createBaseGroups: function() {
	        var chartType = this.chartType;
	        var formatFunctions = this.formatFunctions;

	        return snippet.map(this.rawSeriesData, function(rawDatum) {
	            var data = snippet.isArray(rawDatum) ? rawDatum : [].concat(rawDatum.data);
	            var items = snippet.map(data, function(datum, index) {
	                return new SeriesItemForBoxplot({
	                    datum: datum,
	                    chartType: chartType,
	                    formatFunctions: formatFunctions,
	                    index: index,
	                    legendName: rawDatum.name
	                });
	            });

	            return items;
	        });
	    },

	    /**
	     * Create values that picked value from SeriesItems of SeriesGroups.
	     * @returns {Array.<number>}
	     * @private
	     * * @override
	     */
	    _createValues: function() {
	        var values = [];
	        this.map(function(seriesGroup) {
	            return snippet.forEach(seriesGroup.items, function(group) {
	                values.push(group.min);
	                values.push(group.max);
	                values.push(group.uq);
	                values.push(group.lq);
	                values.push(group.median);
	            });
	        });

	        values = concat.apply([], values);

	        return snippet.filter(values, function(value) {
	            return !isNaN(value);
	        });
	    }
	});

	module.exports = SeriesDataModelForBoxplot;


/***/ }),
/* 108 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileoverview SeriesItem is a element of SeriesGroup.items.
	 * SeriesItem has processed terminal data like value, ratio, etc.
	 * @author NHN Ent.
	 *         FE Development Lab <dl_javascript@nhnent.com>
	 */

	'use strict';

	var renderUtil = __webpack_require__(7);
	var calculator = __webpack_require__(45);
	var snippet = __webpack_require__(6);

	var SeriesItem = snippet.defineClass(/** @lends SeriesItem.prototype */{
	    /**
	     * SeriesItem is a element of SeriesGroup.items.
	     * SeriesItem has processed terminal data like value, ratio, etc.
	     * @constructs SeriesItem
	     * @private
	     * @param {object} params - parameters
	     *      @param {number} params.datum - value
	     *      @param {string} params.chartType - type of chart
	     *      @param {?Array.<function>} params.formatFunctions - format functions
	     *      @param {number} params.index - raw data index
	     *      @param {?string} params.stack - stack
	     */
	    init: function(params) {
	        /**
	         * type of chart
	         * @type {string}
	         */
	        this.chartType = params.chartType;

	        /**
	         * format functions
	         * @type {Array.<function>}
	         */
	        this.formatFunctions = params.formatFunctions;

	        /**
	         * value of item
	         * @type {number}
	         */
	        this.value = null;

	        /**
	         * label
	         * @type {string}
	         */
	        this.label = null;

	        /**
	         * ratio of value about distance of limit
	         * @type {number}
	         */
	        this.ratio = null;

	        /**
	         * min value of item.
	         * @type {number}
	         */
	        this.min = null;

	        /**
	         * min label
	         * @type {number}
	         */
	        this.minLabel = null;

	        /**
	         * ratio of end value
	         * @type {number}
	         */
	        this.minRatio = null;

	        /**
	         * max value of item.
	         * @type {number}
	         */
	        this.max = null;

	        /**
	         * max label
	         * @type {number}
	         */
	        this.maxLabel = null;

	        /**
	         * ratio of max value
	         * @type {number}
	         */
	        this.maxRatio = null;

	        /**
	         * median value of item.
	         * @type {number}
	         */
	        this.median = null;

	        /**
	         * median label
	         * @type {number}
	         */
	        this.medianLabel = null;

	        /**
	         * ratio of median value
	         * @type {number}
	         */
	        this.medianRatio = null;

	        /**
	         * lq value of item.
	         * @type {number}
	         */
	        this.lq = null;

	        /**
	         * lq label
	         * @type {number}
	         */
	        this.lqLabel = null;

	        /**
	         * ratio of lq value
	         * @type {number}
	         */
	        this.lqRatio = null;

	        /**
	         * uq value of item.
	         * @type {number}
	         */
	        this.uq = null;

	        /**
	         * uq label
	         * @type {number}
	         */
	        this.uqLabel = null;

	        /**
	         * ratio of uq value
	         * @type {number}
	         */
	        this.uqRatio = null;

	        /**
	         * distance of start ratio and end ratio
	         * @type {null}
	         */
	        this.ratioDistance = null;

	        /**
	         * series legend name
	         * @type {string}
	         */
	        this.legendName = params.legendName;

	        this._initValues(params.datum, params.index);
	    },

	    /**
	     * Initialize values of item.
	     * @param {number|Array.<number>} rawValue - raw value
	     * @param {number} index - raw data index
	     * @private
	     */
	    _initValues: function(rawValue, index) {
	        var values = this._createValues(rawValue);
	        var max = values[4];
	        var uq = values[3];
	        var median = values[2];
	        var lq = values[1];
	        var min = values[0];
	        var hasOutlier = values.length > 5;
	        var outliers;
	        var formatValue = snippet.bind(function(value) {
	            return renderUtil.formatValue({
	                value: value,
	                formatFunctions: this.formatFunctions,
	                chartType: this.chartType,
	                areaType: 'makingSeriesLabel',
	                legendName: this.legendName
	            });
	        }, this);

	        this.value = this.max = max;
	        this.uq = uq;
	        this.median = median;
	        this.lq = lq;
	        this.min = min;
	        this.index = index;

	        if (hasOutlier) {
	            this.outliers = [];

	            outliers = this.outliers;

	            snippet.forEach(values.slice(5), function(outlier) {
	                outliers.push({
	                    value: outlier,
	                    label: formatValue(outlier)
	                });
	            });
	        }

	        this.label = formatValue(max);
	        this.uqLabel = formatValue(uq);
	        this.medianLabel = formatValue(median);
	        this.lqLabel = formatValue(lq);
	        this.minLabel = formatValue(min);

	        this.maxLabel = this.label;
	    },

	    /**
	     * Crete sorted values.
	     * @param {Array.<number>|number} value value
	     * @returns {Array.<number>}
	     * @private
	     */
	    _createValues: function(value) {
	        var values = snippet.map([].concat(value), function(newValue) {
	            return snippet.isNull(newValue) ? null : parseFloat(newValue);
	        });

	        return values;
	    },

	    /**
	     * Add min.
	     * @param {number} value - value
	     * @private
	     */
	    addStart: function(value) {
	        if (!snippet.isNull(this.min)) {
	            return;
	        }

	        this.min = value;
	        this.minLabel = renderUtil.formatValue({
	            value: value,
	            formatFunctions: this.formatFunctions,
	            chartType: this.chartType,
	            areaType: 'series',
	            legendName: this.legendName
	        });
	    },

	    /**
	     * Update formatted value for range.
	     * @private
	     */
	    _updateFormattedValueforRange: function() {
	        this.label = this.minLabel + ' ~ ' + this.maxLabel;
	    },

	    /**
	     * Add ratio.
	     * @param {number} divNumber - number for division
	     * @param {?number} subNumber - number for subtraction
	     * @param {?number} baseRatio - base ratio
	     */
	    addRatio: function(divNumber, subNumber, baseRatio) {
	        var calculateRatio = calculator.calculateRatio;

	        divNumber = divNumber || 1;
	        baseRatio = baseRatio || 1;
	        subNumber = subNumber || 0;

	        this.ratio = this.maxRatio = calculateRatio(this.max, divNumber, subNumber, baseRatio);
	        this.uqRatio = calculateRatio(this.uq, divNumber, subNumber, baseRatio);
	        this.medianRatio = calculateRatio(this.median, divNumber, subNumber, baseRatio);
	        this.lqRatio = calculateRatio(this.lq, divNumber, subNumber, baseRatio);
	        this.minRatio = calculateRatio(this.min, divNumber, subNumber, baseRatio);

	        snippet.forEach(this.outliers, function(outlier) {
	            outlier.ratio = calculateRatio(outlier.value, divNumber, subNumber, baseRatio);
	        });

	        this.ratioDistance = Math.abs(this.uqRatio - this.lqRatio);
	    },

	    /**
	     * Get formatted value for tooltip.
	     * @param {string} valueType - value type
	     * @returns {string}
	     * @private
	     */
	    _getFormattedValueForTooltip: function(valueType) {
	        return renderUtil.formatValue({
	            value: this[valueType],
	            formatFunctions: this.formatFunctions,
	            chartType: this.chartType,
	            areaType: 'tooltip',
	            valueType: valueType,
	            legendName: this.legendName
	        });
	    },

	    /**
	     * Pick value map for tooltip.
	     * @returns {{value: number, min: ?number, max: ?number}}
	     */
	    pickValueMapForTooltip: function() {
	        var valueMap = {
	            value: this._getFormattedValueForTooltip('value'),
	            ratio: this.ratio
	        };

	        if (snippet.isExisty(this.min)) {
	            valueMap.min = this._getFormattedValueForTooltip('min');
	            valueMap.max = this._getFormattedValueForTooltip('max');
	            valueMap.minRatio = this.minRatio;
	            valueMap.maxRatio = this.maxRatio;
	            valueMap.maxLabel = this.maxLabel;
	            valueMap.minLabel = this.minLabel;
	            valueMap.uqLabel = this.uqLabel;
	            valueMap.lqLabel = this.lqLabel;
	            valueMap.medianLabel = this.medianLabel;
	            valueMap.outliers = this.outliers;
	        }

	        return valueMap;
	    }
	});

	module.exports = SeriesItem;


/***/ }),
/* 109 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileoverview SeriesDataModel for Bullet Chart
	 * @author NHN Ent.
	 *         FE Development Lab <dl_javascript@nhnent.com>
	 */

	'use strict';

	var SeriesItem = __webpack_require__(105);
	var SeriesDataModel = __webpack_require__(103);
	var chartConst = __webpack_require__(8);
	var snippet = __webpack_require__(6);

	var SeriesDataModelForBullet = snippet.defineClass(SeriesDataModel, /** @lends SeriesDataModelForBullet.prototype */ {
	    /**
	     * SeriesDataModelForBullet is series model for boxplot chart
	     * SeriesDataModel.groups has SeriesGroups.
	     * @constructs SeriesDataModel
	     * @param {rawSeriesData} rawSeriesData - raw series data
	     * @param {string} chartType - chart type
	     * @param {object} options - options
	     * @param {Array.<function>} formatFunctions - format functions
	     */
	    init: function(rawSeriesData, chartType, options, formatFunctions) {
	        SeriesDataModel.call(this, rawSeriesData, chartType, options, formatFunctions);
	    },

	    /**
	     * Create base groups.
	     * Base groups is two-dimensional array by seriesItems.
	     * @returns {Array.<Array.<(SeriesItem | SeriesItemForCoordinateType)>>}
	     * @private
	     * @override
	     */
	    _createBaseGroups: function() {
	        var chartType = this.chartType;
	        var formatFunctions = this.formatFunctions;
	        var maxRangeCount = 0;
	        var maxMarkerCount = 0;
	        var baseGroups = snippet.map(this.rawSeriesData, function(rawDatum) {
	            var items = [];
	            var data = rawDatum.data;
	            var markers = rawDatum.markers;
	            var markerCount = markers.length;
	            var ranges = rawDatum.ranges;
	            var rangeCount = ranges.length;

	            if (ranges && rangeCount) {
	                snippet.map(ranges, function(range) {
	                    items.push(new SeriesItem({
	                        datum: range,
	                        chartType: chartType,
	                        formatFunctions: formatFunctions,
	                        type: chartConst.BULLET_TYPE_RANGE
	                    }));
	                });
	                maxRangeCount = Math.max(maxRangeCount, rangeCount);
	            }

	            if (data) {
	                items.push(new SeriesItem({
	                    datum: data,
	                    chartType: chartType,
	                    formatFunctions: formatFunctions,
	                    type: chartConst.BULLET_TYPE_ACTUAL
	                }));
	            }

	            if (markers && markerCount) {
	                snippet.map(markers, function(marker) {
	                    items.push(new SeriesItem({
	                        datum: marker,
	                        chartType: chartType,
	                        formabutFunctions: formatFunctions,
	                        type: chartConst.BULLET_TYPE_MARKER
	                    }));
	                });
	                maxMarkerCount = Math.max(maxMarkerCount, markerCount);
	            }

	            return items;
	        });

	        this.maxMarkerCount = maxMarkerCount;
	        this.maxRangeCount = maxRangeCount;

	        return baseGroups;
	    },

	    /**
	     * Create SeriesGroups from rawData.series.
	     * @returns {Array.<SeriesGroup>}
	     * @private
	     */
	    _createSeriesGroupsFromRawData: function() {
	        return SeriesDataModel.prototype._createSeriesGroupsFromRawData.call(this);
	    }
	});

	module.exports = SeriesDataModelForBullet;


/***/ }),
/* 110 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileoverview SeriesDataModelForTreemap is base model for drawing graph of treemap chart series area.
	 * SeriesDataModel.groups has SeriesGroups.
	 * @author NHN Ent.
	 *         FE Development Lab <dl_javascript@nhnent.com>
	 */

	'use strict';

	var SeriesDataModel = __webpack_require__(103);
	var SeriesItem = __webpack_require__(111);
	var chartConst = __webpack_require__(8);
	var calculator = __webpack_require__(45);
	var snippet = __webpack_require__(6);

	var aps = Array.prototype.slice;

	var SeriesDataModelForTreeMap = snippet.defineClass(SeriesDataModel, /** @lends SeriesDataModelForTreeMap.prototype */{
	    /**
	     * SeriesDataModelForTreemap is base model for drawing graph of treemap chart series area.
	     * @constructs SeriesDataModelForTreemap
	     * @private
	     */
	    init: function() {
	        SeriesDataModel.apply(this, arguments);

	        /**
	         * cached found seriesItems map
	         * @type {object.<string, Array.<SeriesItem>>}
	         */
	        this.foundSeriesItemsMap = {};

	        /**
	         * cached seriesItem map
	         * @type {object<string, SeriesItem>}
	         */
	        this.seriesItemMap = {};
	    },

	    /**
	     * Flatten hierarchical data.
	     * @param {Array.<object>} rawSeriesData - raw series data
	     * @param {string | number} parent - parent id
	     * @param {?Array.<number>} ancestorIndexes - ancestor indexes
	     * @returns {Array.<object>}
	     * @private
	     */
	    _flattenHierarchicalData: function(rawSeriesData, parent, ancestorIndexes) {
	        var self = this;
	        var flatData = [];
	        var idPrefix;

	        if (parent) {
	            idPrefix = parent + '_';
	        } else {
	            idPrefix = chartConst.TREEMAP_ID_PREFIX;
	            parent = chartConst.TREEMAP_ROOT_ID;
	        }

	        ancestorIndexes = ancestorIndexes || [];

	        snippet.forEachArray(rawSeriesData, function(datum, index) {
	            var id = idPrefix + index;
	            var children = datum.children;
	            var indexes = ancestorIndexes.concat(index);

	            datum.indexes = indexes;

	            if (!snippet.isNull(datum.value)) {
	                flatData.push(datum);
	            }

	            if (!datum.id) {
	                datum.id = id;
	            }

	            if (!datum.parent) {
	                datum.parent = parent;
	            }

	            if (children) {
	                flatData = flatData.concat(self._flattenHierarchicalData(children, id, indexes));
	                delete datum.children;
	            }
	        });

	        return flatData;
	    },

	    /**
	     * Partition raw series data by parent id
	     * @param {Array.<object>} rawSeriesData - raw series data
	     * @param {string | number} parent - parent id
	     * @returns {Array.<Array>}
	     * @private
	     */
	    _partitionRawSeriesDataByParent: function(rawSeriesData, parent) {
	        var filtered = [];
	        var rejected = [];

	        snippet.forEachArray(rawSeriesData, function(datum) {
	            if (datum.parent === parent) {
	                filtered.push(datum);
	            } else {
	                rejected.push(datum);
	            }
	        });

	        return [filtered, rejected];
	    },

	    /**
	     * Set tree properties like depth, group in raw series data.
	     * @param {Array.<object>} flatSeriesData - flat series data
	     * @param {number} depth - tree depth
	     * @param {number} parent - parent id
	     * @param {number} group - tree group
	     * @returns {Array.<object>}
	     * @private
	     */
	    _setTreeProperties: function(flatSeriesData, depth, parent, group) {
	        var self = this;
	        var parted = this._partitionRawSeriesDataByParent(flatSeriesData, parent);
	        var filtered = parted[0];
	        var rejected = parted[1];
	        var childDepth = depth + 1;

	        snippet.forEachArray(filtered, function(datum, index) {
	            var descendants, children;

	            datum.depth = depth;
	            datum.group = snippet.isUndefined(group) ? index : group;
	            descendants = self._setTreeProperties(rejected, childDepth, datum.id, datum.group, datum.fillOpacity);
	            children = snippet.filter(descendants, function(descendant) {
	                return descendant.depth === childDepth;
	            });

	            if (children.length) {
	                datum.value = calculator.sum(snippet.pluck(children, 'value'));
	                datum.hasChild = true;
	            } else {
	                datum.hasChild = false;
	            }

	            if (descendants.length) {
	                descendants.sort(function(a, b) {
	                    return b.value - a.value;
	                });
	            }

	            filtered = filtered.concat(descendants);
	        });

	        return filtered;
	    },

	    /**
	     * Set ratio.
	     * @param {Array.<object>} flatSeriesData - raw series data
	     * @param {string} parent - parent id
	     * @private
	     */
	    _setRatio: function(flatSeriesData, parent) {
	        var self = this;
	        var parted = this._partitionRawSeriesDataByParent(flatSeriesData, parent);
	        var filtered = parted[0];
	        var rejected = parted[1];
	        var total = calculator.sum(snippet.pluck(filtered, 'value'));

	        snippet.forEachArray(filtered, function(datum) {
	            var value = snippet.isNull(datum.value) ? 0 : datum.value;

	            datum.ratio = value / total;

	            if (datum.hasChild) {
	                self._setRatio(rejected, datum.id);
	            }
	        });
	    },

	    /**
	     * Create base groups.
	     * @returns {Array.<Array.<SeriesItem>>}
	     * @private
	     * @override
	     */
	    _createBaseGroups: function() {
	        var chartType = this.chartType;
	        var seriesItemMap = this.seriesItemMap;
	        var formatFunctions = this.formatFunctions;
	        var flatSeriesData = this._flattenHierarchicalData(this.rawSeriesData);
	        flatSeriesData = this._setTreeProperties(flatSeriesData, 1, chartConst.TREEMAP_ROOT_ID);
	        this._setRatio(flatSeriesData, chartConst.TREEMAP_ROOT_ID);

	        return [snippet.map(flatSeriesData, function(rawDatum) {
	            var seriesItem = new SeriesItem(rawDatum, formatFunctions, chartType);

	            seriesItemMap[seriesItem.id] = seriesItem;

	            return seriesItem;
	        })];
	    },

	    /**
	     * Find SeriesItems.
	     * @param {string} key - key
	     * @param {function} condition - condition function
	     * @returns {Array.<SeriesItem>}
	     * @private
	     */
	    _findSeriesItems: function(key, condition) {
	        if (!this.foundSeriesItemsMap[key]) {
	            this.foundSeriesItemsMap[key] = this.getFirstSeriesGroup(true).filter(condition);
	        }

	        return this.foundSeriesItemsMap[key];
	    },

	    /**
	     * Make cache key for caching found SeriesItems.
	     * @param {string} prefix - prefix
	     * @returns {string}
	     * @private
	     */
	    _makeCacheKey: function(prefix) {
	        var key = prefix;

	        if (arguments.length > 1) {
	            key += aps.call(arguments, 1).join('_');
	        }

	        return key;
	    },

	    /**
	     * Whether valid group or not.
	     * If comparingGroup is undefined or group and comparingGroup are equal, this group is valid.
	     * @param {number} group - group
	     * @param {number} [comparingGroup] - comparing group
	     * @returns {boolean}
	     * @private
	     */
	    _isValidGroup: function(group, comparingGroup) {
	        return !snippet.isExisty(comparingGroup) || (group === comparingGroup);
	    },

	    /**
	     * Find SeriesItems by depth.
	     * @param {number} depth - tree depth
	     * @param {number} [group] - tree group
	     * @returns {Array.<SeriesItem>}
	     */
	    findSeriesItemsByDepth: function(depth, group) {
	        var self = this;
	        var key = this._makeCacheKey(chartConst.TREEMAP_DEPTH_KEY_PREFIX, depth, group);

	        return this._findSeriesItems(key, function(seriesItem) {
	            return (seriesItem.depth === depth) && self._isValidGroup(seriesItem.group, group);
	        });
	    },

	    /**
	     * Find SeriesItems by parent id.
	     * @param {string | number} parent - parent id
	     * @returns {Array.<SeriesItem>}
	     */
	    findSeriesItemsByParent: function(parent) {
	        var key = this._makeCacheKey(chartConst.TREEMAP_PARENT_KEY_PREFIX, parent);

	        return this._findSeriesItems(key, function(seriesItem) {
	            return seriesItem.parent === parent;
	        });
	    },

	    /**
	     * Find leaf SeriesItems.
	     * @param {number} [group] - tree group
	     * @returns {Array.<SeriesItem>}
	     */
	    findLeafSeriesItems: function(group) {
	        var self = this;
	        var key = this._makeCacheKey(chartConst.TREEMAP_LEAF_KEY_PREFIX, group);

	        return this._findSeriesItems(key, function(seriesItem) {
	            return !seriesItem.hasChild && self._isValidGroup(seriesItem.group, group);
	        });
	    },

	    /**
	     * Find parent by depth.
	     * @param {string} id - id
	     * @param {number} depth - depth
	     * @returns {SeriesItem|null}
	     */
	    findParentByDepth: function(id, depth) {
	        var seriesItem = this.seriesItemMap[id] || null;

	        if (seriesItem && seriesItem.depth !== depth) {
	            seriesItem = this.findParentByDepth(seriesItem.parent, depth);
	        }

	        return seriesItem;
	    },

	    /**
	     * Initialize foundSeriesItemsMap.
	     */
	    initSeriesItemsMap: function() {
	        this.foundSeriesItemsMap = null;
	    }
	});

	module.exports = SeriesDataModelForTreeMap;


/***/ }),
/* 111 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileoverview SeriesItem for treemap.
	 * @author NHN Ent.
	 *         FE Development Lab <dl_javascript@nhnent.com>
	 */

	'use strict';

	var calculator = __webpack_require__(45);
	var renderUtil = __webpack_require__(7);
	var snippet = __webpack_require__(6);

	var SeriesItemForTreemap = snippet.defineClass(/** @lends SeriesItemForTreemap.prototype */{
	    /**
	     * SeriesItem for treemap.
	     * @constructs SeriesItemForTreemap
	     * @private
	     * @param {object} rawSeriesDatum - value
	     * @param {?Array.<function>} formatFunctions - format functions
	     * @param {string} chartType - type of chart
	     */
	    init: function(rawSeriesDatum, formatFunctions, chartType) {
	        /**
	         * type of chart
	         * @type {string}
	         */
	        this.chartType = chartType;

	        /**
	         * format functions
	         * @type {Array.<function>}
	         */
	        this.formatFunctions = formatFunctions;
	        this.id = rawSeriesDatum.id;
	        this.parent = rawSeriesDatum.parent;
	        this.value = rawSeriesDatum.value;
	        this.ratio = rawSeriesDatum.ratio;
	        this.colorValue = rawSeriesDatum.colorValue;
	        this.depth = rawSeriesDatum.depth;
	        this.label = rawSeriesDatum.label || '';
	        this.group = rawSeriesDatum.group;
	        this.hasChild = !!rawSeriesDatum.hasChild;
	        this.indexes = rawSeriesDatum.indexes;
	        this.fillOpacity = rawSeriesDatum.fillOpacity;
	    },

	    /**
	     * Add ratio.
	     * @param {number} divNumber - number for division
	     * @param {?number} subNumber - number for subtraction
	     */
	    addRatio: function(divNumber, subNumber) {
	        divNumber = divNumber || 1;
	        subNumber = subNumber || 0;

	        this.colorRatio = calculator.calculateRatio(this.colorValue, divNumber, subNumber, 1) || -1;
	    },

	    /**
	     * Pick value map for tooltip.
	     * @returns {{value: number, label: string}}
	     */
	    pickValueMapForTooltip: function() {
	        var formatFunctions = this.formatFunctions;
	        var chartType = this.chartType;
	        var colorValue = this.colorValue;
	        var formattedValue = renderUtil.formatValue({
	            value: this.value,
	            formatFunctions: formatFunctions,
	            chartType: chartType,
	            areaType: 'tooltipValue'
	        });
	        var label = formattedValue;
	        var valueMap = {
	            legend: this.label || '',
	            value: formattedValue,
	            label: label,
	            ratio: this.ratio,
	            tooltipColorIndex: this.indexes[0]
	        };

	        if (snippet.isExisty(colorValue)) {
	            valueMap.colorValue = renderUtil.formatValue({
	                value: colorValue,
	                formatFunctions: formatFunctions,
	                chartType: chartType,
	                areaType: 'tooltipColorValue'
	            });
	            valueMap.colorRatio = this.colorRatio;
	        }

	        return valueMap;
	    },

	    /**
	     * Pick data for label template.
	     * @param {number} total - value total
	     * @returns {{value: number, ratio: number, label: string, colorValue: ?number, colorValueRatio: ?number}}
	     */
	    pickLabelTemplateData: function() {
	        var templateData = {
	            value: this.value,
	            ratio: this.ratio,
	            label: this.label
	        };

	        if (snippet.isExisty(this.colorValue)) {
	            templateData.colorValue = this.colorValue;
	            templateData.colorValueRatio = this.ratio;
	        }

	        return templateData;
	    }
	});

	module.exports = SeriesItemForTreemap;


/***/ }),
/* 112 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileoverview Bounds and scale data builder.
	 * @author NHN Ent.
	 *         FE Development Lab <dl_javascript@nhnent.com>
	 */

	'use strict';

	var BoundsModel = __webpack_require__(113);
	var ScaleDataModel = __webpack_require__(119);
	var chartConst = __webpack_require__(8);
	var predicate = __webpack_require__(21);

	/**
	 * Bounds and scale data builder.
	 * @module boundsAndScaleBuilder
	 * @private */
	var boundsAndScaleBuilder = {
	    /**
	     * Create BoundsModel.
	     * @param {DataProcessor} dataProcessor - DataProcessor instance
	     * @param {object} params - parameters
	     * @returns {BoundsModel}
	     * @private
	     */
	    _createBoundsModel: function(dataProcessor, params) {
	        return new BoundsModel({
	            chartType: params.chartType,
	            seriesTypes: params.seriesTypes,
	            options: params.options,
	            theme: params.theme,
	            dataProcessor: dataProcessor,
	            hasAxes: params.hasAxes,
	            isVertical: params.isVertical
	        });
	    },

	    /**
	     * Create ScaleDataModel.
	     * @param {DataProcessor} dataProcessor - DataProcessor instance
	     * @param {BoundsModel} boundsModel - BoundsModel instance
	     * @param {object} params - parameters
	     * @returns {ScaleDataModel}
	     * @private
	     */
	    _createScaleDataModel: function(dataProcessor, boundsModel, params) {
	        return new ScaleDataModel({
	            chartType: params.chartType,
	            seriesTypes: params.seriesTypes,
	            options: params.options,
	            theme: params.theme,
	            dataProcessor: dataProcessor,
	            boundsModel: boundsModel,
	            hasRightYAxis: params.hasRightYAxis,
	            addedDataCount: params.addedDataCount
	        });
	    },

	    /**
	     * Add y axis scale.
	     * @param {ScaleDataModel} scaleDataModel - ScaleDataModel instance
	     * @param {string} name - component name
	     * @param {object} scaleOption - option for add scale
	     * @param {object} yAxisOptions - option for yAxis
	     */
	    addYAxisScale: function(scaleDataModel, name, scaleOption, yAxisOptions) {
	        scaleDataModel.addScale(name, (scaleOption && scaleOption.options) || yAxisOptions || {}, {
	            valueType: scaleOption.valueType || 'value',
	            areaType: scaleOption.areaType,
	            chartType: scaleOption.chartType
	        }, scaleOption.additionalOptions);
	    },

	    /**
	     * Register dimension for y axis.
	     * @param {ComponentManager} componentManager - ComponentManager instance
	     * @param {BoundsModel} boundsModel - BoundsModel instance
	     * @param {object.<string, object>} scaleDataMap - scale data map
	     * @param {string} axisName - axis name like yAxis and rightYAxis
	     * @param {boolean} isVertical - whether vertical or not
	     * @private
	     */
	    _registerYAxisDimension: function(componentManager, boundsModel, scaleDataMap, axisName, isVertical) {
	        var yAxis = componentManager.get(axisName);
	        var limit = null;
	        var yAxisLabels = [];
	        var scaleData;

	        if (!yAxis) {
	            return;
	        }
	        scaleData = scaleDataMap[axisName];

	        if (scaleData) {
	            limit = scaleData.limit;
	            yAxisLabels = scaleData.labels;
	        }
	        boundsModel.registerYAxisDimension({
	            limit: limit,
	            axisName: axisName,
	            options: yAxis.options,
	            theme: yAxis.theme,
	            yAxisLabels: yAxisLabels,
	            isVertical: isVertical
	        });
	    },

	    /**
	     * Set layout bounds and scale.
	     * @param {DataProcessor} dataProcessor - DataProcessor instance
	     * @param {ComponentManager} componentManager - ComponentManager instance
	     * @param {BoundsModel} boundsModel - BoundsModel instance
	     * @param {ScaleDataModel} scaleDataModel - ScaleDataModel instance
	     * @param {object} params - parameter for setting layout bounds and scale data.
	     * @private
	     */
	    _setLayoutBoundsAndScale: function(dataProcessor, componentManager, boundsModel, scaleDataModel, params) {
	        var options = params.options;
	        var scaleOption = params.scaleOption || {};
	        var addingDataMode = params.addingDataMode;
	        var isVertical = params.isVertical;
	        var scaleDataMap;

	        // 01. register base dimension
	        if (componentManager.has('xAxis')) {
	            boundsModel.registerXAxisHeight();
	        }

	        if (componentManager.has('legend')) {
	            if (componentManager.get('legend').colorSpectrum) {
	                boundsModel.registerSpectrumLegendDimension();
	            } else {
	                boundsModel.registerLegendDimension();
	            }
	        }

	        // 02. add scale of y axis and legend
	        if (scaleOption.yAxis) {
	            this.addYAxisScale(scaleDataModel, 'yAxis', scaleOption.yAxis, params.options.yAxis);
	        }

	        if (scaleOption.rightYAxis) {
	            this.addYAxisScale(scaleDataModel, 'rightYAxis', scaleOption.rightYAxis);
	        }

	        if (scaleOption.legend) {
	            scaleDataModel.addScale('legend', {}, {
	                chartType: params.chartType
	            }, {
	                tickCounts: [chartConst.SPECTRUM_LEGEND_TICK_COUNT]
	            });
	        }

	        scaleDataMap = scaleDataModel.scaleDataMap;

	        if (scaleDataMap.legend && componentManager.get('legend') && componentManager.get('legend').colorSpectrum) {
	            boundsModel.registerSpectrumLegendDimension(scaleDataMap.legend.limit);
	        }

	        // 03. register y axis dimension
	        this._registerYAxisDimension(componentManager, boundsModel, scaleDataMap, 'yAxis', isVertical);
	        this._registerYAxisDimension(componentManager, boundsModel, scaleDataMap, 'rightYAxis', isVertical);

	        // 04. add x axis scale
	        if (scaleOption.xAxis) {
	            scaleDataModel.addScale('xAxis', options.xAxis, {
	                valueType: scaleOption.xAxis.valueType || 'value'
	            }, scaleOption.xAxis.additionalOptions);
	        }

	        // 05. create and configure axis data map
	        if (params.hasAxes) {
	            scaleDataModel.setAxisDataMap();
	        }

	        // 06. register series dimension
	        boundsModel.registerSeriesDimension();

	        // 07. register circle legend dimension, if there is a circle legend
	        if (componentManager.has('circleLegend') && options.circleLegend.visible) {
	            boundsModel.registerCircleLegendDimension(scaleDataModel.axisDataMap);
	        }

	        if (componentManager.has('xAxis')) {
	            // 08. update axisData, when autoTickInterval option exist
	            if (predicate.isAutoTickInterval(options.xAxis.tickInterval)) {
	                scaleDataModel.updateXAxisDataForAutoTickInterval(params.prevXAxisData, addingDataMode);
	            }

	            // 09. update axisData related to the rotation of label on x axis
	            scaleDataModel.updateXAxisDataForLabel(addingDataMode);
	        }

	        // 10. regiser dimension of rest components
	        //     register positon of all components
	        boundsModel.registerBoundsData(scaleDataModel.axisDataMap.xAxis);
	    },

	    /**
	     * Build layout bounds and scale data.
	     * @param {DataProcessor} dataProcessor - DataProcessor instance
	     * @param {ComponentManager} componentManager - ComponentManager instance
	     * @param {object} params - parameter for building layout bounds and scale data.
	     * @returns {{
	     *      dimensionMap: object,
	     *      positionMap: object,
	     *      limitMap: {
	     *          xAxis: ?{min: number, max: number},
	     *          yAxis: ?{min: number, max: number},
	     *          rightYAxis: ?{min: number, max: number},
	     *          legend: ?{min: number, max: number}
	     *      },
	     *      axisDataMap: ?object,
	     *      maxRadius: ?number,
	     *      legendScaleData: ?object
	     * }}
	     */
	    build: function(dataProcessor, componentManager, params) {
	        var boundsModel = this._createBoundsModel(dataProcessor, params);
	        var scaleDataModel = this._createScaleDataModel(dataProcessor, boundsModel, params);
	        var boundsAndScale;

	        this._setLayoutBoundsAndScale(dataProcessor, componentManager, boundsModel, scaleDataModel, params);

	        boundsAndScale = {
	            dimensionMap: boundsModel.dimensionMap,
	            positionMap: boundsModel.positionMap,
	            limitMap: scaleDataModel.makeLimitMap(params.seriesTypes || [params.chartType], params.isVertical)
	        };

	        if (scaleDataModel.axisDataMap) {
	            boundsAndScale.axisDataMap = scaleDataModel.axisDataMap;
	        }

	        if (predicate.isBubbleChart(params.chartType)) {
	            boundsAndScale.maxRadius = boundsModel.calculateMaxRadius(scaleDataModel.axisDataMap);
	        }

	        if (scaleDataModel.scaleDataMap.legend) {
	            boundsAndScale.legendScaleData = scaleDataModel.scaleDataMap.legend;
	        }

	        return boundsAndScale;
	    }
	};

	module.exports = boundsAndScaleBuilder;


/***/ }),
/* 113 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileoverview Bounds model.
	 * @author NHN Ent.
	 *         FE Development Lab <dl_javascript@nhnent.com>
	 */

	'use strict';

	var chartConst = __webpack_require__(8);
	var predicate = __webpack_require__(21);
	var renderUtil = __webpack_require__(7);
	var raphaelRenderUtil = __webpack_require__(5);
	var circleLegendCalculator = __webpack_require__(114);
	var axisCalculator = __webpack_require__(115);
	var legendCalculator = __webpack_require__(116);
	var seriesCalculator = __webpack_require__(117);
	var spectrumLegendCalculator = __webpack_require__(118);
	var snippet = __webpack_require__(6);
	var browser = snippet.browser;
	var IS_LTE_IE8 = browser.msie && browser.version <= 8;
	var LEGEND_AREA_H_PADDING = chartConst.LEGEND_AREA_H_PADDING;

	/**
	 * Dimension.
	 * @typedef {{width: number, height:number}} dimension
	 * @private
	 */

	/**
	 * Position.
	 * @typedef {{left: number, top:number}} position
	 * @private
	 */

	/**
	 * Bound.
	 * @typedef {{dimension: dimension, position:position}} bound
	 * @private
	 */

	var BoundsModel = snippet.defineClass(/** @lends BoundsModel.prototype */{
	    /**
	     * Bounds maker.
	     * @constructs BoundsModel
	     * @private
	     * @param {object} params parameters
	     */
	    init: function(params) {
	        /**
	         * options
	         * @type {object}
	         */
	        this.options = params.options || {};
	        this.options.legend = this.options.legend || {};
	        this.options.yAxis = this.options.yAxis || {};

	        /**
	         * theme
	         * @type {object}
	         */
	        this.theme = params.theme || {};

	        /**
	         * whether chart has axes or not
	         * @type {boolean}
	         */
	        this.hasAxes = params.hasAxes;

	        /**
	         * chart type
	         * @type {string}
	         */
	        this.chartType = params.chartType;

	        /**
	         * series types
	         */
	        this.seriesTypes = params.seriesTypes || [];

	        /**
	         * data processor
	         * @type {DataProcessor}
	         */
	        this.dataProcessor = params.dataProcessor;

	        this.initBoundsData();
	    },

	    /**
	     * Initialize bounds data.
	     */
	    initBoundsData: function() {
	        this.dimensionMap = {
	            legend: {
	                width: 0
	            },
	            yAxis: {
	                width: 0
	            },
	            rightYAxis: {
	                width: 0
	            },
	            xAxis: {
	                height: 0
	            },
	            circleLegend: {
	                width: 0
	            },
	            chartExportMenu: {
	                width: 0
	            }
	        };

	        this.positionMap = {};

	        /**
	         * chart left padding
	         * @type {number}
	         */
	        this.chartLeftPadding = chartConst.CHART_PADDING;

	        this.maxRadiusForBubbleChart = null;

	        this._registerChartDimension();
	        this._registerTitleDimension();
	        this._registerChartExportMenuDimension();
	    },

	    /**
	     * Register dimension.
	     * @param {string} name component name
	     * @param {dimension} dimension component dimension
	     * @private
	     */
	    _registerDimension: function(name, dimension) {
	        this.dimensionMap[name] = snippet.extend(this.dimensionMap[name] || {}, dimension);
	    },

	    /**
	     * Get bound.
	     * @param {string} name component name
	     * @returns {bound} component bound
	     */
	    getBound: function(name) {
	        return {
	            dimension: this.dimensionMap[name] || {},
	            position: this.positionMap[name] || {}
	        };
	    },

	    /**
	     * Set bound.
	     * @param {string} name component name
	     * @param {bound} bound component bound
	     * @private
	     */
	    _setBound: function(name, bound) {
	        this.dimensionMap[name] = bound.dimension;
	        this.positionMap[name] = bound.position;
	    },

	    /**
	     * Get dimension.
	     * @param {string} name component name
	     * @returns {dimension} component dimension
	     */
	    getDimension: function(name) {
	        return this.dimensionMap[name];
	    },

	    /**
	     * Get dimension map.
	     * @param {string} types - dimension type names
	     * @returns {object}
	     */
	    getDimensionMap: function(types) {
	        var self = this;
	        var dimensionMap = {};

	        if (types && types.length) {
	            snippet.forEachArray(types, function(type) {
	                dimensionMap[type] = self.dimensionMap[type];
	            });
	        } else {
	            dimensionMap = this.dimensionMap;
	        }

	        return JSON.parse(JSON.stringify((dimensionMap)));
	    },

	    /**
	     * Get position.
	     * @param {string} name component name
	     * @returns {position} component position
	     */
	    getPosition: function(name) {
	        return this.positionMap[name];
	    },

	    /**
	     * Register chart dimension
	     * @private
	     */
	    _registerChartDimension: function() {
	        var chartOptions = this.options.chart || {},
	            dimension = {
	                width: chartOptions.width || chartConst.CHART_DEFAULT_WIDTH,
	                height: chartOptions.height || chartConst.CHART_DEFAULT_HEIGHT
	            };

	        this._registerDimension('chart', dimension);
	    },

	    /**
	     * Register title dimension
	     * @private
	     */
	    _registerTitleDimension: function() {
	        var chartOptions = this.options.chart || {};
	        var hasTitleOption = snippet.isExisty(chartOptions.title);
	        var titleTheme = this.theme.title;
	        var titleHeight = hasTitleOption ?
	            raphaelRenderUtil.getRenderedTextSize(
	                chartOptions.title.text,
	                titleTheme.fontSize,
	                titleTheme.fontFamily
	            ).height : 0;
	        var height = titleHeight || 0;

	        if (height) {
	            height += (chartConst.TITLE_PADDING);
	        }

	        this._registerDimension('title', {height: height});
	    },

	    /**
	     * Register chartExportMenu dimension
	     * @private
	     */
	    _registerChartExportMenuDimension: function() {
	        var dimension;

	        if (this.options.chartExportMenu.visible === false) {
	            dimension = {
	                width: 0,
	                height: 0
	            };
	        } else {
	            dimension = {
	                height: chartConst.CHART_EXPORT_MENU_SIZE + chartConst.SERIES_AREA_V_PADDING,
	                width: chartConst.CHART_EXPORT_MENU_SIZE
	            };
	        }
	        this._registerDimension('chartExportMenu', dimension);
	    },

	    /**
	     * Register height for x axis component.
	     */
	    registerXAxisHeight: function() {
	        this._registerDimension('xAxis', {
	            height: axisCalculator.calculateXAxisHeight(this.options.xAxis, this.theme.xAxis)
	        });
	    },

	    /**
	     * Register dimension for legend component.
	     */
	    registerLegendDimension: function() {
	        var legendLabels = snippet.pluck(this.dataProcessor.getOriginalLegendData(), 'label');
	        var legendOptions = this.options.legend;
	        var labelTheme = this.theme.legend.label;
	        var chartWidth = this.getDimension('chart').width;
	        var legendDimension = legendCalculator.calculate(legendOptions, labelTheme, legendLabels, chartWidth);

	        this._registerDimension('legend', legendDimension);
	    },

	    /**
	     * Register dimension for spectrum legend component.
	     * @param {object} limit - min and maximum value
	     */
	    registerSpectrumLegendDimension: function(limit) {
	        var maxValue = limit ? limit.max : this.dataProcessor.getFormattedMaxValue(this.chartType, 'legend');
	        var minValue = limit ? limit.min : '';
	        var labelTheme = this.theme.label;
	        var align = this.options.legend.align;
	        var dimension, isBoxType, isTopLegend;

	        if (predicate.isHorizontalLegend(align)) {
	            isBoxType = predicate.isBoxTypeChart(this.chartType);
	            isTopLegend = predicate.isLegendAlignTop(align);
	            dimension = spectrumLegendCalculator._makeHorizontalDimension(maxValue, labelTheme, isBoxType, isTopLegend);
	        } else {
	            dimension = spectrumLegendCalculator._makeVerticalDimension(maxValue, minValue, labelTheme);
	        }

	        this._registerDimension('legend', dimension);
	        this.useSpectrumLegend = true;
	    },

	    /**
	     * Register dimension for y axis.
	     * @param {object} dimensionInfos - options for calculate dimension
	     *     @param {{min: number, max: number}} dimensionInfos.limit - min, max
	     *     @param {string} dimensionInfos.componentName - component name like yAxis, rightYAxis
	     *     @param {object} dimensionInfos.options - options for y axis
	     *     @param {{title: object, label: object}} dimensionInfos.theme - them for y axis
	     *     @param {Array} dimensionInfos.yAxisLabels - them for y axis
	     *     @param {boolean} dimensionInfos.isVertical - whether vertical or not
	     */
	    registerYAxisDimension: function(dimensionInfos) {
	        var limit = dimensionInfos.limit;
	        var componentName = dimensionInfos.axisName;
	        var options = dimensionInfos.options;
	        var theme = dimensionInfos.theme;
	        var yAxisLabels = dimensionInfos.yAxisLabels;
	        var isVertical = dimensionInfos.isVertical;
	        var isDiverging = this.options.series && this.options.series.diverging;
	        var categories, yAxisOptions;

	        if (limit) {
	            categories = [limit.min, limit.max];
	        } else if (predicate.isHeatmapChart(this.chartType) || !isVertical) {
	            categories = this.dataProcessor.getCategories(true);
	        } else {
	            return;
	        }

	        if (snippet.isArray(options)) {
	            yAxisOptions = (componentName === 'yAxis') ? options[0] : options[1];
	        } else {
	            yAxisOptions = options;
	        }

	        this._registerDimension(componentName, {
	            width: axisCalculator.calculateYAxisWidth(categories, yAxisOptions, theme, yAxisLabels, isDiverging)
	        });
	    },

	    /**
	     * Create series width.
	     * @returns {number} series width
	     */
	    calculateSeriesWidth: function() {
	        var seriesWidth;
	        var maxLabel = this.dataProcessor.getFormattedMaxValue(this.chartType, 'series', 'value');
	        var dimensionMap = this.getDimensionMap(['chart', 'yAxis', 'legend', 'rightYAxis']);
	        var maxLabelWidth = 0;
	        if (!predicate.isColumnTypeChart(this.chartType)) {
	            maxLabelWidth = renderUtil.getRenderedLabelHeight(maxLabel, this.theme.title);
	        }
	        seriesWidth = seriesCalculator.calculateWidth(dimensionMap, this.options.legend, maxLabelWidth);

	        if (predicate.isMapChart(this.chartType) && !IS_LTE_IE8) {
	            seriesWidth -= (chartConst.MAP_CHART_ZOOM_AREA_WIDTH + LEGEND_AREA_H_PADDING);
	        }

	        return seriesWidth;
	    },

	    /**
	     * Create series height
	     * @returns {number} series height
	     */
	    calculateSeriesHeight: function() {
	        var dimensionMap = this.getDimensionMap(['chart', 'title', 'legend', 'xAxis', 'chartExportMenu']);
	        var yAxisTitleAreaHeight = 0;

	        if (this.options.yAxis && this.options.yAxis.title) {
	            yAxisTitleAreaHeight = renderUtil.getRenderedLabelHeight(this.options.yAxis.title, this.theme.title);
	        }

	        return seriesCalculator.calculateHeight(dimensionMap, this.options.legend, yAxisTitleAreaHeight);
	    },

	    getBaseSizeForLimit: function(isVertical) {
	        var baseSize;

	        if (isVertical) {
	            baseSize = this.calculateSeriesHeight();
	        } else {
	            baseSize = this.calculateSeriesWidth();
	        }

	        return baseSize;
	    },

	    /**
	     * Make series dimension.
	     * @returns {{width: number, height: number}} series dimension
	     * @private
	     */
	    _makeSeriesDimension: function() {
	        return {
	            width: this.calculateSeriesWidth(),
	            height: this.calculateSeriesHeight()
	        };
	    },

	    /**
	     * Register series dimension.
	     */
	    registerSeriesDimension: function() {
	        var seriesDimension = this._makeSeriesDimension();

	        this._registerDimension('series', seriesDimension);
	    },

	    /**
	     * Update width of legend and series of BoundsModel.
	     * @param {number} circleLegendWidth - width for circle legend
	     * @param {number} diffWidth - difference width
	     * @private
	     */
	    _updateLegendAndSeriesWidth: function(circleLegendWidth, diffWidth) {
	        var legendOptions = this.options.legend;

	        if (predicate.isVerticalLegend(legendOptions.align) && legendOptions.visible) {
	            this._registerDimension('legend', {
	                width: circleLegendWidth
	            });
	        }

	        this._registerDimension('series', {
	            width: this.getDimension('series').width - diffWidth
	        });
	    },

	    /**
	     * Register dimension of circle legend.
	     * @param {object} axisDataMap - axisData map
	     * @private
	     */
	    registerCircleLegendDimension: function(axisDataMap) {
	        var seriesDimension = this.getDimension('series');
	        var legendOptions = this.options.legend;
	        var maxLabel = this.dataProcessor.getFormattedMaxValue(this.chartType, 'circleLegend', 'r');
	        var fontFamily = this.theme.chart.fontFamily;
	        var circleLegendWidth = circleLegendCalculator.calculateCircleLegendWidth(seriesDimension, axisDataMap,
	            maxLabel, fontFamily);
	        var legendWidth, diffWidth;

	        if (predicate.isVerticalLegend(legendOptions.align) && legendOptions.visible) {
	            legendWidth = this.getDimension('legend').width;
	        } else {
	            legendWidth = 0;
	        }

	        circleLegendWidth = Math.min(circleLegendWidth, Math.max(legendWidth, chartConst.MIN_LEGEND_WIDTH));
	        diffWidth = circleLegendWidth - legendWidth;

	        this._registerDimension('circleLegend', {
	            width: circleLegendWidth,
	            height: circleLegendWidth
	        });

	        /**
	         * the reason why check diffWidth is positive:
	         * if circle legend area is narrower than text legend area, patial text legend area is not showing.
	         * because legend area width is set to circle legend area
	         */
	        if (diffWidth > 0) {
	            /**
	             * If circle legend area is wider than text legend area,
	             * recalculate legend and series width, base on circle legend width
	             */
	            this._updateLegendAndSeriesWidth(circleLegendWidth, diffWidth);
	        }
	    },

	    /**
	     * Make plot dimention
	     * @returns {{width: number, height: number}} plot dimension
	     * @private
	     */
	    _makePlotDimension: function() {
	        var seriesDimension = this.getDimension('series');

	        return {
	            width: seriesDimension.width,
	            height: seriesDimension.height + chartConst.OVERLAPPING_WIDTH
	        };
	    },

	    /**
	     * Register center components dimension.
	     * @private
	     */
	    _registerCenterComponentsDimension: function() {
	        var seriesDimension = this.getDimension('series');

	        this._registerDimension('tooltip', seriesDimension);
	        this._registerDimension('mouseEventDetector', seriesDimension);
	    },

	    /**
	     * Register axis components dimension.
	     * @private
	     */
	    _registerAxisComponentsDimension: function() {
	        var plotDimension = this._makePlotDimension();

	        this._registerDimension('plot', plotDimension);

	        this._registerDimension('xAxis', {
	            width: plotDimension.width
	        });

	        this._registerDimension('yAxis', {
	            height: plotDimension.height
	        });

	        this._registerDimension('rightYAxis', {
	            height: plotDimension.height
	        });
	    },

	    /**
	     * Update width of dimensions.
	     * @param {object} overflowInfo overflowLeft, overflowRight
	     * @private
	     */
	    _updateDimensionsWidth: function(overflowInfo) {
	        var overflowLeft = Math.max(overflowInfo.overflowLeft, 0);
	        var overflowRight = overflowInfo.overflowRight ? Math.max(overflowInfo.overflowRight, 0) : 0;
	        var margin = overflowLeft + overflowRight;

	        this.chartLeftPadding += overflowLeft;
	        this.dimensionMap.plot.width -= margin;
	        this.dimensionMap.series.width -= margin;
	        this.dimensionMap.mouseEventDetector.width -= margin;
	        this.dimensionMap.xAxis.width -= margin;
	    },

	    /**
	     * Update height of dimensions.
	     * @param {number} diffHeight diff height
	     * @private
	     */
	    _updateDimensionsHeight: function(diffHeight) {
	        this.dimensionMap.plot.height -= diffHeight;
	        this.dimensionMap.series.height -= diffHeight;
	        this.dimensionMap.mouseEventDetector.height -= diffHeight;
	        this.dimensionMap.tooltip.height -= diffHeight;
	        this.dimensionMap.yAxis.height -= diffHeight;
	        this.dimensionMap.rightYAxis.height -= diffHeight;
	        this.dimensionMap.xAxis.height += diffHeight;
	    },

	    /**
	     * Update dimensions for label of x axis.
	     * @param {?object} xAxisData - axis data for x axis.
	     * @private
	     */
	    _updateDimensionsForXAxisLabel: function(xAxisData) {
	        if (xAxisData.overflowRight > 0 || xAxisData.overflowLeft > 0) {
	            this._updateDimensionsWidth(xAxisData);
	        }

	        if (xAxisData.overflowHeight) {
	            this._updateDimensionsHeight(xAxisData.overflowHeight);
	        }
	    },

	    /**
	     * Register axes type component positions.
	     * @param {number} leftLegendWidth legend width
	     * @private
	     */
	    _registerAxisComponentsPosition: function(leftLegendWidth) {
	        var seriesPosition = this.getPosition('series'),
	            seriesDimension = this.getDimension('series'),
	            yAxisWidth = this.getDimension('yAxis').width,
	            leftAreaWidth = leftLegendWidth + yAxisWidth + seriesDimension.width;

	        this.positionMap.plot = {
	            top: seriesPosition.top,
	            left: seriesPosition.left
	        };

	        this.positionMap.yAxis = {
	            top: seriesPosition.top,
	            left: this.chartLeftPadding + leftLegendWidth
	        };

	        this.positionMap.xAxis = {
	            top: seriesPosition.top + seriesDimension.height,
	            left: seriesPosition.left
	        };

	        this.positionMap.rightYAxis = {
	            top: seriesPosition.top,
	            left: this.chartLeftPadding + leftAreaWidth - chartConst.OVERLAPPING_WIDTH
	        };
	    },

	    /**
	     * Make legend position.
	     * @returns {{top: number, left: number}} legend bound
	     * @private
	     */
	    _makeLegendPosition: function() {
	        var dimensionMap = this.dimensionMap;
	        var seriesDimension = dimensionMap.series;
	        var seriesPositionTop = this.getPosition('series').top;
	        var legendOption = this.options.legend;
	        var top = 0;
	        var yAxisAreaWidth, left;

	        if (predicate.isHorizontalLegend(legendOption.align)) {
	            left = (this.getDimension('chart').width - this.getDimension('legend').width) / 2;
	            if (predicate.isLegendAlignBottom(legendOption.align)) {
	                top = seriesPositionTop + seriesDimension.height + this.getDimension('xAxis').height + chartConst.SERIES_AREA_V_PADDING;
	            } else {
	                top = seriesPositionTop - dimensionMap.legend.height + chartConst.LEGEND_AREA_V_PADDING;
	            }
	        } else {
	            if (predicate.isLegendAlignLeft(legendOption.align)) {
	                left = this.chartLeftPadding;
	            } else {
	                yAxisAreaWidth = this.getDimension('yAxis').width + this.getDimension('rightYAxis').width;
	                left = this.chartLeftPadding + yAxisAreaWidth + seriesDimension.width;
	            }
	            top = seriesPositionTop + chartConst.SERIES_AREA_V_PADDING;
	        }

	        return {
	            top: top,
	            left: left
	        };
	    },

	    /**
	     * make spectrum legend position
	     * @returns {{top: number, left: number}} legend bound
	     * @private
	     */
	    _makeSpectrumLegendPosition: function() {
	        var legendOption = this.options.legend;
	        var align = this.options.legend.align;
	        var seriesPosition = this.getPosition('series');
	        var seriesDimension = this.getDimension('series');
	        var legendDimension = this.getDimension('legend');
	        var top, left, right, position;

	        if (predicate.isHorizontalLegend(align)) {
	            left = (this.getDimension('chart').width - legendDimension.width) / 2;

	            if (predicate.isLegendAlignTop(align)) {
	                top = seriesPosition.top - legendDimension.height;
	            } else {
	                top = seriesPosition.top + seriesDimension.height + this.getDimension('xAxis').height;
	            }
	        } else {
	            if (predicate.isLegendAlignLeft(legendOption.align)) {
	                left = this.chartLeftPadding;
	            } else {
	                right = this.getDimension('chart').width - this.chartLeftPadding;
	                left = right - this.getDimension('legend').width;
	            }

	            if (predicate.isBoxTypeChart(this.chartType)) {
	                top = seriesPosition.top;
	            } else {
	                top = seriesPosition.top + (chartConst.MAP_CHART_ZOOM_AREA_HEIGHT * 0.75);
	            }
	        }

	        position = {
	            top: top,
	            left: left
	        };

	        if (right) {
	            position.right = right;
	        }

	        return position;
	    },

	    /**
	     * Make chartExportMenu position.
	     * @returns {{top: number, left: number}}
	     * @private
	     */
	    _makeChartExportMenuPosition: function() {
	        var top = this.getPosition('series').top - chartConst.SERIES_AREA_V_PADDING - chartConst.CHART_EXPORT_MENU_SIZE;

	        return {
	            top: top,
	            right: chartConst.CHART_PADDING
	        };
	    },

	    /**
	     * Make CircleLegend position.
	     * @returns {{top: number, left: number}}
	     * @private
	     */
	    _makeCircleLegendPosition: function() {
	        var seriesPosition = this.getPosition('series');
	        var seriesDimension = this.getDimension('series');
	        var circleDimension = this.getDimension('circleLegend');
	        var legendOptions = this.options.legend;
	        var left, legendWidth;

	        if (predicate.isLegendAlignLeft(legendOptions.align)) {
	            left = 0;
	        } else {
	            left = seriesPosition.left + seriesDimension.width;
	        }

	        if (predicate.isVerticalLegend(legendOptions.align) && legendOptions.visible) {
	            legendWidth = this.getDimension('legend').width + chartConst.CHART_PADDING;
	            left += (legendWidth - circleDimension.width) / 2;
	        }

	        return {
	            top: seriesPosition.top + seriesDimension.height - circleDimension.height,
	            left: left
	        };
	    },

	    /**
	     * Whether need expansion series or not.
	     * @returns {boolean}
	     * @private
	     */
	    _isNeedExpansionSeries: function() {
	        var chartType = this.chartType;

	        return !(predicate.isPieChart(chartType) || predicate.isMapChart(chartType))
	            && !predicate.isTreemapChart(chartType)
	            && !predicate.isRadialChart(chartType)
	            && !predicate.isPieDonutComboChart(chartType, this.seriesTypes);
	    },

	    /**
	     * Register essential components positions.
	     * Essential components is all components except components for axis.
	     * @private
	     */
	    _registerEssentialComponentsPositions: function() {
	        var seriesPosition = this.getPosition('series');
	        var tooltipPosition;

	        this.positionMap.mouseEventDetector = snippet.extend({}, seriesPosition);
	        this.positionMap.legend
	            = this.useSpectrumLegend ? this._makeSpectrumLegendPosition() : this._makeLegendPosition();
	        this.positionMap.chartExportMenu = this._makeChartExportMenuPosition();

	        if (this.getDimension('circleLegend').width) {
	            this.positionMap.circleLegend = this._makeCircleLegendPosition();
	        }

	        if (this._isNeedExpansionSeries()) {
	            tooltipPosition = {
	                top: seriesPosition.top - chartConst.SERIES_EXPAND_SIZE,
	                left: seriesPosition.left - chartConst.SERIES_EXPAND_SIZE
	            };
	        } else {
	            tooltipPosition = seriesPosition;
	        }

	        this.positionMap.tooltip = tooltipPosition;
	    },

	    /**
	     * Register positions.
	     * @private
	     */
	    _registerPositions: function() {
	        var alignOption = this.options.legend.align;
	        var isVisibleLegend = this.options.legend.visible;
	        var legendDimension = this.getDimension('legend');
	        var topLegendHeight = (predicate.isLegendAlignTop(alignOption) && isVisibleLegend) ? legendDimension.height : 0;
	        var leftLegendWidth = (predicate.isLegendAlignLeft(alignOption) && isVisibleLegend) ? legendDimension.width : 0;
	        var titleOrExportMenuHeight = Math.max(this.getDimension('title').height, this.getDimension('chartExportMenu').height);
	        var yAxisTitlePadding = (this.options.yAxis.title && !this.useSpectrumLegend) ?
	            ((renderUtil.getRenderedLabelHeight(this.options.yAxis.title, this.theme.yAxis.title)
	                + chartConst.Y_AXIS_TITLE_PADDING)) : 0;
	        var seriesTop = (titleOrExportMenuHeight
	            + Math.max(0, (Math.max(topLegendHeight, yAxisTitlePadding) - chartConst.TITLE_PADDING)));
	        var seriesPosition = {};

	        if (!titleOrExportMenuHeight) {
	            seriesTop = Math.max(topLegendHeight, yAxisTitlePadding);
	        }

	        seriesPosition = {
	            top: seriesTop + chartConst.CHART_PADDING,
	            left: this.chartLeftPadding + leftLegendWidth + this.getDimension('yAxis').width
	        };

	        this.positionMap.series = seriesPosition;

	        if (this.hasAxes) {
	            this._registerAxisComponentsPosition(leftLegendWidth);
	        }

	        this._registerEssentialComponentsPositions();
	    },

	    /**
	     * Register bound of extended series for rendering.
	     * @private
	     */
	    _registerExtendedSeriesBound: function() {
	        var seriesBound = this.getBound('series');
	        if (this._isNeedExpansionSeries()) {
	            seriesBound = renderUtil.expandBound(seriesBound);
	        }

	        this._setBound('extendedSeries', seriesBound);
	    },

	    /**
	     * Update bounds(positions, dimensions) of components for center option of yAxis.
	     * @private
	     */
	    _updateBoundsForYAxisCenterOption: function() {
	        var yAxisWidth = this.getDimension('yAxis').width;
	        var yAxisExtensibleLeft = Math.floor((this.getDimension('series').width / 2)) + chartConst.OVERLAPPING_WIDTH;
	        var xAxisDecreasingLeft = yAxisWidth - chartConst.OVERLAPPING_WIDTH;
	        var additionalLeft = renderUtil.isOldBrowser() ? 1 : 0;

	        this.dimensionMap.extendedSeries.width += yAxisWidth;
	        this.dimensionMap.xAxis.width += chartConst.OVERLAPPING_WIDTH;
	        this.dimensionMap.plot.width += yAxisWidth + chartConst.OVERLAPPING_WIDTH;
	        this.dimensionMap.mouseEventDetector.width += yAxisWidth;
	        this.dimensionMap.tooltip.width += yAxisWidth;

	        this.positionMap.series.left -= (yAxisWidth - additionalLeft);
	        this.positionMap.extendedSeries.left -= (xAxisDecreasingLeft - additionalLeft);
	        this.positionMap.plot.left -= xAxisDecreasingLeft;
	        this.positionMap.yAxis.left += yAxisExtensibleLeft;
	        this.positionMap.xAxis.left -= xAxisDecreasingLeft;
	        this.positionMap.mouseEventDetector.left -= xAxisDecreasingLeft;
	        this.positionMap.tooltip.left -= xAxisDecreasingLeft;
	    },

	    /**
	     * Register bounds data.
	     * @param {?object} xAxisData - axis data for x axis.
	     */
	    registerBoundsData: function(xAxisData) {
	        this._registerCenterComponentsDimension();

	        if (this.useSpectrumLegend) {
	            this._updateDimensionsForSpectrumLegend();
	        }

	        if (this.hasAxes) {
	            this._registerAxisComponentsDimension();
	            this._updateDimensionsForXAxisLabel(xAxisData);
	        }

	        this._registerPositions();
	        this._registerExtendedSeriesBound();

	        if (this.options.yAxis.isCenter) {
	            this._updateBoundsForYAxisCenterOption();
	        }
	    },

	    /**
	     * Update spectrum legend dimension, to prevent overflow
	     * @private
	     */
	    _updateDimensionsForSpectrumLegend: function() {
	        var legendAlignOption = this.options.legend.align;
	        var legendDimension = this.getDimension('legend');
	        var seriesDimension = this.getDimension('series');

	        if (predicate.isHorizontalLegend(legendAlignOption) &&
	            (legendDimension.width > seriesDimension.width)) {
	            legendDimension.width = seriesDimension.width;
	        } else if (predicate.isVerticalLegend(legendAlignOption)) {
	            if (predicate.isBoxTypeChart(this.chartType)) {
	                legendDimension.height = seriesDimension.height;
	            } else if (legendDimension.height > (seriesDimension.height - chartConst.MAP_CHART_ZOOM_AREA_HEIGHT)) {
	                legendDimension.height = seriesDimension.height - chartConst.MAP_CHART_ZOOM_AREA_HEIGHT;
	            }
	        }
	    },

	    /**
	     * Calculate max radius.
	     * @param {object} axisDataMap - axisData map
	     * @returns {number}
	     */
	    calculateMaxRadius: function(axisDataMap) {
	        var dimensionMap = this.getDimensionMap(['series', 'circleLegend']);
	        var circleLegendVisible = this.options.circleLegend ? this.options.circleLegend.visible : false;

	        return circleLegendCalculator.calculateMaxRadius(dimensionMap, axisDataMap, circleLegendVisible);
	    }
	});

	module.exports = BoundsModel;


/***/ }),
/* 114 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileoverview Calculator for circle legend.
	 * @author NHN Ent.
	 *         FE Development Lab <dl_javascript@nhnent.com>
	 */

	'use strict';

	var chartConst = __webpack_require__(8);
	var renderUtil = __webpack_require__(7);

	/**
	 * Calculator for circle legend.
	 * @module circleLegendCalculator
	 * @private */
	var circleLegendCalculator = {
	    /**
	     * Calculate step of pixel unit.
	     * @param {{tickCount: number, isLabelAxis: boolean}} axisData - data for rendering axis
	     * @param {number} size - width or height of series area
	     * @returns {number}
	     * @private
	     */
	    _calculatePixelStep: function(axisData, size) {
	        var tickCount = axisData.tickCount;
	        var pixelStep;

	        if (axisData.isLabelAxis) {
	            pixelStep = size / tickCount / 2;
	        } else {
	            pixelStep = size / (tickCount - 1);
	        }

	        return parseInt(pixelStep, 10);
	    },

	    /**
	     * Calculate radius by axis data.
	     * @param {{width: number, height: number}} seriesDimension - dimension for series
	     * @param {{xAxis: object, yAxis: object}} axisDataMap - axis data map
	     * @returns {number}
	     * @private
	     */
	    _calculateRadiusByAxisData: function(seriesDimension, axisDataMap) {
	        var yPixelStep = this._calculatePixelStep(axisDataMap.yAxis, seriesDimension.height);
	        var xPixelStep = this._calculatePixelStep(axisDataMap.xAxis, seriesDimension.width);

	        return Math.min(yPixelStep, xPixelStep);
	    },

	    /**
	     * Get max width of label for CircleLegend.
	     * @param {string} maxLabel - maximum label
	     * @param {string} fontFamily - fontFamily for legend
	     * @returns {number}
	     * @private
	     */
	    _getCircleLegendLabelMaxWidth: function(maxLabel, fontFamily) {
	        return renderUtil.getRenderedLabelWidth(maxLabel, {
	            fontSize: chartConst.CIRCLE_LEGEND_LABEL_FONT_SIZE,
	            fontFamily: fontFamily
	        });
	    },

	    /**
	     * Calculate width for circle legend.
	     * @param {{width: number, height: number}} seriesDimension - dimension for series
	     * @param {{xAxis: object, yAxis: object}} axisDataMap - axis data map
	     * @param {string} maxLabel - maximum label
	     * @param {string} fontFamily - fontFamily for legend
	     * @returns {number}
	     * @private
	     */
	    calculateCircleLegendWidth: function(seriesDimension, axisDataMap, maxLabel, fontFamily) {
	        var maxRadius = this._calculateRadiusByAxisData(seriesDimension, axisDataMap);
	        var maxLabelWidth = this._getCircleLegendLabelMaxWidth(maxLabel, fontFamily);

	        return Math.max((maxRadius * 2), maxLabelWidth) + chartConst.CIRCLE_LEGEND_PADDING;
	    },

	    /**
	     * Calculate max radius.
	     * @param {{series: {width: number, height: number}, circleLegend: {width: number}}} dimensionMap - dimension map
	     * @param {{xAxis: object, yAxis: object}} axisDataMap - axis data map
	     * @param {boolean} [circleLegendVisible] - circleLegend visible option
	     * @returns {number}
	     * @private
	     */
	    calculateMaxRadius: function(dimensionMap, axisDataMap, circleLegendVisible) {
	        var maxRadius = this._calculateRadiusByAxisData(dimensionMap.series, axisDataMap);
	        var circleLegendWidth = dimensionMap.circleLegend.width;

	        if (!circleLegendVisible) {
	            return maxRadius;
	        }

	        return Math.min((circleLegendWidth - chartConst.CIRCLE_LEGEND_PADDING) / 2, maxRadius);
	    }
	};

	module.exports = circleLegendCalculator;


/***/ }),
/* 115 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileoverview Calculator for dimension of axis.
	 * @author NHN Ent.
	 *         FE Development Lab <dl_javascript@nhnent.com>
	 */

	'use strict';

	var chartConst = __webpack_require__(8);
	var predicate = __webpack_require__(21);
	var renderUtil = __webpack_require__(7);

	/**
	 * Calculator for dimension of axis.
	 * @module axisCalculator
	 * @private */
	var axisCalculator = {
	    /**
	     * Calculate height for x axis.
	     * @param {{title: string, labelMargin: number}} options - title and label margin option for x axis
	     * @param {{title: object, label: object}} theme - theme for x axis
	     * @returns {*}
	     */
	    calculateXAxisHeight: function(options, theme) {
	        var title = options.title;
	        var titleHeight = title ? renderUtil.getRenderedLabelHeight(title.text, theme.title) : 0;
	        var titleAreaHeight = titleHeight ? (titleHeight + chartConst.X_AXIS_TITLE_PADDING) : 0;
	        var labelMargin = options.labelMargin || 0;
	        var labelHeight = renderUtil.getRenderedLabelHeight(chartConst.MAX_HEIGHT_WORD, theme.label);
	        var height = titleAreaHeight + chartConst.X_AXIS_LABEL_PADDING;

	        if (labelMargin > 0) {
	            height += labelMargin;
	        }

	        if (options.showLabel !== false) {
	            height += labelHeight;
	        }

	        return height;
	    },

	    /**
	     * Calculate width for y axis.
	     * @param {Array.<string | number>} labels labels
	     * @param {{title: ?string, isCenter: ?boolean}} options - options
	     * @param {{title: object, label: object}} theme - theme for y axis calculate
	     * @param {Array} yAxisLabels - yAxis labels for y axis calculate
	     * @param {boolean} isDiverging - whether is diverging chart or not
	     * @returns {number}
	     */
	    calculateYAxisWidth: function(labels, options, theme, yAxisLabels, isDiverging) {
	        var labelMargin = options.labelMargin;
	        var width = 0;
	        var titleWidth = 0;
	        var maxLabelWidth = 0;

	        labels = renderUtil.addPrefixSuffix(labels, options.prefix, options.suffix);
	        yAxisLabels = renderUtil.addPrefixSuffix(yAxisLabels, options.prefix, options.suffix);

	        if (options.isCenter) {
	            width += chartConst.Y_AXIS_LABEL_PADDING;
	        }

	        if (predicate.isDatetimeType(options.type)) {
	            labels = renderUtil.formatDates(labels, options.dateFormat);
	            yAxisLabels = renderUtil.formatDates(yAxisLabels, options.dateFormat);
	        }
	        if (labelMargin && labelMargin > 0) {
	            width += labelMargin;
	        }
	        labels = yAxisLabels.length ? yAxisLabels : labels;
	        if (options.showLabel !== false) {
	            maxLabelWidth = renderUtil.getRenderedLabelsMaxWidth(labels, theme.label);
	        }
	        if (options.title) {
	            titleWidth = renderUtil.getRenderedLabelWidth(options.title.text, theme.title);
	        }

	        width += ((isDiverging ? Math.max(maxLabelWidth, titleWidth) : maxLabelWidth) +
	            chartConst.Y_AXIS_LABEL_PADDING);

	        return width;
	    }
	};

	module.exports = axisCalculator;


/***/ }),
/* 116 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileoverview Calculator for dimension of legend.
	 * @author NHN Ent.
	 *         FE Development Lab <dl_javascript@nhnent.com>
	 */

	'use strict';

	var snippet = __webpack_require__(6);
	var chartConst = __webpack_require__(8);
	var predicate = __webpack_require__(21);
	var calculator = __webpack_require__(45);
	var renderUtil = __webpack_require__(7);
	var arrayUtil = __webpack_require__(10);

	var LEGEND_CHECKBOX_SIZE = chartConst.LEGEND_CHECKBOX_SIZE;
	var LEGEND_ICON_WIDTH = chartConst.LEGEND_ICON_WIDTH;
	var LEGEND_LABEL_LEFT_PADDING = chartConst.LEGEND_LABEL_LEFT_PADDING;
	var VERTICAL_LEGEND_LABEL_RIGHT_PADDING = chartConst.LEGEND_V_LABEL_RIGHT_PADDING;
	var HORIZONTAL_LEGEND_LABEL_RIGHT_PADDING = chartConst.LEGEND_H_LABEL_RIGHT_PADDING;
	var LEGEND_AREA_H_PADDING = chartConst.LEGEND_AREA_H_PADDING;

	/**
	 * Calculator for dimension of legend.
	 * @module legendCalculator
	 * @private */
	var legendCalculator = {
	    /**
	     * Calculate sum of legends width.
	     * @param {Array.<string>} labels - legend labels
	     * @param {{fontSize: number, fontFamily: number}} labelTheme - legend label theme
	     * @param {number} checkboxWidth - width for checkbox
	     * @param {?number} [maxWidth] - user option legend maxWidth
	     * @returns {number}
	     * @private
	     */
	    _calculateLegendsWidthSum: function(labels, labelTheme, checkboxWidth, maxWidth) {
	        var restWidth = LEGEND_AREA_H_PADDING + checkboxWidth +
	            LEGEND_ICON_WIDTH + LEGEND_LABEL_LEFT_PADDING;
	        var legendWidth = calculator.sum(snippet.map(labels, function(label) {
	            var labelWidth = renderUtil.getRenderedLabelWidth(label, labelTheme);

	            if (maxWidth && labelWidth > maxWidth) {
	                labelWidth = maxWidth;
	            }
	            labelWidth += restWidth;

	            return labelWidth + HORIZONTAL_LEGEND_LABEL_RIGHT_PADDING;
	        }));

	        legendWidth = legendWidth - HORIZONTAL_LEGEND_LABEL_RIGHT_PADDING + LEGEND_AREA_H_PADDING;

	        return legendWidth;
	    },

	    /**
	     * Divide legend labels.
	     * @param {Array.<string>} labels legend labels
	     * @param {number} count division count
	     * @returns {Array.<Array.<string>>}
	     * @private
	     */
	    _divideLegendLabels: function(labels, count) {
	        var limitCount = Math.round(labels.length / count);
	        var results = [];
	        var temp = [];

	        snippet.forEachArray(labels, function(label) {
	            if (temp.length < limitCount) {
	                temp.push(label);
	            } else {
	                results.push(temp);
	                temp = [label];
	            }
	        });

	        if (temp.length) {
	            results.push(temp);
	        }

	        return results;
	    },

	    /**
	     * Get max line width.
	     * @param {Array.<string>} dividedLabels - divided labels
	     * @param {{fontFamily: ?string, fontSize: ?string}} labelTheme - label theme
	     * @param {number} checkboxWidth - width for checkbox
	     * @param {?number} [maxWidth] - user option legend maxWidth
	     * @returns {number}
	     * @private
	     */
	    _getMaxLineWidth: function(dividedLabels, labelTheme, checkboxWidth, maxWidth) {
	        var self = this;
	        var lineWidths = snippet.map(dividedLabels, function(labels) {
	            return self._calculateLegendsWidthSum(labels, labelTheme, checkboxWidth, maxWidth);
	        });

	        return arrayUtil.max(lineWidths);
	    },

	    /**
	     * Make divided labels and max line width.
	     * @param {Array.<string>} labels legend labels
	     * @param {number} chartWidth chart width
	     * @param {{fontSize: number, fontFamily: number}} labelTheme legend label theme
	     * @param {number} checkboxWidth - width for checkbox
	     * @param {?number} [maxWidth] - user option legend maxWidth
	     * @returns {{dividedLabels: Array.<Array.<string>>, maxLineWidth: number}}
	     * @private
	     */
	    _makeDividedLabelsAndMaxLineWidth: function(labels, chartWidth, labelTheme, checkboxWidth, maxWidth) {
	        var divideCount = 1;
	        var maxLineWidth = 0;
	        var prevMaxWidth = 0;
	        var dividedLabels, prevLabels;

	        do {
	            dividedLabels = this._divideLegendLabels(labels, divideCount);
	            maxLineWidth = this._getMaxLineWidth(dividedLabels, labelTheme, checkboxWidth, maxWidth);

	            if (prevMaxWidth === maxLineWidth) {
	                dividedLabels = prevLabels;
	                break;
	            }

	            prevMaxWidth = maxLineWidth;
	            prevLabels = dividedLabels;
	            divideCount += 1;
	        } while (maxLineWidth >= chartWidth);

	        return {
	            labels: dividedLabels,
	            maxLineWidth: maxLineWidth
	        };
	    },

	    /**
	     * Calculate height of horizontal legend.
	     * @param {Array.<Array.<string>>} dividedLabels - divided labels
	     * @param {{fontSize: number, fontFamily: number}} labelTheme - label theme for legend
	     * @returns {number}
	     * @private
	     */
	    _calculateHorizontalLegendHeight: function(dividedLabels, labelTheme) {
	        var heightByLabel = Math.max.apply(null, snippet.map(dividedLabels, function(labels) {
	            return renderUtil.getRenderedLabelsMaxHeight(labels, labelTheme);
	        }));
	        var labelItemHeightWithPaddingTop =
	            Math.max(chartConst.LEGEND_CHECKBOX_SIZE, heightByLabel) + chartConst.LINE_MARGIN_TOP;
	        var legendHeight = ((labelItemHeightWithPaddingTop * dividedLabels.length) - chartConst.LINE_MARGIN_TOP
	             + chartConst.SERIES_AREA_V_PADDING);

	        return legendHeight;
	    },

	    /**
	     * Make dimension of horizontal legend.
	     * @param {{fontSize: number, fontFamily: number}} labelTheme - label theme for legend
	     * @param {Array.<string>} legendLabels - labels for legend
	     * @param {number} chartWidth - chart width
	     * @param {number} checkboxWidth - width for checkbox
	     * @param {?number} [maxWidth] - user option legend maxWidth
	     * @returns {{width: number, height: (number)}}
	     * @private
	     */
	    _makeHorizontalDimension: function(labelTheme, legendLabels, chartWidth, checkboxWidth, maxWidth) {
	        var dividedInfo = this._makeDividedLabelsAndMaxLineWidth(
	            legendLabels, chartWidth, labelTheme, checkboxWidth, maxWidth
	        );
	        var horizontalLegendHeight = this._calculateHorizontalLegendHeight(dividedInfo.labels, labelTheme);
	        var legendHeight = horizontalLegendHeight + chartConst.SERIES_AREA_V_PADDING;

	        return {
	            width: Math.max(dividedInfo.maxLineWidth, chartConst.MIN_LEGEND_WIDTH),
	            height: legendHeight
	        };
	    },

	    /**
	     * Make dimension of vertical legend.
	     * @param {{fontSize: number, fontFamily: number}} labelTheme - label theme for legend
	     * @param {Array.<string>} legendLabels - labels for legend
	     * @param {number} checkboxWidth - width for checkbox
	     * @param {?number} [maxWidth] - user option legend maxWidth
	     * @returns {{width: (number)}}
	     * @private
	     */
	    _makeVerticalDimension: function(labelTheme, legendLabels, checkboxWidth, maxWidth) {
	        var labelWidth = renderUtil.getRenderedLabelsMaxWidth(legendLabels, labelTheme);
	        var legendWidth = 0;
	        if (maxWidth && labelWidth > maxWidth) {
	            labelWidth = maxWidth;
	        }
	        legendWidth = (LEGEND_AREA_H_PADDING * 2) + checkboxWidth +
	            LEGEND_ICON_WIDTH + LEGEND_LABEL_LEFT_PADDING + labelWidth + VERTICAL_LEGEND_LABEL_RIGHT_PADDING;

	        return {
	            width: legendWidth,
	            height: 0
	        };
	    },

	    /**
	     * Calculate legend dimension.
	     * @param {{showCheckbox: boolean, visible: boolean, align: string}} options - options for legend
	     * @param {{fontSize: number, fontFamily: number}} labelTheme - label theme for legend
	     * @param {Array.<string>} legendLabels - labels for legend
	     * @param {number} chartWidth chart width
	     * @returns {{width: number, height: number}}
	     */
	    calculate: function(options, labelTheme, legendLabels, chartWidth) {
	        var checkboxWidth = options.showCheckbox === false ? 0 : LEGEND_CHECKBOX_SIZE + LEGEND_LABEL_LEFT_PADDING;
	        var maxWidth = options.maxWidth;
	        var dimension = {};

	        if (!options.visible) {
	            dimension.width = 0;
	        } else if (predicate.isHorizontalLegend(options.align)) {
	            dimension = this._makeHorizontalDimension(
	                labelTheme, legendLabels, chartWidth, checkboxWidth, maxWidth
	            );
	        } else {
	            dimension = this._makeVerticalDimension(labelTheme, legendLabels, checkboxWidth, maxWidth);
	        }

	        return dimension;
	    }
	};

	module.exports = legendCalculator;


/***/ }),
/* 117 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileoverview Calculator for series.
	 * @author NHN Ent.
	 *         FE Development Lab <dl_javascript@nhnent.com>
	 */

	'use strict';

	var chartConst = __webpack_require__(8);
	var predicate = __webpack_require__(21);

	/**
	 * Calculator for series.
	 * @module seriesCalculator
	 * @private */
	var seriesCalculator = {
	    /**
	     * Calculate width.
	     * @param {{
	     *      chart: {width: number},
	     *      yAxis: {width: number},
	     *      legend: {width: number},
	     *      rightYAxis: ?{width: number}
	     * }} dimensionMap - dimension map
	     * @param {{align: ?string, visible: boolean}} legendOptions - legend options
	     * @param {number} maxLabelWidth - max label width
	     * @returns {number} series width
	     */
	    calculateWidth: function(dimensionMap, legendOptions, maxLabelWidth) {
	        var chartWidth = dimensionMap.chart.width;
	        var yAxisAreaWidth = dimensionMap.yAxis.width + dimensionMap.rightYAxis.width;
	        var legendDimension = dimensionMap.legend;
	        var legendWidth = 0;
	        var xAxisLabelPadding = 0;

	        if (predicate.isVerticalLegend(legendOptions.align) && legendOptions.visible) {
	            legendWidth = legendDimension ? legendDimension.width : 0;
	        }

	        if (!legendWidth && !dimensionMap.rightYAxis.width && maxLabelWidth) {
	            xAxisLabelPadding = maxLabelWidth / 2;
	        }

	        return chartWidth - (chartConst.CHART_PADDING * 2) - yAxisAreaWidth - legendWidth - xAxisLabelPadding;
	    },

	    /**
	     * Calculate height.
	     * @param {{
	     *      chart: {height: number},
	     *      title: {height: number},
	     *      legend: {height: number},
	     *      xAxis: {height: number}
	     * }} dimensionMap - dimension map
	     * @param {{align: ?string, visible: boolean}} legendOptions - legend options
	     * @param {number} yAxisTitleAreaHeight - yAxis title area height
	     * @returns {number} series height
	     */
	    calculateHeight: function(dimensionMap, legendOptions, yAxisTitleAreaHeight) {
	        var chartHeight = dimensionMap.chart.height;
	        var titleHeight = dimensionMap.title.height;
	        var hasTitle = titleHeight > 0;
	        var chartExportMenuHeight = dimensionMap.chartExportMenu.height;
	        var topAreaHeight = Math.max(dimensionMap.title.height, chartExportMenuHeight);
	        var bottomAreaHeight = dimensionMap.xAxis.height;
	        var legendHeight = legendOptions.visible ? dimensionMap.legend.height : 0;
	        var topLegendHeight = predicate.isLegendAlignTop(legendOptions.align) ? legendHeight : 0;
	        var topAreaExceptTitleHeight = Math.max(yAxisTitleAreaHeight, topLegendHeight);

	        if (hasTitle) {
	            topAreaHeight = titleHeight + Math.max(0, topAreaExceptTitleHeight - chartConst.TITLE_PADDING);
	        } else {
	            topAreaHeight = Math.max(chartExportMenuHeight, topAreaExceptTitleHeight);
	        }

	        bottomAreaHeight += (predicate.isLegendAlignBottom(legendOptions.align) ? legendHeight : 0);

	        return chartHeight - (chartConst.CHART_PADDING * 2) - topAreaHeight - bottomAreaHeight;
	    }
	};

	module.exports = seriesCalculator;


/***/ }),
/* 118 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileoverview Calculator for spectrum legend.
	 * @author NHN Ent.
	 *         FE Development Lab <dl_javascript@nhnent.com>
	 */

	'use strict';

	var chartConst = __webpack_require__(8);
	var renderUtil = __webpack_require__(7);

	/**
	 * Calculator for spectrum legend.
	 * @module spectrumLegendCalculator
	 * @private */
	var spectrumLegendCalculator = {
	    /**
	     * Make vertical dimension.
	     * @param {string} maxValue - formatted max value
	     * @param {string} minValue - formatted min value
	     * @param {object} labelTheme - theme for label
	     * @returns {{width: number, height: number}}
	     * @private
	     */
	    _makeVerticalDimension: function(maxValue, minValue, labelTheme) {
	        var maxValueLabelWidth = renderUtil.getRenderedLabelWidth(maxValue, labelTheme);
	        var minValueLabelWidth = renderUtil.getRenderedLabelWidth(minValue, labelTheme);
	        var labelWidth = renderUtil.getRenderedLabelWidth(maxValue, labelTheme);
	        var tooltipWidth = (chartConst.MAP_LEGEND_TOOLTIP_HORIZONTAL_PADDING * 2)
	            + labelWidth + chartConst.MAP_LEGEND_WEDGE_SIZE;

	        return {
	            width: chartConst.MAP_LEGEND_AREA_PADDING_WIDE
	                + tooltipWidth
	                + chartConst.MAP_LEGEND_PADDING_BTW_GRAPH_AND_WEDGE
	                + chartConst.MAP_LEGEND_GRAPH_SIZE
	                + chartConst.MAP_LEGEND_LABEL_PADDING
	                + Math.max(maxValueLabelWidth, minValueLabelWidth),
	            height: chartConst.VERTICAL_MAP_LEGEND_HEIGHT
	        };
	    },

	    /**
	     * Make horizontal dimension.
	     * @param {string} maxValue - formatted max value
	     * @param {object} labelTheme - theme for label
	     * @param {boolean} isBoxType - whether use narrow padding or not
	     * @param {boolean} isTopLegend - whether use top legend or not
	     * @returns {{width: number, height: number}}
	     * @private
	     */
	    _makeHorizontalDimension: function(maxValue, labelTheme, isBoxType, isTopLegend) {
	        var labelHeight = renderUtil.getRenderedLabelHeight(maxValue, labelTheme);
	        var tooltipHeight = (chartConst.MAP_LEGEND_TOOLTIP_VERTICAL_PADDING * 2)
	            + labelHeight + chartConst.MAP_LEGEND_WEDGE_SIZE;
	        var padding = isBoxType ?
	            chartConst.MAP_LEGEND_AREA_PADDING_NARROW :
	            chartConst.MAP_LEGEND_AREA_PADDING_WIDE;
	        var additionalTopPadding = isTopLegend ? chartConst.MAP_LEGEND_AREA_PADDING_WIDE : 0;

	        return {
	            width: chartConst.HORIZONTAL_MAP_LEGEND_WIDTH,
	            height: padding
	                + tooltipHeight
	                + chartConst.MAP_LEGEND_PADDING_BTW_GRAPH_AND_WEDGE
	                + chartConst.MAP_LEGEND_GRAPH_SIZE
	                + chartConst.MAP_LEGEND_LABEL_PADDING
	                + labelHeight
	                + chartConst.MAP_LEGEND_LABEL_PADDING
	                + additionalTopPadding
	        };
	    }
	};

	module.exports = spectrumLegendCalculator;


/***/ }),
/* 119 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var scaleDataMaker = __webpack_require__(120);
	var scaleLabelFormatter = __webpack_require__(122);
	var axisDataMaker = __webpack_require__(123);
	var predicate = __webpack_require__(21);
	var renderUtil = __webpack_require__(7);
	var snippet = __webpack_require__(6);

	var ScaleDataModel = snippet.defineClass(/** @lends ScaleDataModel.prototype */{
	    /**
	     * ScaleDataModel is scale model for scale data and axis data.
	     * @param {object} params - parameters
	     * @constructs ScaleDataModel
	     * @private
	     */
	    init: function(params) {
	        this.chartType = params.chartType;
	        this.seriesTypes = params.seriesTypes;
	        this.dataProcessor = params.dataProcessor;
	        this.boundsModel = params.boundsModel;
	        this.options = params.options;
	        this.theme = params.theme;
	        this.hasRightYAxis = !!params.hasRightYAxis;
	        this.prevValidLabelCount = null;

	        this.initScaleData(params.addedDataCount);
	        this.initForAutoTickInterval();
	    },

	    /**
	     * Initialize scale data.
	     * @param {?number} addedDataCount - increased added count by dynamic adding data
	     */
	    initScaleData: function(addedDataCount) {
	        this.scaleDataMap = {};
	        this.axisDataMap = {};
	        this.addedDataCount = addedDataCount;
	    },

	    /**
	     * Initialize for auto tick interval.
	     */
	    initForAutoTickInterval: function() {
	        this.firstTickCount = null;
	    },

	    /**
	     * Pick limit option.
	     * @param {{min: ?number, max: ?number}} axisOptions - axis options
	     * @returns {{min: ?number, max: ?number}}
	     * @private
	     */
	    _pickLimitOption: function(axisOptions) {
	        axisOptions = axisOptions || {};

	        return {
	            min: axisOptions.min,
	            max: axisOptions.max
	        };
	    },

	    /**
	     * Create base scale data.
	     * @param {{
	     *      chartType: string,
	     *      areaType: string,
	     *      valueType: string
	     * }} typeMap - type map
	     * @param {{
	     *      type: string,
	     *      stackType: string,
	     *      diverging: boolean
	     * }} baseOptions - base options
	     * @param {object} axisOptions - axis options
	     * @param {object} additionalOptions - additional options
	     * @returns {{limit: {min: number, max: number}, step: number}}
	     * @private
	     */
	    _createBaseScaleData: function(typeMap, baseOptions, axisOptions, additionalOptions) {
	        var chartType = typeMap.chartType;
	        var isVertical = typeMap.areaType !== 'xAxis';
	        var baseValues = this.dataProcessor.createBaseValuesForLimit(
	            chartType, additionalOptions.isSingleYAxis, baseOptions.stackType, typeMap.valueType, typeMap.areaType);
	        var baseSize = this.boundsModel.getBaseSizeForLimit(isVertical);
	        var options = snippet.extend(baseOptions, {
	            isVertical: isVertical,
	            limitOption: this._pickLimitOption(axisOptions),
	            tickCounts: additionalOptions.tickCounts
	        });

	        if (predicate.isBubbleChart(chartType)) {
	            options.overflowItem = this.dataProcessor.findOverflowItem(chartType, typeMap.valueType);
	        }

	        if (predicate.isMapChart(chartType) ||
	            predicate.isHeatmapChart(chartType) ||
	            predicate.isTreemapChart(chartType)) {
	            options.useSpectrumLegend = true;
	        }

	        return scaleDataMaker.makeScaleData(baseValues, baseSize, chartType, options);
	    },

	    /**
	     * Create scale labels.
	     * @param {{limit: {min: number, max: number}, step: number}} baseScaleData - base scale data
	     * @param {{
	     *      chartType: string,
	     *      areaType: string,
	     *      valueType: string
	     * }} typeMap - type map
	     * @param {{
	     *      type: string,
	     *      stackType: string,
	     *      diverging: boolean
	     * }} baseOptions - base options
	     * @param {string} dateFormat - date format
	     * @returns {Array.<string>}
	     * @private
	     */
	    _createScaleLabels: function(baseScaleData, typeMap, baseOptions, dateFormat) {
	        var formatFunctions = this.dataProcessor.getFormatFunctions();
	        var options = snippet.extend(baseOptions, {
	            dateFormat: dateFormat
	        });

	        return scaleLabelFormatter.createFormattedLabels(baseScaleData, typeMap, options, formatFunctions);
	    },

	    /**
	     * Create scale.
	     * @param {object} axisOptions - axis options
	     * @param {{chartType: string, areaType: string, valueType: string}} typeMap - type map
	     * @param {?object} additionalOptions - additional options
	     * @returns {object}
	     * @private
	     */
	    _createScaleData: function(axisOptions, typeMap, additionalOptions) {
	        var seriesOptions = this.options.series;
	        var chartType = typeMap.chartType || this.chartType;
	        var baseOptions, baseScaleData;

	        typeMap.chartType = chartType;
	        seriesOptions = seriesOptions[chartType] || seriesOptions;
	        baseOptions = {
	            stackType: additionalOptions.stackType || seriesOptions.stackType,
	            diverging: seriesOptions.diverging,
	            type: axisOptions.type
	        };
	        baseScaleData = this._createBaseScaleData(typeMap, baseOptions, axisOptions, additionalOptions);

	        return snippet.extend(baseScaleData, {
	            labels: this._createScaleLabels(baseScaleData, typeMap, baseOptions, axisOptions.dateFormat),
	            axisOptions: axisOptions
	        });
	    },

	    /**
	     * Create value type axis data.
	     * @param {{labels: Array.<string>, limit: {min: number, max: number}, step: number}} scaleData - scale data
	     * @param {object} labelTheme - label theme
	     * @param {boolean} aligned - aligned tick and label
	     * @param {boolean} isVertical - whether vertical or not
	     * @param {boolean} isPositionRight - whether right position or not
	     * @returns {{
	     *      labels: Array.<string>,
	     *      tickCount: number,
	     *      validTickCount: number,
	     *      isLabelAxis: boolean,
	     *      limit: {min: number, max: number},
	     *      isVertical: boolean
	     * }}
	     * @private
	     */
	    _createValueAxisData: function(scaleData, labelTheme, aligned, isVertical, isPositionRight) {
	        var hasCategories = this.dataProcessor.hasCategories();
	        var isCoordinateLineType = !isVertical && !hasCategories && aligned;
	        var labels = scaleData.labels;
	        var limit = scaleData.limit;
	        var step = scaleData.step;
	        var tickCount = labels.length;
	        var values, additional;

	        var axisData = axisDataMaker.makeValueAxisData({
	            labels: labels,
	            tickCount: labels.length,
	            limit: limit,
	            step: step,
	            options: scaleData.axisOptions,
	            labelTheme: labelTheme,
	            isVertical: !!isVertical,
	            isPositionRight: !!isPositionRight,
	            aligned: aligned
	        });

	        if (isCoordinateLineType) {
	            values = this.dataProcessor.getValues(this.chartType, 'x');
	            additional = axisDataMaker.makeAdditionalDataForCoordinateLineType(labels, values, limit, step, tickCount);
	            snippet.extend(axisData, additional);
	        }

	        return axisData;
	    },

	    /**
	     * Create label type axis data.
	     * @param {object} axisOptions - options for axis
	     * @param {object} labelTheme - label theme
	     * @param {boolean} aligned - aligned tick and label
	     * @param {boolean} isVertical - whether vertical or not
	     * @param {boolean} isPositionRight - whether right position or not
	     * @returns {{
	     *      labels: Array.<string>,
	     *      tickCount: number,
	     *      validTickCount: number,
	     *      isLabelAxis: boolean,
	     *      options: object,
	     *      isVertical: boolean,
	     *      isPositionRight: boolean,
	     *      aligned: boolean
	     * }}
	     * @private
	     */
	    _createLabelAxisData: function(axisOptions, labelTheme, aligned, isVertical, isPositionRight) {
	        return axisDataMaker.makeLabelAxisData({
	            labels: this.dataProcessor.getCategories(isVertical),
	            options: axisOptions,
	            labelTheme: labelTheme,
	            isVertical: !!isVertical,
	            isPositionRight: !!isPositionRight,
	            aligned: aligned,
	            addedDataCount: this.options.series.shifting ? this.addedDataCount : 0
	        });
	    },

	    /**
	     * Create axis data.
	     * @param {object} scaleData - scale data
	     * @param {object} axisOptions - axis options
	     * @param {object} labelTheme - them for label
	     * @param {boolean} isVertical - whether vertical or not
	     * @param {boolean} isPositionRight - whether right position or not
	     * @returns {object}
	     * @private
	     */
	    _createAxisData: function(scaleData, axisOptions, labelTheme, isVertical, isPositionRight) {
	        var aligned = predicate.isLineTypeChart(this.chartType, this.seriesTypes) && !axisOptions.pointOnColumn;
	        var axisData;

	        if (scaleData) {
	            axisData = this._createValueAxisData(scaleData, labelTheme, aligned, isVertical, isPositionRight);
	        } else {
	            axisData = this._createLabelAxisData(axisOptions, labelTheme, aligned, isVertical, isPositionRight);
	        }

	        return axisData;
	    },

	    /**
	     * Create axes data.
	     * @returns {object.<string, object>}
	     * @private
	     */
	    _createAxesData: function() {
	        var scaleDataMap = this.scaleDataMap;
	        var options = this.options;
	        var theme = this.theme;
	        var yAxisOptions = snippet.isArray(options.yAxis) ? options.yAxis : [options.yAxis];
	        var dataMap = {};

	        dataMap.xAxis = this._createAxisData(scaleDataMap.xAxis, options.xAxis, theme.xAxis.label);
	        dataMap.yAxis = this._createAxisData(scaleDataMap.yAxis, yAxisOptions[0], theme.yAxis.label, true);

	        if (this.hasRightYAxis) {
	            dataMap.rightYAxis = this._createAxisData(
	                scaleDataMap.rightYAxis, yAxisOptions[1], theme.yAxis.label, true, true
	            );
	            dataMap.rightYAxis.aligned = dataMap.xAxis.aligned;
	        }

	        return dataMap;
	    },

	    /**
	     * Add scale.
	     * @param {string} axisName - axis name
	     * @param {options} axisOptions - axis options
	     * @param {{chartType: string, areaType: string}} typeMap - type map
	     * @param {object} additionalOptions - additional parameters
	     */
	    addScale: function(axisName, axisOptions, typeMap, additionalOptions) {
	        typeMap = typeMap || {};
	        additionalOptions = additionalOptions || {};
	        typeMap.areaType = typeMap.areaType || axisName;
	        typeMap.chartType = additionalOptions.chartType || typeMap.chartType;

	        this.scaleDataMap[axisName] = this._createScaleData(axisOptions, typeMap, additionalOptions);
	    },

	    /**
	     * Set axis data map.
	     */
	    setAxisDataMap: function() {
	        this.axisDataMap = this._createAxesData();
	    },

	    /**
	     * Update x axis data for auto tick interval.
	     * @param {object} prevXAxisData - previous xAxis data
	     * @param {?boolean} addingDataMode - whether adding data mode or not
	     */
	    updateXAxisDataForAutoTickInterval: function(prevXAxisData, addingDataMode) {
	        var shiftingOption = this.options.series.shifting;
	        var zoomableOption = this.options.series.zoomable;
	        var xAxisData = this.axisDataMap.xAxis;
	        var seriesWidth = this.boundsModel.getDimension('series').width;
	        var addedCount = this.addedDataCount;

	        if (shiftingOption || !prevXAxisData || zoomableOption) {
	            axisDataMaker.updateLabelAxisDataForAutoTickInterval(xAxisData, seriesWidth, addedCount, addingDataMode);
	        } else {
	            axisDataMaker.updateLabelAxisDataForStackingDynamicData(xAxisData, prevXAxisData, this.firstTickCount);
	        }

	        if (!this.firstTickCount) {
	            this.firstTickCount = xAxisData.tickCount;
	        }
	    },

	    /**
	     * Update x axis data for label.
	     * @param {?boolean} addingDataMode - whether adding data mode or not
	     */
	    updateXAxisDataForLabel: function(addingDataMode) {
	        var axisData = this.axisDataMap.xAxis;
	        var labels = axisData.labels;
	        var dimensionMap = this.boundsModel.getDimensionMap(['series', 'yAxis', 'chart']);
	        var isLabelAxis = axisData.isLabelAxis;
	        var theme = this.theme.xAxis.label;
	        var validLabels, validLabelCount, additionalData;

	        if (addingDataMode) {
	            labels = labels.slice(0, labels.length - 1);
	        }

	        labels = renderUtil.addPrefixSuffix(labels, this.options.xAxis.prefix, this.options.xAxis.suffix);

	        validLabels = snippet.filter(labels, function(label) {
	            return !!label;
	        });

	        if (!snippet.isNull(this.prevValidLabelCount)) {
	            validLabelCount = this.prevValidLabelCount;
	        } else {
	            validLabelCount = validLabels.length;
	        }

	        if (this.options.yAxis.isCenter) {
	            validLabelCount += 1;
	            dimensionMap.yAxis.width = 0;
	        }

	        if (axisData.options.rotateLabel === false) {
	            additionalData = axisDataMaker.makeAdditionalDataForMultilineLabels(
	                labels, validLabelCount, theme, isLabelAxis, dimensionMap
	            );
	        } else {
	            additionalData = axisDataMaker.makeAdditionalDataForRotatedLabels(
	                validLabels, validLabelCount, theme, isLabelAxis, dimensionMap
	            );
	        }

	        this.prevValidLabelCount = validLabelCount;

	        snippet.extend(axisData, additionalData);
	    },

	    /**
	     * Find limit from limitMap by seriesIndex
	     * @param {object} limitMap - limit map
	     * @param {number} seriesIndex - series index
	     * @param {boolean} isVertical - whether vertical or not
	     * @returns {boolean}
	     * @private
	     */
	    _findLimit: function(limitMap, seriesIndex, isVertical) {
	        var limit;

	        if (seriesIndex === 0) {
	            limit = isVertical ? limitMap.yAxis : limitMap.xAxis;
	        } else {
	            limit = limitMap.rightYAxis ? limitMap.rightYAxis : limitMap.yAxis;
	        }

	        return limit;
	    },

	    /**
	     * Make limit map.
	     * @param {Array.<string>} seriesTypes - series types like bar, column, line, area
	     * @param {boolean} isVertical - whether vertical or not
	     * @returns {{
	     *      xAxis: ?{min: number, max: number},
	     *      yAxis: ?{min: number, max: number},
	     *      rightYAxis: ?{min: number, max: number},
	     *      legend: ?{min: number, max: number},
	     *      bar: ?{min: number, max: number}
	     * }}
	     * @private
	     */
	    makeLimitMap: function(seriesTypes, isVertical) {
	        var self = this;
	        var scaleDataMap = this.scaleDataMap;
	        var limitMap = {};

	        if (scaleDataMap.xAxis) {
	            limitMap.xAxis = scaleDataMap.xAxis.limit;
	        }

	        if (scaleDataMap.yAxis) {
	            limitMap.yAxis = scaleDataMap.yAxis.limit;
	        }

	        if (scaleDataMap.rightYAxis) {
	            limitMap.rightYAxis = scaleDataMap.rightYAxis.limit;
	        }

	        if (scaleDataMap.legend) {
	            limitMap.legend = scaleDataMap.legend.limit;
	        }

	        snippet.forEachArray(seriesTypes, function(seriesType, index) {
	            limitMap[seriesType] = self._findLimit(limitMap, index, isVertical);
	        });

	        return limitMap;
	    }
	});

	module.exports = ScaleDataModel;


/***/ }),
/* 120 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileoverview scaleMaker calculates the limit and step into values of processed data and returns it.
	 * @auth NHN Ent.
	 *       FE Development Lab <dl_javascript@nhnent.com>
	 */

	'use strict';

	var chartConst = __webpack_require__(8);
	var predicate = __webpack_require__(21);
	var calculator = __webpack_require__(45);
	var arrayUtil = __webpack_require__(10);
	var coordinateScaleCalculator = __webpack_require__(121);
	var snippet = __webpack_require__(6);

	var abs = Math.abs;

	/**
	 * scaleMaker calculates limit and step into values of processed data and returns it.
	 * @module scaleDataMaker
	 * @private */
	var scaleDataMaker = {
	    /**
	     * Make limit for diverging option.
	     * To balance diverging chart
	     * compare absolute value of min, max. and find larger one
	     * set min by making the value negative
	     * @param {{min: number, max: number}} limit limit
	     * @returns {{min: number, max: number}} changed limit
	     * @private
	     */
	    _makeLimitForDivergingOption: function(limit) {
	        var newMax = Math.max(abs(limit.min), abs(limit.max));

	        return {
	            min: -newMax,
	            max: newMax
	        };
	    },
	    /**
	     * Adjust limit for bubble chart.
	     * @param {{min: number, max: number}} limit - limit
	     * @param {number} step - step;
	     * @param {{min: boolean, max: boolean}} isOverflowed - overflow Item map
	     * @returns {object} limit
	     * @private
	     */
	    _adjustLimitForOverflow: function(limit, step, isOverflowed) {
	        var min = limit.min;
	        var max = limit.max;

	        if (isOverflowed.min) {
	            min = calculator.subtract(min, step);
	        }

	        if (isOverflowed.max) {
	            max = calculator.add(max, step);
	        }

	        return {
	            min: min,
	            max: max
	        };
	    },

	    /**
	     * millisecond map
	     */
	    millisecondMap: {
	        year: 31536000000,
	        month: 2678400000,
	        week: 604800000,
	        date: 86400000,
	        hour: 3600000,
	        minute: 60000,
	        second: 1000
	    },

	    /**
	     * millisecond types
	     */
	    millisecondTypes: ['year', 'month', 'week', 'date', 'hour', 'minute', 'second'],

	    /**
	     * Find date type.
	     * @param {{min: number, max: number}} dataLimit - data limit
	     * @param {number} count - data count
	     * @returns {string}
	     * @private
	     */
	    _findDateType: function(dataLimit, count) {
	        var diff = dataLimit.max - dataLimit.min;
	        var millisecondTypes = this.millisecondTypes;
	        var millisecondMap = this.millisecondMap;
	        var lastTypeIndex = millisecondTypes.length - 1;
	        var foundType;

	        if (diff) {
	            snippet.forEachArray(millisecondTypes, function(type, index) {
	                var millisecond = millisecondMap[type];
	                var dividedCount = Math.floor(diff / millisecond);
	                var foundIndex;

	                if (dividedCount) {
	                    foundIndex = index < lastTypeIndex && dividedCount < 2 && dividedCount < count ? index + 1 : index;
	                    foundType = millisecondTypes[foundIndex];
	                }

	                return !snippet.isExisty(foundIndex);
	            });
	        } else {
	            foundType = chartConst.DATE_TYPE_SECOND;
	        }

	        return foundType;
	    },

	    /**
	     * Make datetime information
	     * @param {{min: number, max: number}} dataLimit - data limit
	     * @param {number} count - data count
	     * @returns {{divisionNumber: number, minDate: number, dataLimit: {min: number, max: number}}}
	     * @private
	     */
	    _makeDatetimeInfo: function(dataLimit, count) {
	        var dateType = this._findDateType(dataLimit, count);
	        var divisionNumber = this.millisecondMap[dateType];
	        var minDate = calculator.divide(dataLimit.min, divisionNumber);
	        var maxDate = calculator.divide(dataLimit.max, divisionNumber);
	        var max = maxDate - minDate;

	        return {
	            divisionNumber: divisionNumber,
	            minDate: minDate,
	            dataLimit: {
	                min: 0,
	                max: max
	            }
	        };
	    },

	    /**
	     * Restore scale to datetime type.
	     * @param {{scale: number, limit:{min: number, max: number}}} scale - scale
	     * @param {number} minDate - minimum date
	     * @param {number} divisionNumber - division number
	     * @returns {{step: number, limit: {min: number, max: number}}}
	     * @private
	     */
	    _restoreScaleToDatetimeType: function(scale, minDate, divisionNumber) {
	        var limit = scale.limit;

	        scale.step = calculator.multiply(scale.step, divisionNumber);
	        limit.min = calculator.multiply(calculator.add(limit.min, minDate), divisionNumber);
	        limit.max = calculator.multiply(calculator.add(limit.max, minDate), divisionNumber);

	        return scale;
	    },

	    /**
	     * Get limit values safely by limit values are both Zero then set max value to 10 temporary.
	     * @param {Array} baseValues base values
	     * @returns {{min: number, max: number}}
	     */
	    _getLimitSafely: function(baseValues) {
	        var limit = {
	            min: arrayUtil.min(baseValues),
	            max: arrayUtil.max(baseValues)
	        };
	        var firstValue;

	        if (baseValues.length === 1) {
	            firstValue = baseValues[0];

	            if (firstValue > 0) {
	                limit.min = 0;
	            } else if (firstValue === 0) {
	                limit.max = 10;
	            } else {
	                limit.max = 0;
	            }
	        } else if (limit.min === 0 && limit.max === 0) {
	            limit.max = 10;
	        } else if (limit.min === limit.max) {
	            limit.min -= (limit.min / 10);
	            limit.max += (limit.max / 10);
	        }

	        return limit;
	    },

	    /**
	     * Calculate date time scale.
	     * @param {Array.<number>} baseValues - base values for calculating scale data
	     * @param {number} baseSize - base size(width or height) for calculating scale data
	     * @param {boolean} isDiverging - is diverging or not
	     * @returns {{limit: {min: number, max: number}, step: number}}
	     * @private
	     */
	    _calculateDatetimeScale: function(baseValues, baseSize, isDiverging) {
	        var datetimeInfo, scale, limit;

	        datetimeInfo = this._makeDatetimeInfo(this._getLimitSafely(baseValues), baseValues.length);

	        limit = datetimeInfo.dataLimit;

	        if (isDiverging) {
	            limit = this._makeLimitForDivergingOption(limit);
	        }

	        scale = coordinateScaleCalculator({
	            min: limit.min,
	            max: limit.max,
	            offsetSize: baseSize,
	            minimumStepSize: 1
	        });

	        scale = this._restoreScaleToDatetimeType(scale, datetimeInfo.minDate, datetimeInfo.divisionNumber);

	        return scale;
	    },

	    /**
	     * Calculate percent stackType scale.
	     * @param {Array.<number>} baseValues - base values
	     * @param {boolean} isDiverging - is diverging or not
	     * @returns {{limit: {min:number, max:number}, step: number}}
	     * @private
	     */
	    _calculatePercentStackedScale: function(baseValues, isDiverging) {
	        var scale;

	        if (calculator.sumMinusValues(baseValues) === 0) {
	            scale = chartConst.PERCENT_STACKED_AXIS_SCALE;
	        } else if (calculator.sumPlusValues(baseValues) === 0) {
	            scale = chartConst.MINUS_PERCENT_STACKED_AXIS_SCALE;
	        } else if (isDiverging) {
	            scale = chartConst.DIVERGING_PERCENT_STACKED_AXIS_SCALE;
	        } else {
	            scale = chartConst.DUAL_PERCENT_STACKED_AXIS_SCALE;
	        }

	        return scale;
	    },

	    /**
	     * Calculate coordinate scale.
	     * @param {object} makeScaleInfos - calculate scale infos
	     *     @param {Array.<number>} makeScaleInfos.baseValues - base values
	     *     @param {number} makeScaleInfos.baseSize - base size(width or height) for calculating scale data
	     *     @param {object} makeScaleInfos.overflowItem - overflow item
	     *     @param {boolean} makeScaleInfos.isDiverging - is diverging or not
	     *     @param {strint} makeScaleInfos.chartType - chartType
	     *     @param {object} makeScaleInfos.options - scale options
	     *         @param {{min: ?number, max: ?number}} makeScaleInfos.options.limit - limit options
	     * @returns {{limit: {min:number, max:number}, step: number}}
	     * @private
	     */
	    _calculateCoordinateScale: function(makeScaleInfos) {
	        var options = makeScaleInfos.options;
	        var baseSize = makeScaleInfos.baseSize;
	        var overflowItem = makeScaleInfos.overflowItem;
	        var chartType = makeScaleInfos.chartType;
	        var limit = this._getLimitSafely(makeScaleInfos.baseValues);
	        var limitOption = options.limitOption || {};
	        var hasMinOption = snippet.isExisty(limitOption.min);
	        var hasMaxOption = snippet.isExisty(limitOption.max);
	        var min = limit.min;
	        var max = limit.max;
	        var stepCount = options.stepCount;
	        var isOverflowed, scaleData;

	        if (hasMinOption) {
	            min = limitOption.min;
	            stepCount = null;
	        }

	        if (hasMaxOption) {
	            max = limitOption.max;
	            stepCount = null;
	        }

	        scaleData = coordinateScaleCalculator({
	            min: min,
	            max: max,
	            stepCount: stepCount,
	            offsetSize: baseSize
	        });

	        if (!options.useSpectrumLegend) {
	            isOverflowed = this._isOverflowed(overflowItem, scaleData, limit, hasMinOption, hasMaxOption);
	        }

	        if (isOverflowed && !predicate.isMapTypeChart(chartType)) {
	            scaleData.limit = this._adjustLimitForOverflow(scaleData.limit, scaleData.step, isOverflowed);
	        }

	        if (makeScaleInfos.isDiverging) {
	            scaleData.limit = this._makeLimitForDivergingOption(scaleData.limit);
	        }

	        return scaleData;
	    },

	    _isOverflowed: function(overflowItem, scaleData, limit, hasMinOption, hasMaxOption) {
	        var isBubbleMinOverflowed = !!(overflowItem && overflowItem.minItem);
	        var isBubbleMaxOverflowed = !!(overflowItem && overflowItem.maxItem);
	        var scaleDataLimit = scaleData.limit;
	        var isOverflowedMin = isBubbleMinOverflowed ||
	             (!hasMinOption && scaleDataLimit.min === limit.min && scaleDataLimit.min !== 0);
	        var isOverflowedMax = isBubbleMaxOverflowed ||
	            (!hasMaxOption && scaleDataLimit.max === limit.max && scaleDataLimit.max !== 0);

	        if (!isOverflowedMin && !isOverflowedMax) {
	            return null;
	        }

	        return {
	            min: isOverflowedMin,
	            max: isOverflowedMax
	        };
	    },

	    /**
	     * Make scale data.
	     * @param {Array.<number>} baseValues - base values for calculating scale data
	     * @param {number} baseSize - base size(width or height) for calculating scale data
	     * @param {string} chartType - chart type
	     * @param {{
	     *      type: string,
	     *      stackType: string,
	     *      diverging: boolean,
	     *      isVertical: boolean,
	     *      limitOption: ?{min: ?number, max: ?number},
	     *      tickCounts: ?Array.<number>
	     * }} options - options
	     * @returns {{limit: {min:number, max:number}, step: number, stepCount: number}}
	     */
	    makeScaleData: function(baseValues, baseSize, chartType, options) {
	        var scaleData;
	        var isDiverging = predicate.isDivergingChart(chartType, options.diverging);
	        var overflowItem = options.overflowItem;

	        if (predicate.isPercentStackChart(chartType, options.stackType)) {
	            scaleData = this._calculatePercentStackedScale(baseValues, isDiverging);
	        } else if (predicate.isDatetimeType(options.type)) {
	            scaleData = this._calculateDatetimeScale(baseValues, baseSize, isDiverging);
	        } else {
	            if (predicate.isRadialChart(chartType)) {
	                options.stepCount = Math.floor(baseSize / 100);
	            }

	            scaleData = this._calculateCoordinateScale({
	                baseValues: baseValues,
	                baseSize: baseSize,
	                overflowItem: overflowItem,
	                isDiverging: isDiverging,
	                chartType: chartType,
	                options: options
	            });
	        }

	        return scaleData;
	    }
	};

	module.exports = scaleDataMaker;


/***/ }),
/* 121 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileoverview Implement function that calculate coordinate scale data
	 * @author Sungho Kim
	 */

	'use strict';

	var snippet = __webpack_require__(6);

	/**
	 * The reference values to normailze value
	 * @private
	 * @type {Array.<number>}
	 */
	var SNAP_VALUES = [1, 2, 5, 10];

	/**
	 * Default step pixel size
	 * @private
	 * @type {number}
	 */
	var DEFAULT_PIXELS_PER_STEP = 88;

	/**
	 * Get digits of number
	 * @param {number} number number
	 * @returns {number}
	 * @private
	 * @example
	 * this.getDigits(2145) == 1000
	 */
	function getDigits(number) {
	    var logNumberDividedLN10 = number === 0 ? 1 : (Math.log(Math.abs(number)) / Math.LN10);

	    return Math.pow(10, Math.floor(logNumberDividedLN10));
	}

	/**
	 * Select value within SNAP_VALUES that most close with given value
	 * @param {number} number number
	 * @private
	 * @returns {number}
	 */
	function getSnappedNumber(number) {
	    var guideValue, snapNumber, i, t;

	    for (i = 0, t = SNAP_VALUES.length; i < t; i += 1) {
	        snapNumber = SNAP_VALUES[i];
	        guideValue = (snapNumber + (SNAP_VALUES[i + 1] || snapNumber)) / 2;

	        if (number <= guideValue) {
	            break;
	        }
	    }

	    return snapNumber;
	}

	/**
	 * Get normalized step value
	 * @param {number} step step
	 * @private
	 * @returns {number}
	 */
	function getNormalizedStep(step) {
	    var placeNumber = getDigits(step);
	    var simplifiedStepValue = step / placeNumber;

	    return getSnappedNumber(simplifiedStepValue) * placeNumber;
	}

	/**
	 * Get normailzed limit values
	 * @param {number} min min
	 * @param {number} max max
	 * @param {number} step step
	 * @private
	 * @returns {{
	 *     min: number,
	 *     max: number
	 * }}
	 * max = 155 and step = 10 ---> max = 160
	 */
	function getNormalizedLimit(min, max, step) {
	    var minNumber = Math.min(getDigits(max), getDigits(step));
	    var placeNumber = minNumber > 1 ? 1 : (1 / minNumber);
	    var fixedStep = (step * placeNumber);

	    // ceil max value step digits
	    max = Math.ceil((max * placeNumber) / fixedStep) * fixedStep / placeNumber;

	    if (min > step) {
	        // floor min value to multiples of step
	        min = Math.floor((min * placeNumber) / fixedStep) * fixedStep / placeNumber;
	    } else if (min < 0) {
	        min = -(Math.ceil((Math.abs(min) * placeNumber) / fixedStep) * fixedStep) / placeNumber;
	    } else {
	        // 0 when min value is positive and smaller than step
	        min = 0;
	    }

	    return {
	        min: min,
	        max: max
	    };
	}

	/**
	 * Get normalized step count for floating point calculate error
	 * @param {number} limitSize limit size of chart min max distance
	 * @param {number} step step distance
	 * @returns {number}
	 * @ignore
	 */
	function getNormalizedStepCount(limitSize, step) {
	    var multiplier = 1 / Math.min(getDigits(limitSize), getDigits(step));

	    return Math.ceil((limitSize * multiplier) / (step * multiplier));
	}

	/**
	 * Get normalized scale data
	 * @param {object} scale scale
	 * @private
	 * @returns {object}
	 * @ignore
	 */
	function getNormalizedScale(scale) {
	    var step = getNormalizedStep(scale.step);
	    var edge = getNormalizedLimit(scale.limit.min, scale.limit.max, step);
	    var limitSize = Math.abs(edge.max - edge.min);
	    var stepCount = getNormalizedStepCount(limitSize, step);

	    return {
	        limit: {
	            min: edge.min,
	            max: edge.max
	        },
	        step: step,
	        stepCount: stepCount
	    };
	}

	/**
	 * Get rough(not normalized) scale data
	 * @param {number} min min
	 * @param {number} max max
	 * @param {number} offsetSize offset size
	 * @param {number} stepCount step count
	 * @param {object} [minimumStepSize] for ensure minimum step size
	 * @private
	 * @returns {object} scale data
	 */
	function getRoughScale(min, max, offsetSize, stepCount, minimumStepSize) {
	    var limitSize = Math.abs(max - min);
	    var valuePerPixel = limitSize / offsetSize;
	    var pixelsPerStep, step;

	    if (!stepCount) {
	        stepCount = Math.ceil(offsetSize / DEFAULT_PIXELS_PER_STEP);
	    }

	    pixelsPerStep = offsetSize / stepCount;

	    step = valuePerPixel * pixelsPerStep;

	    if (snippet.isNumber(minimumStepSize) && step < minimumStepSize) {
	        step = minimumStepSize;
	        stepCount = limitSize / step;
	    }

	    return {
	        limit: {
	            min: min,
	            max: max
	        },
	        step: step,
	        stepCount: stepCount
	    };
	}

	/**
	 * Calculate coordinate scale
	 * @param {object} options optionsPP
	 * @param {object} options.min min value
	 * @param {object} options.max max value
	 * @param {object} options.offsetSize offset pixel size of screen that needs scale
	 * @param {object} [options.stepCount] if need fixed step count
	 * @param {object} [options.minimumStepSize] for ensure minimum step size
	 * @returns {object}
	 * @ignore
	 */
	function coordinateScaleCalculator(options) {
	    var min = options.min;
	    var max = options.max;
	    var offsetSize = options.offsetSize;
	    var stepCount = options.stepCount;
	    var minimumStepSize = options.minimumStepSize;

	    var scale = getRoughScale(min, max, offsetSize, stepCount, minimumStepSize);
	    scale = getNormalizedScale(scale);

	    return scale;
	}

	module.exports = coordinateScaleCalculator;


/***/ }),
/* 122 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileoverview scaleMaker calculates the limit and step into values of processed data and returns it.
	 * @auth NHN Ent.
	 *       FE Development Lab <dl_javascript@nhnent.com>
	 */

	'use strict';

	var predicate = __webpack_require__(21);
	var calculator = __webpack_require__(45);
	var renderUtil = __webpack_require__(7);
	var snippet = __webpack_require__(6);

	var abs = Math.abs;

	/**
	 * Format scale data labels
	 * @module scaleLabelFormatter
	 * @private
	 */
	var scaleLabelFormatter = {
	    /**
	     * Get functions for formatting value.
	     * @param {string} chartType - chart type
	     * @param {string} stackType - stack type
	     * @param {?Array.<function>} formatFunctions - format functions
	     * @returns {Array.<function>}
	     * @private
	     */
	    _getFormatFunctions: function(chartType, stackType, formatFunctions) {
	        if (predicate.isPercentStackChart(chartType, stackType)) {
	            formatFunctions = [function(value) {
	                return value + '%';
	            }];
	        }

	        return formatFunctions;
	    },

	    /**
	     * Create scale values.
	     * @param {{limit: {min: number, max: number}, step: number}} scale - scale data
	     * @param {string} chartType - chart type
	     * @param {boolean} diverging - diverging option
	     * @returns {Array.<number>}
	     * @private
	     */
	    _createScaleValues: function(scale, chartType, diverging) {
	        var values = calculator.makeLabelsFromLimit(scale.limit, scale.step);

	        return predicate.isDivergingChart(chartType, diverging) ? snippet.map(values, abs) : values;
	    },

	    /**
	     * Create formatted scale values.
	     * @param {{limit: {min: number, max: number}, step: number}} scale - scale data
	     * @param {{
	     *      chartType: string,
	     *      areaType: string,
	     *      valueType: string
	     * }} typeMap - type map
	     * @param {{
	     *      type: string,
	     *      stackType: string,
	     *      diverging: boolean,
	     *      dateFormat: ?string
	     * }} options - options
	     * @param {?Array.<function>} formatFunctions - format functions
	     * @returns {Array.<string|number>|*}
	     */
	    createFormattedLabels: function(scale, typeMap, options, formatFunctions) {
	        var chartType = typeMap.chartType;
	        var areaType = typeMap.areaType;
	        var valueType = typeMap.valueType;
	        var values = this._createScaleValues(scale, chartType, options.diverging);
	        var formattedValues;

	        if (predicate.isDatetimeType(options.type)) {
	            formattedValues = renderUtil.formatDates(values, options.dateFormat);
	        } else {
	            formatFunctions = this._getFormatFunctions(chartType, options.stackType, formatFunctions);
	            formattedValues = renderUtil.formatValues(values, formatFunctions, chartType, areaType, valueType);
	        }

	        return formattedValues;
	    }
	};

	module.exports = scaleLabelFormatter;


/***/ }),
/* 123 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileoverview Axis Data Maker
	 * @author NHN Ent.
	 *         FE Development Lab <dl_javascript@nhnent.com>
	 */

	'use strict';

	var chartConst = __webpack_require__(8);
	var predicate = __webpack_require__(21);
	var geomatric = __webpack_require__(49);
	var renderUtil = __webpack_require__(7);
	var arrayUtil = __webpack_require__(10);
	var snippet = __webpack_require__(6);

	/**
	 * Axis data maker.
	 * @module axisDataMaker
	 * @private */
	var axisDataMaker = {
	    /**
	     * Makes labels by labelInterval option.
	     * @param {Array.<string>} labels - labels
	     * @param {number} labelInterval - label interval option
	     * @param {number} [addedDataCount] - added data count
	     * @returns {Array.<string>} labels
	     * @private
	     */
	    _makeLabelsByIntervalOption: function(labels, labelInterval, addedDataCount) {
	        addedDataCount = addedDataCount || 0;
	        labels = snippet.map(labels, function(label, index) {
	            if (((index + addedDataCount) % labelInterval) !== 0) {
	                label = chartConst.EMPTY_AXIS_LABEL;
	            }

	            return label;
	        });

	        return labels;
	    },

	    /**
	     * Make axis data for label type.
	     * @memberOf module:axisDataMaker
	     * @param {object} params - parameters
	     *      @param {Array.<string>} params.labels - chart labels
	     *      @param {boolean} params.isVertical - whether vertical or not
	     *      @param {boolean} params.aligned - whether align or not
	     *      @param {?boolean} params.addedDataCount - added data count
	     * @returns {{
	     *      labels: Array.<string>,
	     *      tickCount: number,
	     *      validTickCount: number,
	     *      isLabelAxis: boolean,
	     *      options: object,
	     *      isVertical: boolean,
	     *      isPositionRight: boolean,
	     *      aligned: boolean
	     * }}
	     */
	    makeLabelAxisData: function(params) {
	        var tickCount = params.labels.length;
	        var options = params.options || {};
	        var labels = params.labels;

	        if (predicate.isValidLabelInterval(options.labelInterval, options.tickInterval)
	                && params.labels.length > options.labelInterval) {
	            labels = this._makeLabelsByIntervalOption(params.labels, options.labelInterval, params.addedDataCount);
	        }

	        if (predicate.isDatetimeType(options.type)) {
	            labels = renderUtil.formatDates(labels, options.dateFormat);
	        }

	        if (!params.aligned) {
	            tickCount += 1;
	        }

	        return {
	            labels: labels,
	            tickCount: tickCount,
	            validTickCount: tickCount,
	            isLabelAxis: true,
	            options: options,
	            isVertical: !!params.isVertical,
	            isPositionRight: !!params.isPositionRight,
	            aligned: !!params.aligned
	        };
	    },

	    /**
	     * Make data for value type axis.
	     * @memberOf module:axisDataMaker
	     * @param {object} params parameters
	     *      @param {AxisScaleMaker} params.axisScaleMaker chart values
	     *      @param {boolean} params.isVertical whether vertical or not
	     * @returns {{
	     *      labels: Array.<string>,
	     *      tickCount: number,
	     *      validTickCount: number,
	     *      isLabelAxis: boolean,
	     *      limit: {min: number, max: number},
	     *      isVertical: boolean
	     * }} axis data
	     */
	    makeValueAxisData: function(params) {
	        var labels = params.labels;
	        var tickCount = params.tickCount;
	        var limit = params.limit;
	        var axisData = {
	            labels: labels,
	            tickCount: tickCount,
	            validTickCount: tickCount,
	            limit: limit,
	            dataMin: limit.min,
	            distance: limit.max - limit.min,
	            step: params.step,
	            options: params.options,
	            isVertical: !!params.isVertical,
	            isPositionRight: !!params.isPositionRight,
	            aligned: !!params.aligned
	        };

	        return axisData;
	    },

	    /**
	     * Make additional data for coordinate line type chart.
	     * @param {Array.<string>} labels - labels
	     * @param {Array.<number>} values - values
	     * @param {{min: number, max: number}} limit - limit
	     * @param {number} step - step
	     * @param {number} tickCount = tickCount
	     * @returns {{
	     *      labels: Array.<string>,
	     *      tickCount: number,
	     *      validTickCount: number,
	     *      limit: {min: number, max: number},
	     *      positionRatio: number,
	     *      sizeRatio: number
	     * }}
	     */
	    makeAdditionalDataForCoordinateLineType: function(labels, values, limit, step, tickCount) {
	        var sizeRatio = 1;
	        var positionRatio = 0;
	        var min = arrayUtil.min(values);
	        var max = arrayUtil.max(values);
	        var distance;

	        distance = max - min;

	        if (distance) {
	            if (limit.min < min) {
	                limit.min += step;
	                positionRatio = (limit.min - min) / distance;
	                sizeRatio -= positionRatio;
	                tickCount -= 1;
	                labels.shift();
	            }

	            if (limit.max > max) {
	                limit.max -= step;
	                sizeRatio -= (max - limit.max) / distance;
	                tickCount -= 1;
	                labels.pop();
	            }
	        }

	        return {
	            labels: labels,
	            tickCount: tickCount,
	            validTickCount: tickCount,
	            limit: limit,
	            dataMin: min,
	            distance: distance,
	            positionRatio: positionRatio,
	            sizeRatio: sizeRatio
	        };
	    },

	    /**
	     * Make adjusting tick interval information.
	     * @param {number} beforeBlockCount - before block count
	     * @param {number} seriesWidth - width of series area
	     * @param {number} blockSize - block size
	     * @returns {null | {blockCount: number, beforeRemainBlockCount: number, interval: number}}
	     * @private
	     */
	    _makeAdjustingIntervalInfo: function(beforeBlockCount, seriesWidth, blockSize) {
	        var newBlockCount = parseInt(seriesWidth / blockSize, 10);
	        // interval : number of previous blocks in a new block(spaces between tick and tick)
	        var interval = parseInt(beforeBlockCount / newBlockCount, 10);
	        var intervalInfo = null;
	        var remainCount;

	        if (interval > 1) {
	            // remainCount : remaining block count after filling new blocks
	            // | | | | | | | | | | | |  - previous block interval
	            // |     |     |     |      - new block interval
	            //                   |*|*|  - remaining block
	            remainCount = beforeBlockCount - (interval * newBlockCount);

	            if (remainCount >= interval) {
	                newBlockCount += parseInt(remainCount / interval, 0);
	                remainCount = remainCount % interval;
	            }

	            intervalInfo = {
	                blockCount: newBlockCount,
	                beforeRemainBlockCount: remainCount,
	                interval: interval
	            };
	        }

	        return intervalInfo;
	    },

	    /**
	     * Make candidate for adjusting tick interval.
	     * @param {number} beforeBlockCount - before block count
	     * @param {number} seriesWidth - width of series area
	     * @returns {Array.<{newBlockCount: number, remainBlockCount: number, interval: number}>}
	     * @private
	     */
	    _makeCandidatesForAdjustingInterval: function(beforeBlockCount, seriesWidth) {
	        var self = this;
	        var blockSizeRange = snippet.range(90, 121, 5); // [90, 95, 100, 105, 110, 115, 120]
	        var candidates = snippet.map(blockSizeRange, function(blockSize) {
	            return self._makeAdjustingIntervalInfo(beforeBlockCount, seriesWidth, blockSize);
	        });

	        return snippet.filter(candidates, function(info) {
	            return !!info;
	        });
	    },

	    /**
	     * Calculate adjusting interval information for auto tick interval option.
	     * @param {number} curBlockCount - current block count
	     * @param {number} seriesWidth - series width
	     * @returns {{newBlockCount: number, remainBlockCount: number, interval: number}}
	     * @private
	     */
	    _calculateAdjustingIntervalInfo: function(curBlockCount, seriesWidth) {
	        var candidates = this._makeCandidatesForAdjustingInterval(curBlockCount, seriesWidth);
	        var intervalInfo = null;

	        if (candidates.length) {
	            intervalInfo = arrayUtil.min(candidates, function(candidate) {
	                return candidate.blockCount;
	            });
	        }

	        return intervalInfo;
	    },

	    /**
	     * Make filtered labels by interval.
	     * @param {Array.<string>} labels - labels
	     * @param {number} startIndex - start index
	     * @param {number} interval - interval
	     * @returns {Array.<string>}
	     * @private
	     */
	    _makeFilteredLabelsByInterval: function(labels, startIndex, interval) {
	        return snippet.filter(labels.slice(startIndex), function(label, index) {
	            return index % interval === 0;
	        });
	    },

	    /**
	     * Update label type axisData for auto tick interval option.
	     * @param {object} axisData - axisData
	     * @param {number} seriesWidth - series width
	     * @param {?number} addedDataCount - added data count
	     * @param {?boolean} addingDataMode - whether adding data mode or not
	     */
	    updateLabelAxisDataForAutoTickInterval: function(axisData, seriesWidth, addedDataCount, addingDataMode) {
	        var beforeBlockCount, intervalInfo;
	        var adjustingBlockCount, interval, beforeRemainBlockCount, startIndex;

	        if (addingDataMode) {
	            axisData.tickCount -= 1;
	            axisData.labels.pop();
	        }

	        beforeBlockCount = axisData.tickCount - 1;
	        intervalInfo = this._calculateAdjustingIntervalInfo(beforeBlockCount, seriesWidth);

	        if (!intervalInfo) {
	            return;
	        }

	        adjustingBlockCount = intervalInfo.blockCount;
	        interval = intervalInfo.interval;
	        beforeRemainBlockCount = intervalInfo.beforeRemainBlockCount;
	        axisData.eventTickCount = axisData.tickCount;

	        // startIndex: (remaing block count / 2) - current moved tick index
	        // |     |     |     |*|*|*|    - * remaing block
	        // |*|*|O    |     |     |*|    - tick is not moved (O startIndex = 2)
	        // |*|O    |     |     |*|*|    - tick moved 1 (O startIndex = 1)
	        startIndex = Math.round(beforeRemainBlockCount / 2) - (addedDataCount % interval);

	        if (startIndex < 0) {
	            startIndex += interval;
	        }

	        axisData.labels = this._makeFilteredLabelsByInterval(axisData.labels, startIndex, interval);

	        snippet.extend(axisData, {
	            startIndex: startIndex,
	            tickCount: adjustingBlockCount + 1,
	            positionRatio: (startIndex / beforeBlockCount),
	            sizeRatio: 1 - (beforeRemainBlockCount / beforeBlockCount),
	            interval: interval
	        });
	    },

	    /**
	     * Update label type axisData for stacking dynamic data.
	     * @param {object} axisData - axis data
	     * @param {object} prevUpdatedData - previous updated axisData
	     * @param {number} firstTickCount - calculated first tick count
	     */
	    updateLabelAxisDataForStackingDynamicData: function(axisData, prevUpdatedData, firstTickCount) {
	        var interval = prevUpdatedData.interval;
	        var startIndex = prevUpdatedData.startIndex;
	        var beforeBlockCount = axisData.tickCount - 1;
	        var newBlockCount = beforeBlockCount / interval;
	        var firstBlockCount = firstTickCount ? firstTickCount - 1 : 0;
	        var beforeRemainBlockCount;

	        // twice interval, if new block count is greater than twice of new block count
	        if (firstBlockCount && ((firstBlockCount * 2) <= newBlockCount)) {
	            interval *= 2;
	        }

	        axisData.labels = this._makeFilteredLabelsByInterval(axisData.labels, startIndex, interval);
	        newBlockCount = axisData.labels.length - 1;
	        beforeRemainBlockCount = beforeBlockCount - (interval * newBlockCount);

	        snippet.extend(axisData, {
	            startIndex: startIndex,
	            eventTickCount: axisData.tickCount,
	            tickCount: axisData.labels.length,
	            positionRatio: startIndex / beforeBlockCount,
	            sizeRatio: 1 - (beforeRemainBlockCount / beforeBlockCount),
	            interval: interval
	        });
	    },

	    /**
	     * Calculate width for label area for x axis.
	     * @param {boolean} isLabelAxis - whether label type axis or not
	     * @param {number} seriesWidth - series width
	     * @param {number} labelCount - label count
	     * @returns {number} limit width
	     * @private
	     */
	    _calculateXAxisLabelAreaWidth: function(isLabelAxis, seriesWidth, labelCount) {
	        if (!isLabelAxis) {
	            labelCount -= 1;
	        }

	        return seriesWidth / labelCount;
	    },

	    /**
	     * Create multiline label.
	     * @param {string} label - label
	     * @param {number} limitWidth - limit width
	     * @param {object} theme - label theme
	     * @returns {string}
	     * @private
	     */
	    _createMultilineLabel: function(label, limitWidth, theme) {
	        var words = String(label).split(/\s+/);
	        var lineWords = words[0];
	        var lines = [];

	        snippet.forEachArray(words.slice(1), function(word) {
	            var width = renderUtil.getRenderedLabelWidth(lineWords + ' ' + word, theme);

	            if (width > limitWidth) {
	                lines.push(lineWords);
	                lineWords = word;
	            } else {
	                lineWords += ' ' + word;
	            }
	        });

	        if (lineWords) {
	            lines.push(lineWords);
	        }

	        return lines.join('<br>');
	    },

	    /**
	     * Create multiline labels.
	     * @param {Array.<string>} labels - labels
	     * @param {object} labelTheme - theme for label
	     * @param {number} labelAreaWidth - label area width
	     * @returns {Array}
	     * @private
	     */
	    _createMultilineLabels: function(labels, labelTheme, labelAreaWidth) {
	        var _createMultilineLabel = this._createMultilineLabel;

	        return snippet.map(labels, function(label) {
	            return _createMultilineLabel(label, labelAreaWidth, labelTheme);
	        });
	    },

	    /**
	     * Calculate multiline height.
	     * @param {Array.string} multilineLabels - multiline labels
	     * @param {object} labelTheme - theme for label
	     * @param {number} labelAreaWidth - width for label area
	     * @returns {number}
	     * @private
	     */
	    _calculateMultilineHeight: function(multilineLabels, labelTheme, labelAreaWidth) {
	        return renderUtil.getRenderedLabelsMaxHeight(multilineLabels, snippet.extend({
	            cssText: 'line-height:1.2;width:' + labelAreaWidth + 'px'
	        }, labelTheme));
	    },

	    /**
	     * Calculate height difference between origin category and multiline category.
	     * @param {Array.<string>} labels - labels
	     * @param {Array.<string>} validLabelCount - valid label count
	     * @param {object} labelTheme - theme for label
	     * @param {boolean} isLabelAxis - whether label type axis or not
	     * @param {{series: {width: number}, yAxis: {width: number}}} dimensionMap - dimension map
	     * @returns {number}
	     */
	    makeAdditionalDataForMultilineLabels: function(labels, validLabelCount, labelTheme, isLabelAxis, dimensionMap) {
	        var seriesWidth = dimensionMap.series.width;
	        var labelAreaWidth = this._calculateXAxisLabelAreaWidth(isLabelAxis, seriesWidth, validLabelCount);
	        var multilineLabels = this._createMultilineLabels(labels, labelTheme, seriesWidth);
	        var multilineHeight = this._calculateMultilineHeight(multilineLabels, labelTheme, labelAreaWidth);
	        var labelHeight = renderUtil.getRenderedLabelsMaxHeight(labels, labelTheme);

	        return {
	            multilineLabels: multilineLabels,
	            overflowHeight: multilineHeight - labelHeight,
	            overflowLeft: (labelAreaWidth / 2) - dimensionMap.yAxis.width
	        };
	    },

	    /**
	     * Find rotation degree.
	     * @param {number} labelAreaWidth - limit width
	     * @param {number} labelWidth - label width
	     * @param {number} labelHeight - label height
	     * @returns {number}
	     * @private
	     */
	    _findRotationDegree: function(labelAreaWidth, labelWidth, labelHeight) {
	        var foundDegree = null;

	        snippet.forEachArray(chartConst.DEGREE_CANDIDATES, function(degree) {
	            var compareWidth = geomatric.calculateRotatedWidth(degree, labelWidth, labelHeight);

	            foundDegree = degree;

	            if (compareWidth <= labelAreaWidth + chartConst.XAXIS_LABEL_COMPARE_MARGIN) {
	                return false;
	            }

	            return true;
	        });

	        return foundDegree;
	    },

	    /**
	     * Calculate rotated width.
	     * @param {number} degree - degree for label of x axis
	     * @param {string} firstLabel - first label
	     * @param {number} labelHeight - labelHeight
	     * @param {object} labelTheme - theme for label
	     * @returns {number}
	     * @private
	     */
	    _calculateRotatedWidth: function(degree, firstLabel, labelHeight, labelTheme) {
	        var firstLabelWidth = renderUtil.getRenderedLabelWidth(firstLabel, labelTheme);
	        var newLabelWidth = geomatric.calculateRotatedWidth(degree, firstLabelWidth, labelHeight);

	        // when checking overflow, calculation should be based on right top angle
	        newLabelWidth -= geomatric.calculateAdjacent(chartConst.ANGLE_90 - degree, labelHeight / 2);

	        return newLabelWidth;
	    },

	    /**
	     * Calculate limit width for label
	     * @param {number} yAxisWidth - y axis width
	     * @param {boolean} isLabelAxis - aligned tick and label
	     * @param {number} labelAreaWidth - width for label area
	     * @returns {number}
	     * @private
	     */
	    _calculateLimitWidth: function(yAxisWidth, isLabelAxis, labelAreaWidth) {
	        var limitWidth = yAxisWidth;

	        if (isLabelAxis) {
	            limitWidth += (labelAreaWidth / 2);
	        }

	        return limitWidth;
	    },

	    /**
	     * Make additional data for rotated labels.
	     * The label size is larger than the specified area, creating data to handle the area beyond the border.
	     * @param {Array.<string>} validLabels - valid labels
	     * @param {Array.<string>} validLabelCount - valid label count
	     * @param {object} labelTheme - theme for label
	     * @param {boolean} isLabelAxis - whether label type axis or not
	     * @param {{series: {width: number}, yAxis: {width: number}}} dimensionMap - dimension map
	     * @returns {{degree: number, overflowHeight: number, overflowLeft: number}}
	     */
	    makeAdditionalDataForRotatedLabels: function(validLabels, validLabelCount, labelTheme, isLabelAxis, dimensionMap) {
	        var maxLabelWidth = renderUtil.getRenderedLabelsMaxWidth(validLabels, labelTheme);
	        var seriesWidth = dimensionMap.series.width;
	        var labelAreaWidth = this._calculateXAxisLabelAreaWidth(isLabelAxis, seriesWidth, validLabelCount);
	        var additionalData = null;
	        var yAxisAreaWidth = dimensionMap.yAxis.width + dimensionMap.rightYAxis ? dimensionMap.rightYAxis.width : 0;
	        var degree, labelHeight, rotatedHeight, limitWidth, rotatedWidth;
	        var contentWidth = (chartConst.CHART_PADDING * 2) + yAxisAreaWidth + seriesWidth;

	        if (labelAreaWidth < maxLabelWidth) {
	            labelHeight = renderUtil.getRenderedLabelsMaxHeight(validLabels, labelTheme);
	            degree = this._findRotationDegree(labelAreaWidth, maxLabelWidth, labelHeight);
	            rotatedHeight = geomatric.calculateRotatedHeight(degree, maxLabelWidth, labelHeight);
	            rotatedWidth = this._calculateRotatedWidth(degree, validLabels[0], labelHeight, labelTheme);
	            limitWidth = this._calculateLimitWidth(dimensionMap.yAxis.width, isLabelAxis, labelAreaWidth);
	            contentWidth += rotatedWidth; // add spaces to render maybe one label

	            additionalData = {
	                degree: degree,
	                overflowHeight: rotatedHeight - labelHeight,
	                overflowLeft: rotatedWidth - limitWidth,
	                overflowRight: contentWidth - dimensionMap.chart.width
	            };
	        } else {
	            contentWidth += maxLabelWidth;

	            labelAreaWidth = renderUtil.getRenderedLabelWidth(validLabels[0], labelTheme) / 2;
	            additionalData = {
	                overflowLeft: labelAreaWidth - dimensionMap.yAxis.width,
	                overflowRight: contentWidth - dimensionMap.chart.width
	            };
	        }

	        return additionalData;
	    }
	};

	module.exports = axisDataMaker;


/***/ }),
/* 124 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileoverview Column chart.
	 * @author NHN Ent.
	 *         FE Development Lab <dl_javascript@nhnent.com>
	 */

	'use strict';

	var ChartBase = __webpack_require__(42);
	var chartConst = __webpack_require__(8);
	var rawDataHandler = __webpack_require__(31);
	var snippet = __webpack_require__(6);

	var ColumnChart = snippet.defineClass(ChartBase, /** @lends ColumnChart.prototype */ {
	    /**
	     * className
	     * @type {string}
	     */
	    className: 'tui-column-chart',
	    /**
	     * Column chart.
	     * @constructs ColumnChart
	     * @extends ChartBase
	     * @mixes axisTypeMixer
	     * @mixes verticalTypeMixer
	     * @param {Array.<Array>} rawData raw data
	     * @param {object} theme chart theme
	     * @param {object} options chart options
	     */
	    init: function(rawData, theme, options) {
	        rawDataHandler.updateRawSeriesDataByOptions(rawData, options.series);
	        this._updateOptionsRelatedDiverging(options);

	        ChartBase.call(this, {
	            rawData: rawData,
	            theme: theme,
	            options: options,
	            hasAxes: true,
	            isVertical: true
	        });
	    },

	    /**
	     * Update options related diverging option.
	     * @param {object} options - options
	     * @private
	     */
	    _updateOptionsRelatedDiverging: function(options) {
	        options.series = options.series || {};

	        if (options.series.diverging) {
	            options.series.stackType = options.series.stackType || chartConst.NORMAL_STACK_TYPE;
	        }
	    },

	    /**
	     * Add components
	     * @override
	     */
	    addComponents: function() {
	        this.componentManager.register('title', 'title');
	        this.componentManager.register('plot', 'plot');
	        this.componentManager.register('legend', 'legend');

	        this.componentManager.register('columnSeries', 'columnSeries');

	        this.componentManager.register('yAxis', 'axis');
	        this.componentManager.register('xAxis', 'axis');

	        this.componentManager.register('chartExportMenu', 'chartExportMenu');
	        this.componentManager.register('tooltip', 'tooltip');
	        this.componentManager.register('mouseEventDetector', 'mouseEventDetector');
	    },

	    /**
	     * Get scale option.
	     * @returns {{yAxis: boolean}}
	     * @override
	     */
	    getScaleOption: function() {
	        return {
	            yAxis: true
	        };
	    },
	    /**
	     * Add data ratios.
	     * @override
	     * modified from axisTypeMixer
	     */
	    addDataRatios: function(limitMap) {
	        var seriesOption = this.options.series || {};
	        var chartType = this.chartType;
	        var stackType = (seriesOption[chartType] || seriesOption).stackType;

	        this.dataProcessor.addDataRatios(limitMap[chartType], stackType, chartType);
	    }
	});

	module.exports = ColumnChart;


/***/ }),
/* 125 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileoverview Line chart
	 * @author NHN Ent.
	 *         FE Development Lab <dl_javascript@nhnent.com>
	 */

	'use strict';

	var ChartBase = __webpack_require__(42);
	var predicate = __webpack_require__(21);
	var DynamicDataHelper = __webpack_require__(126);
	var Series = __webpack_require__(85);
	var rawDataHandler = __webpack_require__(31);
	var snippet = __webpack_require__(6);

	var LineChart = snippet.defineClass(ChartBase, /** @lends LineChart.prototype */ {
	    /**
	     * className
	     * @type {string}
	     */
	    className: 'tui-line-chart',

	    /**
	     * Series class
	     * @type {function}
	     */
	    Series: Series,

	    /**
	     * Line chart.
	     * @param {Array.<Array>} rawData - raw data
	     * @param {object} theme - chart theme
	     * @param {object} options - chart options
	     * @constructs LineChart
	     * @extends ChartBase
	     * @mixes axisTypeMixer
	     * @mixes lineTypeMixer
	     */
	    init: function(rawData, theme, options) {
	        ChartBase.call(this, {
	            rawData: rawData,
	            theme: theme,
	            options: options,
	            hasAxes: true,
	            isVertical: true
	        });

	        if (this.dataProcessor.isCoordinateType()) {
	            delete this.options.xAxis.tickInterval;
	            this.options.tooltip.grouped = false;
	            this.options.series.shifting = false;
	        }

	        this._dynamicDataHelper = new DynamicDataHelper(this);
	    },
	    /**
	     * Add data.
	     * @param {string} category - category
	     * @param {Array} values - values
	     */
	    addData: function(category, values) {
	        this._dynamicDataHelper.addData(category, values);
	    },

	    /**
	     * On change checked legend.
	     * @param {Array.<?boolean> | {line: ?Array.<boolean>, column: ?Array.<boolean>}} checkedLegends checked legends
	     * @param {?object} rawData rawData
	     * @param {?object} boundsParams addition params for calculating bounds
	     * @override
	     */
	    onChangeCheckedLegends: function(checkedLegends, rawData, boundsParams) {
	        this._dynamicDataHelper.reset();
	        this._dynamicDataHelper.changeCheckedLegends(checkedLegends, rawData, boundsParams);
	    },
	    /**
	     * Add data ratios.
	     * @override
	     * from axisTypeMixer
	     */
	    addDataRatios: function(limitMap) {
	        var self = this;
	        var chartTypes = this.chartTypes || [this.chartType];
	        var seriesOption = this.options.series || {};
	        var addDataRatio;

	        if (this.dataProcessor.isCoordinateType()) {
	            addDataRatio = function(chartType) {
	                var hasRadius = predicate.isBubbleChart(chartType);
	                self.dataProcessor.addDataRatiosForCoordinateType(chartType, limitMap, hasRadius);
	            };
	        } else {
	            addDataRatio = function(chartType) {
	                var stackType = (seriesOption[chartType] || seriesOption).stackType;

	                self.dataProcessor.addDataRatios(limitMap[chartType], stackType, chartType);
	            };
	        }

	        snippet.forEachArray(chartTypes, addDataRatio);
	    },
	    /**
	     * Add components
	     * @override
	     */
	    addComponents: function() {
	        this.componentManager.register('title', 'title');
	        this.componentManager.register('plot', 'plot');

	        this.componentManager.register('lineSeries', 'lineSeries');

	        this.componentManager.register('xAxis', 'axis');
	        this.componentManager.register('yAxis', 'axis');

	        this.componentManager.register('legend', 'legend');

	        this.componentManager.register('chartExportMenu', 'chartExportMenu');

	        this.componentManager.register('tooltip', 'tooltip');
	        this.componentManager.register('mouseEventDetector', 'mouseEventDetector');
	    },
	    /**
	     * Get scale option.
	     * from lineTypeMixer
	     * @returns {{xAxis: ?{valueType:string}, yAxis: ?(boolean|{valueType:string})}}
	     * @override
	     */
	    getScaleOption: function() {
	        var scaleOption = {};
	        var xAxisOption = this.options.xAxis;
	        var hasDateFormat, isDateTimeTypeXAxis;

	        if (this.dataProcessor.isCoordinateType()) {
	            isDateTimeTypeXAxis = xAxisOption && xAxisOption.type === 'datetime';
	            hasDateFormat = isDateTimeTypeXAxis && snippet.isExisty(xAxisOption.dateFormat);

	            scaleOption.xAxis = {
	                valueType: 'x'
	            };

	            if (isDateTimeTypeXAxis) {
	                scaleOption.xAxis.type = (xAxisOption || {}).dateTime;
	            }

	            if (hasDateFormat) {
	                scaleOption.xAxis.format = (xAxisOption || {}).dateFormat;
	            }

	            scaleOption.yAxis = {
	                valueType: 'y'
	            };
	        } else {
	            scaleOption.yAxis = true;
	        }

	        return scaleOption;
	    },

	    /**
	     * Add plot line.
	     * @param {{index: number, color: string, id: string}} data - data
	     * @override
	     * @api
	     */
	    addPlotLine: function(data) {
	        this.componentManager.get('plot').addPlotLine(data);
	    },

	    /**
	     * Add plot band.
	     * @param {{range: Array.<number>, color: string, id: string}} data - data
	     * @override
	     * @api
	     */
	    addPlotBand: function(data) {
	        this.componentManager.get('plot').addPlotBand(data);
	    },

	    /**
	     * Remove plot line.
	     * @param {string} id - line id
	     * @override
	     * @api
	     */
	    removePlotLine: function(id) {
	        this.componentManager.get('plot').removePlotLine(id);
	    },

	    /**
	     * Remove plot band.
	     * @param {string} id - band id
	     * @override
	     * @api
	     */
	    removePlotBand: function(id) {
	        this.componentManager.get('plot').removePlotBand(id);
	    },
	    /**
	     * Render for zoom.
	     * from chart/zoomMixer
	     * @param {boolean} isResetZoom - whether reset zoom or not
	     * @private
	     */
	    _renderForZoom: function(isResetZoom) {
	        var boundsAndScale = this.readyForRender();

	        this.componentManager.render('zoom', boundsAndScale, {
	            isResetZoom: isResetZoom
	        });
	    },

	    /**
	     * On zoom.
	     * nnfrom chart/zoomMixer
	     * @param {Array.<number>} indexRange - index range for zoom
	     * @override
	     */
	    onZoom: function(indexRange) {
	        this._dynamicDataHelper.pauseAnimation();
	        this.dataProcessor.updateRawDataForZoom(indexRange);
	        this._renderForZoom(false);
	    },

	    /**
	     * On reset zoom.
	     * from chart/zoomMixer
	     * @override
	     */
	    onResetZoom: function() {
	        var rawData = this.dataProcessor.getOriginalRawData();

	        if (this._dynamicDataHelper.checkedLegends) {
	            rawData = rawDataHandler.filterCheckedRawData(rawData, this._dynamicDataHelper.checkedLegends);
	        }

	        this.dataProcessor.initData(rawData);
	        this.dataProcessor.initZoomedRawData();
	        this.dataProcessor.addDataFromRemainDynamicData(snippet.pick(this.options.series, 'shifting'));
	        this._renderForZoom(true);
	        this._dynamicDataHelper.restartAnimation();
	    }
	});

	module.exports = LineChart;


/***/ }),
/* 126 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var chartConst = __webpack_require__(8);
	var predicate = __webpack_require__(21);
	var snippet = __webpack_require__(6);

	var DynamicDataHelper = snippet.defineClass(/** @lends DynamicDataHelper.prototype */ {
	    init: function(chart) {
	        var firstRenderCheck = snippet.bind(function() {
	            this.isInitRenderCompleted = true;
	            this.chart.off(firstRenderCheck);
	        }, this);

	        /**
	         * chart instance
	         * @type {ChartBase}
	         */
	        this.chart = chart;

	        this.isInitRenderCompleted = false;

	        this.chart.on('load', firstRenderCheck);

	        this.reset();
	    },
	    reset: function() {
	        /**
	         * whether lookupping or not
	         * @type {boolean}
	         */
	        this.lookupping = false;

	        /**
	         * whether paused or not
	         * @type {boolean}
	         */
	        this.paused = false;

	        /**
	         * rendering delay timer id
	         * @type {null}
	         */
	        this.rerenderingDelayTimerId = null;

	        /**
	         * added data count
	         * @type {number}
	         */
	        this.addedDataCount = 0;

	        /**
	         * checked legends.
	         * @type {null | Array.<?boolean> | {line: ?Array.<boolean>, column: ?Array.<boolean>}}
	         */
	        this.checkedLegends = null;

	        /**
	         * previous xAxis data
	         * @type {null|object}
	         */
	        this.prevXAxisData = null;
	    },
	    /**
	     * Calculate animate tick size.
	     * @param {number} xAxisWidth - x axis width
	     * @returns {number}
	     * @private
	     */
	    _calculateAnimateTickSize: function(xAxisWidth) {
	        var dataProcessor = this.chart.dataProcessor;
	        var tickInterval = this.chart.options.xAxis.tickInterval;
	        var shiftingOption = !!this.chart.options.series.shifting;
	        var tickCount;

	        if (dataProcessor.isCoordinateType()) {
	            tickCount = dataProcessor.getValues(this.chart.chartType, 'x').length - 1;
	        } else {
	            tickCount = dataProcessor.getCategoryCount(false) - 1;
	        }

	        if (shiftingOption && !predicate.isAutoTickInterval(tickInterval)) {
	            tickCount -= 1;
	        }

	        return xAxisWidth / tickCount;
	    },

	    /**
	     * Animate for adding data.
	     * @private
	     */
	    _animateForAddingData: function() {
	        var chart = this.chart;
	        var boundsAndScale = chart.readyForRender(true);
	        var shiftingOption = !!this.chart.options.series.shifting;
	        var tickSize;

	        this.addedDataCount += 1;

	        tickSize = this._calculateAnimateTickSize(boundsAndScale.dimensionMap.xAxis.width);

	        chart.componentManager.render('animateForAddingData', boundsAndScale, {
	            tickSize: tickSize,
	            shifting: shiftingOption
	        });

	        if (shiftingOption) {
	            chart.dataProcessor.shiftData();
	        }
	    },

	    /**
	     * Rerender for adding data.
	     * @private
	     */
	    _rerenderForAddingData: function() {
	        var chart = this.chart;
	        var boundsAndScale = chart.readyForRender();
	        chart.componentManager.render('rerender', boundsAndScale);
	    },

	    /**
	     * Check for added data.
	     * @private
	     */
	    _checkForAddedData: function() {
	        var chart = this.chart;
	        var self = this;
	        var added = chart.dataProcessor.addDataFromDynamicData();

	        if (!added) {
	            this.lookupping = false;

	            return;
	        }

	        if (this.paused) {
	            if (chart.options.series.shifting) {
	                chart.dataProcessor.shiftData();
	            }

	            return;
	        }

	        this._animateForAddingData();

	        this.rerenderingDelayTimerId = setTimeout(function() {
	            self.rerenderingDelayTimerId = null;
	            self._rerenderForAddingData();
	            self._checkForAddedData();
	        }, 400);
	    },

	    /**
	     * Change checked legend.
	     * @param {Array.<?boolean> | {line: ?Array.<boolean>, column: ?Array.<boolean>}} checkedLegends checked legends
	     * @param {?object} rawData rawData
	     * @param {?object} boundsParams addition params for calculating bounds
	     */
	    changeCheckedLegends: function(checkedLegends, rawData, boundsParams) {
	        var self = this;
	        var chart = this.chart;
	        var shiftingOption = !!chart.options.series.shifting;
	        var pastPaused = this.paused;

	        if (!pastPaused) {
	            this.pauseAnimation();
	        }

	        this.checkedLegends = checkedLegends;
	        chart.rerender(checkedLegends, rawData, boundsParams);

	        if (!pastPaused) {
	            setTimeout(function() {
	                chart.dataProcessor.addDataFromRemainDynamicData(shiftingOption);
	                self.restartAnimation();
	            }, chartConst.RERENDER_TIME);
	        }
	    },

	    /**
	     * Pause animation for adding data.
	     */
	    pauseAnimation: function() {
	        this.paused = true;

	        if (this.rerenderingDelayTimerId) {
	            clearTimeout(this.rerenderingDelayTimerId);
	            this.rerenderingDelayTimerId = null;

	            if (this.chart.options.series.shifting) {
	                this.chart.dataProcessor.shiftData();
	            }
	        }
	    },

	    /**
	     * Restart animation for adding data.
	     */
	    restartAnimation: function() {
	        this.paused = false;
	        this.lookupping = false;
	        this._startLookup();
	    },

	    /**
	     * Start lookup for checking added data.
	     * @private
	     */
	    _startLookup: function() {
	        if (this.lookupping) {
	            return;
	        }

	        this.lookupping = true;

	        this._checkForAddedData();
	    },

	    /**
	     * Add data.
	     * @param {string} category - category
	     * @param {Array} values - values
	     */
	    addData: function(category, values) {
	        if (!values) {
	            values = category;
	            category = null;
	        }

	        this.chart.dataProcessor.addDynamicData(category, values);

	        // we should not animate for added data if initial render have not completed
	        if (this.isInitRenderCompleted) {
	            this._startLookup();
	        } else if (values) {
	            this.addedDataCount += 1;
	        }
	    }
	});

	module.exports = DynamicDataHelper;


/***/ }),
/* 127 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileoverview Area chart
	 * @author NHN Ent.
	 *         FE Development Lab <dl_javascript@nhnent.com>
	 */

	'use strict';

	var ChartBase = __webpack_require__(42);
	var DynamicDataHelper = __webpack_require__(126);
	var rawDataHandler = __webpack_require__(31);
	var Series = __webpack_require__(88);
	var snippet = __webpack_require__(6);

	var AreaChart = snippet.defineClass(ChartBase, /** @lends AreaChart.prototype */ {
	    /**
	     * className
	     * @type {string}
	     */
	    className: 'tui-area-chart',

	    /**
	     * Series class
	     * @type {function}
	     */
	    Series: Series,

	    /**
	     * Area chart.
	     * @constructs AreaChart
	     * @extends ChartBase
	     * @param {Array.<Array>} rawData - raw data
	     * @param {object} theme - chart theme
	     * @param {object} options - chart options
	     * @mixes axisTypeMixer
	     * @mixes lineTypeMixer
	     */
	    init: function(rawData, theme, options) {
	        rawDataHandler.removeSeriesStack(rawData.series);
	        ChartBase.call(this, {
	            rawData: rawData,
	            theme: theme,
	            options: options,
	            hasAxes: true,
	            isVertical: true
	        });

	        this._dynamicDataHelper = new DynamicDataHelper(this);
	    },
	    /**
	     * Add data.
	     * @param {string} category - category
	     * @param {Array} values - values
	     */
	    addData: function(category, values) {
	        this._dynamicDataHelper.addData(category, values);
	    },
	    /**
	     * On change checked legend.
	     * @param {Array.<?boolean> | {line: ?Array.<boolean>, column: ?Array.<boolean>}} checkedLegends checked legends
	     * @param {?object} rawData rawData
	     * @param {?object} boundsParams addition params for calculating bounds
	     * @override
	     */
	    onChangeCheckedLegends: function(checkedLegends, rawData, boundsParams) {
	        this._dynamicDataHelper.reset();
	        this._dynamicDataHelper.changeCheckedLegends(checkedLegends, rawData, boundsParams);
	    },
	    /**
	     * Add data ratios.
	     * @override
	     * from axisTypeMixer
	     */
	    addDataRatios: function(limitMap) {
	        var self = this;
	        var chartTypes = this.chartTypes || [this.chartType];
	        var seriesOption = this.options.series || {};
	        var addDataRatio;

	        if (this.dataProcessor.isCoordinateType()) {
	            addDataRatio = function(chartType) {
	                self.dataProcessor.addDataRatiosForCoordinateType(chartType, limitMap, false);
	            };
	        } else {
	            addDataRatio = function(chartType) {
	                var stackType = (seriesOption[chartType] || seriesOption).stackType;
	                self.dataProcessor.addDataRatios(limitMap[chartType], stackType, chartType);
	            };
	        }

	        snippet.forEachArray(chartTypes, addDataRatio);
	    },

	    /**
	     * Add components
	     * @override
	     */
	    addComponents: function() {
	        this.componentManager.register('title', 'title');
	        this.componentManager.register('plot', 'plot');
	        this.componentManager.register('legend', 'legend');

	        this.componentManager.register('areaSeries', 'areaSeries');

	        this.componentManager.register('xAxis', 'axis');
	        this.componentManager.register('yAxis', 'axis');

	        this.componentManager.register('chartExportMenu', 'chartExportMenu');
	        this.componentManager.register('tooltip', 'tooltip');
	        this.componentManager.register('mouseEventDetector', 'mouseEventDetector');
	    },
	    /**
	     * Get scale option.
	     * from lineTypeMixer
	     * @returns {{xAxis: ?{valueType:string}, yAxis: ?(boolean|{valueType:string})}}
	     * @override
	     */
	    getScaleOption: function() {
	        var scaleOption = {};

	        if (this.dataProcessor.isCoordinateType()) {
	            scaleOption.xAxis = {
	                valueType: 'x'
	            };
	            scaleOption.yAxis = {
	                valueType: 'y'
	            };
	        } else {
	            scaleOption.yAxis = true;
	        }

	        return scaleOption;
	    },

	    /**
	     * Add plot line.
	     * @param {{index: number, color: string, id: string}} data - data
	     * @override
	     * @api
	     */
	    addPlotLine: function(data) {
	        this.componentManager.get('plot').addPlotLine(data);
	    },

	    /**
	     * Add plot band.
	     * @param {{range: Array.<number>, color: string, id: string}} data - data
	     * @override
	     * @api
	     */
	    addPlotBand: function(data) {
	        this.componentManager.get('plot').addPlotBand(data);
	    },

	    /**
	     * Remove plot line.
	     * @param {string} id - line id
	     * @override
	     * @api
	     */
	    removePlotLine: function(id) {
	        this.componentManager.get('plot').removePlotLine(id);
	    },

	    /**
	     * Remove plot band.
	     * @param {string} id - band id
	     * @override
	     * @api
	     */
	    removePlotBand: function(id) {
	        this.componentManager.get('plot').removePlotBand(id);
	    },
	    /**
	     * Render for zoom.
	     * from chart/zoomMixer
	     * @param {boolean} isResetZoom - whether reset zoom or not
	     * @private
	     */
	    _renderForZoom: function(isResetZoom) {
	        var boundsAndScale = this.readyForRender();

	        this.componentManager.render('zoom', boundsAndScale, {
	            isResetZoom: isResetZoom
	        });
	    },

	    /**
	     * On zoom.
	     * nnfrom chart/zoomMixer
	     * @param {Array.<number>} indexRange - index range for zoom
	     * @override
	     */
	    onZoom: function(indexRange) {
	        this._dynamicDataHelper.pauseAnimation();
	        this.dataProcessor.updateRawDataForZoom(indexRange);
	        this._renderForZoom(false);
	    },

	    /**
	     * On reset zoom.
	     * from chart/zoomMixer
	     * @override
	     */
	    onResetZoom: function() {
	        var rawData = this.dataProcessor.getOriginalRawData();

	        if (this._dynamicDataHelper.checkedLegends) {
	            rawData = rawDataHandler.filterCheckedRawData(rawData, this._dynamicDataHelper.checkedLegends);
	        }

	        this.dataProcessor.initData(rawData);
	        this.dataProcessor.initZoomedRawData();
	        this.dataProcessor.addDataFromRemainDynamicData(snippet.pick(this.options.series, 'shifting'));
	        this._renderForZoom(true);
	        this._dynamicDataHelper.restartAnimation();
	    }
	});

	module.exports = AreaChart;


/***/ }),
/* 128 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileoverview Column and Line Combo chart.
	 * @author NHN Ent.
	 *         FE Development Lab <dl_javascript@nhnent.com>
	 */

	'use strict';

	var ChartBase = __webpack_require__(42);
	var rawDataHandler = __webpack_require__(31);
	var predicate = __webpack_require__(21);
	var validTypeMakerForYAxisOptions = __webpack_require__(129);
	var snippet = __webpack_require__(6);

	var ColumnLineComboChart = snippet.defineClass(ChartBase, /** @lends ColumnLineComboChart.prototype */ {
	    /**
	     * Column and Line Combo chart.
	     * @constructs ColumnLineComboChart
	     * @extends ChartBase
	     * @param {Array.<Array>} rawData raw data
	     * @param {object} theme chart theme
	     * @param {object} options chart options
	     */
	    init: function(rawData, theme, options) {
	        var typeData = validTypeMakerForYAxisOptions({
	            rawSeriesData: rawData.series,
	            yAxisOptions: options.yAxis
	        });

	        /**
	         * chart types
	         * @type {Object}
	         */
	        this.chartTypes = typeData.chartTypes;

	        /**
	         * series types
	         * @type {Object|Array.<T>}
	         */
	        this.seriesTypes = typeData.seriesTypes;

	        /**
	         * yAxis options
	         * @type {object}
	         */
	        this.yAxisOptions = this._makeYAxisOptions(this.chartTypes, options.yAxis);

	        /**
	         * whether has right y axis or not
	         * @type {boolean}
	         */
	        this.hasRightYAxis = snippet.isArray(options.yAxis) && options.yAxis.length > 1;

	        options.tooltip = options.tooltip || {};
	        options.tooltip.grouped = true;

	        ChartBase.call(this, {
	            rawData: rawData,
	            theme: theme,
	            options: options,
	            hasAxes: true,
	            isVertical: true
	        });
	    },

	    /**
	     * Make yAxis options.
	     * @param {Array.<string>} chartTypes chart types
	     * @param {?object} yAxisOptions yAxis options
	     * @returns {{column: ?object, line: ?object}} options map
	     * @private
	     * from verticalTypeComboMixer
	     */
	    _makeYAxisOptions: function(chartTypes, yAxisOptions) {
	        var options = {};
	        yAxisOptions = yAxisOptions || {};
	        snippet.forEachArray(chartTypes, function(chartType, index) {
	            options[chartType] = yAxisOptions[index] || yAxisOptions;
	        });

	        return options;
	    },

	    /**
	     * On change selected legend.
	     * @param {Array.<?boolean> | {line: ?Array.<boolean>, column: ?Array.<boolean>}} checkedLegends checked legends
	     */
	    onChangeCheckedLegends: function(checkedLegends) {
	        var originalRawData = this.dataProcessor.getOriginalRawData();
	        var rawData = rawDataHandler.filterCheckedRawData(originalRawData, checkedLegends);
	        var typeData = validTypeMakerForYAxisOptions({
	            rawSeriesData: rawData.series,
	            yAxisOptions: this.options.yAxis
	        });

	        this.chartTypes = typeData.chartTypes;
	        this.seriesTypes = typeData.seriesTypes;

	        this.rerender(checkedLegends, rawData, typeData);
	    },

	    /**
	     * Add components
	     * @override
	     */
	    addComponents: function() {
	        this.componentManager.register('title', 'title');
	        this.componentManager.register('plot', 'plot');
	        this.componentManager.register('legend', 'legend');

	        this.componentManager.register('columnSeries', 'columnSeries');
	        this.componentManager.register('lineSeries', 'lineSeries');

	        this.componentManager.register('yAxis', 'axis');

	        if (this.hasRightYAxis) {
	            this.componentManager.register('rightYAxis', 'axis');
	        }

	        this.componentManager.register('xAxis', 'axis');

	        this.componentManager.register('chartExportMenu', 'chartExportMenu');
	        this.componentManager.register('tooltip', 'tooltip');
	        this.componentManager.register('mouseEventDetector', 'mouseEventDetector');
	    },
	    /**
	     * Get scale option.
	     * @returns {{
	     *      yAxis: {options: object, areaType: string, chartType: string, additionalParams: object},
	     *      rightYAxis: {options: object, areaType: string, chartType: string, additionalParams: object}
	     * }}
	     * @override
	     */
	    getScaleOption: function() {
	        var scaleOption = {
	            yAxis: this._makeYAxisScaleOption('yAxis', this.chartTypes[0], !this.hasRightYAxis)
	        };

	        if (this.hasRightYAxis) {
	            scaleOption.rightYAxis = this._makeYAxisScaleOption('rightYAxis', this.chartTypes[1]);
	        }

	        return scaleOption;
	    },
	    /**
	     * Make y axis scale option.
	     * @param {string} name - component name
	     * @param {string} chartType - chart type
	     * @param {boolean} isSingleYAxis - whether single y axis or not
	     * @returns {{options: object, areaType: string, chartType: string, additionalParams: object}}
	     * @private
	     * from verticalTypeComboMixer
	     */
	    _makeYAxisScaleOption: function(name, chartType, isSingleYAxis) {
	        var yAxisOption = this.yAxisOptions[chartType];
	        var additionalOptions = {
	            isSingleYAxis: !!isSingleYAxis
	        };

	        if (isSingleYAxis && this.options.series) {
	            this._setAdditionalOptions(additionalOptions);
	        }

	        return {
	            options: yAxisOption,
	            areaType: 'yAxis',
	            chartType: chartType,
	            additionalOptions: additionalOptions
	        };
	    },

	    /**
	     * Set additional parameter for making y axis scale option.
	     * @param {{isSingleYAxis: boolean}} additionalOptions - additional options
	     * @private
	     * from verticalTypeComboMixer
	     */
	    _setAdditionalOptions: function(additionalOptions) {
	        var dataProcessor = this.dataProcessor;

	        snippet.forEach(this.options.series, function(seriesOption, seriesType) {
	            var chartType;

	            if (!seriesOption.stackType) {
	                return;
	            }

	            chartType = dataProcessor.findChartType(seriesType);

	            if (!predicate.isAllowedStackOption(chartType)) {
	                return;
	            }

	            additionalOptions.chartType = chartType;
	            additionalOptions.stackType = seriesOption.stackType;
	        });
	    },
	    /**
	     * Add data ratios.
	     * @override
	     * from axisTypeMixer
	     */
	    addDataRatios: function(limitMap) {
	        var self = this;
	        var chartTypes = this.chartTypes || [this.chartType];
	        var seriesOption = this.options.series || {};
	        var addDataRatio;

	        addDataRatio = function(chartType) {
	            var stackType = (seriesOption[chartType] || seriesOption).stackType;

	            self.dataProcessor.addDataRatios(limitMap[chartType], stackType, chartType);
	        };

	        snippet.forEachArray(chartTypes, addDataRatio);
	    }
	});

	module.exports = ColumnLineComboChart;


/***/ }),
/* 129 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileoverview Implements valid type maker on yAxisOptions
	 * @author NHN Ent.
	 *         FE Development Lab <dl_javascript@nhnent.com>
	 */

	'use strict';

	var snippet = __webpack_require__(6);

	/**
	 * Make valid types on yAxisOptions
	 * @param {object} params parameters
	 * @param {Array.<Array>} params.rawSeriesData raw series data
	 * @param {object} params.yAxisOptions chart yAxis options
	 * @param {string} params.chartType chart type
	 * @returns {object} {
	 *     chartTypes: Array.<string>,
	 *     seriesTypes: Array.<string>,
	 *     hasRightYAxis: boolean,
	 *     yAxisOptionsMap: object
	 * }
	 * @ignore
	 */
	function validTypeMakerForYAxisOptions(params) {
	    var rawSeriesData = params.rawSeriesData;
	    var yAxisOptions = params.yAxisOptions;
	    var chartTypesMap = makeChartTypesMap(rawSeriesData, yAxisOptions);

	    return {
	        chartTypes: chartTypesMap.chartTypes,
	        seriesTypes: chartTypesMap.seriesTypes
	    };
	}

	/**
	 * Make chart types map.
	 * @param {object} rawSeriesData raw series data
	 * @param {object} yAxisOption option for y axis
	 * @returns {object} chart types map
	 * @private
	 */
	function makeChartTypesMap(rawSeriesData, yAxisOption) {
	    var seriesTypes = snippet.keys(rawSeriesData).sort();
	    var optionChartTypes = getYAxisOptionChartTypes(seriesTypes, yAxisOption);
	    var chartTypes = optionChartTypes.length ? optionChartTypes : seriesTypes;
	    var validChartTypes = snippet.filter(optionChartTypes, function(_chartType) {
	        return rawSeriesData[_chartType].length;
	    });
	    var chartTypesMap;

	    if (validChartTypes.length === 1) {
	        chartTypesMap = {
	            chartTypes: validChartTypes,
	            seriesTypes: validChartTypes
	        };
	    } else {
	        chartTypesMap = {
	            chartTypes: chartTypes,
	            seriesTypes: seriesTypes
	        };
	    }

	    return chartTypesMap;
	}

	/**
	 * Get y axis option chart types.
	 * @param {Array.<string>} chartTypes chart types
	 * @param {object} yAxisOption - options for y axis
	 * @returns {Array.<string>}
	 * @private
	 */
	function getYAxisOptionChartTypes(chartTypes, yAxisOption) {
	    var resultChartTypes = chartTypes.slice();
	    var yAxisOptions = [].concat(yAxisOption || []);
	    var isReverse = false;
	    var optionChartTypes;

	    if (!yAxisOptions.length || (yAxisOptions.length === 1 && !yAxisOptions[0].chartType)) {
	        resultChartTypes = [];
	    } else if (yAxisOptions.length) {
	        optionChartTypes = snippet.map(yAxisOptions, function(option) {
	            return option.chartType;
	        });

	        snippet.forEachArray(optionChartTypes, function(chartType, index) {
	            isReverse = isReverse || ((chartType && resultChartTypes[index] !== chartType) || false);
	        });

	        if (isReverse) {
	            resultChartTypes.reverse();
	        }
	    }

	    return resultChartTypes;
	}

	module.exports = validTypeMakerForYAxisOptions;


/***/ }),
/* 130 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileoverview Line and Scatter Combo chart.
	 * @author NHN Ent.
	 *         FE Development Lab <dl_javascript@nhnent.com>
	 */

	'use strict';

	var ChartBase = __webpack_require__(42);
	var snippet = __webpack_require__(6);

	var LineScatterComboChart = snippet.defineClass(ChartBase, /** @lends LineScatterComboChart.prototype */ {
	    /**
	     * Line and Scatter Combo chart.
	     * @constructs LineScatterComboChart
	     * @extends ChartBase
	     * @param {Array.<Array>} rawData - raw data
	     * @param {object} theme - chart theme
	     * @param {object} options - chart options
	     */
	    init: function(rawData, theme, options) {
	        /**
	         * chart types map
	         * @type {Object}
	         */
	        this.chartTypes = ['line', 'scatter'];

	        /**
	         * series types
	         * @type {Object|Array.<T>}
	         */
	        this.seriesTypes = ['line', 'scatter'];

	        ChartBase.call(this, {
	            rawData: rawData,
	            theme: theme,
	            options: options,
	            hasAxes: true,
	            isVertical: true
	        });
	    },

	    /**
	     * Get scale option.
	     * @returns {{
	     *      yAxis: {valueType: string, additionalOptions: {isSingleYAxis: boolean}},
	     *      xAxis: {valueType: string}
	     * }}
	     * @override
	     */
	    getScaleOption: function() {
	        return {
	            yAxis: {
	                valueType: 'y'
	            },
	            xAxis: {
	                valueType: 'x'
	            }
	        };
	    },

	    /**
	     * Add data ratios.
	     * @override
	     * from axisTypeMixer
	     */
	    addDataRatios: function(limitMap) {
	        var self = this;
	        var chartTypes = this.chartTypes || [this.chartType];
	        var addDataRatio;

	        addDataRatio = function(chartType) {
	            self.dataProcessor.addDataRatiosForCoordinateType(chartType, limitMap, false);
	        };

	        snippet.forEachArray(chartTypes, addDataRatio);
	    },

	    /**
	     * Add components
	     * @override
	     */
	    addComponents: function() {
	        this.componentManager.register('title', 'title');
	        this.componentManager.register('plot', 'plot');
	        this.componentManager.register('legend', 'legend');

	        this.componentManager.register('lineSeries', 'lineSeries');
	        this.componentManager.register('scatterSeries', 'scatterSeries');

	        this.componentManager.register('yAxis', 'axis');
	        this.componentManager.register('xAxis', 'axis');

	        this.componentManager.register('chartExportMenu', 'chartExportMenu');
	        this.componentManager.register('tooltip', 'tooltip');
	        this.componentManager.register('mouseEventDetector', 'mouseEventDetector');
	    }
	});

	module.exports = LineScatterComboChart;


/***/ }),
/* 131 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileoverview Line and Area Combo chart.
	 * @author NHN Ent.
	 *         FE Development Lab <dl_javascript@nhnent.com>
	 */

	'use strict';

	var ChartBase = __webpack_require__(42);
	var rawDataHandler = __webpack_require__(31);
	var predicate = __webpack_require__(21);
	var validTypeMakerForYAxisOptions = __webpack_require__(129);
	var DynamicDataHelper = __webpack_require__(126);
	var snippet = __webpack_require__(6);

	var LineAreaComboChart = snippet.defineClass(ChartBase, /** @lends LineAreaComboChart.prototype */ {
	    /**
	     * className
	     * @type {string}
	     */
	    className: 'tui-combo-chart',
	    /**
	     * Line and Area Combo chart.
	     * @constructs LineAreaComboChart
	     * @extends ChartBase
	     * @param {Array.<Array>} rawData - raw data
	     * @param {object} theme - chart theme
	     * @param {object} options - chart options
	     */
	    init: function(rawData, theme, options) {
	        var typeData = validTypeMakerForYAxisOptions({
	            rawSeriesData: rawData.series,
	            yAxisOptions: options.yAxis
	        });

	        /**
	         * chart types
	         * @type {Object}
	         */
	        this.chartTypes = typeData.chartTypes;

	        /**
	         * series types
	         * @type {Object|Array.<T>}
	         */
	        this.seriesTypes = typeData.seriesTypes;

	        /**
	         * yAxis options
	         * @type {object}
	         */
	        this.yAxisOptions = this._makeYAxisOptions(this.chartTypes, options.yAxis);

	        /**
	         * whether has right y axis or not
	         * @type {boolean}
	         */
	        this.hasRightYAxis = snippet.isArray(options.yAxis) && options.yAxis.length > 1;

	        options.tooltip = options.tooltip || {};
	        options.tooltip.grouped = true;

	        ChartBase.call(this, {
	            rawData: rawData,
	            theme: theme,
	            options: options,
	            hasAxes: true,
	            isVertical: true
	        });

	        this._dynamicDataHelper = new DynamicDataHelper(this);
	    },

	    /**
	     * On change selected legend.
	     * @param {Array.<?boolean> | {line: ?Array.<boolean>, column: ?Array.<boolean>}} checkedLegends checked legends
	     */
	    onChangeCheckedLegends: function(checkedLegends) {
	        var zoomedRawData = this.dataProcessor.getZoomedRawData();
	        var rawData = rawDataHandler.filterCheckedRawData(zoomedRawData, checkedLegends);
	        var typeData = validTypeMakerForYAxisOptions({
	            rawSeriesData: rawData.series,
	            yAxisOptions: this.options.yAxis
	        });

	        this._dynamicDataHelper.reset();
	        this._dynamicDataHelper.changeCheckedLegends(checkedLegends, rawData, typeData);
	    },
	    /**
	     * Add components
	     * @override
	     */
	    addComponents: function() {
	        this.componentManager.register('title', 'title');
	        this.componentManager.register('plot', 'plot');
	        this.componentManager.register('legend', 'legend');

	        this.componentManager.register('areaSeries', 'areaSeries');
	        this.componentManager.register('lineSeries', 'lineSeries');

	        this.componentManager.register('xAxis', 'axis');
	        this.componentManager.register('yAxis', 'axis');

	        if (this.hasRightYAxis) {
	            this.componentManager.register('rightYAxis', 'axis');
	        }

	        this.componentManager.register('chartExportMenu', 'chartExportMenu');
	        this.componentManager.register('tooltip', 'tooltip');
	        this.componentManager.register('mouseEventDetector', 'mouseEventDetector');
	    },
	    /**
	     * Get scale option.
	     * @returns {{
	     *      yAxis: {options: object, areaType: string, chartType: string, additionalParams: object},
	     *      rightYAxis: {options: object, areaType: string, chartType: string, additionalParams: object}
	     * }}
	     * @override
	     */
	    getScaleOption: function() {
	        var scaleOption = {
	            yAxis: this._makeYAxisScaleOption('yAxis', this.chartTypes[0], !this.hasRightYAxis)
	        };

	        if (this.hasRightYAxis) {
	            scaleOption.rightYAxis = this._makeYAxisScaleOption('rightYAxis', this.chartTypes[1]);
	        }

	        return scaleOption;
	    },
	    /**
	     * Make y axis scale option.
	     * @param {string} name - component name
	     * @param {string} chartType - chart type
	     * @param {boolean} isSingleYAxis - whether single y axis or not
	     * @returns {{options: object, areaType: string, chartType: string, additionalParams: object}}
	     * @private
	     * from verticalTypeComboMixer
	     */
	    _makeYAxisScaleOption: function(name, chartType, isSingleYAxis) {
	        var yAxisOption = this.yAxisOptions[chartType];
	        var additionalOptions = {
	            isSingleYAxis: !!isSingleYAxis
	        };

	        if (isSingleYAxis && this.options.series) {
	            this._setAdditionalOptions(additionalOptions);
	        }

	        return {
	            options: yAxisOption,
	            areaType: 'yAxis',
	            chartType: chartType,
	            additionalOptions: additionalOptions
	        };
	    },
	    /**
	     * Make yAxis options.
	     * @param {Array.<string>} chartTypes chart types
	     * @param {?object} yAxisOptions yAxis options
	     * @returns {{column: ?object, line: ?object}} options map
	     * @private
	     * from verticalTypeComboMixer
	     */
	    _makeYAxisOptions: function(chartTypes, yAxisOptions) {
	        var options = {};
	        yAxisOptions = yAxisOptions || {};
	        snippet.forEachArray(chartTypes, function(chartType, index) {
	            options[chartType] = yAxisOptions[index] || yAxisOptions;
	        });

	        return options;
	    },
	    /**
	     * Add data.
	     * @param {string} category - category
	     * @param {Array} values - values
	     */
	    addData: function(category, values) {
	        this._dynamicDataHelper.addData(category, values);
	    },
	    /**
	     * Set additional parameter for making y axis scale option.
	     * @param {{isSingleYAxis: boolean}} additionalOptions - additional options
	     * @private
	     * from verticalTypeComboMixer
	     */
	    _setAdditionalOptions: function(additionalOptions) {
	        var dataProcessor = this.dataProcessor;

	        snippet.forEach(this.options.series, function(seriesOption, seriesType) {
	            var chartType;

	            if (!seriesOption.stackType) {
	                return;
	            }

	            chartType = dataProcessor.findChartType(seriesType);

	            if (!predicate.isAllowedStackOption(chartType)) {
	                return;
	            }

	            additionalOptions.chartType = chartType;
	            additionalOptions.stackType = seriesOption.stackType;
	        });
	    },
	    /**
	     * Add data ratios.
	     * @override
	     */
	    addDataRatios: function(limitMap) {
	        var self = this;
	        var chartTypes = this.chartTypes || [this.chartType];
	        var seriesOption = this.options.series || {};
	        var addDataRatio;

	        if (this.dataProcessor.isCoordinateType()) {
	            addDataRatio = function(chartType) {
	                self.dataProcessor.addDataRatiosForCoordinateType(chartType, limitMap, false);
	            };
	        } else {
	            addDataRatio = function(chartType) {
	                var stackType = (seriesOption[chartType] || seriesOption).stackType;

	                self.dataProcessor.addDataRatios(limitMap[chartType], stackType, chartType);
	            };
	        }

	        snippet.forEachArray(chartTypes, addDataRatio);
	    },
	    /**
	     * Render for zoom.
	     * from chart/zoomMixer
	     * @param {boolean} isResetZoom - whether reset zoom or not
	     * @private
	     */
	    _renderForZoom: function(isResetZoom) {
	        var boundsAndScale = this.readyForRender();

	        this.componentManager.render('zoom', boundsAndScale, {
	            isResetZoom: isResetZoom
	        });
	    },

	    /**
	     * On zoom.
	     * nnfrom chart/zoomMixer
	     * @param {Array.<number>} indexRange - index range for zoom
	     * @override
	     */
	    onZoom: function(indexRange) {
	        this._dynamicDataHelper.pauseAnimation();
	        this.dataProcessor.updateRawDataForZoom(indexRange);
	        this._renderForZoom(false);
	    },

	    /**
	     * On reset zoom.
	     * from chart/zoomMixer
	     * @override
	     */
	    onResetZoom: function() {
	        var rawData = this.dataProcessor.getOriginalRawData();

	        if (this._dynamicDataHelper.checkedLegends) {
	            rawData = rawDataHandler.filterCheckedRawData(rawData, this._dynamicDataHelper.checkedLegends);
	        }

	        this.dataProcessor.initData(rawData);
	        this.dataProcessor.initZoomedRawData();
	        this.dataProcessor.addDataFromRemainDynamicData(snippet.pick(this.options.series, 'shifting'));
	        this._renderForZoom(true);
	        this._dynamicDataHelper.restartAnimation();
	    }
	});

	module.exports = LineAreaComboChart;


/***/ }),
/* 132 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileoverview Pie and Donut Combo chart.
	 * @author NHN Ent.
	 *         FE Development Lab <dl_javascript@nhnent.com>
	 */

	'use strict';

	var ChartBase = __webpack_require__(42);
	var rawDataHandler = __webpack_require__(31);
	var snippet = __webpack_require__(6);

	var PieDonutComboChart = snippet.defineClass(ChartBase, /** @lends PieDonutComboChart.prototype */ {
	    /**
	     * className
	     * @type {string}
	     */
	    className: 'tui-combo-chart',

	    /**
	     * Pie and Donut Combo chart.
	     * @constructs PieDonutComboChart
	     * @extends ChartBase
	     * @param {Array.<Array>} rawData raw data
	     * @param {object} theme chart theme
	     * @param {object} options chart options
	     */
	    init: function(rawData, theme, options) {
	        /**
	         * chart types.
	         * @type {Array.<string>}
	         */
	        this.seriesTypes = snippet.keys(rawData.series).sort();

	        /**
	         * chart types
	         * @type {Object}
	         */
	        this.chartTypes = ['pie', 'pie'];

	        ChartBase.call(this, {
	            rawData: rawData,
	            theme: theme,
	            options: options,
	            isVertical: true
	        });
	    },

	    /**
	     * Add components
	     * @override
	     */
	    addComponents: function() {
	        this.componentManager.register('title', 'title');
	        this.componentManager.register('legend', 'legend');

	        this.componentManager.register('pie1Series', 'pieSeries');
	        this.componentManager.register('pie2Series', 'pieSeries');

	        this.componentManager.register('chartExportMenu', 'chartExportMenu');
	        this.componentManager.register('tooltip', 'tooltip');
	        this.componentManager.register('mouseEventDetector', 'mouseEventDetector');
	    },
	    /**
	     * Add data ratios.
	     * @override
	     */
	    addDataRatios: function() {
	        var self = this;
	        var seriesTypes = this.seriesTypes || [this.chartType];

	        snippet.forEachArray(seriesTypes, function(chartType) {
	            self.dataProcessor.addDataRatiosOfPieChart(chartType);
	        });
	    },

	    /**
	     * On change selected legend.
	     * @param {Array.<?boolean> | {line: ?Array.<boolean>, column: ?Array.<boolean>}} checkedLegends checked legends
	     * @override
	     */
	    onChangeCheckedLegends: function(checkedLegends) {
	        var originalRawData = this.dataProcessor.getOriginalRawData();
	        var rawData = rawDataHandler.filterCheckedRawData(originalRawData, checkedLegends);

	        ChartBase.prototype.onChangeCheckedLegends.call(this, checkedLegends, rawData, {
	            seriesTypes: this.seriesTypes
	        });
	    }
	});

	module.exports = PieDonutComboChart;


/***/ }),
/* 133 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileoverview Pie chart.
	 * @author NHN Ent.
	 *         FE Development Lab <dl_javascript@nhnent.com>
	 */

	'use strict';

	var ChartBase = __webpack_require__(42);
	var chartConst = __webpack_require__(8);
	var snippet = __webpack_require__(6);

	var PieChart = snippet.defineClass(ChartBase, /** @lends PieChart.prototype */ {
	    /**
	     * className
	     * @type {string}
	     */
	    className: 'tui-pie-chart',

	    /**
	     * Pie chart.
	     * @constructs PieChart
	     * @extends ChartBase
	     * @param {Array.<Array>} rawData raw data
	     * @param {object} theme chart theme
	     * @param {object} options chart options
	     */
	    init: function(rawData, theme, options) {
	        options.tooltip = options.tooltip || {};

	        if (!options.tooltip.align) {
	            options.tooltip.align = chartConst.TOOLTIP_DEFAULT_ALIGN_OPTION;
	        }

	        ChartBase.call(this, {
	            rawData: rawData,
	            theme: theme,
	            options: options
	        });
	    },

	    /**
	     * Add components
	     * @override
	     */
	    addComponents: function() {
	        this.componentManager.register('title', 'title');
	        this.componentManager.register('legend', 'legend');

	        this.componentManager.register('pieSeries', 'pieSeries');

	        this.componentManager.register('chartExportMenu', 'chartExportMenu');
	        this.componentManager.register('tooltip', 'tooltip');
	        this.componentManager.register('mouseEventDetector', 'mouseEventDetector');
	    },

	    /**
	     * Add data ratios.
	     * @override
	     */
	    addDataRatios: function() {
	        this.dataProcessor.addDataRatiosOfPieChart(this.chartType);
	    }
	});

	module.exports = PieChart;


/***/ }),
/* 134 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileoverview Bubble chart.
	 * @author NHN Ent.
	 *         FE Development Lab <dl_javascript@nhnent.com>
	 */

	'use strict';

	var ChartBase = __webpack_require__(42);
	var chartConst = __webpack_require__(8);
	var snippet = __webpack_require__(6);

	var BubbleChart = snippet.defineClass(ChartBase, /** @lends BubbleChart.prototype */ {
	    /**
	     * className
	     * @type {string}
	     */
	    className: 'tui-bubble-chart',
	    /**
	     * Bubble chart.
	     * @constructs BubbleChart
	     * @extends ChartBase
	     * @mixes axisTypeMixer
	     * @param {Array.<Array>} rawData raw data
	     * @param {object} theme chart theme
	     * @param {object} options chart options
	     */
	    init: function(rawData, theme, options) {
	        options.tooltip = options.tooltip || {};
	        options.circleLegend = options.circleLegend || {};

	        if (!options.tooltip.align) {
	            options.tooltip.align = chartConst.TOOLTIP_DEFAULT_ALIGN_OPTION;
	        }

	        if (snippet.isUndefined(options.circleLegend.visible)) {
	            options.circleLegend.visible = true;
	        }

	        options.tooltip.grouped = false;

	        ChartBase.call(this, {
	            rawData: rawData,
	            theme: theme,
	            options: options,
	            hasAxes: true
	        });
	    },

	    /**
	     * Get scale option.
	     * @returns {{xAxis: ?{valueType:string}, yAxis: ?{valueType:string}}}
	     * @override
	     */
	    getScaleOption: function() {
	        var scaleOption = {};

	        if (this.dataProcessor.hasXValue(this.chartType)) {
	            scaleOption.xAxis = {
	                valueType: 'x'
	            };
	        }
	        if (this.dataProcessor.hasYValue(this.chartType)) {
	            scaleOption.yAxis = {
	                valueType: 'y'
	            };
	        }

	        return scaleOption;
	    },

	    /**
	     * Set default options.
	     * @param {object} options - options for bubble chart
	     * @private
	     * @override
	     */
	    _setDefaultOptions: function(options) {
	        ChartBase.prototype._setDefaultOptions.call(this, options);
	        this.options.circleLegend = this.options.circleLegend || {};

	        if (snippet.isUndefined(this.options.circleLegend.visible)) {
	            this.options.circleLegend.visible = true;
	        }
	    },

	    /**
	     * Add components
	     * @override
	     */
	    addComponents: function() {
	        this.componentManager.register('title', 'title');
	        this.componentManager.register('plot', 'plot');
	        this.componentManager.register('legend', 'legend');
	        this.componentManager.register('circleLegend', 'circleLegend');

	        this.componentManager.register('bubbleSeries', 'bubbleSeries');

	        this.componentManager.register('yAxis', 'axis');
	        this.componentManager.register('xAxis', 'axis');

	        this.componentManager.register('chartExportMenu', 'chartExportMenu');
	        this.componentManager.register('tooltip', 'tooltip');
	        this.componentManager.register('mouseEventDetector', 'mouseEventDetector');
	    },
	    /**
	     * Add data ratios.
	     * @override
	     */
	    addDataRatios: function(limitMap) {
	        this.dataProcessor.addDataRatiosForCoordinateType(this.chartType, limitMap, true);
	    }
	});

	module.exports = BubbleChart;


/***/ }),
/* 135 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileoverview Scatter chart is a type of plot or mathematical diagram using Cartesian coordinates
	 *                  to display values for typically two variables for a set of data.
	 * @author NHN Ent.
	 *         FE Development Lab <dl_javascript@nhnent.com>
	 */

	'use strict';

	var ChartBase = __webpack_require__(42);
	var chartConst = __webpack_require__(8);
	var snippet = __webpack_require__(6);

	var ScatterChart = snippet.defineClass(ChartBase, /** @lends ScatterChart.prototype */ {
	    /**
	     * className
	     * @type {string}
	     */
	    className: 'tui-scatter-chart',
	    /**
	     * Scatter chart is a type of plot or mathematical diagram using Cartesian coordinates
	     *  to display values for typically two variables for a set of data.
	     * @constructs ScatterChart
	     * @extends ChartBase
	     * @mixes axisTypeMixer
	     * @param {Array.<Array>} rawData raw data
	     * @param {object} theme chart theme
	     * @param {object} options chart options
	     */
	    init: function(rawData, theme, options) {
	        options.tooltip = options.tooltip || {};

	        if (!options.tooltip.align) {
	            options.tooltip.align = chartConst.TOOLTIP_DEFAULT_ALIGN_OPTION;
	        }

	        options.tooltip.grouped = false;

	        ChartBase.call(this, {
	            rawData: rawData,
	            theme: theme,
	            options: options,
	            hasAxes: true
	        });
	    },

	    /**
	     * Get scale option.
	     * @returns {{xAxis: {valueType: string}, yAxis: {valueType: string}}}
	     * @override
	     */
	    getScaleOption: function() {
	        return {
	            xAxis: {
	                valueType: 'x'
	            },
	            yAxis: {
	                valueType: 'y'
	            }
	        };
	    },
	    /**
	     * Add components
	     * @override
	     */
	    addComponents: function() {
	        this.componentManager.register('title', 'title');
	        this.componentManager.register('plot', 'plot');
	        this.componentManager.register('legend', 'legend');

	        this.componentManager.register('scatterSeries', 'scatterSeries');

	        this.componentManager.register('yAxis', 'axis');
	        this.componentManager.register('xAxis', 'axis');

	        this.componentManager.register('chartExportMenu', 'chartExportMenu');
	        this.componentManager.register('tooltip', 'tooltip');
	        this.componentManager.register('mouseEventDetector', 'mouseEventDetector');
	    },
	    /**
	     * Add data ratios.
	     * @override
	     */
	    addDataRatios: function(limitMap) {
	        this.dataProcessor.addDataRatiosForCoordinateType(this.chartType, limitMap, false);
	    }
	});

	module.exports = ScatterChart;


/***/ }),
/* 136 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileoverview Heatmap chart is a graphical representation of data where the individual values contained
	 *                      in a matrix are represented as colors.
	 * @author NHN Ent.
	 *         FE Development Lab <dl_javascript@nhnent.com>
	 */

	'use strict';

	var ChartBase = __webpack_require__(42);
	var ColorSpectrum = __webpack_require__(137);
	var chartConst = __webpack_require__(8);
	var snippet = __webpack_require__(6);

	var HeatmapChart = snippet.defineClass(ChartBase, /** @lends HeatmapChart.prototype */ {
	    /**
	     *
	     * className
	     * @type {string}
	     */
	    className: 'tui-heatmap-chart',
	    /**
	     * Heatmap chart is a graphical representation of data where the individual values contained
	     *      in a matrix are represented as colors.
	     * @constructs HeatmapChart
	     * @extends ChartBase
	     * @mixes axisTypeMixer
	     * @param {Array.<Array>} rawData raw data
	     * @param {object} theme chart theme
	     * @param {object} options chart options
	     */
	    init: function(rawData, theme, options) {
	        options.tooltip = options.tooltip || {};

	        if (!options.tooltip.align) {
	            options.tooltip.align = chartConst.TOOLTIP_DEFAULT_ALIGN_OPTION;
	        }

	        options.tooltip.grouped = false;

	        ChartBase.call(this, {
	            rawData: rawData,
	            theme: theme,
	            options: options,
	            hasAxes: true,
	            isVertical: true
	        });
	    },

	    /**
	     * Add components.
	     * @private
	     */
	    _addComponents: function() {
	        var seriesTheme = this.theme.series[this.chartType];
	        var colorSpectrum = new ColorSpectrum(seriesTheme.startColor, seriesTheme.endColor);

	        this._addComponentsForAxisType({
	            axis: [
	                {
	                    name: 'yAxis',
	                    isVertical: true
	                },
	                {
	                    name: 'xAxis'
	                }
	            ],
	            legend: {
	                classType: 'spectrumLegend',
	                additionalParams: {
	                    colorSpectrum: colorSpectrum
	                }
	            },
	            series: [
	                {
	                    name: 'heatmapSeries',
	                    data: {
	                        colorSpectrum: colorSpectrum
	                    }
	                }
	            ],
	            tooltip: true,
	            mouseEventDetector: true
	        });
	    },

	    /**
	     * Get scale option.
	     * @returns {{legend: boolean}}
	     * @override
	     */
	    getScaleOption: function() {
	        return {
	            legend: true
	        };
	    },

	    /**
	     * Add data ratios.
	     * @override
	     */
	    addDataRatios: function(limitMap) {
	        this.dataProcessor.addDataRatios(limitMap.legend, null, this.chartType);
	    },

	    /**
	     * Add components.
	     * @override
	     * @private
	     */
	    addComponents: function() {
	        var seriesTheme = this.theme.series[this.chartType];
	        var colorSpectrum = new ColorSpectrum(seriesTheme.startColor, seriesTheme.endColor);

	        this.componentManager.register('title', 'title');
	        this.componentManager.register('legend', 'spectrumLegend', {
	            colorSpectrum: colorSpectrum
	        });

	        this.componentManager.register('heatmapSeries', 'heatmapSeries', {
	            colorSpectrum: colorSpectrum
	        });

	        this.componentManager.register('xAxis', 'axis');
	        this.componentManager.register('yAxis', 'axis');

	        this.componentManager.register('chartExportMenu', 'chartExportMenu');
	        this.componentManager.register('tooltip', 'tooltip', {
	            colorSpectrum: colorSpectrum
	        });
	        this.componentManager.register('mouseEventDetector', 'mouseEventDetector');
	    }
	});

	module.exports = HeatmapChart;


/***/ }),
/* 137 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileoverview ColorSpectrum create a color spectrum and provide color value.
	 * @author NHN Ent.
	 *         FE Development Lab <dl_javascript@nhnent.com>
	 */

	'use strict';

	var colorutil = __webpack_require__(138);
	var snippet = __webpack_require__(6);

	var ColorSpectrum = snippet.defineClass(/** @lends ColorSpectrum.prototype */ {
	    /**
	     * ColorSpectrum create a color spectrum and provide color value.
	     * @constructs ColorSpectrum
	     * @private
	     * @param {string} startColor hex color
	     * @param {string} endColor hex color
	     */
	    init: function(startColor, endColor) {
	        var endRGB;

	        this.start = colorutil.colorNameToHex(startColor);
	        this.startRGB = colorutil.hexToRGB(this.start);
	        this.end = colorutil.colorNameToHex(endColor);

	        endRGB = colorutil.hexToRGB(this.end);
	        this.distances = this._makeDistances(this.startRGB, endRGB);
	        this.colorMap = {};
	    },

	    /**
	     * Make distances start RGB to end RGB.
	     * @param {Array.<number>} startRGB start RGB
	     * @param {Array.<number>} endRGB end RGB
	     * @returns {Array.<number>} distances
	     * @private
	     */
	    _makeDistances: function(startRGB, endRGB) {
	        return snippet.map(startRGB, function(value, index) {
	            return endRGB[index] - value;
	        });
	    },

	    /**
	     * Get hex color.
	     * @param {number} ratio ratio
	     * @returns {string} hex color
	     */
	    getColor: function(ratio) {
	        var hexColor = this.colorMap[ratio];
	        var distances, rgbColor;

	        if (!hexColor) {
	            distances = this.distances;
	            rgbColor = snippet.map(this.startRGB, function(start, index) {
	                return start + parseInt(distances[index] * ratio, 10);
	            });
	            hexColor = colorutil.rgbToHEX.apply(null, rgbColor);
	        }

	        return hexColor || null;
	    }
	});

	module.exports = ColorSpectrum;


/***/ }),
/* 138 */
/***/ (function(module, exports) {

	/**
	 * @fileoverview Utility methods to manipulate colors
	 * @author NHN Ent. FE Development Lab <dl_javascript@nhnent.com>
	 */

	'use strict';

	var hexRX = /(^#[0-9A-F]{6}$)|(^#[0-9A-F]{3}$)/i;

	/**
	 * Color map.
	 * http://stackoverflow.com/questions/1573053/javascript-function-to-convert-color-names-to-hex-codes
	 * http://www.w3schools.com/HTML/html_colornames.asp
	 * @type {object}
	 * @ignore
	 */
	var colorMap = {
	    'aliceblue': '#f0f8ff',
	    'antiquewhite': '#faebd7',
	    'aqua': '#00ffff',
	    'aquamarine': '#7fffd4',
	    'azure': '#f0ffff',
	    'beige': '#f5f5dc',
	    'bisque': '#ffe4c4',
	    'black': '#000000',
	    'blanchedalmond': '#ffebcd',
	    'blue': '#0000ff',
	    'blueviolet': '#8a2be2',
	    'brown': '#a52a2a',
	    'burlywood': '#deb887',
	    'cadetblue': '#5f9ea0',
	    'chartreuse': '#7fff00',
	    'chocolate': '#d2691e',
	    'coral': '#ff7f50',
	    'cornflowerblue': '#6495ed',
	    'cornsilk': '#fff8dc',
	    'crimson': '#dc143c',
	    'cyan': '#00ffff',
	    'darkblue': '#00008b',
	    'darkcyan': '#008b8b',
	    'darkgoldenrod': '#b8860b',
	    'darkgray': '#a9a9a9',
	    'darkgreen': '#006400',
	    'darkkhaki': '#bdb76b',
	    'darkmagenta': '#8b008b',
	    'darkolivegreen': '#556b2f',
	    'darkorange': '#ff8c00',
	    'darkorchid': '#9932cc',
	    'darkred': '#8b0000',
	    'darksalmon': '#e9967a',
	    'darkseagreen': '#8fbc8f',
	    'darkslateblue': '#483d8b',
	    'darkslategray': '#2f4f4f',
	    'darkturquoise': '#00ced1',
	    'darkviolet': '#9400d3',
	    'deeppink': '#ff1493',
	    'deepskyblue': '#00bfff',
	    'dimgray': '#696969',
	    'dodgerblue': '#1e90ff',
	    'firebrick': '#b22222',
	    'floralwhite': '#fffaf0',
	    'forestgreen': '#228b22',
	    'fuchsia': '#ff00ff',
	    'gainsboro': '#dcdcdc',
	    'ghostwhite': '#f8f8ff',
	    'gold': '#ffd700',
	    'goldenrod': '#daa520',
	    'gray': '#808080',
	    'green': '#008000',
	    'greenyellow': '#adff2f',
	    'honeydew': '#f0fff0',
	    'hotpink': '#ff69b4',
	    'indianred ': '#cd5c5c',
	    'indigo': '#4b0082',
	    'ivory': '#fffff0',
	    'khaki': '#f0e68c',
	    'lavender': '#e6e6fa',
	    'lavenderblush': '#fff0f5',
	    'lawngreen': '#7cfc00',
	    'lemonchiffon': '#fffacd',
	    'lightblue': '#add8e6',
	    'lightcoral': '#f08080',
	    'lightcyan': '#e0ffff',
	    'lightgoldenrodyellow': '#fafad2',
	    'lightgrey': '#d3d3d3',
	    'lightgreen': '#90ee90',
	    'lightpink': '#ffb6c1',
	    'lightsalmon': '#ffa07a',
	    'lightseagreen': '#20b2aa',
	    'lightskyblue': '#87cefa',
	    'lightslategray': '#778899',
	    'lightsteelblue': '#b0c4de',
	    'lightyellow': '#ffffe0',
	    'lime': '#00ff00',
	    'limegreen': '#32cd32',
	    'linen': '#faf0e6',
	    'magenta': '#ff00ff',
	    'maroon': '#800000',
	    'mediumaquamarine': '#66cdaa',
	    'mediumblue': '#0000cd',
	    'mediumorchid': '#ba55d3',
	    'mediumpurple': '#9370d8',
	    'mediumseagreen': '#3cb371',
	    'mediumslateblue': '#7b68ee',
	    'mediumspringgreen': '#00fa9a',
	    'mediumturquoise': '#48d1cc',
	    'mediumvioletred': '#c71585',
	    'midnightblue': '#191970',
	    'mintcream': '#f5fffa',
	    'mistyrose': '#ffe4e1',
	    'moccasin': '#ffe4b5',
	    'navajowhite': '#ffdead',
	    'navy': '#000080',
	    'oldlace': '#fdf5e6',
	    'olive': '#808000',
	    'olivedrab': '#6b8e23',
	    'orange': '#ffa500',
	    'orangered': '#ff4500',
	    'orchid': '#da70d6',
	    'palegoldenrod': '#eee8aa',
	    'palegreen': '#98fb98',
	    'paleturquoise': '#afeeee',
	    'palevioletred': '#d87093',
	    'papayawhip': '#ffefd5',
	    'peachpuff': '#ffdab9',
	    'peru': '#cd853f',
	    'pink': '#ffc0cb',
	    'plum': '#dda0dd',
	    'powderblue': '#b0e0e6',
	    'purple': '#800080',
	    'red': '#ff0000',
	    'rosybrown': '#bc8f8f',
	    'royalblue': '#4169e1',
	    'saddlebrown': '#8b4513',
	    'salmon': '#fa8072',
	    'sandybrown': '#f4a460',
	    'seagreen': '#2e8b57',
	    'seashell': '#fff5ee',
	    'sienna': '#a0522d',
	    'silver': '#c0c0c0',
	    'skyblue': '#87ceeb',
	    'slateblue': '#6a5acd',
	    'slategray': '#708090',
	    'snow': '#fffafa',
	    'springgreen': '#00ff7f',
	    'steelblue': '#4682b4',
	    'tan': '#d2b48c',
	    'teal': '#008080',
	    'thistle': '#d8bfd8',
	    'tomato': '#ff6347',
	    'turquoise': '#40e0d0',
	    'violet': '#ee82ee',
	    'wheat': '#f5deb3',
	    'white': '#ffffff',
	    'whitesmoke': '#f5f5f5',
	    'yellow': '#ffff00',
	    'yellowgreen': '#9acd32'
	};

	var colorutil = {
	    /**
	     * pad left zero characters.
	     * @param {number} number number value to pad zero.
	     * @param {number} length pad length to want.
	     * @returns {string} padded string.
	     */
	    leadingZero: function(number, length) {
	        var zero = '',
	            i = 0;

	        if (String(number).length > length) {
	            return String(number);
	        }

	        for (; i < (length - 1); i += 1) {
	            zero += '0';
	        }

	        return (zero + number).slice(length * -1);
	    },

	    /**
	     * Check validate of hex string value is RGB
	     * @param {string} str - rgb hex string
	     * @returns {boolean} return true when supplied str is valid RGB hex string
	     */
	    isValidRGB: function(str) {
	        return hexRX.test(str);
	    },

	    // @license RGB <-> HSV conversion utilities based off of http://www.cs.rit.edu/~ncs/color/t_convert.html

	    /**
	     * Convert color hex string to rgb number array
	     * @param {string} hexStr - hex string
	     * @returns {number[]} rgb numbers
	     */
	    hexToRGB: function(hexStr) {
	        var r, g, b;

	        if (!colorutil.isValidRGB(hexStr)) {
	            return false;
	        }

	        hexStr = hexStr.substring(1);

	        r = parseInt(hexStr.substr(0, 2), 16);
	        g = parseInt(hexStr.substr(2, 2), 16);
	        b = parseInt(hexStr.substr(4, 2), 16);

	        return [r, g, b];
	    },

	    /**
	     * Convert rgb number to hex string
	     * @param {number} r - red
	     * @param {number} g - green
	     * @param {number} b - blue
	     * @returns {string|boolean} return false when supplied rgb number is not valid. otherwise, converted hex string
	     */
	    rgbToHEX: function(r, g, b) {
	        var hexStr = '#' +
	            colorutil.leadingZero(r.toString(16), 2) +
	            colorutil.leadingZero(g.toString(16), 2) +
	            colorutil.leadingZero(b.toString(16), 2);

	        if (colorutil.isValidRGB(hexStr)) {
	            return hexStr;
	        }

	        return false;
	    },

	    /**
	     * Color name to hex.
	     * @param {string} colorName color name
	     * @returns {string} hex
	     */
	    colorNameToHex: function(colorName) {
	        return colorMap[colorName.toLowerCase()] || colorName;
	    }
	};

	module.exports = colorutil;


/***/ }),
/* 139 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileoverview Treemap chart is graphical representation of hierarchical data by using rectangles.
	 * @author NHN Ent.
	 *         FE Development Lab <dl_javascript@nhnent.com>
	 */

	'use strict';

	var ChartBase = __webpack_require__(42);
	var ColorSpectrum = __webpack_require__(137);
	var snippet = __webpack_require__(6);

	var TreemapChart = snippet.defineClass(ChartBase, /** @lends TreemapChart.prototype */ {
	    /**
	     * className
	     * @type {string}
	     */
	    className: 'tui-treemap-chart',
	    /**
	     * Treemap chart is graphical representation of hierarchical data by using rectangles.
	     * @constructs TreemapChart
	     * @extends ChartBase
	     * @param {Array.<Array>} rawData raw data
	     * @param {object} theme chart theme
	     * @param {object} options chart options
	     */
	    init: function(rawData, theme, options) {
	        // options.series = options.series || {};
	        options.tooltip = options.tooltip || {};
	        options.tooltip.grouped = false;

	        ChartBase.call(this, {
	            rawData: rawData,
	            theme: theme,
	            options: options,
	            hasAxes: false,
	            isVertical: true
	        });
	    },

	    /**
	     * Add components.
	     * @override
	     */
	    addComponents: function() {
	        var seriesTheme = this.theme.series[this.chartType];
	        var useColorValue = this.options.series.useColorValue;
	        var colorSpectrum = useColorValue ? (new ColorSpectrum(seriesTheme.startColor, seriesTheme.endColor)) : null;
	        this.componentManager.register('title', 'title');
	        this.componentManager.register('treemapSeries', 'treemapSeries', {
	            colorSpectrum: colorSpectrum
	        });

	        if (useColorValue && this.options.legend.visible) {
	            this.componentManager.register('legend', 'spectrumLegend', {
	                colorSpectrum: colorSpectrum
	            });
	        }

	        this.componentManager.register('tooltip', 'tooltip', snippet.extend({
	            labelTheme: snippet.pick(this.theme, 'series', 'label'),
	            colorSpectrum: colorSpectrum
	        }));

	        this.componentManager.register('mouseEventDetector', 'mouseEventDetector');
	        this.componentManager.register('chartExportMenu', 'chartExportMenu');
	    },

	    /**
	     * Get scale option.
	     * @returns {{legend: boolean}}
	     * @override
	     */
	    getScaleOption: function() {
	        return {
	            legend: true
	        };
	    },

	    /**
	     * Add data ratios to dataProcessor for rendering graph.
	     * @override
	     */
	    addDataRatios: function(limitMap) {
	        this.dataProcessor.addDataRatiosForTreemapChart(limitMap.legend, this.chartType);
	    },

	    /**
	     * On zoom.
	     * @param {number} index - index of target seriesItem
	     */
	    onZoom: function(index) {
	        this.componentManager.render('zoom', null, {
	            index: index
	        });
	    }
	});

	module.exports = TreemapChart;


/***/ }),
/* 140 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileoverview Map chart.
	 * @author NHN Ent.
	 *         FE Development Lab <dl_javascript@nhnent.com>
	 */

	'use strict';

	var ChartBase = __webpack_require__(42);
	var mapManager = __webpack_require__(35);
	var MapChartMapModel = __webpack_require__(141);
	var MapChartDataProcessor = __webpack_require__(142);
	var ColorSpectrum = __webpack_require__(137);
	var snippet = __webpack_require__(6);

	var MapChart = snippet.defineClass(ChartBase, /** @lends MapChart.prototype */ {
	    /**
	     * Map chart.
	     * @constructs MapChart
	     * @extends ChartBase
	     * @param {Array.<Array>} rawData raw data
	     * @param {object} theme chart theme
	     * @param {object} options chart options
	     */
	    init: function(rawData, theme, options) {
	        /**
	         * class name
	         * @type {string}
	         */
	        this.className = 'tui-map-chart';

	        options.map = mapManager.get(options.map);
	        options.tooltip = options.tooltip || {};
	        options.legend = options.legend || {};

	        ChartBase.call(this, {
	            rawData: rawData,
	            theme: theme,
	            options: options,
	            DataProcessor: MapChartDataProcessor
	        });
	    },

	    /**
	     * Add components.
	     * @override
	     * @private
	     */
	    addComponents: function() {
	        var seriesTheme = this.theme.series[this.chartType];
	        var mapModel = new MapChartMapModel(this.dataProcessor, this.options.map);
	        var colorSpectrum = new ColorSpectrum(seriesTheme.startColor, seriesTheme.endColor);

	        this.componentManager.register('mapSeries', 'mapSeries', {
	            mapModel: mapModel,
	            colorSpectrum: colorSpectrum
	        });

	        this.componentManager.register('title', 'title');

	        this.componentManager.register('legend', 'spectrumLegend', {
	            colorSpectrum: colorSpectrum
	        });

	        this.componentManager.register('tooltip', 'tooltip', {
	            mapModel: mapModel,
	            colorSpectrum: colorSpectrum
	        });

	        this.componentManager.register('zoom', 'zoom');
	        this.componentManager.register('mouseEventDetector', 'mapChartEventDetector');
	    },

	    /**
	     * Get scale option.
	     * @returns {{legend: boolean}}
	     * @override
	     */
	    getScaleOption: function() {
	        return {
	            legend: true
	        };
	    },

	    /**
	     * Add data ratios.
	     * @override
	     */
	    addDataRatios: function(limitMap) {
	        this.dataProcessor.addDataRatios(limitMap.legend);
	    }
	});

	module.exports = MapChart;


/***/ }),
/* 141 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileoverview MapChartMapModel is map model of map chart.
	 * @author NHN Ent.
	 *         FE Development Lab <dl_javascript@nhnent.com>
	 */

	'use strict';

	var chartConst = __webpack_require__(8);
	var arrayUtil = __webpack_require__(10);
	var snippet = __webpack_require__(6);

	var MapChartMapModel = snippet.defineClass(/** @lends MapChartMapModel.prototype */ {
	    /**
	     * MapChartMapModel is map model of map chart.
	     * @constructs MapChartMapModel
	     * @param {MapChartDataProcessor} dataProcessor Map chart data processor
	     * @param {Array.<{name: string, path: string, labelCoordinate: ?{x: number, y:number}}>} rawMapData raw map data
	     */
	    init: function(dataProcessor, rawMapData) {
	        /**
	         * Command function map.
	         * @type {{
	         *      M: MapChartMapModel._makeCoordinate, m: MapChartMapModel._makeCoordinateFromRelativeCoordinate,
	         *      L: MapChartMapModel._makeCoordinate, l: MapChartMapModel._makeCoordinateFromRelativeCoordinate,
	         *      H: MapChartMapModel._makeXCoordinate, h: MapChartMapModel._makeXCoordinateFroRelativeCoordinate,
	         *      V: MapChartMapModel._makeYCoordinate, v: MapChartMapModel._makeYCoordinateFromRelativeCoordinate
	         * }}
	         */
	        this.commandFuncMap = {
	            M: snippet.bind(this._makeCoordinate, this),
	            m: snippet.bind(this._makeCoordinateFromRelativeCoordinate, this),
	            L: snippet.bind(this._makeCoordinate, this),
	            l: snippet.bind(this._makeCoordinateFromRelativeCoordinate, this),
	            H: snippet.bind(this._makeXCoordinate, this),
	            h: snippet.bind(this._makeXCoordinateFroRelativeCoordinate, this),
	            V: snippet.bind(this._makeYCoordinate, this),
	            v: snippet.bind(this._makeYCoordinateFromRelativeCoordinate, this)
	        };

	        /**
	         * Ignore command map.
	         * @type {{Z: boolean, z: boolean}}
	         */
	        this.ignoreCommandMap = {
	            Z: true,
	            z: true
	        };

	        /**
	         * Map dimension
	         * @type {{width: number, height: number}}
	         */
	        this.mapDimension = null;

	        /**
	         * Map chart data processor.
	         * @type {MapChartDataProcessor}
	         */
	        this.dataProcessor = dataProcessor;

	        /**
	         * Raw map data.
	         * @type {Array.<{name: string, path: string, labelCoordinate: ?{x: number, y: number}}>}
	         */
	        this.rawMapData = rawMapData;

	        /**
	         * Map data.
	         * @type {null|Array.<object>}
	         */
	        this.mapData = null;
	    },

	    /**
	     * Split coordinate string.
	     * @param {string} coordinateStr coordinate string
	     * @returns {{x: number, y: number}} coordinate map
	     * @private
	     */
	    _splitCoordinate: function(coordinateStr) {
	        var coordinates = coordinateStr.split(','),
	            result = {
	                x: parseFloat(coordinates[0])
	            };

	        if (coordinates[1]) {
	            result.y = parseFloat(coordinates[1]);
	        }

	        return result;
	    },

	    /**
	     * Make coordinate
	     * @param {string} coordinateStr coordinate
	     * @returns {{x: number, y: number}} coordinate
	     * @private
	     */
	    _makeCoordinate: function(coordinateStr) {
	        return this._splitCoordinate(coordinateStr);
	    },

	    /**
	     * Make coordinate from relative coordinate.
	     * @param {string} coordinateStr coordinate
	     * @param {{x: number, y: number}} prevCoordinate previous coordinate
	     * @returns {{x: number, y: number}} coordinate
	     * @private
	     */
	    _makeCoordinateFromRelativeCoordinate: function(coordinateStr, prevCoordinate) {
	        var coordinate = this._splitCoordinate(coordinateStr);

	        return {
	            x: coordinate.x + prevCoordinate.x,
	            y: coordinate.y + prevCoordinate.y
	        };
	    },

	    /**
	     * Make x coordinate.
	     * @param {string} coordinateStr coordinate
	     * @returns {{x: number}} x coordinate
	     * @private
	     */
	    _makeXCoordinate: function(coordinateStr) {
	        var coordinate = this._splitCoordinate(coordinateStr);

	        return {
	            x: coordinate.x
	        };
	    },

	    /**
	     * Make x coordinate from relative coordinate.
	     * @param {string} coordinateStr coordinate
	     * @param {{x: number, y: number}} prevCoordinate previous coordinate
	     * @returns {{x: number}} x coordinate
	     * @private
	     */
	    _makeXCoordinateFroRelativeCoordinate: function(coordinateStr, prevCoordinate) {
	        var coordinate = this._splitCoordinate(coordinateStr);

	        return {
	            x: coordinate.x + prevCoordinate.x
	        };
	    },

	    /**
	     * Make y coordinate.
	     * @param {string} coordinateStr coordinate
	     * @returns {{y: number}} y coordinate
	     * @private
	     */
	    _makeYCoordinate: function(coordinateStr) {
	        var coordinate = this._splitCoordinate(coordinateStr);

	        return {
	            y: coordinate.x
	        };
	    },

	    /**
	     * Make y coordinate from relative coordinate.
	     * @param {string} coordinateStr coordinate
	     * @param {{x: number, y: number}} prevCoordinate previous coordinate
	     * @returns {{y: number}} y coordinate
	     * @private
	     */
	    _makeYCoordinateFromRelativeCoordinate: function(coordinateStr, prevCoordinate) {
	        var coordinate = this._splitCoordinate(coordinateStr);

	        return {
	            y: coordinate.x + prevCoordinate.y
	        };
	    },

	    /**
	     * Split path.
	     * @param {string} path path
	     * @returns {Array.<{type: string, coordinate: string}>} splitted path data
	     * @private
	     */
	    _splitPath: function(path) {
	        var i = 0,
	            len = path.length,
	            pathData = [],
	            coordinate = '',
	            chr, commandType;

	        for (; i < len; i += 1) {
	            chr = path.charAt(i);
	            if (this.commandFuncMap[chr]) {
	                if (commandType && coordinate) {
	                    pathData.push({
	                        type: commandType,
	                        coordinate: coordinate
	                    });
	                }
	                commandType = chr;
	                coordinate = '';
	            } else if (!this.ignoreCommandMap[chr]) {
	                coordinate += chr;
	            }
	        }

	        if (commandType && coordinate) {
	            pathData.push({
	                type: commandType,
	                coordinate: coordinate
	            });
	        }

	        return pathData;
	    },

	    /**
	     * Make coordinates from path.
	     * @param {string} path path
	     * @returns {Array.<{x: number, y: number}>} coordinates
	     * @private
	     */
	    _makeCoordinatesFromPath: function(path) {
	        var self = this,
	            pathData = this._splitPath(path),
	            prevCoordinate = {
	                x: 0,
	                y: 0
	            };

	        return snippet.map(pathData, function(datum) {
	            var commandFunc = self.commandFuncMap[datum.type],
	                coordinate = commandFunc(datum.coordinate, prevCoordinate);

	            snippet.extend(prevCoordinate, coordinate);

	            return coordinate;
	        });
	    },

	    /**
	     * Find bound from coordinates.
	     * @param {Array.<{left: number, top: number}>} coordinates coordinates
	     * @returns {{dimension: {width: number, height: number}, position: {top: number, left: number}}} bound
	     * @private
	     */
	    _findBoundFromCoordinates: function(coordinates) {
	        var xs = snippet.filter(snippet.pluck(coordinates, 'x'), function(x) {
	                return !snippet.isUndefined(x);
	            }),
	            ys = snippet.filter(snippet.pluck(coordinates, 'y'), function(y) {
	                return !snippet.isUndefined(y);
	            }),
	            maxLeft = arrayUtil.max(xs),
	            minLeft = arrayUtil.min(xs),
	            maxTop = arrayUtil.max(ys),
	            minTop = arrayUtil.min(ys);

	        return {
	            dimension: {
	                width: maxLeft - minLeft,
	                height: maxTop - minTop
	            },
	            position: {
	                left: minLeft,
	                top: minTop
	            }
	        };
	    },

	    /**
	     * Make label position.
	     * @param {{dimension: {width: number, height: number}, position: {top: number, left: number}}} bound bound
	     * @param {?{left: number, top: number}} positionRatio position ratio
	     * @returns {{left: number, top: number}} label position
	     * @private
	     */
	    _makeLabelPosition: function(bound, positionRatio) {
	        positionRatio = positionRatio || chartConst.MAP_CHART_LABEL_DEFAULT_POSITION_RATIO;

	        return {
	            left: bound.position.left + (bound.dimension.width * positionRatio.x),
	            top: bound.position.top + (bound.dimension.height * positionRatio.y)
	        };
	    },

	    /**
	     * Create map data.
	     * @param {Array.<{name: string, path: string, labelCoordinate: ?{x: number, y:number}}>} rawMapData raw map data
	     * @returns {Array.<object>}
	     * @private
	     */
	    _createMapData: function(rawMapData) {
	        var self = this;

	        return snippet.map(rawMapData, function(datum) {
	            var coordinate = self._makeCoordinatesFromPath(datum.path),
	                bound = self._findBoundFromCoordinates(coordinate),
	                userData = self.dataProcessor.getValueMapDatum(datum.code),
	                name, labelCoordinate, label, ratio, resultData;

	            if (userData) {
	                label = userData.label;
	                ratio = userData.ratio;
	                name = userData.name || datum.name;
	                labelCoordinate = userData.labelCoordinate || datum.labelCoordinate;
	            }

	            resultData = {
	                code: datum.code,
	                name: name,
	                path: datum.path,
	                bound: bound,
	                labelPosition: self._makeLabelPosition(bound, labelCoordinate)
	            };

	            if (label) {
	                resultData.label = label;
	            }

	            if (ratio >= 0) {
	                resultData.ratio = ratio;
	            }

	            return resultData;
	        });
	    },

	    /**
	     * Get map data.
	     * @returns {Array.<object>}
	     */
	    getMapData: function() {
	        if (!this.mapData) {
	            this.mapData = this._createMapData(this.rawMapData);
	        }

	        return this.mapData;
	    },

	    /**
	     * Get map datum.
	     * @param {number} index - index
	     * @returns {object}
	     */
	    getDatum: function(index) {
	        return this.getMapData()[index];
	    },

	    /**
	     * Get label data.
	     * @param {number} ratio ratio
	     * @returns {Array.<{name: string, bound: {dimension: {width: number, height: number},
	     *          position: {top: number, left: number}}, labelPosition: {width: number, height: number}}>} map data
	     */
	    getLabelData: function(ratio) {
	        var self = this;
	        var mapData = this.getMapData();
	        var labelData = snippet.filter(mapData, function(datum) {
	            return self.dataProcessor.getValueMapDatum(datum.code);
	        });

	        return snippet.map(labelData, function(datum) {
	            return {
	                name: datum.name,
	                labelPosition: {
	                    left: datum.labelPosition.left * ratio,
	                    top: datum.labelPosition.top * ratio
	                }
	            };
	        });
	    },

	    /**
	     * Make map dimension
	     * @returns {{width: number, height: number}} map dimension
	     * @private
	     */
	    _makeMapDimension: function() {
	        var mapData = this.getMapData();
	        var lefts = snippet.map(mapData, function(datum) {
	            return datum.bound.position.left;
	        });
	        var rights = snippet.map(mapData, function(datum) {
	            return datum.bound.position.left + datum.bound.dimension.width;
	        });
	        var tops = snippet.map(mapData, function(datum) {
	            return datum.bound.position.top;
	        });
	        var bottoms = snippet.map(mapData, function(datum) {
	            return datum.bound.position.top + datum.bound.dimension.height;
	        });

	        return {
	            width: arrayUtil.max(rights) - arrayUtil.min(lefts),
	            height: arrayUtil.max(bottoms) - arrayUtil.min(tops)
	        };
	    },

	    /**
	     * Get map dimension.
	     * @returns {{width: number, height: number}} map dimension
	     */
	    getMapDimension: function() {
	        if (!this.mapDimension) {
	            this.mapDimension = this._makeMapDimension();
	        }

	        return this.mapDimension;
	    }
	});

	module.exports = MapChartMapModel;


/***/ }),
/* 142 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileoverview Data processor for map chart.
	 * @author NHN Ent.
	 *         FE Development Lab <dl_javascript@nhnent.com>
	 */

	'use strict';

	var DataProcessorBase = __webpack_require__(102);
	var renderUtil = __webpack_require__(7);
	var snippet = __webpack_require__(6);

	/**
	 * Raw series data.
	 * @typedef {Array.<{code: string, name: ?string, data: number}>} rawSeriesData
	 * @private
	 */

	/**
	 * Value map.
	 * @typedef {{value: number, label: string, name: ?string}} valueMap
	 * @private
	 */

	var MapChartDataProcessor = snippet.defineClass(DataProcessorBase, /** @lends MapChartDataProcessor.prototype */{
	    /**
	     * Data processor for map chart.
	     * @param {rawData} rawData raw data
	     * @param {string} chartType chart type
	     * @param {object} options options
	     * @constructs MapChartDataProcessor
	     * @private
	     * @extends DataProcessor
	     */
	    init: function(rawData, chartType, options) {
	        /**
	         * raw data
	         * @type {rawData}
	         */
	        this.rawData = rawData;

	        /**
	         * chart options
	         * @type {Object}
	         */
	        this.options = options;
	    },

	    /**
	     * Update raw data.
	     * @param {{series: rawSeriesData}} rawData raw data
	     */
	    initData: function(rawData) {
	        this.rawData = rawData;

	        /**
	         * value map
	         * @type {valueMap}
	         */
	        this.valueMap = null;
	    },

	    /**
	     * Make value map.
	     * @returns {valueMap} value map
	     * @private
	     */
	    _makeValueMap: function() {
	        var rawSeriesData = this.rawData.series.map;
	        var valueMap = {};
	        var formatFunctions = this._findFormatFunctions();

	        snippet.forEachArray(rawSeriesData, function(datum) {
	            var result = {
	                value: datum.data,
	                label: renderUtil.formatValue({
	                    value: datum.data,
	                    formatFunctions: formatFunctions,
	                    chartType: 'map',
	                    areaType: 'series'
	                })
	            };

	            if (datum.name) {
	                result.name = datum.name;
	            }

	            if (datum.labelCoordinate) {
	                result.labelCoordinate = datum.labelCoordinate;
	            }

	            valueMap[datum.code] = result;
	        });

	        return valueMap;
	    },

	    /**
	     * Get value map.
	     * @returns {number} value
	     */
	    getValueMap: function() {
	        if (!this.valueMap) {
	            this.valueMap = this._makeValueMap();
	        }

	        return this.valueMap;
	    },

	    /**
	     * Get values.
	     * @returns {Array.<number>} picked values.
	     */
	    getValues: function() {
	        return snippet.pluck(this.getValueMap(), 'value');
	    },

	    /**
	     * Get valueMap datum.
	     * @param {string} code map code
	     * @returns {{code: string, name: string, label: number,
	     *              labelCoordinate: {x: number, y: number}}} valueMap datum
	     */
	    getValueMapDatum: function(code) {
	        return this.getValueMap()[code];
	    },

	    /**
	     * Add data ratios of map chart.
	     * @param {{min: number, max: number}} limit axis limit
	     */
	    addDataRatios: function(limit) {
	        var min = limit.min,
	            max = limit.max - min;
	        snippet.forEach(this.getValueMap(), function(map) {
	            map.ratio = (map.value - min) / max;
	        });
	    },

	    createBaseValuesForLimit: function() {
	        return this.getValues();
	    },
	    getLegendVisibility: function() {
	        return null;
	    }
	});

	module.exports = MapChartDataProcessor;


/***/ }),
/* 143 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileoverview Radial chart.
	 * @author NHN Ent.
	 *         FE Development Lab <dl_javascript@nhnent.com>
	 */

	'use strict';

	var ChartBase = __webpack_require__(42);
	var snippet = __webpack_require__(6);
	var Series = __webpack_require__(85);

	var RadialChart = snippet.defineClass(ChartBase, /** @lends RadialChart.prototype */ {
	    /**
	     * className
	     * @type {string}
	     */
	    className: 'tui-radial-chart',

	    /**
	     * Series class
	     * @type {function}
	     */
	    Series: Series,

	    /**
	     * Radial chart.
	     * @constructs RadialChart
	     * @extends ChartBase
	     * @param {Array.<Array>} rawData raw data
	     * @param {object} theme chart theme
	     * @param {object} options chart options
	     */
	    init: function(rawData, theme, options) {
	        // radial chart doesn't supprot group tooltip
	        // should delete this code, when it supports group tooltip
	        if (options.tooltip) {
	            options.tooltip.grouped = false;
	        }

	        ChartBase.call(this, {
	            rawData: rawData,
	            theme: theme,
	            options: options,
	            hasAxes: true,
	            isVertical: true
	        });
	    },
	    /**
	     * Add components
	     * @override
	     */
	    addComponents: function() {
	        this.componentManager.register('title', 'title');
	        this.componentManager.register('legend', 'legend');
	        this.componentManager.register('plot', 'radialPlot');

	        this.componentManager.register('radialSeries', 'radialSeries');

	        this.componentManager.register('chartExportMenu', 'chartExportMenu');
	        this.componentManager.register('tooltip', 'tooltip');
	        this.componentManager.register('mouseEventDetector', 'mouseEventDetector');
	    },
	    /**
	     * Add data ratios.
	     * @override
	     */
	    addDataRatios: function(limitMap) {
	        this.dataProcessor.addDataRatios(limitMap[this.chartType], null, this.chartType);
	    },

	    /**
	     * Get scale option.
	     * @returns {{xAxis: ?{valueType:string}, yAxis: ?(boolean|{valueType:string})}}
	     * @override
	     */
	    getScaleOption: function() {
	        return {
	            yAxis: {}
	        };
	    }
	});

	module.exports = RadialChart;


/***/ }),
/* 144 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileoverview Boxplot chart.
	 * @author NHN Ent.
	 *         FE Development Lab <dl_javascript@nhnent.com>
	 */

	'use strict';

	var ChartBase = __webpack_require__(42);
	var rawDataHandler = __webpack_require__(31);
	var snippet = __webpack_require__(6);

	var BoxplotChart = snippet.defineClass(ChartBase, /** @lends BoxplotChart.prototype */ {
	    /**
	     * className
	     * @type {string}
	     */
	    className: 'tui-boxplot-chart',

	    /**
	     * Boxplot chart.
	     * @constructs BoxplotChart
	     * @extends ChartBase
	     * @mixes axisTypeMixer
	     * @param {Array.<Array>} rawData raw data
	     * @param {object} theme chart theme
	     * @param {object} options chart options
	     */
	    init: function(rawData, theme, options) {
	        rawDataHandler.appendOutliersToSeriesData(rawData);

	        ChartBase.call(this, {
	            rawData: rawData,
	            theme: theme,
	            options: options,
	            hasAxes: true,
	            isVertical: true
	        });
	    },

	    /**
	     * Add components
	     * @override
	     */
	    addComponents: function() {
	        this.componentManager.register('title', 'title');
	        this.componentManager.register('plot', 'plot');
	        this.componentManager.register('legend', 'legend');

	        this.componentManager.register('boxplotSeries', 'boxplotSeries');

	        this.componentManager.register('yAxis', 'axis');
	        this.componentManager.register('xAxis', 'axis');

	        this.componentManager.register('chartExportMenu', 'chartExportMenu');
	        this.componentManager.register('tooltip', 'tooltip');
	        this.componentManager.register('mouseEventDetector', 'mouseEventDetector');
	    },

	    /**
	     * Get scale option.
	     * @returns {{xAxis: boolean}}
	     * @override
	     */
	    getScaleOption: function() {
	        return {
	            yAxis: true
	        };
	    },

	    /**
	     * On change selected legend.
	     * @param {Array.<?boolean> | {line: ?Array.<boolean>, column: ?Array.<boolean>}} checkedLegends checked legends
	     */
	    onChangeCheckedLegends: function(checkedLegends) {
	        var boundParams;

	        if (this.hasRightYAxis) {
	            boundParams = {
	                optionChartTypes: ['boxplot', 'boxplot']
	            };
	        }
	        ChartBase.prototype.onChangeCheckedLegends.call(this, checkedLegends, null, boundParams);
	    },

	    /**
	     * Add data ratios.
	     * @override
	     * modified from axisTypeMixer
	     */
	    addDataRatios: function(limitMap) {
	        var seriesOption = this.options.series || {};
	        var chartType = this.chartType;
	        var stackType = (seriesOption[chartType] || seriesOption).stackType;

	        this.dataProcessor.addDataRatios(limitMap[chartType], stackType, chartType);
	    }
	});

	module.exports = BoxplotChart;


/***/ }),
/* 145 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileoverview Bullet chart.
	 * @author NHN Ent.
	 *         FE Development Lab <dl_javascript@nhnent.com>
	 */

	'use strict';

	var ChartBase = __webpack_require__(42);
	var rawDataHandler = __webpack_require__(31);
	var snippet = __webpack_require__(6);

	var BulletChart = snippet.defineClass(ChartBase, /** @lends BulletChart.prototype */ {
	    /**
	     * className
	     * @type {string}
	     */
	    className: 'tui-bullet-chart',

	    /**
	     * Bullet chart.
	     * @constructs BulletChart
	     * @extends ChartBase
	     * @mixes axisTypeMixer
	     * @param {Array.<Array>} rawData raw data
	     * @param {object} theme chart theme
	     * @param {object} options chart options
	     */
	    init: function(rawData, theme, options) {
	        var isVertical = !!options.series.vertical;

	        rawDataHandler._makeRawSeriesDataForBulletChart(rawData);

	        ChartBase.call(this, {
	            rawData: rawData,
	            theme: theme,
	            options: options,
	            hasAxes: true,
	            isVertical: isVertical
	        });
	    },

	    /**
	     * Add components
	     * @override
	     */
	    addComponents: function() {
	        this.componentManager.register('title', 'title');
	        this.componentManager.register('plot', 'plot');
	        this.componentManager.register('legend', 'legend');

	        this.componentManager.register('bulletSeries', 'bulletSeries');

	        this.componentManager.register('yAxis', 'axis');
	        this.componentManager.register('xAxis', 'axis');

	        this.componentManager.register('chartExportMenu', 'chartExportMenu', {chartType: 'bullet'});
	        this.componentManager.register('tooltip', 'tooltip');
	        this.componentManager.register('mouseEventDetector', 'mouseEventDetector');
	    },

	    /**
	     * Get scale option.
	     * @returns {{xAxis: boolean}}
	     * @override
	     */
	    getScaleOption: function() {
	        if (this.isVertical) {
	            return {
	                yAxis: true
	            };
	        }

	        return {
	            xAxis: true
	        };
	    },

	    /**
	     * Add data ratios.
	     * @override
	     * modified from axisTypeMixer
	     */
	    addDataRatios: function(limitMap) {
	        var chartType = this.chartType;

	        this.dataProcessor.addDataRatios(limitMap[chartType], null, chartType);
	    }
	});

	module.exports = BulletChart;


/***/ }),
/* 146 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var chartConst = __webpack_require__(8);
	var themeManager = __webpack_require__(33);
	var defaultTheme = __webpack_require__(34);

	themeManager.register(chartConst.DEFAULT_THEME_NAME, defaultTheme);


/***/ }),
/* 147 */
/***/ (function(module, exports) {

	// removed by extract-text-webpack-plugin

/***/ })
/******/ ])
});
;

/***/ }),
/* 44 */
/***/ (function(module, exports, __webpack_require__) {

!function t(e,r){ true?module.exports=r():"function"==typeof define&&define.amd?define("Raphael",[],r):"object"==typeof exports?exports.Raphael=r():e.Raphael=r()}(this,function(){return function(t){function e(i){if(r[i])return r[i].exports;var n=r[i]={exports:{},id:i,loaded:!1};return t[i].call(n.exports,n,n.exports,e),n.loaded=!0,n.exports}var r={};return e.m=t,e.c=r,e.p="",e(0)}([function(t,e,r){var i,n;i=[r(1),r(3),r(4)],n=function(t){return t}.apply(e,i),!(void 0!==n&&(t.exports=n))},function(t,e,r){var i,n;i=[r(2)],n=function(t){function e(r){if(e.is(r,"function"))return w?r():t.on("raphael.DOMload",r);if(e.is(r,Q))return e._engine.create[z](e,r.splice(0,3+e.is(r[0],$))).add(r);var i=Array.prototype.slice.call(arguments,0);if(e.is(i[i.length-1],"function")){var n=i.pop();return w?n.call(e._engine.create[z](e,i)):t.on("raphael.DOMload",function(){n.call(e._engine.create[z](e,i))})}return e._engine.create[z](e,arguments)}function r(t){if("function"==typeof t||Object(t)!==t)return t;var e=new t.constructor;for(var i in t)t[T](i)&&(e[i]=r(t[i]));return e}function i(t,e){for(var r=0,i=t.length;r<i;r++)if(t[r]===e)return t.push(t.splice(r,1)[0])}function n(t,e,r){function n(){var a=Array.prototype.slice.call(arguments,0),s=a.join("␀"),o=n.cache=n.cache||{},l=n.count=n.count||[];return o[T](s)?(i(l,s),r?r(o[s]):o[s]):(l.length>=1e3&&delete o[l.shift()],l.push(s),o[s]=t[z](e,a),r?r(o[s]):o[s])}return n}function a(){return this.hex}function s(t,e){for(var r=[],i=0,n=t.length;n-2*!e>i;i+=2){var a=[{x:+t[i-2],y:+t[i-1]},{x:+t[i],y:+t[i+1]},{x:+t[i+2],y:+t[i+3]},{x:+t[i+4],y:+t[i+5]}];e?i?n-4==i?a[3]={x:+t[0],y:+t[1]}:n-2==i&&(a[2]={x:+t[0],y:+t[1]},a[3]={x:+t[2],y:+t[3]}):a[0]={x:+t[n-2],y:+t[n-1]}:n-4==i?a[3]=a[2]:i||(a[0]={x:+t[i],y:+t[i+1]}),r.push(["C",(-a[0].x+6*a[1].x+a[2].x)/6,(-a[0].y+6*a[1].y+a[2].y)/6,(a[1].x+6*a[2].x-a[3].x)/6,(a[1].y+6*a[2].y-a[3].y)/6,a[2].x,a[2].y])}return r}function o(t,e,r,i,n){var a=-3*e+9*r-9*i+3*n,s=t*a+6*e-12*r+6*i;return t*s-3*e+3*r}function l(t,e,r,i,n,a,s,l,h){null==h&&(h=1),h=h>1?1:h<0?0:h;for(var u=h/2,c=12,f=[-.1252,.1252,-.3678,.3678,-.5873,.5873,-.7699,.7699,-.9041,.9041,-.9816,.9816],p=[.2491,.2491,.2335,.2335,.2032,.2032,.1601,.1601,.1069,.1069,.0472,.0472],d=0,g=0;g<c;g++){var x=u*f[g]+u,v=o(x,t,r,n,s),y=o(x,e,i,a,l),m=v*v+y*y;d+=p[g]*Y.sqrt(m)}return u*d}function h(t,e,r,i,n,a,s,o,h){if(!(h<0||l(t,e,r,i,n,a,s,o)<h)){var u=1,c=u/2,f=u-c,p,d=.01;for(p=l(t,e,r,i,n,a,s,o,f);H(p-h)>d;)c/=2,f+=(p<h?1:-1)*c,p=l(t,e,r,i,n,a,s,o,f);return f}}function u(t,e,r,i,n,a,s,o){if(!(W(t,r)<G(n,s)||G(t,r)>W(n,s)||W(e,i)<G(a,o)||G(e,i)>W(a,o))){var l=(t*i-e*r)*(n-s)-(t-r)*(n*o-a*s),h=(t*i-e*r)*(a-o)-(e-i)*(n*o-a*s),u=(t-r)*(a-o)-(e-i)*(n-s);if(u){var c=l/u,f=h/u,p=+c.toFixed(2),d=+f.toFixed(2);if(!(p<+G(t,r).toFixed(2)||p>+W(t,r).toFixed(2)||p<+G(n,s).toFixed(2)||p>+W(n,s).toFixed(2)||d<+G(e,i).toFixed(2)||d>+W(e,i).toFixed(2)||d<+G(a,o).toFixed(2)||d>+W(a,o).toFixed(2)))return{x:c,y:f}}}}function c(t,e){return p(t,e)}function f(t,e){return p(t,e,1)}function p(t,r,i){var n=e.bezierBBox(t),a=e.bezierBBox(r);if(!e.isBBoxIntersect(n,a))return i?0:[];for(var s=l.apply(0,t),o=l.apply(0,r),h=W(~~(s/5),1),c=W(~~(o/5),1),f=[],p=[],d={},g=i?0:[],x=0;x<h+1;x++){var v=e.findDotsAtSegment.apply(e,t.concat(x/h));f.push({x:v.x,y:v.y,t:x/h})}for(x=0;x<c+1;x++)v=e.findDotsAtSegment.apply(e,r.concat(x/c)),p.push({x:v.x,y:v.y,t:x/c});for(x=0;x<h;x++)for(var y=0;y<c;y++){var m=f[x],b=f[x+1],_=p[y],w=p[y+1],k=H(b.x-m.x)<.001?"y":"x",B=H(w.x-_.x)<.001?"y":"x",C=u(m.x,m.y,b.x,b.y,_.x,_.y,w.x,w.y);if(C){if(d[C.x.toFixed(4)]==C.y.toFixed(4))continue;d[C.x.toFixed(4)]=C.y.toFixed(4);var S=m.t+H((C[k]-m[k])/(b[k]-m[k]))*(b.t-m.t),T=_.t+H((C[B]-_[B])/(w[B]-_[B]))*(w.t-_.t);S>=0&&S<=1.001&&T>=0&&T<=1.001&&(i?g++:g.push({x:C.x,y:C.y,t1:G(S,1),t2:G(T,1)}))}}return g}function d(t,r,i){t=e._path2curve(t),r=e._path2curve(r);for(var n,a,s,o,l,h,u,c,f,d,g=i?0:[],x=0,v=t.length;x<v;x++){var y=t[x];if("M"==y[0])n=l=y[1],a=h=y[2];else{"C"==y[0]?(f=[n,a].concat(y.slice(1)),n=f[6],a=f[7]):(f=[n,a,n,a,l,h,l,h],n=l,a=h);for(var m=0,b=r.length;m<b;m++){var _=r[m];if("M"==_[0])s=u=_[1],o=c=_[2];else{"C"==_[0]?(d=[s,o].concat(_.slice(1)),s=d[6],o=d[7]):(d=[s,o,s,o,u,c,u,c],s=u,o=c);var w=p(f,d,i);if(i)g+=w;else{for(var k=0,B=w.length;k<B;k++)w[k].segment1=x,w[k].segment2=m,w[k].bez1=f,w[k].bez2=d;g=g.concat(w)}}}}}return g}function g(t,e,r,i,n,a){null!=t?(this.a=+t,this.b=+e,this.c=+r,this.d=+i,this.e=+n,this.f=+a):(this.a=1,this.b=0,this.c=0,this.d=1,this.e=0,this.f=0)}function x(){return this.x+I+this.y}function v(){return this.x+I+this.y+I+this.width+" × "+this.height}function y(t,e,r,i,n,a){function s(t){return((c*t+u)*t+h)*t}function o(t,e){var r=l(t,e);return((d*r+p)*r+f)*r}function l(t,e){var r,i,n,a,o,l;for(n=t,l=0;l<8;l++){if(a=s(n)-t,H(a)<e)return n;if(o=(3*c*n+2*u)*n+h,H(o)<1e-6)break;n-=a/o}if(r=0,i=1,n=t,n<r)return r;if(n>i)return i;for(;r<i;){if(a=s(n),H(a-t)<e)return n;t>a?r=n:i=n,n=(i-r)/2+r}return n}var h=3*e,u=3*(i-e)-h,c=1-h-u,f=3*r,p=3*(n-r)-f,d=1-f-p;return o(t,1/(200*a))}function m(t,e){var r=[],i={};if(this.ms=e,this.times=1,t){for(var n in t)t[T](n)&&(i[ht(n)]=t[n],r.push(ht(n)));r.sort(Bt)}this.anim=i,this.top=r[r.length-1],this.percents=r}function b(r,i,n,a,s,o){n=ht(n);var l,h,u,c=[],f,p,d,x=r.ms,v={},m={},b={};if(a)for(w=0,B=Ee.length;w<B;w++){var _=Ee[w];if(_.el.id==i.id&&_.anim==r){_.percent!=n?(Ee.splice(w,1),u=1):h=_,i.attr(_.totalOrigin);break}}else a=+m;for(var w=0,B=r.percents.length;w<B;w++){if(r.percents[w]==n||r.percents[w]>a*r.top){n=r.percents[w],p=r.percents[w-1]||0,x=x/r.top*(n-p),f=r.percents[w+1],l=r.anim[n];break}a&&i.attr(r.anim[r.percents[w]])}if(l){if(h)h.initstatus=a,h.start=new Date-h.ms*a;else{for(var C in l)if(l[T](C)&&(pt[T](C)||i.paper.customAttributes[T](C)))switch(v[C]=i.attr(C),null==v[C]&&(v[C]=ft[C]),m[C]=l[C],pt[C]){case $:b[C]=(m[C]-v[C])/x;break;case"colour":v[C]=e.getRGB(v[C]);var S=e.getRGB(m[C]);b[C]={r:(S.r-v[C].r)/x,g:(S.g-v[C].g)/x,b:(S.b-v[C].b)/x};break;case"path":var A=Qt(v[C],m[C]),E=A[1];for(v[C]=A[0],b[C]=[],w=0,B=v[C].length;w<B;w++){b[C][w]=[0];for(var N=1,M=v[C][w].length;N<M;N++)b[C][w][N]=(E[w][N]-v[C][w][N])/x}break;case"transform":var L=i._,z=le(L[C],m[C]);if(z)for(v[C]=z.from,m[C]=z.to,b[C]=[],b[C].real=!0,w=0,B=v[C].length;w<B;w++)for(b[C][w]=[v[C][w][0]],N=1,M=v[C][w].length;N<M;N++)b[C][w][N]=(m[C][w][N]-v[C][w][N])/x;else{var F=i.matrix||new g,R={_:{transform:L.transform},getBBox:function(){return i.getBBox(1)}};v[C]=[F.a,F.b,F.c,F.d,F.e,F.f],se(R,m[C]),m[C]=R._.transform,b[C]=[(R.matrix.a-F.a)/x,(R.matrix.b-F.b)/x,(R.matrix.c-F.c)/x,(R.matrix.d-F.d)/x,(R.matrix.e-F.e)/x,(R.matrix.f-F.f)/x]}break;case"csv":var I=j(l[C])[q](k),D=j(v[C])[q](k);if("clip-rect"==C)for(v[C]=D,b[C]=[],w=D.length;w--;)b[C][w]=(I[w]-v[C][w])/x;m[C]=I;break;default:for(I=[][P](l[C]),D=[][P](v[C]),b[C]=[],w=i.paper.customAttributes[C].length;w--;)b[C][w]=((I[w]||0)-(D[w]||0))/x}var V=l.easing,O=e.easing_formulas[V];if(!O)if(O=j(V).match(st),O&&5==O.length){var Y=O;O=function(t){return y(t,+Y[1],+Y[2],+Y[3],+Y[4],x)}}else O=St;if(d=l.start||r.start||+new Date,_={anim:r,percent:n,timestamp:d,start:d+(r.del||0),status:0,initstatus:a||0,stop:!1,ms:x,easing:O,from:v,diff:b,to:m,el:i,callback:l.callback,prev:p,next:f,repeat:o||r.times,origin:i.attr(),totalOrigin:s},Ee.push(_),a&&!h&&!u&&(_.stop=!0,_.start=new Date-x*a,1==Ee.length))return Me();u&&(_.start=new Date-_.ms*a),1==Ee.length&&Ne(Me)}t("raphael.anim.start."+i.id,i,r)}}function _(t){for(var e=0;e<Ee.length;e++)Ee[e].el.paper==t&&Ee.splice(e--,1)}e.version="@@VERSION",e.eve=t;var w,k=/[, ]+/,B={circle:1,rect:1,path:1,ellipse:1,text:1,image:1},C=/\{(\d+)\}/g,S="prototype",T="hasOwnProperty",A={doc:document,win:window},E={was:Object.prototype[T].call(A.win,"Raphael"),is:A.win.Raphael},N=function(){this.ca=this.customAttributes={}},M,L="appendChild",z="apply",P="concat",F="ontouchstart"in A.win||A.win.DocumentTouch&&A.doc instanceof DocumentTouch,R="",I=" ",j=String,q="split",D="click dblclick mousedown mousemove mouseout mouseover mouseup touchstart touchmove touchend touchcancel"[q](I),V={mousedown:"touchstart",mousemove:"touchmove",mouseup:"touchend"},O=j.prototype.toLowerCase,Y=Math,W=Y.max,G=Y.min,H=Y.abs,X=Y.pow,U=Y.PI,$="number",Z="string",Q="array",J="toString",K="fill",tt=Object.prototype.toString,et={},rt="push",it=e._ISURL=/^url\(['"]?(.+?)['"]?\)$/i,nt=/^\s*((#[a-f\d]{6})|(#[a-f\d]{3})|rgba?\(\s*([\d\.]+%?\s*,\s*[\d\.]+%?\s*,\s*[\d\.]+%?(?:\s*,\s*[\d\.]+%?)?)\s*\)|hsba?\(\s*([\d\.]+(?:deg|\xb0|%)?\s*,\s*[\d\.]+%?\s*,\s*[\d\.]+(?:%?\s*,\s*[\d\.]+)?)%?\s*\)|hsla?\(\s*([\d\.]+(?:deg|\xb0|%)?\s*,\s*[\d\.]+%?\s*,\s*[\d\.]+(?:%?\s*,\s*[\d\.]+)?)%?\s*\))\s*$/i,at={NaN:1,Infinity:1,"-Infinity":1},st=/^(?:cubic-)?bezier\(([^,]+),([^,]+),([^,]+),([^\)]+)\)/,ot=Y.round,lt="setAttribute",ht=parseFloat,ut=parseInt,ct=j.prototype.toUpperCase,ft=e._availableAttrs={"arrow-end":"none","arrow-start":"none",blur:0,"clip-rect":"0 0 1e9 1e9",cursor:"default",cx:0,cy:0,fill:"#fff","fill-opacity":1,font:'10px "Arial"',"font-family":'"Arial"',"font-size":"10","font-style":"normal","font-weight":400,gradient:0,height:0,href:"http://raphaeljs.com/","letter-spacing":0,opacity:1,path:"M0,0",r:0,rx:0,ry:0,src:"",stroke:"#000","stroke-dasharray":"","stroke-linecap":"butt","stroke-linejoin":"butt","stroke-miterlimit":0,"stroke-opacity":1,"stroke-width":1,target:"_blank","text-anchor":"middle",title:"Raphael",transform:"",width:0,x:0,y:0},pt=e._availableAnimAttrs={blur:$,"clip-rect":"csv",cx:$,cy:$,fill:"colour","fill-opacity":$,"font-size":$,height:$,opacity:$,path:"path",r:$,rx:$,ry:$,stroke:"colour","stroke-opacity":$,"stroke-width":$,transform:"transform",width:$,x:$,y:$},dt=/[\x09\x0a\x0b\x0c\x0d\x20\xa0\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000\u2028\u2029]/g,gt=/[\x09\x0a\x0b\x0c\x0d\x20\xa0\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000\u2028\u2029]*,[\x09\x0a\x0b\x0c\x0d\x20\xa0\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000\u2028\u2029]*/,xt={hs:1,rg:1},vt=/,?([achlmqrstvxz]),?/gi,yt=/([achlmrqstvz])[\x09\x0a\x0b\x0c\x0d\x20\xa0\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000\u2028\u2029,]*((-?\d*\.?\d*(?:e[\-+]?\d+)?[\x09\x0a\x0b\x0c\x0d\x20\xa0\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000\u2028\u2029]*,?[\x09\x0a\x0b\x0c\x0d\x20\xa0\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000\u2028\u2029]*)+)/gi,mt=/([rstm])[\x09\x0a\x0b\x0c\x0d\x20\xa0\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000\u2028\u2029,]*((-?\d*\.?\d*(?:e[\-+]?\d+)?[\x09\x0a\x0b\x0c\x0d\x20\xa0\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000\u2028\u2029]*,?[\x09\x0a\x0b\x0c\x0d\x20\xa0\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000\u2028\u2029]*)+)/gi,bt=/(-?\d*\.?\d*(?:e[\-+]?\d+)?)[\x09\x0a\x0b\x0c\x0d\x20\xa0\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000\u2028\u2029]*,?[\x09\x0a\x0b\x0c\x0d\x20\xa0\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000\u2028\u2029]*/gi,_t=e._radial_gradient=/^r(?:\(([^,]+?)[\x09\x0a\x0b\x0c\x0d\x20\xa0\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000\u2028\u2029]*,[\x09\x0a\x0b\x0c\x0d\x20\xa0\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000\u2028\u2029]*([^\)]+?)\))?/,wt={},kt=function(t,e){return t.key-e.key},Bt=function(t,e){return ht(t)-ht(e)},Ct=function(){},St=function(t){return t},Tt=e._rectPath=function(t,e,r,i,n){return n?[["M",t+n,e],["l",r-2*n,0],["a",n,n,0,0,1,n,n],["l",0,i-2*n],["a",n,n,0,0,1,-n,n],["l",2*n-r,0],["a",n,n,0,0,1,-n,-n],["l",0,2*n-i],["a",n,n,0,0,1,n,-n],["z"]]:[["M",t,e],["l",r,0],["l",0,i],["l",-r,0],["z"]]},At=function(t,e,r,i){return null==i&&(i=r),[["M",t,e],["m",0,-i],["a",r,i,0,1,1,0,2*i],["a",r,i,0,1,1,0,-2*i],["z"]]},Et=e._getPath={path:function(t){return t.attr("path")},circle:function(t){var e=t.attrs;return At(e.cx,e.cy,e.r)},ellipse:function(t){var e=t.attrs;return At(e.cx,e.cy,e.rx,e.ry)},rect:function(t){var e=t.attrs;return Tt(e.x,e.y,e.width,e.height,e.r)},image:function(t){var e=t.attrs;return Tt(e.x,e.y,e.width,e.height)},text:function(t){var e=t._getBBox();return Tt(e.x,e.y,e.width,e.height)},set:function(t){var e=t._getBBox();return Tt(e.x,e.y,e.width,e.height)}},Nt=e.mapPath=function(t,e){if(!e)return t;var r,i,n,a,s,o,l;for(t=Qt(t),n=0,s=t.length;n<s;n++)for(l=t[n],a=1,o=l.length;a<o;a+=2)r=e.x(l[a],l[a+1]),i=e.y(l[a],l[a+1]),l[a]=r,l[a+1]=i;return t};if(e._g=A,e.type=A.win.SVGAngle||A.doc.implementation.hasFeature("http://www.w3.org/TR/SVG11/feature#BasicStructure","1.1")?"SVG":"VML","VML"==e.type){var Mt=A.doc.createElement("div"),Lt;if(Mt.innerHTML='<v:shape adj="1"/>',Lt=Mt.firstChild,Lt.style.behavior="url(#default#VML)",!Lt||"object"!=typeof Lt.adj)return e.type=R;Mt=null}e.svg=!(e.vml="VML"==e.type),e._Paper=N,e.fn=M=N.prototype=e.prototype,e._id=0,e._oid=0,e.is=function(t,e){return e=O.call(e),"finite"==e?!at[T](+t):"array"==e?t instanceof Array:"null"==e&&null===t||e==typeof t&&null!==t||"object"==e&&t===Object(t)||"array"==e&&Array.isArray&&Array.isArray(t)||tt.call(t).slice(8,-1).toLowerCase()==e},e.angle=function(t,r,i,n,a,s){if(null==a){var o=t-i,l=r-n;return o||l?(180+180*Y.atan2(-l,-o)/U+360)%360:0}return e.angle(t,r,a,s)-e.angle(i,n,a,s)},e.rad=function(t){return t%360*U/180},e.deg=function(t){return Math.round(180*t/U%360*1e3)/1e3},e.snapTo=function(t,r,i){if(i=e.is(i,"finite")?i:10,e.is(t,Q)){for(var n=t.length;n--;)if(H(t[n]-r)<=i)return t[n]}else{t=+t;var a=r%t;if(a<i)return r-a;if(a>t-i)return r-a+t}return r};var zt=e.createUUID=function(t,e){return function(){return"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(t,e).toUpperCase()}}(/[xy]/g,function(t){var e=16*Y.random()|0,r="x"==t?e:3&e|8;return r.toString(16)});e.setWindow=function(r){t("raphael.setWindow",e,A.win,r),A.win=r,A.doc=A.win.document,e._engine.initWin&&e._engine.initWin(A.win)};var Pt=function(t){if(e.vml){var r=/^\s+|\s+$/g,i;try{var a=new ActiveXObject("htmlfile");a.write("<body>"),a.close(),i=a.body}catch(s){i=createPopup().document.body}var o=i.createTextRange();Pt=n(function(t){try{i.style.color=j(t).replace(r,R);var e=o.queryCommandValue("ForeColor");return e=(255&e)<<16|65280&e|(16711680&e)>>>16,"#"+("000000"+e.toString(16)).slice(-6)}catch(n){return"none"}})}else{var l=A.doc.createElement("i");l.title="Raphaël Colour Picker",l.style.display="none",A.doc.body.appendChild(l),Pt=n(function(t){return l.style.color=t,A.doc.defaultView.getComputedStyle(l,R).getPropertyValue("color")})}return Pt(t)},Ft=function(){return"hsb("+[this.h,this.s,this.b]+")"},Rt=function(){return"hsl("+[this.h,this.s,this.l]+")"},It=function(){return this.hex},jt=function(t,r,i){if(null==r&&e.is(t,"object")&&"r"in t&&"g"in t&&"b"in t&&(i=t.b,r=t.g,t=t.r),null==r&&e.is(t,Z)){var n=e.getRGB(t);t=n.r,r=n.g,i=n.b}return(t>1||r>1||i>1)&&(t/=255,r/=255,i/=255),[t,r,i]},qt=function(t,r,i,n){t*=255,r*=255,i*=255;var a={r:t,g:r,b:i,hex:e.rgb(t,r,i),toString:It};return e.is(n,"finite")&&(a.opacity=n),a};e.color=function(t){var r;return e.is(t,"object")&&"h"in t&&"s"in t&&"b"in t?(r=e.hsb2rgb(t),t.r=r.r,t.g=r.g,t.b=r.b,t.hex=r.hex):e.is(t,"object")&&"h"in t&&"s"in t&&"l"in t?(r=e.hsl2rgb(t),t.r=r.r,t.g=r.g,t.b=r.b,t.hex=r.hex):(e.is(t,"string")&&(t=e.getRGB(t)),e.is(t,"object")&&"r"in t&&"g"in t&&"b"in t?(r=e.rgb2hsl(t),t.h=r.h,t.s=r.s,t.l=r.l,r=e.rgb2hsb(t),t.v=r.b):(t={hex:"none"},t.r=t.g=t.b=t.h=t.s=t.v=t.l=-1)),t.toString=It,t},e.hsb2rgb=function(t,e,r,i){this.is(t,"object")&&"h"in t&&"s"in t&&"b"in t&&(r=t.b,e=t.s,i=t.o,t=t.h),t*=360;var n,a,s,o,l;return t=t%360/60,l=r*e,o=l*(1-H(t%2-1)),n=a=s=r-l,t=~~t,n+=[l,o,0,0,o,l][t],a+=[o,l,l,o,0,0][t],s+=[0,0,o,l,l,o][t],qt(n,a,s,i)},e.hsl2rgb=function(t,e,r,i){this.is(t,"object")&&"h"in t&&"s"in t&&"l"in t&&(r=t.l,e=t.s,t=t.h),(t>1||e>1||r>1)&&(t/=360,e/=100,r/=100),t*=360;var n,a,s,o,l;return t=t%360/60,l=2*e*(r<.5?r:1-r),o=l*(1-H(t%2-1)),n=a=s=r-l/2,t=~~t,n+=[l,o,0,0,o,l][t],a+=[o,l,l,o,0,0][t],s+=[0,0,o,l,l,o][t],qt(n,a,s,i)},e.rgb2hsb=function(t,e,r){r=jt(t,e,r),t=r[0],e=r[1],r=r[2];var i,n,a,s;return a=W(t,e,r),s=a-G(t,e,r),i=0==s?null:a==t?(e-r)/s:a==e?(r-t)/s+2:(t-e)/s+4,i=(i+360)%6*60/360,n=0==s?0:s/a,{h:i,s:n,b:a,toString:Ft}},e.rgb2hsl=function(t,e,r){r=jt(t,e,r),t=r[0],e=r[1],r=r[2];var i,n,a,s,o,l;return s=W(t,e,r),o=G(t,e,r),l=s-o,i=0==l?null:s==t?(e-r)/l:s==e?(r-t)/l+2:(t-e)/l+4,i=(i+360)%6*60/360,a=(s+o)/2,n=0==l?0:a<.5?l/(2*a):l/(2-2*a),{h:i,s:n,l:a,toString:Rt}},e._path2string=function(){return this.join(",").replace(vt,"$1")};var Dt=e._preload=function(t,e){var r=A.doc.createElement("img");r.style.cssText="position:absolute;left:-9999em;top:-9999em",r.onload=function(){e.call(this),this.onload=null,A.doc.body.removeChild(this)},r.onerror=function(){A.doc.body.removeChild(this)},A.doc.body.appendChild(r),r.src=t};e.getRGB=n(function(t){if(!t||(t=j(t)).indexOf("-")+1)return{r:-1,g:-1,b:-1,hex:"none",error:1,toString:a};if("none"==t)return{r:-1,g:-1,b:-1,hex:"none",toString:a};!(xt[T](t.toLowerCase().substring(0,2))||"#"==t.charAt())&&(t=Pt(t));var r,i,n,s,o,l,h,u=t.match(nt);return u?(u[2]&&(s=ut(u[2].substring(5),16),n=ut(u[2].substring(3,5),16),i=ut(u[2].substring(1,3),16)),u[3]&&(s=ut((l=u[3].charAt(3))+l,16),n=ut((l=u[3].charAt(2))+l,16),i=ut((l=u[3].charAt(1))+l,16)),u[4]&&(h=u[4][q](gt),i=ht(h[0]),"%"==h[0].slice(-1)&&(i*=2.55),n=ht(h[1]),"%"==h[1].slice(-1)&&(n*=2.55),s=ht(h[2]),"%"==h[2].slice(-1)&&(s*=2.55),"rgba"==u[1].toLowerCase().slice(0,4)&&(o=ht(h[3])),h[3]&&"%"==h[3].slice(-1)&&(o/=100)),u[5]?(h=u[5][q](gt),i=ht(h[0]),"%"==h[0].slice(-1)&&(i*=2.55),n=ht(h[1]),"%"==h[1].slice(-1)&&(n*=2.55),s=ht(h[2]),"%"==h[2].slice(-1)&&(s*=2.55),("deg"==h[0].slice(-3)||"°"==h[0].slice(-1))&&(i/=360),"hsba"==u[1].toLowerCase().slice(0,4)&&(o=ht(h[3])),h[3]&&"%"==h[3].slice(-1)&&(o/=100),e.hsb2rgb(i,n,s,o)):u[6]?(h=u[6][q](gt),i=ht(h[0]),"%"==h[0].slice(-1)&&(i*=2.55),n=ht(h[1]),"%"==h[1].slice(-1)&&(n*=2.55),s=ht(h[2]),"%"==h[2].slice(-1)&&(s*=2.55),("deg"==h[0].slice(-3)||"°"==h[0].slice(-1))&&(i/=360),"hsla"==u[1].toLowerCase().slice(0,4)&&(o=ht(h[3])),h[3]&&"%"==h[3].slice(-1)&&(o/=100),e.hsl2rgb(i,n,s,o)):(u={r:i,g:n,b:s,toString:a},u.hex="#"+(16777216|s|n<<8|i<<16).toString(16).slice(1),e.is(o,"finite")&&(u.opacity=o),u)):{r:-1,g:-1,b:-1,hex:"none",error:1,toString:a}},e),e.hsb=n(function(t,r,i){return e.hsb2rgb(t,r,i).hex}),e.hsl=n(function(t,r,i){return e.hsl2rgb(t,r,i).hex}),e.rgb=n(function(t,e,r){function i(t){return t+.5|0}return"#"+(16777216|i(r)|i(e)<<8|i(t)<<16).toString(16).slice(1)}),e.getColor=function(t){var e=this.getColor.start=this.getColor.start||{h:0,s:1,b:t||.75},r=this.hsb2rgb(e.h,e.s,e.b);return e.h+=.075,e.h>1&&(e.h=0,e.s-=.2,e.s<=0&&(this.getColor.start={h:0,s:1,b:e.b})),r.hex},e.getColor.reset=function(){delete this.start},e.parsePathString=function(t){if(!t)return null;var r=Vt(t);if(r.arr)return Yt(r.arr);var i={a:7,c:6,h:1,l:2,m:2,r:4,q:4,s:4,t:2,v:1,z:0},n=[];return e.is(t,Q)&&e.is(t[0],Q)&&(n=Yt(t)),n.length||j(t).replace(yt,function(t,e,r){var a=[],s=e.toLowerCase();if(r.replace(bt,function(t,e){e&&a.push(+e)}),"m"==s&&a.length>2&&(n.push([e][P](a.splice(0,2))),s="l",e="m"==e?"l":"L"),"r"==s)n.push([e][P](a));else for(;a.length>=i[s]&&(n.push([e][P](a.splice(0,i[s]))),i[s]););}),n.toString=e._path2string,r.arr=Yt(n),n},e.parseTransformString=n(function(t){if(!t)return null;var r={r:3,s:4,t:2,m:6},i=[];return e.is(t,Q)&&e.is(t[0],Q)&&(i=Yt(t)),i.length||j(t).replace(mt,function(t,e,r){var n=[],a=O.call(e);r.replace(bt,function(t,e){e&&n.push(+e)}),i.push([e][P](n))}),i.toString=e._path2string,i});var Vt=function(t){var e=Vt.ps=Vt.ps||{};return e[t]?e[t].sleep=100:e[t]={sleep:100},setTimeout(function(){for(var r in e)e[T](r)&&r!=t&&(e[r].sleep--,!e[r].sleep&&delete e[r])}),e[t]};e.findDotsAtSegment=function(t,e,r,i,n,a,s,o,l){var h=1-l,u=X(h,3),c=X(h,2),f=l*l,p=f*l,d=u*t+3*c*l*r+3*h*l*l*n+p*s,g=u*e+3*c*l*i+3*h*l*l*a+p*o,x=t+2*l*(r-t)+f*(n-2*r+t),v=e+2*l*(i-e)+f*(a-2*i+e),y=r+2*l*(n-r)+f*(s-2*n+r),m=i+2*l*(a-i)+f*(o-2*a+i),b=h*t+l*r,_=h*e+l*i,w=h*n+l*s,k=h*a+l*o,B=90-180*Y.atan2(x-y,v-m)/U;return(x>y||v<m)&&(B+=180),{x:d,y:g,m:{x:x,y:v},n:{x:y,y:m},start:{x:b,y:_},end:{x:w,y:k},alpha:B}},e.bezierBBox=function(t,r,i,n,a,s,o,l){e.is(t,"array")||(t=[t,r,i,n,a,s,o,l]);var h=Zt.apply(null,t);return{x:h.min.x,y:h.min.y,x2:h.max.x,y2:h.max.y,width:h.max.x-h.min.x,height:h.max.y-h.min.y}},e.isPointInsideBBox=function(t,e,r){return e>=t.x&&e<=t.x2&&r>=t.y&&r<=t.y2},e.isBBoxIntersect=function(t,r){var i=e.isPointInsideBBox;return i(r,t.x,t.y)||i(r,t.x2,t.y)||i(r,t.x,t.y2)||i(r,t.x2,t.y2)||i(t,r.x,r.y)||i(t,r.x2,r.y)||i(t,r.x,r.y2)||i(t,r.x2,r.y2)||(t.x<r.x2&&t.x>r.x||r.x<t.x2&&r.x>t.x)&&(t.y<r.y2&&t.y>r.y||r.y<t.y2&&r.y>t.y)},e.pathIntersection=function(t,e){return d(t,e)},e.pathIntersectionNumber=function(t,e){return d(t,e,1)},e.isPointInsidePath=function(t,r,i){var n=e.pathBBox(t);return e.isPointInsideBBox(n,r,i)&&d(t,[["M",r,i],["H",n.x2+10]],1)%2==1},e._removedFactory=function(e){return function(){t("raphael.log",null,"Raphaël: you are calling to method “"+e+"” of removed object",e)}};var Ot=e.pathBBox=function(t){var e=Vt(t);if(e.bbox)return r(e.bbox);if(!t)return{x:0,y:0,width:0,height:0,x2:0,y2:0};t=Qt(t);for(var i=0,n=0,a=[],s=[],o,l=0,h=t.length;l<h;l++)if(o=t[l],"M"==o[0])i=o[1],n=o[2],a.push(i),s.push(n);else{var u=Zt(i,n,o[1],o[2],o[3],o[4],o[5],o[6]);a=a[P](u.min.x,u.max.x),s=s[P](u.min.y,u.max.y),i=o[5],n=o[6]}var c=G[z](0,a),f=G[z](0,s),p=W[z](0,a),d=W[z](0,s),g=p-c,x=d-f,v={x:c,y:f,x2:p,y2:d,width:g,height:x,cx:c+g/2,cy:f+x/2};return e.bbox=r(v),v},Yt=function(t){var i=r(t);return i.toString=e._path2string,i},Wt=e._pathToRelative=function(t){var r=Vt(t);if(r.rel)return Yt(r.rel);e.is(t,Q)&&e.is(t&&t[0],Q)||(t=e.parsePathString(t));var i=[],n=0,a=0,s=0,o=0,l=0;"M"==t[0][0]&&(n=t[0][1],a=t[0][2],s=n,o=a,l++,i.push(["M",n,a]));for(var h=l,u=t.length;h<u;h++){var c=i[h]=[],f=t[h];if(f[0]!=O.call(f[0]))switch(c[0]=O.call(f[0]),c[0]){case"a":c[1]=f[1],c[2]=f[2],c[3]=f[3],c[4]=f[4],c[5]=f[5],c[6]=+(f[6]-n).toFixed(3),c[7]=+(f[7]-a).toFixed(3);break;case"v":c[1]=+(f[1]-a).toFixed(3);break;case"m":s=f[1],o=f[2];default:for(var p=1,d=f.length;p<d;p++)c[p]=+(f[p]-(p%2?n:a)).toFixed(3)}else{c=i[h]=[],"m"==f[0]&&(s=f[1]+n,o=f[2]+a);for(var g=0,x=f.length;g<x;g++)i[h][g]=f[g]}var v=i[h].length;switch(i[h][0]){case"z":n=s,a=o;break;case"h":n+=+i[h][v-1];break;case"v":a+=+i[h][v-1];break;default:n+=+i[h][v-2],a+=+i[h][v-1]}}return i.toString=e._path2string,r.rel=Yt(i),i},Gt=e._pathToAbsolute=function(t){var r=Vt(t);if(r.abs)return Yt(r.abs);if(e.is(t,Q)&&e.is(t&&t[0],Q)||(t=e.parsePathString(t)),!t||!t.length)return[["M",0,0]];var i=[],n=0,a=0,o=0,l=0,h=0;"M"==t[0][0]&&(n=+t[0][1],a=+t[0][2],o=n,l=a,h++,i[0]=["M",n,a]);for(var u=3==t.length&&"M"==t[0][0]&&"R"==t[1][0].toUpperCase()&&"Z"==t[2][0].toUpperCase(),c,f,p=h,d=t.length;p<d;p++){if(i.push(c=[]),f=t[p],f[0]!=ct.call(f[0]))switch(c[0]=ct.call(f[0]),c[0]){case"A":c[1]=f[1],c[2]=f[2],c[3]=f[3],c[4]=f[4],c[5]=f[5],c[6]=+(f[6]+n),c[7]=+(f[7]+a);break;case"V":c[1]=+f[1]+a;break;case"H":c[1]=+f[1]+n;break;case"R":for(var g=[n,a][P](f.slice(1)),x=2,v=g.length;x<v;x++)g[x]=+g[x]+n,g[++x]=+g[x]+a;i.pop(),i=i[P](s(g,u));break;case"M":o=+f[1]+n,l=+f[2]+a;default:for(x=1,v=f.length;x<v;x++)c[x]=+f[x]+(x%2?n:a)}else if("R"==f[0])g=[n,a][P](f.slice(1)),i.pop(),i=i[P](s(g,u)),c=["R"][P](f.slice(-2));else for(var y=0,m=f.length;y<m;y++)c[y]=f[y];switch(c[0]){case"Z":n=o,a=l;break;case"H":n=c[1];break;case"V":a=c[1];break;case"M":o=c[c.length-2],l=c[c.length-1];default:n=c[c.length-2],a=c[c.length-1]}}return i.toString=e._path2string,r.abs=Yt(i),i},Ht=function(t,e,r,i){return[t,e,r,i,r,i]},Xt=function(t,e,r,i,n,a){var s=1/3,o=2/3;return[s*t+o*r,s*e+o*i,s*n+o*r,s*a+o*i,n,a]},Ut=function(t,e,r,i,a,s,o,l,h,u){var c=120*U/180,f=U/180*(+a||0),p=[],d,g=n(function(t,e,r){var i=t*Y.cos(r)-e*Y.sin(r),n=t*Y.sin(r)+e*Y.cos(r);return{x:i,y:n}});if(u)S=u[0],T=u[1],B=u[2],C=u[3];else{d=g(t,e,-f),t=d.x,e=d.y,d=g(l,h,-f),l=d.x,h=d.y;var x=Y.cos(U/180*a),v=Y.sin(U/180*a),y=(t-l)/2,m=(e-h)/2,b=y*y/(r*r)+m*m/(i*i);b>1&&(b=Y.sqrt(b),r=b*r,i=b*i);var _=r*r,w=i*i,k=(s==o?-1:1)*Y.sqrt(H((_*w-_*m*m-w*y*y)/(_*m*m+w*y*y))),B=k*r*m/i+(t+l)/2,C=k*-i*y/r+(e+h)/2,S=Y.asin(((e-C)/i).toFixed(9)),T=Y.asin(((h-C)/i).toFixed(9));S=t<B?U-S:S,T=l<B?U-T:T,S<0&&(S=2*U+S),T<0&&(T=2*U+T),o&&S>T&&(S-=2*U),!o&&T>S&&(T-=2*U)}var A=T-S;if(H(A)>c){var E=T,N=l,M=h;T=S+c*(o&&T>S?1:-1),l=B+r*Y.cos(T),h=C+i*Y.sin(T),p=Ut(l,h,r,i,a,0,o,N,M,[T,E,B,C])}A=T-S;var L=Y.cos(S),z=Y.sin(S),F=Y.cos(T),R=Y.sin(T),I=Y.tan(A/4),j=4/3*r*I,D=4/3*i*I,V=[t,e],O=[t+j*z,e-D*L],W=[l+j*R,h-D*F],G=[l,h];if(O[0]=2*V[0]-O[0],O[1]=2*V[1]-O[1],u)return[O,W,G][P](p);p=[O,W,G][P](p).join()[q](",");for(var X=[],$=0,Z=p.length;$<Z;$++)X[$]=$%2?g(p[$-1],p[$],f).y:g(p[$],p[$+1],f).x;return X},$t=function(t,e,r,i,n,a,s,o,l){var h=1-l;return{x:X(h,3)*t+3*X(h,2)*l*r+3*h*l*l*n+X(l,3)*s,y:X(h,3)*e+3*X(h,2)*l*i+3*h*l*l*a+X(l,3)*o}},Zt=n(function(t,e,r,i,n,a,s,o){var l=n-2*r+t-(s-2*n+r),h=2*(r-t)-2*(n-r),u=t-r,c=(-h+Y.sqrt(h*h-4*l*u))/2/l,f=(-h-Y.sqrt(h*h-4*l*u))/2/l,p=[e,o],d=[t,s],g;return H(c)>"1e12"&&(c=.5),H(f)>"1e12"&&(f=.5),c>0&&c<1&&(g=$t(t,e,r,i,n,a,s,o,c),d.push(g.x),p.push(g.y)),f>0&&f<1&&(g=$t(t,e,r,i,n,a,s,o,f),d.push(g.x),p.push(g.y)),l=a-2*i+e-(o-2*a+i),h=2*(i-e)-2*(a-i),u=e-i,c=(-h+Y.sqrt(h*h-4*l*u))/2/l,f=(-h-Y.sqrt(h*h-4*l*u))/2/l,H(c)>"1e12"&&(c=.5),H(f)>"1e12"&&(f=.5),c>0&&c<1&&(g=$t(t,e,r,i,n,a,s,o,c),d.push(g.x),p.push(g.y)),f>0&&f<1&&(g=$t(t,e,r,i,n,a,s,o,f),d.push(g.x),p.push(g.y)),{min:{x:G[z](0,d),y:G[z](0,p)},max:{x:W[z](0,d),y:W[z](0,p)}}}),Qt=e._path2curve=n(function(t,e){var r=!e&&Vt(t);if(!e&&r.curve)return Yt(r.curve);for(var i=Gt(t),n=e&&Gt(e),a={x:0,y:0,bx:0,by:0,X:0,Y:0,qx:null,qy:null},s={x:0,y:0,bx:0,by:0,X:0,Y:0,qx:null,qy:null},o=(function(t,e,r){var i,n,a={T:1,Q:1};if(!t)return["C",e.x,e.y,e.x,e.y,e.x,e.y];switch(!(t[0]in a)&&(e.qx=e.qy=null),t[0]){case"M":e.X=t[1],e.Y=t[2];break;case"A":t=["C"][P](Ut[z](0,[e.x,e.y][P](t.slice(1))));break;case"S":"C"==r||"S"==r?(i=2*e.x-e.bx,n=2*e.y-e.by):(i=e.x,n=e.y),t=["C",i,n][P](t.slice(1));break;case"T":"Q"==r||"T"==r?(e.qx=2*e.x-e.qx,e.qy=2*e.y-e.qy):(e.qx=e.x,e.qy=e.y),t=["C"][P](Xt(e.x,e.y,e.qx,e.qy,t[1],t[2]));break;case"Q":e.qx=t[1],e.qy=t[2],t=["C"][P](Xt(e.x,e.y,t[1],t[2],t[3],t[4]));break;case"L":t=["C"][P](Ht(e.x,e.y,t[1],t[2]));break;case"H":t=["C"][P](Ht(e.x,e.y,t[1],e.y));break;case"V":t=["C"][P](Ht(e.x,e.y,e.x,t[1]));break;case"Z":t=["C"][P](Ht(e.x,e.y,e.X,e.Y))}return t}),l=function(t,e){if(t[e].length>7){t[e].shift();for(var r=t[e];r.length;)u[e]="A",n&&(c[e]="A"),t.splice(e++,0,["C"][P](r.splice(0,6)));t.splice(e,1),g=W(i.length,n&&n.length||0)}},h=function(t,e,r,a,s){t&&e&&"M"==t[s][0]&&"M"!=e[s][0]&&(e.splice(s,0,["M",a.x,a.y]),r.bx=0,r.by=0,r.x=t[s][1],r.y=t[s][2],g=W(i.length,n&&n.length||0))},u=[],c=[],f="",p="",d=0,g=W(i.length,n&&n.length||0);d<g;d++){i[d]&&(f=i[d][0]),"C"!=f&&(u[d]=f,d&&(p=u[d-1])),i[d]=o(i[d],a,p),"A"!=u[d]&&"C"==f&&(u[d]="C"),l(i,d),n&&(n[d]&&(f=n[d][0]),"C"!=f&&(c[d]=f,d&&(p=c[d-1])),n[d]=o(n[d],s,p),"A"!=c[d]&&"C"==f&&(c[d]="C"),l(n,d)),h(i,n,a,s,d),h(n,i,s,a,d);var x=i[d],v=n&&n[d],y=x.length,m=n&&v.length;a.x=x[y-2],a.y=x[y-1],a.bx=ht(x[y-4])||a.x,a.by=ht(x[y-3])||a.y,s.bx=n&&(ht(v[m-4])||s.x),s.by=n&&(ht(v[m-3])||s.y),s.x=n&&v[m-2],s.y=n&&v[m-1]}return n||(r.curve=Yt(i)),n?[i,n]:i},null,Yt),Jt=e._parseDots=n(function(t){for(var r=[],i=0,n=t.length;i<n;i++){var a={},s=t[i].match(/^([^:]*):?([\d\.]*)/);if(a.color=e.getRGB(s[1]),a.color.error)return null;a.opacity=a.color.opacity,a.color=a.color.hex,s[2]&&(a.offset=s[2]+"%"),r.push(a)}for(i=1,n=r.length-1;i<n;i++)if(!r[i].offset){for(var o=ht(r[i-1].offset||0),l=0,h=i+1;h<n;h++)if(r[h].offset){l=r[h].offset;break}l||(l=100,h=n),l=ht(l);for(var u=(l-o)/(h-i+1);i<h;i++)o+=u,r[i].offset=o+"%"}return r}),Kt=e._tear=function(t,e){t==e.top&&(e.top=t.prev),t==e.bottom&&(e.bottom=t.next),t.next&&(t.next.prev=t.prev),t.prev&&(t.prev.next=t.next)},te=e._tofront=function(t,e){e.top!==t&&(Kt(t,e),t.next=null,t.prev=e.top,e.top.next=t,e.top=t)},ee=e._toback=function(t,e){e.bottom!==t&&(Kt(t,e),t.next=e.bottom,t.prev=null,e.bottom.prev=t,e.bottom=t)},re=e._insertafter=function(t,e,r){Kt(t,r),e==r.top&&(r.top=t),e.next&&(e.next.prev=t),t.next=e.next,t.prev=e,e.next=t},ie=e._insertbefore=function(t,e,r){Kt(t,r),e==r.bottom&&(r.bottom=t),e.prev&&(e.prev.next=t),t.prev=e.prev,e.prev=t,t.next=e},ne=e.toMatrix=function(t,e){var r=Ot(t),i={_:{transform:R},getBBox:function(){return r}};return se(i,e),i.matrix},ae=e.transformPath=function(t,e){return Nt(t,ne(t,e))},se=e._extractTransform=function(t,r){if(null==r)return t._.transform;r=j(r).replace(/\.{3}|\u2026/g,t._.transform||R);var i=e.parseTransformString(r),n=0,a=0,s=0,o=1,l=1,h=t._,u=new g;if(h.transform=i||[],i)for(var c=0,f=i.length;c<f;c++){var p=i[c],d=p.length,x=j(p[0]).toLowerCase(),v=p[0]!=x,y=v?u.invert():0,m,b,_,w,k;"t"==x&&3==d?v?(m=y.x(0,0),b=y.y(0,0),_=y.x(p[1],p[2]),w=y.y(p[1],p[2]),u.translate(_-m,w-b)):u.translate(p[1],p[2]):"r"==x?2==d?(k=k||t.getBBox(1),u.rotate(p[1],k.x+k.width/2,k.y+k.height/2),n+=p[1]):4==d&&(v?(_=y.x(p[2],p[3]),w=y.y(p[2],p[3]),u.rotate(p[1],_,w)):u.rotate(p[1],p[2],p[3]),n+=p[1]):"s"==x?2==d||3==d?(k=k||t.getBBox(1),u.scale(p[1],p[d-1],k.x+k.width/2,k.y+k.height/2),o*=p[1],l*=p[d-1]):5==d&&(v?(_=y.x(p[3],p[4]),w=y.y(p[3],p[4]),u.scale(p[1],p[2],_,w)):u.scale(p[1],p[2],p[3],p[4]),o*=p[1],l*=p[2]):"m"==x&&7==d&&u.add(p[1],p[2],p[3],p[4],p[5],p[6]),h.dirtyT=1,t.matrix=u}t.matrix=u,h.sx=o,h.sy=l,h.deg=n,h.dx=a=u.e,h.dy=s=u.f,1==o&&1==l&&!n&&h.bbox?(h.bbox.x+=+a,h.bbox.y+=+s):h.dirtyT=1},oe=function(t){var e=t[0];switch(e.toLowerCase()){case"t":return[e,0,0];case"m":return[e,1,0,0,1,0,0];case"r":return 4==t.length?[e,0,t[2],t[3]]:[e,0];case"s":return 5==t.length?[e,1,1,t[3],t[4]]:3==t.length?[e,1,1]:[e,1]}},le=e._equaliseTransform=function(t,r){r=j(r).replace(/\.{3}|\u2026/g,t),t=e.parseTransformString(t)||[],r=e.parseTransformString(r)||[];for(var i=W(t.length,r.length),n=[],a=[],s=0,o,l,h,u;s<i;s++){if(h=t[s]||oe(r[s]),u=r[s]||oe(h),h[0]!=u[0]||"r"==h[0].toLowerCase()&&(h[2]!=u[2]||h[3]!=u[3])||"s"==h[0].toLowerCase()&&(h[3]!=u[3]||h[4]!=u[4]))return;for(n[s]=[],a[s]=[],o=0,l=W(h.length,u.length);o<l;o++)o in h&&(n[s][o]=h[o]),o in u&&(a[s][o]=u[o])}return{from:n,to:a}};e._getContainer=function(t,r,i,n){var a;if(a=null!=n||e.is(t,"object")?t:A.doc.getElementById(t),null!=a)return a.tagName?null==r?{container:a,width:a.style.pixelWidth||a.offsetWidth,height:a.style.pixelHeight||a.offsetHeight}:{container:a,width:r,height:i}:{container:1,x:t,y:r,width:i,height:n}},e.pathToRelative=Wt,e._engine={},e.path2curve=Qt,e.matrix=function(t,e,r,i,n,a){return new g(t,e,r,i,n,a)},function(t){function r(t){return t[0]*t[0]+t[1]*t[1]}function i(t){var e=Y.sqrt(r(t));t[0]&&(t[0]/=e),t[1]&&(t[1]/=e)}t.add=function(t,e,r,i,n,a){var s=[[],[],[]],o=[[this.a,this.c,this.e],[this.b,this.d,this.f],[0,0,1]],l=[[t,r,n],[e,i,a],[0,0,1]],h,u,c,f;for(t&&t instanceof g&&(l=[[t.a,t.c,t.e],[t.b,t.d,t.f],[0,0,1]]),h=0;h<3;h++)for(u=0;u<3;u++){for(f=0,c=0;c<3;c++)f+=o[h][c]*l[c][u];s[h][u]=f}this.a=s[0][0],this.b=s[1][0],this.c=s[0][1],this.d=s[1][1],this.e=s[0][2],this.f=s[1][2]},t.invert=function(){var t=this,e=t.a*t.d-t.b*t.c;return new g(t.d/e,-t.b/e,-t.c/e,t.a/e,(t.c*t.f-t.d*t.e)/e,(t.b*t.e-t.a*t.f)/e)},t.clone=function(){return new g(this.a,this.b,this.c,this.d,this.e,this.f)},t.translate=function(t,e){
this.add(1,0,0,1,t,e)},t.scale=function(t,e,r,i){null==e&&(e=t),(r||i)&&this.add(1,0,0,1,r,i),this.add(t,0,0,e,0,0),(r||i)&&this.add(1,0,0,1,-r,-i)},t.rotate=function(t,r,i){t=e.rad(t),r=r||0,i=i||0;var n=+Y.cos(t).toFixed(9),a=+Y.sin(t).toFixed(9);this.add(n,a,-a,n,r,i),this.add(1,0,0,1,-r,-i)},t.x=function(t,e){return t*this.a+e*this.c+this.e},t.y=function(t,e){return t*this.b+e*this.d+this.f},t.get=function(t){return+this[j.fromCharCode(97+t)].toFixed(4)},t.toString=function(){return e.svg?"matrix("+[this.get(0),this.get(1),this.get(2),this.get(3),this.get(4),this.get(5)].join()+")":[this.get(0),this.get(2),this.get(1),this.get(3),0,0].join()},t.toFilter=function(){return"progid:DXImageTransform.Microsoft.Matrix(M11="+this.get(0)+", M12="+this.get(2)+", M21="+this.get(1)+", M22="+this.get(3)+", Dx="+this.get(4)+", Dy="+this.get(5)+", sizingmethod='auto expand')"},t.offset=function(){return[this.e.toFixed(4),this.f.toFixed(4)]},t.split=function(){var t={};t.dx=this.e,t.dy=this.f;var n=[[this.a,this.c],[this.b,this.d]];t.scalex=Y.sqrt(r(n[0])),i(n[0]),t.shear=n[0][0]*n[1][0]+n[0][1]*n[1][1],n[1]=[n[1][0]-n[0][0]*t.shear,n[1][1]-n[0][1]*t.shear],t.scaley=Y.sqrt(r(n[1])),i(n[1]),t.shear/=t.scaley;var a=-n[0][1],s=n[1][1];return s<0?(t.rotate=e.deg(Y.acos(s)),a<0&&(t.rotate=360-t.rotate)):t.rotate=e.deg(Y.asin(a)),t.isSimple=!(+t.shear.toFixed(9)||t.scalex.toFixed(9)!=t.scaley.toFixed(9)&&t.rotate),t.isSuperSimple=!+t.shear.toFixed(9)&&t.scalex.toFixed(9)==t.scaley.toFixed(9)&&!t.rotate,t.noRotation=!+t.shear.toFixed(9)&&!t.rotate,t},t.toTransformString=function(t){var e=t||this[q]();return e.isSimple?(e.scalex=+e.scalex.toFixed(4),e.scaley=+e.scaley.toFixed(4),e.rotate=+e.rotate.toFixed(4),(e.dx||e.dy?"t"+[e.dx,e.dy]:R)+(1!=e.scalex||1!=e.scaley?"s"+[e.scalex,e.scaley,0,0]:R)+(e.rotate?"r"+[e.rotate,0,0]:R)):"m"+[this.get(0),this.get(1),this.get(2),this.get(3),this.get(4),this.get(5)]}}(g.prototype);for(var he=function(){this.returnValue=!1},ue=function(){return this.originalEvent.preventDefault()},ce=function(){this.cancelBubble=!0},fe=function(){return this.originalEvent.stopPropagation()},pe=function(t){var e=A.doc.documentElement.scrollTop||A.doc.body.scrollTop,r=A.doc.documentElement.scrollLeft||A.doc.body.scrollLeft;return{x:t.clientX+r,y:t.clientY+e}},de=function(){return A.doc.addEventListener?function(t,e,r,i){var n=function(t){var e=pe(t);return r.call(i,t,e.x,e.y)};if(t.addEventListener(e,n,!1),F&&V[e]){var a=function(e){for(var n=pe(e),a=e,s=0,o=e.targetTouches&&e.targetTouches.length;s<o;s++)if(e.targetTouches[s].target==t){e=e.targetTouches[s],e.originalEvent=a,e.preventDefault=ue,e.stopPropagation=fe;break}return r.call(i,e,n.x,n.y)};t.addEventListener(V[e],a,!1)}return function(){return t.removeEventListener(e,n,!1),F&&V[e]&&t.removeEventListener(V[e],a,!1),!0}}:A.doc.attachEvent?function(t,e,r,i){var n=function(t){t=t||A.win.event;var e=A.doc.documentElement.scrollTop||A.doc.body.scrollTop,n=A.doc.documentElement.scrollLeft||A.doc.body.scrollLeft,a=t.clientX+n,s=t.clientY+e;return t.preventDefault=t.preventDefault||he,t.stopPropagation=t.stopPropagation||ce,r.call(i,t,a,s)};t.attachEvent("on"+e,n);var a=function(){return t.detachEvent("on"+e,n),!0};return a}:void 0}(),ge=[],xe=function(e){for(var r=e.clientX,i=e.clientY,n=A.doc.documentElement.scrollTop||A.doc.body.scrollTop,a=A.doc.documentElement.scrollLeft||A.doc.body.scrollLeft,s,o=ge.length;o--;){if(s=ge[o],F&&e.touches){for(var l=e.touches.length,h;l--;)if(h=e.touches[l],h.identifier==s.el._drag.id){r=h.clientX,i=h.clientY,(e.originalEvent?e.originalEvent:e).preventDefault();break}}else e.preventDefault();var u=s.el.node,c,f=u.nextSibling,p=u.parentNode,d=u.style.display;A.win.opera&&p.removeChild(u),u.style.display="none",c=s.el.paper.getElementByPoint(r,i),u.style.display=d,A.win.opera&&(f?p.insertBefore(u,f):p.appendChild(u)),c&&t("raphael.drag.over."+s.el.id,s.el,c),r+=a,i+=n,t("raphael.drag.move."+s.el.id,s.move_scope||s.el,r-s.el._drag.x,i-s.el._drag.y,r,i,e)}},ve=function(r){e.unmousemove(xe).unmouseup(ve);for(var i=ge.length,n;i--;)n=ge[i],n.el._drag={},t("raphael.drag.end."+n.el.id,n.end_scope||n.start_scope||n.move_scope||n.el,r);ge=[]},ye=e.el={},me=D.length;me--;)!function(t){e[t]=ye[t]=function(r,i){return e.is(r,"function")&&(this.events=this.events||[],this.events.push({name:t,f:r,unbind:de(this.shape||this.node||A.doc,t,r,i||this)})),this},e["un"+t]=ye["un"+t]=function(r){for(var i=this.events||[],n=i.length;n--;)i[n].name!=t||!e.is(r,"undefined")&&i[n].f!=r||(i[n].unbind(),i.splice(n,1),!i.length&&delete this.events);return this}}(D[me]);ye.data=function(r,i){var n=wt[this.id]=wt[this.id]||{};if(0==arguments.length)return n;if(1==arguments.length){if(e.is(r,"object")){for(var a in r)r[T](a)&&this.data(a,r[a]);return this}return t("raphael.data.get."+this.id,this,n[r],r),n[r]}return n[r]=i,t("raphael.data.set."+this.id,this,i,r),this},ye.removeData=function(t){return null==t?wt[this.id]={}:wt[this.id]&&delete wt[this.id][t],this},ye.getData=function(){return r(wt[this.id]||{})},ye.hover=function(t,e,r,i){return this.mouseover(t,r).mouseout(e,i||r)},ye.unhover=function(t,e){return this.unmouseover(t).unmouseout(e)};var be=[];ye.drag=function(r,i,n,a,s,o){function l(l){(l.originalEvent||l).preventDefault();var h=l.clientX,u=l.clientY,c=A.doc.documentElement.scrollTop||A.doc.body.scrollTop,f=A.doc.documentElement.scrollLeft||A.doc.body.scrollLeft;if(this._drag.id=l.identifier,F&&l.touches)for(var p=l.touches.length,d;p--;)if(d=l.touches[p],this._drag.id=d.identifier,d.identifier==this._drag.id){h=d.clientX,u=d.clientY;break}this._drag.x=h+f,this._drag.y=u+c,!ge.length&&e.mousemove(xe).mouseup(ve),ge.push({el:this,move_scope:a,start_scope:s,end_scope:o}),i&&t.on("raphael.drag.start."+this.id,i),r&&t.on("raphael.drag.move."+this.id,r),n&&t.on("raphael.drag.end."+this.id,n),t("raphael.drag.start."+this.id,s||a||this,l.clientX+f,l.clientY+c,l)}return this._drag={},be.push({el:this,start:l}),this.mousedown(l),this},ye.onDragOver=function(e){e?t.on("raphael.drag.over."+this.id,e):t.unbind("raphael.drag.over."+this.id)},ye.undrag=function(){for(var r=be.length;r--;)be[r].el==this&&(this.unmousedown(be[r].start),be.splice(r,1),t.unbind("raphael.drag.*."+this.id));!be.length&&e.unmousemove(xe).unmouseup(ve),ge=[]},M.circle=function(t,r,i){var n=e._engine.circle(this,t||0,r||0,i||0);return this.__set__&&this.__set__.push(n),n},M.rect=function(t,r,i,n,a){var s=e._engine.rect(this,t||0,r||0,i||0,n||0,a||0);return this.__set__&&this.__set__.push(s),s},M.ellipse=function(t,r,i,n){var a=e._engine.ellipse(this,t||0,r||0,i||0,n||0);return this.__set__&&this.__set__.push(a),a},M.path=function(t){t&&!e.is(t,Z)&&!e.is(t[0],Q)&&(t+=R);var r=e._engine.path(e.format[z](e,arguments),this);return this.__set__&&this.__set__.push(r),r},M.image=function(t,r,i,n,a){var s=e._engine.image(this,t||"about:blank",r||0,i||0,n||0,a||0);return this.__set__&&this.__set__.push(s),s},M.text=function(t,r,i){var n=e._engine.text(this,t||0,r||0,j(i));return this.__set__&&this.__set__.push(n),n},M.set=function(t){!e.is(t,"array")&&(t=Array.prototype.splice.call(arguments,0,arguments.length));var r=new ze(t);return this.__set__&&this.__set__.push(r),r.paper=this,r.type="set",r},M.setStart=function(t){this.__set__=t||this.set()},M.setFinish=function(t){var e=this.__set__;return delete this.__set__,e},M.getSize=function(){var t=this.canvas.parentNode;return{width:t.offsetWidth,height:t.offsetHeight}},M.setSize=function(t,r){return e._engine.setSize.call(this,t,r)},M.setViewBox=function(t,r,i,n,a){return e._engine.setViewBox.call(this,t,r,i,n,a)},M.top=M.bottom=null,M.raphael=e;var _e=function(t){var e=t.getBoundingClientRect(),r=t.ownerDocument,i=r.body,n=r.documentElement,a=n.clientTop||i.clientTop||0,s=n.clientLeft||i.clientLeft||0,o=e.top+(A.win.pageYOffset||n.scrollTop||i.scrollTop)-a,l=e.left+(A.win.pageXOffset||n.scrollLeft||i.scrollLeft)-s;return{y:o,x:l}};M.getElementByPoint=function(t,e){var r=this,i=r.canvas,n=A.doc.elementFromPoint(t,e);if(A.win.opera&&"svg"==n.tagName){var a=_e(i),s=i.createSVGRect();s.x=t-a.x,s.y=e-a.y,s.width=s.height=1;var o=i.getIntersectionList(s,null);o.length&&(n=o[o.length-1])}if(!n)return null;for(;n.parentNode&&n!=i.parentNode&&!n.raphael;)n=n.parentNode;return n==r.canvas.parentNode&&(n=i),n=n&&n.raphael?r.getById(n.raphaelid):null},M.getElementsByBBox=function(t){var r=this.set();return this.forEach(function(i){e.isBBoxIntersect(i.getBBox(),t)&&r.push(i)}),r},M.getById=function(t){for(var e=this.bottom;e;){if(e.id==t)return e;e=e.next}return null},M.forEach=function(t,e){for(var r=this.bottom;r;){if(t.call(e,r)===!1)return this;r=r.next}return this},M.getElementsByPoint=function(t,e){var r=this.set();return this.forEach(function(i){i.isPointInside(t,e)&&r.push(i)}),r},ye.isPointInside=function(t,r){var i=this.realPath=Et[this.type](this);return this.attr("transform")&&this.attr("transform").length&&(i=e.transformPath(i,this.attr("transform"))),e.isPointInsidePath(i,t,r)},ye.getBBox=function(t){if(this.removed)return{};var e=this._;return t?(!e.dirty&&e.bboxwt||(this.realPath=Et[this.type](this),e.bboxwt=Ot(this.realPath),e.bboxwt.toString=v,e.dirty=0),e.bboxwt):((e.dirty||e.dirtyT||!e.bbox)&&(!e.dirty&&this.realPath||(e.bboxwt=0,this.realPath=Et[this.type](this)),e.bbox=Ot(Nt(this.realPath,this.matrix)),e.bbox.toString=v,e.dirty=e.dirtyT=0),e.bbox)},ye.clone=function(){if(this.removed)return null;var t=this.paper[this.type]().attr(this.attr());return this.__set__&&this.__set__.push(t),t},ye.glow=function(t){if("text"==this.type)return null;t=t||{};var e={width:(t.width||10)+(+this.attr("stroke-width")||1),fill:t.fill||!1,opacity:null==t.opacity?.5:t.opacity,offsetx:t.offsetx||0,offsety:t.offsety||0,color:t.color||"#000"},r=e.width/2,i=this.paper,n=i.set(),a=this.realPath||Et[this.type](this);a=this.matrix?Nt(a,this.matrix):a;for(var s=1;s<r+1;s++)n.push(i.path(a).attr({stroke:e.color,fill:e.fill?e.color:"none","stroke-linejoin":"round","stroke-linecap":"round","stroke-width":+(e.width/r*s).toFixed(3),opacity:+(e.opacity/r).toFixed(3)}));return n.insertBefore(this).translate(e.offsetx,e.offsety)};var we={},ke=function(t,r,i,n,a,s,o,u,c){return null==c?l(t,r,i,n,a,s,o,u):e.findDotsAtSegment(t,r,i,n,a,s,o,u,h(t,r,i,n,a,s,o,u,c))},Be=function(t,r){return function(i,n,a){i=Qt(i);for(var s,o,l,h,u="",c={},f,p=0,d=0,g=i.length;d<g;d++){if(l=i[d],"M"==l[0])s=+l[1],o=+l[2];else{if(h=ke(s,o,l[1],l[2],l[3],l[4],l[5],l[6]),p+h>n){if(r&&!c.start){if(f=ke(s,o,l[1],l[2],l[3],l[4],l[5],l[6],n-p),u+=["C"+f.start.x,f.start.y,f.m.x,f.m.y,f.x,f.y],a)return u;c.start=u,u=["M"+f.x,f.y+"C"+f.n.x,f.n.y,f.end.x,f.end.y,l[5],l[6]].join(),p+=h,s=+l[5],o=+l[6];continue}if(!t&&!r)return f=ke(s,o,l[1],l[2],l[3],l[4],l[5],l[6],n-p),{x:f.x,y:f.y,alpha:f.alpha}}p+=h,s=+l[5],o=+l[6]}u+=l.shift()+l}return c.end=u,f=t?p:r?c:e.findDotsAtSegment(s,o,l[0],l[1],l[2],l[3],l[4],l[5],1),f.alpha&&(f={x:f.x,y:f.y,alpha:f.alpha}),f}},Ce=Be(1),Se=Be(),Te=Be(0,1);e.getTotalLength=Ce,e.getPointAtLength=Se,e.getSubpath=function(t,e,r){if(this.getTotalLength(t)-r<1e-6)return Te(t,e).end;var i=Te(t,r,1);return e?Te(i,e).end:i},ye.getTotalLength=function(){var t=this.getPath();if(t)return this.node.getTotalLength?this.node.getTotalLength():Ce(t)},ye.getPointAtLength=function(t){var e=this.getPath();if(e)return Se(e,t)},ye.getPath=function(){var t,r=e._getPath[this.type];if("text"!=this.type&&"set"!=this.type)return r&&(t=r(this)),t},ye.getSubpath=function(t,r){var i=this.getPath();if(i)return e.getSubpath(i,t,r)};var Ae=e.easing_formulas={linear:function(t){return t},"<":function(t){return X(t,1.7)},">":function(t){return X(t,.48)},"<>":function(t){var e=.48-t/1.04,r=Y.sqrt(.1734+e*e),i=r-e,n=X(H(i),1/3)*(i<0?-1:1),a=-r-e,s=X(H(a),1/3)*(a<0?-1:1),o=n+s+.5;return 3*(1-o)*o*o+o*o*o},backIn:function(t){var e=1.70158;return t*t*((e+1)*t-e)},backOut:function(t){t-=1;var e=1.70158;return t*t*((e+1)*t+e)+1},elastic:function(t){return t==!!t?t:X(2,-10*t)*Y.sin((t-.075)*(2*U)/.3)+1},bounce:function(t){var e=7.5625,r=2.75,i;return t<1/r?i=e*t*t:t<2/r?(t-=1.5/r,i=e*t*t+.75):t<2.5/r?(t-=2.25/r,i=e*t*t+.9375):(t-=2.625/r,i=e*t*t+.984375),i}};Ae.easeIn=Ae["ease-in"]=Ae["<"],Ae.easeOut=Ae["ease-out"]=Ae[">"],Ae.easeInOut=Ae["ease-in-out"]=Ae["<>"],Ae["back-in"]=Ae.backIn,Ae["back-out"]=Ae.backOut;var Ee=[],Ne=window.requestAnimationFrame||window.webkitRequestAnimationFrame||window.mozRequestAnimationFrame||window.oRequestAnimationFrame||window.msRequestAnimationFrame||function(t){setTimeout(t,16)},Me=function(){for(var r=+new Date,i=0;i<Ee.length;i++){var n=Ee[i];if(!n.el.removed&&!n.paused){var a=r-n.start,s=n.ms,o=n.easing,l=n.from,h=n.diff,u=n.to,c=n.t,f=n.el,p={},d,g={},x;if(n.initstatus?(a=(n.initstatus*n.anim.top-n.prev)/(n.percent-n.prev)*s,n.status=n.initstatus,delete n.initstatus,n.stop&&Ee.splice(i--,1)):n.status=(n.prev+(n.percent-n.prev)*(a/s))/n.anim.top,!(a<0))if(a<s){var v=o(a/s);for(var y in l)if(l[T](y)){switch(pt[y]){case $:d=+l[y]+v*s*h[y];break;case"colour":d="rgb("+[Le(ot(l[y].r+v*s*h[y].r)),Le(ot(l[y].g+v*s*h[y].g)),Le(ot(l[y].b+v*s*h[y].b))].join(",")+")";break;case"path":d=[];for(var m=0,_=l[y].length;m<_;m++){d[m]=[l[y][m][0]];for(var w=1,k=l[y][m].length;w<k;w++)d[m][w]=+l[y][m][w]+v*s*h[y][m][w];d[m]=d[m].join(I)}d=d.join(I);break;case"transform":if(h[y].real)for(d=[],m=0,_=l[y].length;m<_;m++)for(d[m]=[l[y][m][0]],w=1,k=l[y][m].length;w<k;w++)d[m][w]=l[y][m][w]+v*s*h[y][m][w];else{var B=function(t){return+l[y][t]+v*s*h[y][t]};d=[["m",B(0),B(1),B(2),B(3),B(4),B(5)]]}break;case"csv":if("clip-rect"==y)for(d=[],m=4;m--;)d[m]=+l[y][m]+v*s*h[y][m];break;default:var C=[][P](l[y]);for(d=[],m=f.paper.customAttributes[y].length;m--;)d[m]=+C[m]+v*s*h[y][m]}p[y]=d}f.attr(p),function(e,r,i){setTimeout(function(){t("raphael.anim.frame."+e,r,i)})}(f.id,f,n.anim)}else{if(function(r,i,n){setTimeout(function(){t("raphael.anim.frame."+i.id,i,n),t("raphael.anim.finish."+i.id,i,n),e.is(r,"function")&&r.call(i)})}(n.callback,f,n.anim),f.attr(u),Ee.splice(i--,1),n.repeat>1&&!n.next){for(x in u)u[T](x)&&(g[x]=n.totalOrigin[x]);n.el.attr(g),b(n.anim,n.el,n.anim.percents[0],null,n.totalOrigin,n.repeat-1)}n.next&&!n.stop&&b(n.anim,n.el,n.next,null,n.totalOrigin,n.repeat)}}}Ee.length&&Ne(Me)},Le=function(t){return t>255?255:t<0?0:t};ye.animateWith=function(t,r,i,n,a,s){var o=this;if(o.removed)return s&&s.call(o),o;var l=i instanceof m?i:e.animation(i,n,a,s),h,u;b(l,o,l.percents[0],null,o.attr());for(var c=0,f=Ee.length;c<f;c++)if(Ee[c].anim==r&&Ee[c].el==t){Ee[f-1].start=Ee[c].start;break}return o},ye.onAnimation=function(e){return e?t.on("raphael.anim.frame."+this.id,e):t.unbind("raphael.anim.frame."+this.id),this},m.prototype.delay=function(t){var e=new m(this.anim,this.ms);return e.times=this.times,e.del=+t||0,e},m.prototype.repeat=function(t){var e=new m(this.anim,this.ms);return e.del=this.del,e.times=Y.floor(W(t,0))||1,e},e.animation=function(t,r,i,n){if(t instanceof m)return t;!e.is(i,"function")&&i||(n=n||i||null,i=null),t=Object(t),r=+r||0;var a={},s,o;for(o in t)t[T](o)&&ht(o)!=o&&ht(o)+"%"!=o&&(s=!0,a[o]=t[o]);if(s)return i&&(a.easing=i),n&&(a.callback=n),new m({100:a},r);if(n){var l=0;for(var h in t){var u=ut(h);t[T](h)&&u>l&&(l=u)}l+="%",!t[l].callback&&(t[l].callback=n)}return new m(t,r)},ye.animate=function(t,r,i,n){var a=this;if(a.removed)return n&&n.call(a),a;var s=t instanceof m?t:e.animation(t,r,i,n);return b(s,a,s.percents[0],null,a.attr()),a},ye.setTime=function(t,e){return t&&null!=e&&this.status(t,G(e,t.ms)/t.ms),this},ye.status=function(t,e){var r=[],i=0,n,a;if(null!=e)return b(t,this,-1,G(e,1)),this;for(n=Ee.length;i<n;i++)if(a=Ee[i],a.el.id==this.id&&(!t||a.anim==t)){if(t)return a.status;r.push({anim:a.anim,status:a.status})}return t?0:r},ye.pause=function(e){for(var r=0;r<Ee.length;r++)Ee[r].el.id!=this.id||e&&Ee[r].anim!=e||t("raphael.anim.pause."+this.id,this,Ee[r].anim)!==!1&&(Ee[r].paused=!0);return this},ye.resume=function(e){for(var r=0;r<Ee.length;r++)if(Ee[r].el.id==this.id&&(!e||Ee[r].anim==e)){var i=Ee[r];t("raphael.anim.resume."+this.id,this,i.anim)!==!1&&(delete i.paused,this.status(i.anim,i.status))}return this},ye.stop=function(e){for(var r=0;r<Ee.length;r++)Ee[r].el.id!=this.id||e&&Ee[r].anim!=e||t("raphael.anim.stop."+this.id,this,Ee[r].anim)!==!1&&Ee.splice(r--,1);return this},t.on("raphael.remove",_),t.on("raphael.clear",_),ye.toString=function(){return"Raphaël’s object"};var ze=function(t){if(this.items=[],this.length=0,this.type="set",t)for(var e=0,r=t.length;e<r;e++)!t[e]||t[e].constructor!=ye.constructor&&t[e].constructor!=ze||(this[this.items.length]=this.items[this.items.length]=t[e],this.length++)},Pe=ze.prototype;Pe.push=function(){for(var t,e,r=0,i=arguments.length;r<i;r++)t=arguments[r],!t||t.constructor!=ye.constructor&&t.constructor!=ze||(e=this.items.length,this[e]=this.items[e]=t,this.length++);return this},Pe.pop=function(){return this.length&&delete this[this.length--],this.items.pop()},Pe.forEach=function(t,e){for(var r=0,i=this.items.length;r<i;r++)if(t.call(e,this.items[r],r)===!1)return this;return this};for(var Fe in ye)ye[T](Fe)&&(Pe[Fe]=function(t){return function(){var e=arguments;return this.forEach(function(r){r[t][z](r,e)})}}(Fe));return Pe.attr=function(t,r){if(t&&e.is(t,Q)&&e.is(t[0],"object"))for(var i=0,n=t.length;i<n;i++)this.items[i].attr(t[i]);else for(var a=0,s=this.items.length;a<s;a++)this.items[a].attr(t,r);return this},Pe.clear=function(){for(;this.length;)this.pop()},Pe.splice=function(t,e,r){t=t<0?W(this.length+t,0):t,e=W(0,G(this.length-t,e));var i=[],n=[],a=[],s;for(s=2;s<arguments.length;s++)a.push(arguments[s]);for(s=0;s<e;s++)n.push(this[t+s]);for(;s<this.length-t;s++)i.push(this[t+s]);var o=a.length;for(s=0;s<o+i.length;s++)this.items[t+s]=this[t+s]=s<o?a[s]:i[s-o];for(s=this.items.length=this.length-=e-o;this[s];)delete this[s++];return new ze(n)},Pe.exclude=function(t){for(var e=0,r=this.length;e<r;e++)if(this[e]==t)return this.splice(e,1),!0},Pe.animate=function(t,r,i,n){(e.is(i,"function")||!i)&&(n=i||null);var a=this.items.length,s=a,o,l=this,h;if(!a)return this;n&&(h=function(){!--a&&n.call(l)}),i=e.is(i,Z)?i:h;var u=e.animation(t,r,i,h);for(o=this.items[--s].animate(u);s--;)this.items[s]&&!this.items[s].removed&&this.items[s].animateWith(o,u,u),this.items[s]&&!this.items[s].removed||a--;return this},Pe.insertAfter=function(t){for(var e=this.items.length;e--;)this.items[e].insertAfter(t);return this},Pe.getBBox=function(){for(var t=[],e=[],r=[],i=[],n=this.items.length;n--;)if(!this.items[n].removed){var a=this.items[n].getBBox();t.push(a.x),e.push(a.y),r.push(a.x+a.width),i.push(a.y+a.height)}return t=G[z](0,t),e=G[z](0,e),r=W[z](0,r),i=W[z](0,i),{x:t,y:e,x2:r,y2:i,width:r-t,height:i-e}},Pe.clone=function(t){t=this.paper.set();for(var e=0,r=this.items.length;e<r;e++)t.push(this.items[e].clone());return t},Pe.toString=function(){return"Raphaël‘s set"},Pe.glow=function(t){var e=this.paper.set();return this.forEach(function(r,i){var n=r.glow(t);null!=n&&n.forEach(function(t,r){e.push(t)})}),e},Pe.isPointInside=function(t,e){var r=!1;return this.forEach(function(i){if(i.isPointInside(t,e))return r=!0,!1}),r},e.registerFont=function(t){if(!t.face)return t;this.fonts=this.fonts||{};var e={w:t.w,face:{},glyphs:{}},r=t.face["font-family"];for(var i in t.face)t.face[T](i)&&(e.face[i]=t.face[i]);if(this.fonts[r]?this.fonts[r].push(e):this.fonts[r]=[e],!t.svg){e.face["units-per-em"]=ut(t.face["units-per-em"],10);for(var n in t.glyphs)if(t.glyphs[T](n)){var a=t.glyphs[n];if(e.glyphs[n]={w:a.w,k:{},d:a.d&&"M"+a.d.replace(/[mlcxtrv]/g,function(t){return{l:"L",c:"C",x:"z",t:"m",r:"l",v:"c"}[t]||"M"})+"z"},a.k)for(var s in a.k)a[T](s)&&(e.glyphs[n].k[s]=a.k[s])}}return t},M.getFont=function(t,r,i,n){if(n=n||"normal",i=i||"normal",r=+r||{normal:400,bold:700,lighter:300,bolder:800}[r]||400,e.fonts){var a=e.fonts[t];if(!a){var s=new RegExp("(^|\\s)"+t.replace(/[^\w\d\s+!~.:_-]/g,R)+"(\\s|$)","i");for(var o in e.fonts)if(e.fonts[T](o)&&s.test(o)){a=e.fonts[o];break}}var l;if(a)for(var h=0,u=a.length;h<u&&(l=a[h],l.face["font-weight"]!=r||l.face["font-style"]!=i&&l.face["font-style"]||l.face["font-stretch"]!=n);h++);return l}},M.print=function(t,r,i,n,a,s,o,l){s=s||"middle",o=W(G(o||0,1),-1),l=W(G(l||1,3),1);var h=j(i)[q](R),u=0,c=0,f=R,p;if(e.is(n,"string")&&(n=this.getFont(n)),n){p=(a||16)/n.face["units-per-em"];for(var d=n.face.bbox[q](k),g=+d[0],x=d[3]-d[1],v=0,y=+d[1]+("baseline"==s?x+ +n.face.descent:x/2),m=0,b=h.length;m<b;m++){if("\n"==h[m])u=0,w=0,c=0,v+=x*l;else{var _=c&&n.glyphs[h[m-1]]||{},w=n.glyphs[h[m]];u+=c?(_.w||n.w)+(_.k&&_.k[h[m]]||0)+n.w*o:0,c=1}w&&w.d&&(f+=e.transformPath(w.d,["t",u*p,v*p,"s",p,p,g,y,"t",(t-g)/p,(r-y)/p]))}}return this.path(f).attr({fill:"#000",stroke:"none"})},M.add=function(t){if(e.is(t,"array"))for(var r=this.set(),i=0,n=t.length,a;i<n;i++)a=t[i]||{},B[T](a.type)&&r.push(this[a.type]().attr(a));return r},e.format=function(t,r){var i=e.is(r,Q)?[0][P](r):arguments;return t&&e.is(t,Z)&&i.length-1&&(t=t.replace(C,function(t,e){return null==i[++e]?R:i[e]})),t||R},e.fullfill=function(){var t=/\{([^\}]+)\}/g,e=/(?:(?:^|\.)(.+?)(?=\[|\.|$|\()|\[('|")(.+?)\2\])(\(\))?/g,r=function(t,r,i){var n=i;return r.replace(e,function(t,e,r,i,a){e=e||i,n&&(e in n&&(n=n[e]),"function"==typeof n&&a&&(n=n()))}),n=(null==n||n==i?t:n)+""};return function(e,i){return String(e).replace(t,function(t,e){return r(t,e,i)})}}(),e.ninja=function(){if(E.was)A.win.Raphael=E.is;else{window.Raphael=void 0;try{delete window.Raphael}catch(t){}}return e},e.st=Pe,t.on("raphael.DOMload",function(){w=!0}),function(t,r,i){function n(){/in/.test(t.readyState)?setTimeout(n,9):e.eve("raphael.DOMload")}null==t.readyState&&t.addEventListener&&(t.addEventListener(r,i=function(){t.removeEventListener(r,i,!1),t.readyState="complete"},!1),t.readyState="loading"),n()}(document,"DOMContentLoaded"),e}.apply(e,i),!(void 0!==n&&(t.exports=n))},function(t,e,r){var i,n;!function(r){var a="0.4.2",s="hasOwnProperty",o=/[\.\/]/,l="*",h=function(){},u=function(t,e){return t-e},c,f,p={n:{}},d=function(t,e){t=String(t);var r=p,i=f,n=Array.prototype.slice.call(arguments,2),a=d.listeners(t),s=0,o=!1,l,h=[],g={},x=[],v=c,y=[];c=t,f=0;for(var m=0,b=a.length;m<b;m++)"zIndex"in a[m]&&(h.push(a[m].zIndex),a[m].zIndex<0&&(g[a[m].zIndex]=a[m]));for(h.sort(u);h[s]<0;)if(l=g[h[s++]],x.push(l.apply(e,n)),f)return f=i,x;for(m=0;m<b;m++)if(l=a[m],"zIndex"in l)if(l.zIndex==h[s]){if(x.push(l.apply(e,n)),f)break;do if(s++,l=g[h[s]],l&&x.push(l.apply(e,n)),f)break;while(l)}else g[l.zIndex]=l;else if(x.push(l.apply(e,n)),f)break;return f=i,c=v,x.length?x:null};d._events=p,d.listeners=function(t){var e=t.split(o),r=p,i,n,a,s,h,u,c,f,d=[r],g=[];for(s=0,h=e.length;s<h;s++){for(f=[],u=0,c=d.length;u<c;u++)for(r=d[u].n,n=[r[e[s]],r[l]],a=2;a--;)i=n[a],i&&(f.push(i),g=g.concat(i.f||[]));d=f}return g},d.on=function(t,e){if(t=String(t),"function"!=typeof e)return function(){};for(var r=t.split(o),i=p,n=0,a=r.length;n<a;n++)i=i.n,i=i.hasOwnProperty(r[n])&&i[r[n]]||(i[r[n]]={n:{}});for(i.f=i.f||[],n=0,a=i.f.length;n<a;n++)if(i.f[n]==e)return h;return i.f.push(e),function(t){+t==+t&&(e.zIndex=+t)}},d.f=function(t){var e=[].slice.call(arguments,1);return function(){d.apply(null,[t,null].concat(e).concat([].slice.call(arguments,0)))}},d.stop=function(){f=1},d.nt=function(t){return t?new RegExp("(?:\\.|\\/|^)"+t+"(?:\\.|\\/|$)").test(c):c},d.nts=function(){return c.split(o)},d.off=d.unbind=function(t,e){if(!t)return void(d._events=p={n:{}});var r=t.split(o),i,n,a,h,u,c,f,g=[p];for(h=0,u=r.length;h<u;h++)for(c=0;c<g.length;c+=a.length-2){if(a=[c,1],i=g[c].n,r[h]!=l)i[r[h]]&&a.push(i[r[h]]);else for(n in i)i[s](n)&&a.push(i[n]);g.splice.apply(g,a)}for(h=0,u=g.length;h<u;h++)for(i=g[h];i.n;){if(e){if(i.f){for(c=0,f=i.f.length;c<f;c++)if(i.f[c]==e){i.f.splice(c,1);break}!i.f.length&&delete i.f}for(n in i.n)if(i.n[s](n)&&i.n[n].f){var x=i.n[n].f;for(c=0,f=x.length;c<f;c++)if(x[c]==e){x.splice(c,1);break}!x.length&&delete i.n[n].f}}else{delete i.f;for(n in i.n)i.n[s](n)&&i.n[n].f&&delete i.n[n].f}i=i.n}},d.once=function(t,e){var r=function(){return d.unbind(t,r),e.apply(this,arguments)};return d.on(t,r)},d.version=a,d.toString=function(){return"You are running Eve "+a},"undefined"!=typeof t&&t.exports?t.exports=d:(i=[],n=function(){return d}.apply(e,i),!(void 0!==n&&(t.exports=n)))}(this)},function(t,e,r){var i,n;i=[r(1)],n=function(t){if(!t||t.svg){var e="hasOwnProperty",r=String,i=parseFloat,n=parseInt,a=Math,s=a.max,o=a.abs,l=a.pow,h=/[, ]+/,u=t.eve,c="",f=" ",p="http://www.w3.org/1999/xlink",d={block:"M5,0 0,2.5 5,5z",classic:"M5,0 0,2.5 5,5 3.5,3 3.5,2z",diamond:"M2.5,0 5,2.5 2.5,5 0,2.5z",open:"M6,1 1,3.5 6,6",oval:"M2.5,0A2.5,2.5,0,0,1,2.5,5 2.5,2.5,0,0,1,2.5,0z"},g={};t.toString=function(){return"Your browser supports SVG.\nYou are running Raphaël "+this.version};var x=function(i,n){if(n){"string"==typeof i&&(i=x(i));for(var a in n)n[e](a)&&("xlink:"==a.substring(0,6)?i.setAttributeNS(p,a.substring(6),r(n[a])):i.setAttribute(a,r(n[a])))}else i=t._g.doc.createElementNS("http://www.w3.org/2000/svg",i),i.style&&(i.style.webkitTapHighlightColor="rgba(0,0,0,0)");return i},v=function(e,n){var h="linear",u=e.id+n,f=.5,p=.5,d=e.node,g=e.paper,v=d.style,y=t._g.doc.getElementById(u);if(!y){if(n=r(n).replace(t._radial_gradient,function(t,e,r){if(h="radial",e&&r){f=i(e),p=i(r);var n=2*(p>.5)-1;l(f-.5,2)+l(p-.5,2)>.25&&(p=a.sqrt(.25-l(f-.5,2))*n+.5)&&.5!=p&&(p=p.toFixed(5)-1e-5*n)}return c}),n=n.split(/\s*\-\s*/),"linear"==h){var b=n.shift();if(b=-i(b),isNaN(b))return null;var _=[0,0,a.cos(t.rad(b)),a.sin(t.rad(b))],w=1/(s(o(_[2]),o(_[3]))||1);_[2]*=w,_[3]*=w,_[2]<0&&(_[0]=-_[2],_[2]=0),_[3]<0&&(_[1]=-_[3],_[3]=0)}var k=t._parseDots(n);if(!k)return null;if(u=u.replace(/[\(\)\s,\xb0#]/g,"_"),e.gradient&&u!=e.gradient.id&&(g.defs.removeChild(e.gradient),delete e.gradient),!e.gradient){y=x(h+"Gradient",{id:u}),e.gradient=y,x(y,"radial"==h?{fx:f,fy:p}:{x1:_[0],y1:_[1],x2:_[2],y2:_[3],gradientTransform:e.matrix.invert()}),g.defs.appendChild(y);for(var B=0,C=k.length;B<C;B++)y.appendChild(x("stop",{offset:k[B].offset?k[B].offset:B?"100%":"0%","stop-color":k[B].color||"#fff","stop-opacity":isFinite(k[B].opacity)?k[B].opacity:1}))}}return x(d,{fill:m(u),opacity:1,"fill-opacity":1}),v.fill=c,v.opacity=1,v.fillOpacity=1,1},y=function(){var t=document.documentMode;return t&&(9===t||10===t)},m=function(t){if(y())return"url('#"+t+"')";var e=document.location,r=e.protocol+"//"+e.host+e.pathname+e.search;return"url('"+r+"#"+t+"')"},b=function(t){var e=t.getBBox(1);x(t.pattern,{patternTransform:t.matrix.invert()+" translate("+e.x+","+e.y+")"})},_=function(i,n,a){if("path"==i.type){for(var s=r(n).toLowerCase().split("-"),o=i.paper,l=a?"end":"start",h=i.node,u=i.attrs,f=u["stroke-width"],p=s.length,v="classic",y,m,b,_,w,k=3,B=3,C=5;p--;)switch(s[p]){case"block":case"classic":case"oval":case"diamond":case"open":case"none":v=s[p];break;case"wide":B=5;break;case"narrow":B=2;break;case"long":k=5;break;case"short":k=2}if("open"==v?(k+=2,B+=2,C+=2,b=1,_=a?4:1,w={fill:"none",stroke:u.stroke}):(_=b=k/2,w={fill:u.stroke,stroke:"none"}),i._.arrows?a?(i._.arrows.endPath&&g[i._.arrows.endPath]--,i._.arrows.endMarker&&g[i._.arrows.endMarker]--):(i._.arrows.startPath&&g[i._.arrows.startPath]--,i._.arrows.startMarker&&g[i._.arrows.startMarker]--):i._.arrows={},"none"!=v){var S="raphael-marker-"+v,T="raphael-marker-"+l+v+k+B+"-obj"+i.id;t._g.doc.getElementById(S)?g[S]++:(o.defs.appendChild(x(x("path"),{"stroke-linecap":"round",d:d[v],id:S})),g[S]=1);var A=t._g.doc.getElementById(T),E;A?(g[T]++,E=A.getElementsByTagName("use")[0]):(A=x(x("marker"),{id:T,markerHeight:B,markerWidth:k,orient:"auto",refX:_,refY:B/2}),E=x(x("use"),{"xlink:href":"#"+S,transform:(a?"rotate(180 "+k/2+" "+B/2+") ":c)+"scale("+k/C+","+B/C+")","stroke-width":(1/((k/C+B/C)/2)).toFixed(4)}),A.appendChild(E),o.defs.appendChild(A),g[T]=1),x(E,w);var N=b*("diamond"!=v&&"oval"!=v);a?(y=i._.arrows.startdx*f||0,m=t.getTotalLength(u.path)-N*f):(y=N*f,m=t.getTotalLength(u.path)-(i._.arrows.enddx*f||0)),w={},w["marker-"+l]="url(#"+T+")",(m||y)&&(w.d=t.getSubpath(u.path,y,m)),x(h,w),i._.arrows[l+"Path"]=S,i._.arrows[l+"Marker"]=T,i._.arrows[l+"dx"]=N,i._.arrows[l+"Type"]=v,i._.arrows[l+"String"]=n}else a?(y=i._.arrows.startdx*f||0,m=t.getTotalLength(u.path)-y):(y=0,m=t.getTotalLength(u.path)-(i._.arrows.enddx*f||0)),i._.arrows[l+"Path"]&&x(h,{d:t.getSubpath(u.path,y,m)}),delete i._.arrows[l+"Path"],delete i._.arrows[l+"Marker"],delete i._.arrows[l+"dx"],delete i._.arrows[l+"Type"],delete i._.arrows[l+"String"];for(w in g)if(g[e](w)&&!g[w]){var M=t._g.doc.getElementById(w);M&&M.parentNode.removeChild(M)}}},w={"-":[3,1],".":[1,1],"-.":[3,1,1,1],"-..":[3,1,1,1,1,1],". ":[1,3],"- ":[4,3],"--":[8,3],"- .":[4,3,1,3],"--.":[8,3,1,3],"--..":[8,3,1,3,1,3]},k=function(t,e,i){if(e=w[r(e).toLowerCase()]){for(var n=t.attrs["stroke-width"]||"1",a={round:n,square:n,butt:0}[t.attrs["stroke-linecap"]||i["stroke-linecap"]]||0,s=[],o=e.length;o--;)s[o]=e[o]*n+(o%2?1:-1)*a;x(t.node,{"stroke-dasharray":s.join(",")})}else x(t.node,{"stroke-dasharray":"none"})},B=function(i,a){var l=i.node,u=i.attrs,f=l.style.visibility;l.style.visibility="hidden";for(var d in a)if(a[e](d)){if(!t._availableAttrs[e](d))continue;var g=a[d];switch(u[d]=g,d){case"blur":i.blur(g);break;case"title":var y=l.getElementsByTagName("title");if(y.length&&(y=y[0]))y.firstChild.nodeValue=g;else{y=x("title");var m=t._g.doc.createTextNode(g);y.appendChild(m),l.appendChild(y)}break;case"href":case"target":var w=l.parentNode;if("a"!=w.tagName.toLowerCase()){var B=x("a");w.insertBefore(B,l),B.appendChild(l),w=B}"target"==d?w.setAttributeNS(p,"show","blank"==g?"new":g):w.setAttributeNS(p,d,g);break;case"cursor":l.style.cursor=g;break;case"transform":i.transform(g);break;case"arrow-start":_(i,g);break;case"arrow-end":_(i,g,1);break;case"clip-rect":var C=r(g).split(h);if(4==C.length){i.clip&&i.clip.parentNode.parentNode.removeChild(i.clip.parentNode);var T=x("clipPath"),A=x("rect");T.id=t.createUUID(),x(A,{x:C[0],y:C[1],width:C[2],height:C[3]}),T.appendChild(A),i.paper.defs.appendChild(T),x(l,{"clip-path":"url(#"+T.id+")"}),i.clip=A}if(!g){var E=l.getAttribute("clip-path");if(E){var N=t._g.doc.getElementById(E.replace(/(^url\(#|\)$)/g,c));N&&N.parentNode.removeChild(N),x(l,{"clip-path":c}),delete i.clip}}break;case"path":"path"==i.type&&(x(l,{d:g?u.path=t._pathToAbsolute(g):"M0,0"}),i._.dirty=1,i._.arrows&&("startString"in i._.arrows&&_(i,i._.arrows.startString),"endString"in i._.arrows&&_(i,i._.arrows.endString,1)));break;case"width":if(l.setAttribute(d,g),i._.dirty=1,!u.fx)break;d="x",g=u.x;case"x":u.fx&&(g=-u.x-(u.width||0));case"rx":if("rx"==d&&"rect"==i.type)break;case"cx":l.setAttribute(d,g),i.pattern&&b(i),i._.dirty=1;break;case"height":if(l.setAttribute(d,g),i._.dirty=1,!u.fy)break;d="y",g=u.y;case"y":u.fy&&(g=-u.y-(u.height||0));case"ry":if("ry"==d&&"rect"==i.type)break;case"cy":l.setAttribute(d,g),i.pattern&&b(i),i._.dirty=1;break;case"r":"rect"==i.type?x(l,{rx:g,ry:g}):l.setAttribute(d,g),i._.dirty=1;break;case"src":"image"==i.type&&l.setAttributeNS(p,"href",g);break;case"stroke-width":1==i._.sx&&1==i._.sy||(g/=s(o(i._.sx),o(i._.sy))||1),l.setAttribute(d,g),u["stroke-dasharray"]&&k(i,u["stroke-dasharray"],a),i._.arrows&&("startString"in i._.arrows&&_(i,i._.arrows.startString),"endString"in i._.arrows&&_(i,i._.arrows.endString,1));break;case"stroke-dasharray":k(i,g,a);break;case"fill":var M=r(g).match(t._ISURL);if(M){T=x("pattern");var L=x("image");T.id=t.createUUID(),x(T,{x:0,y:0,patternUnits:"userSpaceOnUse",height:1,width:1}),x(L,{x:0,y:0,"xlink:href":M[1]}),T.appendChild(L),function(e){t._preload(M[1],function(){var t=this.offsetWidth,r=this.offsetHeight;x(e,{width:t,height:r}),x(L,{width:t,height:r})})}(T),i.paper.defs.appendChild(T),x(l,{fill:"url(#"+T.id+")"}),i.pattern=T,i.pattern&&b(i);break}var z=t.getRGB(g);if(z.error){if(("circle"==i.type||"ellipse"==i.type||"r"!=r(g).charAt())&&v(i,g)){
if("opacity"in u||"fill-opacity"in u){var P=t._g.doc.getElementById(l.getAttribute("fill").replace(/^url\(#|\)$/g,c));if(P){var F=P.getElementsByTagName("stop");x(F[F.length-1],{"stop-opacity":("opacity"in u?u.opacity:1)*("fill-opacity"in u?u["fill-opacity"]:1)})}}u.gradient=g,u.fill="none";break}}else delete a.gradient,delete u.gradient,!t.is(u.opacity,"undefined")&&t.is(a.opacity,"undefined")&&x(l,{opacity:u.opacity}),!t.is(u["fill-opacity"],"undefined")&&t.is(a["fill-opacity"],"undefined")&&x(l,{"fill-opacity":u["fill-opacity"]});z[e]("opacity")&&x(l,{"fill-opacity":z.opacity>1?z.opacity/100:z.opacity});case"stroke":z=t.getRGB(g),l.setAttribute(d,z.hex),"stroke"==d&&z[e]("opacity")&&x(l,{"stroke-opacity":z.opacity>1?z.opacity/100:z.opacity}),"stroke"==d&&i._.arrows&&("startString"in i._.arrows&&_(i,i._.arrows.startString),"endString"in i._.arrows&&_(i,i._.arrows.endString,1));break;case"gradient":("circle"==i.type||"ellipse"==i.type||"r"!=r(g).charAt())&&v(i,g);break;case"opacity":u.gradient&&!u[e]("stroke-opacity")&&x(l,{"stroke-opacity":g>1?g/100:g});case"fill-opacity":if(u.gradient){P=t._g.doc.getElementById(l.getAttribute("fill").replace(/^url\(#|\)$/g,c)),P&&(F=P.getElementsByTagName("stop"),x(F[F.length-1],{"stop-opacity":g}));break}default:"font-size"==d&&(g=n(g,10)+"px");var R=d.replace(/(\-.)/g,function(t){return t.substring(1).toUpperCase()});l.style[R]=g,i._.dirty=1,l.setAttribute(d,g)}}S(i,a),l.style.visibility=f},C=1.2,S=function(i,a){if("text"==i.type&&(a[e]("text")||a[e]("font")||a[e]("font-size")||a[e]("x")||a[e]("y"))){var s=i.attrs,o=i.node,l=o.firstChild?n(t._g.doc.defaultView.getComputedStyle(o.firstChild,c).getPropertyValue("font-size"),10):10;if(a[e]("text")){for(s.text=a.text;o.firstChild;)o.removeChild(o.firstChild);for(var h=r(a.text).split("\n"),u=[],f,p=0,d=h.length;p<d;p++)f=x("tspan"),p&&x(f,{dy:l*C,x:s.x}),f.appendChild(t._g.doc.createTextNode(h[p])),o.appendChild(f),u[p]=f}else for(u=o.getElementsByTagName("tspan"),p=0,d=u.length;p<d;p++)p?x(u[p],{dy:l*C,x:s.x}):x(u[0],{dy:0});x(o,{x:s.x,y:s.y}),i._.dirty=1;var g=i._getBBox(),v=s.y-(g.y+g.height/2);g.height&&v&&t.is(v,"finite")&&x(u[0],{dy:v})}},T=function(t){return t.parentNode&&"a"===t.parentNode.tagName.toLowerCase()?t.parentNode:t},A=function(e,r){var i=0,n=0;this[0]=this.node=e,e.raphael=!0,this.id=t._oid++,e.raphaelid=this.id,this.matrix=t.matrix(),this.realPath=null,this.paper=r,this.attrs=this.attrs||{},this._={transform:[],sx:1,sy:1,deg:0,dx:0,dy:0,dirty:1},!r.bottom&&(r.bottom=this),this.prev=r.top,r.top&&(r.top.next=this),r.top=this,this.next=null},E=t.el;A.prototype=E,E.constructor=A,t._engine.path=function(t,e){var r=x("path");e.canvas&&e.canvas.appendChild(r);var i=new A(r,e);return i.type="path",B(i,{fill:"none",stroke:"#000",path:t}),i},E.rotate=function(t,e,n){if(this.removed)return this;if(t=r(t).split(h),t.length-1&&(e=i(t[1]),n=i(t[2])),t=i(t[0]),null==n&&(e=n),null==e||null==n){var a=this.getBBox(1);e=a.x+a.width/2,n=a.y+a.height/2}return this.transform(this._.transform.concat([["r",t,e,n]])),this},E.scale=function(t,e,n,a){if(this.removed)return this;if(t=r(t).split(h),t.length-1&&(e=i(t[1]),n=i(t[2]),a=i(t[3])),t=i(t[0]),null==e&&(e=t),null==a&&(n=a),null==n||null==a)var s=this.getBBox(1);return n=null==n?s.x+s.width/2:n,a=null==a?s.y+s.height/2:a,this.transform(this._.transform.concat([["s",t,e,n,a]])),this},E.translate=function(t,e){return this.removed?this:(t=r(t).split(h),t.length-1&&(e=i(t[1])),t=i(t[0])||0,e=+e||0,this.transform(this._.transform.concat([["t",t,e]])),this)},E.transform=function(r){var i=this._;if(null==r)return i.transform;if(t._extractTransform(this,r),this.clip&&x(this.clip,{transform:this.matrix.invert()}),this.pattern&&b(this),this.node&&x(this.node,{transform:this.matrix}),1!=i.sx||1!=i.sy){var n=this.attrs[e]("stroke-width")?this.attrs["stroke-width"]:1;this.attr({"stroke-width":n})}return i.transform=this.matrix.toTransformString(),this},E.hide=function(){return this.removed||(this.node.style.display="none"),this},E.show=function(){return this.removed||(this.node.style.display=""),this},E.remove=function(){var e=T(this.node);if(!this.removed&&e.parentNode){var r=this.paper;r.__set__&&r.__set__.exclude(this),u.unbind("raphael.*.*."+this.id),this.gradient&&r.defs.removeChild(this.gradient),t._tear(this,r),e.parentNode.removeChild(e),this.removeData();for(var i in this)this[i]="function"==typeof this[i]?t._removedFactory(i):null;this.removed=!0}},E._getBBox=function(){if("none"==this.node.style.display){this.show();var t=!0}var e=!1,r;this.paper.canvas.parentElement?r=this.paper.canvas.parentElement.style:this.paper.canvas.parentNode&&(r=this.paper.canvas.parentNode.style),r&&"none"==r.display&&(e=!0,r.display="");var i={};try{i=this.node.getBBox()}catch(n){i={x:this.node.clientLeft,y:this.node.clientTop,width:this.node.clientWidth,height:this.node.clientHeight}}finally{i=i||{},e&&(r.display="none")}return t&&this.hide(),i},E.attr=function(r,i){if(this.removed)return this;if(null==r){var n={};for(var a in this.attrs)this.attrs[e](a)&&(n[a]=this.attrs[a]);return n.gradient&&"none"==n.fill&&(n.fill=n.gradient)&&delete n.gradient,n.transform=this._.transform,n}if(null==i&&t.is(r,"string")){if("fill"==r&&"none"==this.attrs.fill&&this.attrs.gradient)return this.attrs.gradient;if("transform"==r)return this._.transform;for(var s=r.split(h),o={},l=0,c=s.length;l<c;l++)r=s[l],r in this.attrs?o[r]=this.attrs[r]:t.is(this.paper.customAttributes[r],"function")?o[r]=this.paper.customAttributes[r].def:o[r]=t._availableAttrs[r];return c-1?o:o[s[0]]}if(null==i&&t.is(r,"array")){for(o={},l=0,c=r.length;l<c;l++)o[r[l]]=this.attr(r[l]);return o}if(null!=i){var f={};f[r]=i}else null!=r&&t.is(r,"object")&&(f=r);for(var p in f)u("raphael.attr."+p+"."+this.id,this,f[p]);for(p in this.paper.customAttributes)if(this.paper.customAttributes[e](p)&&f[e](p)&&t.is(this.paper.customAttributes[p],"function")){var d=this.paper.customAttributes[p].apply(this,[].concat(f[p]));this.attrs[p]=f[p];for(var g in d)d[e](g)&&(f[g]=d[g])}return B(this,f),this},E.toFront=function(){if(this.removed)return this;var e=T(this.node);e.parentNode.appendChild(e);var r=this.paper;return r.top!=this&&t._tofront(this,r),this},E.toBack=function(){if(this.removed)return this;var e=T(this.node),r=e.parentNode;r.insertBefore(e,r.firstChild),t._toback(this,this.paper);var i=this.paper;return this},E.insertAfter=function(e){if(this.removed||!e)return this;var r=T(this.node),i=T(e.node||e[e.length-1].node);return i.nextSibling?i.parentNode.insertBefore(r,i.nextSibling):i.parentNode.appendChild(r),t._insertafter(this,e,this.paper),this},E.insertBefore=function(e){if(this.removed||!e)return this;var r=T(this.node),i=T(e.node||e[0].node);return i.parentNode.insertBefore(r,i),t._insertbefore(this,e,this.paper),this},E.blur=function(e){var r=this;if(0!==+e){var i=x("filter"),n=x("feGaussianBlur");r.attrs.blur=e,i.id=t.createUUID(),x(n,{stdDeviation:+e||1.5}),i.appendChild(n),r.paper.defs.appendChild(i),r._blur=i,x(r.node,{filter:"url(#"+i.id+")"})}else r._blur&&(r._blur.parentNode.removeChild(r._blur),delete r._blur,delete r.attrs.blur),r.node.removeAttribute("filter");return r},t._engine.circle=function(t,e,r,i){var n=x("circle");t.canvas&&t.canvas.appendChild(n);var a=new A(n,t);return a.attrs={cx:e,cy:r,r:i,fill:"none",stroke:"#000"},a.type="circle",x(n,a.attrs),a},t._engine.rect=function(t,e,r,i,n,a){var s=x("rect");t.canvas&&t.canvas.appendChild(s);var o=new A(s,t);return o.attrs={x:e,y:r,width:i,height:n,rx:a||0,ry:a||0,fill:"none",stroke:"#000"},o.type="rect",x(s,o.attrs),o},t._engine.ellipse=function(t,e,r,i,n){var a=x("ellipse");t.canvas&&t.canvas.appendChild(a);var s=new A(a,t);return s.attrs={cx:e,cy:r,rx:i,ry:n,fill:"none",stroke:"#000"},s.type="ellipse",x(a,s.attrs),s},t._engine.image=function(t,e,r,i,n,a){var s=x("image");x(s,{x:r,y:i,width:n,height:a,preserveAspectRatio:"none"}),s.setAttributeNS(p,"href",e),t.canvas&&t.canvas.appendChild(s);var o=new A(s,t);return o.attrs={x:r,y:i,width:n,height:a,src:e},o.type="image",o},t._engine.text=function(e,r,i,n){var a=x("text");e.canvas&&e.canvas.appendChild(a);var s=new A(a,e);return s.attrs={x:r,y:i,"text-anchor":"middle",text:n,"font-family":t._availableAttrs["font-family"],"font-size":t._availableAttrs["font-size"],stroke:"none",fill:"#000"},s.type="text",B(s,s.attrs),s},t._engine.setSize=function(t,e){return this.width=t||this.width,this.height=e||this.height,this.canvas.setAttribute("width",this.width),this.canvas.setAttribute("height",this.height),this._viewBox&&this.setViewBox.apply(this,this._viewBox),this},t._engine.create=function(){var e=t._getContainer.apply(0,arguments),r=e&&e.container,i=e.x,n=e.y,a=e.width,s=e.height;if(!r)throw new Error("SVG container not found.");var o=x("svg"),l="overflow:hidden;",h;return i=i||0,n=n||0,a=a||512,s=s||342,x(o,{height:s,version:1.1,width:a,xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink"}),1==r?(o.style.cssText=l+"position:absolute;left:"+i+"px;top:"+n+"px",t._g.doc.body.appendChild(o),h=1):(o.style.cssText=l+"position:relative",r.firstChild?r.insertBefore(o,r.firstChild):r.appendChild(o)),r=new t._Paper,r.width=a,r.height=s,r.canvas=o,r.clear(),r._left=r._top=0,h&&(r.renderfix=function(){}),r.renderfix(),r},t._engine.setViewBox=function(t,e,r,i,n){u("raphael.setViewBox",this,this._viewBox,[t,e,r,i,n]);var a=this.getSize(),o=s(r/a.width,i/a.height),l=this.top,h=n?"xMidYMid meet":"xMinYMin",c,p;for(null==t?(this._vbSize&&(o=1),delete this._vbSize,c="0 0 "+this.width+f+this.height):(this._vbSize=o,c=t+f+e+f+r+f+i),x(this.canvas,{viewBox:c,preserveAspectRatio:h});o&&l;)p="stroke-width"in l.attrs?l.attrs["stroke-width"]:1,l.attr({"stroke-width":p}),l._.dirty=1,l._.dirtyT=1,l=l.prev;return this._viewBox=[t,e,r,i,!!n],this},t.prototype.renderfix=function(){var t=this.canvas,e=t.style,r;try{r=t.getScreenCTM()||t.createSVGMatrix()}catch(i){r=t.createSVGMatrix()}var n=-r.e%1,a=-r.f%1;(n||a)&&(n&&(this._left=(this._left+n)%1,e.left=this._left+"px"),a&&(this._top=(this._top+a)%1,e.top=this._top+"px"))},t.prototype.clear=function(){t.eve("raphael.clear",this);for(var e=this.canvas;e.firstChild;)e.removeChild(e.firstChild);this.bottom=this.top=null,(this.desc=x("desc")).appendChild(t._g.doc.createTextNode("Created with Raphaël "+t.version)),e.appendChild(this.desc),e.appendChild(this.defs=x("defs"))},t.prototype.remove=function(){u("raphael.remove",this),this.canvas.parentNode&&this.canvas.parentNode.removeChild(this.canvas);for(var e in this)this[e]="function"==typeof this[e]?t._removedFactory(e):null};var N=t.st;for(var M in E)E[e](M)&&!N[e](M)&&(N[M]=function(t){return function(){var e=arguments;return this.forEach(function(r){r[t].apply(r,e)})}}(M))}}.apply(e,i),!(void 0!==n&&(t.exports=n))},function(t,e,r){var i,n;i=[r(1)],n=function(t){if(!t||t.vml){var e="hasOwnProperty",r=String,i=parseFloat,n=Math,a=n.round,s=n.max,o=n.min,l=n.abs,h="fill",u=/[, ]+/,c=t.eve,f=" progid:DXImageTransform.Microsoft",p=" ",d="",g={M:"m",L:"l",C:"c",Z:"x",m:"t",l:"r",c:"v",z:"x"},x=/([clmz]),?([^clmz]*)/gi,v=/ progid:\S+Blur\([^\)]+\)/g,y=/-?[^,\s-]+/g,m="position:absolute;left:0;top:0;width:1px;height:1px;behavior:url(#default#VML)",b=21600,_={path:1,rect:1,image:1},w={circle:1,ellipse:1},k=function(e){var i=/[ahqstv]/gi,n=t._pathToAbsolute;if(r(e).match(i)&&(n=t._path2curve),i=/[clmz]/g,n==t._pathToAbsolute&&!r(e).match(i)){var s=r(e).replace(x,function(t,e,r){var i=[],n="m"==e.toLowerCase(),s=g[e];return r.replace(y,function(t){n&&2==i.length&&(s+=i+g["m"==e?"l":"L"],i=[]),i.push(a(t*b))}),s+i});return s}var o=n(e),l,h;s=[];for(var u=0,c=o.length;u<c;u++){l=o[u],h=o[u][0].toLowerCase(),"z"==h&&(h="x");for(var f=1,v=l.length;f<v;f++)h+=a(l[f]*b)+(f!=v-1?",":d);s.push(h)}return s.join(p)},B=function(e,r,i){var n=t.matrix();return n.rotate(-e,.5,.5),{dx:n.x(r,i),dy:n.y(r,i)}},C=function(t,e,r,i,n,a){var s=t._,o=t.matrix,u=s.fillpos,c=t.node,f=c.style,d=1,g="",x,v=b/e,y=b/r;if(f.visibility="hidden",e&&r){if(c.coordsize=l(v)+p+l(y),f.rotation=a*(e*r<0?-1:1),a){var m=B(a,i,n);i=m.dx,n=m.dy}if(e<0&&(g+="x"),r<0&&(g+=" y")&&(d=-1),f.flip=g,c.coordorigin=i*-v+p+n*-y,u||s.fillsize){var _=c.getElementsByTagName(h);_=_&&_[0],c.removeChild(_),u&&(m=B(a,o.x(u[0],u[1]),o.y(u[0],u[1])),_.position=m.dx*d+p+m.dy*d),s.fillsize&&(_.size=s.fillsize[0]*l(e)+p+s.fillsize[1]*l(r)),c.appendChild(_)}f.visibility="visible"}};t.toString=function(){return"Your browser doesn’t support SVG. Falling down to VML.\nYou are running Raphaël "+this.version};var S=function(t,e,i){for(var n=r(e).toLowerCase().split("-"),a=i?"end":"start",s=n.length,o="classic",l="medium",h="medium";s--;)switch(n[s]){case"block":case"classic":case"oval":case"diamond":case"open":case"none":o=n[s];break;case"wide":case"narrow":h=n[s];break;case"long":case"short":l=n[s]}var u=t.node.getElementsByTagName("stroke")[0];u[a+"arrow"]=o,u[a+"arrowlength"]=l,u[a+"arrowwidth"]=h},T=function(n,l){n.attrs=n.attrs||{};var c=n.node,f=n.attrs,g=c.style,x,v=_[n.type]&&(l.x!=f.x||l.y!=f.y||l.width!=f.width||l.height!=f.height||l.cx!=f.cx||l.cy!=f.cy||l.rx!=f.rx||l.ry!=f.ry||l.r!=f.r),y=w[n.type]&&(f.cx!=l.cx||f.cy!=l.cy||f.r!=l.r||f.rx!=l.rx||f.ry!=l.ry),m=n;for(var B in l)l[e](B)&&(f[B]=l[B]);if(v&&(f.path=t._getPath[n.type](n),n._.dirty=1),l.href&&(c.href=l.href),l.title&&(c.title=l.title),l.target&&(c.target=l.target),l.cursor&&(g.cursor=l.cursor),"blur"in l&&n.blur(l.blur),(l.path&&"path"==n.type||v)&&(c.path=k(~r(f.path).toLowerCase().indexOf("r")?t._pathToAbsolute(f.path):f.path),n._.dirty=1,"image"==n.type&&(n._.fillpos=[f.x,f.y],n._.fillsize=[f.width,f.height],C(n,1,1,0,0,0))),"transform"in l&&n.transform(l.transform),y){var T=+f.cx,E=+f.cy,N=+f.rx||+f.r||0,L=+f.ry||+f.r||0;c.path=t.format("ar{0},{1},{2},{3},{4},{1},{4},{1}x",a((T-N)*b),a((E-L)*b),a((T+N)*b),a((E+L)*b),a(T*b)),n._.dirty=1}if("clip-rect"in l){var z=r(l["clip-rect"]).split(u);if(4==z.length){z[2]=+z[2]+ +z[0],z[3]=+z[3]+ +z[1];var P=c.clipRect||t._g.doc.createElement("div"),F=P.style;F.clip=t.format("rect({1}px {2}px {3}px {0}px)",z),c.clipRect||(F.position="absolute",F.top=0,F.left=0,F.width=n.paper.width+"px",F.height=n.paper.height+"px",c.parentNode.insertBefore(P,c),P.appendChild(c),c.clipRect=P)}l["clip-rect"]||c.clipRect&&(c.clipRect.style.clip="auto")}if(n.textpath){var R=n.textpath.style;l.font&&(R.font=l.font),l["font-family"]&&(R.fontFamily='"'+l["font-family"].split(",")[0].replace(/^['"]+|['"]+$/g,d)+'"'),l["font-size"]&&(R.fontSize=l["font-size"]),l["font-weight"]&&(R.fontWeight=l["font-weight"]),l["font-style"]&&(R.fontStyle=l["font-style"])}if("arrow-start"in l&&S(m,l["arrow-start"]),"arrow-end"in l&&S(m,l["arrow-end"],1),null!=l.opacity||null!=l["stroke-width"]||null!=l.fill||null!=l.src||null!=l.stroke||null!=l["stroke-width"]||null!=l["stroke-opacity"]||null!=l["fill-opacity"]||null!=l["stroke-dasharray"]||null!=l["stroke-miterlimit"]||null!=l["stroke-linejoin"]||null!=l["stroke-linecap"]){var I=c.getElementsByTagName(h),j=!1;if(I=I&&I[0],!I&&(j=I=M(h)),"image"==n.type&&l.src&&(I.src=l.src),l.fill&&(I.on=!0),null!=I.on&&"none"!=l.fill&&null!==l.fill||(I.on=!1),I.on&&l.fill){var q=r(l.fill).match(t._ISURL);if(q){I.parentNode==c&&c.removeChild(I),I.rotate=!0,I.src=q[1],I.type="tile";var D=n.getBBox(1);I.position=D.x+p+D.y,n._.fillpos=[D.x,D.y],t._preload(q[1],function(){n._.fillsize=[this.offsetWidth,this.offsetHeight]})}else I.color=t.getRGB(l.fill).hex,I.src=d,I.type="solid",t.getRGB(l.fill).error&&(m.type in{circle:1,ellipse:1}||"r"!=r(l.fill).charAt())&&A(m,l.fill,I)&&(f.fill="none",f.gradient=l.fill,I.rotate=!1)}if("fill-opacity"in l||"opacity"in l){var V=((+f["fill-opacity"]+1||2)-1)*((+f.opacity+1||2)-1)*((+t.getRGB(l.fill).o+1||2)-1);V=o(s(V,0),1),I.opacity=V,I.src&&(I.color="none")}c.appendChild(I);var O=c.getElementsByTagName("stroke")&&c.getElementsByTagName("stroke")[0],Y=!1;!O&&(Y=O=M("stroke")),(l.stroke&&"none"!=l.stroke||l["stroke-width"]||null!=l["stroke-opacity"]||l["stroke-dasharray"]||l["stroke-miterlimit"]||l["stroke-linejoin"]||l["stroke-linecap"])&&(O.on=!0),("none"==l.stroke||null===l.stroke||null==O.on||0==l.stroke||0==l["stroke-width"])&&(O.on=!1);var W=t.getRGB(l.stroke);O.on&&l.stroke&&(O.color=W.hex),V=((+f["stroke-opacity"]+1||2)-1)*((+f.opacity+1||2)-1)*((+W.o+1||2)-1);var G=.75*(i(l["stroke-width"])||1);if(V=o(s(V,0),1),null==l["stroke-width"]&&(G=f["stroke-width"]),l["stroke-width"]&&(O.weight=G),G&&G<1&&(V*=G)&&(O.weight=1),O.opacity=V,l["stroke-linejoin"]&&(O.joinstyle=l["stroke-linejoin"]||"miter"),O.miterlimit=l["stroke-miterlimit"]||8,l["stroke-linecap"]&&(O.endcap="butt"==l["stroke-linecap"]?"flat":"square"==l["stroke-linecap"]?"square":"round"),"stroke-dasharray"in l){var H={"-":"shortdash",".":"shortdot","-.":"shortdashdot","-..":"shortdashdotdot",". ":"dot","- ":"dash","--":"longdash","- .":"dashdot","--.":"longdashdot","--..":"longdashdotdot"};O.dashstyle=H[e](l["stroke-dasharray"])?H[l["stroke-dasharray"]]:d}Y&&c.appendChild(O)}if("text"==m.type){m.paper.canvas.style.display=d;var X=m.paper.span,U=100,$=f.font&&f.font.match(/\d+(?:\.\d*)?(?=px)/);g=X.style,f.font&&(g.font=f.font),f["font-family"]&&(g.fontFamily=f["font-family"]),f["font-weight"]&&(g.fontWeight=f["font-weight"]),f["font-style"]&&(g.fontStyle=f["font-style"]),$=i(f["font-size"]||$&&$[0])||10,g.fontSize=$*U+"px",m.textpath.string&&(X.innerHTML=r(m.textpath.string).replace(/</g,"&#60;").replace(/&/g,"&#38;").replace(/\n/g,"<br>"));var Z=X.getBoundingClientRect();m.W=f.w=(Z.right-Z.left)/U,m.H=f.h=(Z.bottom-Z.top)/U,m.X=f.x,m.Y=f.y+m.H/2,("x"in l||"y"in l)&&(m.path.v=t.format("m{0},{1}l{2},{1}",a(f.x*b),a(f.y*b),a(f.x*b)+1));for(var Q=["x","y","text","font","font-family","font-weight","font-style","font-size"],J=0,K=Q.length;J<K;J++)if(Q[J]in l){m._.dirty=1;break}switch(f["text-anchor"]){case"start":m.textpath.style["v-text-align"]="left",m.bbx=m.W/2;break;case"end":m.textpath.style["v-text-align"]="right",m.bbx=-m.W/2;break;default:m.textpath.style["v-text-align"]="center",m.bbx=0}m.textpath.style["v-text-kern"]=!0}},A=function(e,a,s){e.attrs=e.attrs||{};var o=e.attrs,l=Math.pow,h,u,c="linear",f=".5 .5";if(e.attrs.gradient=a,a=r(a).replace(t._radial_gradient,function(t,e,r){return c="radial",e&&r&&(e=i(e),r=i(r),l(e-.5,2)+l(r-.5,2)>.25&&(r=n.sqrt(.25-l(e-.5,2))*(2*(r>.5)-1)+.5),f=e+p+r),d}),a=a.split(/\s*\-\s*/),"linear"==c){var g=a.shift();if(g=-i(g),isNaN(g))return null}var x=t._parseDots(a);if(!x)return null;if(e=e.shape||e.node,x.length){e.removeChild(s),s.on=!0,s.method="none",s.color=x[0].color,s.color2=x[x.length-1].color;for(var v=[],y=0,m=x.length;y<m;y++)x[y].offset&&v.push(x[y].offset+p+x[y].color);s.colors=v.length?v.join():"0% "+s.color,"radial"==c?(s.type="gradientTitle",s.focus="100%",s.focussize="0 0",s.focusposition=f,s.angle=0):(s.type="gradient",s.angle=(270-g)%360),e.appendChild(s)}return 1},E=function(e,r){this[0]=this.node=e,e.raphael=!0,this.id=t._oid++,e.raphaelid=this.id,this.X=0,this.Y=0,this.attrs={},this.paper=r,this.matrix=t.matrix(),this._={transform:[],sx:1,sy:1,dx:0,dy:0,deg:0,dirty:1,dirtyT:1},!r.bottom&&(r.bottom=this),this.prev=r.top,r.top&&(r.top.next=this),r.top=this,this.next=null},N=t.el;E.prototype=N,N.constructor=E,N.transform=function(e){if(null==e)return this._.transform;var i=this.paper._viewBoxShift,n=i?"s"+[i.scale,i.scale]+"-1-1t"+[i.dx,i.dy]:d,a;i&&(a=e=r(e).replace(/\.{3}|\u2026/g,this._.transform||d)),t._extractTransform(this,n+e);var s=this.matrix.clone(),o=this.skew,l=this.node,h,u=~r(this.attrs.fill).indexOf("-"),c=!r(this.attrs.fill).indexOf("url(");if(s.translate(1,1),c||u||"image"==this.type)if(o.matrix="1 0 0 1",o.offset="0 0",h=s.split(),u&&h.noRotation||!h.isSimple){l.style.filter=s.toFilter();var f=this.getBBox(),g=this.getBBox(1),x=f.x-g.x,v=f.y-g.y;l.coordorigin=x*-b+p+v*-b,C(this,1,1,x,v,0)}else l.style.filter=d,C(this,h.scalex,h.scaley,h.dx,h.dy,h.rotate);else l.style.filter=d,o.matrix=r(s),o.offset=s.offset();return null!==a&&(this._.transform=a,t._extractTransform(this,a)),this},N.rotate=function(t,e,n){if(this.removed)return this;if(null!=t){if(t=r(t).split(u),t.length-1&&(e=i(t[1]),n=i(t[2])),t=i(t[0]),null==n&&(e=n),null==e||null==n){var a=this.getBBox(1);e=a.x+a.width/2,n=a.y+a.height/2}return this._.dirtyT=1,this.transform(this._.transform.concat([["r",t,e,n]])),this}},N.translate=function(t,e){return this.removed?this:(t=r(t).split(u),t.length-1&&(e=i(t[1])),t=i(t[0])||0,e=+e||0,this._.bbox&&(this._.bbox.x+=t,this._.bbox.y+=e),this.transform(this._.transform.concat([["t",t,e]])),this)},N.scale=function(t,e,n,a){if(this.removed)return this;if(t=r(t).split(u),t.length-1&&(e=i(t[1]),n=i(t[2]),a=i(t[3]),isNaN(n)&&(n=null),isNaN(a)&&(a=null)),t=i(t[0]),null==e&&(e=t),null==a&&(n=a),null==n||null==a)var s=this.getBBox(1);return n=null==n?s.x+s.width/2:n,a=null==a?s.y+s.height/2:a,this.transform(this._.transform.concat([["s",t,e,n,a]])),this._.dirtyT=1,this},N.hide=function(){return!this.removed&&(this.node.style.display="none"),this},N.show=function(){return!this.removed&&(this.node.style.display=d),this},N.auxGetBBox=t.el.getBBox,N.getBBox=function(){var t=this.auxGetBBox();if(this.paper&&this.paper._viewBoxShift){var e={},r=1/this.paper._viewBoxShift.scale;return e.x=t.x-this.paper._viewBoxShift.dx,e.x*=r,e.y=t.y-this.paper._viewBoxShift.dy,e.y*=r,e.width=t.width*r,e.height=t.height*r,e.x2=e.x+e.width,e.y2=e.y+e.height,e}return t},N._getBBox=function(){return this.removed?{}:{x:this.X+(this.bbx||0)-this.W/2,y:this.Y-this.H,width:this.W,height:this.H}},N.remove=function(){if(!this.removed&&this.node.parentNode){this.paper.__set__&&this.paper.__set__.exclude(this),t.eve.unbind("raphael.*.*."+this.id),t._tear(this,this.paper),this.node.parentNode.removeChild(this.node),this.shape&&this.shape.parentNode.removeChild(this.shape);for(var e in this)this[e]="function"==typeof this[e]?t._removedFactory(e):null;this.removed=!0}},N.attr=function(r,i){if(this.removed)return this;if(null==r){var n={};for(var a in this.attrs)this.attrs[e](a)&&(n[a]=this.attrs[a]);return n.gradient&&"none"==n.fill&&(n.fill=n.gradient)&&delete n.gradient,n.transform=this._.transform,n}if(null==i&&t.is(r,"string")){if(r==h&&"none"==this.attrs.fill&&this.attrs.gradient)return this.attrs.gradient;for(var s=r.split(u),o={},l=0,f=s.length;l<f;l++)r=s[l],r in this.attrs?o[r]=this.attrs[r]:t.is(this.paper.customAttributes[r],"function")?o[r]=this.paper.customAttributes[r].def:o[r]=t._availableAttrs[r];return f-1?o:o[s[0]]}if(this.attrs&&null==i&&t.is(r,"array")){for(o={},l=0,f=r.length;l<f;l++)o[r[l]]=this.attr(r[l]);return o}var p;null!=i&&(p={},p[r]=i),null==i&&t.is(r,"object")&&(p=r);for(var d in p)c("raphael.attr."+d+"."+this.id,this,p[d]);if(p){for(d in this.paper.customAttributes)if(this.paper.customAttributes[e](d)&&p[e](d)&&t.is(this.paper.customAttributes[d],"function")){var g=this.paper.customAttributes[d].apply(this,[].concat(p[d]));this.attrs[d]=p[d];for(var x in g)g[e](x)&&(p[x]=g[x])}p.text&&"text"==this.type&&(this.textpath.string=p.text),T(this,p)}return this},N.toFront=function(){return!this.removed&&this.node.parentNode.appendChild(this.node),this.paper&&this.paper.top!=this&&t._tofront(this,this.paper),this},N.toBack=function(){return this.removed?this:(this.node.parentNode.firstChild!=this.node&&(this.node.parentNode.insertBefore(this.node,this.node.parentNode.firstChild),t._toback(this,this.paper)),this)},N.insertAfter=function(e){return this.removed?this:(e.constructor==t.st.constructor&&(e=e[e.length-1]),e.node.nextSibling?e.node.parentNode.insertBefore(this.node,e.node.nextSibling):e.node.parentNode.appendChild(this.node),t._insertafter(this,e,this.paper),this)},N.insertBefore=function(e){return this.removed?this:(e.constructor==t.st.constructor&&(e=e[0]),e.node.parentNode.insertBefore(this.node,e.node),t._insertbefore(this,e,this.paper),this)},N.blur=function(e){var r=this.node.runtimeStyle,i=r.filter;return i=i.replace(v,d),0!==+e?(this.attrs.blur=e,r.filter=i+p+f+".Blur(pixelradius="+(+e||1.5)+")",r.margin=t.format("-{0}px 0 0 -{0}px",a(+e||1.5))):(r.filter=i,r.margin=0,delete this.attrs.blur),this},t._engine.path=function(t,e){var r=M("shape");r.style.cssText=m,r.coordsize=b+p+b,r.coordorigin=e.coordorigin;var i=new E(r,e),n={fill:"none",stroke:"#000"};t&&(n.path=t),i.type="path",i.path=[],i.Path=d,T(i,n),e.canvas&&e.canvas.appendChild(r);var a=M("skew");return a.on=!0,r.appendChild(a),i.skew=a,i.transform(d),i},t._engine.rect=function(e,r,i,n,a,s){var o=t._rectPath(r,i,n,a,s),l=e.path(o),h=l.attrs;return l.X=h.x=r,l.Y=h.y=i,l.W=h.width=n,l.H=h.height=a,h.r=s,h.path=o,l.type="rect",l},t._engine.ellipse=function(t,e,r,i,n){var a=t.path(),s=a.attrs;return a.X=e-i,a.Y=r-n,a.W=2*i,a.H=2*n,a.type="ellipse",T(a,{cx:e,cy:r,rx:i,ry:n}),a},t._engine.circle=function(t,e,r,i){var n=t.path(),a=n.attrs;return n.X=e-i,n.Y=r-i,n.W=n.H=2*i,n.type="circle",T(n,{cx:e,cy:r,r:i}),n},t._engine.image=function(e,r,i,n,a,s){var o=t._rectPath(i,n,a,s),l=e.path(o).attr({stroke:"none"}),u=l.attrs,c=l.node,f=c.getElementsByTagName(h)[0];return u.src=r,l.X=u.x=i,l.Y=u.y=n,l.W=u.width=a,l.H=u.height=s,u.path=o,l.type="image",f.parentNode==c&&c.removeChild(f),f.rotate=!0,f.src=r,f.type="tile",l._.fillpos=[i,n],l._.fillsize=[a,s],c.appendChild(f),C(l,1,1,0,0,0),l},t._engine.text=function(e,i,n,s){var o=M("shape"),l=M("path"),h=M("textpath");i=i||0,n=n||0,s=s||"",l.v=t.format("m{0},{1}l{2},{1}",a(i*b),a(n*b),a(i*b)+1),l.textpathok=!0,h.string=r(s),h.on=!0,o.style.cssText=m,o.coordsize=b+p+b,o.coordorigin="0 0";var u=new E(o,e),c={fill:"#000",stroke:"none",font:t._availableAttrs.font,text:s};u.shape=o,u.path=l,u.textpath=h,u.type="text",u.attrs.text=r(s),u.attrs.x=i,u.attrs.y=n,u.attrs.w=1,u.attrs.h=1,T(u,c),o.appendChild(h),o.appendChild(l),e.canvas.appendChild(o);var f=M("skew");return f.on=!0,o.appendChild(f),u.skew=f,u.transform(d),u},t._engine.setSize=function(e,r){var i=this.canvas.style;return this.width=e,this.height=r,e==+e&&(e+="px"),r==+r&&(r+="px"),i.width=e,i.height=r,i.clip="rect(0 "+e+" "+r+" 0)",this._viewBox&&t._engine.setViewBox.apply(this,this._viewBox),this},t._engine.setViewBox=function(e,r,i,n,a){t.eve("raphael.setViewBox",this,this._viewBox,[e,r,i,n,a]);var s=this.getSize(),o=s.width,l=s.height,h,u;return a&&(h=l/n,u=o/i,i*h<o&&(e-=(o-i*h)/2/h),n*u<l&&(r-=(l-n*u)/2/u)),this._viewBox=[e,r,i,n,!!a],this._viewBoxShift={dx:-e,dy:-r,scale:s},this.forEach(function(t){t.transform("...")}),this};var M;t._engine.initWin=function(t){var e=t.document;e.styleSheets.length<31?e.createStyleSheet().addRule(".rvml","behavior:url(#default#VML)"):e.styleSheets[0].addRule(".rvml","behavior:url(#default#VML)");try{!e.namespaces.rvml&&e.namespaces.add("rvml","urn:schemas-microsoft-com:vml"),M=function(t){return e.createElement("<rvml:"+t+' class="rvml">')}}catch(r){M=function(t){return e.createElement("<"+t+' xmlns="urn:schemas-microsoft.com:vml" class="rvml">')}}},t._engine.initWin(t._g.win),t._engine.create=function(){var e=t._getContainer.apply(0,arguments),r=e.container,i=e.height,n,a=e.width,s=e.x,o=e.y;if(!r)throw new Error("VML container not found.");var l=new t._Paper,h=l.canvas=t._g.doc.createElement("div"),u=h.style;return s=s||0,o=o||0,a=a||512,i=i||342,l.width=a,l.height=i,a==+a&&(a+="px"),i==+i&&(i+="px"),l.coordsize=1e3*b+p+1e3*b,l.coordorigin="0 0",l.span=t._g.doc.createElement("span"),l.span.style.cssText="position:absolute;left:-9999em;top:-9999em;padding:0;margin:0;line-height:1;",h.appendChild(l.span),u.cssText=t.format("top:0;left:0;width:{0};height:{1};display:inline-block;position:relative;clip:rect(0 {0} {1} 0);overflow:hidden",a,i),1==r?(t._g.doc.body.appendChild(h),u.left=s+"px",u.top=o+"px",u.position="absolute"):r.firstChild?r.insertBefore(h,r.firstChild):r.appendChild(h),l.renderfix=function(){},l},t.prototype.clear=function(){t.eve("raphael.clear",this),this.canvas.innerHTML=d,this.span=t._g.doc.createElement("span"),this.span.style.cssText="position:absolute;left:-9999em;top:-9999em;padding:0;margin:0;line-height:1;display:inline;",this.canvas.appendChild(this.span),this.bottom=this.top=null},t.prototype.remove=function(){t.eve("raphael.remove",this),this.canvas.parentNode.removeChild(this.canvas);for(var e in this)this[e]="function"==typeof this[e]?t._removedFactory(e):null;return!0};var L=t.st;for(var z in N)N[e](z)&&!L[e](z)&&(L[z]=function(t){return function(){var e=arguments;return this.forEach(function(r){r[t].apply(r,e)})}}(z))}}.apply(e,i),!(void 0!==n&&(t.exports=n))}])});

/***/ }),
/* 45 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _preview = __webpack_require__(46);

var _preview2 = _interopRequireDefault(_preview);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @fileoverview Implements markdown preview
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @author NHN Ent. FE Development Lab <dl_javascript@nhnent.com>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */


/**
 * Class Markdown Preview
 * @extends {Preview}
 */
var MarkdownPreview = function (_Preview) {
  _inherits(MarkdownPreview, _Preview);

  /**
   * Creates an instance of MarkdownPreview.
   * @param {jQuery} $el - base jQuery element
   * @param {EventManager} eventManager - event manager
   * @param {Convertor} convertor - convertor
   * @param {boolean} isViewer - true for view only mode
   * @memberof MarkdownPreview
   */
  function MarkdownPreview($el, eventManager, convertor, isViewer) {
    _classCallCheck(this, MarkdownPreview);

    var _this = _possibleConstructorReturn(this, (MarkdownPreview.__proto__ || Object.getPrototypeOf(MarkdownPreview)).call(this, $el, eventManager, convertor, isViewer));

    _this._initEvent();
    return _this;
  }

  /**
   * Initialize event
   * @private
   */


  _createClass(MarkdownPreview, [{
    key: '_initEvent',
    value: function _initEvent() {
      var _this2 = this;

      var latestMarkdownValue = '';

      this.eventManager.listen('contentChangedFromMarkdown', function (markdownEditor) {
        latestMarkdownValue = markdownEditor.getValue();

        if (_this2.isVisible()) {
          _this2.lazyRunner.run('refresh', latestMarkdownValue.replace(/<br>\n/g, '<br>'));
        }
      });

      this.eventManager.listen('previewNeedsRefresh', function (value) {
        _this2.refresh(value || latestMarkdownValue);
      });

      this.$el.on('scroll', function (event) {
        _this2.eventManager.emit('scroll', {
          source: 'preview',
          data: event
        });
      });
    }

    /**
     * render
     * @param {string} html - html string to render
     * @memberof MarkdownPreview
     * @override
     */

  }, {
    key: 'render',
    value: function render(html) {
      _get(MarkdownPreview.prototype.__proto__ || Object.getPrototypeOf(MarkdownPreview.prototype), 'render', this).call(this, html);

      this.eventManager.emit('previewRenderAfter', this);
    }
  }]);

  return MarkdownPreview;
}(_preview2.default);

exports.default = MarkdownPreview;

/***/ }),
/* 46 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /**
fileoverview Implements preview
author NHN Ent. FE Development Lab <dl_javascript@nhnent.com>



var _jquery = __webpack_require__(1);

var _jquery2 = _interopRequireDefault(_jquery);

var _lazyRunner = __webpack_require__(47);

var _lazyRunner2 = _interopRequireDefault(_lazyRunner);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Class Preview
 **/
var Preview = function () {
  /**
   * Creates an instance of Preview.
   * @param {jQuery} $el Container element for preview
   * @param {EventManager} eventManager Event manager instance
   * @param {Convertor} convertor Convertor instance
   * @param {boolean} isViewer - whether viewer mode or not
   * @memberof Preview
   */
  function Preview($el, eventManager, convertor, isViewer) {
    _classCallCheck(this, Preview);

    this.eventManager = eventManager;
    this.convertor = convertor;
    this.$el = $el;
    this.isViewer = !!isViewer;

    this._initContentSection();

    this.lazyRunner = new _lazyRunner2.default();

    this.lazyRunner.registerLazyRunFunction('refresh', this.refresh, 800, this);
  }

  /**
   * Initialize content selection
   * @private
   */


  _createClass(Preview, [{
    key: '_initContentSection',
    value: function _initContentSection() {
      this._$previewContent = (0, _jquery2.default)('<div class="tui-editor-contents" />');
      this.$el.append(this._$previewContent);
    }

    /**
     * Refresh rendering
     * @memberof Preview
     * @param {string} markdown Markdown text
     */

  }, {
    key: 'refresh',
    value: function refresh(markdown) {
      this.render(this.convertor.toHTMLWithCodeHightlight(markdown));
    }

    /**
     * get html string
     * @returns {string} - html preview string
     * @memberof Preview
     */

  }, {
    key: 'getHTML',
    value: function getHTML() {
      return this._$previewContent.html();
    }

    /**
     * set html string
     * @param {string} html - html preview string
     * @memberof Preview
     */

  }, {
    key: 'setHTML',
    value: function setHTML(html) {
      this._$previewContent.html(html);
    }

    /**
     * Render HTML on preview
     * @memberof Preview
     * @param {string} html HTML string
     * @protected
     */

  }, {
    key: 'render',
    value: function render(html) {
      var _$previewContent = this._$previewContent;

      html = this.eventManager.emit('previewBeforeHook', html) || html;

      _$previewContent.empty();
      _$previewContent.html(html);
    }

    /**
     * Set preview height
     * @memberof Preview
     * @param {number} height - Height for preview container
     */

  }, {
    key: 'setHeight',
    value: function setHeight(height) {
      this.$el.get(0).style.height = height + 'px';
    }

    /**
     * set min height
     * @param {number} minHeight - min height
     * @memberof Preview
     */

  }, {
    key: 'setMinHeight',
    value: function setMinHeight(minHeight) {
      this.$el.get(0).style.minHeight = minHeight + 'px';
    }

    /**
     * Is Preview visible
     * @returns {boolean} result
     */

  }, {
    key: 'isVisible',
    value: function isVisible() {
      return this.$el.css('display') !== 'none';
    }
  }]);

  return Preview;
}();

exports.default = Preview;

/***/ }),
/* 47 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /**
fileoverview Implements LazyRunner
author NHN Ent. FE Development Lab <dl_javascript@nhnent.com>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      */


var _tuiCodeSnippet = __webpack_require__(2);

var _tuiCodeSnippet2 = _interopRequireDefault(_tuiCodeSnippet);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Class LazyRunner
 */
var LazyRunner = function () {
  /**
   * Creates an instance of LazyRunner.
   * @memberof LazyRunner
   */
  function LazyRunner() {
    _classCallCheck(this, LazyRunner);

    this.globalTOID = null;
    this.lazyRunFunctions = {};
  }

  _createClass(LazyRunner, [{
    key: 'run',
    value: function run(fn, params, context, delay) {
      var TOID = void 0;

      if (_tuiCodeSnippet2.default.isString(fn)) {
        TOID = this._runRegisteredRun(fn, params, context, delay);
      } else {
        TOID = this._runSingleRun(fn, params, context, delay, this.globalTOID);
        this.globalTOID = TOID;
      }

      return TOID;
    }
  }, {
    key: 'registerLazyRunFunction',
    value: function registerLazyRunFunction(name, fn, delay, context) {
      context = context || this;

      this.lazyRunFunctions[name] = {
        fn: fn,
        delay: delay,
        context: context,
        TOID: null
      };
    }
  }, {
    key: '_runSingleRun',
    value: function _runSingleRun(fn, params, context, delay, TOID) {
      this._clearTOIDIfNeed(TOID);

      TOID = setTimeout(function () {
        fn.call(context, params);
      }, delay);

      return TOID;
    }
  }, {
    key: '_runRegisteredRun',
    value: function _runRegisteredRun(lazyRunName, params, context, delay) {
      var lazyRunFunction = this.lazyRunFunctions[lazyRunName];
      var fn = lazyRunFunction.fn;
      var TOID = lazyRunFunction.TOID;

      delay = delay || lazyRunFunction.delay;
      context = context || lazyRunFunction.context;

      TOID = this._runSingleRun(fn, params, context, delay, TOID);

      lazyRunFunction.TOID = TOID;

      return TOID;
    }
  }, {
    key: '_clearTOIDIfNeed',
    value: function _clearTOIDIfNeed(TOID) {
      if (TOID) {
        clearTimeout(TOID);
      }
    }
  }]);

  return LazyRunner;
}();

exports.default = LazyRunner;

/***/ }),
/* 48 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /**
fileoverview Implements EventManager
author NHN Ent. FE Development Lab <dl_javascript@nhnent.com>



var _tuiCodeSnippet = __webpack_require__(2);

var _tuiCodeSnippet2 = _interopRequireDefault(_tuiCodeSnippet);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var eventList = ['previewBeforeHook', 'previewRenderAfter', 'previewNeedsRefresh', 'addImageBlobHook', 'setMarkdownAfter', 'contentChangedFromWysiwyg', 'changeFromWysiwyg', 'contentChangedFromMarkdown', 'changeFromMarkdown', 'change', 'changeModeToWysiwyg', 'changeModeToMarkdown', 'changeModeBefore', 'changeMode', 'changePreviewStyle', 'changePreviewTabPreview', 'changePreviewTabWrite', 'openPopupAddLink', 'openPopupAddImage', 'openPopupAddTable', 'openPopupTableUtils', 'openHeadingSelect', 'openPopupCodeBlockLanguages', 'openPopupCodeBlockEditor', 'openDropdownToolbar', 'closePopupCodeBlockLanguages', 'closePopupCodeBlockEditor', 'closeAllPopup', 'command', 'addCommandBefore', 'htmlUpdate', 'markdownUpdate', 'renderedHtmlUpdated', 'removeEditor', 'convertorAfterMarkdownToHtmlConverted', 'convertorBeforeHtmlToMarkdownConverted', 'convertorAfterHtmlToMarkdownConverted', 'stateChange', 'wysiwygSetValueAfter', 'wysiwygSetValueBefore', 'wysiwygGetValueBefore', 'wysiwygProcessHTMLText', 'wysiwygRangeChangeAfter', 'wysiwygKeyEvent', 'scroll', 'click', 'mousedown', 'mouseover', 'mouseout', 'mouseup', 'contextmenu', 'keydown', 'keyup', 'keyMap', 'load', 'focus', 'blur', 'paste', 'pasteBefore', 'willPaste', 'copy', 'copyBefore', 'copyAfter', 'cut', 'cutAfter', 'drop', 'show', 'hide'];

/**
 * Class EventManager
 */

var EventManager = function () {
  /**
   * Creates an instance of EventManager.
   * @memberof EventManager
   */
  function EventManager() {
    _classCallCheck(this, EventManager);

    this.events = new _tuiCodeSnippet2.default.Map();
    this.TYPE = new _tuiCodeSnippet2.default.Enum(eventList);
  }

  /**
   * Listen event and bind event handler
   * @memberof EventManager
   * @param {string} typeStr Event type string
   * @param {function} handler Event handler
   */


  _createClass(EventManager, [{
    key: 'listen',
    value: function listen(typeStr, handler) {
      var typeInfo = this._getTypeInfo(typeStr);
      var eventHandlers = this.events.get(typeInfo.type) || [];

      if (!this._hasEventType(typeInfo.type)) {
        throw new Error('There is no event type ' + typeInfo.type);
      }

      if (typeInfo.namespace) {
        handler.namespace = typeInfo.namespace;
      }

      eventHandlers.push(handler);

      this.events.set(typeInfo.type, eventHandlers);
    }

    /**
     * Emit event
     * @memberof EventManager
     * @param {string} eventName Event name to emit
     * @returns {Array}
     */

  }, {
    key: 'emit',
    value: function emit() {
      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      var typeStr = args.shift();
      var typeInfo = this._getTypeInfo(typeStr);
      var eventHandlers = this.events.get(typeInfo.type);
      var results = void 0;

      if (eventHandlers) {
        _tuiCodeSnippet2.default.forEach(eventHandlers, function (handler) {
          var result = handler.apply(undefined, args);

          if (!_tuiCodeSnippet2.default.isUndefined(result)) {
            results = results || [];
            results.push(result);
          }
        });
      }

      return results;
    }

    /**
     * Emit given event and return result
     * @memberof EventManager
     * @param {string} eventName Event name to emit
     * @param {string} sourceText Source text to change
     * @returns {string}
     */

  }, {
    key: 'emitReduce',
    value: function emitReduce() {
      for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        args[_key2] = arguments[_key2];
      }

      var type = args.shift();
      var eventHandlers = this.events.get(type);

      if (eventHandlers) {
        _tuiCodeSnippet2.default.forEach(eventHandlers, function (handler) {
          var result = handler.apply(undefined, args);

          if (!_tuiCodeSnippet2.default.isFalsy(result)) {
            args[0] = result;
          }
        });
      }

      return args[0];
    }

    /**
     * Get event type and namespace
     * @memberof EventManager
     * @param {string} typeStr Event type name
     * @returns {{type: string, namespace: string}}
     * @private
     */

  }, {
    key: '_getTypeInfo',
    value: function _getTypeInfo(typeStr) {
      var splited = typeStr.split('.');

      return {
        type: splited[0],
        namespace: splited[1]
      };
    }

    /**
     * Check whether event type exists or not
     * @param {string} type Event type name
     * @returns {boolean}
     * @private
     */

  }, {
    key: '_hasEventType',
    value: function _hasEventType(type) {
      return !_tuiCodeSnippet2.default.isUndefined(this.TYPE[this._getTypeInfo(type).type]);
    }

    /**
     * Add event type when given event not exists
     * @memberof EventManager
     * @param {string} type Event type name
     */

  }, {
    key: 'addEventType',
    value: function addEventType(type) {
      if (this._hasEventType(type)) {
        throw new Error('There is already have event type ' + type);
      }

      this.TYPE.set(type);
    }

    /**
     * Remove event handler from given event type
     * @memberof EventManager
     * @param {string} typeStr Event type name
     * @param {function} [handler] - registered event handler
     */

  }, {
    key: 'removeEventHandler',
    value: function removeEventHandler(typeStr, handler) {
      var _this = this;

      var _getTypeInfo2 = this._getTypeInfo(typeStr),
          type = _getTypeInfo2.type,
          namespace = _getTypeInfo2.namespace;

      if (type && handler) {
        this._removeEventHandlerWithHandler(type, handler);
      } else if (type && !namespace) {
        // dont use dot notation cuz eslint
        this.events['delete'](type);
      } else if (!type && namespace) {
        this.events.forEach(function (eventHandlers, eventType) {
          _this._removeEventHandlerWithTypeInfo(eventType, namespace);
        });
      } else if (type && namespace) {
        this._removeEventHandlerWithTypeInfo(type, namespace);
      }
    }

    /**
     * Remove event handler with event handler
     * @param {string} type - event type name
     * @param {function} handler - event handler
     * @memberof EventManager
     * @private
     */

  }, {
    key: '_removeEventHandlerWithHandler',
    value: function _removeEventHandlerWithHandler(type, handler) {
      var eventHandlers = this.events.get(type) || [];
      var handlerIndex = eventHandlers.indexOf(handler);
      if (handlerIndex >= 0) {
        eventHandlers.splice(handlerIndex, 1);
      }
    }

    /**
     * Remove event handler with event type information
     * @memberof EventManager
     * @param {string} type Event type name
     * @param {string} namespace Event namespace
     * @private
     */

  }, {
    key: '_removeEventHandlerWithTypeInfo',
    value: function _removeEventHandlerWithTypeInfo(type, namespace) {
      var handlersToSurvive = [];
      var eventHandlers = this.events.get(type);

      if (!eventHandlers) {
        return;
      }

      eventHandlers.map(function (handler) {
        if (handler.namespace !== namespace) {
          handlersToSurvive.push(handler);
        }

        return null;
      });

      this.events.set(type, handlersToSurvive);
    }
  }]);

  return EventManager;
}();

exports.default = EventManager;

/***/ }),
/* 49 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /**
fileoverview Implements CommandManager
author NHN Ent. FE Development Lab <dl_javascript@nhnent.com>



var _jquery = __webpack_require__(1);

var _jquery2 = _interopRequireDefault(_jquery);

var _tuiCodeSnippet = __webpack_require__(2);

var _tuiCodeSnippet2 = _interopRequireDefault(_tuiCodeSnippet);

var _command = __webpack_require__(50);

var _command2 = _interopRequireDefault(_command);

var _util = __webpack_require__(51);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var KEYMAP_OS_INDEX = _util.isMac ? 1 : 0;

/**
 * Class CommandManager
 */

var CommandManager = function () {
  /**
   * @param {ToastUIEditor} base nedInstance
   * @param {object} [options={}] - option object
   *  @param {boolean} [options.useCommandShortcut=true] - execute command with keyMap
   */
  function CommandManager(base) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    _classCallCheck(this, CommandManager);

    this._command = new _tuiCodeSnippet2.default.Map();
    this._mdCommand = new _tuiCodeSnippet2.default.Map();
    this._wwCommand = new _tuiCodeSnippet2.default.Map();
    this._options = _jquery2.default.extend({
      'useCommandShortcut': true
    }, options);

    this.base = base;

    this.keyMapCommand = {};

    this._initEvent();
  }

  /**
   * You can change command before command addition by addCommandBefore event.
   * @param {object} command - command
   * @returns {object}
   * @private
   */


  _createClass(CommandManager, [{
    key: '_addCommandBefore',
    value: function _addCommandBefore(command) {
      var commandWrapper = { command: command };

      this.base.eventManager.emit('addCommandBefore', commandWrapper);

      return commandWrapper.command || command;
    }

    /**
     * Add command
     * @memberof CommandManager
     * @param {Command} command Command instance
     * @returns {Command} Command
     */

  }, {
    key: 'addCommand',
    value: function addCommand(command) {
      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }

      if (args.length) {
        command = CommandManager.command.apply(CommandManager, [command].concat(args));
      }

      command = this._addCommandBefore(command);

      var name = command.getName();

      var commandBase = void 0;

      if (command.isMDType()) {
        commandBase = this._mdCommand;
      } else if (command.isWWType()) {
        commandBase = this._wwCommand;
      } else if (command.isGlobalType()) {
        commandBase = this._command;
      }

      commandBase.set(name, command);

      if (command.keyMap) {
        this.keyMapCommand[command.keyMap[KEYMAP_OS_INDEX]] = name;
      }

      return command;
    }

    /**
     * _initEvent
     * Bind event handler to eventManager
     * @private
     * @memberof CommandManager
     */

  }, {
    key: '_initEvent',
    value: function _initEvent() {
      var _this = this;

      this.base.eventManager.listen('command', function () {
        _this.exec.apply(_this, arguments);
      });

      this.base.eventManager.listen('keyMap', function (ev) {
        if (!_this._options.useCommandShortcut) {
          return;
        }
        var command = _this.keyMapCommand[ev.keyMap];

        if (command) {
          ev.data.preventDefault();
          _this.exec(command);
        }
      });
    }

    /**
     * Execute command
     * @memberof CommandManager
     * @param {String} name Command name
     * @returns {*}
     */

  }, {
    key: 'exec',
    value: function exec(name) {
      var commandToRun = void 0,
          result = void 0;
      var context = this.base;

      commandToRun = this._command.get(name);

      if (!commandToRun) {
        if (this.base.isMarkdownMode()) {
          commandToRun = this._mdCommand.get(name);
          context = this.base.mdEditor;
        } else {
          commandToRun = this._wwCommand.get(name);
          context = this.base.wwEditor;
        }
      }

      if (commandToRun) {
        var _commandToRun;

        for (var _len2 = arguments.length, args = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
          args[_key2 - 1] = arguments[_key2];
        }

        args.unshift(context);
        result = (_commandToRun = commandToRun).exec.apply(_commandToRun, args);
      }

      return result;
    }
  }]);

  return CommandManager;
}();

/**
 * Create command by given editor type and property object
 * @memberof ComponentManager
 * @param {string} type Command type
 * @param {{name: string, keyMap: object}} props Property
 * @returns {*}
 */


CommandManager.command = function (type, props) {
  var command = _command2.default.factory(type, props.name, props.keyMap);

  _tuiCodeSnippet2.default.extend(command, props);

  return command;
};

exports.default = CommandManager;

/***/ }),
/* 50 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /**
fileoverview Implements Command
author NHN Ent. FE Development Lab <dl_javascript@nhnent.com>



var _tuiCodeSnippet = __webpack_require__(2);

var _tuiCodeSnippet2 = _interopRequireDefault(_tuiCodeSnippet);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Class Command
 */
var Command = function () {
  /**
   * @param {string} name Command name
   * @param {number} type Command type (Command.TYPE)
   * @param {Array.<string>} [keyMap] keyMap
   */
  function Command(name, type, keyMap) {
    _classCallCheck(this, Command);

    this.name = name;
    this.type = type;

    if (keyMap) {
      this.setKeyMap(keyMap);
    }
  }
  /**
   * getName
   * returns Name of command
   * @memberof Command
   * @returns {string} Command Name
   */


  _createClass(Command, [{
    key: 'getName',
    value: function getName() {
      return this.name;
    }

    /**
     * getType
     * returns Type of command
     * @memberof Command
     * @returns {number} Command Command type number
     */

  }, {
    key: 'getType',
    value: function getType() {
      return this.type;
    }

    /**
     * isMDType
     * returns whether Command Type is Markdown or not
     * @memberof Command
     * @returns {boolean} result
     */

  }, {
    key: 'isMDType',
    value: function isMDType() {
      return this.type === Command.TYPE.MD;
    }

    /**
     * isWWType
     * returns whether Command Type is Wysiwyg or not
     * @memberof Command
     * @returns {boolean} result
     */

  }, {
    key: 'isWWType',
    value: function isWWType() {
      return this.type === Command.TYPE.WW;
    }

    /**
     * isGlobalType
     * returns whether Command Type is Global or not
     * @memberof Command
     * @returns {boolean} result
     */

  }, {
    key: 'isGlobalType',
    value: function isGlobalType() {
      return this.type === Command.TYPE.GB;
    }

    /**
     * setKeyMap
     * Set keymap value for each os
     * @memberof Command
     * @param {string} win Windows Key(and etc)
     * @param {string} mac Mac osx key
     */

  }, {
    key: 'setKeyMap',
    value: function setKeyMap(win, mac) {
      this.keyMap = [win, mac];
    }
  }]);

  return Command;
}();

/**
 * Command factory method
 * @memberof Command
 * @param {string} typeStr Editor type name
 * @param {object} props Property
 *     @param {string} props.name Command name
 *     @param {number} props.type Command type number
 * @returns {Command}
 */


Command.factory = function (typeStr, props) {
  var type = void 0;

  if (typeStr === 'markdown') {
    type = Command.TYPE.MD;
  } else if (typeStr === 'wysiwyg') {
    type = Command.TYPE.WW;
  } else if (typeStr === 'global') {
    type = Command.TYPE.GB;
  }

  var command = new Command(props.name, type);

  _tuiCodeSnippet2.default.extend(command, props);

  return command;
};

/**
 * Command Type Constant
 * markdown : 0
 * wysiwyg : 1
 * global : 2
 * @memberof Command
 * @type {object}
 */
Command.TYPE = {
  MD: 0,
  WW: 1,
  GB: 2
};

exports.default = Command;

/***/ }),
/* 51 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _tuiCodeSnippet = __webpack_require__(2);

var _tuiCodeSnippet2 = _interopRequireDefault(_tuiCodeSnippet);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var hostnameSent = false;

/**
 * send host name
 * @ignore
 */
function sendHostName() {
  if (hostnameSent) {
    return;
  }
  hostnameSent = true;

  var trackingID = 'UA-115377265-9';
  var applicationID = 'editor';
  var hitType = 'event';
  var _location = location,
      hostname = _location.hostname;


  _tuiCodeSnippet2.default.imagePing('https://www.google-analytics.com/collect', {
    v: 1,
    t: hitType,
    tid: trackingID,
    cid: hostname,
    dp: hostname,
    dh: applicationID
  });
}

var isMac = /Mac/.test(navigator.platform);

module.exports = {
  sendHostName: sendHostName,
  isMac: isMac
};

/***/ }),
/* 52 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /**
fileoverview extension manager
author NHN Ent. FE Development Lab <dl_javascript@nhnent.com>



var _tuiCodeSnippet = __webpack_require__(2);

var _tuiCodeSnippet2 = _interopRequireDefault(_tuiCodeSnippet);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Class ExtManager
 */
var ExtManager = function () {
  /**
   * Creates an instance of ExtManager.
   * @memberof ExtManager
   */
  function ExtManager() {
    _classCallCheck(this, ExtManager);

    this.exts = new _tuiCodeSnippet2.default.Map();
  }

  /**
   * defineExtension
   * Defined Extension
   * @memberof ExtManager
   * @param {string} name extension name
   * @param {ExtManager~extension} ext extension
   */


  _createClass(ExtManager, [{
    key: 'defineExtension',
    value: function defineExtension(name, ext) {
      this.exts.set(name, ext);
    }

    /**
     * Apply extensions
     * @memberof ExtManager
     * @param {object} context Context
     * @param {Array.<string|object>} options - options or names array
     */

  }, {
    key: 'applyExtension',
    value: function applyExtension(context, options) {
      var _this = this;

      if (options) {
        options.forEach(function (option) {
          var hasOption = _tuiCodeSnippet2.default.isObject(option);
          var name = hasOption ? option.name : option;

          if (_this.exts.has(name)) {
            var ext = _this.exts.get(name);
            if (hasOption) {
              ext(context, option);
            } else {
              ext(context);
            }
          }
        });
      }
    }
  }]);

  return ExtManager;
}();

exports.default = new ExtManager();

/***/ }),
/* 53 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /**
fileoverview Convertor have responsible to convert markdown and html
author NHN Ent. FE Development Lab <dl_javascript@nhnent.com>



var _jquery = __webpack_require__(1);

var _jquery2 = _interopRequireDefault(_jquery);

var _tuiCodeSnippet = __webpack_require__(2);

var _tuiCodeSnippet2 = _interopRequireDefault(_tuiCodeSnippet);

var _markdownIt = __webpack_require__(54);

var _markdownIt2 = _interopRequireDefault(_markdownIt);

var _toMark = __webpack_require__(30);

var _toMark2 = _interopRequireDefault(_toMark);

var _htmlSanitizer = __webpack_require__(110);

var _htmlSanitizer2 = _interopRequireDefault(_htmlSanitizer);

var _markdownitTaskPlugin = __webpack_require__(111);

var _markdownitTaskPlugin2 = _interopRequireDefault(_markdownitTaskPlugin);

var _markdownitCodeBlockPlugin = __webpack_require__(112);

var _markdownitCodeBlockPlugin2 = _interopRequireDefault(_markdownitCodeBlockPlugin);

var _markdownitCodeRenderer = __webpack_require__(113);

var _markdownitCodeRenderer2 = _interopRequireDefault(_markdownitCodeRenderer);

var _markdownitBlockQuoteRenderer = __webpack_require__(114);

var _markdownitBlockQuoteRenderer2 = _interopRequireDefault(_markdownitBlockQuoteRenderer);

var _markdownitTableRenderer = __webpack_require__(115);

var _markdownitTableRenderer2 = _interopRequireDefault(_markdownitTableRenderer);

var _markdownitHtmlBlockRenderer = __webpack_require__(116);

var _markdownitHtmlBlockRenderer2 = _interopRequireDefault(_markdownitHtmlBlockRenderer);

var _markdownitBackticksRenderer = __webpack_require__(117);

var _markdownitBackticksRenderer2 = _interopRequireDefault(_markdownitBackticksRenderer);

var _codeBlockManager = __webpack_require__(31);

var _codeBlockManager2 = _interopRequireDefault(_codeBlockManager);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var markdownitHighlight = new _markdownIt2.default({
  html: true,
  breaks: true,
  quotes: '“”‘’',
  langPrefix: 'lang-',
  highlight: function highlight(codeText, type) {
    return _codeBlockManager2.default.createCodeBlockHtml(type, codeText);
  }
});
var markdownit = new _markdownIt2.default({
  html: true,
  breaks: true,
  quotes: '“”‘’',
  langPrefix: 'lang-'
});

// markdownitHighlight
markdownitHighlight.block.ruler.at('code', _markdownitCodeRenderer2.default);
markdownitHighlight.block.ruler.at('table', _markdownitTableRenderer2.default, {
  alt: ['paragraph', 'reference']
});
markdownitHighlight.block.ruler.at('blockquote', _markdownitBlockQuoteRenderer2.default, {
  alt: ['paragraph', 'reference', 'blockquote', 'list']
});
markdownitHighlight.block.ruler.at('html_block', _markdownitHtmlBlockRenderer2.default, {
  alt: ['paragraph', 'reference', 'blockquote']
});
markdownitHighlight.inline.ruler.at('backticks', _markdownitBackticksRenderer2.default);
markdownitHighlight.use(_markdownitTaskPlugin2.default);
markdownitHighlight.use(_markdownitCodeBlockPlugin2.default);

// markdownit
markdownit.block.ruler.at('code', _markdownitCodeRenderer2.default);
markdownit.block.ruler.at('table', _markdownitTableRenderer2.default, {
  alt: ['paragraph', 'reference']
});
markdownit.block.ruler.at('blockquote', _markdownitBlockQuoteRenderer2.default, {
  alt: ['paragraph', 'reference', 'blockquote', 'list']
});
markdownit.block.ruler.at('html_block', _markdownitHtmlBlockRenderer2.default, {
  alt: ['paragraph', 'reference', 'blockquote']
});
markdownit.inline.ruler.at('backticks', _markdownitBackticksRenderer2.default);
markdownit.use(_markdownitTaskPlugin2.default);
markdownit.use(_markdownitCodeBlockPlugin2.default);

/**
 * Class Convertor
 */

var Convertor = function () {
  /**
   * Convertor constructor
   * @param {EventManager} em - EventManager instance
   */
  function Convertor(em) {
    _classCallCheck(this, Convertor);

    this.eventManager = em;
  }

  /**
   * _markdownToHtmlWithCodeHighlight
   * Convert markdown to html with Codehighlight
   * @private
   * @memberof Convertor
   * @param {string} markdown markdown text
   * @returns {string} html text
   */


  _createClass(Convertor, [{
    key: '_markdownToHtmlWithCodeHighlight',
    value: function _markdownToHtmlWithCodeHighlight(markdown) {
      markdown = markdown.replace(/<br>/ig, '<br data-tomark-pass>');
      // eslint-disable-next-line
      var onerrorStripeRegex = /(<img[^>]*)(onerror\s*=\s*[\"']?[^\"']*[\"']?)(.*)/i;
      while (onerrorStripeRegex.exec(markdown)) {
        markdown = markdown.replace(onerrorStripeRegex, '$1$3');
      }

      var renderedHTML = markdownitHighlight.render(markdown);
      renderedHTML = this._removeBrToMarkPassAttributeInCode(renderedHTML);

      return renderedHTML;
    }

    /**
     * _markdownToHtml
     * Convert markdown to html
     * @private
     * @memberof Convertor
     * @param {string} markdown markdown text
     * @returns {string} html text
     */

  }, {
    key: '_markdownToHtml',
    value: function _markdownToHtml(markdown) {
      markdown = markdown.replace(/<br>/ig, '<br data-tomark-pass>');
      // eslint-disable-next-line
      var onerrorStripeRegex = /(<img[^>]*)(onerror\s*=\s*[\"']?[^\"']*[\"']?)(.*)/i;
      while (onerrorStripeRegex.exec(markdown)) {
        markdown = markdown.replace(onerrorStripeRegex, '$1$3');
      }

      var renderedHTML = markdownit.render(markdown);
      renderedHTML = this._removeBrToMarkPassAttributeInCode(renderedHTML);

      return renderedHTML;
    }

    /**
     * Remove BR's data-tomark-pass attribute text when br in code element
     * @param {string} renderedHTML Rendered HTML string from markdown editor
     * @returns {string}
     * @private
     */

  }, {
    key: '_removeBrToMarkPassAttributeInCode',
    value: function _removeBrToMarkPassAttributeInCode(renderedHTML) {
      var $wrapperDiv = (0, _jquery2.default)('<div />');

      $wrapperDiv.html(renderedHTML);

      $wrapperDiv.find('code, pre').each(function (i, codeOrPre) {
        var $code = (0, _jquery2.default)(codeOrPre);
        $code.html($code.html().replace(/&lt;br data-tomark-pass&gt;/, '&lt;br&gt;'));
      });

      renderedHTML = $wrapperDiv.html();

      return renderedHTML;
    }

    /**
     * toHTMLWithCodeHightlight
     * Convert markdown to html with Codehighlight
     * emit convertorAfterMarkdownToHtmlConverted
     * @memberof Convertor
     * @param {string} markdown markdown text
     * @returns {string} html text
     */

  }, {
    key: 'toHTMLWithCodeHightlight',
    value: function toHTMLWithCodeHightlight(markdown) {
      var html = this._markdownToHtmlWithCodeHighlight(markdown);
      html = this.eventManager.emitReduce('convertorAfterMarkdownToHtmlConverted', html);

      return html;
    }

    /**
     * toHTML
     * Convert markdown to html
     * emit convertorAfterMarkdownToHtmlConverted
     * @memberof Convertor
     * @param {string} markdown markdown text
     * @returns {string} html text
     */

  }, {
    key: 'toHTML',
    value: function toHTML(markdown) {
      var html = this._markdownToHtml(markdown);

      html = this.eventManager.emitReduce('convertorAfterMarkdownToHtmlConverted', html);

      return html;
    }
  }, {
    key: 'initHtmlSanitizer',
    value: function initHtmlSanitizer() {
      this.eventManager.listen('convertorAfterMarkdownToHtmlConverted', function (html) {
        return (0, _htmlSanitizer2.default)(html, true);
      });
    }

    /**
     * toMarkdown
     * Convert html to markdown
     * emit convertorAfterHtmlToMarkdownConverted
     * @memberof Convertor
     * @param {string} html html text
     * @param {object | null} toMarkOptions - toMark library options
     * @returns {string} markdown text
     */

  }, {
    key: 'toMarkdown',
    value: function toMarkdown(html, toMarkOptions) {
      var resultArray = [];

      html = this.eventManager.emitReduce('convertorBeforeHtmlToMarkdownConverted', html);

      var markdown = (0, _toMark2.default)(this._appendAttributeForBrIfNeed(html), toMarkOptions);

      markdown = this.eventManager.emitReduce('convertorAfterHtmlToMarkdownConverted', markdown);

      _tuiCodeSnippet2.default.forEach(markdown.split('\n'), function (line, index) {
        var FIND_TABLE_RX = /^\|[^|]*\|/ig;
        var FIND_CODE_RX = /`[^`]*<br>[^`]*`/ig;

        if (!FIND_CODE_RX.test(line) && !FIND_TABLE_RX.test(line)) {
          line = line.replace(/<br>/ig, '<br>\n');
        }
        resultArray[index] = line;
      });

      return resultArray.join('\n');
    }
  }, {
    key: '_appendAttributeForBrIfNeed',
    value: function _appendAttributeForBrIfNeed(html) {
      var FIND_BR_RX = /<br>/ig;
      var FIND_DOUBLE_BR_RX = /<br \/><br \/>/ig;
      var FIND_PASSING_AND_NORMAL_BR_RX = /<br data-tomark-pass \/><br \/>(.)/ig;
      var FIRST_TWO_BRS_BEFORE_RX = /([^>]|<\/a>|<\/code>|<\/span>|<\/b>|<\/i>|<\/s>|<img [^>]*>)/;
      var TWO_BRS_RX = /<br data-tomark-pass \/><br data-tomark-pass \/>/;
      var FIND_FIRST_TWO_BRS_RX = new RegExp(FIRST_TWO_BRS_BEFORE_RX.source + TWO_BRS_RX.source, 'g');

      html = html.replace(FIND_BR_RX, '<br />');

      html = html.replace(FIND_DOUBLE_BR_RX, '<br data-tomark-pass /><br data-tomark-pass />');

      var div = document.createElement('div');
      var $div = (0, _jquery2.default)(div);
      $div.html(html);
      $div.find('pre br,code br').each(function (index, node) {
        if (node.hasAttribute('data-tomark-pass')) {
          node.removeAttribute('data-tomark-pass');
        }
      });

      html = $div.html().replace(/<br data-tomark-pass="">/ig, '<br data-tomark-pass />');
      html = html.replace(FIND_BR_RX, '<br />');

      html = html.replace(FIND_PASSING_AND_NORMAL_BR_RX, '<br data-tomark-pass /><br data-tomark-pass />$1');
      html = html.replace(FIND_FIRST_TWO_BRS_RX, '$1<br /><br />');

      return html;
    }

    /**
     * get markdownit with code highlight
     * @returns {markdownit} - markdownit instance
     * @memberof Convertor
     * @static
     */

  }], [{
    key: 'getMarkdownitHighlightRenderer',
    value: function getMarkdownitHighlightRenderer() {
      return markdownitHighlight;
    }
  }]);

  return Convertor;
}();

exports.default = Convertor;

/***/ }),
/* 54 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";



module.exports = __webpack_require__(55);


/***/ }),
/* 55 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Main parser class




var utils        = __webpack_require__(0);
var helpers      = __webpack_require__(63);
var Renderer     = __webpack_require__(67);
var ParserCore   = __webpack_require__(68);
var ParserBlock  = __webpack_require__(76);
var ParserInline = __webpack_require__(90);
var LinkifyIt    = __webpack_require__(103);
var mdurl        = __webpack_require__(23);
var punycode     = __webpack_require__(105);


var config = {
  'default': __webpack_require__(107),
  zero: __webpack_require__(108),
  commonmark: __webpack_require__(109)
};

////////////////////////////////////////////////////////////////////////////////
//
// This validator can prohibit more than really needed to prevent XSS. It's a
// tradeoff to keep code simple and to be secure by default.
//
// If you need different setup - override validator method as you wish. Or
// replace it with dummy function and use external sanitizer.
//

var BAD_PROTO_RE = /^(vbscript|javascript|file|data):/;
var GOOD_DATA_RE = /^data:image\/(gif|png|jpeg|webp);/;

function validateLink(url) {
  // url should be normalized at this point, and existing entities are decoded
  var str = url.trim().toLowerCase();

  return BAD_PROTO_RE.test(str) ? (GOOD_DATA_RE.test(str) ? true : false) : true;
}

////////////////////////////////////////////////////////////////////////////////


var RECODE_HOSTNAME_FOR = [ 'http:', 'https:', 'mailto:' ];

function normalizeLink(url) {
  var parsed = mdurl.parse(url, true);

  if (parsed.hostname) {
    // Encode hostnames in urls like:
    // `http://host/`, `https://host/`, `mailto:user@host`, `//host/`
    //
    // We don't encode unknown schemas, because it's likely that we encode
    // something we shouldn't (e.g. `skype:name` treated as `skype:host`)
    //
    if (!parsed.protocol || RECODE_HOSTNAME_FOR.indexOf(parsed.protocol) >= 0) {
      try {
        parsed.hostname = punycode.toASCII(parsed.hostname);
      } catch (er) { /**/ }
    }
  }

  return mdurl.encode(mdurl.format(parsed));
}

function normalizeLinkText(url) {
  var parsed = mdurl.parse(url, true);

  if (parsed.hostname) {
    // Encode hostnames in urls like:
    // `http://host/`, `https://host/`, `mailto:user@host`, `//host/`
    //
    // We don't encode unknown schemas, because it's likely that we encode
    // something we shouldn't (e.g. `skype:name` treated as `skype:host`)
    //
    if (!parsed.protocol || RECODE_HOSTNAME_FOR.indexOf(parsed.protocol) >= 0) {
      try {
        parsed.hostname = punycode.toUnicode(parsed.hostname);
      } catch (er) { /**/ }
    }
  }

  return mdurl.decode(mdurl.format(parsed));
}


/**
 * class MarkdownIt
 *
 * Main parser/renderer class.
 *
 * ##### Usage
 *
 * ```javascript
 * // node.js, "classic" way:
 * var MarkdownIt = require('markdown-it'),
 *     md = new MarkdownIt();
 * var result = md.render('# markdown-it rulezz!');
 *
 * // node.js, the same, but with sugar:
 * var md = require('markdown-it')();
 * var result = md.render('# markdown-it rulezz!');
 *
 * // browser without AMD, added to "window" on script load
 * // Note, there are no dash.
 * var md = window.markdownit();
 * var result = md.render('# markdown-it rulezz!');
 * ```
 *
 * Single line rendering, without paragraph wrap:
 *
 * ```javascript
 * var md = require('markdown-it')();
 * var result = md.renderInline('__markdown-it__ rulezz!');
 * ```
 **/

/**
 * new MarkdownIt([presetName, options])
 * - presetName (String): optional, `commonmark` / `zero`
 * - options (Object)
 *
 * Creates parser instanse with given config. Can be called without `new`.
 *
 * ##### presetName
 *
 * MarkdownIt provides named presets as a convenience to quickly
 * enable/disable active syntax rules and options for common use cases.
 *
 * - ["commonmark"](https://github.com/markdown-it/markdown-it/blob/master/lib/presets/commonmark.js) -
 *   configures parser to strict [CommonMark](http://commonmark.org/) mode.
 * - [default](https://github.com/markdown-it/markdown-it/blob/master/lib/presets/default.js) -
 *   similar to GFM, used when no preset name given. Enables all available rules,
 *   but still without html, typographer & autolinker.
 * - ["zero"](https://github.com/markdown-it/markdown-it/blob/master/lib/presets/zero.js) -
 *   all rules disabled. Useful to quickly setup your config via `.enable()`.
 *   For example, when you need only `bold` and `italic` markup and nothing else.
 *
 * ##### options:
 *
 * - __html__ - `false`. Set `true` to enable HTML tags in source. Be careful!
 *   That's not safe! You may need external sanitizer to protect output from XSS.
 *   It's better to extend features via plugins, instead of enabling HTML.
 * - __xhtmlOut__ - `false`. Set `true` to add '/' when closing single tags
 *   (`<br />`). This is needed only for full CommonMark compatibility. In real
 *   world you will need HTML output.
 * - __breaks__ - `false`. Set `true` to convert `\n` in paragraphs into `<br>`.
 * - __langPrefix__ - `language-`. CSS language class prefix for fenced blocks.
 *   Can be useful for external highlighters.
 * - __linkify__ - `false`. Set `true` to autoconvert URL-like text to links.
 * - __typographer__  - `false`. Set `true` to enable [some language-neutral
 *   replacement](https://github.com/markdown-it/markdown-it/blob/master/lib/rules_core/replacements.js) +
 *   quotes beautification (smartquotes).
 * - __quotes__ - `“”‘’`, String or Array. Double + single quotes replacement
 *   pairs, when typographer enabled and smartquotes on. For example, you can
 *   use `'«»„“'` for Russian, `'„“‚‘'` for German, and
 *   `['«\xA0', '\xA0»', '‹\xA0', '\xA0›']` for French (including nbsp).
 * - __highlight__ - `null`. Highlighter function for fenced code blocks.
 *   Highlighter `function (str, lang)` should return escaped HTML. It can also
 *   return empty string if the source was not changed and should be escaped
 *   externaly. If result starts with <pre... internal wrapper is skipped.
 *
 * ##### Example
 *
 * ```javascript
 * // commonmark mode
 * var md = require('markdown-it')('commonmark');
 *
 * // default mode
 * var md = require('markdown-it')();
 *
 * // enable everything
 * var md = require('markdown-it')({
 *   html: true,
 *   linkify: true,
 *   typographer: true
 * });
 * ```
 *
 * ##### Syntax highlighting
 *
 * ```js
 * var hljs = require('highlight.js') // https://highlightjs.org/
 *
 * var md = require('markdown-it')({
 *   highlight: function (str, lang) {
 *     if (lang && hljs.getLanguage(lang)) {
 *       try {
 *         return hljs.highlight(lang, str, true).value;
 *       } catch (__) {}
 *     }
 *
 *     return ''; // use external default escaping
 *   }
 * });
 * ```
 *
 * Or with full wrapper override (if you need assign class to `<pre>`):
 *
 * ```javascript
 * var hljs = require('highlight.js') // https://highlightjs.org/
 *
 * // Actual default values
 * var md = require('markdown-it')({
 *   highlight: function (str, lang) {
 *     if (lang && hljs.getLanguage(lang)) {
 *       try {
 *         return '<pre class="hljs"><code>' +
 *                hljs.highlight(lang, str, true).value +
 *                '</code></pre>';
 *       } catch (__) {}
 *     }
 *
 *     return '<pre class="hljs"><code>' + md.utils.escapeHtml(str) + '</code></pre>';
 *   }
 * });
 * ```
 *
 **/
function MarkdownIt(presetName, options) {
  if (!(this instanceof MarkdownIt)) {
    return new MarkdownIt(presetName, options);
  }

  if (!options) {
    if (!utils.isString(presetName)) {
      options = presetName || {};
      presetName = 'default';
    }
  }

  /**
   * MarkdownIt#inline -> ParserInline
   *
   * Instance of [[ParserInline]]. You may need it to add new rules when
   * writing plugins. For simple rules control use [[MarkdownIt.disable]] and
   * [[MarkdownIt.enable]].
   **/
  this.inline = new ParserInline();

  /**
   * MarkdownIt#block -> ParserBlock
   *
   * Instance of [[ParserBlock]]. You may need it to add new rules when
   * writing plugins. For simple rules control use [[MarkdownIt.disable]] and
   * [[MarkdownIt.enable]].
   **/
  this.block = new ParserBlock();

  /**
   * MarkdownIt#core -> Core
   *
   * Instance of [[Core]] chain executor. You may need it to add new rules when
   * writing plugins. For simple rules control use [[MarkdownIt.disable]] and
   * [[MarkdownIt.enable]].
   **/
  this.core = new ParserCore();

  /**
   * MarkdownIt#renderer -> Renderer
   *
   * Instance of [[Renderer]]. Use it to modify output look. Or to add rendering
   * rules for new token types, generated by plugins.
   *
   * ##### Example
   *
   * ```javascript
   * var md = require('markdown-it')();
   *
   * function myToken(tokens, idx, options, env, self) {
   *   //...
   *   return result;
   * };
   *
   * md.renderer.rules['my_token'] = myToken
   * ```
   *
   * See [[Renderer]] docs and [source code](https://github.com/markdown-it/markdown-it/blob/master/lib/renderer.js).
   **/
  this.renderer = new Renderer();

  /**
   * MarkdownIt#linkify -> LinkifyIt
   *
   * [linkify-it](https://github.com/markdown-it/linkify-it) instance.
   * Used by [linkify](https://github.com/markdown-it/markdown-it/blob/master/lib/rules_core/linkify.js)
   * rule.
   **/
  this.linkify = new LinkifyIt();

  /**
   * MarkdownIt#validateLink(url) -> Boolean
   *
   * Link validation function. CommonMark allows too much in links. By default
   * we disable `javascript:`, `vbscript:`, `file:` schemas, and almost all `data:...` schemas
   * except some embedded image types.
   *
   * You can change this behaviour:
   *
   * ```javascript
   * var md = require('markdown-it')();
   * // enable everything
   * md.validateLink = function () { return true; }
   * ```
   **/
  this.validateLink = validateLink;

  /**
   * MarkdownIt#normalizeLink(url) -> String
   *
   * Function used to encode link url to a machine-readable format,
   * which includes url-encoding, punycode, etc.
   **/
  this.normalizeLink = normalizeLink;

  /**
   * MarkdownIt#normalizeLinkText(url) -> String
   *
   * Function used to decode link url to a human-readable format`
   **/
  this.normalizeLinkText = normalizeLinkText;


  // Expose utils & helpers for easy acces from plugins

  /**
   * MarkdownIt#utils -> utils
   *
   * Assorted utility functions, useful to write plugins. See details
   * [here](https://github.com/markdown-it/markdown-it/blob/master/lib/common/utils.js).
   **/
  this.utils = utils;

  /**
   * MarkdownIt#helpers -> helpers
   *
   * Link components parser functions, useful to write plugins. See details
   * [here](https://github.com/markdown-it/markdown-it/blob/master/lib/helpers).
   **/
  this.helpers = utils.assign({}, helpers);


  this.options = {};
  this.configure(presetName);

  if (options) { this.set(options); }
}


/** chainable
 * MarkdownIt.set(options)
 *
 * Set parser options (in the same format as in constructor). Probably, you
 * will never need it, but you can change options after constructor call.
 *
 * ##### Example
 *
 * ```javascript
 * var md = require('markdown-it')()
 *             .set({ html: true, breaks: true })
 *             .set({ typographer, true });
 * ```
 *
 * __Note:__ To achieve the best possible performance, don't modify a
 * `markdown-it` instance options on the fly. If you need multiple configurations
 * it's best to create multiple instances and initialize each with separate
 * config.
 **/
MarkdownIt.prototype.set = function (options) {
  utils.assign(this.options, options);
  return this;
};


/** chainable, internal
 * MarkdownIt.configure(presets)
 *
 * Batch load of all options and compenent settings. This is internal method,
 * and you probably will not need it. But if you with - see available presets
 * and data structure [here](https://github.com/markdown-it/markdown-it/tree/master/lib/presets)
 *
 * We strongly recommend to use presets instead of direct config loads. That
 * will give better compatibility with next versions.
 **/
MarkdownIt.prototype.configure = function (presets) {
  var self = this, presetName;

  if (utils.isString(presets)) {
    presetName = presets;
    presets = config[presetName];
    if (!presets) { throw new Error('Wrong `markdown-it` preset "' + presetName + '", check name'); }
  }

  if (!presets) { throw new Error('Wrong `markdown-it` preset, can\'t be empty'); }

  if (presets.options) { self.set(presets.options); }

  if (presets.components) {
    Object.keys(presets.components).forEach(function (name) {
      if (presets.components[name].rules) {
        self[name].ruler.enableOnly(presets.components[name].rules);
      }
      if (presets.components[name].rules2) {
        self[name].ruler2.enableOnly(presets.components[name].rules2);
      }
    });
  }
  return this;
};


/** chainable
 * MarkdownIt.enable(list, ignoreInvalid)
 * - list (String|Array): rule name or list of rule names to enable
 * - ignoreInvalid (Boolean): set `true` to ignore errors when rule not found.
 *
 * Enable list or rules. It will automatically find appropriate components,
 * containing rules with given names. If rule not found, and `ignoreInvalid`
 * not set - throws exception.
 *
 * ##### Example
 *
 * ```javascript
 * var md = require('markdown-it')()
 *             .enable(['sub', 'sup'])
 *             .disable('smartquotes');
 * ```
 **/
MarkdownIt.prototype.enable = function (list, ignoreInvalid) {
  var result = [];

  if (!Array.isArray(list)) { list = [ list ]; }

  [ 'core', 'block', 'inline' ].forEach(function (chain) {
    result = result.concat(this[chain].ruler.enable(list, true));
  }, this);

  result = result.concat(this.inline.ruler2.enable(list, true));

  var missed = list.filter(function (name) { return result.indexOf(name) < 0; });

  if (missed.length && !ignoreInvalid) {
    throw new Error('MarkdownIt. Failed to enable unknown rule(s): ' + missed);
  }

  return this;
};


/** chainable
 * MarkdownIt.disable(list, ignoreInvalid)
 * - list (String|Array): rule name or list of rule names to disable.
 * - ignoreInvalid (Boolean): set `true` to ignore errors when rule not found.
 *
 * The same as [[MarkdownIt.enable]], but turn specified rules off.
 **/
MarkdownIt.prototype.disable = function (list, ignoreInvalid) {
  var result = [];

  if (!Array.isArray(list)) { list = [ list ]; }

  [ 'core', 'block', 'inline' ].forEach(function (chain) {
    result = result.concat(this[chain].ruler.disable(list, true));
  }, this);

  result = result.concat(this.inline.ruler2.disable(list, true));

  var missed = list.filter(function (name) { return result.indexOf(name) < 0; });

  if (missed.length && !ignoreInvalid) {
    throw new Error('MarkdownIt. Failed to disable unknown rule(s): ' + missed);
  }
  return this;
};


/** chainable
 * MarkdownIt.use(plugin, params)
 *
 * Load specified plugin with given params into current parser instance.
 * It's just a sugar to call `plugin(md, params)` with curring.
 *
 * ##### Example
 *
 * ```javascript
 * var iterator = require('markdown-it-for-inline');
 * var md = require('markdown-it')()
 *             .use(iterator, 'foo_replace', 'text', function (tokens, idx) {
 *               tokens[idx].content = tokens[idx].content.replace(/foo/g, 'bar');
 *             });
 * ```
 **/
MarkdownIt.prototype.use = function (plugin /*, params, ... */) {
  var args = [ this ].concat(Array.prototype.slice.call(arguments, 1));
  plugin.apply(plugin, args);
  return this;
};


/** internal
 * MarkdownIt.parse(src, env) -> Array
 * - src (String): source string
 * - env (Object): environment sandbox
 *
 * Parse input string and returns list of block tokens (special token type
 * "inline" will contain list of inline tokens). You should not call this
 * method directly, until you write custom renderer (for example, to produce
 * AST).
 *
 * `env` is used to pass data between "distributed" rules and return additional
 * metadata like reference info, needed for the renderer. It also can be used to
 * inject data in specific cases. Usually, you will be ok to pass `{}`,
 * and then pass updated object to renderer.
 **/
MarkdownIt.prototype.parse = function (src, env) {
  if (typeof src !== 'string') {
    throw new Error('Input data should be a String');
  }

  var state = new this.core.State(src, this, env);

  this.core.process(state);

  return state.tokens;
};


/**
 * MarkdownIt.render(src [, env]) -> String
 * - src (String): source string
 * - env (Object): environment sandbox
 *
 * Render markdown string into html. It does all magic for you :).
 *
 * `env` can be used to inject additional metadata (`{}` by default).
 * But you will not need it with high probability. See also comment
 * in [[MarkdownIt.parse]].
 **/
MarkdownIt.prototype.render = function (src, env) {
  env = env || {};

  return this.renderer.render(this.parse(src, env), this.options, env);
};


/** internal
 * MarkdownIt.parseInline(src, env) -> Array
 * - src (String): source string
 * - env (Object): environment sandbox
 *
 * The same as [[MarkdownIt.parse]] but skip all block rules. It returns the
 * block tokens list with the single `inline` element, containing parsed inline
 * tokens in `children` property. Also updates `env` object.
 **/
MarkdownIt.prototype.parseInline = function (src, env) {
  var state = new this.core.State(src, this, env);

  state.inlineMode = true;
  this.core.process(state);

  return state.tokens;
};


/**
 * MarkdownIt.renderInline(src [, env]) -> String
 * - src (String): source string
 * - env (Object): environment sandbox
 *
 * Similar to [[MarkdownIt.render]] but for single paragraph content. Result
 * will NOT be wrapped into `<p>` tags.
 **/
MarkdownIt.prototype.renderInline = function (src, env) {
  env = env || {};

  return this.renderer.render(this.parseInline(src, env), this.options, env);
};


module.exports = MarkdownIt;


/***/ }),
/* 56 */
/***/ (function(module, exports) {

module.exports = {"Aacute":"Á","aacute":"á","Abreve":"Ă","abreve":"ă","ac":"∾","acd":"∿","acE":"∾̳","Acirc":"Â","acirc":"â","acute":"´","Acy":"А","acy":"а","AElig":"Æ","aelig":"æ","af":"⁡","Afr":"𝔄","afr":"𝔞","Agrave":"À","agrave":"à","alefsym":"ℵ","aleph":"ℵ","Alpha":"Α","alpha":"α","Amacr":"Ā","amacr":"ā","amalg":"⨿","amp":"&","AMP":"&","andand":"⩕","And":"⩓","and":"∧","andd":"⩜","andslope":"⩘","andv":"⩚","ang":"∠","ange":"⦤","angle":"∠","angmsdaa":"⦨","angmsdab":"⦩","angmsdac":"⦪","angmsdad":"⦫","angmsdae":"⦬","angmsdaf":"⦭","angmsdag":"⦮","angmsdah":"⦯","angmsd":"∡","angrt":"∟","angrtvb":"⊾","angrtvbd":"⦝","angsph":"∢","angst":"Å","angzarr":"⍼","Aogon":"Ą","aogon":"ą","Aopf":"𝔸","aopf":"𝕒","apacir":"⩯","ap":"≈","apE":"⩰","ape":"≊","apid":"≋","apos":"'","ApplyFunction":"⁡","approx":"≈","approxeq":"≊","Aring":"Å","aring":"å","Ascr":"𝒜","ascr":"𝒶","Assign":"≔","ast":"*","asymp":"≈","asympeq":"≍","Atilde":"Ã","atilde":"ã","Auml":"Ä","auml":"ä","awconint":"∳","awint":"⨑","backcong":"≌","backepsilon":"϶","backprime":"‵","backsim":"∽","backsimeq":"⋍","Backslash":"∖","Barv":"⫧","barvee":"⊽","barwed":"⌅","Barwed":"⌆","barwedge":"⌅","bbrk":"⎵","bbrktbrk":"⎶","bcong":"≌","Bcy":"Б","bcy":"б","bdquo":"„","becaus":"∵","because":"∵","Because":"∵","bemptyv":"⦰","bepsi":"϶","bernou":"ℬ","Bernoullis":"ℬ","Beta":"Β","beta":"β","beth":"ℶ","between":"≬","Bfr":"𝔅","bfr":"𝔟","bigcap":"⋂","bigcirc":"◯","bigcup":"⋃","bigodot":"⨀","bigoplus":"⨁","bigotimes":"⨂","bigsqcup":"⨆","bigstar":"★","bigtriangledown":"▽","bigtriangleup":"△","biguplus":"⨄","bigvee":"⋁","bigwedge":"⋀","bkarow":"⤍","blacklozenge":"⧫","blacksquare":"▪","blacktriangle":"▴","blacktriangledown":"▾","blacktriangleleft":"◂","blacktriangleright":"▸","blank":"␣","blk12":"▒","blk14":"░","blk34":"▓","block":"█","bne":"=⃥","bnequiv":"≡⃥","bNot":"⫭","bnot":"⌐","Bopf":"𝔹","bopf":"𝕓","bot":"⊥","bottom":"⊥","bowtie":"⋈","boxbox":"⧉","boxdl":"┐","boxdL":"╕","boxDl":"╖","boxDL":"╗","boxdr":"┌","boxdR":"╒","boxDr":"╓","boxDR":"╔","boxh":"─","boxH":"═","boxhd":"┬","boxHd":"╤","boxhD":"╥","boxHD":"╦","boxhu":"┴","boxHu":"╧","boxhU":"╨","boxHU":"╩","boxminus":"⊟","boxplus":"⊞","boxtimes":"⊠","boxul":"┘","boxuL":"╛","boxUl":"╜","boxUL":"╝","boxur":"└","boxuR":"╘","boxUr":"╙","boxUR":"╚","boxv":"│","boxV":"║","boxvh":"┼","boxvH":"╪","boxVh":"╫","boxVH":"╬","boxvl":"┤","boxvL":"╡","boxVl":"╢","boxVL":"╣","boxvr":"├","boxvR":"╞","boxVr":"╟","boxVR":"╠","bprime":"‵","breve":"˘","Breve":"˘","brvbar":"¦","bscr":"𝒷","Bscr":"ℬ","bsemi":"⁏","bsim":"∽","bsime":"⋍","bsolb":"⧅","bsol":"\\","bsolhsub":"⟈","bull":"•","bullet":"•","bump":"≎","bumpE":"⪮","bumpe":"≏","Bumpeq":"≎","bumpeq":"≏","Cacute":"Ć","cacute":"ć","capand":"⩄","capbrcup":"⩉","capcap":"⩋","cap":"∩","Cap":"⋒","capcup":"⩇","capdot":"⩀","CapitalDifferentialD":"ⅅ","caps":"∩︀","caret":"⁁","caron":"ˇ","Cayleys":"ℭ","ccaps":"⩍","Ccaron":"Č","ccaron":"č","Ccedil":"Ç","ccedil":"ç","Ccirc":"Ĉ","ccirc":"ĉ","Cconint":"∰","ccups":"⩌","ccupssm":"⩐","Cdot":"Ċ","cdot":"ċ","cedil":"¸","Cedilla":"¸","cemptyv":"⦲","cent":"¢","centerdot":"·","CenterDot":"·","cfr":"𝔠","Cfr":"ℭ","CHcy":"Ч","chcy":"ч","check":"✓","checkmark":"✓","Chi":"Χ","chi":"χ","circ":"ˆ","circeq":"≗","circlearrowleft":"↺","circlearrowright":"↻","circledast":"⊛","circledcirc":"⊚","circleddash":"⊝","CircleDot":"⊙","circledR":"®","circledS":"Ⓢ","CircleMinus":"⊖","CirclePlus":"⊕","CircleTimes":"⊗","cir":"○","cirE":"⧃","cire":"≗","cirfnint":"⨐","cirmid":"⫯","cirscir":"⧂","ClockwiseContourIntegral":"∲","CloseCurlyDoubleQuote":"”","CloseCurlyQuote":"’","clubs":"♣","clubsuit":"♣","colon":":","Colon":"∷","Colone":"⩴","colone":"≔","coloneq":"≔","comma":",","commat":"@","comp":"∁","compfn":"∘","complement":"∁","complexes":"ℂ","cong":"≅","congdot":"⩭","Congruent":"≡","conint":"∮","Conint":"∯","ContourIntegral":"∮","copf":"𝕔","Copf":"ℂ","coprod":"∐","Coproduct":"∐","copy":"©","COPY":"©","copysr":"℗","CounterClockwiseContourIntegral":"∳","crarr":"↵","cross":"✗","Cross":"⨯","Cscr":"𝒞","cscr":"𝒸","csub":"⫏","csube":"⫑","csup":"⫐","csupe":"⫒","ctdot":"⋯","cudarrl":"⤸","cudarrr":"⤵","cuepr":"⋞","cuesc":"⋟","cularr":"↶","cularrp":"⤽","cupbrcap":"⩈","cupcap":"⩆","CupCap":"≍","cup":"∪","Cup":"⋓","cupcup":"⩊","cupdot":"⊍","cupor":"⩅","cups":"∪︀","curarr":"↷","curarrm":"⤼","curlyeqprec":"⋞","curlyeqsucc":"⋟","curlyvee":"⋎","curlywedge":"⋏","curren":"¤","curvearrowleft":"↶","curvearrowright":"↷","cuvee":"⋎","cuwed":"⋏","cwconint":"∲","cwint":"∱","cylcty":"⌭","dagger":"†","Dagger":"‡","daleth":"ℸ","darr":"↓","Darr":"↡","dArr":"⇓","dash":"‐","Dashv":"⫤","dashv":"⊣","dbkarow":"⤏","dblac":"˝","Dcaron":"Ď","dcaron":"ď","Dcy":"Д","dcy":"д","ddagger":"‡","ddarr":"⇊","DD":"ⅅ","dd":"ⅆ","DDotrahd":"⤑","ddotseq":"⩷","deg":"°","Del":"∇","Delta":"Δ","delta":"δ","demptyv":"⦱","dfisht":"⥿","Dfr":"𝔇","dfr":"𝔡","dHar":"⥥","dharl":"⇃","dharr":"⇂","DiacriticalAcute":"´","DiacriticalDot":"˙","DiacriticalDoubleAcute":"˝","DiacriticalGrave":"`","DiacriticalTilde":"˜","diam":"⋄","diamond":"⋄","Diamond":"⋄","diamondsuit":"♦","diams":"♦","die":"¨","DifferentialD":"ⅆ","digamma":"ϝ","disin":"⋲","div":"÷","divide":"÷","divideontimes":"⋇","divonx":"⋇","DJcy":"Ђ","djcy":"ђ","dlcorn":"⌞","dlcrop":"⌍","dollar":"$","Dopf":"𝔻","dopf":"𝕕","Dot":"¨","dot":"˙","DotDot":"⃜","doteq":"≐","doteqdot":"≑","DotEqual":"≐","dotminus":"∸","dotplus":"∔","dotsquare":"⊡","doublebarwedge":"⌆","DoubleContourIntegral":"∯","DoubleDot":"¨","DoubleDownArrow":"⇓","DoubleLeftArrow":"⇐","DoubleLeftRightArrow":"⇔","DoubleLeftTee":"⫤","DoubleLongLeftArrow":"⟸","DoubleLongLeftRightArrow":"⟺","DoubleLongRightArrow":"⟹","DoubleRightArrow":"⇒","DoubleRightTee":"⊨","DoubleUpArrow":"⇑","DoubleUpDownArrow":"⇕","DoubleVerticalBar":"∥","DownArrowBar":"⤓","downarrow":"↓","DownArrow":"↓","Downarrow":"⇓","DownArrowUpArrow":"⇵","DownBreve":"̑","downdownarrows":"⇊","downharpoonleft":"⇃","downharpoonright":"⇂","DownLeftRightVector":"⥐","DownLeftTeeVector":"⥞","DownLeftVectorBar":"⥖","DownLeftVector":"↽","DownRightTeeVector":"⥟","DownRightVectorBar":"⥗","DownRightVector":"⇁","DownTeeArrow":"↧","DownTee":"⊤","drbkarow":"⤐","drcorn":"⌟","drcrop":"⌌","Dscr":"𝒟","dscr":"𝒹","DScy":"Ѕ","dscy":"ѕ","dsol":"⧶","Dstrok":"Đ","dstrok":"đ","dtdot":"⋱","dtri":"▿","dtrif":"▾","duarr":"⇵","duhar":"⥯","dwangle":"⦦","DZcy":"Џ","dzcy":"џ","dzigrarr":"⟿","Eacute":"É","eacute":"é","easter":"⩮","Ecaron":"Ě","ecaron":"ě","Ecirc":"Ê","ecirc":"ê","ecir":"≖","ecolon":"≕","Ecy":"Э","ecy":"э","eDDot":"⩷","Edot":"Ė","edot":"ė","eDot":"≑","ee":"ⅇ","efDot":"≒","Efr":"𝔈","efr":"𝔢","eg":"⪚","Egrave":"È","egrave":"è","egs":"⪖","egsdot":"⪘","el":"⪙","Element":"∈","elinters":"⏧","ell":"ℓ","els":"⪕","elsdot":"⪗","Emacr":"Ē","emacr":"ē","empty":"∅","emptyset":"∅","EmptySmallSquare":"◻","emptyv":"∅","EmptyVerySmallSquare":"▫","emsp13":" ","emsp14":" ","emsp":" ","ENG":"Ŋ","eng":"ŋ","ensp":" ","Eogon":"Ę","eogon":"ę","Eopf":"𝔼","eopf":"𝕖","epar":"⋕","eparsl":"⧣","eplus":"⩱","epsi":"ε","Epsilon":"Ε","epsilon":"ε","epsiv":"ϵ","eqcirc":"≖","eqcolon":"≕","eqsim":"≂","eqslantgtr":"⪖","eqslantless":"⪕","Equal":"⩵","equals":"=","EqualTilde":"≂","equest":"≟","Equilibrium":"⇌","equiv":"≡","equivDD":"⩸","eqvparsl":"⧥","erarr":"⥱","erDot":"≓","escr":"ℯ","Escr":"ℰ","esdot":"≐","Esim":"⩳","esim":"≂","Eta":"Η","eta":"η","ETH":"Ð","eth":"ð","Euml":"Ë","euml":"ë","euro":"€","excl":"!","exist":"∃","Exists":"∃","expectation":"ℰ","exponentiale":"ⅇ","ExponentialE":"ⅇ","fallingdotseq":"≒","Fcy":"Ф","fcy":"ф","female":"♀","ffilig":"ﬃ","fflig":"ﬀ","ffllig":"ﬄ","Ffr":"𝔉","ffr":"𝔣","filig":"ﬁ","FilledSmallSquare":"◼","FilledVerySmallSquare":"▪","fjlig":"fj","flat":"♭","fllig":"ﬂ","fltns":"▱","fnof":"ƒ","Fopf":"𝔽","fopf":"𝕗","forall":"∀","ForAll":"∀","fork":"⋔","forkv":"⫙","Fouriertrf":"ℱ","fpartint":"⨍","frac12":"½","frac13":"⅓","frac14":"¼","frac15":"⅕","frac16":"⅙","frac18":"⅛","frac23":"⅔","frac25":"⅖","frac34":"¾","frac35":"⅗","frac38":"⅜","frac45":"⅘","frac56":"⅚","frac58":"⅝","frac78":"⅞","frasl":"⁄","frown":"⌢","fscr":"𝒻","Fscr":"ℱ","gacute":"ǵ","Gamma":"Γ","gamma":"γ","Gammad":"Ϝ","gammad":"ϝ","gap":"⪆","Gbreve":"Ğ","gbreve":"ğ","Gcedil":"Ģ","Gcirc":"Ĝ","gcirc":"ĝ","Gcy":"Г","gcy":"г","Gdot":"Ġ","gdot":"ġ","ge":"≥","gE":"≧","gEl":"⪌","gel":"⋛","geq":"≥","geqq":"≧","geqslant":"⩾","gescc":"⪩","ges":"⩾","gesdot":"⪀","gesdoto":"⪂","gesdotol":"⪄","gesl":"⋛︀","gesles":"⪔","Gfr":"𝔊","gfr":"𝔤","gg":"≫","Gg":"⋙","ggg":"⋙","gimel":"ℷ","GJcy":"Ѓ","gjcy":"ѓ","gla":"⪥","gl":"≷","glE":"⪒","glj":"⪤","gnap":"⪊","gnapprox":"⪊","gne":"⪈","gnE":"≩","gneq":"⪈","gneqq":"≩","gnsim":"⋧","Gopf":"𝔾","gopf":"𝕘","grave":"`","GreaterEqual":"≥","GreaterEqualLess":"⋛","GreaterFullEqual":"≧","GreaterGreater":"⪢","GreaterLess":"≷","GreaterSlantEqual":"⩾","GreaterTilde":"≳","Gscr":"𝒢","gscr":"ℊ","gsim":"≳","gsime":"⪎","gsiml":"⪐","gtcc":"⪧","gtcir":"⩺","gt":">","GT":">","Gt":"≫","gtdot":"⋗","gtlPar":"⦕","gtquest":"⩼","gtrapprox":"⪆","gtrarr":"⥸","gtrdot":"⋗","gtreqless":"⋛","gtreqqless":"⪌","gtrless":"≷","gtrsim":"≳","gvertneqq":"≩︀","gvnE":"≩︀","Hacek":"ˇ","hairsp":" ","half":"½","hamilt":"ℋ","HARDcy":"Ъ","hardcy":"ъ","harrcir":"⥈","harr":"↔","hArr":"⇔","harrw":"↭","Hat":"^","hbar":"ℏ","Hcirc":"Ĥ","hcirc":"ĥ","hearts":"♥","heartsuit":"♥","hellip":"…","hercon":"⊹","hfr":"𝔥","Hfr":"ℌ","HilbertSpace":"ℋ","hksearow":"⤥","hkswarow":"⤦","hoarr":"⇿","homtht":"∻","hookleftarrow":"↩","hookrightarrow":"↪","hopf":"𝕙","Hopf":"ℍ","horbar":"―","HorizontalLine":"─","hscr":"𝒽","Hscr":"ℋ","hslash":"ℏ","Hstrok":"Ħ","hstrok":"ħ","HumpDownHump":"≎","HumpEqual":"≏","hybull":"⁃","hyphen":"‐","Iacute":"Í","iacute":"í","ic":"⁣","Icirc":"Î","icirc":"î","Icy":"И","icy":"и","Idot":"İ","IEcy":"Е","iecy":"е","iexcl":"¡","iff":"⇔","ifr":"𝔦","Ifr":"ℑ","Igrave":"Ì","igrave":"ì","ii":"ⅈ","iiiint":"⨌","iiint":"∭","iinfin":"⧜","iiota":"℩","IJlig":"Ĳ","ijlig":"ĳ","Imacr":"Ī","imacr":"ī","image":"ℑ","ImaginaryI":"ⅈ","imagline":"ℐ","imagpart":"ℑ","imath":"ı","Im":"ℑ","imof":"⊷","imped":"Ƶ","Implies":"⇒","incare":"℅","in":"∈","infin":"∞","infintie":"⧝","inodot":"ı","intcal":"⊺","int":"∫","Int":"∬","integers":"ℤ","Integral":"∫","intercal":"⊺","Intersection":"⋂","intlarhk":"⨗","intprod":"⨼","InvisibleComma":"⁣","InvisibleTimes":"⁢","IOcy":"Ё","iocy":"ё","Iogon":"Į","iogon":"į","Iopf":"𝕀","iopf":"𝕚","Iota":"Ι","iota":"ι","iprod":"⨼","iquest":"¿","iscr":"𝒾","Iscr":"ℐ","isin":"∈","isindot":"⋵","isinE":"⋹","isins":"⋴","isinsv":"⋳","isinv":"∈","it":"⁢","Itilde":"Ĩ","itilde":"ĩ","Iukcy":"І","iukcy":"і","Iuml":"Ï","iuml":"ï","Jcirc":"Ĵ","jcirc":"ĵ","Jcy":"Й","jcy":"й","Jfr":"𝔍","jfr":"𝔧","jmath":"ȷ","Jopf":"𝕁","jopf":"𝕛","Jscr":"𝒥","jscr":"𝒿","Jsercy":"Ј","jsercy":"ј","Jukcy":"Є","jukcy":"є","Kappa":"Κ","kappa":"κ","kappav":"ϰ","Kcedil":"Ķ","kcedil":"ķ","Kcy":"К","kcy":"к","Kfr":"𝔎","kfr":"𝔨","kgreen":"ĸ","KHcy":"Х","khcy":"х","KJcy":"Ќ","kjcy":"ќ","Kopf":"𝕂","kopf":"𝕜","Kscr":"𝒦","kscr":"𝓀","lAarr":"⇚","Lacute":"Ĺ","lacute":"ĺ","laemptyv":"⦴","lagran":"ℒ","Lambda":"Λ","lambda":"λ","lang":"⟨","Lang":"⟪","langd":"⦑","langle":"⟨","lap":"⪅","Laplacetrf":"ℒ","laquo":"«","larrb":"⇤","larrbfs":"⤟","larr":"←","Larr":"↞","lArr":"⇐","larrfs":"⤝","larrhk":"↩","larrlp":"↫","larrpl":"⤹","larrsim":"⥳","larrtl":"↢","latail":"⤙","lAtail":"⤛","lat":"⪫","late":"⪭","lates":"⪭︀","lbarr":"⤌","lBarr":"⤎","lbbrk":"❲","lbrace":"{","lbrack":"[","lbrke":"⦋","lbrksld":"⦏","lbrkslu":"⦍","Lcaron":"Ľ","lcaron":"ľ","Lcedil":"Ļ","lcedil":"ļ","lceil":"⌈","lcub":"{","Lcy":"Л","lcy":"л","ldca":"⤶","ldquo":"“","ldquor":"„","ldrdhar":"⥧","ldrushar":"⥋","ldsh":"↲","le":"≤","lE":"≦","LeftAngleBracket":"⟨","LeftArrowBar":"⇤","leftarrow":"←","LeftArrow":"←","Leftarrow":"⇐","LeftArrowRightArrow":"⇆","leftarrowtail":"↢","LeftCeiling":"⌈","LeftDoubleBracket":"⟦","LeftDownTeeVector":"⥡","LeftDownVectorBar":"⥙","LeftDownVector":"⇃","LeftFloor":"⌊","leftharpoondown":"↽","leftharpoonup":"↼","leftleftarrows":"⇇","leftrightarrow":"↔","LeftRightArrow":"↔","Leftrightarrow":"⇔","leftrightarrows":"⇆","leftrightharpoons":"⇋","leftrightsquigarrow":"↭","LeftRightVector":"⥎","LeftTeeArrow":"↤","LeftTee":"⊣","LeftTeeVector":"⥚","leftthreetimes":"⋋","LeftTriangleBar":"⧏","LeftTriangle":"⊲","LeftTriangleEqual":"⊴","LeftUpDownVector":"⥑","LeftUpTeeVector":"⥠","LeftUpVectorBar":"⥘","LeftUpVector":"↿","LeftVectorBar":"⥒","LeftVector":"↼","lEg":"⪋","leg":"⋚","leq":"≤","leqq":"≦","leqslant":"⩽","lescc":"⪨","les":"⩽","lesdot":"⩿","lesdoto":"⪁","lesdotor":"⪃","lesg":"⋚︀","lesges":"⪓","lessapprox":"⪅","lessdot":"⋖","lesseqgtr":"⋚","lesseqqgtr":"⪋","LessEqualGreater":"⋚","LessFullEqual":"≦","LessGreater":"≶","lessgtr":"≶","LessLess":"⪡","lesssim":"≲","LessSlantEqual":"⩽","LessTilde":"≲","lfisht":"⥼","lfloor":"⌊","Lfr":"𝔏","lfr":"𝔩","lg":"≶","lgE":"⪑","lHar":"⥢","lhard":"↽","lharu":"↼","lharul":"⥪","lhblk":"▄","LJcy":"Љ","ljcy":"љ","llarr":"⇇","ll":"≪","Ll":"⋘","llcorner":"⌞","Lleftarrow":"⇚","llhard":"⥫","lltri":"◺","Lmidot":"Ŀ","lmidot":"ŀ","lmoustache":"⎰","lmoust":"⎰","lnap":"⪉","lnapprox":"⪉","lne":"⪇","lnE":"≨","lneq":"⪇","lneqq":"≨","lnsim":"⋦","loang":"⟬","loarr":"⇽","lobrk":"⟦","longleftarrow":"⟵","LongLeftArrow":"⟵","Longleftarrow":"⟸","longleftrightarrow":"⟷","LongLeftRightArrow":"⟷","Longleftrightarrow":"⟺","longmapsto":"⟼","longrightarrow":"⟶","LongRightArrow":"⟶","Longrightarrow":"⟹","looparrowleft":"↫","looparrowright":"↬","lopar":"⦅","Lopf":"𝕃","lopf":"𝕝","loplus":"⨭","lotimes":"⨴","lowast":"∗","lowbar":"_","LowerLeftArrow":"↙","LowerRightArrow":"↘","loz":"◊","lozenge":"◊","lozf":"⧫","lpar":"(","lparlt":"⦓","lrarr":"⇆","lrcorner":"⌟","lrhar":"⇋","lrhard":"⥭","lrm":"‎","lrtri":"⊿","lsaquo":"‹","lscr":"𝓁","Lscr":"ℒ","lsh":"↰","Lsh":"↰","lsim":"≲","lsime":"⪍","lsimg":"⪏","lsqb":"[","lsquo":"‘","lsquor":"‚","Lstrok":"Ł","lstrok":"ł","ltcc":"⪦","ltcir":"⩹","lt":"<","LT":"<","Lt":"≪","ltdot":"⋖","lthree":"⋋","ltimes":"⋉","ltlarr":"⥶","ltquest":"⩻","ltri":"◃","ltrie":"⊴","ltrif":"◂","ltrPar":"⦖","lurdshar":"⥊","luruhar":"⥦","lvertneqq":"≨︀","lvnE":"≨︀","macr":"¯","male":"♂","malt":"✠","maltese":"✠","Map":"⤅","map":"↦","mapsto":"↦","mapstodown":"↧","mapstoleft":"↤","mapstoup":"↥","marker":"▮","mcomma":"⨩","Mcy":"М","mcy":"м","mdash":"—","mDDot":"∺","measuredangle":"∡","MediumSpace":" ","Mellintrf":"ℳ","Mfr":"𝔐","mfr":"𝔪","mho":"℧","micro":"µ","midast":"*","midcir":"⫰","mid":"∣","middot":"·","minusb":"⊟","minus":"−","minusd":"∸","minusdu":"⨪","MinusPlus":"∓","mlcp":"⫛","mldr":"…","mnplus":"∓","models":"⊧","Mopf":"𝕄","mopf":"𝕞","mp":"∓","mscr":"𝓂","Mscr":"ℳ","mstpos":"∾","Mu":"Μ","mu":"μ","multimap":"⊸","mumap":"⊸","nabla":"∇","Nacute":"Ń","nacute":"ń","nang":"∠⃒","nap":"≉","napE":"⩰̸","napid":"≋̸","napos":"ŉ","napprox":"≉","natural":"♮","naturals":"ℕ","natur":"♮","nbsp":" ","nbump":"≎̸","nbumpe":"≏̸","ncap":"⩃","Ncaron":"Ň","ncaron":"ň","Ncedil":"Ņ","ncedil":"ņ","ncong":"≇","ncongdot":"⩭̸","ncup":"⩂","Ncy":"Н","ncy":"н","ndash":"–","nearhk":"⤤","nearr":"↗","neArr":"⇗","nearrow":"↗","ne":"≠","nedot":"≐̸","NegativeMediumSpace":"​","NegativeThickSpace":"​","NegativeThinSpace":"​","NegativeVeryThinSpace":"​","nequiv":"≢","nesear":"⤨","nesim":"≂̸","NestedGreaterGreater":"≫","NestedLessLess":"≪","NewLine":"\n","nexist":"∄","nexists":"∄","Nfr":"𝔑","nfr":"𝔫","ngE":"≧̸","nge":"≱","ngeq":"≱","ngeqq":"≧̸","ngeqslant":"⩾̸","nges":"⩾̸","nGg":"⋙̸","ngsim":"≵","nGt":"≫⃒","ngt":"≯","ngtr":"≯","nGtv":"≫̸","nharr":"↮","nhArr":"⇎","nhpar":"⫲","ni":"∋","nis":"⋼","nisd":"⋺","niv":"∋","NJcy":"Њ","njcy":"њ","nlarr":"↚","nlArr":"⇍","nldr":"‥","nlE":"≦̸","nle":"≰","nleftarrow":"↚","nLeftarrow":"⇍","nleftrightarrow":"↮","nLeftrightarrow":"⇎","nleq":"≰","nleqq":"≦̸","nleqslant":"⩽̸","nles":"⩽̸","nless":"≮","nLl":"⋘̸","nlsim":"≴","nLt":"≪⃒","nlt":"≮","nltri":"⋪","nltrie":"⋬","nLtv":"≪̸","nmid":"∤","NoBreak":"⁠","NonBreakingSpace":" ","nopf":"𝕟","Nopf":"ℕ","Not":"⫬","not":"¬","NotCongruent":"≢","NotCupCap":"≭","NotDoubleVerticalBar":"∦","NotElement":"∉","NotEqual":"≠","NotEqualTilde":"≂̸","NotExists":"∄","NotGreater":"≯","NotGreaterEqual":"≱","NotGreaterFullEqual":"≧̸","NotGreaterGreater":"≫̸","NotGreaterLess":"≹","NotGreaterSlantEqual":"⩾̸","NotGreaterTilde":"≵","NotHumpDownHump":"≎̸","NotHumpEqual":"≏̸","notin":"∉","notindot":"⋵̸","notinE":"⋹̸","notinva":"∉","notinvb":"⋷","notinvc":"⋶","NotLeftTriangleBar":"⧏̸","NotLeftTriangle":"⋪","NotLeftTriangleEqual":"⋬","NotLess":"≮","NotLessEqual":"≰","NotLessGreater":"≸","NotLessLess":"≪̸","NotLessSlantEqual":"⩽̸","NotLessTilde":"≴","NotNestedGreaterGreater":"⪢̸","NotNestedLessLess":"⪡̸","notni":"∌","notniva":"∌","notnivb":"⋾","notnivc":"⋽","NotPrecedes":"⊀","NotPrecedesEqual":"⪯̸","NotPrecedesSlantEqual":"⋠","NotReverseElement":"∌","NotRightTriangleBar":"⧐̸","NotRightTriangle":"⋫","NotRightTriangleEqual":"⋭","NotSquareSubset":"⊏̸","NotSquareSubsetEqual":"⋢","NotSquareSuperset":"⊐̸","NotSquareSupersetEqual":"⋣","NotSubset":"⊂⃒","NotSubsetEqual":"⊈","NotSucceeds":"⊁","NotSucceedsEqual":"⪰̸","NotSucceedsSlantEqual":"⋡","NotSucceedsTilde":"≿̸","NotSuperset":"⊃⃒","NotSupersetEqual":"⊉","NotTilde":"≁","NotTildeEqual":"≄","NotTildeFullEqual":"≇","NotTildeTilde":"≉","NotVerticalBar":"∤","nparallel":"∦","npar":"∦","nparsl":"⫽⃥","npart":"∂̸","npolint":"⨔","npr":"⊀","nprcue":"⋠","nprec":"⊀","npreceq":"⪯̸","npre":"⪯̸","nrarrc":"⤳̸","nrarr":"↛","nrArr":"⇏","nrarrw":"↝̸","nrightarrow":"↛","nRightarrow":"⇏","nrtri":"⋫","nrtrie":"⋭","nsc":"⊁","nsccue":"⋡","nsce":"⪰̸","Nscr":"𝒩","nscr":"𝓃","nshortmid":"∤","nshortparallel":"∦","nsim":"≁","nsime":"≄","nsimeq":"≄","nsmid":"∤","nspar":"∦","nsqsube":"⋢","nsqsupe":"⋣","nsub":"⊄","nsubE":"⫅̸","nsube":"⊈","nsubset":"⊂⃒","nsubseteq":"⊈","nsubseteqq":"⫅̸","nsucc":"⊁","nsucceq":"⪰̸","nsup":"⊅","nsupE":"⫆̸","nsupe":"⊉","nsupset":"⊃⃒","nsupseteq":"⊉","nsupseteqq":"⫆̸","ntgl":"≹","Ntilde":"Ñ","ntilde":"ñ","ntlg":"≸","ntriangleleft":"⋪","ntrianglelefteq":"⋬","ntriangleright":"⋫","ntrianglerighteq":"⋭","Nu":"Ν","nu":"ν","num":"#","numero":"№","numsp":" ","nvap":"≍⃒","nvdash":"⊬","nvDash":"⊭","nVdash":"⊮","nVDash":"⊯","nvge":"≥⃒","nvgt":">⃒","nvHarr":"⤄","nvinfin":"⧞","nvlArr":"⤂","nvle":"≤⃒","nvlt":"<⃒","nvltrie":"⊴⃒","nvrArr":"⤃","nvrtrie":"⊵⃒","nvsim":"∼⃒","nwarhk":"⤣","nwarr":"↖","nwArr":"⇖","nwarrow":"↖","nwnear":"⤧","Oacute":"Ó","oacute":"ó","oast":"⊛","Ocirc":"Ô","ocirc":"ô","ocir":"⊚","Ocy":"О","ocy":"о","odash":"⊝","Odblac":"Ő","odblac":"ő","odiv":"⨸","odot":"⊙","odsold":"⦼","OElig":"Œ","oelig":"œ","ofcir":"⦿","Ofr":"𝔒","ofr":"𝔬","ogon":"˛","Ograve":"Ò","ograve":"ò","ogt":"⧁","ohbar":"⦵","ohm":"Ω","oint":"∮","olarr":"↺","olcir":"⦾","olcross":"⦻","oline":"‾","olt":"⧀","Omacr":"Ō","omacr":"ō","Omega":"Ω","omega":"ω","Omicron":"Ο","omicron":"ο","omid":"⦶","ominus":"⊖","Oopf":"𝕆","oopf":"𝕠","opar":"⦷","OpenCurlyDoubleQuote":"“","OpenCurlyQuote":"‘","operp":"⦹","oplus":"⊕","orarr":"↻","Or":"⩔","or":"∨","ord":"⩝","order":"ℴ","orderof":"ℴ","ordf":"ª","ordm":"º","origof":"⊶","oror":"⩖","orslope":"⩗","orv":"⩛","oS":"Ⓢ","Oscr":"𝒪","oscr":"ℴ","Oslash":"Ø","oslash":"ø","osol":"⊘","Otilde":"Õ","otilde":"õ","otimesas":"⨶","Otimes":"⨷","otimes":"⊗","Ouml":"Ö","ouml":"ö","ovbar":"⌽","OverBar":"‾","OverBrace":"⏞","OverBracket":"⎴","OverParenthesis":"⏜","para":"¶","parallel":"∥","par":"∥","parsim":"⫳","parsl":"⫽","part":"∂","PartialD":"∂","Pcy":"П","pcy":"п","percnt":"%","period":".","permil":"‰","perp":"⊥","pertenk":"‱","Pfr":"𝔓","pfr":"𝔭","Phi":"Φ","phi":"φ","phiv":"ϕ","phmmat":"ℳ","phone":"☎","Pi":"Π","pi":"π","pitchfork":"⋔","piv":"ϖ","planck":"ℏ","planckh":"ℎ","plankv":"ℏ","plusacir":"⨣","plusb":"⊞","pluscir":"⨢","plus":"+","plusdo":"∔","plusdu":"⨥","pluse":"⩲","PlusMinus":"±","plusmn":"±","plussim":"⨦","plustwo":"⨧","pm":"±","Poincareplane":"ℌ","pointint":"⨕","popf":"𝕡","Popf":"ℙ","pound":"£","prap":"⪷","Pr":"⪻","pr":"≺","prcue":"≼","precapprox":"⪷","prec":"≺","preccurlyeq":"≼","Precedes":"≺","PrecedesEqual":"⪯","PrecedesSlantEqual":"≼","PrecedesTilde":"≾","preceq":"⪯","precnapprox":"⪹","precneqq":"⪵","precnsim":"⋨","pre":"⪯","prE":"⪳","precsim":"≾","prime":"′","Prime":"″","primes":"ℙ","prnap":"⪹","prnE":"⪵","prnsim":"⋨","prod":"∏","Product":"∏","profalar":"⌮","profline":"⌒","profsurf":"⌓","prop":"∝","Proportional":"∝","Proportion":"∷","propto":"∝","prsim":"≾","prurel":"⊰","Pscr":"𝒫","pscr":"𝓅","Psi":"Ψ","psi":"ψ","puncsp":" ","Qfr":"𝔔","qfr":"𝔮","qint":"⨌","qopf":"𝕢","Qopf":"ℚ","qprime":"⁗","Qscr":"𝒬","qscr":"𝓆","quaternions":"ℍ","quatint":"⨖","quest":"?","questeq":"≟","quot":"\"","QUOT":"\"","rAarr":"⇛","race":"∽̱","Racute":"Ŕ","racute":"ŕ","radic":"√","raemptyv":"⦳","rang":"⟩","Rang":"⟫","rangd":"⦒","range":"⦥","rangle":"⟩","raquo":"»","rarrap":"⥵","rarrb":"⇥","rarrbfs":"⤠","rarrc":"⤳","rarr":"→","Rarr":"↠","rArr":"⇒","rarrfs":"⤞","rarrhk":"↪","rarrlp":"↬","rarrpl":"⥅","rarrsim":"⥴","Rarrtl":"⤖","rarrtl":"↣","rarrw":"↝","ratail":"⤚","rAtail":"⤜","ratio":"∶","rationals":"ℚ","rbarr":"⤍","rBarr":"⤏","RBarr":"⤐","rbbrk":"❳","rbrace":"}","rbrack":"]","rbrke":"⦌","rbrksld":"⦎","rbrkslu":"⦐","Rcaron":"Ř","rcaron":"ř","Rcedil":"Ŗ","rcedil":"ŗ","rceil":"⌉","rcub":"}","Rcy":"Р","rcy":"р","rdca":"⤷","rdldhar":"⥩","rdquo":"”","rdquor":"”","rdsh":"↳","real":"ℜ","realine":"ℛ","realpart":"ℜ","reals":"ℝ","Re":"ℜ","rect":"▭","reg":"®","REG":"®","ReverseElement":"∋","ReverseEquilibrium":"⇋","ReverseUpEquilibrium":"⥯","rfisht":"⥽","rfloor":"⌋","rfr":"𝔯","Rfr":"ℜ","rHar":"⥤","rhard":"⇁","rharu":"⇀","rharul":"⥬","Rho":"Ρ","rho":"ρ","rhov":"ϱ","RightAngleBracket":"⟩","RightArrowBar":"⇥","rightarrow":"→","RightArrow":"→","Rightarrow":"⇒","RightArrowLeftArrow":"⇄","rightarrowtail":"↣","RightCeiling":"⌉","RightDoubleBracket":"⟧","RightDownTeeVector":"⥝","RightDownVectorBar":"⥕","RightDownVector":"⇂","RightFloor":"⌋","rightharpoondown":"⇁","rightharpoonup":"⇀","rightleftarrows":"⇄","rightleftharpoons":"⇌","rightrightarrows":"⇉","rightsquigarrow":"↝","RightTeeArrow":"↦","RightTee":"⊢","RightTeeVector":"⥛","rightthreetimes":"⋌","RightTriangleBar":"⧐","RightTriangle":"⊳","RightTriangleEqual":"⊵","RightUpDownVector":"⥏","RightUpTeeVector":"⥜","RightUpVectorBar":"⥔","RightUpVector":"↾","RightVectorBar":"⥓","RightVector":"⇀","ring":"˚","risingdotseq":"≓","rlarr":"⇄","rlhar":"⇌","rlm":"‏","rmoustache":"⎱","rmoust":"⎱","rnmid":"⫮","roang":"⟭","roarr":"⇾","robrk":"⟧","ropar":"⦆","ropf":"𝕣","Ropf":"ℝ","roplus":"⨮","rotimes":"⨵","RoundImplies":"⥰","rpar":")","rpargt":"⦔","rppolint":"⨒","rrarr":"⇉","Rrightarrow":"⇛","rsaquo":"›","rscr":"𝓇","Rscr":"ℛ","rsh":"↱","Rsh":"↱","rsqb":"]","rsquo":"’","rsquor":"’","rthree":"⋌","rtimes":"⋊","rtri":"▹","rtrie":"⊵","rtrif":"▸","rtriltri":"⧎","RuleDelayed":"⧴","ruluhar":"⥨","rx":"℞","Sacute":"Ś","sacute":"ś","sbquo":"‚","scap":"⪸","Scaron":"Š","scaron":"š","Sc":"⪼","sc":"≻","sccue":"≽","sce":"⪰","scE":"⪴","Scedil":"Ş","scedil":"ş","Scirc":"Ŝ","scirc":"ŝ","scnap":"⪺","scnE":"⪶","scnsim":"⋩","scpolint":"⨓","scsim":"≿","Scy":"С","scy":"с","sdotb":"⊡","sdot":"⋅","sdote":"⩦","searhk":"⤥","searr":"↘","seArr":"⇘","searrow":"↘","sect":"§","semi":";","seswar":"⤩","setminus":"∖","setmn":"∖","sext":"✶","Sfr":"𝔖","sfr":"𝔰","sfrown":"⌢","sharp":"♯","SHCHcy":"Щ","shchcy":"щ","SHcy":"Ш","shcy":"ш","ShortDownArrow":"↓","ShortLeftArrow":"←","shortmid":"∣","shortparallel":"∥","ShortRightArrow":"→","ShortUpArrow":"↑","shy":"­","Sigma":"Σ","sigma":"σ","sigmaf":"ς","sigmav":"ς","sim":"∼","simdot":"⩪","sime":"≃","simeq":"≃","simg":"⪞","simgE":"⪠","siml":"⪝","simlE":"⪟","simne":"≆","simplus":"⨤","simrarr":"⥲","slarr":"←","SmallCircle":"∘","smallsetminus":"∖","smashp":"⨳","smeparsl":"⧤","smid":"∣","smile":"⌣","smt":"⪪","smte":"⪬","smtes":"⪬︀","SOFTcy":"Ь","softcy":"ь","solbar":"⌿","solb":"⧄","sol":"/","Sopf":"𝕊","sopf":"𝕤","spades":"♠","spadesuit":"♠","spar":"∥","sqcap":"⊓","sqcaps":"⊓︀","sqcup":"⊔","sqcups":"⊔︀","Sqrt":"√","sqsub":"⊏","sqsube":"⊑","sqsubset":"⊏","sqsubseteq":"⊑","sqsup":"⊐","sqsupe":"⊒","sqsupset":"⊐","sqsupseteq":"⊒","square":"□","Square":"□","SquareIntersection":"⊓","SquareSubset":"⊏","SquareSubsetEqual":"⊑","SquareSuperset":"⊐","SquareSupersetEqual":"⊒","SquareUnion":"⊔","squarf":"▪","squ":"□","squf":"▪","srarr":"→","Sscr":"𝒮","sscr":"𝓈","ssetmn":"∖","ssmile":"⌣","sstarf":"⋆","Star":"⋆","star":"☆","starf":"★","straightepsilon":"ϵ","straightphi":"ϕ","strns":"¯","sub":"⊂","Sub":"⋐","subdot":"⪽","subE":"⫅","sube":"⊆","subedot":"⫃","submult":"⫁","subnE":"⫋","subne":"⊊","subplus":"⪿","subrarr":"⥹","subset":"⊂","Subset":"⋐","subseteq":"⊆","subseteqq":"⫅","SubsetEqual":"⊆","subsetneq":"⊊","subsetneqq":"⫋","subsim":"⫇","subsub":"⫕","subsup":"⫓","succapprox":"⪸","succ":"≻","succcurlyeq":"≽","Succeeds":"≻","SucceedsEqual":"⪰","SucceedsSlantEqual":"≽","SucceedsTilde":"≿","succeq":"⪰","succnapprox":"⪺","succneqq":"⪶","succnsim":"⋩","succsim":"≿","SuchThat":"∋","sum":"∑","Sum":"∑","sung":"♪","sup1":"¹","sup2":"²","sup3":"³","sup":"⊃","Sup":"⋑","supdot":"⪾","supdsub":"⫘","supE":"⫆","supe":"⊇","supedot":"⫄","Superset":"⊃","SupersetEqual":"⊇","suphsol":"⟉","suphsub":"⫗","suplarr":"⥻","supmult":"⫂","supnE":"⫌","supne":"⊋","supplus":"⫀","supset":"⊃","Supset":"⋑","supseteq":"⊇","supseteqq":"⫆","supsetneq":"⊋","supsetneqq":"⫌","supsim":"⫈","supsub":"⫔","supsup":"⫖","swarhk":"⤦","swarr":"↙","swArr":"⇙","swarrow":"↙","swnwar":"⤪","szlig":"ß","Tab":"\t","target":"⌖","Tau":"Τ","tau":"τ","tbrk":"⎴","Tcaron":"Ť","tcaron":"ť","Tcedil":"Ţ","tcedil":"ţ","Tcy":"Т","tcy":"т","tdot":"⃛","telrec":"⌕","Tfr":"𝔗","tfr":"𝔱","there4":"∴","therefore":"∴","Therefore":"∴","Theta":"Θ","theta":"θ","thetasym":"ϑ","thetav":"ϑ","thickapprox":"≈","thicksim":"∼","ThickSpace":"  ","ThinSpace":" ","thinsp":" ","thkap":"≈","thksim":"∼","THORN":"Þ","thorn":"þ","tilde":"˜","Tilde":"∼","TildeEqual":"≃","TildeFullEqual":"≅","TildeTilde":"≈","timesbar":"⨱","timesb":"⊠","times":"×","timesd":"⨰","tint":"∭","toea":"⤨","topbot":"⌶","topcir":"⫱","top":"⊤","Topf":"𝕋","topf":"𝕥","topfork":"⫚","tosa":"⤩","tprime":"‴","trade":"™","TRADE":"™","triangle":"▵","triangledown":"▿","triangleleft":"◃","trianglelefteq":"⊴","triangleq":"≜","triangleright":"▹","trianglerighteq":"⊵","tridot":"◬","trie":"≜","triminus":"⨺","TripleDot":"⃛","triplus":"⨹","trisb":"⧍","tritime":"⨻","trpezium":"⏢","Tscr":"𝒯","tscr":"𝓉","TScy":"Ц","tscy":"ц","TSHcy":"Ћ","tshcy":"ћ","Tstrok":"Ŧ","tstrok":"ŧ","twixt":"≬","twoheadleftarrow":"↞","twoheadrightarrow":"↠","Uacute":"Ú","uacute":"ú","uarr":"↑","Uarr":"↟","uArr":"⇑","Uarrocir":"⥉","Ubrcy":"Ў","ubrcy":"ў","Ubreve":"Ŭ","ubreve":"ŭ","Ucirc":"Û","ucirc":"û","Ucy":"У","ucy":"у","udarr":"⇅","Udblac":"Ű","udblac":"ű","udhar":"⥮","ufisht":"⥾","Ufr":"𝔘","ufr":"𝔲","Ugrave":"Ù","ugrave":"ù","uHar":"⥣","uharl":"↿","uharr":"↾","uhblk":"▀","ulcorn":"⌜","ulcorner":"⌜","ulcrop":"⌏","ultri":"◸","Umacr":"Ū","umacr":"ū","uml":"¨","UnderBar":"_","UnderBrace":"⏟","UnderBracket":"⎵","UnderParenthesis":"⏝","Union":"⋃","UnionPlus":"⊎","Uogon":"Ų","uogon":"ų","Uopf":"𝕌","uopf":"𝕦","UpArrowBar":"⤒","uparrow":"↑","UpArrow":"↑","Uparrow":"⇑","UpArrowDownArrow":"⇅","updownarrow":"↕","UpDownArrow":"↕","Updownarrow":"⇕","UpEquilibrium":"⥮","upharpoonleft":"↿","upharpoonright":"↾","uplus":"⊎","UpperLeftArrow":"↖","UpperRightArrow":"↗","upsi":"υ","Upsi":"ϒ","upsih":"ϒ","Upsilon":"Υ","upsilon":"υ","UpTeeArrow":"↥","UpTee":"⊥","upuparrows":"⇈","urcorn":"⌝","urcorner":"⌝","urcrop":"⌎","Uring":"Ů","uring":"ů","urtri":"◹","Uscr":"𝒰","uscr":"𝓊","utdot":"⋰","Utilde":"Ũ","utilde":"ũ","utri":"▵","utrif":"▴","uuarr":"⇈","Uuml":"Ü","uuml":"ü","uwangle":"⦧","vangrt":"⦜","varepsilon":"ϵ","varkappa":"ϰ","varnothing":"∅","varphi":"ϕ","varpi":"ϖ","varpropto":"∝","varr":"↕","vArr":"⇕","varrho":"ϱ","varsigma":"ς","varsubsetneq":"⊊︀","varsubsetneqq":"⫋︀","varsupsetneq":"⊋︀","varsupsetneqq":"⫌︀","vartheta":"ϑ","vartriangleleft":"⊲","vartriangleright":"⊳","vBar":"⫨","Vbar":"⫫","vBarv":"⫩","Vcy":"В","vcy":"в","vdash":"⊢","vDash":"⊨","Vdash":"⊩","VDash":"⊫","Vdashl":"⫦","veebar":"⊻","vee":"∨","Vee":"⋁","veeeq":"≚","vellip":"⋮","verbar":"|","Verbar":"‖","vert":"|","Vert":"‖","VerticalBar":"∣","VerticalLine":"|","VerticalSeparator":"❘","VerticalTilde":"≀","VeryThinSpace":" ","Vfr":"𝔙","vfr":"𝔳","vltri":"⊲","vnsub":"⊂⃒","vnsup":"⊃⃒","Vopf":"𝕍","vopf":"𝕧","vprop":"∝","vrtri":"⊳","Vscr":"𝒱","vscr":"𝓋","vsubnE":"⫋︀","vsubne":"⊊︀","vsupnE":"⫌︀","vsupne":"⊋︀","Vvdash":"⊪","vzigzag":"⦚","Wcirc":"Ŵ","wcirc":"ŵ","wedbar":"⩟","wedge":"∧","Wedge":"⋀","wedgeq":"≙","weierp":"℘","Wfr":"𝔚","wfr":"𝔴","Wopf":"𝕎","wopf":"𝕨","wp":"℘","wr":"≀","wreath":"≀","Wscr":"𝒲","wscr":"𝓌","xcap":"⋂","xcirc":"◯","xcup":"⋃","xdtri":"▽","Xfr":"𝔛","xfr":"𝔵","xharr":"⟷","xhArr":"⟺","Xi":"Ξ","xi":"ξ","xlarr":"⟵","xlArr":"⟸","xmap":"⟼","xnis":"⋻","xodot":"⨀","Xopf":"𝕏","xopf":"𝕩","xoplus":"⨁","xotime":"⨂","xrarr":"⟶","xrArr":"⟹","Xscr":"𝒳","xscr":"𝓍","xsqcup":"⨆","xuplus":"⨄","xutri":"△","xvee":"⋁","xwedge":"⋀","Yacute":"Ý","yacute":"ý","YAcy":"Я","yacy":"я","Ycirc":"Ŷ","ycirc":"ŷ","Ycy":"Ы","ycy":"ы","yen":"¥","Yfr":"𝔜","yfr":"𝔶","YIcy":"Ї","yicy":"ї","Yopf":"𝕐","yopf":"𝕪","Yscr":"𝒴","yscr":"𝓎","YUcy":"Ю","yucy":"ю","yuml":"ÿ","Yuml":"Ÿ","Zacute":"Ź","zacute":"ź","Zcaron":"Ž","zcaron":"ž","Zcy":"З","zcy":"з","Zdot":"Ż","zdot":"ż","zeetrf":"ℨ","ZeroWidthSpace":"​","Zeta":"Ζ","zeta":"ζ","zfr":"𝔷","Zfr":"ℨ","ZHcy":"Ж","zhcy":"ж","zigrarr":"⇝","zopf":"𝕫","Zopf":"ℤ","Zscr":"𝒵","zscr":"𝓏","zwj":"‍","zwnj":"‌"}

/***/ }),
/* 57 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";




var encodeCache = {};


// Create a lookup array where anything but characters in `chars` string
// and alphanumeric chars is percent-encoded.
//
function getEncodeCache(exclude) {
  var i, ch, cache = encodeCache[exclude];
  if (cache) { return cache; }

  cache = encodeCache[exclude] = [];

  for (i = 0; i < 128; i++) {
    ch = String.fromCharCode(i);

    if (/^[0-9a-z]$/i.test(ch)) {
      // always allow unencoded alphanumeric characters
      cache.push(ch);
    } else {
      cache.push('%' + ('0' + i.toString(16).toUpperCase()).slice(-2));
    }
  }

  for (i = 0; i < exclude.length; i++) {
    cache[exclude.charCodeAt(i)] = exclude[i];
  }

  return cache;
}


// Encode unsafe characters with percent-encoding, skipping already
// encoded sequences.
//
//  - string       - string to encode
//  - exclude      - list of characters to ignore (in addition to a-zA-Z0-9)
//  - keepEscaped  - don't encode '%' in a correct escape sequence (default: true)
//
function encode(string, exclude, keepEscaped) {
  var i, l, code, nextCode, cache,
      result = '';

  if (typeof exclude !== 'string') {
    // encode(string, keepEscaped)
    keepEscaped  = exclude;
    exclude = encode.defaultChars;
  }

  if (typeof keepEscaped === 'undefined') {
    keepEscaped = true;
  }

  cache = getEncodeCache(exclude);

  for (i = 0, l = string.length; i < l; i++) {
    code = string.charCodeAt(i);

    if (keepEscaped && code === 0x25 /* % */ && i + 2 < l) {
      if (/^[0-9a-f]{2}$/i.test(string.slice(i + 1, i + 3))) {
        result += string.slice(i, i + 3);
        i += 2;
        continue;
      }
    }

    if (code < 128) {
      result += cache[code];
      continue;
    }

    if (code >= 0xD800 && code <= 0xDFFF) {
      if (code >= 0xD800 && code <= 0xDBFF && i + 1 < l) {
        nextCode = string.charCodeAt(i + 1);
        if (nextCode >= 0xDC00 && nextCode <= 0xDFFF) {
          result += encodeURIComponent(string[i] + string[i + 1]);
          i++;
          continue;
        }
      }
      result += '%EF%BF%BD';
      continue;
    }

    result += encodeURIComponent(string[i]);
  }

  return result;
}

encode.defaultChars   = ";/?:@&=+$,-_.!~*'()#";
encode.componentChars = "-_.!~*'()";


module.exports = encode;


/***/ }),
/* 58 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";




/* eslint-disable no-bitwise */

var decodeCache = {};

function getDecodeCache(exclude) {
  var i, ch, cache = decodeCache[exclude];
  if (cache) { return cache; }

  cache = decodeCache[exclude] = [];

  for (i = 0; i < 128; i++) {
    ch = String.fromCharCode(i);
    cache.push(ch);
  }

  for (i = 0; i < exclude.length; i++) {
    ch = exclude.charCodeAt(i);
    cache[ch] = '%' + ('0' + ch.toString(16).toUpperCase()).slice(-2);
  }

  return cache;
}


// Decode percent-encoded string.
//
function decode(string, exclude) {
  var cache;

  if (typeof exclude !== 'string') {
    exclude = decode.defaultChars;
  }

  cache = getDecodeCache(exclude);

  return string.replace(/(%[a-f0-9]{2})+/gi, function(seq) {
    var i, l, b1, b2, b3, b4, chr,
        result = '';

    for (i = 0, l = seq.length; i < l; i += 3) {
      b1 = parseInt(seq.slice(i + 1, i + 3), 16);

      if (b1 < 0x80) {
        result += cache[b1];
        continue;
      }

      if ((b1 & 0xE0) === 0xC0 && (i + 3 < l)) {
        // 110xxxxx 10xxxxxx
        b2 = parseInt(seq.slice(i + 4, i + 6), 16);

        if ((b2 & 0xC0) === 0x80) {
          chr = ((b1 << 6) & 0x7C0) | (b2 & 0x3F);

          if (chr < 0x80) {
            result += '\ufffd\ufffd';
          } else {
            result += String.fromCharCode(chr);
          }

          i += 3;
          continue;
        }
      }

      if ((b1 & 0xF0) === 0xE0 && (i + 6 < l)) {
        // 1110xxxx 10xxxxxx 10xxxxxx
        b2 = parseInt(seq.slice(i + 4, i + 6), 16);
        b3 = parseInt(seq.slice(i + 7, i + 9), 16);

        if ((b2 & 0xC0) === 0x80 && (b3 & 0xC0) === 0x80) {
          chr = ((b1 << 12) & 0xF000) | ((b2 << 6) & 0xFC0) | (b3 & 0x3F);

          if (chr < 0x800 || (chr >= 0xD800 && chr <= 0xDFFF)) {
            result += '\ufffd\ufffd\ufffd';
          } else {
            result += String.fromCharCode(chr);
          }

          i += 6;
          continue;
        }
      }

      if ((b1 & 0xF8) === 0xF0 && (i + 9 < l)) {
        // 111110xx 10xxxxxx 10xxxxxx 10xxxxxx
        b2 = parseInt(seq.slice(i + 4, i + 6), 16);
        b3 = parseInt(seq.slice(i + 7, i + 9), 16);
        b4 = parseInt(seq.slice(i + 10, i + 12), 16);

        if ((b2 & 0xC0) === 0x80 && (b3 & 0xC0) === 0x80 && (b4 & 0xC0) === 0x80) {
          chr = ((b1 << 18) & 0x1C0000) | ((b2 << 12) & 0x3F000) | ((b3 << 6) & 0xFC0) | (b4 & 0x3F);

          if (chr < 0x10000 || chr > 0x10FFFF) {
            result += '\ufffd\ufffd\ufffd\ufffd';
          } else {
            chr -= 0x10000;
            result += String.fromCharCode(0xD800 + (chr >> 10), 0xDC00 + (chr & 0x3FF));
          }

          i += 9;
          continue;
        }
      }

      result += '\ufffd';
    }

    return result;
  });
}


decode.defaultChars   = ';/?:@&=+$,#';
decode.componentChars = '';


module.exports = decode;


/***/ }),
/* 59 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";




module.exports = function format(url) {
  var result = '';

  result += url.protocol || '';
  result += url.slashes ? '//' : '';
  result += url.auth ? url.auth + '@' : '';

  if (url.hostname && url.hostname.indexOf(':') !== -1) {
    // ipv6 address
    result += '[' + url.hostname + ']';
  } else {
    result += url.hostname || '';
  }

  result += url.port ? ':' + url.port : '';
  result += url.pathname || '';
  result += url.search || '';
  result += url.hash || '';

  return result;
};


/***/ }),
/* 60 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.



//
// Changes from joyent/node:
//
// 1. No leading slash in paths,
//    e.g. in `url.parse('http://foo?bar')` pathname is ``, not `/`
//
// 2. Backslashes are not replaced with slashes,
//    so `http:\\example.org\` is treated like a relative path
//
// 3. Trailing colon is treated like a part of the path,
//    i.e. in `http://example.org:foo` pathname is `:foo`
//
// 4. Nothing is URL-encoded in the resulting object,
//    (in joyent/node some chars in auth and paths are encoded)
//
// 5. `url.parse()` does not have `parseQueryString` argument
//
// 6. Removed extraneous result properties: `host`, `path`, `query`, etc.,
//    which can be constructed using other parts of the url.
//


function Url() {
  this.protocol = null;
  this.slashes = null;
  this.auth = null;
  this.port = null;
  this.hostname = null;
  this.hash = null;
  this.search = null;
  this.pathname = null;
}

// Reference: RFC 3986, RFC 1808, RFC 2396

// define these here so at least they only have to be
// compiled once on the first module load.
var protocolPattern = /^([a-z0-9.+-]+:)/i,
    portPattern = /:[0-9]*$/,

    // Special case for a simple path URL
    simplePathPattern = /^(\/\/?(?!\/)[^\?\s]*)(\?[^\s]*)?$/,

    // RFC 2396: characters reserved for delimiting URLs.
    // We actually just auto-escape these.
    delims = [ '<', '>', '"', '`', ' ', '\r', '\n', '\t' ],

    // RFC 2396: characters not allowed for various reasons.
    unwise = [ '{', '}', '|', '\\', '^', '`' ].concat(delims),

    // Allowed by RFCs, but cause of XSS attacks.  Always escape these.
    autoEscape = [ '\'' ].concat(unwise),
    // Characters that are never ever allowed in a hostname.
    // Note that any invalid chars are also handled, but these
    // are the ones that are *expected* to be seen, so we fast-path
    // them.
    nonHostChars = [ '%', '/', '?', ';', '#' ].concat(autoEscape),
    hostEndingChars = [ '/', '?', '#' ],
    hostnameMaxLen = 255,
    hostnamePartPattern = /^[+a-z0-9A-Z_-]{0,63}$/,
    hostnamePartStart = /^([+a-z0-9A-Z_-]{0,63})(.*)$/,
    // protocols that can allow "unsafe" and "unwise" chars.
    /* eslint-disable no-script-url */
    // protocols that never have a hostname.
    hostlessProtocol = {
      'javascript': true,
      'javascript:': true
    },
    // protocols that always contain a // bit.
    slashedProtocol = {
      'http': true,
      'https': true,
      'ftp': true,
      'gopher': true,
      'file': true,
      'http:': true,
      'https:': true,
      'ftp:': true,
      'gopher:': true,
      'file:': true
    };
    /* eslint-enable no-script-url */

function urlParse(url, slashesDenoteHost) {
  if (url && url instanceof Url) { return url; }

  var u = new Url();
  u.parse(url, slashesDenoteHost);
  return u;
}

Url.prototype.parse = function(url, slashesDenoteHost) {
  var i, l, lowerProto, hec, slashes,
      rest = url;

  // trim before proceeding.
  // This is to support parse stuff like "  http://foo.com  \n"
  rest = rest.trim();

  if (!slashesDenoteHost && url.split('#').length === 1) {
    // Try fast path regexp
    var simplePath = simplePathPattern.exec(rest);
    if (simplePath) {
      this.pathname = simplePath[1];
      if (simplePath[2]) {
        this.search = simplePath[2];
      }
      return this;
    }
  }

  var proto = protocolPattern.exec(rest);
  if (proto) {
    proto = proto[0];
    lowerProto = proto.toLowerCase();
    this.protocol = proto;
    rest = rest.substr(proto.length);
  }

  // figure out if it's got a host
  // user@server is *always* interpreted as a hostname, and url
  // resolution will treat //foo/bar as host=foo,path=bar because that's
  // how the browser resolves relative URLs.
  if (slashesDenoteHost || proto || rest.match(/^\/\/[^@\/]+@[^@\/]+/)) {
    slashes = rest.substr(0, 2) === '//';
    if (slashes && !(proto && hostlessProtocol[proto])) {
      rest = rest.substr(2);
      this.slashes = true;
    }
  }

  if (!hostlessProtocol[proto] &&
      (slashes || (proto && !slashedProtocol[proto]))) {

    // there's a hostname.
    // the first instance of /, ?, ;, or # ends the host.
    //
    // If there is an @ in the hostname, then non-host chars *are* allowed
    // to the left of the last @ sign, unless some host-ending character
    // comes *before* the @-sign.
    // URLs are obnoxious.
    //
    // ex:
    // http://a@b@c/ => user:a@b host:c
    // http://a@b?@c => user:a host:c path:/?@c

    // v0.12 TODO(isaacs): This is not quite how Chrome does things.
    // Review our test case against browsers more comprehensively.

    // find the first instance of any hostEndingChars
    var hostEnd = -1;
    for (i = 0; i < hostEndingChars.length; i++) {
      hec = rest.indexOf(hostEndingChars[i]);
      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd)) {
        hostEnd = hec;
      }
    }

    // at this point, either we have an explicit point where the
    // auth portion cannot go past, or the last @ char is the decider.
    var auth, atSign;
    if (hostEnd === -1) {
      // atSign can be anywhere.
      atSign = rest.lastIndexOf('@');
    } else {
      // atSign must be in auth portion.
      // http://a@b/c@d => host:b auth:a path:/c@d
      atSign = rest.lastIndexOf('@', hostEnd);
    }

    // Now we have a portion which is definitely the auth.
    // Pull that off.
    if (atSign !== -1) {
      auth = rest.slice(0, atSign);
      rest = rest.slice(atSign + 1);
      this.auth = auth;
    }

    // the host is the remaining to the left of the first non-host char
    hostEnd = -1;
    for (i = 0; i < nonHostChars.length; i++) {
      hec = rest.indexOf(nonHostChars[i]);
      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd)) {
        hostEnd = hec;
      }
    }
    // if we still have not hit it, then the entire thing is a host.
    if (hostEnd === -1) {
      hostEnd = rest.length;
    }

    if (rest[hostEnd - 1] === ':') { hostEnd--; }
    var host = rest.slice(0, hostEnd);
    rest = rest.slice(hostEnd);

    // pull out port.
    this.parseHost(host);

    // we've indicated that there is a hostname,
    // so even if it's empty, it has to be present.
    this.hostname = this.hostname || '';

    // if hostname begins with [ and ends with ]
    // assume that it's an IPv6 address.
    var ipv6Hostname = this.hostname[0] === '[' &&
        this.hostname[this.hostname.length - 1] === ']';

    // validate a little.
    if (!ipv6Hostname) {
      var hostparts = this.hostname.split(/\./);
      for (i = 0, l = hostparts.length; i < l; i++) {
        var part = hostparts[i];
        if (!part) { continue; }
        if (!part.match(hostnamePartPattern)) {
          var newpart = '';
          for (var j = 0, k = part.length; j < k; j++) {
            if (part.charCodeAt(j) > 127) {
              // we replace non-ASCII char with a temporary placeholder
              // we need this to make sure size of hostname is not
              // broken by replacing non-ASCII by nothing
              newpart += 'x';
            } else {
              newpart += part[j];
            }
          }
          // we test again with ASCII char only
          if (!newpart.match(hostnamePartPattern)) {
            var validParts = hostparts.slice(0, i);
            var notHost = hostparts.slice(i + 1);
            var bit = part.match(hostnamePartStart);
            if (bit) {
              validParts.push(bit[1]);
              notHost.unshift(bit[2]);
            }
            if (notHost.length) {
              rest = notHost.join('.') + rest;
            }
            this.hostname = validParts.join('.');
            break;
          }
        }
      }
    }

    if (this.hostname.length > hostnameMaxLen) {
      this.hostname = '';
    }

    // strip [ and ] from the hostname
    // the host field still retains them, though
    if (ipv6Hostname) {
      this.hostname = this.hostname.substr(1, this.hostname.length - 2);
    }
  }

  // chop off from the tail first.
  var hash = rest.indexOf('#');
  if (hash !== -1) {
    // got a fragment string.
    this.hash = rest.substr(hash);
    rest = rest.slice(0, hash);
  }
  var qm = rest.indexOf('?');
  if (qm !== -1) {
    this.search = rest.substr(qm);
    rest = rest.slice(0, qm);
  }
  if (rest) { this.pathname = rest; }
  if (slashedProtocol[lowerProto] &&
      this.hostname && !this.pathname) {
    this.pathname = '';
  }

  return this;
};

Url.prototype.parseHost = function(host) {
  var port = portPattern.exec(host);
  if (port) {
    port = port[0];
    if (port !== ':') {
      this.port = port.substr(1);
    }
    host = host.substr(0, host.length - port.length);
  }
  if (host) { this.hostname = host; }
};

module.exports = urlParse;


/***/ }),
/* 61 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.Any = __webpack_require__(24);
exports.Cc  = __webpack_require__(25);
exports.Cf  = __webpack_require__(62);
exports.P   = __webpack_require__(15);
exports.Z   = __webpack_require__(26);


/***/ }),
/* 62 */
/***/ (function(module, exports) {

module.exports=/[\xAD\u0600-\u0605\u061C\u06DD\u070F\u08E2\u180E\u200B-\u200F\u202A-\u202E\u2060-\u2064\u2066-\u206F\uFEFF\uFFF9-\uFFFB]|\uD804\uDCBD|\uD82F[\uDCA0-\uDCA3]|\uD834[\uDD73-\uDD7A]|\uDB40[\uDC01\uDC20-\uDC7F]/

/***/ }),
/* 63 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Just a shortcut for bulk export



exports.parseLinkLabel       = __webpack_require__(64);
exports.parseLinkDestination = __webpack_require__(65);
exports.parseLinkTitle       = __webpack_require__(66);


/***/ }),
/* 64 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Parse link label
//
// this function assumes that first character ("[") already matches;
// returns the end of the label
//


module.exports = function parseLinkLabel(state, start, disableNested) {
  var level, found, marker, prevPos,
      labelEnd = -1,
      max = state.posMax,
      oldPos = state.pos;

  state.pos = start + 1;
  level = 1;

  while (state.pos < max) {
    marker = state.src.charCodeAt(state.pos);
    if (marker === 0x5D /* ] */) {
      level--;
      if (level === 0) {
        found = true;
        break;
      }
    }

    prevPos = state.pos;
    state.md.inline.skipToken(state);
    if (marker === 0x5B /* [ */) {
      if (prevPos === state.pos - 1) {
        // increase level if we find text `[`, which is not a part of any token
        level++;
      } else if (disableNested) {
        state.pos = oldPos;
        return -1;
      }
    }
  }

  if (found) {
    labelEnd = state.pos;
  }

  // restore old state
  state.pos = oldPos;

  return labelEnd;
};


/***/ }),
/* 65 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Parse link destination
//



var isSpace     = __webpack_require__(0).isSpace;
var unescapeAll = __webpack_require__(0).unescapeAll;


module.exports = function parseLinkDestination(str, pos, max) {
  var code, level,
      lines = 0,
      start = pos,
      result = {
        ok: false,
        pos: 0,
        lines: 0,
        str: ''
      };

  if (str.charCodeAt(pos) === 0x3C /* < */) {
    pos++;
    while (pos < max) {
      code = str.charCodeAt(pos);
      if (code === 0x0A /* \n */ || isSpace(code)) { return result; }
      if (code === 0x3E /* > */) {
        result.pos = pos + 1;
        result.str = unescapeAll(str.slice(start + 1, pos));
        result.ok = true;
        return result;
      }
      if (code === 0x5C /* \ */ && pos + 1 < max) {
        pos += 2;
        continue;
      }

      pos++;
    }

    // no closing '>'
    return result;
  }

  // this should be ... } else { ... branch

  level = 0;
  while (pos < max) {
    code = str.charCodeAt(pos);

    if (code === 0x20) { break; }

    // ascii control characters
    if (code < 0x20 || code === 0x7F) { break; }

    if (code === 0x5C /* \ */ && pos + 1 < max) {
      pos += 2;
      continue;
    }

    if (code === 0x28 /* ( */) {
      level++;
    }

    if (code === 0x29 /* ) */) {
      if (level === 0) { break; }
      level--;
    }

    pos++;
  }

  if (start === pos) { return result; }
  if (level !== 0) { return result; }

  result.str = unescapeAll(str.slice(start, pos));
  result.lines = lines;
  result.pos = pos;
  result.ok = true;
  return result;
};


/***/ }),
/* 66 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Parse link title
//



var unescapeAll = __webpack_require__(0).unescapeAll;


module.exports = function parseLinkTitle(str, pos, max) {
  var code,
      marker,
      lines = 0,
      start = pos,
      result = {
        ok: false,
        pos: 0,
        lines: 0,
        str: ''
      };

  if (pos >= max) { return result; }

  marker = str.charCodeAt(pos);

  if (marker !== 0x22 /* " */ && marker !== 0x27 /* ' */ && marker !== 0x28 /* ( */) { return result; }

  pos++;

  // if opening marker is "(", switch it to closing marker ")"
  if (marker === 0x28) { marker = 0x29; }

  while (pos < max) {
    code = str.charCodeAt(pos);
    if (code === marker) {
      result.pos = pos + 1;
      result.lines = lines;
      result.str = unescapeAll(str.slice(start + 1, pos));
      result.ok = true;
      return result;
    } else if (code === 0x0A) {
      lines++;
    } else if (code === 0x5C /* \ */ && pos + 1 < max) {
      pos++;
      if (str.charCodeAt(pos) === 0x0A) {
        lines++;
      }
    }

    pos++;
  }

  return result;
};


/***/ }),
/* 67 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * class Renderer
 *
 * Generates HTML from parsed token stream. Each instance has independent
 * copy of rules. Those can be rewritten with ease. Also, you can add new
 * rules if you create plugin and adds new token types.
 **/



var assign          = __webpack_require__(0).assign;
var unescapeAll     = __webpack_require__(0).unescapeAll;
var escapeHtml      = __webpack_require__(0).escapeHtml;


////////////////////////////////////////////////////////////////////////////////

var default_rules = {};


default_rules.code_inline = function (tokens, idx, options, env, slf) {
  var token = tokens[idx];

  return  '<code' + slf.renderAttrs(token) + '>' +
          escapeHtml(tokens[idx].content) +
          '</code>';
};


default_rules.code_block = function (tokens, idx, options, env, slf) {
  var token = tokens[idx];

  return  '<pre' + slf.renderAttrs(token) + '><code>' +
          escapeHtml(tokens[idx].content) +
          '</code></pre>\n';
};


default_rules.fence = function (tokens, idx, options, env, slf) {
  var token = tokens[idx],
      info = token.info ? unescapeAll(token.info).trim() : '',
      langName = '',
      highlighted, i, tmpAttrs, tmpToken;

  if (info) {
    langName = info.split(/\s+/g)[0];
  }

  if (options.highlight) {
    highlighted = options.highlight(token.content, langName) || escapeHtml(token.content);
  } else {
    highlighted = escapeHtml(token.content);
  }

  if (highlighted.indexOf('<pre') === 0) {
    return highlighted + '\n';
  }

  // If language exists, inject class gently, without modifying original token.
  // May be, one day we will add .clone() for token and simplify this part, but
  // now we prefer to keep things local.
  if (info) {
    i        = token.attrIndex('class');
    tmpAttrs = token.attrs ? token.attrs.slice() : [];

    if (i < 0) {
      tmpAttrs.push([ 'class', options.langPrefix + langName ]);
    } else {
      tmpAttrs[i][1] += ' ' + options.langPrefix + langName;
    }

    // Fake token just to render attributes
    tmpToken = {
      attrs: tmpAttrs
    };

    return  '<pre><code' + slf.renderAttrs(tmpToken) + '>'
          + highlighted
          + '</code></pre>\n';
  }


  return  '<pre><code' + slf.renderAttrs(token) + '>'
        + highlighted
        + '</code></pre>\n';
};


default_rules.image = function (tokens, idx, options, env, slf) {
  var token = tokens[idx];

  // "alt" attr MUST be set, even if empty. Because it's mandatory and
  // should be placed on proper position for tests.
  //
  // Replace content with actual value

  token.attrs[token.attrIndex('alt')][1] =
    slf.renderInlineAsText(token.children, options, env);

  return slf.renderToken(tokens, idx, options);
};


default_rules.hardbreak = function (tokens, idx, options /*, env */) {
  return options.xhtmlOut ? '<br />\n' : '<br>\n';
};
default_rules.softbreak = function (tokens, idx, options /*, env */) {
  return options.breaks ? (options.xhtmlOut ? '<br />\n' : '<br>\n') : '\n';
};


default_rules.text = function (tokens, idx /*, options, env */) {
  return escapeHtml(tokens[idx].content);
};


default_rules.html_block = function (tokens, idx /*, options, env */) {
  return tokens[idx].content;
};
default_rules.html_inline = function (tokens, idx /*, options, env */) {
  return tokens[idx].content;
};


/**
 * new Renderer()
 *
 * Creates new [[Renderer]] instance and fill [[Renderer#rules]] with defaults.
 **/
function Renderer() {

  /**
   * Renderer#rules -> Object
   *
   * Contains render rules for tokens. Can be updated and extended.
   *
   * ##### Example
   *
   * ```javascript
   * var md = require('markdown-it')();
   *
   * md.renderer.rules.strong_open  = function () { return '<b>'; };
   * md.renderer.rules.strong_close = function () { return '</b>'; };
   *
   * var result = md.renderInline(...);
   * ```
   *
   * Each rule is called as independed static function with fixed signature:
   *
   * ```javascript
   * function my_token_render(tokens, idx, options, env, renderer) {
   *   // ...
   *   return renderedHTML;
   * }
   * ```
   *
   * See [source code](https://github.com/markdown-it/markdown-it/blob/master/lib/renderer.js)
   * for more details and examples.
   **/
  this.rules = assign({}, default_rules);
}


/**
 * Renderer.renderAttrs(token) -> String
 *
 * Render token attributes to string.
 **/
Renderer.prototype.renderAttrs = function renderAttrs(token) {
  var i, l, result;

  if (!token.attrs) { return ''; }

  result = '';

  for (i = 0, l = token.attrs.length; i < l; i++) {
    result += ' ' + escapeHtml(token.attrs[i][0]) + '="' + escapeHtml(token.attrs[i][1]) + '"';
  }

  return result;
};


/**
 * Renderer.renderToken(tokens, idx, options) -> String
 * - tokens (Array): list of tokens
 * - idx (Numbed): token index to render
 * - options (Object): params of parser instance
 *
 * Default token renderer. Can be overriden by custom function
 * in [[Renderer#rules]].
 **/
Renderer.prototype.renderToken = function renderToken(tokens, idx, options) {
  var nextToken,
      result = '',
      needLf = false,
      token = tokens[idx];

  // Tight list paragraphs
  if (token.hidden) {
    return '';
  }

  // Insert a newline between hidden paragraph and subsequent opening
  // block-level tag.
  //
  // For example, here we should insert a newline before blockquote:
  //  - a
  //    >
  //
  if (token.block && token.nesting !== -1 && idx && tokens[idx - 1].hidden) {
    result += '\n';
  }

  // Add token name, e.g. `<img`
  result += (token.nesting === -1 ? '</' : '<') + token.tag;

  // Encode attributes, e.g. `<img src="foo"`
  result += this.renderAttrs(token);

  // Add a slash for self-closing tags, e.g. `<img src="foo" /`
  if (token.nesting === 0 && options.xhtmlOut) {
    result += ' /';
  }

  // Check if we need to add a newline after this tag
  if (token.block) {
    needLf = true;

    if (token.nesting === 1) {
      if (idx + 1 < tokens.length) {
        nextToken = tokens[idx + 1];

        if (nextToken.type === 'inline' || nextToken.hidden) {
          // Block-level tag containing an inline tag.
          //
          needLf = false;

        } else if (nextToken.nesting === -1 && nextToken.tag === token.tag) {
          // Opening tag + closing tag of the same type. E.g. `<li></li>`.
          //
          needLf = false;
        }
      }
    }
  }

  result += needLf ? '>\n' : '>';

  return result;
};


/**
 * Renderer.renderInline(tokens, options, env) -> String
 * - tokens (Array): list on block tokens to renter
 * - options (Object): params of parser instance
 * - env (Object): additional data from parsed input (references, for example)
 *
 * The same as [[Renderer.render]], but for single token of `inline` type.
 **/
Renderer.prototype.renderInline = function (tokens, options, env) {
  var type,
      result = '',
      rules = this.rules;

  for (var i = 0, len = tokens.length; i < len; i++) {
    type = tokens[i].type;

    if (typeof rules[type] !== 'undefined') {
      result += rules[type](tokens, i, options, env, this);
    } else {
      result += this.renderToken(tokens, i, options);
    }
  }

  return result;
};


/** internal
 * Renderer.renderInlineAsText(tokens, options, env) -> String
 * - tokens (Array): list on block tokens to renter
 * - options (Object): params of parser instance
 * - env (Object): additional data from parsed input (references, for example)
 *
 * Special kludge for image `alt` attributes to conform CommonMark spec.
 * Don't try to use it! Spec requires to show `alt` content with stripped markup,
 * instead of simple escaping.
 **/
Renderer.prototype.renderInlineAsText = function (tokens, options, env) {
  var result = '';

  for (var i = 0, len = tokens.length; i < len; i++) {
    if (tokens[i].type === 'text') {
      result += tokens[i].content;
    } else if (tokens[i].type === 'image') {
      result += this.renderInlineAsText(tokens[i].children, options, env);
    }
  }

  return result;
};


/**
 * Renderer.render(tokens, options, env) -> String
 * - tokens (Array): list on block tokens to renter
 * - options (Object): params of parser instance
 * - env (Object): additional data from parsed input (references, for example)
 *
 * Takes token stream and generates HTML. Probably, you will never need to call
 * this method directly.
 **/
Renderer.prototype.render = function (tokens, options, env) {
  var i, len, type,
      result = '',
      rules = this.rules;

  for (i = 0, len = tokens.length; i < len; i++) {
    type = tokens[i].type;

    if (type === 'inline') {
      result += this.renderInline(tokens[i].children, options, env);
    } else if (typeof rules[type] !== 'undefined') {
      result += rules[tokens[i].type](tokens, i, options, env, this);
    } else {
      result += this.renderToken(tokens, i, options, env);
    }
  }

  return result;
};

module.exports = Renderer;


/***/ }),
/* 68 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/** internal
 * class Core
 *
 * Top-level rules executor. Glues block/inline parsers and does intermediate
 * transformations.
 **/



var Ruler  = __webpack_require__(16);


var _rules = [
  [ 'normalize',      __webpack_require__(69)      ],
  [ 'block',          __webpack_require__(70)          ],
  [ 'inline',         __webpack_require__(71)         ],
  [ 'linkify',        __webpack_require__(72)        ],
  [ 'replacements',   __webpack_require__(73)   ],
  [ 'smartquotes',    __webpack_require__(74)    ]
];


/**
 * new Core()
 **/
function Core() {
  /**
   * Core#ruler -> Ruler
   *
   * [[Ruler]] instance. Keep configuration of core rules.
   **/
  this.ruler = new Ruler();

  for (var i = 0; i < _rules.length; i++) {
    this.ruler.push(_rules[i][0], _rules[i][1]);
  }
}


/**
 * Core.process(state)
 *
 * Executes core chain rules.
 **/
Core.prototype.process = function (state) {
  var i, l, rules;

  rules = this.ruler.getRules('');

  for (i = 0, l = rules.length; i < l; i++) {
    rules[i](state);
  }
};

Core.prototype.State = __webpack_require__(75);


module.exports = Core;


/***/ }),
/* 69 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Normalize input string




var NEWLINES_RE  = /\r[\n\u0085]?|[\u2424\u2028\u0085]/g;
var NULL_RE      = /\u0000/g;


module.exports = function inline(state) {
  var str;

  // Normalize newlines
  str = state.src.replace(NEWLINES_RE, '\n');

  // Replace NULL characters
  str = str.replace(NULL_RE, '\uFFFD');

  state.src = str;
};


/***/ }),
/* 70 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";



module.exports = function block(state) {
  var token;

  if (state.inlineMode) {
    token          = new state.Token('inline', '', 0);
    token.content  = state.src;
    token.map      = [ 0, 1 ];
    token.children = [];
    state.tokens.push(token);
  } else {
    state.md.block.parse(state.src, state.md, state.env, state.tokens);
  }
};


/***/ }),
/* 71 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function inline(state) {
  var tokens = state.tokens, tok, i, l;

  // Parse inlines
  for (i = 0, l = tokens.length; i < l; i++) {
    tok = tokens[i];
    if (tok.type === 'inline') {
      state.md.inline.parse(tok.content, state.md, state.env, tok.children);
    }
  }
};


/***/ }),
/* 72 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Replace link-like texts with link nodes.
//
// Currently restricted by `md.validateLink()` to http/https/ftp
//



var arrayReplaceAt = __webpack_require__(0).arrayReplaceAt;


function isLinkOpen(str) {
  return /^<a[>\s]/i.test(str);
}
function isLinkClose(str) {
  return /^<\/a\s*>/i.test(str);
}


module.exports = function linkify(state) {
  var i, j, l, tokens, token, currentToken, nodes, ln, text, pos, lastPos,
      level, htmlLinkLevel, url, fullUrl, urlText,
      blockTokens = state.tokens,
      links;

  if (!state.md.options.linkify) { return; }

  for (j = 0, l = blockTokens.length; j < l; j++) {
    if (blockTokens[j].type !== 'inline' ||
        !state.md.linkify.pretest(blockTokens[j].content)) {
      continue;
    }

    tokens = blockTokens[j].children;

    htmlLinkLevel = 0;

    // We scan from the end, to keep position when new tags added.
    // Use reversed logic in links start/end match
    for (i = tokens.length - 1; i >= 0; i--) {
      currentToken = tokens[i];

      // Skip content of markdown links
      if (currentToken.type === 'link_close') {
        i--;
        while (tokens[i].level !== currentToken.level && tokens[i].type !== 'link_open') {
          i--;
        }
        continue;
      }

      // Skip content of html tag links
      if (currentToken.type === 'html_inline') {
        if (isLinkOpen(currentToken.content) && htmlLinkLevel > 0) {
          htmlLinkLevel--;
        }
        if (isLinkClose(currentToken.content)) {
          htmlLinkLevel++;
        }
      }
      if (htmlLinkLevel > 0) { continue; }

      if (currentToken.type === 'text' && state.md.linkify.test(currentToken.content)) {

        text = currentToken.content;
        links = state.md.linkify.match(text);

        // Now split string to nodes
        nodes = [];
        level = currentToken.level;
        lastPos = 0;

        for (ln = 0; ln < links.length; ln++) {

          url = links[ln].url;
          fullUrl = state.md.normalizeLink(url);
          if (!state.md.validateLink(fullUrl)) { continue; }

          urlText = links[ln].text;

          // Linkifier might send raw hostnames like "example.com", where url
          // starts with domain name. So we prepend http:// in those cases,
          // and remove it afterwards.
          //
          if (!links[ln].schema) {
            urlText = state.md.normalizeLinkText('http://' + urlText).replace(/^http:\/\//, '');
          } else if (links[ln].schema === 'mailto:' && !/^mailto:/i.test(urlText)) {
            urlText = state.md.normalizeLinkText('mailto:' + urlText).replace(/^mailto:/, '');
          } else {
            urlText = state.md.normalizeLinkText(urlText);
          }

          pos = links[ln].index;

          if (pos > lastPos) {
            token         = new state.Token('text', '', 0);
            token.content = text.slice(lastPos, pos);
            token.level   = level;
            nodes.push(token);
          }

          token         = new state.Token('link_open', 'a', 1);
          token.attrs   = [ [ 'href', fullUrl ] ];
          token.level   = level++;
          token.markup  = 'linkify';
          token.info    = 'auto';
          nodes.push(token);

          token         = new state.Token('text', '', 0);
          token.content = urlText;
          token.level   = level;
          nodes.push(token);

          token         = new state.Token('link_close', 'a', -1);
          token.level   = --level;
          token.markup  = 'linkify';
          token.info    = 'auto';
          nodes.push(token);

          lastPos = links[ln].lastIndex;
        }
        if (lastPos < text.length) {
          token         = new state.Token('text', '', 0);
          token.content = text.slice(lastPos);
          token.level   = level;
          nodes.push(token);
        }

        // replace current node
        blockTokens[j].children = tokens = arrayReplaceAt(tokens, i, nodes);
      }
    }
  }
};


/***/ }),
/* 73 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Simple typographyc replacements
//
// (c) (C) → ©
// (tm) (TM) → ™
// (r) (R) → ®
// +- → ±
// (p) (P) -> §
// ... → … (also ?.... → ?.., !.... → !..)
// ???????? → ???, !!!!! → !!!, `,,` → `,`
// -- → &ndash;, --- → &mdash;
//


// TODO:
// - fractionals 1/2, 1/4, 3/4 -> ½, ¼, ¾
// - miltiplication 2 x 4 -> 2 × 4

var RARE_RE = /\+-|\.\.|\?\?\?\?|!!!!|,,|--/;

// Workaround for phantomjs - need regex without /g flag,
// or root check will fail every second time
var SCOPED_ABBR_TEST_RE = /\((c|tm|r|p)\)/i;

var SCOPED_ABBR_RE = /\((c|tm|r|p)\)/ig;
var SCOPED_ABBR = {
  c: '©',
  r: '®',
  p: '§',
  tm: '™'
};

function replaceFn(match, name) {
  return SCOPED_ABBR[name.toLowerCase()];
}

function replace_scoped(inlineTokens) {
  var i, token, inside_autolink = 0;

  for (i = inlineTokens.length - 1; i >= 0; i--) {
    token = inlineTokens[i];

    if (token.type === 'text' && !inside_autolink) {
      token.content = token.content.replace(SCOPED_ABBR_RE, replaceFn);
    }

    if (token.type === 'link_open' && token.info === 'auto') {
      inside_autolink--;
    }

    if (token.type === 'link_close' && token.info === 'auto') {
      inside_autolink++;
    }
  }
}

function replace_rare(inlineTokens) {
  var i, token, inside_autolink = 0;

  for (i = inlineTokens.length - 1; i >= 0; i--) {
    token = inlineTokens[i];

    if (token.type === 'text' && !inside_autolink) {
      if (RARE_RE.test(token.content)) {
        token.content = token.content
                    .replace(/\+-/g, '±')
                    // .., ..., ....... -> …
                    // but ?..... & !..... -> ?.. & !..
                    .replace(/\.{2,}/g, '…').replace(/([?!])…/g, '$1..')
                    .replace(/([?!]){4,}/g, '$1$1$1').replace(/,{2,}/g, ',')
                    // em-dash
                    .replace(/(^|[^-])---([^-]|$)/mg, '$1\u2014$2')
                    // en-dash
                    .replace(/(^|\s)--(\s|$)/mg, '$1\u2013$2')
                    .replace(/(^|[^-\s])--([^-\s]|$)/mg, '$1\u2013$2');
      }
    }

    if (token.type === 'link_open' && token.info === 'auto') {
      inside_autolink--;
    }

    if (token.type === 'link_close' && token.info === 'auto') {
      inside_autolink++;
    }
  }
}


module.exports = function replace(state) {
  var blkIdx;

  if (!state.md.options.typographer) { return; }

  for (blkIdx = state.tokens.length - 1; blkIdx >= 0; blkIdx--) {

    if (state.tokens[blkIdx].type !== 'inline') { continue; }

    if (SCOPED_ABBR_TEST_RE.test(state.tokens[blkIdx].content)) {
      replace_scoped(state.tokens[blkIdx].children);
    }

    if (RARE_RE.test(state.tokens[blkIdx].content)) {
      replace_rare(state.tokens[blkIdx].children);
    }

  }
};


/***/ }),
/* 74 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Convert straight quotation marks to typographic ones
//



var isWhiteSpace   = __webpack_require__(0).isWhiteSpace;
var isPunctChar    = __webpack_require__(0).isPunctChar;
var isMdAsciiPunct = __webpack_require__(0).isMdAsciiPunct;

var QUOTE_TEST_RE = /['"]/;
var QUOTE_RE = /['"]/g;
var APOSTROPHE = '\u2019'; /* ’ */


function replaceAt(str, index, ch) {
  return str.substr(0, index) + ch + str.substr(index + 1);
}

function process_inlines(tokens, state) {
  var i, token, text, t, pos, max, thisLevel, item, lastChar, nextChar,
      isLastPunctChar, isNextPunctChar, isLastWhiteSpace, isNextWhiteSpace,
      canOpen, canClose, j, isSingle, stack, openQuote, closeQuote;

  stack = [];

  for (i = 0; i < tokens.length; i++) {
    token = tokens[i];

    thisLevel = tokens[i].level;

    for (j = stack.length - 1; j >= 0; j--) {
      if (stack[j].level <= thisLevel) { break; }
    }
    stack.length = j + 1;

    if (token.type !== 'text') { continue; }

    text = token.content;
    pos = 0;
    max = text.length;

    /*eslint no-labels:0,block-scoped-var:0*/
    OUTER:
    while (pos < max) {
      QUOTE_RE.lastIndex = pos;
      t = QUOTE_RE.exec(text);
      if (!t) { break; }

      canOpen = canClose = true;
      pos = t.index + 1;
      isSingle = (t[0] === "'");

      // Find previous character,
      // default to space if it's the beginning of the line
      //
      lastChar = 0x20;

      if (t.index - 1 >= 0) {
        lastChar = text.charCodeAt(t.index - 1);
      } else {
        for (j = i - 1; j >= 0; j--) {
          if (tokens[j].type !== 'text') { continue; }

          lastChar = tokens[j].content.charCodeAt(tokens[j].content.length - 1);
          break;
        }
      }

      // Find next character,
      // default to space if it's the end of the line
      //
      nextChar = 0x20;

      if (pos < max) {
        nextChar = text.charCodeAt(pos);
      } else {
        for (j = i + 1; j < tokens.length; j++) {
          if (tokens[j].type !== 'text') { continue; }

          nextChar = tokens[j].content.charCodeAt(0);
          break;
        }
      }

      isLastPunctChar = isMdAsciiPunct(lastChar) || isPunctChar(String.fromCharCode(lastChar));
      isNextPunctChar = isMdAsciiPunct(nextChar) || isPunctChar(String.fromCharCode(nextChar));

      isLastWhiteSpace = isWhiteSpace(lastChar);
      isNextWhiteSpace = isWhiteSpace(nextChar);

      if (isNextWhiteSpace) {
        canOpen = false;
      } else if (isNextPunctChar) {
        if (!(isLastWhiteSpace || isLastPunctChar)) {
          canOpen = false;
        }
      }

      if (isLastWhiteSpace) {
        canClose = false;
      } else if (isLastPunctChar) {
        if (!(isNextWhiteSpace || isNextPunctChar)) {
          canClose = false;
        }
      }

      if (nextChar === 0x22 /* " */ && t[0] === '"') {
        if (lastChar >= 0x30 /* 0 */ && lastChar <= 0x39 /* 9 */) {
          // special case: 1"" - count first quote as an inch
          canClose = canOpen = false;
        }
      }

      if (canOpen && canClose) {
        // treat this as the middle of the word
        canOpen = false;
        canClose = isNextPunctChar;
      }

      if (!canOpen && !canClose) {
        // middle of word
        if (isSingle) {
          token.content = replaceAt(token.content, t.index, APOSTROPHE);
        }
        continue;
      }

      if (canClose) {
        // this could be a closing quote, rewind the stack to get a match
        for (j = stack.length - 1; j >= 0; j--) {
          item = stack[j];
          if (stack[j].level < thisLevel) { break; }
          if (item.single === isSingle && stack[j].level === thisLevel) {
            item = stack[j];

            if (isSingle) {
              openQuote = state.md.options.quotes[2];
              closeQuote = state.md.options.quotes[3];
            } else {
              openQuote = state.md.options.quotes[0];
              closeQuote = state.md.options.quotes[1];
            }

            // replace token.content *before* tokens[item.token].content,
            // because, if they are pointing at the same token, replaceAt
            // could mess up indices when quote length != 1
            token.content = replaceAt(token.content, t.index, closeQuote);
            tokens[item.token].content = replaceAt(
              tokens[item.token].content, item.pos, openQuote);

            pos += closeQuote.length - 1;
            if (item.token === i) { pos += openQuote.length - 1; }

            text = token.content;
            max = text.length;

            stack.length = j;
            continue OUTER;
          }
        }
      }

      if (canOpen) {
        stack.push({
          token: i,
          pos: t.index,
          single: isSingle,
          level: thisLevel
        });
      } else if (canClose && isSingle) {
        token.content = replaceAt(token.content, t.index, APOSTROPHE);
      }
    }
  }
}


module.exports = function smartquotes(state) {
  /*eslint max-depth:0*/
  var blkIdx;

  if (!state.md.options.typographer) { return; }

  for (blkIdx = state.tokens.length - 1; blkIdx >= 0; blkIdx--) {

    if (state.tokens[blkIdx].type !== 'inline' ||
        !QUOTE_TEST_RE.test(state.tokens[blkIdx].content)) {
      continue;
    }

    process_inlines(state.tokens[blkIdx].children, state);
  }
};


/***/ }),
/* 75 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Core state object
//


var Token = __webpack_require__(17);


function StateCore(src, md, env) {
  this.src = src;
  this.env = env;
  this.tokens = [];
  this.inlineMode = false;
  this.md = md; // link to parser instance
}

// re-export Token class to use in core rules
StateCore.prototype.Token = Token;


module.exports = StateCore;


/***/ }),
/* 76 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/** internal
 * class ParserBlock
 *
 * Block-level tokenizer.
 **/



var Ruler           = __webpack_require__(16);


var _rules = [
  // First 2 params - rule name & source. Secondary array - list of rules,
  // which can be terminated by this one.
  [ 'table',      __webpack_require__(77),      [ 'paragraph', 'reference' ] ],
  [ 'code',       __webpack_require__(78) ],
  [ 'fence',      __webpack_require__(79),      [ 'paragraph', 'reference', 'blockquote', 'list' ] ],
  [ 'blockquote', __webpack_require__(80), [ 'paragraph', 'reference', 'blockquote', 'list' ] ],
  [ 'hr',         __webpack_require__(81),         [ 'paragraph', 'reference', 'blockquote', 'list' ] ],
  [ 'list',       __webpack_require__(82),       [ 'paragraph', 'reference', 'blockquote' ] ],
  [ 'reference',  __webpack_require__(83) ],
  [ 'heading',    __webpack_require__(84),    [ 'paragraph', 'reference', 'blockquote' ] ],
  [ 'lheading',   __webpack_require__(85) ],
  [ 'html_block', __webpack_require__(86), [ 'paragraph', 'reference', 'blockquote' ] ],
  [ 'paragraph',  __webpack_require__(88) ]
];


/**
 * new ParserBlock()
 **/
function ParserBlock() {
  /**
   * ParserBlock#ruler -> Ruler
   *
   * [[Ruler]] instance. Keep configuration of block rules.
   **/
  this.ruler = new Ruler();

  for (var i = 0; i < _rules.length; i++) {
    this.ruler.push(_rules[i][0], _rules[i][1], { alt: (_rules[i][2] || []).slice() });
  }
}


// Generate tokens for input range
//
ParserBlock.prototype.tokenize = function (state, startLine, endLine) {
  var ok, i,
      rules = this.ruler.getRules(''),
      len = rules.length,
      line = startLine,
      hasEmptyLines = false,
      maxNesting = state.md.options.maxNesting;

  while (line < endLine) {
    state.line = line = state.skipEmptyLines(line);
    if (line >= endLine) { break; }

    // Termination condition for nested calls.
    // Nested calls currently used for blockquotes & lists
    if (state.sCount[line] < state.blkIndent) { break; }

    // If nesting level exceeded - skip tail to the end. That's not ordinary
    // situation and we should not care about content.
    if (state.level >= maxNesting) {
      state.line = endLine;
      break;
    }

    // Try all possible rules.
    // On success, rule should:
    //
    // - update `state.line`
    // - update `state.tokens`
    // - return true

    for (i = 0; i < len; i++) {
      ok = rules[i](state, line, endLine, false);
      if (ok) { break; }
    }

    // set state.tight if we had an empty line before current tag
    // i.e. latest empty line should not count
    state.tight = !hasEmptyLines;

    // paragraph might "eat" one newline after it in nested lists
    if (state.isEmpty(state.line - 1)) {
      hasEmptyLines = true;
    }

    line = state.line;

    if (line < endLine && state.isEmpty(line)) {
      hasEmptyLines = true;
      line++;
      state.line = line;
    }
  }
};


/**
 * ParserBlock.parse(str, md, env, outTokens)
 *
 * Process input string and push block tokens into `outTokens`
 **/
ParserBlock.prototype.parse = function (src, md, env, outTokens) {
  var state;

  if (!src) { return; }

  state = new this.State(src, md, env, outTokens);

  this.tokenize(state, state.line, state.lineMax);
};


ParserBlock.prototype.State = __webpack_require__(89);


module.exports = ParserBlock;


/***/ }),
/* 77 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// GFM table, non-standard



var isSpace = __webpack_require__(0).isSpace;


function getLine(state, line) {
  var pos = state.bMarks[line] + state.blkIndent,
      max = state.eMarks[line];

  return state.src.substr(pos, max - pos);
}

function escapedSplit(str) {
  var result = [],
      pos = 0,
      max = str.length,
      ch,
      escapes = 0,
      lastPos = 0,
      backTicked = false,
      lastBackTick = 0;

  ch  = str.charCodeAt(pos);

  while (pos < max) {
    if (ch === 0x60/* ` */) {
      if (backTicked) {
        // make \` close code sequence, but not open it;
        // the reason is: `\` is correct code block
        backTicked = false;
        lastBackTick = pos;
      } else if (escapes % 2 === 0) {
        backTicked = true;
        lastBackTick = pos;
      }
    } else if (ch === 0x7c/* | */ && (escapes % 2 === 0) && !backTicked) {
      result.push(str.substring(lastPos, pos));
      lastPos = pos + 1;
    }

    if (ch === 0x5c/* \ */) {
      escapes++;
    } else {
      escapes = 0;
    }

    pos++;

    // If there was an un-closed backtick, go back to just after
    // the last backtick, but as if it was a normal character
    if (pos === max && backTicked) {
      backTicked = false;
      pos = lastBackTick + 1;
    }

    ch = str.charCodeAt(pos);
  }

  result.push(str.substring(lastPos));

  return result;
}


module.exports = function table(state, startLine, endLine, silent) {
  var ch, lineText, pos, i, nextLine, columns, columnCount, token,
      aligns, t, tableLines, tbodyLines;

  // should have at least two lines
  if (startLine + 2 > endLine) { return false; }

  nextLine = startLine + 1;

  if (state.sCount[nextLine] < state.blkIndent) { return false; }

  // if it's indented more than 3 spaces, it should be a code block
  if (state.sCount[nextLine] - state.blkIndent >= 4) { return false; }

  // first character of the second line should be '|', '-', ':',
  // and no other characters are allowed but spaces;
  // basically, this is the equivalent of /^[-:|][-:|\s]*$/ regexp

  pos = state.bMarks[nextLine] + state.tShift[nextLine];
  if (pos >= state.eMarks[nextLine]) { return false; }

  ch = state.src.charCodeAt(pos++);
  if (ch !== 0x7C/* | */ && ch !== 0x2D/* - */ && ch !== 0x3A/* : */) { return false; }

  while (pos < state.eMarks[nextLine]) {
    ch = state.src.charCodeAt(pos);

    if (ch !== 0x7C/* | */ && ch !== 0x2D/* - */ && ch !== 0x3A/* : */ && !isSpace(ch)) { return false; }

    pos++;
  }

  lineText = getLine(state, startLine + 1);

  columns = lineText.split('|');
  aligns = [];
  for (i = 0; i < columns.length; i++) {
    t = columns[i].trim();
    if (!t) {
      // allow empty columns before and after table, but not in between columns;
      // e.g. allow ` |---| `, disallow ` ---||--- `
      if (i === 0 || i === columns.length - 1) {
        continue;
      } else {
        return false;
      }
    }

    if (!/^:?-+:?$/.test(t)) { return false; }
    if (t.charCodeAt(t.length - 1) === 0x3A/* : */) {
      aligns.push(t.charCodeAt(0) === 0x3A/* : */ ? 'center' : 'right');
    } else if (t.charCodeAt(0) === 0x3A/* : */) {
      aligns.push('left');
    } else {
      aligns.push('');
    }
  }

  lineText = getLine(state, startLine).trim();
  if (lineText.indexOf('|') === -1) { return false; }
  if (state.sCount[startLine] - state.blkIndent >= 4) { return false; }
  columns = escapedSplit(lineText.replace(/^\||\|$/g, ''));

  // header row will define an amount of columns in the entire table,
  // and align row shouldn't be smaller than that (the rest of the rows can)
  columnCount = columns.length;
  if (columnCount > aligns.length) { return false; }

  if (silent) { return true; }

  token     = state.push('table_open', 'table', 1);
  token.map = tableLines = [ startLine, 0 ];

  token     = state.push('thead_open', 'thead', 1);
  token.map = [ startLine, startLine + 1 ];

  token     = state.push('tr_open', 'tr', 1);
  token.map = [ startLine, startLine + 1 ];

  for (i = 0; i < columns.length; i++) {
    token          = state.push('th_open', 'th', 1);
    token.map      = [ startLine, startLine + 1 ];
    if (aligns[i]) {
      token.attrs  = [ [ 'style', 'text-align:' + aligns[i] ] ];
    }

    token          = state.push('inline', '', 0);
    token.content  = columns[i].trim();
    token.map      = [ startLine, startLine + 1 ];
    token.children = [];

    token          = state.push('th_close', 'th', -1);
  }

  token     = state.push('tr_close', 'tr', -1);
  token     = state.push('thead_close', 'thead', -1);

  token     = state.push('tbody_open', 'tbody', 1);
  token.map = tbodyLines = [ startLine + 2, 0 ];

  for (nextLine = startLine + 2; nextLine < endLine; nextLine++) {
    if (state.sCount[nextLine] < state.blkIndent) { break; }

    lineText = getLine(state, nextLine).trim();
    if (lineText.indexOf('|') === -1) { break; }
    if (state.sCount[nextLine] - state.blkIndent >= 4) { break; }
    columns = escapedSplit(lineText.replace(/^\||\|$/g, ''));

    token = state.push('tr_open', 'tr', 1);
    for (i = 0; i < columnCount; i++) {
      token          = state.push('td_open', 'td', 1);
      if (aligns[i]) {
        token.attrs  = [ [ 'style', 'text-align:' + aligns[i] ] ];
      }

      token          = state.push('inline', '', 0);
      token.content  = columns[i] ? columns[i].trim() : '';
      token.children = [];

      token          = state.push('td_close', 'td', -1);
    }
    token = state.push('tr_close', 'tr', -1);
  }
  token = state.push('tbody_close', 'tbody', -1);
  token = state.push('table_close', 'table', -1);

  tableLines[1] = tbodyLines[1] = nextLine;
  state.line = nextLine;
  return true;
};


/***/ }),
/* 78 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Code block (4 spaces padded)




module.exports = function code(state, startLine, endLine/*, silent*/) {
  var nextLine, last, token;

  if (state.sCount[startLine] - state.blkIndent < 4) { return false; }

  last = nextLine = startLine + 1;

  while (nextLine < endLine) {
    if (state.isEmpty(nextLine)) {
      nextLine++;
      continue;
    }

    if (state.sCount[nextLine] - state.blkIndent >= 4) {
      nextLine++;
      last = nextLine;
      continue;
    }
    break;
  }

  state.line = last;

  token         = state.push('code_block', 'code', 0);
  token.content = state.getLines(startLine, last, 4 + state.blkIndent, true);
  token.map     = [ startLine, state.line ];

  return true;
};


/***/ }),
/* 79 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// fences (``` lang, ~~~ lang)




module.exports = function fence(state, startLine, endLine, silent) {
  var marker, len, params, nextLine, mem, token, markup,
      haveEndMarker = false,
      pos = state.bMarks[startLine] + state.tShift[startLine],
      max = state.eMarks[startLine];

  // if it's indented more than 3 spaces, it should be a code block
  if (state.sCount[startLine] - state.blkIndent >= 4) { return false; }

  if (pos + 3 > max) { return false; }

  marker = state.src.charCodeAt(pos);

  if (marker !== 0x7E/* ~ */ && marker !== 0x60 /* ` */) {
    return false;
  }

  // scan marker length
  mem = pos;
  pos = state.skipChars(pos, marker);

  len = pos - mem;

  if (len < 3) { return false; }

  markup = state.src.slice(mem, pos);
  params = state.src.slice(pos, max);

  if (params.indexOf(String.fromCharCode(marker)) >= 0) { return false; }

  // Since start is found, we can report success here in validation mode
  if (silent) { return true; }

  // search end of block
  nextLine = startLine;

  for (;;) {
    nextLine++;
    if (nextLine >= endLine) {
      // unclosed block should be autoclosed by end of document.
      // also block seems to be autoclosed by end of parent
      break;
    }

    pos = mem = state.bMarks[nextLine] + state.tShift[nextLine];
    max = state.eMarks[nextLine];

    if (pos < max && state.sCount[nextLine] < state.blkIndent) {
      // non-empty line with negative indent should stop the list:
      // - ```
      //  test
      break;
    }

    if (state.src.charCodeAt(pos) !== marker) { continue; }

    if (state.sCount[nextLine] - state.blkIndent >= 4) {
      // closing fence should be indented less than 4 spaces
      continue;
    }

    pos = state.skipChars(pos, marker);

    // closing code fence must be at least as long as the opening one
    if (pos - mem < len) { continue; }

    // make sure tail has spaces only
    pos = state.skipSpaces(pos);

    if (pos < max) { continue; }

    haveEndMarker = true;
    // found!
    break;
  }

  // If a fence has heading spaces, they should be removed from its inner block
  len = state.sCount[startLine];

  state.line = nextLine + (haveEndMarker ? 1 : 0);

  token         = state.push('fence', 'code', 0);
  token.info    = params;
  token.content = state.getLines(startLine + 1, nextLine, len, true);
  token.markup  = markup;
  token.map     = [ startLine, state.line ];

  return true;
};


/***/ }),
/* 80 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Block quotes



var isSpace = __webpack_require__(0).isSpace;


module.exports = function blockquote(state, startLine, endLine, silent) {
  var adjustTab,
      ch,
      i,
      initial,
      l,
      lastLineEmpty,
      lines,
      nextLine,
      offset,
      oldBMarks,
      oldBSCount,
      oldIndent,
      oldParentType,
      oldSCount,
      oldTShift,
      spaceAfterMarker,
      terminate,
      terminatorRules,
      token,
      wasOutdented,
      oldLineMax = state.lineMax,
      pos = state.bMarks[startLine] + state.tShift[startLine],
      max = state.eMarks[startLine];

  // if it's indented more than 3 spaces, it should be a code block
  if (state.sCount[startLine] - state.blkIndent >= 4) { return false; }

  // check the block quote marker
  if (state.src.charCodeAt(pos++) !== 0x3E/* > */) { return false; }

  // we know that it's going to be a valid blockquote,
  // so no point trying to find the end of it in silent mode
  if (silent) { return true; }

  // skip spaces after ">" and re-calculate offset
  initial = offset = state.sCount[startLine] + pos - (state.bMarks[startLine] + state.tShift[startLine]);

  // skip one optional space after '>'
  if (state.src.charCodeAt(pos) === 0x20 /* space */) {
    // ' >   test '
    //     ^ -- position start of line here:
    pos++;
    initial++;
    offset++;
    adjustTab = false;
    spaceAfterMarker = true;
  } else if (state.src.charCodeAt(pos) === 0x09 /* tab */) {
    spaceAfterMarker = true;

    if ((state.bsCount[startLine] + offset) % 4 === 3) {
      // '  >\t  test '
      //       ^ -- position start of line here (tab has width===1)
      pos++;
      initial++;
      offset++;
      adjustTab = false;
    } else {
      // ' >\t  test '
      //    ^ -- position start of line here + shift bsCount slightly
      //         to make extra space appear
      adjustTab = true;
    }
  } else {
    spaceAfterMarker = false;
  }

  oldBMarks = [ state.bMarks[startLine] ];
  state.bMarks[startLine] = pos;

  while (pos < max) {
    ch = state.src.charCodeAt(pos);

    if (isSpace(ch)) {
      if (ch === 0x09) {
        offset += 4 - (offset + state.bsCount[startLine] + (adjustTab ? 1 : 0)) % 4;
      } else {
        offset++;
      }
    } else {
      break;
    }

    pos++;
  }

  oldBSCount = [ state.bsCount[startLine] ];
  state.bsCount[startLine] = state.sCount[startLine] + 1 + (spaceAfterMarker ? 1 : 0);

  lastLineEmpty = pos >= max;

  oldSCount = [ state.sCount[startLine] ];
  state.sCount[startLine] = offset - initial;

  oldTShift = [ state.tShift[startLine] ];
  state.tShift[startLine] = pos - state.bMarks[startLine];

  terminatorRules = state.md.block.ruler.getRules('blockquote');

  oldParentType = state.parentType;
  state.parentType = 'blockquote';
  wasOutdented = false;

  // Search the end of the block
  //
  // Block ends with either:
  //  1. an empty line outside:
  //     ```
  //     > test
  //
  //     ```
  //  2. an empty line inside:
  //     ```
  //     >
  //     test
  //     ```
  //  3. another tag:
  //     ```
  //     > test
  //      - - -
  //     ```
  for (nextLine = startLine + 1; nextLine < endLine; nextLine++) {
    // check if it's outdented, i.e. it's inside list item and indented
    // less than said list item:
    //
    // ```
    // 1. anything
    //    > current blockquote
    // 2. checking this line
    // ```
    if (state.sCount[nextLine] < state.blkIndent) wasOutdented = true;

    pos = state.bMarks[nextLine] + state.tShift[nextLine];
    max = state.eMarks[nextLine];

    if (pos >= max) {
      // Case 1: line is not inside the blockquote, and this line is empty.
      break;
    }

    if (state.src.charCodeAt(pos++) === 0x3E/* > */ && !wasOutdented) {
      // This line is inside the blockquote.

      // skip spaces after ">" and re-calculate offset
      initial = offset = state.sCount[nextLine] + pos - (state.bMarks[nextLine] + state.tShift[nextLine]);

      // skip one optional space after '>'
      if (state.src.charCodeAt(pos) === 0x20 /* space */) {
        // ' >   test '
        //     ^ -- position start of line here:
        pos++;
        initial++;
        offset++;
        adjustTab = false;
        spaceAfterMarker = true;
      } else if (state.src.charCodeAt(pos) === 0x09 /* tab */) {
        spaceAfterMarker = true;

        if ((state.bsCount[nextLine] + offset) % 4 === 3) {
          // '  >\t  test '
          //       ^ -- position start of line here (tab has width===1)
          pos++;
          initial++;
          offset++;
          adjustTab = false;
        } else {
          // ' >\t  test '
          //    ^ -- position start of line here + shift bsCount slightly
          //         to make extra space appear
          adjustTab = true;
        }
      } else {
        spaceAfterMarker = false;
      }

      oldBMarks.push(state.bMarks[nextLine]);
      state.bMarks[nextLine] = pos;

      while (pos < max) {
        ch = state.src.charCodeAt(pos);

        if (isSpace(ch)) {
          if (ch === 0x09) {
            offset += 4 - (offset + state.bsCount[nextLine] + (adjustTab ? 1 : 0)) % 4;
          } else {
            offset++;
          }
        } else {
          break;
        }

        pos++;
      }

      lastLineEmpty = pos >= max;

      oldBSCount.push(state.bsCount[nextLine]);
      state.bsCount[nextLine] = state.sCount[nextLine] + 1 + (spaceAfterMarker ? 1 : 0);

      oldSCount.push(state.sCount[nextLine]);
      state.sCount[nextLine] = offset - initial;

      oldTShift.push(state.tShift[nextLine]);
      state.tShift[nextLine] = pos - state.bMarks[nextLine];
      continue;
    }

    // Case 2: line is not inside the blockquote, and the last line was empty.
    if (lastLineEmpty) { break; }

    // Case 3: another tag found.
    terminate = false;
    for (i = 0, l = terminatorRules.length; i < l; i++) {
      if (terminatorRules[i](state, nextLine, endLine, true)) {
        terminate = true;
        break;
      }
    }

    if (terminate) {
      // Quirk to enforce "hard termination mode" for paragraphs;
      // normally if you call `tokenize(state, startLine, nextLine)`,
      // paragraphs will look below nextLine for paragraph continuation,
      // but if blockquote is terminated by another tag, they shouldn't
      state.lineMax = nextLine;

      if (state.blkIndent !== 0) {
        // state.blkIndent was non-zero, we now set it to zero,
        // so we need to re-calculate all offsets to appear as
        // if indent wasn't changed
        oldBMarks.push(state.bMarks[nextLine]);
        oldBSCount.push(state.bsCount[nextLine]);
        oldTShift.push(state.tShift[nextLine]);
        oldSCount.push(state.sCount[nextLine]);
        state.sCount[nextLine] -= state.blkIndent;
      }

      break;
    }

    oldBMarks.push(state.bMarks[nextLine]);
    oldBSCount.push(state.bsCount[nextLine]);
    oldTShift.push(state.tShift[nextLine]);
    oldSCount.push(state.sCount[nextLine]);

    // A negative indentation means that this is a paragraph continuation
    //
    state.sCount[nextLine] = -1;
  }

  oldIndent = state.blkIndent;
  state.blkIndent = 0;

  token        = state.push('blockquote_open', 'blockquote', 1);
  token.markup = '>';
  token.map    = lines = [ startLine, 0 ];

  state.md.block.tokenize(state, startLine, nextLine);

  token        = state.push('blockquote_close', 'blockquote', -1);
  token.markup = '>';

  state.lineMax = oldLineMax;
  state.parentType = oldParentType;
  lines[1] = state.line;

  // Restore original tShift; this might not be necessary since the parser
  // has already been here, but just to make sure we can do that.
  for (i = 0; i < oldTShift.length; i++) {
    state.bMarks[i + startLine] = oldBMarks[i];
    state.tShift[i + startLine] = oldTShift[i];
    state.sCount[i + startLine] = oldSCount[i];
    state.bsCount[i + startLine] = oldBSCount[i];
  }
  state.blkIndent = oldIndent;

  return true;
};


/***/ }),
/* 81 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Horizontal rule



var isSpace = __webpack_require__(0).isSpace;


module.exports = function hr(state, startLine, endLine, silent) {
  var marker, cnt, ch, token,
      pos = state.bMarks[startLine] + state.tShift[startLine],
      max = state.eMarks[startLine];

  // if it's indented more than 3 spaces, it should be a code block
  if (state.sCount[startLine] - state.blkIndent >= 4) { return false; }

  marker = state.src.charCodeAt(pos++);

  // Check hr marker
  if (marker !== 0x2A/* * */ &&
      marker !== 0x2D/* - */ &&
      marker !== 0x5F/* _ */) {
    return false;
  }

  // markers can be mixed with spaces, but there should be at least 3 of them

  cnt = 1;
  while (pos < max) {
    ch = state.src.charCodeAt(pos++);
    if (ch !== marker && !isSpace(ch)) { return false; }
    if (ch === marker) { cnt++; }
  }

  if (cnt < 3) { return false; }

  if (silent) { return true; }

  state.line = startLine + 1;

  token        = state.push('hr', 'hr', 0);
  token.map    = [ startLine, state.line ];
  token.markup = Array(cnt + 1).join(String.fromCharCode(marker));

  return true;
};


/***/ }),
/* 82 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Lists



var isSpace = __webpack_require__(0).isSpace;


// Search `[-+*][\n ]`, returns next pos after marker on success
// or -1 on fail.
function skipBulletListMarker(state, startLine) {
  var marker, pos, max, ch;

  pos = state.bMarks[startLine] + state.tShift[startLine];
  max = state.eMarks[startLine];

  marker = state.src.charCodeAt(pos++);
  // Check bullet
  if (marker !== 0x2A/* * */ &&
      marker !== 0x2D/* - */ &&
      marker !== 0x2B/* + */) {
    return -1;
  }

  if (pos < max) {
    ch = state.src.charCodeAt(pos);

    if (!isSpace(ch)) {
      // " -test " - is not a list item
      return -1;
    }
  }

  return pos;
}

// Search `\d+[.)][\n ]`, returns next pos after marker on success
// or -1 on fail.
function skipOrderedListMarker(state, startLine) {
  var ch,
      start = state.bMarks[startLine] + state.tShift[startLine],
      pos = start,
      max = state.eMarks[startLine];

  // List marker should have at least 2 chars (digit + dot)
  if (pos + 1 >= max) { return -1; }

  ch = state.src.charCodeAt(pos++);

  if (ch < 0x30/* 0 */ || ch > 0x39/* 9 */) { return -1; }

  for (;;) {
    // EOL -> fail
    if (pos >= max) { return -1; }

    ch = state.src.charCodeAt(pos++);

    if (ch >= 0x30/* 0 */ && ch <= 0x39/* 9 */) {

      // List marker should have no more than 9 digits
      // (prevents integer overflow in browsers)
      if (pos - start >= 10) { return -1; }

      continue;
    }

    // found valid marker
    if (ch === 0x29/* ) */ || ch === 0x2e/* . */) {
      break;
    }

    return -1;
  }


  if (pos < max) {
    ch = state.src.charCodeAt(pos);

    if (!isSpace(ch)) {
      // " 1.test " - is not a list item
      return -1;
    }
  }
  return pos;
}

function markTightParagraphs(state, idx) {
  var i, l,
      level = state.level + 2;

  for (i = idx + 2, l = state.tokens.length - 2; i < l; i++) {
    if (state.tokens[i].level === level && state.tokens[i].type === 'paragraph_open') {
      state.tokens[i + 2].hidden = true;
      state.tokens[i].hidden = true;
      i += 2;
    }
  }
}


module.exports = function list(state, startLine, endLine, silent) {
  var ch,
      contentStart,
      i,
      indent,
      indentAfterMarker,
      initial,
      isOrdered,
      itemLines,
      l,
      listLines,
      listTokIdx,
      markerCharCode,
      markerValue,
      max,
      nextLine,
      offset,
      oldIndent,
      oldLIndent,
      oldParentType,
      oldTShift,
      oldTight,
      pos,
      posAfterMarker,
      prevEmptyEnd,
      start,
      terminate,
      terminatorRules,
      token,
      isTerminatingParagraph = false,
      tight = true;

  // if it's indented more than 3 spaces, it should be a code block
  if (state.sCount[startLine] - state.blkIndent >= 4) { return false; }

  // limit conditions when list can interrupt
  // a paragraph (validation mode only)
  if (silent && state.parentType === 'paragraph') {
    // Next list item should still terminate previous list item;
    //
    // This code can fail if plugins use blkIndent as well as lists,
    // but I hope the spec gets fixed long before that happens.
    //
    if (state.tShift[startLine] >= state.blkIndent) {
      isTerminatingParagraph = true;
    }
  }

  // Detect list type and position after marker
  if ((posAfterMarker = skipOrderedListMarker(state, startLine)) >= 0) {
    isOrdered = true;
    start = state.bMarks[startLine] + state.tShift[startLine];
    markerValue = Number(state.src.substr(start, posAfterMarker - start - 1));

    // If we're starting a new ordered list right after
    // a paragraph, it should start with 1.
    if (isTerminatingParagraph && markerValue !== 1) return false;

  } else if ((posAfterMarker = skipBulletListMarker(state, startLine)) >= 0) {
    isOrdered = false;

  } else {
    return false;
  }

  // If we're starting a new unordered list right after
  // a paragraph, first line should not be empty.
  if (isTerminatingParagraph) {
    if (state.skipSpaces(posAfterMarker) >= state.eMarks[startLine]) return false;
  }

  // We should terminate list on style change. Remember first one to compare.
  markerCharCode = state.src.charCodeAt(posAfterMarker - 1);

  // For validation mode we can terminate immediately
  if (silent) { return true; }

  // Start list
  listTokIdx = state.tokens.length;

  if (isOrdered) {
    token       = state.push('ordered_list_open', 'ol', 1);
    if (markerValue !== 1) {
      token.attrs = [ [ 'start', markerValue ] ];
    }

  } else {
    token       = state.push('bullet_list_open', 'ul', 1);
  }

  token.map    = listLines = [ startLine, 0 ];
  token.markup = String.fromCharCode(markerCharCode);

  //
  // Iterate list items
  //

  nextLine = startLine;
  prevEmptyEnd = false;
  terminatorRules = state.md.block.ruler.getRules('list');

  oldParentType = state.parentType;
  state.parentType = 'list';

  while (nextLine < endLine) {
    pos = posAfterMarker;
    max = state.eMarks[nextLine];

    initial = offset = state.sCount[nextLine] + posAfterMarker - (state.bMarks[startLine] + state.tShift[startLine]);

    while (pos < max) {
      ch = state.src.charCodeAt(pos);

      if (ch === 0x09) {
        offset += 4 - (offset + state.bsCount[nextLine]) % 4;
      } else if (ch === 0x20) {
        offset++;
      } else {
        break;
      }

      pos++;
    }

    contentStart = pos;

    if (contentStart >= max) {
      // trimming space in "-    \n  3" case, indent is 1 here
      indentAfterMarker = 1;
    } else {
      indentAfterMarker = offset - initial;
    }

    // If we have more than 4 spaces, the indent is 1
    // (the rest is just indented code block)
    if (indentAfterMarker > 4) { indentAfterMarker = 1; }

    // "  -  test"
    //  ^^^^^ - calculating total length of this thing
    indent = initial + indentAfterMarker;

    // Run subparser & write tokens
    token        = state.push('list_item_open', 'li', 1);
    token.markup = String.fromCharCode(markerCharCode);
    token.map    = itemLines = [ startLine, 0 ];

    oldIndent = state.blkIndent;
    oldTight = state.tight;
    oldTShift = state.tShift[startLine];
    oldLIndent = state.sCount[startLine];
    state.blkIndent = indent;
    state.tight = true;
    state.tShift[startLine] = contentStart - state.bMarks[startLine];
    state.sCount[startLine] = offset;

    if (contentStart >= max && state.isEmpty(startLine + 1)) {
      // workaround for this case
      // (list item is empty, list terminates before "foo"):
      // ~~~~~~~~
      //   -
      //
      //     foo
      // ~~~~~~~~
      state.line = Math.min(state.line + 2, endLine);
    } else {
      state.md.block.tokenize(state, startLine, endLine, true);
    }

    // If any of list item is tight, mark list as tight
    if (!state.tight || prevEmptyEnd) {
      tight = false;
    }
    // Item become loose if finish with empty line,
    // but we should filter last element, because it means list finish
    prevEmptyEnd = (state.line - startLine) > 1 && state.isEmpty(state.line - 1);

    state.blkIndent = oldIndent;
    state.tShift[startLine] = oldTShift;
    state.sCount[startLine] = oldLIndent;
    state.tight = oldTight;

    token        = state.push('list_item_close', 'li', -1);
    token.markup = String.fromCharCode(markerCharCode);

    nextLine = startLine = state.line;
    itemLines[1] = nextLine;
    contentStart = state.bMarks[startLine];

    if (nextLine >= endLine) { break; }

    //
    // Try to check if list is terminated or continued.
    //
    if (state.sCount[nextLine] < state.blkIndent) { break; }

    // fail if terminating block found
    terminate = false;
    for (i = 0, l = terminatorRules.length; i < l; i++) {
      if (terminatorRules[i](state, nextLine, endLine, true)) {
        terminate = true;
        break;
      }
    }
    if (terminate) { break; }

    // fail if list has another type
    if (isOrdered) {
      posAfterMarker = skipOrderedListMarker(state, nextLine);
      if (posAfterMarker < 0) { break; }
    } else {
      posAfterMarker = skipBulletListMarker(state, nextLine);
      if (posAfterMarker < 0) { break; }
    }

    if (markerCharCode !== state.src.charCodeAt(posAfterMarker - 1)) { break; }
  }

  // Finalize list
  if (isOrdered) {
    token = state.push('ordered_list_close', 'ol', -1);
  } else {
    token = state.push('bullet_list_close', 'ul', -1);
  }
  token.markup = String.fromCharCode(markerCharCode);

  listLines[1] = nextLine;
  state.line = nextLine;

  state.parentType = oldParentType;

  // mark paragraphs tight if needed
  if (tight) {
    markTightParagraphs(state, listTokIdx);
  }

  return true;
};


/***/ }),
/* 83 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";



var normalizeReference   = __webpack_require__(0).normalizeReference;
var isSpace              = __webpack_require__(0).isSpace;


module.exports = function reference(state, startLine, _endLine, silent) {
  var ch,
      destEndPos,
      destEndLineNo,
      endLine,
      href,
      i,
      l,
      label,
      labelEnd,
      oldParentType,
      res,
      start,
      str,
      terminate,
      terminatorRules,
      title,
      lines = 0,
      pos = state.bMarks[startLine] + state.tShift[startLine],
      max = state.eMarks[startLine],
      nextLine = startLine + 1;

  // if it's indented more than 3 spaces, it should be a code block
  if (state.sCount[startLine] - state.blkIndent >= 4) { return false; }

  if (state.src.charCodeAt(pos) !== 0x5B/* [ */) { return false; }

  // Simple check to quickly interrupt scan on [link](url) at the start of line.
  // Can be useful on practice: https://github.com/markdown-it/markdown-it/issues/54
  while (++pos < max) {
    if (state.src.charCodeAt(pos) === 0x5D /* ] */ &&
        state.src.charCodeAt(pos - 1) !== 0x5C/* \ */) {
      if (pos + 1 === max) { return false; }
      if (state.src.charCodeAt(pos + 1) !== 0x3A/* : */) { return false; }
      break;
    }
  }

  endLine = state.lineMax;

  // jump line-by-line until empty one or EOF
  terminatorRules = state.md.block.ruler.getRules('reference');

  oldParentType = state.parentType;
  state.parentType = 'reference';

  for (; nextLine < endLine && !state.isEmpty(nextLine); nextLine++) {
    // this would be a code block normally, but after paragraph
    // it's considered a lazy continuation regardless of what's there
    if (state.sCount[nextLine] - state.blkIndent > 3) { continue; }

    // quirk for blockquotes, this line should already be checked by that rule
    if (state.sCount[nextLine] < 0) { continue; }

    // Some tags can terminate paragraph without empty line.
    terminate = false;
    for (i = 0, l = terminatorRules.length; i < l; i++) {
      if (terminatorRules[i](state, nextLine, endLine, true)) {
        terminate = true;
        break;
      }
    }
    if (terminate) { break; }
  }

  str = state.getLines(startLine, nextLine, state.blkIndent, false).trim();
  max = str.length;

  for (pos = 1; pos < max; pos++) {
    ch = str.charCodeAt(pos);
    if (ch === 0x5B /* [ */) {
      return false;
    } else if (ch === 0x5D /* ] */) {
      labelEnd = pos;
      break;
    } else if (ch === 0x0A /* \n */) {
      lines++;
    } else if (ch === 0x5C /* \ */) {
      pos++;
      if (pos < max && str.charCodeAt(pos) === 0x0A) {
        lines++;
      }
    }
  }

  if (labelEnd < 0 || str.charCodeAt(labelEnd + 1) !== 0x3A/* : */) { return false; }

  // [label]:   destination   'title'
  //         ^^^ skip optional whitespace here
  for (pos = labelEnd + 2; pos < max; pos++) {
    ch = str.charCodeAt(pos);
    if (ch === 0x0A) {
      lines++;
    } else if (isSpace(ch)) {
      /*eslint no-empty:0*/
    } else {
      break;
    }
  }

  // [label]:   destination   'title'
  //            ^^^^^^^^^^^ parse this
  res = state.md.helpers.parseLinkDestination(str, pos, max);
  if (!res.ok) { return false; }

  href = state.md.normalizeLink(res.str);
  if (!state.md.validateLink(href)) { return false; }

  pos = res.pos;
  lines += res.lines;

  // save cursor state, we could require to rollback later
  destEndPos = pos;
  destEndLineNo = lines;

  // [label]:   destination   'title'
  //                       ^^^ skipping those spaces
  start = pos;
  for (; pos < max; pos++) {
    ch = str.charCodeAt(pos);
    if (ch === 0x0A) {
      lines++;
    } else if (isSpace(ch)) {
      /*eslint no-empty:0*/
    } else {
      break;
    }
  }

  // [label]:   destination   'title'
  //                          ^^^^^^^ parse this
  res = state.md.helpers.parseLinkTitle(str, pos, max);
  if (pos < max && start !== pos && res.ok) {
    title = res.str;
    pos = res.pos;
    lines += res.lines;
  } else {
    title = '';
    pos = destEndPos;
    lines = destEndLineNo;
  }

  // skip trailing spaces until the rest of the line
  while (pos < max) {
    ch = str.charCodeAt(pos);
    if (!isSpace(ch)) { break; }
    pos++;
  }

  if (pos < max && str.charCodeAt(pos) !== 0x0A) {
    if (title) {
      // garbage at the end of the line after title,
      // but it could still be a valid reference if we roll back
      title = '';
      pos = destEndPos;
      lines = destEndLineNo;
      while (pos < max) {
        ch = str.charCodeAt(pos);
        if (!isSpace(ch)) { break; }
        pos++;
      }
    }
  }

  if (pos < max && str.charCodeAt(pos) !== 0x0A) {
    // garbage at the end of the line
    return false;
  }

  label = normalizeReference(str.slice(1, labelEnd));
  if (!label) {
    // CommonMark 0.20 disallows empty labels
    return false;
  }

  // Reference can not terminate anything. This check is for safety only.
  /*istanbul ignore if*/
  if (silent) { return true; }

  if (typeof state.env.references === 'undefined') {
    state.env.references = {};
  }
  if (typeof state.env.references[label] === 'undefined') {
    state.env.references[label] = { title: title, href: href };
  }

  state.parentType = oldParentType;

  state.line = startLine + lines + 1;
  return true;
};


/***/ }),
/* 84 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// heading (#, ##, ...)



var isSpace = __webpack_require__(0).isSpace;


module.exports = function heading(state, startLine, endLine, silent) {
  var ch, level, tmp, token,
      pos = state.bMarks[startLine] + state.tShift[startLine],
      max = state.eMarks[startLine];

  // if it's indented more than 3 spaces, it should be a code block
  if (state.sCount[startLine] - state.blkIndent >= 4) { return false; }

  ch  = state.src.charCodeAt(pos);

  if (ch !== 0x23/* # */ || pos >= max) { return false; }

  // count heading level
  level = 1;
  ch = state.src.charCodeAt(++pos);
  while (ch === 0x23/* # */ && pos < max && level <= 6) {
    level++;
    ch = state.src.charCodeAt(++pos);
  }

  if (level > 6 || (pos < max && !isSpace(ch))) { return false; }

  if (silent) { return true; }

  // Let's cut tails like '    ###  ' from the end of string

  max = state.skipSpacesBack(max, pos);
  tmp = state.skipCharsBack(max, 0x23, pos); // #
  if (tmp > pos && isSpace(state.src.charCodeAt(tmp - 1))) {
    max = tmp;
  }

  state.line = startLine + 1;

  token        = state.push('heading_open', 'h' + String(level), 1);
  token.markup = '########'.slice(0, level);
  token.map    = [ startLine, state.line ];

  token          = state.push('inline', '', 0);
  token.content  = state.src.slice(pos, max).trim();
  token.map      = [ startLine, state.line ];
  token.children = [];

  token        = state.push('heading_close', 'h' + String(level), -1);
  token.markup = '########'.slice(0, level);

  return true;
};


/***/ }),
/* 85 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// lheading (---, ===)




module.exports = function lheading(state, startLine, endLine/*, silent*/) {
  var content, terminate, i, l, token, pos, max, level, marker,
      nextLine = startLine + 1, oldParentType,
      terminatorRules = state.md.block.ruler.getRules('paragraph');

  // if it's indented more than 3 spaces, it should be a code block
  if (state.sCount[startLine] - state.blkIndent >= 4) { return false; }

  oldParentType = state.parentType;
  state.parentType = 'paragraph'; // use paragraph to match terminatorRules

  // jump line-by-line until empty one or EOF
  for (; nextLine < endLine && !state.isEmpty(nextLine); nextLine++) {
    // this would be a code block normally, but after paragraph
    // it's considered a lazy continuation regardless of what's there
    if (state.sCount[nextLine] - state.blkIndent > 3) { continue; }

    //
    // Check for underline in setext header
    //
    if (state.sCount[nextLine] >= state.blkIndent) {
      pos = state.bMarks[nextLine] + state.tShift[nextLine];
      max = state.eMarks[nextLine];

      if (pos < max) {
        marker = state.src.charCodeAt(pos);

        if (marker === 0x2D/* - */ || marker === 0x3D/* = */) {
          pos = state.skipChars(pos, marker);
          pos = state.skipSpaces(pos);

          if (pos >= max) {
            level = (marker === 0x3D/* = */ ? 1 : 2);
            break;
          }
        }
      }
    }

    // quirk for blockquotes, this line should already be checked by that rule
    if (state.sCount[nextLine] < 0) { continue; }

    // Some tags can terminate paragraph without empty line.
    terminate = false;
    for (i = 0, l = terminatorRules.length; i < l; i++) {
      if (terminatorRules[i](state, nextLine, endLine, true)) {
        terminate = true;
        break;
      }
    }
    if (terminate) { break; }
  }

  if (!level) {
    // Didn't find valid underline
    return false;
  }

  content = state.getLines(startLine, nextLine, state.blkIndent, false).trim();

  state.line = nextLine + 1;

  token          = state.push('heading_open', 'h' + String(level), 1);
  token.markup   = String.fromCharCode(marker);
  token.map      = [ startLine, state.line ];

  token          = state.push('inline', '', 0);
  token.content  = content;
  token.map      = [ startLine, state.line - 1 ];
  token.children = [];

  token          = state.push('heading_close', 'h' + String(level), -1);
  token.markup   = String.fromCharCode(marker);

  state.parentType = oldParentType;

  return true;
};


/***/ }),
/* 86 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// HTML block




var block_names = __webpack_require__(87);
var HTML_OPEN_CLOSE_TAG_RE = __webpack_require__(27).HTML_OPEN_CLOSE_TAG_RE;

// An array of opening and corresponding closing sequences for html tags,
// last argument defines whether it can terminate a paragraph or not
//
var HTML_SEQUENCES = [
  [ /^<(script|pre|style)(?=(\s|>|$))/i, /<\/(script|pre|style)>/i, true ],
  [ /^<!--/,        /-->/,   true ],
  [ /^<\?/,         /\?>/,   true ],
  [ /^<![A-Z]/,     />/,     true ],
  [ /^<!\[CDATA\[/, /\]\]>/, true ],
  [ new RegExp('^</?(' + block_names.join('|') + ')(?=(\\s|/?>|$))', 'i'), /^$/, true ],
  [ new RegExp(HTML_OPEN_CLOSE_TAG_RE.source + '\\s*$'),  /^$/, false ]
];


module.exports = function html_block(state, startLine, endLine, silent) {
  var i, nextLine, token, lineText,
      pos = state.bMarks[startLine] + state.tShift[startLine],
      max = state.eMarks[startLine];

  // if it's indented more than 3 spaces, it should be a code block
  if (state.sCount[startLine] - state.blkIndent >= 4) { return false; }

  if (!state.md.options.html) { return false; }

  if (state.src.charCodeAt(pos) !== 0x3C/* < */) { return false; }

  lineText = state.src.slice(pos, max);

  for (i = 0; i < HTML_SEQUENCES.length; i++) {
    if (HTML_SEQUENCES[i][0].test(lineText)) { break; }
  }

  if (i === HTML_SEQUENCES.length) { return false; }

  if (silent) {
    // true if this sequence can be a terminator, false otherwise
    return HTML_SEQUENCES[i][2];
  }

  nextLine = startLine + 1;

  // If we are here - we detected HTML block.
  // Let's roll down till block end.
  if (!HTML_SEQUENCES[i][1].test(lineText)) {
    for (; nextLine < endLine; nextLine++) {
      if (state.sCount[nextLine] < state.blkIndent) { break; }

      pos = state.bMarks[nextLine] + state.tShift[nextLine];
      max = state.eMarks[nextLine];
      lineText = state.src.slice(pos, max);

      if (HTML_SEQUENCES[i][1].test(lineText)) {
        if (lineText.length !== 0) { nextLine++; }
        break;
      }
    }
  }

  state.line = nextLine;

  token         = state.push('html_block', '', 0);
  token.map     = [ startLine, nextLine ];
  token.content = state.getLines(startLine, nextLine, state.blkIndent, true);

  return true;
};


/***/ }),
/* 87 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// List of valid html blocks names, accorting to commonmark spec
// http://jgm.github.io/CommonMark/spec.html#html-blocks




module.exports = [
  'address',
  'article',
  'aside',
  'base',
  'basefont',
  'blockquote',
  'body',
  'caption',
  'center',
  'col',
  'colgroup',
  'dd',
  'details',
  'dialog',
  'dir',
  'div',
  'dl',
  'dt',
  'fieldset',
  'figcaption',
  'figure',
  'footer',
  'form',
  'frame',
  'frameset',
  'h1',
  'h2',
  'h3',
  'h4',
  'h5',
  'h6',
  'head',
  'header',
  'hr',
  'html',
  'iframe',
  'legend',
  'li',
  'link',
  'main',
  'menu',
  'menuitem',
  'meta',
  'nav',
  'noframes',
  'ol',
  'optgroup',
  'option',
  'p',
  'param',
  'section',
  'source',
  'summary',
  'table',
  'tbody',
  'td',
  'tfoot',
  'th',
  'thead',
  'title',
  'tr',
  'track',
  'ul'
];


/***/ }),
/* 88 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Paragraph




module.exports = function paragraph(state, startLine/*, endLine*/) {
  var content, terminate, i, l, token, oldParentType,
      nextLine = startLine + 1,
      terminatorRules = state.md.block.ruler.getRules('paragraph'),
      endLine = state.lineMax;

  oldParentType = state.parentType;
  state.parentType = 'paragraph';

  // jump line-by-line until empty one or EOF
  for (; nextLine < endLine && !state.isEmpty(nextLine); nextLine++) {
    // this would be a code block normally, but after paragraph
    // it's considered a lazy continuation regardless of what's there
    if (state.sCount[nextLine] - state.blkIndent > 3) { continue; }

    // quirk for blockquotes, this line should already be checked by that rule
    if (state.sCount[nextLine] < 0) { continue; }

    // Some tags can terminate paragraph without empty line.
    terminate = false;
    for (i = 0, l = terminatorRules.length; i < l; i++) {
      if (terminatorRules[i](state, nextLine, endLine, true)) {
        terminate = true;
        break;
      }
    }
    if (terminate) { break; }
  }

  content = state.getLines(startLine, nextLine, state.blkIndent, false).trim();

  state.line = nextLine;

  token          = state.push('paragraph_open', 'p', 1);
  token.map      = [ startLine, state.line ];

  token          = state.push('inline', '', 0);
  token.content  = content;
  token.map      = [ startLine, state.line ];
  token.children = [];

  token          = state.push('paragraph_close', 'p', -1);

  state.parentType = oldParentType;

  return true;
};


/***/ }),
/* 89 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Parser state class



var Token = __webpack_require__(17);
var isSpace = __webpack_require__(0).isSpace;


function StateBlock(src, md, env, tokens) {
  var ch, s, start, pos, len, indent, offset, indent_found;

  this.src = src;

  // link to parser instance
  this.md     = md;

  this.env = env;

  //
  // Internal state vartiables
  //

  this.tokens = tokens;

  this.bMarks = [];  // line begin offsets for fast jumps
  this.eMarks = [];  // line end offsets for fast jumps
  this.tShift = [];  // offsets of the first non-space characters (tabs not expanded)
  this.sCount = [];  // indents for each line (tabs expanded)

  // An amount of virtual spaces (tabs expanded) between beginning
  // of each line (bMarks) and real beginning of that line.
  //
  // It exists only as a hack because blockquotes override bMarks
  // losing information in the process.
  //
  // It's used only when expanding tabs, you can think about it as
  // an initial tab length, e.g. bsCount=21 applied to string `\t123`
  // means first tab should be expanded to 4-21%4 === 3 spaces.
  //
  this.bsCount = [];

  // block parser variables
  this.blkIndent  = 0; // required block content indent
                       // (for example, if we are in list)
  this.line       = 0; // line index in src
  this.lineMax    = 0; // lines count
  this.tight      = false;  // loose/tight mode for lists
  this.ddIndent   = -1; // indent of the current dd block (-1 if there isn't any)

  // can be 'blockquote', 'list', 'root', 'paragraph' or 'reference'
  // used in lists to determine if they interrupt a paragraph
  this.parentType = 'root';

  this.level = 0;

  // renderer
  this.result = '';

  // Create caches
  // Generate markers.
  s = this.src;
  indent_found = false;

  for (start = pos = indent = offset = 0, len = s.length; pos < len; pos++) {
    ch = s.charCodeAt(pos);

    if (!indent_found) {
      if (isSpace(ch)) {
        indent++;

        if (ch === 0x09) {
          offset += 4 - offset % 4;
        } else {
          offset++;
        }
        continue;
      } else {
        indent_found = true;
      }
    }

    if (ch === 0x0A || pos === len - 1) {
      if (ch !== 0x0A) { pos++; }
      this.bMarks.push(start);
      this.eMarks.push(pos);
      this.tShift.push(indent);
      this.sCount.push(offset);
      this.bsCount.push(0);

      indent_found = false;
      indent = 0;
      offset = 0;
      start = pos + 1;
    }
  }

  // Push fake entry to simplify cache bounds checks
  this.bMarks.push(s.length);
  this.eMarks.push(s.length);
  this.tShift.push(0);
  this.sCount.push(0);
  this.bsCount.push(0);

  this.lineMax = this.bMarks.length - 1; // don't count last fake line
}

// Push new token to "stream".
//
StateBlock.prototype.push = function (type, tag, nesting) {
  var token = new Token(type, tag, nesting);
  token.block = true;

  if (nesting < 0) { this.level--; }
  token.level = this.level;
  if (nesting > 0) { this.level++; }

  this.tokens.push(token);
  return token;
};

StateBlock.prototype.isEmpty = function isEmpty(line) {
  return this.bMarks[line] + this.tShift[line] >= this.eMarks[line];
};

StateBlock.prototype.skipEmptyLines = function skipEmptyLines(from) {
  for (var max = this.lineMax; from < max; from++) {
    if (this.bMarks[from] + this.tShift[from] < this.eMarks[from]) {
      break;
    }
  }
  return from;
};

// Skip spaces from given position.
StateBlock.prototype.skipSpaces = function skipSpaces(pos) {
  var ch;

  for (var max = this.src.length; pos < max; pos++) {
    ch = this.src.charCodeAt(pos);
    if (!isSpace(ch)) { break; }
  }
  return pos;
};

// Skip spaces from given position in reverse.
StateBlock.prototype.skipSpacesBack = function skipSpacesBack(pos, min) {
  if (pos <= min) { return pos; }

  while (pos > min) {
    if (!isSpace(this.src.charCodeAt(--pos))) { return pos + 1; }
  }
  return pos;
};

// Skip char codes from given position
StateBlock.prototype.skipChars = function skipChars(pos, code) {
  for (var max = this.src.length; pos < max; pos++) {
    if (this.src.charCodeAt(pos) !== code) { break; }
  }
  return pos;
};

// Skip char codes reverse from given position - 1
StateBlock.prototype.skipCharsBack = function skipCharsBack(pos, code, min) {
  if (pos <= min) { return pos; }

  while (pos > min) {
    if (code !== this.src.charCodeAt(--pos)) { return pos + 1; }
  }
  return pos;
};

// cut lines range from source.
StateBlock.prototype.getLines = function getLines(begin, end, indent, keepLastLF) {
  var i, lineIndent, ch, first, last, queue, lineStart,
      line = begin;

  if (begin >= end) {
    return '';
  }

  queue = new Array(end - begin);

  for (i = 0; line < end; line++, i++) {
    lineIndent = 0;
    lineStart = first = this.bMarks[line];

    if (line + 1 < end || keepLastLF) {
      // No need for bounds check because we have fake entry on tail.
      last = this.eMarks[line] + 1;
    } else {
      last = this.eMarks[line];
    }

    while (first < last && lineIndent < indent) {
      ch = this.src.charCodeAt(first);

      if (isSpace(ch)) {
        if (ch === 0x09) {
          lineIndent += 4 - (lineIndent + this.bsCount[line]) % 4;
        } else {
          lineIndent++;
        }
      } else if (first - lineStart < this.tShift[line]) {
        // patched tShift masked characters to look like spaces (blockquotes, list markers)
        lineIndent++;
      } else {
        break;
      }

      first++;
    }

    if (lineIndent > indent) {
      // partially expanding tabs in code blocks, e.g '\t\tfoobar'
      // with indent=2 becomes '  \tfoobar'
      queue[i] = new Array(lineIndent - indent + 1).join(' ') + this.src.slice(first, last);
    } else {
      queue[i] = this.src.slice(first, last);
    }
  }

  return queue.join('');
};

// re-export Token class to use in block rules
StateBlock.prototype.Token = Token;


module.exports = StateBlock;


/***/ }),
/* 90 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/** internal
 * class ParserInline
 *
 * Tokenizes paragraph content.
 **/



var Ruler           = __webpack_require__(16);


////////////////////////////////////////////////////////////////////////////////
// Parser rules

var _rules = [
  [ 'text',            __webpack_require__(91) ],
  [ 'newline',         __webpack_require__(92) ],
  [ 'escape',          __webpack_require__(93) ],
  [ 'backticks',       __webpack_require__(94) ],
  [ 'strikethrough',   __webpack_require__(28).tokenize ],
  [ 'emphasis',        __webpack_require__(29).tokenize ],
  [ 'link',            __webpack_require__(95) ],
  [ 'image',           __webpack_require__(96) ],
  [ 'autolink',        __webpack_require__(97) ],
  [ 'html_inline',     __webpack_require__(98) ],
  [ 'entity',          __webpack_require__(99) ]
];

var _rules2 = [
  [ 'balance_pairs',   __webpack_require__(100) ],
  [ 'strikethrough',   __webpack_require__(28).postProcess ],
  [ 'emphasis',        __webpack_require__(29).postProcess ],
  [ 'text_collapse',   __webpack_require__(101) ]
];


/**
 * new ParserInline()
 **/
function ParserInline() {
  var i;

  /**
   * ParserInline#ruler -> Ruler
   *
   * [[Ruler]] instance. Keep configuration of inline rules.
   **/
  this.ruler = new Ruler();

  for (i = 0; i < _rules.length; i++) {
    this.ruler.push(_rules[i][0], _rules[i][1]);
  }

  /**
   * ParserInline#ruler2 -> Ruler
   *
   * [[Ruler]] instance. Second ruler used for post-processing
   * (e.g. in emphasis-like rules).
   **/
  this.ruler2 = new Ruler();

  for (i = 0; i < _rules2.length; i++) {
    this.ruler2.push(_rules2[i][0], _rules2[i][1]);
  }
}


// Skip single token by running all rules in validation mode;
// returns `true` if any rule reported success
//
ParserInline.prototype.skipToken = function (state) {
  var ok, i, pos = state.pos,
      rules = this.ruler.getRules(''),
      len = rules.length,
      maxNesting = state.md.options.maxNesting,
      cache = state.cache;


  if (typeof cache[pos] !== 'undefined') {
    state.pos = cache[pos];
    return;
  }

  if (state.level < maxNesting) {
    for (i = 0; i < len; i++) {
      // Increment state.level and decrement it later to limit recursion.
      // It's harmless to do here, because no tokens are created. But ideally,
      // we'd need a separate private state variable for this purpose.
      //
      state.level++;
      ok = rules[i](state, true);
      state.level--;

      if (ok) { break; }
    }
  } else {
    // Too much nesting, just skip until the end of the paragraph.
    //
    // NOTE: this will cause links to behave incorrectly in the following case,
    //       when an amount of `[` is exactly equal to `maxNesting + 1`:
    //
    //       [[[[[[[[[[[[[[[[[[[[[foo]()
    //
    // TODO: remove this workaround when CM standard will allow nested links
    //       (we can replace it by preventing links from being parsed in
    //       validation mode)
    //
    state.pos = state.posMax;
  }

  if (!ok) { state.pos++; }
  cache[pos] = state.pos;
};


// Generate tokens for input range
//
ParserInline.prototype.tokenize = function (state) {
  var ok, i,
      rules = this.ruler.getRules(''),
      len = rules.length,
      end = state.posMax,
      maxNesting = state.md.options.maxNesting;

  while (state.pos < end) {
    // Try all possible rules.
    // On success, rule should:
    //
    // - update `state.pos`
    // - update `state.tokens`
    // - return true

    if (state.level < maxNesting) {
      for (i = 0; i < len; i++) {
        ok = rules[i](state, false);
        if (ok) { break; }
      }
    }

    if (ok) {
      if (state.pos >= end) { break; }
      continue;
    }

    state.pending += state.src[state.pos++];
  }

  if (state.pending) {
    state.pushPending();
  }
};


/**
 * ParserInline.parse(str, md, env, outTokens)
 *
 * Process input string and push inline tokens into `outTokens`
 **/
ParserInline.prototype.parse = function (str, md, env, outTokens) {
  var i, rules, len;
  var state = new this.State(str, md, env, outTokens);

  this.tokenize(state);

  rules = this.ruler2.getRules('');
  len = rules.length;

  for (i = 0; i < len; i++) {
    rules[i](state);
  }
};


ParserInline.prototype.State = __webpack_require__(102);


module.exports = ParserInline;


/***/ }),
/* 91 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Skip text characters for text token, place those to pending buffer
// and increment current pos




// Rule to skip pure text
// '{}$%@~+=:' reserved for extentions

// !, ", #, $, %, &, ', (, ), *, +, ,, -, ., /, :, ;, <, =, >, ?, @, [, \, ], ^, _, `, {, |, }, or ~

// !!!! Don't confuse with "Markdown ASCII Punctuation" chars
// http://spec.commonmark.org/0.15/#ascii-punctuation-character
function isTerminatorChar(ch) {
  switch (ch) {
    case 0x0A/* \n */:
    case 0x21/* ! */:
    case 0x23/* # */:
    case 0x24/* $ */:
    case 0x25/* % */:
    case 0x26/* & */:
    case 0x2A/* * */:
    case 0x2B/* + */:
    case 0x2D/* - */:
    case 0x3A/* : */:
    case 0x3C/* < */:
    case 0x3D/* = */:
    case 0x3E/* > */:
    case 0x40/* @ */:
    case 0x5B/* [ */:
    case 0x5C/* \ */:
    case 0x5D/* ] */:
    case 0x5E/* ^ */:
    case 0x5F/* _ */:
    case 0x60/* ` */:
    case 0x7B/* { */:
    case 0x7D/* } */:
    case 0x7E/* ~ */:
      return true;
    default:
      return false;
  }
}

module.exports = function text(state, silent) {
  var pos = state.pos;

  while (pos < state.posMax && !isTerminatorChar(state.src.charCodeAt(pos))) {
    pos++;
  }

  if (pos === state.pos) { return false; }

  if (!silent) { state.pending += state.src.slice(state.pos, pos); }

  state.pos = pos;

  return true;
};

// Alternative implementation, for memory.
//
// It costs 10% of performance, but allows extend terminators list, if place it
// to `ParcerInline` property. Probably, will switch to it sometime, such
// flexibility required.

/*
var TERMINATOR_RE = /[\n!#$%&*+\-:<=>@[\\\]^_`{}~]/;

module.exports = function text(state, silent) {
  var pos = state.pos,
      idx = state.src.slice(pos).search(TERMINATOR_RE);

  // first char is terminator -> empty text
  if (idx === 0) { return false; }

  // no terminator -> text till end of string
  if (idx < 0) {
    if (!silent) { state.pending += state.src.slice(pos); }
    state.pos = state.src.length;
    return true;
  }

  if (!silent) { state.pending += state.src.slice(pos, pos + idx); }

  state.pos += idx;

  return true;
};*/


/***/ }),
/* 92 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Proceess '\n'



var isSpace = __webpack_require__(0).isSpace;


module.exports = function newline(state, silent) {
  var pmax, max, pos = state.pos;

  if (state.src.charCodeAt(pos) !== 0x0A/* \n */) { return false; }

  pmax = state.pending.length - 1;
  max = state.posMax;

  // '  \n' -> hardbreak
  // Lookup in pending chars is bad practice! Don't copy to other rules!
  // Pending string is stored in concat mode, indexed lookups will cause
  // convertion to flat mode.
  if (!silent) {
    if (pmax >= 0 && state.pending.charCodeAt(pmax) === 0x20) {
      if (pmax >= 1 && state.pending.charCodeAt(pmax - 1) === 0x20) {
        state.pending = state.pending.replace(/ +$/, '');
        state.push('hardbreak', 'br', 0);
      } else {
        state.pending = state.pending.slice(0, -1);
        state.push('softbreak', 'br', 0);
      }

    } else {
      state.push('softbreak', 'br', 0);
    }
  }

  pos++;

  // skip heading spaces for next line
  while (pos < max && isSpace(state.src.charCodeAt(pos))) { pos++; }

  state.pos = pos;
  return true;
};


/***/ }),
/* 93 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Process escaped chars and hardbreaks



var isSpace = __webpack_require__(0).isSpace;

var ESCAPED = [];

for (var i = 0; i < 256; i++) { ESCAPED.push(0); }

'\\!"#$%&\'()*+,./:;<=>?@[]^_`{|}~-'
  .split('').forEach(function (ch) { ESCAPED[ch.charCodeAt(0)] = 1; });


module.exports = function escape(state, silent) {
  var ch, pos = state.pos, max = state.posMax;

  if (state.src.charCodeAt(pos) !== 0x5C/* \ */) { return false; }

  pos++;

  if (pos < max) {
    ch = state.src.charCodeAt(pos);

    if (ch < 256 && ESCAPED[ch] !== 0) {
      if (!silent) { state.pending += state.src[pos]; }
      state.pos += 2;
      return true;
    }

    if (ch === 0x0A) {
      if (!silent) {
        state.push('hardbreak', 'br', 0);
      }

      pos++;
      // skip leading whitespaces from next line
      while (pos < max) {
        ch = state.src.charCodeAt(pos);
        if (!isSpace(ch)) { break; }
        pos++;
      }

      state.pos = pos;
      return true;
    }
  }

  if (!silent) { state.pending += '\\'; }
  state.pos++;
  return true;
};


/***/ }),
/* 94 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Parse backticks



module.exports = function backtick(state, silent) {
  var start, max, marker, matchStart, matchEnd, token,
      pos = state.pos,
      ch = state.src.charCodeAt(pos);

  if (ch !== 0x60/* ` */) { return false; }

  start = pos;
  pos++;
  max = state.posMax;

  while (pos < max && state.src.charCodeAt(pos) === 0x60/* ` */) { pos++; }

  marker = state.src.slice(start, pos);

  matchStart = matchEnd = pos;

  while ((matchStart = state.src.indexOf('`', matchEnd)) !== -1) {
    matchEnd = matchStart + 1;

    while (matchEnd < max && state.src.charCodeAt(matchEnd) === 0x60/* ` */) { matchEnd++; }

    if (matchEnd - matchStart === marker.length) {
      if (!silent) {
        token         = state.push('code_inline', 'code', 0);
        token.markup  = marker;
        token.content = state.src.slice(pos, matchStart)
                                 .replace(/[ \n]+/g, ' ')
                                 .trim();
      }
      state.pos = matchEnd;
      return true;
    }
  }

  if (!silent) { state.pending += marker; }
  state.pos += marker.length;
  return true;
};


/***/ }),
/* 95 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Process [link](<to> "stuff")



var normalizeReference   = __webpack_require__(0).normalizeReference;
var isSpace              = __webpack_require__(0).isSpace;


module.exports = function link(state, silent) {
  var attrs,
      code,
      label,
      labelEnd,
      labelStart,
      pos,
      res,
      ref,
      title,
      token,
      href = '',
      oldPos = state.pos,
      max = state.posMax,
      start = state.pos,
      parseReference = true;

  if (state.src.charCodeAt(state.pos) !== 0x5B/* [ */) { return false; }

  labelStart = state.pos + 1;
  labelEnd = state.md.helpers.parseLinkLabel(state, state.pos, true);

  // parser failed to find ']', so it's not a valid link
  if (labelEnd < 0) { return false; }

  pos = labelEnd + 1;
  if (pos < max && state.src.charCodeAt(pos) === 0x28/* ( */) {
    //
    // Inline link
    //

    // might have found a valid shortcut link, disable reference parsing
    parseReference = false;

    // [link](  <href>  "title"  )
    //        ^^ skipping these spaces
    pos++;
    for (; pos < max; pos++) {
      code = state.src.charCodeAt(pos);
      if (!isSpace(code) && code !== 0x0A) { break; }
    }
    if (pos >= max) { return false; }

    // [link](  <href>  "title"  )
    //          ^^^^^^ parsing link destination
    start = pos;
    res = state.md.helpers.parseLinkDestination(state.src, pos, state.posMax);
    if (res.ok) {
      href = state.md.normalizeLink(res.str);
      if (state.md.validateLink(href)) {
        pos = res.pos;
      } else {
        href = '';
      }
    }

    // [link](  <href>  "title"  )
    //                ^^ skipping these spaces
    start = pos;
    for (; pos < max; pos++) {
      code = state.src.charCodeAt(pos);
      if (!isSpace(code) && code !== 0x0A) { break; }
    }

    // [link](  <href>  "title"  )
    //                  ^^^^^^^ parsing link title
    res = state.md.helpers.parseLinkTitle(state.src, pos, state.posMax);
    if (pos < max && start !== pos && res.ok) {
      title = res.str;
      pos = res.pos;

      // [link](  <href>  "title"  )
      //                         ^^ skipping these spaces
      for (; pos < max; pos++) {
        code = state.src.charCodeAt(pos);
        if (!isSpace(code) && code !== 0x0A) { break; }
      }
    } else {
      title = '';
    }

    if (pos >= max || state.src.charCodeAt(pos) !== 0x29/* ) */) {
      // parsing a valid shortcut link failed, fallback to reference
      parseReference = true;
    }
    pos++;
  }

  if (parseReference) {
    //
    // Link reference
    //
    if (typeof state.env.references === 'undefined') { return false; }

    if (pos < max && state.src.charCodeAt(pos) === 0x5B/* [ */) {
      start = pos + 1;
      pos = state.md.helpers.parseLinkLabel(state, pos);
      if (pos >= 0) {
        label = state.src.slice(start, pos++);
      } else {
        pos = labelEnd + 1;
      }
    } else {
      pos = labelEnd + 1;
    }

    // covers label === '' and label === undefined
    // (collapsed reference link and shortcut reference link respectively)
    if (!label) { label = state.src.slice(labelStart, labelEnd); }

    ref = state.env.references[normalizeReference(label)];
    if (!ref) {
      state.pos = oldPos;
      return false;
    }
    href = ref.href;
    title = ref.title;
  }

  //
  // We found the end of the link, and know for a fact it's a valid link;
  // so all that's left to do is to call tokenizer.
  //
  if (!silent) {
    state.pos = labelStart;
    state.posMax = labelEnd;

    token        = state.push('link_open', 'a', 1);
    token.attrs  = attrs = [ [ 'href', href ] ];
    if (title) {
      attrs.push([ 'title', title ]);
    }

    state.md.inline.tokenize(state);

    token        = state.push('link_close', 'a', -1);
  }

  state.pos = pos;
  state.posMax = max;
  return true;
};


/***/ }),
/* 96 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Process ![image](<src> "title")



var normalizeReference   = __webpack_require__(0).normalizeReference;
var isSpace              = __webpack_require__(0).isSpace;


module.exports = function image(state, silent) {
  var attrs,
      code,
      content,
      label,
      labelEnd,
      labelStart,
      pos,
      ref,
      res,
      title,
      token,
      tokens,
      start,
      href = '',
      oldPos = state.pos,
      max = state.posMax;

  if (state.src.charCodeAt(state.pos) !== 0x21/* ! */) { return false; }
  if (state.src.charCodeAt(state.pos + 1) !== 0x5B/* [ */) { return false; }

  labelStart = state.pos + 2;
  labelEnd = state.md.helpers.parseLinkLabel(state, state.pos + 1, false);

  // parser failed to find ']', so it's not a valid link
  if (labelEnd < 0) { return false; }

  pos = labelEnd + 1;
  if (pos < max && state.src.charCodeAt(pos) === 0x28/* ( */) {
    //
    // Inline link
    //

    // [link](  <href>  "title"  )
    //        ^^ skipping these spaces
    pos++;
    for (; pos < max; pos++) {
      code = state.src.charCodeAt(pos);
      if (!isSpace(code) && code !== 0x0A) { break; }
    }
    if (pos >= max) { return false; }

    // [link](  <href>  "title"  )
    //          ^^^^^^ parsing link destination
    start = pos;
    res = state.md.helpers.parseLinkDestination(state.src, pos, state.posMax);
    if (res.ok) {
      href = state.md.normalizeLink(res.str);
      if (state.md.validateLink(href)) {
        pos = res.pos;
      } else {
        href = '';
      }
    }

    // [link](  <href>  "title"  )
    //                ^^ skipping these spaces
    start = pos;
    for (; pos < max; pos++) {
      code = state.src.charCodeAt(pos);
      if (!isSpace(code) && code !== 0x0A) { break; }
    }

    // [link](  <href>  "title"  )
    //                  ^^^^^^^ parsing link title
    res = state.md.helpers.parseLinkTitle(state.src, pos, state.posMax);
    if (pos < max && start !== pos && res.ok) {
      title = res.str;
      pos = res.pos;

      // [link](  <href>  "title"  )
      //                         ^^ skipping these spaces
      for (; pos < max; pos++) {
        code = state.src.charCodeAt(pos);
        if (!isSpace(code) && code !== 0x0A) { break; }
      }
    } else {
      title = '';
    }

    if (pos >= max || state.src.charCodeAt(pos) !== 0x29/* ) */) {
      state.pos = oldPos;
      return false;
    }
    pos++;
  } else {
    //
    // Link reference
    //
    if (typeof state.env.references === 'undefined') { return false; }

    if (pos < max && state.src.charCodeAt(pos) === 0x5B/* [ */) {
      start = pos + 1;
      pos = state.md.helpers.parseLinkLabel(state, pos);
      if (pos >= 0) {
        label = state.src.slice(start, pos++);
      } else {
        pos = labelEnd + 1;
      }
    } else {
      pos = labelEnd + 1;
    }

    // covers label === '' and label === undefined
    // (collapsed reference link and shortcut reference link respectively)
    if (!label) { label = state.src.slice(labelStart, labelEnd); }

    ref = state.env.references[normalizeReference(label)];
    if (!ref) {
      state.pos = oldPos;
      return false;
    }
    href = ref.href;
    title = ref.title;
  }

  //
  // We found the end of the link, and know for a fact it's a valid link;
  // so all that's left to do is to call tokenizer.
  //
  if (!silent) {
    content = state.src.slice(labelStart, labelEnd);

    state.md.inline.parse(
      content,
      state.md,
      state.env,
      tokens = []
    );

    token          = state.push('image', 'img', 0);
    token.attrs    = attrs = [ [ 'src', href ], [ 'alt', '' ] ];
    token.children = tokens;
    token.content  = content;

    if (title) {
      attrs.push([ 'title', title ]);
    }
  }

  state.pos = pos;
  state.posMax = max;
  return true;
};


/***/ }),
/* 97 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Process autolinks '<protocol:...>'




/*eslint max-len:0*/
var EMAIL_RE    = /^<([a-zA-Z0-9.!#$%&'*+\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*)>/;
var AUTOLINK_RE = /^<([a-zA-Z][a-zA-Z0-9+.\-]{1,31}):([^<>\x00-\x20]*)>/;


module.exports = function autolink(state, silent) {
  var tail, linkMatch, emailMatch, url, fullUrl, token,
      pos = state.pos;

  if (state.src.charCodeAt(pos) !== 0x3C/* < */) { return false; }

  tail = state.src.slice(pos);

  if (tail.indexOf('>') < 0) { return false; }

  if (AUTOLINK_RE.test(tail)) {
    linkMatch = tail.match(AUTOLINK_RE);

    url = linkMatch[0].slice(1, -1);
    fullUrl = state.md.normalizeLink(url);
    if (!state.md.validateLink(fullUrl)) { return false; }

    if (!silent) {
      token         = state.push('link_open', 'a', 1);
      token.attrs   = [ [ 'href', fullUrl ] ];
      token.markup  = 'autolink';
      token.info    = 'auto';

      token         = state.push('text', '', 0);
      token.content = state.md.normalizeLinkText(url);

      token         = state.push('link_close', 'a', -1);
      token.markup  = 'autolink';
      token.info    = 'auto';
    }

    state.pos += linkMatch[0].length;
    return true;
  }

  if (EMAIL_RE.test(tail)) {
    emailMatch = tail.match(EMAIL_RE);

    url = emailMatch[0].slice(1, -1);
    fullUrl = state.md.normalizeLink('mailto:' + url);
    if (!state.md.validateLink(fullUrl)) { return false; }

    if (!silent) {
      token         = state.push('link_open', 'a', 1);
      token.attrs   = [ [ 'href', fullUrl ] ];
      token.markup  = 'autolink';
      token.info    = 'auto';

      token         = state.push('text', '', 0);
      token.content = state.md.normalizeLinkText(url);

      token         = state.push('link_close', 'a', -1);
      token.markup  = 'autolink';
      token.info    = 'auto';
    }

    state.pos += emailMatch[0].length;
    return true;
  }

  return false;
};


/***/ }),
/* 98 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Process html tags




var HTML_TAG_RE = __webpack_require__(27).HTML_TAG_RE;


function isLetter(ch) {
  /*eslint no-bitwise:0*/
  var lc = ch | 0x20; // to lower case
  return (lc >= 0x61/* a */) && (lc <= 0x7a/* z */);
}


module.exports = function html_inline(state, silent) {
  var ch, match, max, token,
      pos = state.pos;

  if (!state.md.options.html) { return false; }

  // Check start
  max = state.posMax;
  if (state.src.charCodeAt(pos) !== 0x3C/* < */ ||
      pos + 2 >= max) {
    return false;
  }

  // Quick fail on second char
  ch = state.src.charCodeAt(pos + 1);
  if (ch !== 0x21/* ! */ &&
      ch !== 0x3F/* ? */ &&
      ch !== 0x2F/* / */ &&
      !isLetter(ch)) {
    return false;
  }

  match = state.src.slice(pos).match(HTML_TAG_RE);
  if (!match) { return false; }

  if (!silent) {
    token         = state.push('html_inline', '', 0);
    token.content = state.src.slice(pos, pos + match[0].length);
  }
  state.pos += match[0].length;
  return true;
};


/***/ }),
/* 99 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Process html entity - &#123;, &#xAF;, &quot;, ...



var entities          = __webpack_require__(22);
var has               = __webpack_require__(0).has;
var isValidEntityCode = __webpack_require__(0).isValidEntityCode;
var fromCodePoint     = __webpack_require__(0).fromCodePoint;


var DIGITAL_RE = /^&#((?:x[a-f0-9]{1,8}|[0-9]{1,8}));/i;
var NAMED_RE   = /^&([a-z][a-z0-9]{1,31});/i;


module.exports = function entity(state, silent) {
  var ch, code, match, pos = state.pos, max = state.posMax;

  if (state.src.charCodeAt(pos) !== 0x26/* & */) { return false; }

  if (pos + 1 < max) {
    ch = state.src.charCodeAt(pos + 1);

    if (ch === 0x23 /* # */) {
      match = state.src.slice(pos).match(DIGITAL_RE);
      if (match) {
        if (!silent) {
          code = match[1][0].toLowerCase() === 'x' ? parseInt(match[1].slice(1), 16) : parseInt(match[1], 10);
          state.pending += isValidEntityCode(code) ? fromCodePoint(code) : fromCodePoint(0xFFFD);
        }
        state.pos += match[0].length;
        return true;
      }
    } else {
      match = state.src.slice(pos).match(NAMED_RE);
      if (match) {
        if (has(entities, match[1])) {
          if (!silent) { state.pending += entities[match[1]]; }
          state.pos += match[0].length;
          return true;
        }
      }
    }
  }

  if (!silent) { state.pending += '&'; }
  state.pos++;
  return true;
};


/***/ }),
/* 100 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// For each opening emphasis-like marker find a matching closing one
//



module.exports = function link_pairs(state) {
  var i, j, lastDelim, currDelim,
      delimiters = state.delimiters,
      max = state.delimiters.length;

  for (i = 0; i < max; i++) {
    lastDelim = delimiters[i];

    if (!lastDelim.close) { continue; }

    j = i - lastDelim.jump - 1;

    while (j >= 0) {
      currDelim = delimiters[j];

      if (currDelim.open &&
          currDelim.marker === lastDelim.marker &&
          currDelim.end < 0 &&
          currDelim.level === lastDelim.level) {

        // typeofs are for backward compatibility with plugins
        var odd_match = (currDelim.close || lastDelim.open) &&
                        typeof currDelim.length !== 'undefined' &&
                        typeof lastDelim.length !== 'undefined' &&
                        (currDelim.length + lastDelim.length) % 3 === 0;

        if (!odd_match) {
          lastDelim.jump = i - j;
          lastDelim.open = false;
          currDelim.end  = i;
          currDelim.jump = 0;
          break;
        }
      }

      j -= currDelim.jump + 1;
    }
  }
};


/***/ }),
/* 101 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Merge adjacent text nodes into one, and re-calculate all token levels
//



module.exports = function text_collapse(state) {
  var curr, last,
      level = 0,
      tokens = state.tokens,
      max = state.tokens.length;

  for (curr = last = 0; curr < max; curr++) {
    // re-calculate levels
    level += tokens[curr].nesting;
    tokens[curr].level = level;

    if (tokens[curr].type === 'text' &&
        curr + 1 < max &&
        tokens[curr + 1].type === 'text') {

      // collapse two adjacent text nodes
      tokens[curr + 1].content = tokens[curr].content + tokens[curr + 1].content;
    } else {
      if (curr !== last) { tokens[last] = tokens[curr]; }

      last++;
    }
  }

  if (curr !== last) {
    tokens.length = last;
  }
};


/***/ }),
/* 102 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Inline parser state




var Token          = __webpack_require__(17);
var isWhiteSpace   = __webpack_require__(0).isWhiteSpace;
var isPunctChar    = __webpack_require__(0).isPunctChar;
var isMdAsciiPunct = __webpack_require__(0).isMdAsciiPunct;


function StateInline(src, md, env, outTokens) {
  this.src = src;
  this.env = env;
  this.md = md;
  this.tokens = outTokens;

  this.pos = 0;
  this.posMax = this.src.length;
  this.level = 0;
  this.pending = '';
  this.pendingLevel = 0;

  this.cache = {};        // Stores { start: end } pairs. Useful for backtrack
                          // optimization of pairs parse (emphasis, strikes).

  this.delimiters = [];   // Emphasis-like delimiters
}


// Flush pending text
//
StateInline.prototype.pushPending = function () {
  var token = new Token('text', '', 0);
  token.content = this.pending;
  token.level = this.pendingLevel;
  this.tokens.push(token);
  this.pending = '';
  return token;
};


// Push new token to "stream".
// If pending text exists - flush it as text token
//
StateInline.prototype.push = function (type, tag, nesting) {
  if (this.pending) {
    this.pushPending();
  }

  var token = new Token(type, tag, nesting);

  if (nesting < 0) { this.level--; }
  token.level = this.level;
  if (nesting > 0) { this.level++; }

  this.pendingLevel = this.level;
  this.tokens.push(token);
  return token;
};


// Scan a sequence of emphasis-like markers, and determine whether
// it can start an emphasis sequence or end an emphasis sequence.
//
//  - start - position to scan from (it should point at a valid marker);
//  - canSplitWord - determine if these markers can be found inside a word
//
StateInline.prototype.scanDelims = function (start, canSplitWord) {
  var pos = start, lastChar, nextChar, count, can_open, can_close,
      isLastWhiteSpace, isLastPunctChar,
      isNextWhiteSpace, isNextPunctChar,
      left_flanking = true,
      right_flanking = true,
      max = this.posMax,
      marker = this.src.charCodeAt(start);

  // treat beginning of the line as a whitespace
  lastChar = start > 0 ? this.src.charCodeAt(start - 1) : 0x20;

  while (pos < max && this.src.charCodeAt(pos) === marker) { pos++; }

  count = pos - start;

  // treat end of the line as a whitespace
  nextChar = pos < max ? this.src.charCodeAt(pos) : 0x20;

  isLastPunctChar = isMdAsciiPunct(lastChar) || isPunctChar(String.fromCharCode(lastChar));
  isNextPunctChar = isMdAsciiPunct(nextChar) || isPunctChar(String.fromCharCode(nextChar));

  isLastWhiteSpace = isWhiteSpace(lastChar);
  isNextWhiteSpace = isWhiteSpace(nextChar);

  if (isNextWhiteSpace) {
    left_flanking = false;
  } else if (isNextPunctChar) {
    if (!(isLastWhiteSpace || isLastPunctChar)) {
      left_flanking = false;
    }
  }

  if (isLastWhiteSpace) {
    right_flanking = false;
  } else if (isLastPunctChar) {
    if (!(isNextWhiteSpace || isNextPunctChar)) {
      right_flanking = false;
    }
  }

  if (!canSplitWord) {
    can_open  = left_flanking  && (!right_flanking || isLastPunctChar);
    can_close = right_flanking && (!left_flanking  || isNextPunctChar);
  } else {
    can_open  = left_flanking;
    can_close = right_flanking;
  }

  return {
    can_open:  can_open,
    can_close: can_close,
    length:    count
  };
};


// re-export Token class to use in block rules
StateInline.prototype.Token = Token;


module.exports = StateInline;


/***/ }),
/* 103 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";



////////////////////////////////////////////////////////////////////////////////
// Helpers

// Merge objects
//
function assign(obj /*from1, from2, from3, ...*/) {
  var sources = Array.prototype.slice.call(arguments, 1);

  sources.forEach(function (source) {
    if (!source) { return; }

    Object.keys(source).forEach(function (key) {
      obj[key] = source[key];
    });
  });

  return obj;
}

function _class(obj) { return Object.prototype.toString.call(obj); }
function isString(obj) { return _class(obj) === '[object String]'; }
function isObject(obj) { return _class(obj) === '[object Object]'; }
function isRegExp(obj) { return _class(obj) === '[object RegExp]'; }
function isFunction(obj) { return _class(obj) === '[object Function]'; }


function escapeRE(str) { return str.replace(/[.?*+^$[\]\\(){}|-]/g, '\\$&'); }

////////////////////////////////////////////////////////////////////////////////


var defaultOptions = {
  fuzzyLink: true,
  fuzzyEmail: true,
  fuzzyIP: false
};


function isOptionsObj(obj) {
  return Object.keys(obj || {}).reduce(function (acc, k) {
    return acc || defaultOptions.hasOwnProperty(k);
  }, false);
}


var defaultSchemas = {
  'http:': {
    validate: function (text, pos, self) {
      var tail = text.slice(pos);

      if (!self.re.http) {
        // compile lazily, because "host"-containing variables can change on tlds update.
        self.re.http =  new RegExp(
          '^\\/\\/' + self.re.src_auth + self.re.src_host_port_strict + self.re.src_path, 'i'
        );
      }
      if (self.re.http.test(tail)) {
        return tail.match(self.re.http)[0].length;
      }
      return 0;
    }
  },
  'https:':  'http:',
  'ftp:':    'http:',
  '//':      {
    validate: function (text, pos, self) {
      var tail = text.slice(pos);

      if (!self.re.no_http) {
      // compile lazily, because "host"-containing variables can change on tlds update.
        self.re.no_http =  new RegExp(
          '^' +
          self.re.src_auth +
          // Don't allow single-level domains, because of false positives like '//test'
          // with code comments
          '(?:localhost|(?:(?:' + self.re.src_domain + ')\\.)+' + self.re.src_domain_root + ')' +
          self.re.src_port +
          self.re.src_host_terminator +
          self.re.src_path,

          'i'
        );
      }

      if (self.re.no_http.test(tail)) {
        // should not be `://` & `///`, that protects from errors in protocol name
        if (pos >= 3 && text[pos - 3] === ':') { return 0; }
        if (pos >= 3 && text[pos - 3] === '/') { return 0; }
        return tail.match(self.re.no_http)[0].length;
      }
      return 0;
    }
  },
  'mailto:': {
    validate: function (text, pos, self) {
      var tail = text.slice(pos);

      if (!self.re.mailto) {
        self.re.mailto =  new RegExp(
          '^' + self.re.src_email_name + '@' + self.re.src_host_strict, 'i'
        );
      }
      if (self.re.mailto.test(tail)) {
        return tail.match(self.re.mailto)[0].length;
      }
      return 0;
    }
  }
};

/*eslint-disable max-len*/

// RE pattern for 2-character tlds (autogenerated by ./support/tlds_2char_gen.js)
var tlds_2ch_src_re = 'a[cdefgilmnoqrstuwxz]|b[abdefghijmnorstvwyz]|c[acdfghiklmnoruvwxyz]|d[ejkmoz]|e[cegrstu]|f[ijkmor]|g[abdefghilmnpqrstuwy]|h[kmnrtu]|i[delmnoqrst]|j[emop]|k[eghimnprwyz]|l[abcikrstuvy]|m[acdeghklmnopqrstuvwxyz]|n[acefgilopruz]|om|p[aefghklmnrstwy]|qa|r[eosuw]|s[abcdeghijklmnortuvxyz]|t[cdfghjklmnortvwz]|u[agksyz]|v[aceginu]|w[fs]|y[et]|z[amw]';

// DON'T try to make PRs with changes. Extend TLDs with LinkifyIt.tlds() instead
var tlds_default = 'biz|com|edu|gov|net|org|pro|web|xxx|aero|asia|coop|info|museum|name|shop|рф'.split('|');

/*eslint-enable max-len*/

////////////////////////////////////////////////////////////////////////////////

function resetScanCache(self) {
  self.__index__ = -1;
  self.__text_cache__   = '';
}

function createValidator(re) {
  return function (text, pos) {
    var tail = text.slice(pos);

    if (re.test(tail)) {
      return tail.match(re)[0].length;
    }
    return 0;
  };
}

function createNormalizer() {
  return function (match, self) {
    self.normalize(match);
  };
}

// Schemas compiler. Build regexps.
//
function compile(self) {

  // Load & clone RE patterns.
  var re = self.re = __webpack_require__(104)(self.__opts__);

  // Define dynamic patterns
  var tlds = self.__tlds__.slice();

  self.onCompile();

  if (!self.__tlds_replaced__) {
    tlds.push(tlds_2ch_src_re);
  }
  tlds.push(re.src_xn);

  re.src_tlds = tlds.join('|');

  function untpl(tpl) { return tpl.replace('%TLDS%', re.src_tlds); }

  re.email_fuzzy      = RegExp(untpl(re.tpl_email_fuzzy), 'i');
  re.link_fuzzy       = RegExp(untpl(re.tpl_link_fuzzy), 'i');
  re.link_no_ip_fuzzy = RegExp(untpl(re.tpl_link_no_ip_fuzzy), 'i');
  re.host_fuzzy_test  = RegExp(untpl(re.tpl_host_fuzzy_test), 'i');

  //
  // Compile each schema
  //

  var aliases = [];

  self.__compiled__ = {}; // Reset compiled data

  function schemaError(name, val) {
    throw new Error('(LinkifyIt) Invalid schema "' + name + '": ' + val);
  }

  Object.keys(self.__schemas__).forEach(function (name) {
    var val = self.__schemas__[name];

    // skip disabled methods
    if (val === null) { return; }

    var compiled = { validate: null, link: null };

    self.__compiled__[name] = compiled;

    if (isObject(val)) {
      if (isRegExp(val.validate)) {
        compiled.validate = createValidator(val.validate);
      } else if (isFunction(val.validate)) {
        compiled.validate = val.validate;
      } else {
        schemaError(name, val);
      }

      if (isFunction(val.normalize)) {
        compiled.normalize = val.normalize;
      } else if (!val.normalize) {
        compiled.normalize = createNormalizer();
      } else {
        schemaError(name, val);
      }

      return;
    }

    if (isString(val)) {
      aliases.push(name);
      return;
    }

    schemaError(name, val);
  });

  //
  // Compile postponed aliases
  //

  aliases.forEach(function (alias) {
    if (!self.__compiled__[self.__schemas__[alias]]) {
      // Silently fail on missed schemas to avoid errons on disable.
      // schemaError(alias, self.__schemas__[alias]);
      return;
    }

    self.__compiled__[alias].validate =
      self.__compiled__[self.__schemas__[alias]].validate;
    self.__compiled__[alias].normalize =
      self.__compiled__[self.__schemas__[alias]].normalize;
  });

  //
  // Fake record for guessed links
  //
  self.__compiled__[''] = { validate: null, normalize: createNormalizer() };

  //
  // Build schema condition
  //
  var slist = Object.keys(self.__compiled__)
                      .filter(function (name) {
                        // Filter disabled & fake schemas
                        return name.length > 0 && self.__compiled__[name];
                      })
                      .map(escapeRE)
                      .join('|');
  // (?!_) cause 1.5x slowdown
  self.re.schema_test   = RegExp('(^|(?!_)(?:[><\uff5c]|' + re.src_ZPCc + '))(' + slist + ')', 'i');
  self.re.schema_search = RegExp('(^|(?!_)(?:[><\uff5c]|' + re.src_ZPCc + '))(' + slist + ')', 'ig');

  self.re.pretest       = RegExp(
                            '(' + self.re.schema_test.source + ')|' +
                            '(' + self.re.host_fuzzy_test.source + ')|' +
                            '@',
                            'i');

  //
  // Cleanup
  //

  resetScanCache(self);
}

/**
 * class Match
 *
 * Match result. Single element of array, returned by [[LinkifyIt#match]]
 **/
function Match(self, shift) {
  var start = self.__index__,
      end   = self.__last_index__,
      text  = self.__text_cache__.slice(start, end);

  /**
   * Match#schema -> String
   *
   * Prefix (protocol) for matched string.
   **/
  this.schema    = self.__schema__.toLowerCase();
  /**
   * Match#index -> Number
   *
   * First position of matched string.
   **/
  this.index     = start + shift;
  /**
   * Match#lastIndex -> Number
   *
   * Next position after matched string.
   **/
  this.lastIndex = end + shift;
  /**
   * Match#raw -> String
   *
   * Matched string.
   **/
  this.raw       = text;
  /**
   * Match#text -> String
   *
   * Notmalized text of matched string.
   **/
  this.text      = text;
  /**
   * Match#url -> String
   *
   * Normalized url of matched string.
   **/
  this.url       = text;
}

function createMatch(self, shift) {
  var match = new Match(self, shift);

  self.__compiled__[match.schema].normalize(match, self);

  return match;
}


/**
 * class LinkifyIt
 **/

/**
 * new LinkifyIt(schemas, options)
 * - schemas (Object): Optional. Additional schemas to validate (prefix/validator)
 * - options (Object): { fuzzyLink|fuzzyEmail|fuzzyIP: true|false }
 *
 * Creates new linkifier instance with optional additional schemas.
 * Can be called without `new` keyword for convenience.
 *
 * By default understands:
 *
 * - `http(s)://...` , `ftp://...`, `mailto:...` & `//...` links
 * - "fuzzy" links and emails (example.com, foo@bar.com).
 *
 * `schemas` is an object, where each key/value describes protocol/rule:
 *
 * - __key__ - link prefix (usually, protocol name with `:` at the end, `skype:`
 *   for example). `linkify-it` makes shure that prefix is not preceeded with
 *   alphanumeric char and symbols. Only whitespaces and punctuation allowed.
 * - __value__ - rule to check tail after link prefix
 *   - _String_ - just alias to existing rule
 *   - _Object_
 *     - _validate_ - validator function (should return matched length on success),
 *       or `RegExp`.
 *     - _normalize_ - optional function to normalize text & url of matched result
 *       (for example, for @twitter mentions).
 *
 * `options`:
 *
 * - __fuzzyLink__ - recognige URL-s without `http(s):` prefix. Default `true`.
 * - __fuzzyIP__ - allow IPs in fuzzy links above. Can conflict with some texts
 *   like version numbers. Default `false`.
 * - __fuzzyEmail__ - recognize emails without `mailto:` prefix.
 *
 **/
function LinkifyIt(schemas, options) {
  if (!(this instanceof LinkifyIt)) {
    return new LinkifyIt(schemas, options);
  }

  if (!options) {
    if (isOptionsObj(schemas)) {
      options = schemas;
      schemas = {};
    }
  }

  this.__opts__           = assign({}, defaultOptions, options);

  // Cache last tested result. Used to skip repeating steps on next `match` call.
  this.__index__          = -1;
  this.__last_index__     = -1; // Next scan position
  this.__schema__         = '';
  this.__text_cache__     = '';

  this.__schemas__        = assign({}, defaultSchemas, schemas);
  this.__compiled__       = {};

  this.__tlds__           = tlds_default;
  this.__tlds_replaced__  = false;

  this.re = {};

  compile(this);
}


/** chainable
 * LinkifyIt#add(schema, definition)
 * - schema (String): rule name (fixed pattern prefix)
 * - definition (String|RegExp|Object): schema definition
 *
 * Add new rule definition. See constructor description for details.
 **/
LinkifyIt.prototype.add = function add(schema, definition) {
  this.__schemas__[schema] = definition;
  compile(this);
  return this;
};


/** chainable
 * LinkifyIt#set(options)
 * - options (Object): { fuzzyLink|fuzzyEmail|fuzzyIP: true|false }
 *
 * Set recognition options for links without schema.
 **/
LinkifyIt.prototype.set = function set(options) {
  this.__opts__ = assign(this.__opts__, options);
  return this;
};


/**
 * LinkifyIt#test(text) -> Boolean
 *
 * Searches linkifiable pattern and returns `true` on success or `false` on fail.
 **/
LinkifyIt.prototype.test = function test(text) {
  // Reset scan cache
  this.__text_cache__ = text;
  this.__index__      = -1;

  if (!text.length) { return false; }

  var m, ml, me, len, shift, next, re, tld_pos, at_pos;

  // try to scan for link with schema - that's the most simple rule
  if (this.re.schema_test.test(text)) {
    re = this.re.schema_search;
    re.lastIndex = 0;
    while ((m = re.exec(text)) !== null) {
      len = this.testSchemaAt(text, m[2], re.lastIndex);
      if (len) {
        this.__schema__     = m[2];
        this.__index__      = m.index + m[1].length;
        this.__last_index__ = m.index + m[0].length + len;
        break;
      }
    }
  }

  if (this.__opts__.fuzzyLink && this.__compiled__['http:']) {
    // guess schemaless links
    tld_pos = text.search(this.re.host_fuzzy_test);
    if (tld_pos >= 0) {
      // if tld is located after found link - no need to check fuzzy pattern
      if (this.__index__ < 0 || tld_pos < this.__index__) {
        if ((ml = text.match(this.__opts__.fuzzyIP ? this.re.link_fuzzy : this.re.link_no_ip_fuzzy)) !== null) {

          shift = ml.index + ml[1].length;

          if (this.__index__ < 0 || shift < this.__index__) {
            this.__schema__     = '';
            this.__index__      = shift;
            this.__last_index__ = ml.index + ml[0].length;
          }
        }
      }
    }
  }

  if (this.__opts__.fuzzyEmail && this.__compiled__['mailto:']) {
    // guess schemaless emails
    at_pos = text.indexOf('@');
    if (at_pos >= 0) {
      // We can't skip this check, because this cases are possible:
      // 192.168.1.1@gmail.com, my.in@example.com
      if ((me = text.match(this.re.email_fuzzy)) !== null) {

        shift = me.index + me[1].length;
        next  = me.index + me[0].length;

        if (this.__index__ < 0 || shift < this.__index__ ||
            (shift === this.__index__ && next > this.__last_index__)) {
          this.__schema__     = 'mailto:';
          this.__index__      = shift;
          this.__last_index__ = next;
        }
      }
    }
  }

  return this.__index__ >= 0;
};


/**
 * LinkifyIt#pretest(text) -> Boolean
 *
 * Very quick check, that can give false positives. Returns true if link MAY BE
 * can exists. Can be used for speed optimization, when you need to check that
 * link NOT exists.
 **/
LinkifyIt.prototype.pretest = function pretest(text) {
  return this.re.pretest.test(text);
};


/**
 * LinkifyIt#testSchemaAt(text, name, position) -> Number
 * - text (String): text to scan
 * - name (String): rule (schema) name
 * - position (Number): text offset to check from
 *
 * Similar to [[LinkifyIt#test]] but checks only specific protocol tail exactly
 * at given position. Returns length of found pattern (0 on fail).
 **/
LinkifyIt.prototype.testSchemaAt = function testSchemaAt(text, schema, pos) {
  // If not supported schema check requested - terminate
  if (!this.__compiled__[schema.toLowerCase()]) {
    return 0;
  }
  return this.__compiled__[schema.toLowerCase()].validate(text, pos, this);
};


/**
 * LinkifyIt#match(text) -> Array|null
 *
 * Returns array of found link descriptions or `null` on fail. We strongly
 * recommend to use [[LinkifyIt#test]] first, for best speed.
 *
 * ##### Result match description
 *
 * - __schema__ - link schema, can be empty for fuzzy links, or `//` for
 *   protocol-neutral  links.
 * - __index__ - offset of matched text
 * - __lastIndex__ - index of next char after mathch end
 * - __raw__ - matched text
 * - __text__ - normalized text
 * - __url__ - link, generated from matched text
 **/
LinkifyIt.prototype.match = function match(text) {
  var shift = 0, result = [];

  // Try to take previous element from cache, if .test() called before
  if (this.__index__ >= 0 && this.__text_cache__ === text) {
    result.push(createMatch(this, shift));
    shift = this.__last_index__;
  }

  // Cut head if cache was used
  var tail = shift ? text.slice(shift) : text;

  // Scan string until end reached
  while (this.test(tail)) {
    result.push(createMatch(this, shift));

    tail = tail.slice(this.__last_index__);
    shift += this.__last_index__;
  }

  if (result.length) {
    return result;
  }

  return null;
};


/** chainable
 * LinkifyIt#tlds(list [, keepOld]) -> this
 * - list (Array): list of tlds
 * - keepOld (Boolean): merge with current list if `true` (`false` by default)
 *
 * Load (or merge) new tlds list. Those are user for fuzzy links (without prefix)
 * to avoid false positives. By default this algorythm used:
 *
 * - hostname with any 2-letter root zones are ok.
 * - biz|com|edu|gov|net|org|pro|web|xxx|aero|asia|coop|info|museum|name|shop|рф
 *   are ok.
 * - encoded (`xn--...`) root zones are ok.
 *
 * If list is replaced, then exact match for 2-chars root zones will be checked.
 **/
LinkifyIt.prototype.tlds = function tlds(list, keepOld) {
  list = Array.isArray(list) ? list : [ list ];

  if (!keepOld) {
    this.__tlds__ = list.slice();
    this.__tlds_replaced__ = true;
    compile(this);
    return this;
  }

  this.__tlds__ = this.__tlds__.concat(list)
                                  .sort()
                                  .filter(function (el, idx, arr) {
                                    return el !== arr[idx - 1];
                                  })
                                  .reverse();

  compile(this);
  return this;
};

/**
 * LinkifyIt#normalize(match)
 *
 * Default normalizer (if schema does not define it's own).
 **/
LinkifyIt.prototype.normalize = function normalize(match) {

  // Do minimal possible changes by default. Need to collect feedback prior
  // to move forward https://github.com/markdown-it/linkify-it/issues/1

  if (!match.schema) { match.url = 'http://' + match.url; }

  if (match.schema === 'mailto:' && !/^mailto:/i.test(match.url)) {
    match.url = 'mailto:' + match.url;
  }
};


/**
 * LinkifyIt#onCompile()
 *
 * Override to modify basic RegExp-s.
 **/
LinkifyIt.prototype.onCompile = function onCompile() {
};


module.exports = LinkifyIt;


/***/ }),
/* 104 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";



module.exports = function (opts) {
  var re = {};

  // Use direct extract instead of `regenerate` to reduse browserified size
  re.src_Any = __webpack_require__(24).source;
  re.src_Cc  = __webpack_require__(25).source;
  re.src_Z   = __webpack_require__(26).source;
  re.src_P   = __webpack_require__(15).source;

  // \p{\Z\P\Cc\CF} (white spaces + control + format + punctuation)
  re.src_ZPCc = [ re.src_Z, re.src_P, re.src_Cc ].join('|');

  // \p{\Z\Cc} (white spaces + control)
  re.src_ZCc = [ re.src_Z, re.src_Cc ].join('|');

  // Experimental. List of chars, completely prohibited in links
  // because can separate it from other part of text
  var text_separators = '[><\uff5c]';

  // All possible word characters (everything without punctuation, spaces & controls)
  // Defined via punctuation & spaces to save space
  // Should be something like \p{\L\N\S\M} (\w but without `_`)
  re.src_pseudo_letter       = '(?:(?!' + text_separators + '|' + re.src_ZPCc + ')' + re.src_Any + ')';
  // The same as abothe but without [0-9]
  // var src_pseudo_letter_non_d = '(?:(?![0-9]|' + src_ZPCc + ')' + src_Any + ')';

  ////////////////////////////////////////////////////////////////////////////////

  re.src_ip4 =

    '(?:(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)';

  // Prohibit any of "@/[]()" in user/pass to avoid wrong domain fetch.
  re.src_auth    = '(?:(?:(?!' + re.src_ZCc + '|[@/\\[\\]()]).)+@)?';

  re.src_port =

    '(?::(?:6(?:[0-4]\\d{3}|5(?:[0-4]\\d{2}|5(?:[0-2]\\d|3[0-5])))|[1-5]?\\d{1,4}))?';

  re.src_host_terminator =

    '(?=$|' + text_separators + '|' + re.src_ZPCc + ')(?!-|_|:\\d|\\.-|\\.(?!$|' + re.src_ZPCc + '))';

  re.src_path =

    '(?:' +
      '[/?#]' +
        '(?:' +
          '(?!' + re.src_ZCc + '|' + text_separators + '|[()[\\]{}.,"\'?!\\-]).|' +
          '\\[(?:(?!' + re.src_ZCc + '|\\]).)*\\]|' +
          '\\((?:(?!' + re.src_ZCc + '|[)]).)*\\)|' +
          '\\{(?:(?!' + re.src_ZCc + '|[}]).)*\\}|' +
          '\\"(?:(?!' + re.src_ZCc + '|["]).)+\\"|' +
          "\\'(?:(?!" + re.src_ZCc + "|[']).)+\\'|" +
          "\\'(?=" + re.src_pseudo_letter + '|[-]).|' +  // allow `I'm_king` if no pair found
          '\\.{2,3}[a-zA-Z0-9%/]|' + // github has ... in commit range links. Restrict to
                                     // - english
                                     // - percent-encoded
                                     // - parts of file path
                                     // until more examples found.
          '\\.(?!' + re.src_ZCc + '|[.]).|' +
          (opts && opts['---'] ?
            '\\-(?!--(?:[^-]|$))(?:-*)|' // `---` => long dash, terminate
          :
            '\\-+|'
          ) +
          '\\,(?!' + re.src_ZCc + ').|' +      // allow `,,,` in paths
          '\\!(?!' + re.src_ZCc + '|[!]).|' +
          '\\?(?!' + re.src_ZCc + '|[?]).' +
        ')+' +
      '|\\/' +
    ')?';

  re.src_email_name =

    '[\\-;:&=\\+\\$,\\"\\.a-zA-Z0-9_]+';

  re.src_xn =

    'xn--[a-z0-9\\-]{1,59}';

  // More to read about domain names
  // http://serverfault.com/questions/638260/

  re.src_domain_root =

    // Allow letters & digits (http://test1)
    '(?:' +
      re.src_xn +
      '|' +
      re.src_pseudo_letter + '{1,63}' +
    ')';

  re.src_domain =

    '(?:' +
      re.src_xn +
      '|' +
      '(?:' + re.src_pseudo_letter + ')' +
      '|' +
      // don't allow `--` in domain names, because:
      // - that can conflict with markdown &mdash; / &ndash;
      // - nobody use those anyway
      '(?:' + re.src_pseudo_letter + '(?:-(?!-)|' + re.src_pseudo_letter + '){0,61}' + re.src_pseudo_letter + ')' +
    ')';

  re.src_host =

    '(?:' +
    // Don't need IP check, because digits are already allowed in normal domain names
    //   src_ip4 +
    // '|' +
      '(?:(?:(?:' + re.src_domain + ')\\.)*' + re.src_domain/*_root*/ + ')' +
    ')';

  re.tpl_host_fuzzy =

    '(?:' +
      re.src_ip4 +
    '|' +
      '(?:(?:(?:' + re.src_domain + ')\\.)+(?:%TLDS%))' +
    ')';

  re.tpl_host_no_ip_fuzzy =

    '(?:(?:(?:' + re.src_domain + ')\\.)+(?:%TLDS%))';

  re.src_host_strict =

    re.src_host + re.src_host_terminator;

  re.tpl_host_fuzzy_strict =

    re.tpl_host_fuzzy + re.src_host_terminator;

  re.src_host_port_strict =

    re.src_host + re.src_port + re.src_host_terminator;

  re.tpl_host_port_fuzzy_strict =

    re.tpl_host_fuzzy + re.src_port + re.src_host_terminator;

  re.tpl_host_port_no_ip_fuzzy_strict =

    re.tpl_host_no_ip_fuzzy + re.src_port + re.src_host_terminator;


  ////////////////////////////////////////////////////////////////////////////////
  // Main rules

  // Rude test fuzzy links by host, for quick deny
  re.tpl_host_fuzzy_test =

    'localhost|www\\.|\\.\\d{1,3}\\.|(?:\\.(?:%TLDS%)(?:' + re.src_ZPCc + '|>|$))';

  re.tpl_email_fuzzy =

      '(^|' + text_separators + '|\\(|' + re.src_ZCc + ')(' + re.src_email_name + '@' + re.tpl_host_fuzzy_strict + ')';

  re.tpl_link_fuzzy =
      // Fuzzy link can't be prepended with .:/\- and non punctuation.
      // but can start with > (markdown blockquote)
      '(^|(?![.:/\\-_@])(?:[$+<=>^`|\uff5c]|' + re.src_ZPCc + '))' +
      '((?![$+<=>^`|\uff5c])' + re.tpl_host_port_fuzzy_strict + re.src_path + ')';

  re.tpl_link_no_ip_fuzzy =
      // Fuzzy link can't be prepended with .:/\- and non punctuation.
      // but can start with > (markdown blockquote)
      '(^|(?![.:/\\-_@])(?:[$+<=>^`|\uff5c]|' + re.src_ZPCc + '))' +
      '((?![$+<=>^`|\uff5c])' + re.tpl_host_port_no_ip_fuzzy_strict + re.src_path + ')';

  return re;
};


/***/ }),
/* 105 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(module, global) {var __WEBPACK_AMD_DEFINE_RESULT__;/*! https://mths.be/punycode v1.4.1 by @mathias */
;(function(root) {

	/** Detect free variables */
	var freeExports = typeof exports == 'object' && exports &&
		!exports.nodeType && exports;
	var freeModule = typeof module == 'object' && module &&
		!module.nodeType && module;
	var freeGlobal = typeof global == 'object' && global;
	if (
		freeGlobal.global === freeGlobal ||
		freeGlobal.window === freeGlobal ||
		freeGlobal.self === freeGlobal
	) {
		root = freeGlobal;
	}

	/**
	 * The `punycode` object.
	 * @name punycode
	 * @type Object
	 */
	var punycode,

	/** Highest positive signed 32-bit float value */
	maxInt = 2147483647, // aka. 0x7FFFFFFF or 2^31-1

	/** Bootstring parameters */
	base = 36,
	tMin = 1,
	tMax = 26,
	skew = 38,
	damp = 700,
	initialBias = 72,
	initialN = 128, // 0x80
	delimiter = '-', // '\x2D'

	/** Regular expressions */
	regexPunycode = /^xn--/,
	regexNonASCII = /[^\x20-\x7E]/, // unprintable ASCII chars + non-ASCII chars
	regexSeparators = /[\x2E\u3002\uFF0E\uFF61]/g, // RFC 3490 separators

	/** Error messages */
	errors = {
		'overflow': 'Overflow: input needs wider integers to process',
		'not-basic': 'Illegal input >= 0x80 (not a basic code point)',
		'invalid-input': 'Invalid input'
	},

	/** Convenience shortcuts */
	baseMinusTMin = base - tMin,
	floor = Math.floor,
	stringFromCharCode = String.fromCharCode,

	/** Temporary variable */
	key;

	/*--------------------------------------------------------------------------*/

	/**
	 * A generic error utility function.
	 * @private
	 * @param {String} type The error type.
	 * @returns {Error} Throws a `RangeError` with the applicable error message.
	 */
	function error(type) {
		throw new RangeError(errors[type]);
	}

	/**
	 * A generic `Array#map` utility function.
	 * @private
	 * @param {Array} array The array to iterate over.
	 * @param {Function} callback The function that gets called for every array
	 * item.
	 * @returns {Array} A new array of values returned by the callback function.
	 */
	function map(array, fn) {
		var length = array.length;
		var result = [];
		while (length--) {
			result[length] = fn(array[length]);
		}
		return result;
	}

	/**
	 * A simple `Array#map`-like wrapper to work with domain name strings or email
	 * addresses.
	 * @private
	 * @param {String} domain The domain name or email address.
	 * @param {Function} callback The function that gets called for every
	 * character.
	 * @returns {Array} A new string of characters returned by the callback
	 * function.
	 */
	function mapDomain(string, fn) {
		var parts = string.split('@');
		var result = '';
		if (parts.length > 1) {
			// In email addresses, only the domain name should be punycoded. Leave
			// the local part (i.e. everything up to `@`) intact.
			result = parts[0] + '@';
			string = parts[1];
		}
		// Avoid `split(regex)` for IE8 compatibility. See #17.
		string = string.replace(regexSeparators, '\x2E');
		var labels = string.split('.');
		var encoded = map(labels, fn).join('.');
		return result + encoded;
	}

	/**
	 * Creates an array containing the numeric code points of each Unicode
	 * character in the string. While JavaScript uses UCS-2 internally,
	 * this function will convert a pair of surrogate halves (each of which
	 * UCS-2 exposes as separate characters) into a single code point,
	 * matching UTF-16.
	 * @see `punycode.ucs2.encode`
	 * @see <https://mathiasbynens.be/notes/javascript-encoding>
	 * @memberOf punycode.ucs2
	 * @name decode
	 * @param {String} string The Unicode input string (UCS-2).
	 * @returns {Array} The new array of code points.
	 */
	function ucs2decode(string) {
		var output = [],
		    counter = 0,
		    length = string.length,
		    value,
		    extra;
		while (counter < length) {
			value = string.charCodeAt(counter++);
			if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
				// high surrogate, and there is a next character
				extra = string.charCodeAt(counter++);
				if ((extra & 0xFC00) == 0xDC00) { // low surrogate
					output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
				} else {
					// unmatched surrogate; only append this code unit, in case the next
					// code unit is the high surrogate of a surrogate pair
					output.push(value);
					counter--;
				}
			} else {
				output.push(value);
			}
		}
		return output;
	}

	/**
	 * Creates a string based on an array of numeric code points.
	 * @see `punycode.ucs2.decode`
	 * @memberOf punycode.ucs2
	 * @name encode
	 * @param {Array} codePoints The array of numeric code points.
	 * @returns {String} The new Unicode string (UCS-2).
	 */
	function ucs2encode(array) {
		return map(array, function(value) {
			var output = '';
			if (value > 0xFFFF) {
				value -= 0x10000;
				output += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);
				value = 0xDC00 | value & 0x3FF;
			}
			output += stringFromCharCode(value);
			return output;
		}).join('');
	}

	/**
	 * Converts a basic code point into a digit/integer.
	 * @see `digitToBasic()`
	 * @private
	 * @param {Number} codePoint The basic numeric code point value.
	 * @returns {Number} The numeric value of a basic code point (for use in
	 * representing integers) in the range `0` to `base - 1`, or `base` if
	 * the code point does not represent a value.
	 */
	function basicToDigit(codePoint) {
		if (codePoint - 48 < 10) {
			return codePoint - 22;
		}
		if (codePoint - 65 < 26) {
			return codePoint - 65;
		}
		if (codePoint - 97 < 26) {
			return codePoint - 97;
		}
		return base;
	}

	/**
	 * Converts a digit/integer into a basic code point.
	 * @see `basicToDigit()`
	 * @private
	 * @param {Number} digit The numeric value of a basic code point.
	 * @returns {Number} The basic code point whose value (when used for
	 * representing integers) is `digit`, which needs to be in the range
	 * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is
	 * used; else, the lowercase form is used. The behavior is undefined
	 * if `flag` is non-zero and `digit` has no uppercase form.
	 */
	function digitToBasic(digit, flag) {
		//  0..25 map to ASCII a..z or A..Z
		// 26..35 map to ASCII 0..9
		return digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);
	}

	/**
	 * Bias adaptation function as per section 3.4 of RFC 3492.
	 * https://tools.ietf.org/html/rfc3492#section-3.4
	 * @private
	 */
	function adapt(delta, numPoints, firstTime) {
		var k = 0;
		delta = firstTime ? floor(delta / damp) : delta >> 1;
		delta += floor(delta / numPoints);
		for (/* no initialization */; delta > baseMinusTMin * tMax >> 1; k += base) {
			delta = floor(delta / baseMinusTMin);
		}
		return floor(k + (baseMinusTMin + 1) * delta / (delta + skew));
	}

	/**
	 * Converts a Punycode string of ASCII-only symbols to a string of Unicode
	 * symbols.
	 * @memberOf punycode
	 * @param {String} input The Punycode string of ASCII-only symbols.
	 * @returns {String} The resulting string of Unicode symbols.
	 */
	function decode(input) {
		// Don't use UCS-2
		var output = [],
		    inputLength = input.length,
		    out,
		    i = 0,
		    n = initialN,
		    bias = initialBias,
		    basic,
		    j,
		    index,
		    oldi,
		    w,
		    k,
		    digit,
		    t,
		    /** Cached calculation results */
		    baseMinusT;

		// Handle the basic code points: let `basic` be the number of input code
		// points before the last delimiter, or `0` if there is none, then copy
		// the first basic code points to the output.

		basic = input.lastIndexOf(delimiter);
		if (basic < 0) {
			basic = 0;
		}

		for (j = 0; j < basic; ++j) {
			// if it's not a basic code point
			if (input.charCodeAt(j) >= 0x80) {
				error('not-basic');
			}
			output.push(input.charCodeAt(j));
		}

		// Main decoding loop: start just after the last delimiter if any basic code
		// points were copied; start at the beginning otherwise.

		for (index = basic > 0 ? basic + 1 : 0; index < inputLength; /* no final expression */) {

			// `index` is the index of the next character to be consumed.
			// Decode a generalized variable-length integer into `delta`,
			// which gets added to `i`. The overflow checking is easier
			// if we increase `i` as we go, then subtract off its starting
			// value at the end to obtain `delta`.
			for (oldi = i, w = 1, k = base; /* no condition */; k += base) {

				if (index >= inputLength) {
					error('invalid-input');
				}

				digit = basicToDigit(input.charCodeAt(index++));

				if (digit >= base || digit > floor((maxInt - i) / w)) {
					error('overflow');
				}

				i += digit * w;
				t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);

				if (digit < t) {
					break;
				}

				baseMinusT = base - t;
				if (w > floor(maxInt / baseMinusT)) {
					error('overflow');
				}

				w *= baseMinusT;

			}

			out = output.length + 1;
			bias = adapt(i - oldi, out, oldi == 0);

			// `i` was supposed to wrap around from `out` to `0`,
			// incrementing `n` each time, so we'll fix that now:
			if (floor(i / out) > maxInt - n) {
				error('overflow');
			}

			n += floor(i / out);
			i %= out;

			// Insert `n` at position `i` of the output
			output.splice(i++, 0, n);

		}

		return ucs2encode(output);
	}

	/**
	 * Converts a string of Unicode symbols (e.g. a domain name label) to a
	 * Punycode string of ASCII-only symbols.
	 * @memberOf punycode
	 * @param {String} input The string of Unicode symbols.
	 * @returns {String} The resulting Punycode string of ASCII-only symbols.
	 */
	function encode(input) {
		var n,
		    delta,
		    handledCPCount,
		    basicLength,
		    bias,
		    j,
		    m,
		    q,
		    k,
		    t,
		    currentValue,
		    output = [],
		    /** `inputLength` will hold the number of code points in `input`. */
		    inputLength,
		    /** Cached calculation results */
		    handledCPCountPlusOne,
		    baseMinusT,
		    qMinusT;

		// Convert the input in UCS-2 to Unicode
		input = ucs2decode(input);

		// Cache the length
		inputLength = input.length;

		// Initialize the state
		n = initialN;
		delta = 0;
		bias = initialBias;

		// Handle the basic code points
		for (j = 0; j < inputLength; ++j) {
			currentValue = input[j];
			if (currentValue < 0x80) {
				output.push(stringFromCharCode(currentValue));
			}
		}

		handledCPCount = basicLength = output.length;

		// `handledCPCount` is the number of code points that have been handled;
		// `basicLength` is the number of basic code points.

		// Finish the basic string - if it is not empty - with a delimiter
		if (basicLength) {
			output.push(delimiter);
		}

		// Main encoding loop:
		while (handledCPCount < inputLength) {

			// All non-basic code points < n have been handled already. Find the next
			// larger one:
			for (m = maxInt, j = 0; j < inputLength; ++j) {
				currentValue = input[j];
				if (currentValue >= n && currentValue < m) {
					m = currentValue;
				}
			}

			// Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,
			// but guard against overflow
			handledCPCountPlusOne = handledCPCount + 1;
			if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {
				error('overflow');
			}

			delta += (m - n) * handledCPCountPlusOne;
			n = m;

			for (j = 0; j < inputLength; ++j) {
				currentValue = input[j];

				if (currentValue < n && ++delta > maxInt) {
					error('overflow');
				}

				if (currentValue == n) {
					// Represent delta as a generalized variable-length integer
					for (q = delta, k = base; /* no condition */; k += base) {
						t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);
						if (q < t) {
							break;
						}
						qMinusT = q - t;
						baseMinusT = base - t;
						output.push(
							stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0))
						);
						q = floor(qMinusT / baseMinusT);
					}

					output.push(stringFromCharCode(digitToBasic(q, 0)));
					bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);
					delta = 0;
					++handledCPCount;
				}
			}

			++delta;
			++n;

		}
		return output.join('');
	}

	/**
	 * Converts a Punycode string representing a domain name or an email address
	 * to Unicode. Only the Punycoded parts of the input will be converted, i.e.
	 * it doesn't matter if you call it on a string that has already been
	 * converted to Unicode.
	 * @memberOf punycode
	 * @param {String} input The Punycoded domain name or email address to
	 * convert to Unicode.
	 * @returns {String} The Unicode representation of the given Punycode
	 * string.
	 */
	function toUnicode(input) {
		return mapDomain(input, function(string) {
			return regexPunycode.test(string)
				? decode(string.slice(4).toLowerCase())
				: string;
		});
	}

	/**
	 * Converts a Unicode string representing a domain name or an email address to
	 * Punycode. Only the non-ASCII parts of the domain name will be converted,
	 * i.e. it doesn't matter if you call it with a domain that's already in
	 * ASCII.
	 * @memberOf punycode
	 * @param {String} input The domain name or email address to convert, as a
	 * Unicode string.
	 * @returns {String} The Punycode representation of the given domain name or
	 * email address.
	 */
	function toASCII(input) {
		return mapDomain(input, function(string) {
			return regexNonASCII.test(string)
				? 'xn--' + encode(string)
				: string;
		});
	}

	/*--------------------------------------------------------------------------*/

	/** Define the public API */
	punycode = {
		/**
		 * A string representing the current Punycode.js version number.
		 * @memberOf punycode
		 * @type String
		 */
		'version': '1.4.1',
		/**
		 * An object of methods to convert from JavaScript's internal character
		 * representation (UCS-2) to Unicode code points, and back.
		 * @see <https://mathiasbynens.be/notes/javascript-encoding>
		 * @memberOf punycode
		 * @type Object
		 */
		'ucs2': {
			'decode': ucs2decode,
			'encode': ucs2encode
		},
		'decode': decode,
		'encode': encode,
		'toASCII': toASCII,
		'toUnicode': toUnicode
	};

	/** Expose `punycode` */
	// Some AMD build optimizers, like r.js, check for specific condition patterns
	// like the following:
	if (
		true
	) {
		!(__WEBPACK_AMD_DEFINE_RESULT__ = (function() {
			return punycode;
		}).call(exports, __webpack_require__, exports, module),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	} else if (freeExports && freeModule) {
		if (module.exports == freeExports) {
			// in Node.js, io.js, or RingoJS v0.8.0+
			freeModule.exports = punycode;
		} else {
			// in Narwhal or RingoJS v0.7.0-
			for (key in punycode) {
				punycode.hasOwnProperty(key) && (freeExports[key] = punycode[key]);
			}
		}
	} else {
		// in Rhino or a web browser
		root.punycode = punycode;
	}

}(this));

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(106)(module), __webpack_require__(8)))

/***/ }),
/* 106 */
/***/ (function(module, exports) {

module.exports = function(module) {
	if(!module.webpackPolyfill) {
		module.deprecate = function() {};
		module.paths = [];
		// module.parent = undefined by default
		if(!module.children) module.children = [];
		Object.defineProperty(module, "loaded", {
			enumerable: true,
			get: function() {
				return module.l;
			}
		});
		Object.defineProperty(module, "id", {
			enumerable: true,
			get: function() {
				return module.i;
			}
		});
		module.webpackPolyfill = 1;
	}
	return module;
};


/***/ }),
/* 107 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// markdown-it default options




module.exports = {
  options: {
    html:         false,        // Enable HTML tags in source
    xhtmlOut:     false,        // Use '/' to close single tags (<br />)
    breaks:       false,        // Convert '\n' in paragraphs into <br>
    langPrefix:   'language-',  // CSS language prefix for fenced blocks
    linkify:      false,        // autoconvert URL-like texts to links

    // Enable some language-neutral replacements + quotes beautification
    typographer:  false,

    // Double + single quotes replacement pairs, when typographer enabled,
    // and smartquotes on. Could be either a String or an Array.
    //
    // For example, you can use '«»„“' for Russian, '„“‚‘' for German,
    // and ['«\xA0', '\xA0»', '‹\xA0', '\xA0›'] for French (including nbsp).
    quotes: '\u201c\u201d\u2018\u2019', /* “”‘’ */

    // Highlighter function. Should return escaped HTML,
    // or '' if the source string is not changed and should be escaped externaly.
    // If result starts with <pre... internal wrapper is skipped.
    //
    // function (/*str, lang*/) { return ''; }
    //
    highlight: null,

    maxNesting:   100            // Internal protection, recursion limit
  },

  components: {

    core: {},
    block: {},
    inline: {}
  }
};


/***/ }),
/* 108 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// "Zero" preset, with nothing enabled. Useful for manual configuring of simple
// modes. For example, to parse bold/italic only.




module.exports = {
  options: {
    html:         false,        // Enable HTML tags in source
    xhtmlOut:     false,        // Use '/' to close single tags (<br />)
    breaks:       false,        // Convert '\n' in paragraphs into <br>
    langPrefix:   'language-',  // CSS language prefix for fenced blocks
    linkify:      false,        // autoconvert URL-like texts to links

    // Enable some language-neutral replacements + quotes beautification
    typographer:  false,

    // Double + single quotes replacement pairs, when typographer enabled,
    // and smartquotes on. Could be either a String or an Array.
    //
    // For example, you can use '«»„“' for Russian, '„“‚‘' for German,
    // and ['«\xA0', '\xA0»', '‹\xA0', '\xA0›'] for French (including nbsp).
    quotes: '\u201c\u201d\u2018\u2019', /* “”‘’ */

    // Highlighter function. Should return escaped HTML,
    // or '' if the source string is not changed and should be escaped externaly.
    // If result starts with <pre... internal wrapper is skipped.
    //
    // function (/*str, lang*/) { return ''; }
    //
    highlight: null,

    maxNesting:   20            // Internal protection, recursion limit
  },

  components: {

    core: {
      rules: [
        'normalize',
        'block',
        'inline'
      ]
    },

    block: {
      rules: [
        'paragraph'
      ]
    },

    inline: {
      rules: [
        'text'
      ],
      rules2: [
        'balance_pairs',
        'text_collapse'
      ]
    }
  }
};


/***/ }),
/* 109 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Commonmark default options




module.exports = {
  options: {
    html:         true,         // Enable HTML tags in source
    xhtmlOut:     true,         // Use '/' to close single tags (<br />)
    breaks:       false,        // Convert '\n' in paragraphs into <br>
    langPrefix:   'language-',  // CSS language prefix for fenced blocks
    linkify:      false,        // autoconvert URL-like texts to links

    // Enable some language-neutral replacements + quotes beautification
    typographer:  false,

    // Double + single quotes replacement pairs, when typographer enabled,
    // and smartquotes on. Could be either a String or an Array.
    //
    // For example, you can use '«»„“' for Russian, '„“‚‘' for German,
    // and ['«\xA0', '\xA0»', '‹\xA0', '\xA0›'] for French (including nbsp).
    quotes: '\u201c\u201d\u2018\u2019', /* “”‘’ */

    // Highlighter function. Should return escaped HTML,
    // or '' if the source string is not changed and should be escaped externaly.
    // If result starts with <pre... internal wrapper is skipped.
    //
    // function (/*str, lang*/) { return ''; }
    //
    highlight: null,

    maxNesting:   20            // Internal protection, recursion limit
  },

  components: {

    core: {
      rules: [
        'normalize',
        'block',
        'inline'
      ]
    },

    block: {
      rules: [
        'blockquote',
        'code',
        'fence',
        'heading',
        'hr',
        'html_block',
        'lheading',
        'list',
        'reference',
        'paragraph'
      ]
    },

    inline: {
      rules: [
        'autolink',
        'backticks',
        'emphasis',
        'entity',
        'escape',
        'html_inline',
        'image',
        'link',
        'newline',
        'text'
      ],
      rules2: [
        'balance_pairs',
        'emphasis',
        'text_collapse'
      ]
    }
  }
};


/***/ }),
/* 110 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _jquery = __webpack_require__(1);

var _jquery2 = _interopRequireDefault(_jquery);

var _tuiCodeSnippet = __webpack_require__(2);

var _tuiCodeSnippet2 = _interopRequireDefault(_tuiCodeSnippet);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * @fileoverview Implements htmlSanitizer
 * @author NHN Ent. FE Development Lab <dl_javascript@nhnent.com>
 */
var HTML_ATTR_LIST_RX = new RegExp('^(abbr|align|alt|axis|bgcolor|border|cellpadding|cellspacing|class|clear|' + 'color|cols|compact|coords|dir|face|headers|height|hreflang|hspace|' + 'ismap|lang|language|nohref|nowrap|rel|rev|rows|rules|' + 'scope|scrolling|shape|size|span|start|summary|tabindex|target|title|type|' + 'valign|value|vspace|width|checked|mathvariant|encoding|id|name|' + 'background|cite|href|longdesc|src|usemap|xlink:href|data-+|checked|style)', 'g');

var SVG_ATTR_LIST_RX = new RegExp('^(accent-height|accumulate|additive|alphabetic|arabic-form|ascent|' + 'baseProfile|bbox|begin|by|calcMode|cap-height|class|color|color-rendering|content|' + 'cx|cy|d|dx|dy|descent|display|dur|end|fill|fill-rule|font-family|font-size|font-stretch|' + 'font-style|font-variant|font-weight|from|fx|fy|g1|g2|glyph-name|gradientUnits|hanging|' + 'height|horiz-adv-x|horiz-origin-x|ideographic|k|keyPoints|keySplines|keyTimes|lang|' + 'marker-end|marker-mid|marker-start|markerHeight|markerUnits|markerWidth|mathematical|' + 'max|min|offset|opacity|orient|origin|overline-position|overline-thickness|panose-1|' + 'path|pathLength|points|preserveAspectRatio|r|refX|refY|repeatCount|repeatDur|' + 'requiredExtensions|requiredFeatures|restart|rotate|rx|ry|slope|stemh|stemv|stop-color|' + 'stop-opacity|strikethrough-position|strikethrough-thickness|stroke|stroke-dasharray|' + 'stroke-dashoffset|stroke-linecap|stroke-linejoin|stroke-miterlimit|stroke-opacity|' + 'stroke-width|systemLanguage|target|text-anchor|to|transform|type|u1|u2|underline-position|' + 'underline-thickness|unicode|unicode-range|units-per-em|values|version|viewBox|visibility|' + 'width|widths|x|x-height|x1|x2|xlink:actuate|xlink:arcrole|xlink:role|xlink:show|xlink:title|' + 'xlink:type|xml:base|xml:lang|xml:space|xmlns|xmlns:xlink|y|y1|y2|zoomAndPan)', 'g');

/**
 * htmlSanitizer
 * @param {string|Node} html html or Node
 * @param {boolean} [needHtmlText] pass true if need html text
 * @returns {string|DocumentFragment} result
 * @ignore
 */
function htmlSanitizer(html, needHtmlText) {
  var $html = (0, _jquery2.default)('<div />');

  html = html.replace(/<!--[\s\S]*?-->/g, '');

  $html.append(html);

  removeUnnecessaryTags($html);
  leaveOnlyWhitelistAttribute($html);

  return finalizeHtml($html, needHtmlText);
}

/**
 * Remove unnecessary tags
 * @private
 * @param {jQuery} $html jQuery instance
 */
function removeUnnecessaryTags($html) {
  $html.find('script, iframe, textarea, form, button, select, meta, style, link, title').remove();
}

/**
 * Leave only white list attributes
 * @private
 * @param {jQuery} $html jQuery instance
 */
function leaveOnlyWhitelistAttribute($html) {
  $html.find('*').each(function (index, node) {
    var attrs = node.attributes;
    var blacklist = _tuiCodeSnippet2.default.toArray(attrs).filter(function (attr) {
      var isHTMLAttr = attr.name.match(HTML_ATTR_LIST_RX);
      var isSVGAttr = attr.name.match(SVG_ATTR_LIST_RX);

      return !isHTMLAttr && !isSVGAttr;
    });

    _tuiCodeSnippet2.default.forEachArray(blacklist, function (attr) {
      // Edge svg attribute name returns uppercase bug. error guard.
      // https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/5579311/
      if (attrs.getNamedItem(attr.name)) {
        attrs.removeNamedItem(attr.name);
      }
    });
  });
}

/**
 * Finalize html result
 * @private
 * @param {jQuery} $html jQuery instance
 * @param {boolean} needHtmlText pass true if need html text
 * @returns {string|DocumentFragment} result
 */
function finalizeHtml($html, needHtmlText) {
  var returnValue = void 0;

  if (needHtmlText) {
    returnValue = $html[0].innerHTML;
  } else {
    var frag = document.createDocumentFragment();
    var childNodes = _tuiCodeSnippet2.default.toArray($html[0].childNodes);
    var length = childNodes.length;


    for (var i = 0; i < length; i += 1) {
      frag.appendChild(childNodes[i]);
    }
    returnValue = frag;
  }

  return returnValue;
}

exports.default = htmlSanitizer;

/***/ }),
/* 111 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


// Copyright (c) 2016, Revin Guillen.
// Distributed under an MIT license: https://github.com/revin/markdown-it-task-lists/

/**
 * @fileoverview Implements markdownitTaskPlugin
 * @modifier Sungho Kim(sungho-kim@nhnent.com) FE Development Lab/NHN Ent.
 * @modifier Junghwan Park(junghwan.park@nhnent.com) FE Development Lab/NHN Ent.
 */
/* eslint-disable */

/**
 * Task list renderer for Markdown-it
 * @param {object} markdownit Markdown-it instance
 * @ignore
 */
var MarkdownitTaskRenderer = function MarkdownitTaskRenderer(markdownit) {
    markdownit.core.ruler.after('inline', 'tui-task-list', function (state) {
        var TASK_LIST_ITEM_CLASS_NAME = 'task-list-item';
        var CHECKED_CLASS_NAME = 'checked';
        var tokens = state.tokens;
        var className;
        var tokenIndex;

        // tokenIndex=0 'ul', tokenIndex=1 'li', tokenIndex=2 'p_open'
        for (tokenIndex = 2; tokenIndex < tokens.length; tokenIndex += 1) {
            if (isTaskListItemToken(tokens, tokenIndex)) {
                if (isChecked(tokens[tokenIndex])) {
                    className = TASK_LIST_ITEM_CLASS_NAME + ' ' + CHECKED_CLASS_NAME;
                } else {
                    className = TASK_LIST_ITEM_CLASS_NAME;
                }

                removeMarkdownTaskFormatText(tokens[tokenIndex]);

                setTokenAttribute(tokens[tokenIndex - 2], 'class', className);
                setTokenAttribute(tokens[tokenIndex - 2], 'data-te-task', '');
            }
        }
    });
};

/**
 * Remove task format text for rendering
 * @param {object} token Token object
 * @ignore
 */
function removeMarkdownTaskFormatText(token) {
    // '[X] ' length is 4
    // FIXED: we don't need first space
    token.content = token.content.slice(4);
    token.children[0].content = token.children[0].content.slice(4);
}

/**
 * Return boolean value whether task checked or not
 * @param {object} token Token object
 * @returns {boolean}
 * @ignore
 */
function isChecked(token) {
    var checked = false;

    if (token.content.indexOf('[x]') === 0 || token.content.indexOf('[X]') === 0) {
        checked = true;
    }

    return checked;
}

/**
 * Set attribute of passed token
 * @param {object} token Token object
 * @param {string} attributeName Attribute name for set
 * @param {string} attributeValue Attribute value for set
 * @ignore
 */
function setTokenAttribute(token, attributeName, attributeValue) {
    var index = token.attrIndex(attributeName);
    var attr = [attributeName, attributeValue];

    if (index < 0) {
        token.attrPush(attr);
    } else {
        token.attrs[index] = attr;
    }
}

/**
 * Return boolean value whether task list item or not
 * @param {array} tokens Token object
 * @param {number} index Number of token index
 * @returns {boolean}
 * @ignore
 */
function isTaskListItemToken(tokens, index) {
    return tokens[index].type === 'inline' && tokens[index - 1].type === 'paragraph_open' && tokens[index - 2].type === 'list_item_open' && (tokens[index].content.indexOf('[ ]') === 0 || tokens[index].content.indexOf('[x]') === 0 || tokens[index].content.indexOf('[X]') === 0);
}
/* eslint-enable */

module.exports = MarkdownitTaskRenderer;

/***/ }),
/* 112 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


// Copyright (c) 2016, Revin Guillen.
// Distributed under an MIT license: https://github.com/revin/markdown-it-task-lists/
/* eslint-disable */
/**
 * @fileoverview Implements markdownitCodeBlockPlugin
 * @modifier NHN Ent. FE Development Lab <dl_javascript@nhnent.com>
 */

/**
 * Code block renderer for Markdown-it
 * @param {object} markdownit Markdown-it instance
 * @ignore
 */
var MarkdownitCodeBlockRenderer = function MarkdownitCodeBlockRenderer(markdownit) {
    markdownit.core.ruler.after('block', 'tui-code-block', function (state) {
        var DEFAULT_NUMBER_OF_BACKTICKS = 3;
        var tokens = state.tokens;
        var currentToken, tokenIndex, numberOfBackticks;

        for (tokenIndex = 0; tokenIndex < tokens.length; tokenIndex += 1) {
            currentToken = tokens[tokenIndex];

            if (isCodeFenceToken(currentToken)) {
                numberOfBackticks = currentToken.markup.length;
                if (numberOfBackticks > DEFAULT_NUMBER_OF_BACKTICKS) {
                    setTokenAttribute(currentToken, 'data-backticks', numberOfBackticks, true);
                }
                if (currentToken.info) {
                    setTokenAttribute(currentToken, 'data-language', escape(currentToken.info.replace(' ', ''), true));
                }
            }
        }
    });
};

/**
 * Set attribute of passed token
 * @param {object} token Token object
 * @param {string} attributeName Attribute name for set
 * @param {string} attributeValue Attribute value for set
 * @ignore
 */
function setTokenAttribute(token, attributeName, attributeValue) {
    var index = token.attrIndex(attributeName);
    var attr = [attributeName, attributeValue];

    if (index < 0) {
        token.attrPush(attr);
    } else {
        token.attrs[index] = attr;
    }
}
/**
 * Return boolean value whether passed token is code fence or not
 * @param {object} token Token object
 * @returns {boolean}
 * @ignore
 */
function isCodeFenceToken(token) {
    return token.block === true && token.tag === 'code' && token.type === 'fence';
}

/**
 * escape code from markdown-it
 * @param {string} html HTML string
 * @param {string} encode Boolean value of whether encode or not
 * @returns {string}
 * @ignore
 */
function escape(html, encode) {
    return html.replace(!encode ? /&(?!#?\w+;)/g : /&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/"/g, '&quot;').replace(/'/g, '&#39;');
}
/* eslint-enable */

module.exports = MarkdownitCodeBlockRenderer;

/***/ }),
/* 113 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


// Copyright (c) 2014 Vitaly Puzrin, Alex Kocharin.
// Distributed under an ISC license: https://github.com/markdown-it/markdown-it/
/**
 * @fileoverview Implements MarkdownItCodeRenderer
 * @modifier NHN Ent. FE Development Lab <dl_javascript@nhnent.com>
 */

/* eslint-disable */
module.exports = function code(state, startLine, endLine /*, silent*/) {
    // Added by Junghwan Park
    var FIND_LIST_RX = / {0,3}(?:-|\*|\d\.) /;
    var lines = state.src.split('\n');
    var currentLine = lines[startLine];
    // Added by Junghwan Park

    var nextLine,
        last,
        token,
        emptyLines = 0;

    // Add condition by Junghwan Park
    if (currentLine.match(FIND_LIST_RX) || state.sCount[startLine] - state.blkIndent < 4) {
        // Add condition by Junghwan Park
        return false;
    }

    last = nextLine = startLine + 1;

    while (nextLine < endLine) {
        if (state.isEmpty(nextLine)) {
            emptyLines++;

            // workaround for lists: 2 blank lines should terminate indented
            // code block, but not fenced code block
            if (emptyLines >= 2 && state.parentType === 'list') {
                break;
            }

            nextLine++;
            continue;
        }

        emptyLines = 0;

        if (state.sCount[nextLine] - state.blkIndent >= 4) {
            nextLine++;
            last = nextLine;
            continue;
        }
        break;
    }

    state.line = last;

    token = state.push('code_block', 'code', 0);
    token.content = state.getLines(startLine, last, 4 + state.blkIndent, true);
    token.map = [startLine, state.line];

    return true;
};
/* eslint-enable */

/***/ }),
/* 114 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Copyright (c) 2014 Vitaly Puzrin, Alex Kocharin.
// Distributed under MIT license: https://github.com/markdown-it/markdown-it/
/**
 * @fileoverview Implements markdownitCodeBlockQuoteRenderer
 * @modifier NHN Ent. FE Development Lab <dl_javascript@nhnent.com>
 */

/* eslint-disable */

// Block quotes



// prevent quote, pre in list #811
// ref: #989
// #811 START
// var isSpace = require('../common/utils').isSpace;

function isSpace(code) {
  switch (code) {
    case 0x09:
    case 0x20:
      return true;
  }
  return false;
}
// #811 END

module.exports = function blockquote(state, startLine, endLine, silent) {
  var adjustTab,
      ch,
      i,
      initial,
      l,
      lastLineEmpty,
      lines,
      nextLine,
      offset,
      oldBMarks,
      oldBSCount,
      oldIndent,
      oldParentType,
      oldSCount,
      oldTShift,
      spaceAfterMarker,
      terminate,
      terminatorRules,
      token,
      wasOutdented,
      oldLineMax = state.lineMax,
      pos = state.bMarks[startLine] + state.tShift[startLine],
      max = state.eMarks[startLine];

  // #811 START
  var FIND_LIST_RX = /(?:-|\*|\d+\.) {1,4}(?:> {0,3})[^>]*$/;
  var sourceLines = state.src.split('\n');
  var currentLine = sourceLines[startLine];
  // #811 END

  // if it's indented more than 3 spaces, it should be a code block
  if (state.sCount[startLine] - state.blkIndent >= 4) {
    return false;
  }

  // check the block quote marker
  if (state.src.charCodeAt(pos++) !== 0x3E /* > */) {
      return false;
    }
  // #811 START
  // check block quote in list
  if (currentLine.match(FIND_LIST_RX) /*&& !currentLine.match(/^ {0,6}>/)*/) {
      return false;
    }
  // #811 END

  // we know that it's going to be a valid blockquote,
  // so no point trying to find the end of it in silent mode
  if (silent) {
    return true;
  }

  // skip spaces after ">" and re-calculate offset
  initial = offset = state.sCount[startLine] + pos - (state.bMarks[startLine] + state.tShift[startLine]);

  // skip one optional space after '>'
  if (state.src.charCodeAt(pos) === 0x20 /* space */) {
      // ' >   test '
      //     ^ -- position start of line here:
      pos++;
      initial++;
      offset++;
      adjustTab = false;
      spaceAfterMarker = true;
    } else if (state.src.charCodeAt(pos) === 0x09 /* tab */) {
      spaceAfterMarker = true;

      if ((state.bsCount[startLine] + offset) % 4 === 3) {
        // '  >\t  test '
        //       ^ -- position start of line here (tab has width===1)
        pos++;
        initial++;
        offset++;
        adjustTab = false;
      } else {
        // ' >\t  test '
        //    ^ -- position start of line here + shift bsCount slightly
        //         to make extra space appear
        adjustTab = true;
      }
    } else {
    spaceAfterMarker = false;
  }

  oldBMarks = [state.bMarks[startLine]];
  state.bMarks[startLine] = pos;

  while (pos < max) {
    ch = state.src.charCodeAt(pos);

    if (isSpace(ch)) {
      if (ch === 0x09) {
        offset += 4 - (offset + state.bsCount[startLine] + (adjustTab ? 1 : 0)) % 4;
      } else {
        offset++;
      }
    } else {
      break;
    }

    pos++;
  }

  oldBSCount = [state.bsCount[startLine]];
  state.bsCount[startLine] = state.sCount[startLine] + 1 + (spaceAfterMarker ? 1 : 0);

  lastLineEmpty = pos >= max;

  oldSCount = [state.sCount[startLine]];
  state.sCount[startLine] = offset - initial;

  oldTShift = [state.tShift[startLine]];
  state.tShift[startLine] = pos - state.bMarks[startLine];

  terminatorRules = state.md.block.ruler.getRules('blockquote');

  oldParentType = state.parentType;
  state.parentType = 'blockquote';
  wasOutdented = false;

  // Search the end of the block
  //
  // Block ends with either:
  //  1. an empty line outside:
  //     ```
  //     > test
  //
  //     ```
  //  2. an empty line inside:
  //     ```
  //     >
  //     test
  //     ```
  //  3. another tag:
  //     ```
  //     > test
  //      - - -
  //     ```
  for (nextLine = startLine + 1; nextLine < endLine; nextLine++) {
    // check if it's outdented, i.e. it's inside list item and indented
    // less than said list item:
    //
    // ```
    // 1. anything
    //    > current blockquote
    // 2. checking this line
    // ```
    if (state.sCount[nextLine] < state.blkIndent) wasOutdented = true;

    pos = state.bMarks[nextLine] + state.tShift[nextLine];
    max = state.eMarks[nextLine];

    if (pos >= max) {
      // Case 1: line is not inside the blockquote, and this line is empty.
      break;
    }

    if (state.src.charCodeAt(pos++) === 0x3E /* > */ && !wasOutdented) {
      // This line is inside the blockquote.

      // skip spaces after ">" and re-calculate offset
      initial = offset = state.sCount[nextLine] + pos - (state.bMarks[nextLine] + state.tShift[nextLine]);

      // skip one optional space after '>'
      if (state.src.charCodeAt(pos) === 0x20 /* space */) {
          // ' >   test '
          //     ^ -- position start of line here:
          pos++;
          initial++;
          offset++;
          adjustTab = false;
          spaceAfterMarker = true;
        } else if (state.src.charCodeAt(pos) === 0x09 /* tab */) {
          spaceAfterMarker = true;

          if ((state.bsCount[nextLine] + offset) % 4 === 3) {
            // '  >\t  test '
            //       ^ -- position start of line here (tab has width===1)
            pos++;
            initial++;
            offset++;
            adjustTab = false;
          } else {
            // ' >\t  test '
            //    ^ -- position start of line here + shift bsCount slightly
            //         to make extra space appear
            adjustTab = true;
          }
        } else {
        spaceAfterMarker = false;
      }

      oldBMarks.push(state.bMarks[nextLine]);
      state.bMarks[nextLine] = pos;

      while (pos < max) {
        ch = state.src.charCodeAt(pos);

        if (isSpace(ch)) {
          if (ch === 0x09) {
            offset += 4 - (offset + state.bsCount[nextLine] + (adjustTab ? 1 : 0)) % 4;
          } else {
            offset++;
          }
        } else {
          break;
        }

        pos++;
      }

      lastLineEmpty = pos >= max;

      oldBSCount.push(state.bsCount[nextLine]);
      state.bsCount[nextLine] = state.sCount[nextLine] + 1 + (spaceAfterMarker ? 1 : 0);

      oldSCount.push(state.sCount[nextLine]);
      state.sCount[nextLine] = offset - initial;

      oldTShift.push(state.tShift[nextLine]);
      state.tShift[nextLine] = pos - state.bMarks[nextLine];
      continue;
    }

    // Case 2: line is not inside the blockquote, and the last line was empty.
    if (lastLineEmpty) {
      break;
    }

    // Case 3: another tag found.
    terminate = false;
    for (i = 0, l = terminatorRules.length; i < l; i++) {
      if (terminatorRules[i](state, nextLine, endLine, true)) {
        terminate = true;
        break;
      }
    }

    if (terminate) {
      // Quirk to enforce "hard termination mode" for paragraphs;
      // normally if you call `tokenize(state, startLine, nextLine)`,
      // paragraphs will look below nextLine for paragraph continuation,
      // but if blockquote is terminated by another tag, they shouldn't
      state.lineMax = nextLine;

      if (state.blkIndent !== 0) {
        // state.blkIndent was non-zero, we now set it to zero,
        // so we need to re-calculate all offsets to appear as
        // if indent wasn't changed
        oldBMarks.push(state.bMarks[nextLine]);
        oldBSCount.push(state.bsCount[nextLine]);
        oldTShift.push(state.tShift[nextLine]);
        oldSCount.push(state.sCount[nextLine]);
        state.sCount[nextLine] -= state.blkIndent;
      }

      break;
    }

    oldBMarks.push(state.bMarks[nextLine]);
    oldBSCount.push(state.bsCount[nextLine]);
    oldTShift.push(state.tShift[nextLine]);
    oldSCount.push(state.sCount[nextLine]);

    // A negative indentation means that this is a paragraph continuation
    //
    state.sCount[nextLine] = -1;
  }

  oldIndent = state.blkIndent;
  state.blkIndent = 0;

  token = state.push('blockquote_open', 'blockquote', 1);
  token.markup = '>';
  token.map = lines = [startLine, 0];

  state.md.block.tokenize(state, startLine, nextLine);

  token = state.push('blockquote_close', 'blockquote', -1);
  token.markup = '>';

  state.lineMax = oldLineMax;
  state.parentType = oldParentType;
  lines[1] = state.line;

  // Restore original tShift; this might not be necessary since the parser
  // has already been here, but just to make sure we can do that.
  for (i = 0; i < oldTShift.length; i++) {
    state.bMarks[i + startLine] = oldBMarks[i];
    state.tShift[i + startLine] = oldTShift[i];
    state.sCount[i + startLine] = oldSCount[i];
    state.bsCount[i + startLine] = oldBSCount[i];
  }
  state.blkIndent = oldIndent;

  return true;
};

/***/ }),
/* 115 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


// Copyright (c) 2014 Vitaly Puzrin, Alex Kocharin.
// Distributed under an ISC license: https://github.com/markdown-it/markdown-it/

/**
 * @fileoverview Implements markdownitTableRenderer
 * @modifier NHN Ent. FE Development Lab <dl_javascript@nhnent.com>
 */

/*eslint-disable */
function getLine(state, line) {
    var pos = state.bMarks[line] + state.blkIndent,
        max = state.eMarks[line];

    return state.src.substr(pos, max - pos);
}

function escapedSplit(str) {
    var result = [],
        pos = 0,
        max = str.length,
        ch,
        escapes = 0,
        lastPos = 0,
        backTicked = false,
        lastBackTick = 0;

    ch = str.charCodeAt(pos);

    while (pos < max) {
        if (ch === 0x60 /* ` */ && escapes % 2 === 0) {
            backTicked = !backTicked;
            lastBackTick = pos;
        } else if (ch === 0x7c /* | */ && escapes % 2 === 0 && !backTicked) {
            result.push(str.substring(lastPos, pos));
            lastPos = pos + 1;
        } else if (ch === 0x5c /* \ */) {
                escapes += 1;
            } else {
            escapes = 0;
        }

        pos += 1;

        // If there was an un-closed backtick, go back to just after
        // the last backtick, but as if it was a normal character
        if (pos === max && backTicked) {
            backTicked = false;
            pos = lastBackTick + 1;
        }

        ch = str.charCodeAt(pos);
    }

    result.push(str.substring(lastPos));

    return result;
}

module.exports = function table(state, startLine, endLine, silent) {
    var ch, lineText, pos, i, nextLine, columns, columnCount, token, aligns, alignCount, t, tableLines, tbodyLines;

    // should have at least three lines
    if (startLine + 2 > endLine) {
        return false;
    }

    nextLine = startLine + 1;

    if (state.sCount[nextLine] < state.blkIndent) {
        return false;
    }

    // first character of the second line should be '|' or '-'

    pos = state.bMarks[nextLine] + state.tShift[nextLine];
    if (pos >= state.eMarks[nextLine]) {
        return false;
    }

    ch = state.src.charCodeAt(pos);
    if (ch !== 0x7C /* | */ && ch !== 0x2D /* - */ && ch !== 0x3A /* : */) {
            return false;
        }

    lineText = getLine(state, startLine + 1);
    if (!/^[-:| ]+$/.test(lineText)) {
        return false;
    }

    columns = lineText.split('|');
    aligns = [];
    for (i = 0; i < columns.length; i += 1) {
        t = columns[i].trim();
        if (!t) {
            // allow empty columns before and after table, but not in between columns;
            // e.g. allow ` |---| `, disallow ` ---||--- `
            if (i === 0 || i === columns.length - 1) {
                continue;
            } else {
                return false;
            }
        }

        if (!/^:?-+:?$/.test(t)) {
            return false;
        }
        if (t.charCodeAt(t.length - 1) === 0x3A /* : */) {
                aligns.push(t.charCodeAt(0) === 0x3A /* : */ ? 'center' : 'right');
            } else if (t.charCodeAt(0) === 0x3A /* : */) {
                aligns.push('left');
            } else {
            aligns.push('');
        }
    }
    alignCount = aligns.length;

    lineText = getLine(state, startLine).trim();
    if (lineText.indexOf('|') === -1) {
        return false;
    }
    columns = escapedSplit(lineText.replace(/^\||\|$/g, ''));

    // header row will define an amount of columns in the entire table,
    // and align row shouldn't be smaller than that (the rest of the rows can)
    columnCount = columns.length;
    if (columnCount > alignCount) {
        return false;
    } else if (columnCount < alignCount) {
        for (i = 0; i < alignCount - columnCount; i += 1) {
            columns.push('');
        }
        columnCount = columns.length;
    }

    if (silent) {
        return true;
    }

    token = state.push('table_open', 'table', 1);
    token.map = tableLines = [startLine, 0];

    token = state.push('thead_open', 'thead', 1);
    token.map = [startLine, startLine + 1];

    token = state.push('tr_open', 'tr', 1);
    token.map = [startLine, startLine + 1];

    for (i = 0; i < columnCount; i += 1) {
        token = state.push('th_open', 'th', 1);
        token.map = [startLine, startLine + 1];
        if (aligns[i]) {
            // FIXED: change property style to align
            token.attrs = [['align', aligns[i]]];
        }

        token = state.push('inline', '', 0);
        token.content = columns[i].trim();
        token.map = [startLine, startLine + 1];
        token.children = [];

        token = state.push('th_close', 'th', -1);
    }

    token = state.push('tr_close', 'tr', -1);
    token = state.push('thead_close', 'thead', -1);

    token = state.push('tbody_open', 'tbody', 1);
    token.map = tbodyLines = [startLine + 2, 0];

    for (nextLine = startLine + 2; nextLine < endLine; nextLine += 1) {
        if (state.sCount[nextLine] < state.blkIndent) {
            break;
        }

        lineText = getLine(state, nextLine);
        if (lineText.indexOf('|') === -1) {
            break;
        }

        // keep spaces at beginning of line to indicate an empty first cell, but
        // strip trailing whitespace
        columns = escapedSplit(lineText.replace(/^\||\|\s*$/g, ''));

        token = state.push('tr_open', 'tr', 1);
        for (i = 0; i < columnCount; i += 1) {
            token = state.push('td_open', 'td', 1);
            if (aligns[i]) {
                // FIXED: change property style to align
                token.attrs = [['align', aligns[i]]];
            }

            token = state.push('inline', '', 0);
            token.content = columns[i] ? columns[i].trim() : '';
            token.children = [];

            token = state.push('td_close', 'td', -1);
        }
        token = state.push('tr_close', 'tr', -1);
    }
    token = state.push('tbody_close', 'tbody', -1);
    token = state.push('table_close', 'table', -1);

    tableLines[1] = tbodyLines[1] = nextLine;
    state.line = nextLine;
    return true;
};

/***/ }),
/* 116 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Copyright (c) 2014 Vitaly Puzrin, Alex Kocharin.
// Distributed under an ISC license: https://github.com/markdown-it/markdown-it/

/**
 * @fileoverview Implements markdownitHtmlBlockRenderer
 * @modifier NHN Ent. FE Development Lab <dl_javascript@nhnent.com>
 */
/* eslint-disable */
// HTML block



// An array of opening and corresponding closing sequences for html tags,
// last argument defines whether it can terminate a paragraph or not
//

// void tag names --- Added by Junghwan Park

var voidTagNames = ['area', 'base', 'br', 'col', 'embed', 'hr', 'img', 'input', 'keygen', 'link', 'meta', 'param', 'source', 'track', 'wbr'];
var HTML_SEQUENCES = [[/^<(script|pre|style)(?=(\s|>|$))/i, /<\/(script|pre|style)>/i, true], [/^<!--/, /-->/, true], [/^<\?/, /\?>/, true], [/^<![A-Z]/, />/, true], [/^<!\[CDATA\[/, /\]\]>/, true], [new RegExp('^<(' + voidTagNames.join('|') + ')', 'i'), /^\/?>$/, true], [new RegExp('^</?(address|article|aside|base|basefont|blockquote|body|caption|center|col|colgroup|dd|details|dialog|dir|div|dl|dt|fieldset|figcaption|figure|footer|form|frame|frameset|h1|head|header|hr|html|iframe|legend|li|link|main|menu|menuitem|meta|nav|noframes|ol|optgroup|option|p|param|pre|section|source|title|summary|table|tbody|td|tfoot|th|thead|title|tr|track|ul)(?=(\\s|/?>|$))', 'i'), /^$/, true], [/^(?:<[A-Za-z][A-Za-z0-9\-]*(?:\s+[a-zA-Z_:][a-zA-Z0-9:._-]*(?:\s*=\s*(?:[^"'=<>`\x00-\x20]+|'[^']*'|"[^"]*"))?)*\s*\/?>|<\/[A-Za-z][A-Za-z0-9\-]*\s*>)\s*$/, /^$/, false]];

module.exports = function html_block(state, startLine, endLine, silent) {
    var i,
        nextLine,
        token,
        lineText,
        pos = state.bMarks[startLine] + state.tShift[startLine],
        max = state.eMarks[startLine];

    if (!state.md.options.html) {
        return false;
    }

    if (state.src.charCodeAt(pos) !== 0x3C /* < */) {
            return false;
        }

    lineText = state.src.slice(pos, max);

    for (i = 0; i < HTML_SEQUENCES.length; i++) {
        if (HTML_SEQUENCES[i][0].test(lineText)) {
            // add condition for return when meet void element --- Added by Junghwan Park
            if (i === 5) {
                return false;
            } else {
                break;
            }
        }
    }

    if (i === HTML_SEQUENCES.length) {
        return false;
    }

    if (silent) {
        // true if this sequence can be a terminator, false otherwise
        return HTML_SEQUENCES[i][2];
    }

    nextLine = startLine + 1;

    // If we are here - we detected HTML block.
    // Let's roll down till block end.
    if (!HTML_SEQUENCES[i][1].test(lineText)) {
        for (; nextLine < endLine; nextLine++) {
            if (state.sCount[nextLine] < state.blkIndent) {
                break;
            }

            pos = state.bMarks[nextLine] + state.tShift[nextLine];
            max = state.eMarks[nextLine];
            lineText = state.src.slice(pos, max);

            if (HTML_SEQUENCES[i][1].test(lineText)) {
                if (lineText.length !== 0) {
                    nextLine++;
                }
                break;
            }
        }
    }

    state.line = nextLine;

    token = state.push('html_block', '', 0);
    token.map = [startLine, nextLine];
    token.content = state.getLines(startLine, nextLine, state.blkIndent, true);

    return true;
};
/* eslint-enable */

/***/ }),
/* 117 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


// Copyright (c) 2014 Vitaly Puzrin, Alex Kocharin.
// Distributed under MIT license: https://github.com/markdown-it/markdown-it/
/**
 * @fileoverview Implements markdownitBackticksRenderer
 * @modifier NHN Ent. FE Development Lab <dl_javascript@nhnent.com>
 */
/* eslint-disable */

// Parse backticks
module.exports = function backtick(state, silent) {
  var start,
      max,
      marker,
      matchStart,
      matchEnd,
      token,
      pos = state.pos,
      ch = state.src.charCodeAt(pos);

  if (ch !== 0x60 /* ` */) {
      return false;
    }

  start = pos;
  pos++;
  max = state.posMax;

  while (pos < max && state.src.charCodeAt(pos) === 0x60 /* ` */) {
    pos++;
  }

  marker = state.src.slice(start, pos);

  matchStart = matchEnd = pos;

  while ((matchStart = state.src.indexOf('`', matchEnd)) !== -1) {
    matchEnd = matchStart + 1;

    while (matchEnd < max && state.src.charCodeAt(matchEnd) === 0x60 /* ` */) {
      matchEnd++;
    }

    if (matchEnd - matchStart === marker.length) {
      if (!silent) {
        token = state.push('code_inline', 'code', 0);
        token.markup = marker;
        token.content = state.src.slice(pos, matchStart).replace(/[ \n]+/g, ' ').trim();
        // TUI.EDITOR MODIFICATION START
        // store number of backtick in data-backtick
        // https://github.nhnent.com/fe/tui.editor/pull/981
        token.attrSet('data-backticks', token.markup.length);
        // TUI.EDITOR MODIFICATION END
      }
      state.pos = matchEnd;
      return true;
    }
  }

  if (!silent) {
    state.pending += marker;
  }
  state.pos += marker.length;
  return true;
};

/***/ }),
/* 118 */
/***/ (function(module, exports, __webpack_require__) {

var hljs = __webpack_require__(119);

hljs.registerLanguage('1c', __webpack_require__(120));
hljs.registerLanguage('abnf', __webpack_require__(121));
hljs.registerLanguage('accesslog', __webpack_require__(122));
hljs.registerLanguage('actionscript', __webpack_require__(123));
hljs.registerLanguage('ada', __webpack_require__(124));
hljs.registerLanguage('apache', __webpack_require__(125));
hljs.registerLanguage('applescript', __webpack_require__(126));
hljs.registerLanguage('cpp', __webpack_require__(127));
hljs.registerLanguage('arduino', __webpack_require__(128));
hljs.registerLanguage('armasm', __webpack_require__(129));
hljs.registerLanguage('xml', __webpack_require__(130));
hljs.registerLanguage('asciidoc', __webpack_require__(131));
hljs.registerLanguage('aspectj', __webpack_require__(132));
hljs.registerLanguage('autohotkey', __webpack_require__(133));
hljs.registerLanguage('autoit', __webpack_require__(134));
hljs.registerLanguage('avrasm', __webpack_require__(135));
hljs.registerLanguage('awk', __webpack_require__(136));
hljs.registerLanguage('axapta', __webpack_require__(137));
hljs.registerLanguage('bash', __webpack_require__(138));
hljs.registerLanguage('basic', __webpack_require__(139));
hljs.registerLanguage('bnf', __webpack_require__(140));
hljs.registerLanguage('brainfuck', __webpack_require__(141));
hljs.registerLanguage('cal', __webpack_require__(142));
hljs.registerLanguage('capnproto', __webpack_require__(143));
hljs.registerLanguage('ceylon', __webpack_require__(144));
hljs.registerLanguage('clean', __webpack_require__(145));
hljs.registerLanguage('clojure', __webpack_require__(146));
hljs.registerLanguage('clojure-repl', __webpack_require__(147));
hljs.registerLanguage('cmake', __webpack_require__(148));
hljs.registerLanguage('coffeescript', __webpack_require__(149));
hljs.registerLanguage('coq', __webpack_require__(150));
hljs.registerLanguage('cos', __webpack_require__(151));
hljs.registerLanguage('crmsh', __webpack_require__(152));
hljs.registerLanguage('crystal', __webpack_require__(153));
hljs.registerLanguage('cs', __webpack_require__(154));
hljs.registerLanguage('csp', __webpack_require__(155));
hljs.registerLanguage('css', __webpack_require__(156));
hljs.registerLanguage('d', __webpack_require__(157));
hljs.registerLanguage('markdown', __webpack_require__(158));
hljs.registerLanguage('dart', __webpack_require__(159));
hljs.registerLanguage('delphi', __webpack_require__(160));
hljs.registerLanguage('diff', __webpack_require__(161));
hljs.registerLanguage('django', __webpack_require__(162));
hljs.registerLanguage('dns', __webpack_require__(163));
hljs.registerLanguage('dockerfile', __webpack_require__(164));
hljs.registerLanguage('dos', __webpack_require__(165));
hljs.registerLanguage('dsconfig', __webpack_require__(166));
hljs.registerLanguage('dts', __webpack_require__(167));
hljs.registerLanguage('dust', __webpack_require__(168));
hljs.registerLanguage('ebnf', __webpack_require__(169));
hljs.registerLanguage('elixir', __webpack_require__(170));
hljs.registerLanguage('elm', __webpack_require__(171));
hljs.registerLanguage('ruby', __webpack_require__(172));
hljs.registerLanguage('erb', __webpack_require__(173));
hljs.registerLanguage('erlang-repl', __webpack_require__(174));
hljs.registerLanguage('erlang', __webpack_require__(175));
hljs.registerLanguage('excel', __webpack_require__(176));
hljs.registerLanguage('fix', __webpack_require__(177));
hljs.registerLanguage('flix', __webpack_require__(178));
hljs.registerLanguage('fortran', __webpack_require__(179));
hljs.registerLanguage('fsharp', __webpack_require__(180));
hljs.registerLanguage('gams', __webpack_require__(181));
hljs.registerLanguage('gauss', __webpack_require__(182));
hljs.registerLanguage('gcode', __webpack_require__(183));
hljs.registerLanguage('gherkin', __webpack_require__(184));
hljs.registerLanguage('glsl', __webpack_require__(185));
hljs.registerLanguage('go', __webpack_require__(186));
hljs.registerLanguage('golo', __webpack_require__(187));
hljs.registerLanguage('gradle', __webpack_require__(188));
hljs.registerLanguage('groovy', __webpack_require__(189));
hljs.registerLanguage('haml', __webpack_require__(190));
hljs.registerLanguage('handlebars', __webpack_require__(191));
hljs.registerLanguage('haskell', __webpack_require__(192));
hljs.registerLanguage('haxe', __webpack_require__(193));
hljs.registerLanguage('hsp', __webpack_require__(194));
hljs.registerLanguage('htmlbars', __webpack_require__(195));
hljs.registerLanguage('http', __webpack_require__(196));
hljs.registerLanguage('hy', __webpack_require__(197));
hljs.registerLanguage('inform7', __webpack_require__(198));
hljs.registerLanguage('ini', __webpack_require__(199));
hljs.registerLanguage('irpf90', __webpack_require__(200));
hljs.registerLanguage('java', __webpack_require__(201));
hljs.registerLanguage('javascript', __webpack_require__(202));
hljs.registerLanguage('jboss-cli', __webpack_require__(203));
hljs.registerLanguage('json', __webpack_require__(204));
hljs.registerLanguage('julia', __webpack_require__(205));
hljs.registerLanguage('julia-repl', __webpack_require__(206));
hljs.registerLanguage('kotlin', __webpack_require__(207));
hljs.registerLanguage('lasso', __webpack_require__(208));
hljs.registerLanguage('ldif', __webpack_require__(209));
hljs.registerLanguage('leaf', __webpack_require__(210));
hljs.registerLanguage('less', __webpack_require__(211));
hljs.registerLanguage('lisp', __webpack_require__(212));
hljs.registerLanguage('livecodeserver', __webpack_require__(213));
hljs.registerLanguage('livescript', __webpack_require__(214));
hljs.registerLanguage('llvm', __webpack_require__(215));
hljs.registerLanguage('lsl', __webpack_require__(216));
hljs.registerLanguage('lua', __webpack_require__(217));
hljs.registerLanguage('makefile', __webpack_require__(218));
hljs.registerLanguage('mathematica', __webpack_require__(219));
hljs.registerLanguage('matlab', __webpack_require__(220));
hljs.registerLanguage('maxima', __webpack_require__(221));
hljs.registerLanguage('mel', __webpack_require__(222));
hljs.registerLanguage('mercury', __webpack_require__(223));
hljs.registerLanguage('mipsasm', __webpack_require__(224));
hljs.registerLanguage('mizar', __webpack_require__(225));
hljs.registerLanguage('perl', __webpack_require__(226));
hljs.registerLanguage('mojolicious', __webpack_require__(227));
hljs.registerLanguage('monkey', __webpack_require__(228));
hljs.registerLanguage('moonscript', __webpack_require__(229));
hljs.registerLanguage('n1ql', __webpack_require__(230));
hljs.registerLanguage('nginx', __webpack_require__(231));
hljs.registerLanguage('nimrod', __webpack_require__(232));
hljs.registerLanguage('nix', __webpack_require__(233));
hljs.registerLanguage('nsis', __webpack_require__(234));
hljs.registerLanguage('objectivec', __webpack_require__(235));
hljs.registerLanguage('ocaml', __webpack_require__(236));
hljs.registerLanguage('openscad', __webpack_require__(237));
hljs.registerLanguage('oxygene', __webpack_require__(238));
hljs.registerLanguage('parser3', __webpack_require__(239));
hljs.registerLanguage('pf', __webpack_require__(240));
hljs.registerLanguage('php', __webpack_require__(241));
hljs.registerLanguage('pony', __webpack_require__(242));
hljs.registerLanguage('powershell', __webpack_require__(243));
hljs.registerLanguage('processing', __webpack_require__(244));
hljs.registerLanguage('profile', __webpack_require__(245));
hljs.registerLanguage('prolog', __webpack_require__(246));
hljs.registerLanguage('protobuf', __webpack_require__(247));
hljs.registerLanguage('puppet', __webpack_require__(248));
hljs.registerLanguage('purebasic', __webpack_require__(249));
hljs.registerLanguage('python', __webpack_require__(250));
hljs.registerLanguage('q', __webpack_require__(251));
hljs.registerLanguage('qml', __webpack_require__(252));
hljs.registerLanguage('r', __webpack_require__(253));
hljs.registerLanguage('rib', __webpack_require__(254));
hljs.registerLanguage('roboconf', __webpack_require__(255));
hljs.registerLanguage('routeros', __webpack_require__(256));
hljs.registerLanguage('rsl', __webpack_require__(257));
hljs.registerLanguage('ruleslanguage', __webpack_require__(258));
hljs.registerLanguage('rust', __webpack_require__(259));
hljs.registerLanguage('scala', __webpack_require__(260));
hljs.registerLanguage('scheme', __webpack_require__(261));
hljs.registerLanguage('scilab', __webpack_require__(262));
hljs.registerLanguage('scss', __webpack_require__(263));
hljs.registerLanguage('shell', __webpack_require__(264));
hljs.registerLanguage('smali', __webpack_require__(265));
hljs.registerLanguage('smalltalk', __webpack_require__(266));
hljs.registerLanguage('sml', __webpack_require__(267));
hljs.registerLanguage('sqf', __webpack_require__(268));
hljs.registerLanguage('sql', __webpack_require__(269));
hljs.registerLanguage('stan', __webpack_require__(270));
hljs.registerLanguage('stata', __webpack_require__(271));
hljs.registerLanguage('step21', __webpack_require__(272));
hljs.registerLanguage('stylus', __webpack_require__(273));
hljs.registerLanguage('subunit', __webpack_require__(274));
hljs.registerLanguage('swift', __webpack_require__(275));
hljs.registerLanguage('taggerscript', __webpack_require__(276));
hljs.registerLanguage('yaml', __webpack_require__(277));
hljs.registerLanguage('tap', __webpack_require__(278));
hljs.registerLanguage('tcl', __webpack_require__(279));
hljs.registerLanguage('tex', __webpack_require__(280));
hljs.registerLanguage('thrift', __webpack_require__(281));
hljs.registerLanguage('tp', __webpack_require__(282));
hljs.registerLanguage('twig', __webpack_require__(283));
hljs.registerLanguage('typescript', __webpack_require__(284));
hljs.registerLanguage('vala', __webpack_require__(285));
hljs.registerLanguage('vbnet', __webpack_require__(286));
hljs.registerLanguage('vbscript', __webpack_require__(287));
hljs.registerLanguage('vbscript-html', __webpack_require__(288));
hljs.registerLanguage('verilog', __webpack_require__(289));
hljs.registerLanguage('vhdl', __webpack_require__(290));
hljs.registerLanguage('vim', __webpack_require__(291));
hljs.registerLanguage('x86asm', __webpack_require__(292));
hljs.registerLanguage('xl', __webpack_require__(293));
hljs.registerLanguage('xquery', __webpack_require__(294));
hljs.registerLanguage('zephir', __webpack_require__(295));

module.exports = hljs;

/***/ }),
/* 119 */
/***/ (function(module, exports, __webpack_require__) {

/*
Syntax highlighting with language autodetection.
https://highlightjs.org/
*/

(function(factory) {

  // Find the global object for export to both the browser and web workers.
  var globalObject = typeof window === 'object' && window ||
                     typeof self === 'object' && self;

  // Setup highlight.js for different environments. First is Node.js or
  // CommonJS.
  if(true) {
    factory(exports);
  } else if(globalObject) {
    // Export hljs globally even when using AMD for cases when this script
    // is loaded with others that may still expect a global hljs.
    globalObject.hljs = factory({});

    // Finally register the global hljs with AMD.
    if(typeof define === 'function' && define.amd) {
      define([], function() {
        return globalObject.hljs;
      });
    }
  }

}(function(hljs) {
  // Convenience variables for build-in objects
  var ArrayProto = [],
      objectKeys = Object.keys;

  // Global internal variables used within the highlight.js library.
  var languages = {},
      aliases   = {};

  // Regular expressions used throughout the highlight.js library.
  var noHighlightRe    = /^(no-?highlight|plain|text)$/i,
      languagePrefixRe = /\blang(?:uage)?-([\w-]+)\b/i,
      fixMarkupRe      = /((^(<[^>]+>|\t|)+|(?:\n)))/gm;

  var spanEndTag = '</span>';

  // Global options used when within external APIs. This is modified when
  // calling the `hljs.configure` function.
  var options = {
    classPrefix: 'hljs-',
    tabReplace: null,
    useBR: false,
    languages: undefined
  };


  /* Utility functions */

  function escape(value) {
    return value.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;');
  }

  function tag(node) {
    return node.nodeName.toLowerCase();
  }

  function testRe(re, lexeme) {
    var match = re && re.exec(lexeme);
    return match && match.index === 0;
  }

  function isNotHighlighted(language) {
    return noHighlightRe.test(language);
  }

  function blockLanguage(block) {
    var i, match, length, _class;
    var classes = block.className + ' ';

    classes += block.parentNode ? block.parentNode.className : '';

    // language-* takes precedence over non-prefixed class names.
    match = languagePrefixRe.exec(classes);
    if (match) {
      return getLanguage(match[1]) ? match[1] : 'no-highlight';
    }

    classes = classes.split(/\s+/);

    for (i = 0, length = classes.length; i < length; i++) {
      _class = classes[i]

      if (isNotHighlighted(_class) || getLanguage(_class)) {
        return _class;
      }
    }
  }

  function inherit(parent) {  // inherit(parent, override_obj, override_obj, ...)
    var key;
    var result = {};
    var objects = Array.prototype.slice.call(arguments, 1);

    for (key in parent)
      result[key] = parent[key];
    objects.forEach(function(obj) {
      for (key in obj)
        result[key] = obj[key];
    });
    return result;
  }

  /* Stream merging */

  function nodeStream(node) {
    var result = [];
    (function _nodeStream(node, offset) {
      for (var child = node.firstChild; child; child = child.nextSibling) {
        if (child.nodeType === 3)
          offset += child.nodeValue.length;
        else if (child.nodeType === 1) {
          result.push({
            event: 'start',
            offset: offset,
            node: child
          });
          offset = _nodeStream(child, offset);
          // Prevent void elements from having an end tag that would actually
          // double them in the output. There are more void elements in HTML
          // but we list only those realistically expected in code display.
          if (!tag(child).match(/br|hr|img|input/)) {
            result.push({
              event: 'stop',
              offset: offset,
              node: child
            });
          }
        }
      }
      return offset;
    })(node, 0);
    return result;
  }

  function mergeStreams(original, highlighted, value) {
    var processed = 0;
    var result = '';
    var nodeStack = [];

    function selectStream() {
      if (!original.length || !highlighted.length) {
        return original.length ? original : highlighted;
      }
      if (original[0].offset !== highlighted[0].offset) {
        return (original[0].offset < highlighted[0].offset) ? original : highlighted;
      }

      /*
      To avoid starting the stream just before it should stop the order is
      ensured that original always starts first and closes last:

      if (event1 == 'start' && event2 == 'start')
        return original;
      if (event1 == 'start' && event2 == 'stop')
        return highlighted;
      if (event1 == 'stop' && event2 == 'start')
        return original;
      if (event1 == 'stop' && event2 == 'stop')
        return highlighted;

      ... which is collapsed to:
      */
      return highlighted[0].event === 'start' ? original : highlighted;
    }

    function open(node) {
      function attr_str(a) {return ' ' + a.nodeName + '="' + escape(a.value).replace('"', '&quot;') + '"';}
      result += '<' + tag(node) + ArrayProto.map.call(node.attributes, attr_str).join('') + '>';
    }

    function close(node) {
      result += '</' + tag(node) + '>';
    }

    function render(event) {
      (event.event === 'start' ? open : close)(event.node);
    }

    while (original.length || highlighted.length) {
      var stream = selectStream();
      result += escape(value.substring(processed, stream[0].offset));
      processed = stream[0].offset;
      if (stream === original) {
        /*
        On any opening or closing tag of the original markup we first close
        the entire highlighted node stack, then render the original tag along
        with all the following original tags at the same offset and then
        reopen all the tags on the highlighted stack.
        */
        nodeStack.reverse().forEach(close);
        do {
          render(stream.splice(0, 1)[0]);
          stream = selectStream();
        } while (stream === original && stream.length && stream[0].offset === processed);
        nodeStack.reverse().forEach(open);
      } else {
        if (stream[0].event === 'start') {
          nodeStack.push(stream[0].node);
        } else {
          nodeStack.pop();
        }
        render(stream.splice(0, 1)[0]);
      }
    }
    return result + escape(value.substr(processed));
  }

  /* Initialization */

  function expand_mode(mode) {
    if (mode.variants && !mode.cached_variants) {
      mode.cached_variants = mode.variants.map(function(variant) {
        return inherit(mode, {variants: null}, variant);
      });
    }
    return mode.cached_variants || (mode.endsWithParent && [inherit(mode)]) || [mode];
  }

  function compileLanguage(language) {

    function reStr(re) {
        return (re && re.source) || re;
    }

    function langRe(value, global) {
      return new RegExp(
        reStr(value),
        'm' + (language.case_insensitive ? 'i' : '') + (global ? 'g' : '')
      );
    }

    function compileMode(mode, parent) {
      if (mode.compiled)
        return;
      mode.compiled = true;

      mode.keywords = mode.keywords || mode.beginKeywords;
      if (mode.keywords) {
        var compiled_keywords = {};

        var flatten = function(className, str) {
          if (language.case_insensitive) {
            str = str.toLowerCase();
          }
          str.split(' ').forEach(function(kw) {
            var pair = kw.split('|');
            compiled_keywords[pair[0]] = [className, pair[1] ? Number(pair[1]) : 1];
          });
        };

        if (typeof mode.keywords === 'string') { // string
          flatten('keyword', mode.keywords);
        } else {
          objectKeys(mode.keywords).forEach(function (className) {
            flatten(className, mode.keywords[className]);
          });
        }
        mode.keywords = compiled_keywords;
      }
      mode.lexemesRe = langRe(mode.lexemes || /\w+/, true);

      if (parent) {
        if (mode.beginKeywords) {
          mode.begin = '\\b(' + mode.beginKeywords.split(' ').join('|') + ')\\b';
        }
        if (!mode.begin)
          mode.begin = /\B|\b/;
        mode.beginRe = langRe(mode.begin);
        if (!mode.end && !mode.endsWithParent)
          mode.end = /\B|\b/;
        if (mode.end)
          mode.endRe = langRe(mode.end);
        mode.terminator_end = reStr(mode.end) || '';
        if (mode.endsWithParent && parent.terminator_end)
          mode.terminator_end += (mode.end ? '|' : '') + parent.terminator_end;
      }
      if (mode.illegal)
        mode.illegalRe = langRe(mode.illegal);
      if (mode.relevance == null)
        mode.relevance = 1;
      if (!mode.contains) {
        mode.contains = [];
      }
      mode.contains = Array.prototype.concat.apply([], mode.contains.map(function(c) {
        return expand_mode(c === 'self' ? mode : c)
      }));
      mode.contains.forEach(function(c) {compileMode(c, mode);});

      if (mode.starts) {
        compileMode(mode.starts, parent);
      }

      var terminators =
        mode.contains.map(function(c) {
          return c.beginKeywords ? '\\.?(' + c.begin + ')\\.?' : c.begin;
        })
        .concat([mode.terminator_end, mode.illegal])
        .map(reStr)
        .filter(Boolean);
      mode.terminators = terminators.length ? langRe(terminators.join('|'), true) : {exec: function(/*s*/) {return null;}};
    }

    compileMode(language);
  }

  /*
  Core highlighting function. Accepts a language name, or an alias, and a
  string with the code to highlight. Returns an object with the following
  properties:

  - relevance (int)
  - value (an HTML string with highlighting markup)

  */
  function highlight(name, value, ignore_illegals, continuation) {

    function subMode(lexeme, mode) {
      var i, length;

      for (i = 0, length = mode.contains.length; i < length; i++) {
        if (testRe(mode.contains[i].beginRe, lexeme)) {
          return mode.contains[i];
        }
      }
    }

    function endOfMode(mode, lexeme) {
      if (testRe(mode.endRe, lexeme)) {
        while (mode.endsParent && mode.parent) {
          mode = mode.parent;
        }
        return mode;
      }
      if (mode.endsWithParent) {
        return endOfMode(mode.parent, lexeme);
      }
    }

    function isIllegal(lexeme, mode) {
      return !ignore_illegals && testRe(mode.illegalRe, lexeme);
    }

    function keywordMatch(mode, match) {
      var match_str = language.case_insensitive ? match[0].toLowerCase() : match[0];
      return mode.keywords.hasOwnProperty(match_str) && mode.keywords[match_str];
    }

    function buildSpan(classname, insideSpan, leaveOpen, noPrefix) {
      var classPrefix = noPrefix ? '' : options.classPrefix,
          openSpan    = '<span class="' + classPrefix,
          closeSpan   = leaveOpen ? '' : spanEndTag

      openSpan += classname + '">';

      return openSpan + insideSpan + closeSpan;
    }

    function processKeywords() {
      var keyword_match, last_index, match, result;

      if (!top.keywords)
        return escape(mode_buffer);

      result = '';
      last_index = 0;
      top.lexemesRe.lastIndex = 0;
      match = top.lexemesRe.exec(mode_buffer);

      while (match) {
        result += escape(mode_buffer.substring(last_index, match.index));
        keyword_match = keywordMatch(top, match);
        if (keyword_match) {
          relevance += keyword_match[1];
          result += buildSpan(keyword_match[0], escape(match[0]));
        } else {
          result += escape(match[0]);
        }
        last_index = top.lexemesRe.lastIndex;
        match = top.lexemesRe.exec(mode_buffer);
      }
      return result + escape(mode_buffer.substr(last_index));
    }

    function processSubLanguage() {
      var explicit = typeof top.subLanguage === 'string';
      if (explicit && !languages[top.subLanguage]) {
        return escape(mode_buffer);
      }

      var result = explicit ?
                   highlight(top.subLanguage, mode_buffer, true, continuations[top.subLanguage]) :
                   highlightAuto(mode_buffer, top.subLanguage.length ? top.subLanguage : undefined);

      // Counting embedded language score towards the host language may be disabled
      // with zeroing the containing mode relevance. Usecase in point is Markdown that
      // allows XML everywhere and makes every XML snippet to have a much larger Markdown
      // score.
      if (top.relevance > 0) {
        relevance += result.relevance;
      }
      if (explicit) {
        continuations[top.subLanguage] = result.top;
      }
      return buildSpan(result.language, result.value, false, true);
    }

    function processBuffer() {
      result += (top.subLanguage != null ? processSubLanguage() : processKeywords());
      mode_buffer = '';
    }

    function startNewMode(mode) {
      result += mode.className? buildSpan(mode.className, '', true): '';
      top = Object.create(mode, {parent: {value: top}});
    }

    function processLexeme(buffer, lexeme) {

      mode_buffer += buffer;

      if (lexeme == null) {
        processBuffer();
        return 0;
      }

      var new_mode = subMode(lexeme, top);
      if (new_mode) {
        if (new_mode.skip) {
          mode_buffer += lexeme;
        } else {
          if (new_mode.excludeBegin) {
            mode_buffer += lexeme;
          }
          processBuffer();
          if (!new_mode.returnBegin && !new_mode.excludeBegin) {
            mode_buffer = lexeme;
          }
        }
        startNewMode(new_mode, lexeme);
        return new_mode.returnBegin ? 0 : lexeme.length;
      }

      var end_mode = endOfMode(top, lexeme);
      if (end_mode) {
        var origin = top;
        if (origin.skip) {
          mode_buffer += lexeme;
        } else {
          if (!(origin.returnEnd || origin.excludeEnd)) {
            mode_buffer += lexeme;
          }
          processBuffer();
          if (origin.excludeEnd) {
            mode_buffer = lexeme;
          }
        }
        do {
          if (top.className) {
            result += spanEndTag;
          }
          if (!top.skip) {
            relevance += top.relevance;
          }
          top = top.parent;
        } while (top !== end_mode.parent);
        if (end_mode.starts) {
          startNewMode(end_mode.starts, '');
        }
        return origin.returnEnd ? 0 : lexeme.length;
      }

      if (isIllegal(lexeme, top))
        throw new Error('Illegal lexeme "' + lexeme + '" for mode "' + (top.className || '<unnamed>') + '"');

      /*
      Parser should not reach this point as all types of lexemes should be caught
      earlier, but if it does due to some bug make sure it advances at least one
      character forward to prevent infinite looping.
      */
      mode_buffer += lexeme;
      return lexeme.length || 1;
    }

    var language = getLanguage(name);
    if (!language) {
      throw new Error('Unknown language: "' + name + '"');
    }

    compileLanguage(language);
    var top = continuation || language;
    var continuations = {}; // keep continuations for sub-languages
    var result = '', current;
    for(current = top; current !== language; current = current.parent) {
      if (current.className) {
        result = buildSpan(current.className, '', true) + result;
      }
    }
    var mode_buffer = '';
    var relevance = 0;
    try {
      var match, count, index = 0;
      while (true) {
        top.terminators.lastIndex = index;
        match = top.terminators.exec(value);
        if (!match)
          break;
        count = processLexeme(value.substring(index, match.index), match[0]);
        index = match.index + count;
      }
      processLexeme(value.substr(index));
      for(current = top; current.parent; current = current.parent) { // close dangling modes
        if (current.className) {
          result += spanEndTag;
        }
      }
      return {
        relevance: relevance,
        value: result,
        language: name,
        top: top
      };
    } catch (e) {
      if (e.message && e.message.indexOf('Illegal') !== -1) {
        return {
          relevance: 0,
          value: escape(value)
        };
      } else {
        throw e;
      }
    }
  }

  /*
  Highlighting with language detection. Accepts a string with the code to
  highlight. Returns an object with the following properties:

  - language (detected language)
  - relevance (int)
  - value (an HTML string with highlighting markup)
  - second_best (object with the same structure for second-best heuristically
    detected language, may be absent)

  */
  function highlightAuto(text, languageSubset) {
    languageSubset = languageSubset || options.languages || objectKeys(languages);
    var result = {
      relevance: 0,
      value: escape(text)
    };
    var second_best = result;
    languageSubset.filter(getLanguage).forEach(function(name) {
      var current = highlight(name, text, false);
      current.language = name;
      if (current.relevance > second_best.relevance) {
        second_best = current;
      }
      if (current.relevance > result.relevance) {
        second_best = result;
        result = current;
      }
    });
    if (second_best.language) {
      result.second_best = second_best;
    }
    return result;
  }

  /*
  Post-processing of the highlighted markup:

  - replace TABs with something more useful
  - replace real line-breaks with '<br>' for non-pre containers

  */
  function fixMarkup(value) {
    return !(options.tabReplace || options.useBR)
      ? value
      : value.replace(fixMarkupRe, function(match, p1) {
          if (options.useBR && match === '\n') {
            return '<br>';
          } else if (options.tabReplace) {
            return p1.replace(/\t/g, options.tabReplace);
          }
          return '';
      });
  }

  function buildClassName(prevClassName, currentLang, resultLang) {
    var language = currentLang ? aliases[currentLang] : resultLang,
        result   = [prevClassName.trim()];

    if (!prevClassName.match(/\bhljs\b/)) {
      result.push('hljs');
    }

    if (prevClassName.indexOf(language) === -1) {
      result.push(language);
    }

    return result.join(' ').trim();
  }

  /*
  Applies highlighting to a DOM node containing code. Accepts a DOM node and
  two optional parameters for fixMarkup.
  */
  function highlightBlock(block) {
    var node, originalStream, result, resultNode, text;
    var language = blockLanguage(block);

    if (isNotHighlighted(language))
        return;

    if (options.useBR) {
      node = document.createElementNS('http://www.w3.org/1999/xhtml', 'div');
      node.innerHTML = block.innerHTML.replace(/\n/g, '').replace(/<br[ \/]*>/g, '\n');
    } else {
      node = block;
    }
    text = node.textContent;
    result = language ? highlight(language, text, true) : highlightAuto(text);

    originalStream = nodeStream(node);
    if (originalStream.length) {
      resultNode = document.createElementNS('http://www.w3.org/1999/xhtml', 'div');
      resultNode.innerHTML = result.value;
      result.value = mergeStreams(originalStream, nodeStream(resultNode), text);
    }
    result.value = fixMarkup(result.value);

    block.innerHTML = result.value;
    block.className = buildClassName(block.className, language, result.language);
    block.result = {
      language: result.language,
      re: result.relevance
    };
    if (result.second_best) {
      block.second_best = {
        language: result.second_best.language,
        re: result.second_best.relevance
      };
    }
  }

  /*
  Updates highlight.js global options with values passed in the form of an object.
  */
  function configure(user_options) {
    options = inherit(options, user_options);
  }

  /*
  Applies highlighting to all <pre><code>..</code></pre> blocks on a page.
  */
  function initHighlighting() {
    if (initHighlighting.called)
      return;
    initHighlighting.called = true;

    var blocks = document.querySelectorAll('pre code');
    ArrayProto.forEach.call(blocks, highlightBlock);
  }

  /*
  Attaches highlighting to the page load event.
  */
  function initHighlightingOnLoad() {
    addEventListener('DOMContentLoaded', initHighlighting, false);
    addEventListener('load', initHighlighting, false);
  }

  function registerLanguage(name, language) {
    var lang = languages[name] = language(hljs);
    if (lang.aliases) {
      lang.aliases.forEach(function(alias) {aliases[alias] = name;});
    }
  }

  function listLanguages() {
    return objectKeys(languages);
  }

  function getLanguage(name) {
    name = (name || '').toLowerCase();
    return languages[name] || languages[aliases[name]];
  }

  /* Interface definition */

  hljs.highlight = highlight;
  hljs.highlightAuto = highlightAuto;
  hljs.fixMarkup = fixMarkup;
  hljs.highlightBlock = highlightBlock;
  hljs.configure = configure;
  hljs.initHighlighting = initHighlighting;
  hljs.initHighlightingOnLoad = initHighlightingOnLoad;
  hljs.registerLanguage = registerLanguage;
  hljs.listLanguages = listLanguages;
  hljs.getLanguage = getLanguage;
  hljs.inherit = inherit;

  // Common regexps
  hljs.IDENT_RE = '[a-zA-Z]\\w*';
  hljs.UNDERSCORE_IDENT_RE = '[a-zA-Z_]\\w*';
  hljs.NUMBER_RE = '\\b\\d+(\\.\\d+)?';
  hljs.C_NUMBER_RE = '(-?)(\\b0[xX][a-fA-F0-9]+|(\\b\\d+(\\.\\d*)?|\\.\\d+)([eE][-+]?\\d+)?)'; // 0x..., 0..., decimal, float
  hljs.BINARY_NUMBER_RE = '\\b(0b[01]+)'; // 0b...
  hljs.RE_STARTERS_RE = '!|!=|!==|%|%=|&|&&|&=|\\*|\\*=|\\+|\\+=|,|-|-=|/=|/|:|;|<<|<<=|<=|<|===|==|=|>>>=|>>=|>=|>>>|>>|>|\\?|\\[|\\{|\\(|\\^|\\^=|\\||\\|=|\\|\\||~';

  // Common modes
  hljs.BACKSLASH_ESCAPE = {
    begin: '\\\\[\\s\\S]', relevance: 0
  };
  hljs.APOS_STRING_MODE = {
    className: 'string',
    begin: '\'', end: '\'',
    illegal: '\\n',
    contains: [hljs.BACKSLASH_ESCAPE]
  };
  hljs.QUOTE_STRING_MODE = {
    className: 'string',
    begin: '"', end: '"',
    illegal: '\\n',
    contains: [hljs.BACKSLASH_ESCAPE]
  };
  hljs.PHRASAL_WORDS_MODE = {
    begin: /\b(a|an|the|are|I'm|isn't|don't|doesn't|won't|but|just|should|pretty|simply|enough|gonna|going|wtf|so|such|will|you|your|they|like|more)\b/
  };
  hljs.COMMENT = function (begin, end, inherits) {
    var mode = hljs.inherit(
      {
        className: 'comment',
        begin: begin, end: end,
        contains: []
      },
      inherits || {}
    );
    mode.contains.push(hljs.PHRASAL_WORDS_MODE);
    mode.contains.push({
      className: 'doctag',
      begin: '(?:TODO|FIXME|NOTE|BUG|XXX):',
      relevance: 0
    });
    return mode;
  };
  hljs.C_LINE_COMMENT_MODE = hljs.COMMENT('//', '$');
  hljs.C_BLOCK_COMMENT_MODE = hljs.COMMENT('/\\*', '\\*/');
  hljs.HASH_COMMENT_MODE = hljs.COMMENT('#', '$');
  hljs.NUMBER_MODE = {
    className: 'number',
    begin: hljs.NUMBER_RE,
    relevance: 0
  };
  hljs.C_NUMBER_MODE = {
    className: 'number',
    begin: hljs.C_NUMBER_RE,
    relevance: 0
  };
  hljs.BINARY_NUMBER_MODE = {
    className: 'number',
    begin: hljs.BINARY_NUMBER_RE,
    relevance: 0
  };
  hljs.CSS_NUMBER_MODE = {
    className: 'number',
    begin: hljs.NUMBER_RE + '(' +
      '%|em|ex|ch|rem'  +
      '|vw|vh|vmin|vmax' +
      '|cm|mm|in|pt|pc|px' +
      '|deg|grad|rad|turn' +
      '|s|ms' +
      '|Hz|kHz' +
      '|dpi|dpcm|dppx' +
      ')?',
    relevance: 0
  };
  hljs.REGEXP_MODE = {
    className: 'regexp',
    begin: /\//, end: /\/[gimuy]*/,
    illegal: /\n/,
    contains: [
      hljs.BACKSLASH_ESCAPE,
      {
        begin: /\[/, end: /\]/,
        relevance: 0,
        contains: [hljs.BACKSLASH_ESCAPE]
      }
    ]
  };
  hljs.TITLE_MODE = {
    className: 'title',
    begin: hljs.IDENT_RE,
    relevance: 0
  };
  hljs.UNDERSCORE_TITLE_MODE = {
    className: 'title',
    begin: hljs.UNDERSCORE_IDENT_RE,
    relevance: 0
  };
  hljs.METHOD_GUARD = {
    // excludes method names from keyword processing
    begin: '\\.\\s*' + hljs.UNDERSCORE_IDENT_RE,
    relevance: 0
  };

  return hljs;
}));


/***/ }),
/* 120 */
/***/ (function(module, exports) {

module.exports = function(hljs){

  // общий паттерн для определения идентификаторов
  var UNDERSCORE_IDENT_RE = '[A-Za-zА-Яа-яёЁ_][A-Za-zА-Яа-яёЁ_0-9]+';
  
  // v7 уникальные ключевые слова, отсутствующие в v8 ==> keyword
  var v7_keywords =
  'далее ';

  // v8 ключевые слова ==> keyword
  var v8_keywords =
  'возврат вызватьисключение выполнить для если и из или иначе иначеесли исключение каждого конецесли ' +
  'конецпопытки конеццикла не новый перейти перем по пока попытка прервать продолжить тогда цикл экспорт ';

  // keyword : ключевые слова
  var KEYWORD = v7_keywords + v8_keywords;
  
  // v7 уникальные директивы, отсутствующие в v8 ==> meta-keyword
  var v7_meta_keywords =
  'загрузитьизфайла ';

  // v8 ключевые слова в инструкциях препроцессора, директивах компиляции, аннотациях ==> meta-keyword
  var v8_meta_keywords =
  'вебклиент вместо внешнеесоединение клиент конецобласти мобильноеприложениеклиент мобильноеприложениесервер ' +
  'наклиенте наклиентенасервере наклиентенасерверебезконтекста насервере насерверебезконтекста область перед ' +
  'после сервер толстыйклиентобычноеприложение толстыйклиентуправляемоеприложение тонкийклиент ';

  // meta-keyword : ключевые слова в инструкциях препроцессора, директивах компиляции, аннотациях
  var METAKEYWORD = v7_meta_keywords + v8_meta_keywords;

  // v7 системные константы ==> built_in
  var v7_system_constants =
  'разделительстраниц разделительстрок символтабуляции ';
  
  // v7 уникальные методы глобального контекста, отсутствующие в v8 ==> built_in
  var v7_global_context_methods =
  'ansitooem oemtoansi ввестивидсубконто ввестиперечисление ввестипериод ввестиплансчетов выбранныйплансчетов ' +
  'датагод датамесяц датачисло заголовоксистемы значениевстроку значениеизстроки каталогиб каталогпользователя ' +
  'кодсимв конгода конецпериодаби конецрассчитанногопериодаби конецстандартногоинтервала конквартала конмесяца ' +
  'коннедели лог лог10 максимальноеколичествосубконто названиеинтерфейса названиенабораправ назначитьвид ' +
  'назначитьсчет найтиссылки началопериодаби началостандартногоинтервала начгода начквартала начмесяца ' +
  'начнедели номерднягода номерднянедели номернеделигода обработкаожидания основнойжурналрасчетов ' +
  'основнойплансчетов основнойязык очиститьокносообщений периодстр получитьвремята получитьдатута ' +
  'получитьдокументта получитьзначенияотбора получитьпозициюта получитьпустоезначение получитьта ' +
  'префиксавтонумерации пропись пустоезначение разм разобратьпозициюдокумента рассчитатьрегистрына ' +
  'рассчитатьрегистрыпо симв создатьобъект статусвозврата стрколичествострок сформироватьпозициюдокумента ' +
  'счетпокоду текущеевремя типзначения типзначениястр установитьтана установитьтапо фиксшаблон шаблон ';
  
  // v8 методы глобального контекста ==> built_in
  var v8_global_context_methods =
  'acos asin atan base64значение base64строка cos exp log log10 pow sin sqrt tan xmlзначение xmlстрока ' +
  'xmlтип xmlтипзнч активноеокно безопасныйрежим безопасныйрежимразделенияданных булево ввестидату ввестизначение ' +
  'ввестистроку ввестичисло возможностьчтенияxml вопрос восстановитьзначение врег выгрузитьжурналрегистрации ' +
  'выполнитьобработкуоповещения выполнитьпроверкуправдоступа вычислить год данныеформывзначение дата день деньгода ' +
  'деньнедели добавитьмесяц заблокироватьданныедляредактирования заблокироватьработупользователя завершитьработусистемы ' +
  'загрузитьвнешнююкомпоненту закрытьсправку записатьjson записатьxml записатьдатуjson записьжурналарегистрации ' +
  'заполнитьзначениясвойств запроситьразрешениепользователя запуститьприложение запуститьсистему зафиксироватьтранзакцию ' +
  'значениевданныеформы значениевстрокувнутр значениевфайл значениезаполнено значениеизстрокивнутр значениеизфайла ' +
  'изxmlтипа импортмоделиxdto имякомпьютера имяпользователя инициализироватьпредопределенныеданные информацияобошибке ' +
  'каталогбиблиотекимобильногоустройства каталогвременныхфайлов каталогдокументов каталогпрограммы кодироватьстроку ' +
  'кодлокализацииинформационнойбазы кодсимвола командасистемы конецгода конецдня конецквартала конецмесяца конецминуты ' +
  'конецнедели конецчаса конфигурациябазыданныхизмененадинамически конфигурацияизменена копироватьданныеформы ' +
  'копироватьфайл краткоепредставлениеошибки лев макс местноевремя месяц мин минута монопольныйрежим найти ' +
  'найтинедопустимыесимволыxml найтиокнопонавигационнойссылке найтипомеченныенаудаление найтипоссылкам найтифайлы ' +
  'началогода началодня началоквартала началомесяца началоминуты началонедели началочаса начатьзапросразрешенияпользователя ' +
  'начатьзапускприложения начатькопированиефайла начатьперемещениефайла начатьподключениевнешнейкомпоненты ' +
  'начатьподключениерасширенияработыскриптографией начатьподключениерасширенияработысфайлами начатьпоискфайлов ' +
  'начатьполучениекаталогавременныхфайлов начатьполучениекаталогадокументов начатьполучениерабочегокаталогаданныхпользователя ' +
  'начатьполучениефайлов начатьпомещениефайла начатьпомещениефайлов начатьсозданиедвоичныхданныхизфайла начатьсозданиекаталога ' +
  'начатьтранзакцию начатьудалениефайлов начатьустановкувнешнейкомпоненты начатьустановкурасширенияработыскриптографией ' +
  'начатьустановкурасширенияработысфайлами неделягода необходимостьзавершениясоединения номерсеансаинформационнойбазы ' +
  'номерсоединенияинформационнойбазы нрег нстр обновитьинтерфейс обновитьнумерациюобъектов обновитьповторноиспользуемыезначения ' +
  'обработкапрерыванияпользователя объединитьфайлы окр описаниеошибки оповестить оповеститьобизменении ' +
  'отключитьобработчикзапросанастроекклиенталицензирования отключитьобработчикожидания отключитьобработчикоповещения ' +
  'открытьзначение открытьиндекссправки открытьсодержаниесправки открытьсправку открытьформу открытьформумодально ' +
  'отменитьтранзакцию очиститьжурналрегистрации очиститьнастройкипользователя очиститьсообщения параметрыдоступа ' +
  'перейтипонавигационнойссылке переместитьфайл подключитьвнешнююкомпоненту ' +
  'подключитьобработчикзапросанастроекклиенталицензирования подключитьобработчикожидания подключитьобработчикоповещения ' +
  'подключитьрасширениеработыскриптографией подключитьрасширениеработысфайлами подробноепредставлениеошибки ' +
  'показатьвводдаты показатьвводзначения показатьвводстроки показатьвводчисла показатьвопрос показатьзначение ' +
  'показатьинформациюобошибке показатьнакарте показатьоповещениепользователя показатьпредупреждение полноеимяпользователя ' +
  'получитьcomобъект получитьxmlтип получитьадреспоместоположению получитьблокировкусеансов получитьвремязавершенияспящегосеанса ' +
  'получитьвремязасыпанияпассивногосеанса получитьвремяожиданияблокировкиданных получитьданныевыбора ' +
  'получитьдополнительныйпараметрклиенталицензирования получитьдопустимыекодылокализации получитьдопустимыечасовыепояса ' +
  'получитьзаголовокклиентскогоприложения получитьзаголовоксистемы получитьзначенияотборажурналарегистрации ' +
  'получитьидентификаторконфигурации получитьизвременногохранилища получитьимявременногофайла ' +
  'получитьимяклиенталицензирования получитьинформациюэкрановклиента получитьиспользованиежурналарегистрации ' +
  'получитьиспользованиесобытияжурналарегистрации получитькраткийзаголовокприложения получитьмакетоформления ' +
  'получитьмаскувсефайлы получитьмаскувсефайлыклиента получитьмаскувсефайлысервера получитьместоположениепоадресу ' +
  'получитьминимальнуюдлинупаролейпользователей получитьнавигационнуюссылку получитьнавигационнуюссылкуинформационнойбазы ' +
  'получитьобновлениеконфигурациибазыданных получитьобновлениепредопределенныхданныхинформационнойбазы получитьобщиймакет ' +
  'получитьобщуюформу получитьокна получитьоперативнуюотметкувремени получитьотключениебезопасногорежима ' +
  'получитьпараметрыфункциональныхопцийинтерфейса получитьполноеимяпредопределенногозначения ' +
  'получитьпредставлениянавигационныхссылок получитьпроверкусложностипаролейпользователей получитьразделительпути ' +
  'получитьразделительпутиклиента получитьразделительпутисервера получитьсеансыинформационнойбазы ' +
  'получитьскоростьклиентскогосоединения получитьсоединенияинформационнойбазы получитьсообщенияпользователю ' +
  'получитьсоответствиеобъектаиформы получитьсоставстандартногоинтерфейсаodata получитьструктурухранениябазыданных ' +
  'получитьтекущийсеансинформационнойбазы получитьфайл получитьфайлы получитьформу получитьфункциональнуюопцию ' +
  'получитьфункциональнуюопциюинтерфейса получитьчасовойпоясинформационнойбазы пользователиос поместитьвовременноехранилище ' +
  'поместитьфайл поместитьфайлы прав праводоступа предопределенноезначение представлениекодалокализации представлениепериода ' +
  'представлениеправа представлениеприложения представлениесобытияжурналарегистрации представлениечасовогопояса предупреждение ' +
  'прекратитьработусистемы привилегированныйрежим продолжитьвызов прочитатьjson прочитатьxml прочитатьдатуjson пустаястрока ' +
  'рабочийкаталогданныхпользователя разблокироватьданныедляредактирования разделитьфайл разорватьсоединениесвнешнимисточникомданных ' +
  'раскодироватьстроку рольдоступна секунда сигнал символ скопироватьжурналрегистрации смещениелетнеговремени ' +
  'смещениестандартноговремени соединитьбуферыдвоичныхданных создатькаталог создатьфабрикуxdto сокрл сокрлп сокрп сообщить ' +
  'состояние сохранитьзначение сохранитьнастройкипользователя сред стрдлина стрзаканчиваетсяна стрзаменить стрнайти стрначинаетсяс ' +
  'строка строкасоединенияинформационнойбазы стрполучитьстроку стрразделить стрсоединить стрсравнить стрчисловхождений '+
  'стрчислострок стршаблон текущаядата текущаядатасеанса текущаяуниверсальнаядата текущаяуниверсальнаядатавмиллисекундах ' +
  'текущийвариантинтерфейсаклиентскогоприложения текущийвариантосновногошрифтаклиентскогоприложения текущийкодлокализации ' +
  'текущийрежимзапуска текущийязык текущийязыксистемы тип типзнч транзакцияактивна трег удалитьданныеинформационнойбазы ' +
  'удалитьизвременногохранилища удалитьобъекты удалитьфайлы универсальноевремя установитьбезопасныйрежим ' +
  'установитьбезопасныйрежимразделенияданных установитьблокировкусеансов установитьвнешнююкомпоненту ' +
  'установитьвремязавершенияспящегосеанса установитьвремязасыпанияпассивногосеанса установитьвремяожиданияблокировкиданных ' +
  'установитьзаголовокклиентскогоприложения установитьзаголовоксистемы установитьиспользованиежурналарегистрации ' +
  'установитьиспользованиесобытияжурналарегистрации установитькраткийзаголовокприложения ' +
  'установитьминимальнуюдлинупаролейпользователей установитьмонопольныйрежим установитьнастройкиклиенталицензирования ' +
  'установитьобновлениепредопределенныхданныхинформационнойбазы установитьотключениебезопасногорежима ' +
  'установитьпараметрыфункциональныхопцийинтерфейса установитьпривилегированныйрежим ' +
  'установитьпроверкусложностипаролейпользователей установитьрасширениеработыскриптографией ' +
  'установитьрасширениеработысфайлами установитьсоединениесвнешнимисточникомданных установитьсоответствиеобъектаиформы ' +
  'установитьсоставстандартногоинтерфейсаodata установитьчасовойпоясинформационнойбазы установитьчасовойпояссеанса ' +
  'формат цел час часовойпояс часовойпояссеанса число числопрописью этоадресвременногохранилища ';

  // v8 свойства глобального контекста ==> built_in
  var v8_global_context_property =
  'wsссылки библиотекакартинок библиотекамакетовоформлениякомпоновкиданных библиотекастилей бизнеспроцессы ' +
  'внешниеисточникиданных внешниеобработки внешниеотчеты встроенныепокупки главныйинтерфейс главныйстиль ' +
  'документы доставляемыеуведомления журналыдокументов задачи информацияобинтернетсоединении использованиерабочейдаты ' +
  'историяработыпользователя константы критерииотбора метаданные обработки отображениерекламы отправкадоставляемыхуведомлений ' +
  'отчеты панельзадачос параметрзапуска параметрысеанса перечисления планывидоврасчета планывидовхарактеристик ' +
  'планыобмена планысчетов полнотекстовыйпоиск пользователиинформационнойбазы последовательности проверкавстроенныхпокупок ' +
  'рабочаядата расширенияконфигурации регистрыбухгалтерии регистрынакопления регистрырасчета регистрысведений ' +
  'регламентныезадания сериализаторxdto справочники средствагеопозиционирования средствакриптографии средствамультимедиа ' +
  'средстваотображениярекламы средствапочты средствателефонии фабрикаxdto файловыепотоки фоновыезадания хранилищанастроек ' +
  'хранилищевариантовотчетов хранилищенастроекданныхформ хранилищеобщихнастроек хранилищепользовательскихнастроекдинамическихсписков ' +
  'хранилищепользовательскихнастроекотчетов хранилищесистемныхнастроек ';

  // built_in : встроенные или библиотечные объекты (константы, классы, функции)
  var BUILTIN =
  v7_system_constants +
  v7_global_context_methods + v8_global_context_methods +
  v8_global_context_property;
  
  // v8 системные наборы значений ==> class
  var v8_system_sets_of_values =
  'webцвета windowsцвета windowsшрифты библиотекакартинок рамкистиля символы цветастиля шрифтыстиля ';

  // v8 системные перечисления - интерфейсные ==> class
  var v8_system_enums_interface =
  'автоматическоесохранениеданныхформывнастройках автонумерациявформе автораздвижениесерий ' +
  'анимациядиаграммы вариантвыравниванияэлементовизаголовков вариантуправлениявысотойтаблицы ' +
  'вертикальнаяпрокруткаформы вертикальноеположение вертикальноеположениеэлемента видгруппыформы ' +
  'виддекорацииформы виддополненияэлементаформы видизмененияданных видкнопкиформы видпереключателя ' +
  'видподписейкдиаграмме видполяформы видфлажка влияниеразмеранапузырекдиаграммы горизонтальноеположение ' +
  'горизонтальноеположениеэлемента группировкаколонок группировкаподчиненныхэлементовформы ' +
  'группыиэлементы действиеперетаскивания дополнительныйрежимотображения допустимыедействияперетаскивания ' +
  'интервалмеждуэлементамиформы использованиевывода использованиеполосыпрокрутки ' +
  'используемоезначениеточкибиржевойдиаграммы историявыборапривводе источникзначенийоситочекдиаграммы ' +
  'источникзначенияразмерапузырькадиаграммы категориягруппыкоманд максимумсерий начальноеотображениедерева ' +
  'начальноеотображениесписка обновлениетекстаредактирования ориентациядендрограммы ориентациядиаграммы ' +
  'ориентацияметокдиаграммы ориентацияметоксводнойдиаграммы ориентацияэлементаформы отображениевдиаграмме ' +
  'отображениевлегендедиаграммы отображениегруппыкнопок отображениезаголовкашкалыдиаграммы ' +
  'отображениезначенийсводнойдиаграммы отображениезначенияизмерительнойдиаграммы ' +
  'отображениеинтерваладиаграммыганта отображениекнопки отображениекнопкивыбора отображениеобсужденийформы ' +
  'отображениеобычнойгруппы отображениеотрицательныхзначенийпузырьковойдиаграммы отображениепанелипоиска ' +
  'отображениеподсказки отображениепредупрежденияприредактировании отображениеразметкиполосырегулирования ' +
  'отображениестраницформы отображениетаблицы отображениетекстазначениядиаграммыганта ' +
  'отображениеуправленияобычнойгруппы отображениефигурыкнопки палитрацветовдиаграммы поведениеобычнойгруппы ' +
  'поддержкамасштабадендрограммы поддержкамасштабадиаграммыганта поддержкамасштабасводнойдиаграммы ' +
  'поисквтаблицепривводе положениезаголовкаэлементаформы положениекартинкикнопкиформы ' +
  'положениекартинкиэлементаграфическойсхемы положениекоманднойпанелиформы положениекоманднойпанелиэлементаформы ' +
  'положениеопорнойточкиотрисовки положениеподписейкдиаграмме положениеподписейшкалызначенийизмерительнойдиаграммы ' +
  'положениесостоянияпросмотра положениестрокипоиска положениетекстасоединительнойлинии положениеуправленияпоиском ' +
  'положениешкалывремени порядокотображенияточекгоризонтальнойгистограммы порядоксерийвлегендедиаграммы ' +
  'размеркартинки расположениезаголовкашкалыдиаграммы растягиваниеповертикалидиаграммыганта ' +
  'режимавтоотображениясостояния режимвводастроктаблицы режимвыборанезаполненного режимвыделениядаты ' +
  'режимвыделениястрокитаблицы режимвыделениятаблицы режимизмененияразмера режимизменениясвязанногозначения ' +
  'режимиспользованиядиалогапечати режимиспользованияпараметракоманды режиммасштабированияпросмотра ' +
  'режимосновногоокнаклиентскогоприложения режимоткрытияокнаформы режимотображениявыделения ' +
  'режимотображениягеографическойсхемы режимотображениязначенийсерии режимотрисовкисеткиграфическойсхемы ' +
  'режимполупрозрачностидиаграммы режимпробеловдиаграммы режимразмещениянастранице режимредактированияколонки ' +
  'режимсглаживаниядиаграммы режимсглаживанияиндикатора режимсписказадач сквозноевыравнивание ' +
  'сохранениеданныхформывнастройках способзаполнениятекстазаголовкашкалыдиаграммы ' +
  'способопределенияограничивающегозначениядиаграммы стандартнаягруппакоманд стандартноеоформление ' +
  'статусоповещенияпользователя стильстрелки типаппроксимациилиниитрендадиаграммы типдиаграммы ' +
  'типединицышкалывремени типимпортасерийслоягеографическойсхемы типлиниигеографическойсхемы типлиниидиаграммы ' +
  'типмаркерагеографическойсхемы типмаркерадиаграммы типобластиоформления ' +
  'типорганизацииисточникаданныхгеографическойсхемы типотображениясериислоягеографическойсхемы ' +
  'типотображенияточечногообъектагеографическойсхемы типотображенияшкалыэлементалегендыгеографическойсхемы ' +
  'типпоискаобъектовгеографическойсхемы типпроекциигеографическойсхемы типразмещенияизмерений ' +
  'типразмещенияреквизитовизмерений типрамкиэлементауправления типсводнойдиаграммы ' +
  'типсвязидиаграммыганта типсоединениязначенийпосериямдиаграммы типсоединенияточекдиаграммы ' +
  'типсоединительнойлинии типстороныэлементаграфическойсхемы типформыотчета типшкалырадарнойдиаграммы ' +
  'факторлиниитрендадиаграммы фигуракнопки фигурыграфическойсхемы фиксациявтаблице форматдняшкалывремени ' +
  'форматкартинки ширинаподчиненныхэлементовформы ';

  // v8 системные перечисления - свойства прикладных объектов ==> class
  var v8_system_enums_objects_properties =
  'виддвижениябухгалтерии виддвижениянакопления видпериодарегистрарасчета видсчета видточкимаршрутабизнеспроцесса ' +
  'использованиеагрегатарегистранакопления использованиегруппиэлементов использованиережимапроведения ' +
  'использованиесреза периодичностьагрегатарегистранакопления режимавтовремя режимзаписидокумента режимпроведениядокумента ';

  // v8 системные перечисления - планы обмена ==> class
  var v8_system_enums_exchange_plans =
  'авторегистрацияизменений допустимыйномерсообщения отправкаэлементаданных получениеэлементаданных ';

  // v8 системные перечисления - табличный документ ==> class
  var v8_system_enums_tabular_document =
  'использованиерасшифровкитабличногодокумента ориентациястраницы положениеитоговколоноксводнойтаблицы ' +
  'положениеитоговстроксводнойтаблицы положениетекстаотносительнокартинки расположениезаголовкагруппировкитабличногодокумента ' +
  'способчтениязначенийтабличногодокумента типдвустороннейпечати типзаполненияобластитабличногодокумента ' +
  'типкурсоровтабличногодокумента типлиниирисункатабличногодокумента типлинииячейкитабличногодокумента ' +
  'типнаправленияпереходатабличногодокумента типотображениявыделениятабличногодокумента типотображениялинийсводнойтаблицы ' +
  'типразмещениятекстатабличногодокумента типрисункатабличногодокумента типсмещениятабличногодокумента ' +
  'типузоратабличногодокумента типфайлатабличногодокумента точностьпечати чередованиерасположениястраниц ';

  // v8 системные перечисления - планировщик ==> class
  var v8_system_enums_sheduler =
  'отображениевремениэлементовпланировщика ';

  // v8 системные перечисления - форматированный документ ==> class
  var v8_system_enums_formatted_document =
  'типфайлаформатированногодокумента ';

  // v8 системные перечисления - запрос ==> class
  var v8_system_enums_query =
  'обходрезультатазапроса типзаписизапроса ';

  // v8 системные перечисления - построитель отчета ==> class
  var v8_system_enums_report_builder =
  'видзаполнениярасшифровкипостроителяотчета типдобавленияпредставлений типизмеренияпостроителяотчета типразмещенияитогов ';

  // v8 системные перечисления - работа с файлами ==> class
  var v8_system_enums_files =
  'доступкфайлу режимдиалогавыборафайла режимоткрытияфайла ';

  // v8 системные перечисления - построитель запроса ==> class
  var v8_system_enums_query_builder =
  'типизмеренияпостроителязапроса ';

  // v8 системные перечисления - анализ данных ==> class
  var v8_system_enums_data_analysis =
  'видданныханализа методкластеризации типединицыинтервалавременианализаданных типзаполнениятаблицырезультатаанализаданных ' +
  'типиспользованиячисловыхзначенийанализаданных типисточникаданныхпоискаассоциаций типколонкианализаданныхдереворешений ' +
  'типколонкианализаданныхкластеризация типколонкианализаданныхобщаястатистика типколонкианализаданныхпоискассоциаций ' +
  'типколонкианализаданныхпоискпоследовательностей типколонкимоделипрогноза типмерырасстоянияанализаданных ' +
  'типотсеченияправилассоциации типполяанализаданных типстандартизациианализаданных типупорядочиванияправилассоциациианализаданных ' +
  'типупорядочиванияшаблоновпоследовательностейанализаданных типупрощениядереварешений ';

  // v8 системные перечисления - xml, json, xs, dom, xdto, web-сервисы ==> class
  var v8_system_enums_xml_json_xs_dom_xdto_ws =
  'wsнаправлениепараметра вариантxpathxs вариантзаписидатыjson вариантпростоготипаxs видгруппымоделиxs видфасетаxdto ' +
  'действиепостроителяdom завершенностьпростоготипаxs завершенностьсоставноготипаxs завершенностьсхемыxs запрещенныеподстановкиxs ' +
  'исключениягруппподстановкиxs категорияиспользованияатрибутаxs категорияограниченияидентичностиxs категорияограниченияпространствименxs ' +
  'методнаследованияxs модельсодержимогоxs назначениетипаxml недопустимыеподстановкиxs обработкапробельныхсимволовxs обработкасодержимогоxs ' +
  'ограничениезначенияxs параметрыотбораузловdom переносстрокjson позициявдокументеdom пробельныесимволыxml типатрибутаxml типзначенияjson ' +
  'типканоническогоxml типкомпонентыxs типпроверкиxml типрезультатаdomxpath типузлаdom типузлаxml формаxml формапредставленияxs ' +
  'форматдатыjson экранированиесимволовjson ';

  // v8 системные перечисления - система компоновки данных ==> class
  var v8_system_enums_data_composition_system =
  'видсравнениякомпоновкиданных действиеобработкирасшифровкикомпоновкиданных направлениесортировкикомпоновкиданных ' +
  'расположениевложенныхэлементоврезультатакомпоновкиданных расположениеитоговкомпоновкиданных расположениегруппировкикомпоновкиданных ' +
  'расположениеполейгруппировкикомпоновкиданных расположениеполякомпоновкиданных расположениереквизитовкомпоновкиданных ' +
  'расположениересурсовкомпоновкиданных типбухгалтерскогоостаткакомпоновкиданных типвыводатекстакомпоновкиданных ' +
  'типгруппировкикомпоновкиданных типгруппыэлементовотборакомпоновкиданных типдополненияпериодакомпоновкиданных ' +
  'типзаголовкаполейкомпоновкиданных типмакетагруппировкикомпоновкиданных типмакетаобластикомпоновкиданных типостаткакомпоновкиданных ' +
  'типпериодакомпоновкиданных типразмещениятекстакомпоновкиданных типсвязинаборовданныхкомпоновкиданных типэлементарезультатакомпоновкиданных ' +
  'расположениелегендыдиаграммыкомпоновкиданных типпримененияотборакомпоновкиданных режимотображенияэлементанастройкикомпоновкиданных ' +
  'режимотображениянастроеккомпоновкиданных состояниеэлементанастройкикомпоновкиданных способвосстановлениянастроеккомпоновкиданных ' +
  'режимкомпоновкирезультата использованиепараметракомпоновкиданных автопозицияресурсовкомпоновкиданных '+
  'вариантиспользованиягруппировкикомпоновкиданных расположениересурсоввдиаграммекомпоновкиданных фиксациякомпоновкиданных ' +
  'использованиеусловногооформлениякомпоновкиданных ';

  // v8 системные перечисления - почта ==> class
  var v8_system_enums_email =
  'важностьинтернетпочтовогосообщения обработкатекстаинтернетпочтовогосообщения способкодированияинтернетпочтовоговложения ' +
  'способкодированиянеasciiсимволовинтернетпочтовогосообщения типтекстапочтовогосообщения протоколинтернетпочты ' +
  'статусразборапочтовогосообщения ';

  // v8 системные перечисления - журнал регистрации ==> class
  var v8_system_enums_logbook =
  'режимтранзакциизаписижурналарегистрации статустранзакциизаписижурналарегистрации уровеньжурналарегистрации ';

  // v8 системные перечисления - криптография ==> class
  var v8_system_enums_cryptography =
  'расположениехранилищасертификатовкриптографии режимвключениясертификатовкриптографии режимпроверкисертификатакриптографии ' +
  'типхранилищасертификатовкриптографии ';

  // v8 системные перечисления - ZIP ==> class
  var v8_system_enums_zip =
  'кодировкаименфайловвzipфайле методсжатияzip методшифрованияzip режимвосстановленияпутейфайловzip режимобработкиподкаталоговzip ' +
  'режимсохраненияпутейzip уровеньсжатияzip ';

  // v8 системные перечисления - 
  // Блокировка данных, Фоновые задания, Автоматизированное тестирование,
  // Доставляемые уведомления, Встроенные покупки, Интернет, Работа с двоичными данными ==> class
  var v8_system_enums_other =
  'звуковоеоповещение направлениепереходакстроке позициявпотоке порядокбайтов режимблокировкиданных режимуправленияблокировкойданных ' +
  'сервисвстроенныхпокупок состояниефоновогозадания типподписчикадоставляемыхуведомлений уровеньиспользованиязащищенногосоединенияftp ';

  // v8 системные перечисления - схема запроса ==> class
  var v8_system_enums_request_schema =
  'направлениепорядкасхемызапроса типдополненияпериодамисхемызапроса типконтрольнойточкисхемызапроса типобъединениясхемызапроса ' +
  'типпараметрадоступнойтаблицысхемызапроса типсоединениясхемызапроса ';

  // v8 системные перечисления - свойства объектов метаданных ==> class
  var v8_system_enums_properties_of_metadata_objects =
  'httpметод автоиспользованиеобщегореквизита автопрефиксномеразадачи вариантвстроенногоязыка видиерархии видрегистранакопления ' +
  'видтаблицывнешнегоисточникаданных записьдвиженийприпроведении заполнениепоследовательностей индексирование ' +
  'использованиебазыпланавидоврасчета использованиебыстроговыбора использованиеобщегореквизита использованиеподчинения ' +
  'использованиеполнотекстовогопоиска использованиеразделяемыхданныхобщегореквизита использованиереквизита ' +
  'назначениеиспользованияприложения назначениерасширенияконфигурации направлениепередачи обновлениепредопределенныхданных ' +
  'оперативноепроведение основноепредставлениевидарасчета основноепредставлениевидахарактеристики основноепредставлениезадачи ' +
  'основноепредставлениепланаобмена основноепредставлениесправочника основноепредставлениесчета перемещениеграницыприпроведении ' +
  'периодичностьномерабизнеспроцесса периодичностьномерадокумента периодичностьрегистрарасчета периодичностьрегистрасведений ' +
  'повторноеиспользованиевозвращаемыхзначений полнотекстовыйпоискпривводепостроке принадлежностьобъекта проведение ' +
  'разделениеаутентификацииобщегореквизита разделениеданныхобщегореквизита разделениерасширенийконфигурацииобщегореквизита '+
  'режимавтонумерацииобъектов режимзаписирегистра режимиспользованиямодальности ' +
  'режимиспользованиясинхронныхвызововрасширенийплатформыивнешнихкомпонент режимповторногоиспользованиясеансов ' +
  'режимполученияданныхвыборапривводепостроке режимсовместимости режимсовместимостиинтерфейса ' +
  'режимуправленияблокировкойданныхпоумолчанию сериикодовпланавидовхарактеристик сериикодовпланасчетов ' +
  'сериикодовсправочника созданиепривводе способвыбора способпоискастрокипривводепостроке способредактирования ' +
  'типданныхтаблицывнешнегоисточникаданных типкодапланавидоврасчета типкодасправочника типмакета типномерабизнеспроцесса ' +
  'типномерадокумента типномеразадачи типформы удалениедвижений ';

  // v8 системные перечисления - разные ==> class
  var v8_system_enums_differents =
  'важностьпроблемыприменениярасширенияконфигурации вариантинтерфейсаклиентскогоприложения вариантмасштабаформклиентскогоприложения ' +
  'вариантосновногошрифтаклиентскогоприложения вариантстандартногопериода вариантстандартнойдатыначала видграницы видкартинки ' +
  'видотображенияполнотекстовогопоиска видрамки видсравнения видцвета видчисловогозначения видшрифта допустимаядлина допустимыйзнак ' +
  'использованиеbyteordermark использованиеметаданныхполнотекстовогопоиска источникрасширенийконфигурации клавиша кодвозвратадиалога ' +
  'кодировкаxbase кодировкатекста направлениепоиска направлениесортировки обновлениепредопределенныхданных обновлениеприизмененииданных ' +
  'отображениепанелиразделов проверказаполнения режимдиалогавопрос режимзапускаклиентскогоприложения режимокругления режимоткрытияформприложения ' +
  'режимполнотекстовогопоиска скоростьклиентскогосоединения состояниевнешнегоисточникаданных состояниеобновленияконфигурациибазыданных ' +
  'способвыборасертификатаwindows способкодированиястроки статуссообщения типвнешнейкомпоненты типплатформы типповеденияклавишиenter ' +
  'типэлементаинформацииовыполненииобновленияконфигурациибазыданных уровеньизоляциитранзакций хешфункция частидаты';

  // class: встроенные наборы значений, системные перечисления (содержат дочерние значения, обращения к которым через разыменование)
  var CLASS =
  v8_system_sets_of_values +
  v8_system_enums_interface +
  v8_system_enums_objects_properties +
  v8_system_enums_exchange_plans +
  v8_system_enums_tabular_document +
  v8_system_enums_sheduler +
  v8_system_enums_formatted_document +
  v8_system_enums_query +
  v8_system_enums_report_builder +
  v8_system_enums_files +
  v8_system_enums_query_builder +
  v8_system_enums_data_analysis +
  v8_system_enums_xml_json_xs_dom_xdto_ws +
  v8_system_enums_data_composition_system +
  v8_system_enums_email +
  v8_system_enums_logbook +
  v8_system_enums_cryptography +
  v8_system_enums_zip +
  v8_system_enums_other +
  v8_system_enums_request_schema +
  v8_system_enums_properties_of_metadata_objects +
  v8_system_enums_differents;

  // v8 общие объекты (у объектов есть конструктор, экземпляры создаются методом НОВЫЙ) ==> type
  var v8_shared_object =
  'comобъект ftpсоединение httpзапрос httpсервисответ httpсоединение wsопределения wsпрокси xbase анализданных аннотацияxs ' +
  'блокировкаданных буфердвоичныхданных включениеxs выражениекомпоновкиданных генераторслучайныхчисел географическаясхема ' +
  'географическиекоординаты графическаясхема группамоделиxs данныерасшифровкикомпоновкиданных двоичныеданные дендрограмма ' +
  'диаграмма диаграммаганта диалогвыборафайла диалогвыборацвета диалогвыборашрифта диалограсписаниярегламентногозадания ' +
  'диалогредактированиястандартногопериода диапазон документdom документhtml документацияxs доставляемоеуведомление ' +
  'записьdom записьfastinfoset записьhtml записьjson записьxml записьzipфайла записьданных записьтекста записьузловdom ' +
  'запрос защищенноесоединениеopenssl значенияполейрасшифровкикомпоновкиданных извлечениетекста импортxs интернетпочта ' +
  'интернетпочтовоесообщение интернетпочтовыйпрофиль интернетпрокси интернетсоединение информациядляприложенияxs ' +
  'использованиеатрибутаxs использованиесобытияжурналарегистрации источникдоступныхнастроеккомпоновкиданных ' +
  'итераторузловdom картинка квалификаторыдаты квалификаторыдвоичныхданных квалификаторыстроки квалификаторычисла ' +
  'компоновщикмакетакомпоновкиданных компоновщикнастроеккомпоновкиданных конструктормакетаоформлениякомпоновкиданных ' +
  'конструкторнастроеккомпоновкиданных конструкторформатнойстроки линия макеткомпоновкиданных макетобластикомпоновкиданных ' +
  'макетоформлениякомпоновкиданных маскаxs менеджеркриптографии наборсхемxml настройкикомпоновкиданных настройкисериализацииjson ' +
  'обработкакартинок обработкарасшифровкикомпоновкиданных обходдереваdom объявлениеатрибутаxs объявлениенотацииxs ' +
  'объявлениеэлементаxs описаниеиспользованиясобытиядоступжурналарегистрации ' +
  'описаниеиспользованиясобытияотказвдоступежурналарегистрации описаниеобработкирасшифровкикомпоновкиданных ' +
  'описаниепередаваемогофайла описаниетипов определениегруппыатрибутовxs определениегруппымоделиxs ' +
  'определениеограниченияидентичностиxs определениепростоготипаxs определениесоставноготипаxs определениетипадокументаdom ' +
  'определенияxpathxs отборкомпоновкиданных пакетотображаемыхдокументов параметрвыбора параметркомпоновкиданных ' +
  'параметрызаписиjson параметрызаписиxml параметрычтенияxml переопределениеxs планировщик полеанализаданных ' +
  'полекомпоновкиданных построительdom построительзапроса построительотчета построительотчетаанализаданных ' +
  'построительсхемxml поток потоквпамяти почта почтовоесообщение преобразованиеxsl преобразованиекканоническомуxml ' +
  'процессорвыводарезультатакомпоновкиданныхвколлекциюзначений процессорвыводарезультатакомпоновкиданныхвтабличныйдокумент ' +
  'процессоркомпоновкиданных разыменовательпространствименdom рамка расписаниерегламентногозадания расширенноеимяxml ' +
  'результатчтенияданных своднаядиаграмма связьпараметравыбора связьпотипу связьпотипукомпоновкиданных сериализаторxdto ' +
  'сертификатклиентаwindows сертификатклиентафайл сертификаткриптографии сертификатыудостоверяющихцентровwindows ' +
  'сертификатыудостоверяющихцентровфайл сжатиеданных системнаяинформация сообщениепользователю сочетаниеклавиш ' +
  'сравнениезначений стандартнаядатаначала стандартныйпериод схемаxml схемакомпоновкиданных табличныйдокумент ' +
  'текстовыйдокумент тестируемоеприложение типданныхxml уникальныйидентификатор фабрикаxdto файл файловыйпоток ' +
  'фасетдлиныxs фасетколичестваразрядовдробнойчастиxs фасетмаксимальноговключающегозначенияxs ' +
  'фасетмаксимальногоисключающегозначенияxs фасетмаксимальнойдлиныxs фасетминимальноговключающегозначенияxs ' +
  'фасетминимальногоисключающегозначенияxs фасетминимальнойдлиныxs фасетобразцаxs фасетобщегоколичестваразрядовxs ' +
  'фасетперечисленияxs фасетпробельныхсимволовxs фильтрузловdom форматированнаястрока форматированныйдокумент ' +
  'фрагментxs хешированиеданных хранилищезначения цвет чтениеfastinfoset чтениеhtml чтениеjson чтениеxml чтениеzipфайла ' +
  'чтениеданных чтениетекста чтениеузловdom шрифт элементрезультатакомпоновкиданных ';

  // v8 универсальные коллекции значений ==> type
  var v8_universal_collection =
  'comsafearray деревозначений массив соответствие списокзначений структура таблицазначений фиксированнаяструктура ' +
  'фиксированноесоответствие фиксированныймассив ';

  // type : встроенные типы
  var TYPE =
  v8_shared_object +
  v8_universal_collection;

  // literal : примитивные типы
  var LITERAL = 'null истина ложь неопределено';
  
  // number : числа
  var NUMBERS = hljs.inherit(hljs.NUMBER_MODE);

  // string : строки
  var STRINGS = {
    className: 'string',
    begin: '"|\\|', end: '"|$',
    contains: [{begin: '""'}]
  };

  // number : даты
  var DATE = {
    begin: "'", end: "'", excludeBegin: true, excludeEnd: true,
    contains: [
      {
        className: 'number',
        begin: '\\d{4}([\\.\\\\/:-]?\\d{2}){0,5}'
      }
    ]
  };
  
  // comment : комментарии
  var COMMENTS = hljs.inherit(hljs.C_LINE_COMMENT_MODE);
  
  // meta : инструкции препроцессора, директивы компиляции
  var META = {
    className: 'meta',
    lexemes: UNDERSCORE_IDENT_RE,
    begin: '#|&', end: '$',
    keywords: {'meta-keyword': KEYWORD + METAKEYWORD},
    contains: [
      COMMENTS
    ]
  };
  
  // symbol : метка goto
  var SYMBOL = {
    className: 'symbol',
    begin: '~', end: ';|:', excludeEnd: true
  };  
  
  // function : объявление процедур и функций
  var FUNCTION = {
    className: 'function',
    lexemes: UNDERSCORE_IDENT_RE,
    variants: [
      {begin: 'процедура|функция', end: '\\)', keywords: 'процедура функция'},
      {begin: 'конецпроцедуры|конецфункции', keywords: 'конецпроцедуры конецфункции'}
    ],
    contains: [
      {
        begin: '\\(', end: '\\)', endsParent : true,
        contains: [
          {
            className: 'params',
            lexemes: UNDERSCORE_IDENT_RE,
            begin: UNDERSCORE_IDENT_RE, end: ',', excludeEnd: true, endsWithParent: true,
            keywords: {
              keyword: 'знач',
              literal: LITERAL
            },
            contains: [
              NUMBERS,
              STRINGS,
              DATE
            ]
          },
          COMMENTS
        ]
      },
      hljs.inherit(hljs.TITLE_MODE, {begin: UNDERSCORE_IDENT_RE})
    ]
  };

  return {
    case_insensitive: true,
    lexemes: UNDERSCORE_IDENT_RE,
    keywords: {
      keyword: KEYWORD,
      built_in: BUILTIN,
      class: CLASS,
      type: TYPE,
      literal: LITERAL
    },
    contains: [
      META,
      FUNCTION,
      COMMENTS,
      SYMBOL,
      NUMBERS,
      STRINGS,
      DATE
    ]  
  }
};

/***/ }),
/* 121 */
/***/ (function(module, exports) {

module.exports = function(hljs) {
    var regexes = {
        ruleDeclaration: "^[a-zA-Z][a-zA-Z0-9-]*",
        unexpectedChars: "[!@#$^&',?+~`|:]"
    };

    var keywords = [
        "ALPHA",
        "BIT",
        "CHAR",
        "CR",
        "CRLF",
        "CTL",
        "DIGIT",
        "DQUOTE",
        "HEXDIG",
        "HTAB",
        "LF",
        "LWSP",
        "OCTET",
        "SP",
        "VCHAR",
        "WSP"
    ];

    var commentMode = hljs.COMMENT(";", "$");

    var terminalBinaryMode = {
        className: "symbol",
        begin: /%b[0-1]+(-[0-1]+|(\.[0-1]+)+){0,1}/
    };

    var terminalDecimalMode = {
        className: "symbol",
        begin: /%d[0-9]+(-[0-9]+|(\.[0-9]+)+){0,1}/
    };

    var terminalHexadecimalMode = {
        className: "symbol",
        begin: /%x[0-9A-F]+(-[0-9A-F]+|(\.[0-9A-F]+)+){0,1}/,
    };

    var caseSensitivityIndicatorMode = {
        className: "symbol",
        begin: /%[si]/
    };

    var ruleDeclarationMode = {
        begin: regexes.ruleDeclaration + '\\s*=',
        returnBegin: true,
        end: /=/,
        relevance: 0,
        contains: [{className: "attribute", begin: regexes.ruleDeclaration}]
    };

    return {
      illegal: regexes.unexpectedChars,
      keywords: keywords.join(" "),
      contains: [
          ruleDeclarationMode,
          commentMode,
          terminalBinaryMode,
          terminalDecimalMode,
          terminalHexadecimalMode,
          caseSensitivityIndicatorMode,
          hljs.QUOTE_STRING_MODE,
          hljs.NUMBER_MODE
      ]
    };
};

/***/ }),
/* 122 */
/***/ (function(module, exports) {

module.exports = function(hljs) {
  return {
    contains: [
      // IP
      {
        className: 'number',
        begin: '\\b\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}(:\\d{1,5})?\\b'
      },
      // Other numbers
      {
        className: 'number',
        begin: '\\b\\d+\\b',
        relevance: 0
      },
      // Requests
      {
        className: 'string',
        begin: '"(GET|POST|HEAD|PUT|DELETE|CONNECT|OPTIONS|PATCH|TRACE)', end: '"',
        keywords: 'GET POST HEAD PUT DELETE CONNECT OPTIONS PATCH TRACE',
        illegal: '\\n',
        relevance: 10
      },
      // Dates
      {
        className: 'string',
        begin: /\[/, end: /\]/,
        illegal: '\\n'
      },
      // Strings
      {
        className: 'string',
        begin: '"', end: '"',
        illegal: '\\n'
      }
    ]
  };
};

/***/ }),
/* 123 */
/***/ (function(module, exports) {

module.exports = function(hljs) {
  var IDENT_RE = '[a-zA-Z_$][a-zA-Z0-9_$]*';
  var IDENT_FUNC_RETURN_TYPE_RE = '([*]|[a-zA-Z_$][a-zA-Z0-9_$]*)';

  var AS3_REST_ARG_MODE = {
    className: 'rest_arg',
    begin: '[.]{3}', end: IDENT_RE,
    relevance: 10
  };

  return {
    aliases: ['as'],
    keywords: {
      keyword: 'as break case catch class const continue default delete do dynamic each ' +
        'else extends final finally for function get if implements import in include ' +
        'instanceof interface internal is namespace native new override package private ' +
        'protected public return set static super switch this throw try typeof use var void ' +
        'while with',
      literal: 'true false null undefined'
    },
    contains: [
      hljs.APOS_STRING_MODE,
      hljs.QUOTE_STRING_MODE,
      hljs.C_LINE_COMMENT_MODE,
      hljs.C_BLOCK_COMMENT_MODE,
      hljs.C_NUMBER_MODE,
      {
        className: 'class',
        beginKeywords: 'package', end: '{',
        contains: [hljs.TITLE_MODE]
      },
      {
        className: 'class',
        beginKeywords: 'class interface', end: '{', excludeEnd: true,
        contains: [
          {
            beginKeywords: 'extends implements'
          },
          hljs.TITLE_MODE
        ]
      },
      {
        className: 'meta',
        beginKeywords: 'import include', end: ';',
        keywords: {'meta-keyword': 'import include'}
      },
      {
        className: 'function',
        beginKeywords: 'function', end: '[{;]', excludeEnd: true,
        illegal: '\\S',
        contains: [
          hljs.TITLE_MODE,
          {
            className: 'params',
            begin: '\\(', end: '\\)',
            contains: [
              hljs.APOS_STRING_MODE,
              hljs.QUOTE_STRING_MODE,
              hljs.C_LINE_COMMENT_MODE,
              hljs.C_BLOCK_COMMENT_MODE,
              AS3_REST_ARG_MODE
            ]
          },
          {
            begin: ':\\s*' + IDENT_FUNC_RETURN_TYPE_RE
          }
        ]
      },
      hljs.METHOD_GUARD
    ],
    illegal: /#/
  };
};

/***/ }),
/* 124 */
/***/ (function(module, exports) {

module.exports = // We try to support full Ada2012
//
// We highlight all appearances of types, keywords, literals (string, char, number, bool)
// and titles (user defined function/procedure/package)
// CSS classes are set accordingly
//
// Languages causing problems for language detection:
// xml (broken by Foo : Bar type), elm (broken by Foo : Bar type), vbscript-html (broken by body keyword)
// sql (ada default.txt has a lot of sql keywords)

function(hljs) {
    // Regular expression for Ada numeric literals.
    // stolen form the VHDL highlighter

    // Decimal literal:
    var INTEGER_RE = '\\d(_|\\d)*';
    var EXPONENT_RE = '[eE][-+]?' + INTEGER_RE;
    var DECIMAL_LITERAL_RE = INTEGER_RE + '(\\.' + INTEGER_RE + ')?' + '(' + EXPONENT_RE + ')?';

    // Based literal:
    var BASED_INTEGER_RE = '\\w+';
    var BASED_LITERAL_RE = INTEGER_RE + '#' + BASED_INTEGER_RE + '(\\.' + BASED_INTEGER_RE + ')?' + '#' + '(' + EXPONENT_RE + ')?';

    var NUMBER_RE = '\\b(' + BASED_LITERAL_RE + '|' + DECIMAL_LITERAL_RE + ')';

    // Identifier regex
    var ID_REGEX = '[A-Za-z](_?[A-Za-z0-9.])*';

    // bad chars, only allowed in literals
    var BAD_CHARS = '[]{}%#\'\"'

    // Ada doesn't have block comments, only line comments
    var COMMENTS = hljs.COMMENT('--', '$');

    // variable declarations of the form
    // Foo : Bar := Baz;
    // where only Bar will be highlighted
    var VAR_DECLS = {
        // TODO: These spaces are not required by the Ada syntax
        // however, I have yet to see handwritten Ada code where
        // someone does not put spaces around :
        begin: '\\s+:\\s+', end: '\\s*(:=|;|\\)|=>|$)',
        // endsWithParent: true,
        // returnBegin: true,
        illegal: BAD_CHARS,
        contains: [
            {
                // workaround to avoid highlighting
                // named loops and declare blocks
                beginKeywords: 'loop for declare others',
                endsParent: true,
            },
            {
                // properly highlight all modifiers
                className: 'keyword',
                beginKeywords: 'not null constant access function procedure in out aliased exception'
            },
            {
                className: 'type',
                begin: ID_REGEX,
                endsParent: true,
                relevance: 0,
            }
        ]
    };

    return {
        case_insensitive: true,
        keywords: {
            keyword:
                'abort else new return abs elsif not reverse abstract end ' +
                'accept entry select access exception of separate aliased exit or some ' +
                'all others subtype and for out synchronized array function overriding ' +
                'at tagged generic package task begin goto pragma terminate ' +
                'body private then if procedure type case in protected constant interface ' +
                'is raise use declare range delay limited record when delta loop rem while ' +
                'digits renames with do mod requeue xor',
            literal:
                'True False',
        },
        contains: [
            COMMENTS,
            // strings "foobar"
            {
                className: 'string',
                begin: /"/, end: /"/,
                contains: [{begin: /""/, relevance: 0}]
            },
            // characters ''
            {
                // character literals always contain one char
                className: 'string',
                begin: /'.'/
            },
            {
                // number literals
                className: 'number',
                begin: NUMBER_RE,
                relevance: 0
            },
            {
                // Attributes
                className: 'symbol',
                begin: "'" + ID_REGEX,
            },
            {
                // package definition, maybe inside generic
                className: 'title',
                begin: '(\\bwith\\s+)?(\\bprivate\\s+)?\\bpackage\\s+(\\bbody\\s+)?', end: '(is|$)',
                keywords: 'package body',
                excludeBegin: true,
                excludeEnd: true,
                illegal: BAD_CHARS
            },
            {
                // function/procedure declaration/definition
                // maybe inside generic
                begin: '(\\b(with|overriding)\\s+)?\\b(function|procedure)\\s+', end: '(\\bis|\\bwith|\\brenames|\\)\\s*;)',
                keywords: 'overriding function procedure with is renames return',
                // we need to re-match the 'function' keyword, so that
                // the title mode below matches only exactly once
                returnBegin: true,
                contains:
                [
                    COMMENTS,
                    {
                        // name of the function/procedure
                        className: 'title',
                        begin: '(\\bwith\\s+)?\\b(function|procedure)\\s+',
                        end: '(\\(|\\s+|$)',
                        excludeBegin: true,
                        excludeEnd: true,
                        illegal: BAD_CHARS
                    },
                    // 'self'
                    // // parameter types
                    VAR_DECLS,
                    {
                        // return type
                        className: 'type',
                        begin: '\\breturn\\s+', end: '(\\s+|;|$)',
                        keywords: 'return',
                        excludeBegin: true,
                        excludeEnd: true,
                        // we are done with functions
                        endsParent: true,
                        illegal: BAD_CHARS

                    },
                ]
            },
            {
                // new type declarations
                // maybe inside generic
                className: 'type',
                begin: '\\b(sub)?type\\s+', end: '\\s+',
                keywords: 'type',
                excludeBegin: true,
                illegal: BAD_CHARS
            },

            // see comment above the definition
            VAR_DECLS,

            // no markup
            // relevance boosters for small snippets
            // {begin: '\\s*=>\\s*'},
            // {begin: '\\s*:=\\s*'},
            // {begin: '\\s+:=\\s+'},
        ]
    };
};

/***/ }),
/* 125 */
/***/ (function(module, exports) {

module.exports = function(hljs) {
  var NUMBER = {className: 'number', begin: '[\\$%]\\d+'};
  return {
    aliases: ['apacheconf'],
    case_insensitive: true,
    contains: [
      hljs.HASH_COMMENT_MODE,
      {className: 'section', begin: '</?', end: '>'},
      {
        className: 'attribute',
        begin: /\w+/,
        relevance: 0,
        // keywords aren’t needed for highlighting per se, they only boost relevance
        // for a very generally defined mode (starts with a word, ends with line-end
        keywords: {
          nomarkup:
            'order deny allow setenv rewriterule rewriteengine rewritecond documentroot ' +
            'sethandler errordocument loadmodule options header listen serverroot ' +
            'servername'
        },
        starts: {
          end: /$/,
          relevance: 0,
          keywords: {
            literal: 'on off all'
          },
          contains: [
            {
              className: 'meta',
              begin: '\\s\\[', end: '\\]$'
            },
            {
              className: 'variable',
              begin: '[\\$%]\\{', end: '\\}',
              contains: ['self', NUMBER]
            },
            NUMBER,
            hljs.QUOTE_STRING_MODE
          ]
        }
      }
    ],
    illegal: /\S/
  };
};

/***/ }),
/* 126 */
/***/ (function(module, exports) {

module.exports = function(hljs) {
  var STRING = hljs.inherit(hljs.QUOTE_STRING_MODE, {illegal: ''});
  var PARAMS = {
    className: 'params',
    begin: '\\(', end: '\\)',
    contains: ['self', hljs.C_NUMBER_MODE, STRING]
  };
  var COMMENT_MODE_1 = hljs.COMMENT('--', '$');
  var COMMENT_MODE_2 = hljs.COMMENT(
    '\\(\\*',
    '\\*\\)',
    {
      contains: ['self', COMMENT_MODE_1] //allow nesting
    }
  );
  var COMMENTS = [
    COMMENT_MODE_1,
    COMMENT_MODE_2,
    hljs.HASH_COMMENT_MODE
  ];

  return {
    aliases: ['osascript'],
    keywords: {
      keyword:
        'about above after against and around as at back before beginning ' +
        'behind below beneath beside between but by considering ' +
        'contain contains continue copy div does eighth else end equal ' +
        'equals error every exit fifth first for fourth from front ' +
        'get given global if ignoring in into is it its last local me ' +
        'middle mod my ninth not of on onto or over prop property put ref ' +
        'reference repeat returning script second set seventh since ' +
        'sixth some tell tenth that the|0 then third through thru ' +
        'timeout times to transaction try until where while whose with ' +
        'without',
      literal:
        'AppleScript false linefeed return pi quote result space tab true',
      built_in:
        'alias application boolean class constant date file integer list ' +
        'number real record string text ' +
        'activate beep count delay launch log offset read round ' +
        'run say summarize write ' +
        'character characters contents day frontmost id item length ' +
        'month name paragraph paragraphs rest reverse running time version ' +
        'weekday word words year'
    },
    contains: [
      STRING,
      hljs.C_NUMBER_MODE,
      {
        className: 'built_in',
        begin:
          '\\b(clipboard info|the clipboard|info for|list (disks|folder)|' +
          'mount volume|path to|(close|open for) access|(get|set) eof|' +
          'current date|do shell script|get volume settings|random number|' +
          'set volume|system attribute|system info|time to GMT|' +
          '(load|run|store) script|scripting components|' +
          'ASCII (character|number)|localized string|' +
          'choose (application|color|file|file name|' +
          'folder|from list|remote application|URL)|' +
          'display (alert|dialog))\\b|^\\s*return\\b'
      },
      {
        className: 'literal',
        begin:
          '\\b(text item delimiters|current application|missing value)\\b'
      },
      {
        className: 'keyword',
        begin:
          '\\b(apart from|aside from|instead of|out of|greater than|' +
          "isn't|(doesn't|does not) (equal|come before|come after|contain)|" +
          '(greater|less) than( or equal)?|(starts?|ends|begins?) with|' +
          'contained by|comes (before|after)|a (ref|reference)|POSIX file|' +
          'POSIX path|(date|time) string|quoted form)\\b'
      },
      {
        beginKeywords: 'on',
        illegal: '[${=;\\n]',
        contains: [hljs.UNDERSCORE_TITLE_MODE, PARAMS]
      }
    ].concat(COMMENTS),
    illegal: '//|->|=>|\\[\\['
  };
};

/***/ }),
/* 127 */
/***/ (function(module, exports) {

module.exports = function(hljs) {
  var CPP_PRIMITIVE_TYPES = {
    className: 'keyword',
    begin: '\\b[a-z\\d_]*_t\\b'
  };

  var STRINGS = {
    className: 'string',
    variants: [
      {
        begin: '(u8?|U)?L?"', end: '"',
        illegal: '\\n',
        contains: [hljs.BACKSLASH_ESCAPE]
      },
      {
        begin: '(u8?|U)?R"', end: '"',
        contains: [hljs.BACKSLASH_ESCAPE]
      },
      {
        begin: '\'\\\\?.', end: '\'',
        illegal: '.'
      }
    ]
  };

  var NUMBERS = {
    className: 'number',
    variants: [
      { begin: '\\b(0b[01\']+)' },
      { begin: '(-?)\\b([\\d\']+(\\.[\\d\']*)?|\\.[\\d\']+)(u|U|l|L|ul|UL|f|F|b|B)' },
      { begin: '(-?)(\\b0[xX][a-fA-F0-9\']+|(\\b[\\d\']+(\\.[\\d\']*)?|\\.[\\d\']+)([eE][-+]?[\\d\']+)?)' }
    ],
    relevance: 0
  };

  var PREPROCESSOR =       {
    className: 'meta',
    begin: /#\s*[a-z]+\b/, end: /$/,
    keywords: {
      'meta-keyword':
        'if else elif endif define undef warning error line ' +
        'pragma ifdef ifndef include'
    },
    contains: [
      {
        begin: /\\\n/, relevance: 0
      },
      hljs.inherit(STRINGS, {className: 'meta-string'}),
      {
        className: 'meta-string',
        begin: /<[^\n>]*>/, end: /$/,
        illegal: '\\n',
      },
      hljs.C_LINE_COMMENT_MODE,
      hljs.C_BLOCK_COMMENT_MODE
    ]
  };

  var FUNCTION_TITLE = hljs.IDENT_RE + '\\s*\\(';

  var CPP_KEYWORDS = {
    keyword: 'int float while private char catch import module export virtual operator sizeof ' +
      'dynamic_cast|10 typedef const_cast|10 const for static_cast|10 union namespace ' +
      'unsigned long volatile static protected bool template mutable if public friend ' +
      'do goto auto void enum else break extern using asm case typeid ' +
      'short reinterpret_cast|10 default double register explicit signed typename try this ' +
      'switch continue inline delete alignof constexpr decltype ' +
      'noexcept static_assert thread_local restrict _Bool complex _Complex _Imaginary ' +
      'atomic_bool atomic_char atomic_schar ' +
      'atomic_uchar atomic_short atomic_ushort atomic_int atomic_uint atomic_long atomic_ulong atomic_llong ' +
      'atomic_ullong new throw return ' +
      'and or not',
    built_in: 'std string cin cout cerr clog stdin stdout stderr stringstream istringstream ostringstream ' +
      'auto_ptr deque list queue stack vector map set bitset multiset multimap unordered_set ' +
      'unordered_map unordered_multiset unordered_multimap array shared_ptr abort abs acos ' +
      'asin atan2 atan calloc ceil cosh cos exit exp fabs floor fmod fprintf fputs free frexp ' +
      'fscanf isalnum isalpha iscntrl isdigit isgraph islower isprint ispunct isspace isupper ' +
      'isxdigit tolower toupper labs ldexp log10 log malloc realloc memchr memcmp memcpy memset modf pow ' +
      'printf putchar puts scanf sinh sin snprintf sprintf sqrt sscanf strcat strchr strcmp ' +
      'strcpy strcspn strlen strncat strncmp strncpy strpbrk strrchr strspn strstr tanh tan ' +
      'vfprintf vprintf vsprintf endl initializer_list unique_ptr',
    literal: 'true false nullptr NULL'
  };

  var EXPRESSION_CONTAINS = [
    CPP_PRIMITIVE_TYPES,
    hljs.C_LINE_COMMENT_MODE,
    hljs.C_BLOCK_COMMENT_MODE,
    NUMBERS,
    STRINGS
  ];

  return {
    aliases: ['c', 'cc', 'h', 'c++', 'h++', 'hpp'],
    keywords: CPP_KEYWORDS,
    illegal: '</',
    contains: EXPRESSION_CONTAINS.concat([
      PREPROCESSOR,
      {
        begin: '\\b(deque|list|queue|stack|vector|map|set|bitset|multiset|multimap|unordered_map|unordered_set|unordered_multiset|unordered_multimap|array)\\s*<', end: '>',
        keywords: CPP_KEYWORDS,
        contains: ['self', CPP_PRIMITIVE_TYPES]
      },
      {
        begin: hljs.IDENT_RE + '::',
        keywords: CPP_KEYWORDS
      },
      {
        // This mode covers expression context where we can't expect a function
        // definition and shouldn't highlight anything that looks like one:
        // `return some()`, `else if()`, `(x*sum(1, 2))`
        variants: [
          {begin: /=/, end: /;/},
          {begin: /\(/, end: /\)/},
          {beginKeywords: 'new throw return else', end: /;/}
        ],
        keywords: CPP_KEYWORDS,
        contains: EXPRESSION_CONTAINS.concat([
          {
            begin: /\(/, end: /\)/,
            keywords: CPP_KEYWORDS,
            contains: EXPRESSION_CONTAINS.concat(['self']),
            relevance: 0
          }
        ]),
        relevance: 0
      },
      {
        className: 'function',
        begin: '(' + hljs.IDENT_RE + '[\\*&\\s]+)+' + FUNCTION_TITLE,
        returnBegin: true, end: /[{;=]/,
        excludeEnd: true,
        keywords: CPP_KEYWORDS,
        illegal: /[^\w\s\*&]/,
        contains: [
          {
            begin: FUNCTION_TITLE, returnBegin: true,
            contains: [hljs.TITLE_MODE],
            relevance: 0
          },
          {
            className: 'params',
            begin: /\(/, end: /\)/,
            keywords: CPP_KEYWORDS,
            relevance: 0,
            contains: [
              hljs.C_LINE_COMMENT_MODE,
              hljs.C_BLOCK_COMMENT_MODE,
              STRINGS,
              NUMBERS,
              CPP_PRIMITIVE_TYPES
            ]
          },
          hljs.C_LINE_COMMENT_MODE,
          hljs.C_BLOCK_COMMENT_MODE,
          PREPROCESSOR
        ]
      },
      {
        className: 'class',
        beginKeywords: 'class struct', end: /[{;:]/,
        contains: [
          {begin: /</, end: />/, contains: ['self']}, // skip generic stuff
          hljs.TITLE_MODE
        ]
      }
    ]),
    exports: {
      preprocessor: PREPROCESSOR,
      strings: STRINGS,
      keywords: CPP_KEYWORDS
    }
  };
};

/***/ }),
/* 128 */
/***/ (function(module, exports) {

module.exports = function(hljs) {
  var CPP = hljs.getLanguage('cpp').exports;
	return {
    keywords: {
      keyword:
        'boolean byte word string String array ' + CPP.keywords.keyword,
      built_in:
        'setup loop while catch for if do goto try switch case else ' +
        'default break continue return ' +
        'KeyboardController MouseController SoftwareSerial ' +
        'EthernetServer EthernetClient LiquidCrystal ' +
        'RobotControl GSMVoiceCall EthernetUDP EsploraTFT ' +
        'HttpClient RobotMotor WiFiClient GSMScanner ' +
        'FileSystem Scheduler GSMServer YunClient YunServer ' +
        'IPAddress GSMClient GSMModem Keyboard Ethernet ' +
        'Console GSMBand Esplora Stepper Process ' +
        'WiFiUDP GSM_SMS Mailbox USBHost Firmata PImage ' +
        'Client Server GSMPIN FileIO Bridge Serial ' +
        'EEPROM Stream Mouse Audio Servo File Task ' +
        'GPRS WiFi Wire TFT GSM SPI SD ' +
        'runShellCommandAsynchronously analogWriteResolution ' +
        'retrieveCallingNumber printFirmwareVersion ' +
        'analogReadResolution sendDigitalPortPair ' +
        'noListenOnLocalhost readJoystickButton setFirmwareVersion ' +
        'readJoystickSwitch scrollDisplayRight getVoiceCallStatus ' +
        'scrollDisplayLeft writeMicroseconds delayMicroseconds ' +
        'beginTransmission getSignalStrength runAsynchronously ' +
        'getAsynchronously listenOnLocalhost getCurrentCarrier ' +
        'readAccelerometer messageAvailable sendDigitalPorts ' +
        'lineFollowConfig countryNameWrite runShellCommand ' +
        'readStringUntil rewindDirectory readTemperature ' +
        'setClockDivider readLightSensor endTransmission ' +
        'analogReference detachInterrupt countryNameRead ' +
        'attachInterrupt encryptionType readBytesUntil ' +
        'robotNameWrite readMicrophone robotNameRead cityNameWrite ' +
        'userNameWrite readJoystickY readJoystickX mouseReleased ' +
        'openNextFile scanNetworks noInterrupts digitalWrite ' +
        'beginSpeaker mousePressed isActionDone mouseDragged ' +
        'displayLogos noAutoscroll addParameter remoteNumber ' +
        'getModifiers keyboardRead userNameRead waitContinue ' +
        'processInput parseCommand printVersion readNetworks ' +
        'writeMessage blinkVersion cityNameRead readMessage ' +
        'setDataMode parsePacket isListening setBitOrder ' +
        'beginPacket isDirectory motorsWrite drawCompass ' +
        'digitalRead clearScreen serialEvent rightToLeft ' +
        'setTextSize leftToRight requestFrom keyReleased ' +
        'compassRead analogWrite interrupts WiFiServer ' +
        'disconnect playMelody parseFloat autoscroll ' +
        'getPINUsed setPINUsed setTimeout sendAnalog ' +
        'readSlider analogRead beginWrite createChar ' +
        'motorsStop keyPressed tempoWrite readButton ' +
        'subnetMask debugPrint macAddress writeGreen ' +
        'randomSeed attachGPRS readString sendString ' +
        'remotePort releaseAll mouseMoved background ' +
        'getXChange getYChange answerCall getResult ' +
        'voiceCall endPacket constrain getSocket writeJSON ' +
        'getButton available connected findUntil readBytes ' +
        'exitValue readGreen writeBlue startLoop IPAddress ' +
        'isPressed sendSysex pauseMode gatewayIP setCursor ' +
        'getOemKey tuneWrite noDisplay loadImage switchPIN ' +
        'onRequest onReceive changePIN playFile noBuffer ' +
        'parseInt overflow checkPIN knobRead beginTFT ' +
        'bitClear updateIR bitWrite position writeRGB ' +
        'highByte writeRed setSpeed readBlue noStroke ' +
        'remoteIP transfer shutdown hangCall beginSMS ' +
        'endWrite attached maintain noCursor checkReg ' +
        'checkPUK shiftOut isValid shiftIn pulseIn ' +
        'connect println localIP pinMode getIMEI ' +
        'display noBlink process getBand running beginSD ' +
        'drawBMP lowByte setBand release bitRead prepare ' +
        'pointTo readRed setMode noFill remove listen ' +
        'stroke detach attach noTone exists buffer ' +
        'height bitSet circle config cursor random ' +
        'IRread setDNS endSMS getKey micros ' +
        'millis begin print write ready flush width ' +
        'isPIN blink clear press mkdir rmdir close ' +
        'point yield image BSSID click delay ' +
        'read text move peek beep rect line open ' +
        'seek fill size turn stop home find ' +
        'step tone sqrt RSSI SSID ' +
        'end bit tan cos sin pow map abs max ' +
        'min get run put',
      literal:
        'DIGITAL_MESSAGE FIRMATA_STRING ANALOG_MESSAGE ' +
        'REPORT_DIGITAL REPORT_ANALOG INPUT_PULLUP ' +
        'SET_PIN_MODE INTERNAL2V56 SYSTEM_RESET LED_BUILTIN ' +
        'INTERNAL1V1 SYSEX_START INTERNAL EXTERNAL ' +
        'DEFAULT OUTPUT INPUT HIGH LOW'
    },
    contains: [
      CPP.preprocessor,
      hljs.C_LINE_COMMENT_MODE,
      hljs.C_BLOCK_COMMENT_MODE,
      hljs.APOS_STRING_MODE,
      hljs.QUOTE_STRING_MODE,
      hljs.C_NUMBER_MODE
    ]
  };
};

/***/ }),
/* 129 */
/***/ (function(module, exports) {

module.exports = function(hljs) {
    //local labels: %?[FB]?[AT]?\d{1,2}\w+
  return {
    case_insensitive: true,
    aliases: ['arm'],
    lexemes: '\\.?' + hljs.IDENT_RE,
    keywords: {
      meta:
        //GNU preprocs
        '.2byte .4byte .align .ascii .asciz .balign .byte .code .data .else .end .endif .endm .endr .equ .err .exitm .extern .global .hword .if .ifdef .ifndef .include .irp .long .macro .rept .req .section .set .skip .space .text .word .arm .thumb .code16 .code32 .force_thumb .thumb_func .ltorg '+
        //ARM directives
        'ALIAS ALIGN ARM AREA ASSERT ATTR CN CODE CODE16 CODE32 COMMON CP DATA DCB DCD DCDU DCDO DCFD DCFDU DCI DCQ DCQU DCW DCWU DN ELIF ELSE END ENDFUNC ENDIF ENDP ENTRY EQU EXPORT EXPORTAS EXTERN FIELD FILL FUNCTION GBLA GBLL GBLS GET GLOBAL IF IMPORT INCBIN INCLUDE INFO KEEP LCLA LCLL LCLS LTORG MACRO MAP MEND MEXIT NOFP OPT PRESERVE8 PROC QN READONLY RELOC REQUIRE REQUIRE8 RLIST FN ROUT SETA SETL SETS SN SPACE SUBT THUMB THUMBX TTL WHILE WEND ',
      built_in:
        'r0 r1 r2 r3 r4 r5 r6 r7 r8 r9 r10 r11 r12 r13 r14 r15 '+ //standard registers
        'pc lr sp ip sl sb fp '+ //typical regs plus backward compatibility
        'a1 a2 a3 a4 v1 v2 v3 v4 v5 v6 v7 v8 f0 f1 f2 f3 f4 f5 f6 f7 '+ //more regs and fp
        'p0 p1 p2 p3 p4 p5 p6 p7 p8 p9 p10 p11 p12 p13 p14 p15 '+ //coprocessor regs
        'c0 c1 c2 c3 c4 c5 c6 c7 c8 c9 c10 c11 c12 c13 c14 c15 '+ //more coproc
        'q0 q1 q2 q3 q4 q5 q6 q7 q8 q9 q10 q11 q12 q13 q14 q15 '+ //advanced SIMD NEON regs

        //program status registers
        'cpsr_c cpsr_x cpsr_s cpsr_f cpsr_cx cpsr_cxs cpsr_xs cpsr_xsf cpsr_sf cpsr_cxsf '+
        'spsr_c spsr_x spsr_s spsr_f spsr_cx spsr_cxs spsr_xs spsr_xsf spsr_sf spsr_cxsf '+

        //NEON and VFP registers
        's0 s1 s2 s3 s4 s5 s6 s7 s8 s9 s10 s11 s12 s13 s14 s15 '+
        's16 s17 s18 s19 s20 s21 s22 s23 s24 s25 s26 s27 s28 s29 s30 s31 '+
        'd0 d1 d2 d3 d4 d5 d6 d7 d8 d9 d10 d11 d12 d13 d14 d15 '+
        'd16 d17 d18 d19 d20 d21 d22 d23 d24 d25 d26 d27 d28 d29 d30 d31 ' +

        '{PC} {VAR} {TRUE} {FALSE} {OPT} {CONFIG} {ENDIAN} {CODESIZE} {CPU} {FPU} {ARCHITECTURE} {PCSTOREOFFSET} {ARMASM_VERSION} {INTER} {ROPI} {RWPI} {SWST} {NOSWST} . @'
    },
    contains: [
      {
        className: 'keyword',
        begin: '\\b('+     //mnemonics
            'adc|'+
            '(qd?|sh?|u[qh]?)?add(8|16)?|usada?8|(q|sh?|u[qh]?)?(as|sa)x|'+
            'and|adrl?|sbc|rs[bc]|asr|b[lx]?|blx|bxj|cbn?z|tb[bh]|bic|'+
            'bfc|bfi|[su]bfx|bkpt|cdp2?|clz|clrex|cmp|cmn|cpsi[ed]|cps|'+
            'setend|dbg|dmb|dsb|eor|isb|it[te]{0,3}|lsl|lsr|ror|rrx|'+
            'ldm(([id][ab])|f[ds])?|ldr((s|ex)?[bhd])?|movt?|mvn|mra|mar|'+
            'mul|[us]mull|smul[bwt][bt]|smu[as]d|smmul|smmla|'+
            'mla|umlaal|smlal?([wbt][bt]|d)|mls|smlsl?[ds]|smc|svc|sev|'+
            'mia([bt]{2}|ph)?|mrr?c2?|mcrr2?|mrs|msr|orr|orn|pkh(tb|bt)|rbit|'+
            'rev(16|sh)?|sel|[su]sat(16)?|nop|pop|push|rfe([id][ab])?|'+
            'stm([id][ab])?|str(ex)?[bhd]?|(qd?)?sub|(sh?|q|u[qh]?)?sub(8|16)|'+
            '[su]xt(a?h|a?b(16)?)|srs([id][ab])?|swpb?|swi|smi|tst|teq|'+
            'wfe|wfi|yield'+
        ')'+
        '(eq|ne|cs|cc|mi|pl|vs|vc|hi|ls|ge|lt|gt|le|al|hs|lo)?'+ //condition codes
        '[sptrx]?' ,                                             //legal postfixes
        end: '\\s'
      },
      hljs.COMMENT('[;@]', '$', {relevance: 0}),
      hljs.C_BLOCK_COMMENT_MODE,
      hljs.QUOTE_STRING_MODE,
      {
        className: 'string',
        begin: '\'',
        end: '[^\\\\]\'',
        relevance: 0
      },
      {
        className: 'title',
        begin: '\\|', end: '\\|',
        illegal: '\\n',
        relevance: 0
      },
      {
        className: 'number',
        variants: [
            {begin: '[#$=]?0x[0-9a-f]+'}, //hex
            {begin: '[#$=]?0b[01]+'},     //bin
            {begin: '[#$=]\\d+'},        //literal
            {begin: '\\b\\d+'}           //bare number
        ],
        relevance: 0
      },
      {
        className: 'symbol',
        variants: [
            {begin: '^[a-z_\\.\\$][a-z0-9_\\.\\$]+'}, //ARM syntax
            {begin: '^\\s*[a-z_\\.\\$][a-z0-9_\\.\\$]+:'}, //GNU ARM syntax
            {begin: '[=#]\\w+' }  //label reference
        ],
        relevance: 0
      }
    ]
  };
};

/***/ }),
/* 130 */
/***/ (function(module, exports) {

module.exports = function(hljs) {
  var XML_IDENT_RE = '[A-Za-z0-9\\._:-]+';
  var TAG_INTERNALS = {
    endsWithParent: true,
    illegal: /</,
    relevance: 0,
    contains: [
      {
        className: 'attr',
        begin: XML_IDENT_RE,
        relevance: 0
      },
      {
        begin: /=\s*/,
        relevance: 0,
        contains: [
          {
            className: 'string',
            endsParent: true,
            variants: [
              {begin: /"/, end: /"/},
              {begin: /'/, end: /'/},
              {begin: /[^\s"'=<>`]+/}
            ]
          }
        ]
      }
    ]
  };
  return {
    aliases: ['html', 'xhtml', 'rss', 'atom', 'xjb', 'xsd', 'xsl', 'plist'],
    case_insensitive: true,
    contains: [
      {
        className: 'meta',
        begin: '<!DOCTYPE', end: '>',
        relevance: 10,
        contains: [{begin: '\\[', end: '\\]'}]
      },
      hljs.COMMENT(
        '<!--',
        '-->',
        {
          relevance: 10
        }
      ),
      {
        begin: '<\\!\\[CDATA\\[', end: '\\]\\]>',
        relevance: 10
      },
      {
        begin: /<\?(php)?/, end: /\?>/,
        subLanguage: 'php',
        contains: [{begin: '/\\*', end: '\\*/', skip: true}]
      },
      {
        className: 'tag',
        /*
        The lookahead pattern (?=...) ensures that 'begin' only matches
        '<style' as a single word, followed by a whitespace or an
        ending braket. The '$' is needed for the lexeme to be recognized
        by hljs.subMode() that tests lexemes outside the stream.
        */
        begin: '<style(?=\\s|>|$)', end: '>',
        keywords: {name: 'style'},
        contains: [TAG_INTERNALS],
        starts: {
          end: '</style>', returnEnd: true,
          subLanguage: ['css', 'xml']
        }
      },
      {
        className: 'tag',
        // See the comment in the <style tag about the lookahead pattern
        begin: '<script(?=\\s|>|$)', end: '>',
        keywords: {name: 'script'},
        contains: [TAG_INTERNALS],
        starts: {
          end: '\<\/script\>', returnEnd: true,
          subLanguage: ['actionscript', 'javascript', 'handlebars', 'xml']
        }
      },
      {
        className: 'meta',
        variants: [
          {begin: /<\?xml/, end: /\?>/, relevance: 10},
          {begin: /<\?\w+/, end: /\?>/}
        ]
      },
      {
        className: 'tag',
        begin: '</?', end: '/?>',
        contains: [
          {
            className: 'name', begin: /[^\/><\s]+/, relevance: 0
          },
          TAG_INTERNALS
        ]
      }
    ]
  };
};

/***/ }),
/* 131 */
/***/ (function(module, exports) {

module.exports = function(hljs) {
  return {
    aliases: ['adoc'],
    contains: [
      // block comment
      hljs.COMMENT(
        '^/{4,}\\n',
        '\\n/{4,}$',
        // can also be done as...
        //'^/{4,}$',
        //'^/{4,}$',
        {
          relevance: 10
        }
      ),
      // line comment
      hljs.COMMENT(
        '^//',
        '$',
        {
          relevance: 0
        }
      ),
      // title
      {
        className: 'title',
        begin: '^\\.\\w.*$'
      },
      // example, admonition & sidebar blocks
      {
        begin: '^[=\\*]{4,}\\n',
        end: '\\n^[=\\*]{4,}$',
        relevance: 10
      },
      // headings
      {
        className: 'section',
        relevance: 10,
        variants: [
          {begin: '^(={1,5}) .+?( \\1)?$'},
          {begin: '^[^\\[\\]\\n]+?\\n[=\\-~\\^\\+]{2,}$'},
        ]
      },
      // document attributes
      {
        className: 'meta',
        begin: '^:.+?:',
        end: '\\s',
        excludeEnd: true,
        relevance: 10
      },
      // block attributes
      {
        className: 'meta',
        begin: '^\\[.+?\\]$',
        relevance: 0
      },
      // quoteblocks
      {
        className: 'quote',
        begin: '^_{4,}\\n',
        end: '\\n_{4,}$',
        relevance: 10
      },
      // listing and literal blocks
      {
        className: 'code',
        begin: '^[\\-\\.]{4,}\\n',
        end: '\\n[\\-\\.]{4,}$',
        relevance: 10
      },
      // passthrough blocks
      {
        begin: '^\\+{4,}\\n',
        end: '\\n\\+{4,}$',
        contains: [
          {
            begin: '<', end: '>',
            subLanguage: 'xml',
            relevance: 0
          }
        ],
        relevance: 10
      },
      // lists (can only capture indicators)
      {
        className: 'bullet',
        begin: '^(\\*+|\\-+|\\.+|[^\\n]+?::)\\s+'
      },
      // admonition
      {
        className: 'symbol',
        begin: '^(NOTE|TIP|IMPORTANT|WARNING|CAUTION):\\s+',
        relevance: 10
      },
      // inline strong
      {
        className: 'strong',
        // must not follow a word character or be followed by an asterisk or space
        begin: '\\B\\*(?![\\*\\s])',
        end: '(\\n{2}|\\*)',
        // allow escaped asterisk followed by word char
        contains: [
          {
            begin: '\\\\*\\w',
            relevance: 0
          }
        ]
      },
      // inline emphasis
      {
        className: 'emphasis',
        // must not follow a word character or be followed by a single quote or space
        begin: '\\B\'(?![\'\\s])',
        end: '(\\n{2}|\')',
        // allow escaped single quote followed by word char
        contains: [
          {
            begin: '\\\\\'\\w',
            relevance: 0
          }
        ],
        relevance: 0
      },
      // inline emphasis (alt)
      {
        className: 'emphasis',
        // must not follow a word character or be followed by an underline or space
        begin: '_(?![_\\s])',
        end: '(\\n{2}|_)',
        relevance: 0
      },
      // inline smart quotes
      {
        className: 'string',
        variants: [
          {begin: "``.+?''"},
          {begin: "`.+?'"}
        ]
      },
      // inline code snippets (TODO should get same treatment as strong and emphasis)
      {
        className: 'code',
        begin: '(`.+?`|\\+.+?\\+)',
        relevance: 0
      },
      // indented literal block
      {
        className: 'code',
        begin: '^[ \\t]',
        end: '$',
        relevance: 0
      },
      // horizontal rules
      {
        begin: '^\'{3,}[ \\t]*$',
        relevance: 10
      },
      // images and links
      {
        begin: '(link:)?(http|https|ftp|file|irc|image:?):\\S+\\[.*?\\]',
        returnBegin: true,
        contains: [
          {
            begin: '(link|image:?):',
            relevance: 0
          },
          {
            className: 'link',
            begin: '\\w',
            end: '[^\\[]+',
            relevance: 0
          },
          {
            className: 'string',
            begin: '\\[',
            end: '\\]',
            excludeBegin: true,
            excludeEnd: true,
            relevance: 0
          }
        ],
        relevance: 10
      }
    ]
  };
};

/***/ }),
/* 132 */
/***/ (function(module, exports) {

module.exports = function (hljs) {
  var KEYWORDS =
    'false synchronized int abstract float private char boolean static null if const ' +
    'for true while long throw strictfp finally protected import native final return void ' +
    'enum else extends implements break transient new catch instanceof byte super volatile case ' +
    'assert short package default double public try this switch continue throws privileged ' +
    'aspectOf adviceexecution proceed cflowbelow cflow initialization preinitialization ' +
    'staticinitialization withincode target within execution getWithinTypeName handler ' +
    'thisJoinPoint thisJoinPointStaticPart thisEnclosingJoinPointStaticPart declare parents '+
    'warning error soft precedence thisAspectInstance';
  var SHORTKEYS = 'get set args call';
  return {
    keywords : KEYWORDS,
    illegal : /<\/|#/,
    contains : [
      hljs.COMMENT(
        '/\\*\\*',
        '\\*/',
        {
          relevance : 0,
          contains : [
            {
              // eat up @'s in emails to prevent them to be recognized as doctags
              begin: /\w+@/, relevance: 0
            },
            {
              className : 'doctag',
              begin : '@[A-Za-z]+'
            }
          ]
        }
      ),
      hljs.C_LINE_COMMENT_MODE,
      hljs.C_BLOCK_COMMENT_MODE,
      hljs.APOS_STRING_MODE,
      hljs.QUOTE_STRING_MODE,
      {
        className : 'class',
        beginKeywords : 'aspect',
        end : /[{;=]/,
        excludeEnd : true,
        illegal : /[:;"\[\]]/,
        contains : [
          {
            beginKeywords : 'extends implements pertypewithin perthis pertarget percflowbelow percflow issingleton'
          },
          hljs.UNDERSCORE_TITLE_MODE,
          {
            begin : /\([^\)]*/,
            end : /[)]+/,
            keywords : KEYWORDS + ' ' + SHORTKEYS,
            excludeEnd : false
          }
        ]
      },
      {
        className : 'class',
        beginKeywords : 'class interface',
        end : /[{;=]/,
        excludeEnd : true,
        relevance: 0,
        keywords : 'class interface',
        illegal : /[:"\[\]]/,
        contains : [
          {beginKeywords : 'extends implements'},
          hljs.UNDERSCORE_TITLE_MODE
        ]
      },
      {
        // AspectJ Constructs
        beginKeywords : 'pointcut after before around throwing returning',
        end : /[)]/,
        excludeEnd : false,
        illegal : /["\[\]]/,
        contains : [
          {
            begin : hljs.UNDERSCORE_IDENT_RE + '\\s*\\(',
            returnBegin : true,
            contains : [hljs.UNDERSCORE_TITLE_MODE]
          }
        ]
      },
      {
        begin : /[:]/,
        returnBegin : true,
        end : /[{;]/,
        relevance: 0,
        excludeEnd : false,
        keywords : KEYWORDS,
        illegal : /["\[\]]/,
        contains : [
          {
            begin : hljs.UNDERSCORE_IDENT_RE + '\\s*\\(',
            keywords : KEYWORDS + ' ' + SHORTKEYS,
            relevance: 0
          },
          hljs.QUOTE_STRING_MODE
        ]
      },
      {
        // this prevents 'new Name(...), or throw ...' from being recognized as a function definition
        beginKeywords : 'new throw',
        relevance : 0
      },
      {
        // the function class is a bit different for AspectJ compared to the Java language
        className : 'function',
        begin : /\w+ +\w+(\.)?\w+\s*\([^\)]*\)\s*((throws)[\w\s,]+)?[\{;]/,
        returnBegin : true,
        end : /[{;=]/,
        keywords : KEYWORDS,
        excludeEnd : true,
        contains : [
          {
            begin : hljs.UNDERSCORE_IDENT_RE + '\\s*\\(',
            returnBegin : true,
            relevance: 0,
            contains : [hljs.UNDERSCORE_TITLE_MODE]
          },
          {
            className : 'params',
            begin : /\(/, end : /\)/,
            relevance: 0,
            keywords : KEYWORDS,
            contains : [
              hljs.APOS_STRING_MODE,
              hljs.QUOTE_STRING_MODE,
              hljs.C_NUMBER_MODE,
              hljs.C_BLOCK_COMMENT_MODE
            ]
          },
          hljs.C_LINE_COMMENT_MODE,
          hljs.C_BLOCK_COMMENT_MODE
        ]
      },
      hljs.C_NUMBER_MODE,
      {
        // annotation is also used in this language
        className : 'meta',
        begin : '@[A-Za-z]+'
      }
    ]
  };
};

/***/ }),
/* 133 */
/***/ (function(module, exports) {

module.exports = function(hljs) {
  var BACKTICK_ESCAPE = {
    begin: '`[\\s\\S]'
  };

  return {
    case_insensitive: true,
    aliases: [ 'ahk' ],
    keywords: {
      keyword: 'Break Continue Critical Exit ExitApp Gosub Goto New OnExit Pause return SetBatchLines SetTimer Suspend Thread Throw Until ahk_id ahk_class ahk_pid ahk_exe ahk_group',
      literal: 'A|0 true false NOT AND OR',
      built_in: 'ComSpec Clipboard ClipboardAll ErrorLevel',
    },
    contains: [
      {
        className: 'built_in',
        begin: 'A_[a-zA-Z0-9]+'
      },
      BACKTICK_ESCAPE,
      hljs.inherit(hljs.QUOTE_STRING_MODE, {contains: [BACKTICK_ESCAPE]}),
      hljs.COMMENT(';', '$', {relevance: 0}),
      hljs.C_BLOCK_COMMENT_MODE,
      {
        className: 'number',
        begin: hljs.NUMBER_RE,
        relevance: 0
      },
      {
        className: 'subst', // FIXED
        begin: '%(?=[a-zA-Z0-9#_$@])', end: '%',
        illegal: '[^a-zA-Z0-9#_$@]'
      },
      {
        className: 'built_in',
        begin: '^\\s*\\w+\\s*,'
        //I don't really know if this is totally relevant
      },
      {
        className: 'meta', 
        begin: '^\\s*#\w+', end:'$',
        relevance: 0
      },
      {
        className: 'symbol',
        contains: [BACKTICK_ESCAPE],
        variants: [
          {begin: '^[^\\n";]+::(?!=)'},
          {begin: '^[^\\n";]+:(?!=)', relevance: 0} // zero relevance as it catches a lot of things
                                                    // followed by a single ':' in many languages
        ]
      },
      {
        // consecutive commas, not for highlighting but just for relevance
        begin: ',\\s*,'
      }
    ]
  }
};

/***/ }),
/* 134 */
/***/ (function(module, exports) {

module.exports = function(hljs) {
    var KEYWORDS = 'ByRef Case Const ContinueCase ContinueLoop ' +
        'Default Dim Do Else ElseIf EndFunc EndIf EndSelect ' +
        'EndSwitch EndWith Enum Exit ExitLoop For Func ' +
        'Global If In Local Next ReDim Return Select Static ' +
        'Step Switch Then To Until Volatile WEnd While With',

        LITERAL = 'True False And Null Not Or',

        BUILT_IN =
          'Abs ACos AdlibRegister AdlibUnRegister Asc AscW ASin Assign ATan AutoItSetOption AutoItWinGetTitle AutoItWinSetTitle Beep Binary BinaryLen BinaryMid BinaryToString BitAND BitNOT BitOR BitRotate BitShift BitXOR BlockInput Break Call CDTray Ceiling Chr ChrW ClipGet ClipPut ConsoleRead ConsoleWrite ConsoleWriteError ControlClick ControlCommand ControlDisable ControlEnable ControlFocus ControlGetFocus ControlGetHandle ControlGetPos ControlGetText ControlHide ControlListView ControlMove ControlSend ControlSetText ControlShow ControlTreeView Cos Dec DirCopy DirCreate DirGetSize DirMove DirRemove DllCall DllCallAddress DllCallbackFree DllCallbackGetPtr DllCallbackRegister DllClose DllOpen DllStructCreate DllStructGetData DllStructGetPtr DllStructGetSize DllStructSetData DriveGetDrive DriveGetFileSystem DriveGetLabel DriveGetSerial DriveGetType DriveMapAdd DriveMapDel DriveMapGet DriveSetLabel DriveSpaceFree DriveSpaceTotal DriveStatus EnvGet EnvSet EnvUpdate Eval Execute Exp FileChangeDir FileClose FileCopy FileCreateNTFSLink FileCreateShortcut FileDelete FileExists FileFindFirstFile FileFindNextFile FileFlush FileGetAttrib FileGetEncoding FileGetLongName FileGetPos FileGetShortcut FileGetShortName FileGetSize FileGetTime FileGetVersion FileInstall FileMove FileOpen FileOpenDialog FileRead FileReadLine FileReadToArray FileRecycle FileRecycleEmpty FileSaveDialog FileSelectFolder FileSetAttrib FileSetEnd FileSetPos FileSetTime FileWrite FileWriteLine Floor FtpSetProxy FuncName GUICreate GUICtrlCreateAvi GUICtrlCreateButton GUICtrlCreateCheckbox GUICtrlCreateCombo GUICtrlCreateContextMenu GUICtrlCreateDate GUICtrlCreateDummy GUICtrlCreateEdit GUICtrlCreateGraphic GUICtrlCreateGroup GUICtrlCreateIcon GUICtrlCreateInput GUICtrlCreateLabel GUICtrlCreateList GUICtrlCreateListView GUICtrlCreateListViewItem GUICtrlCreateMenu GUICtrlCreateMenuItem GUICtrlCreateMonthCal GUICtrlCreateObj GUICtrlCreatePic GUICtrlCreateProgress GUICtrlCreateRadio GUICtrlCreateSlider GUICtrlCreateTab GUICtrlCreateTabItem GUICtrlCreateTreeView GUICtrlCreateTreeViewItem GUICtrlCreateUpdown GUICtrlDelete GUICtrlGetHandle GUICtrlGetState GUICtrlRead GUICtrlRecvMsg GUICtrlRegisterListViewSort GUICtrlSendMsg GUICtrlSendToDummy GUICtrlSetBkColor GUICtrlSetColor GUICtrlSetCursor GUICtrlSetData GUICtrlSetDefBkColor GUICtrlSetDefColor GUICtrlSetFont GUICtrlSetGraphic GUICtrlSetImage GUICtrlSetLimit GUICtrlSetOnEvent GUICtrlSetPos GUICtrlSetResizing GUICtrlSetState GUICtrlSetStyle GUICtrlSetTip GUIDelete GUIGetCursorInfo GUIGetMsg GUIGetStyle GUIRegisterMsg GUISetAccelerators GUISetBkColor GUISetCoord GUISetCursor GUISetFont GUISetHelp GUISetIcon GUISetOnEvent GUISetState GUISetStyle GUIStartGroup GUISwitch Hex HotKeySet HttpSetProxy HttpSetUserAgent HWnd InetClose InetGet InetGetInfo InetGetSize InetRead IniDelete IniRead IniReadSection IniReadSectionNames IniRenameSection IniWrite IniWriteSection InputBox Int IsAdmin IsArray IsBinary IsBool IsDeclared IsDllStruct IsFloat IsFunc IsHWnd IsInt IsKeyword IsNumber IsObj IsPtr IsString Log MemGetStats Mod MouseClick MouseClickDrag MouseDown MouseGetCursor MouseGetPos MouseMove MouseUp MouseWheel MsgBox Number ObjCreate ObjCreateInterface ObjEvent ObjGet ObjName OnAutoItExitRegister OnAutoItExitUnRegister Ping PixelChecksum PixelGetColor PixelSearch ProcessClose ProcessExists ProcessGetStats ProcessList ProcessSetPriority ProcessWait ProcessWaitClose ProgressOff ProgressOn ProgressSet Ptr Random RegDelete RegEnumKey RegEnumVal RegRead RegWrite Round Run RunAs RunAsWait RunWait Send SendKeepActive SetError SetExtended ShellExecute ShellExecuteWait Shutdown Sin Sleep SoundPlay SoundSetWaveVolume SplashImageOn SplashOff SplashTextOn Sqrt SRandom StatusbarGetText StderrRead StdinWrite StdioClose StdoutRead String StringAddCR StringCompare StringFormat StringFromASCIIArray StringInStr StringIsAlNum StringIsAlpha StringIsASCII StringIsDigit StringIsFloat StringIsInt StringIsLower StringIsSpace StringIsUpper StringIsXDigit StringLeft StringLen StringLower StringMid StringRegExp StringRegExpReplace StringReplace StringReverse StringRight StringSplit StringStripCR StringStripWS StringToASCIIArray StringToBinary StringTrimLeft StringTrimRight StringUpper Tan TCPAccept TCPCloseSocket TCPConnect TCPListen TCPNameToIP TCPRecv TCPSend TCPShutdown, UDPShutdown TCPStartup, UDPStartup TimerDiff TimerInit ToolTip TrayCreateItem TrayCreateMenu TrayGetMsg TrayItemDelete TrayItemGetHandle TrayItemGetState TrayItemGetText TrayItemSetOnEvent TrayItemSetState TrayItemSetText TraySetClick TraySetIcon TraySetOnEvent TraySetPauseIcon TraySetState TraySetToolTip TrayTip UBound UDPBind UDPCloseSocket UDPOpen UDPRecv UDPSend VarGetType WinActivate WinActive WinClose WinExists WinFlash WinGetCaretPos WinGetClassList WinGetClientSize WinGetHandle WinGetPos WinGetProcess WinGetState WinGetText WinGetTitle WinKill WinList WinMenuSelectItem WinMinimizeAll WinMinimizeAllUndo WinMove WinSetOnTop WinSetState WinSetTitle WinSetTrans WinWait',

        COMMENT = {
            variants: [
              hljs.COMMENT(';', '$', {relevance: 0}),
              hljs.COMMENT('#cs', '#ce'),
              hljs.COMMENT('#comments-start', '#comments-end')
            ]
        },

        VARIABLE = {
            begin: '\\$[A-z0-9_]+'
        },

        STRING = {
            className: 'string',
            variants: [{
                begin: /"/,
                end: /"/,
                contains: [{
                    begin: /""/,
                    relevance: 0
                }]
            }, {
                begin: /'/,
                end: /'/,
                contains: [{
                    begin: /''/,
                    relevance: 0
                }]
            }]
        },

        NUMBER = {
            variants: [hljs.BINARY_NUMBER_MODE, hljs.C_NUMBER_MODE]
        },

        PREPROCESSOR = {
            className: 'meta',
            begin: '#',
            end: '$',
            keywords: {'meta-keyword': 'comments include include-once NoTrayIcon OnAutoItStartRegister pragma compile RequireAdmin'},
            contains: [{
                    begin: /\\\n/,
                    relevance: 0
                }, {
                    beginKeywords: 'include',
                    keywords: {'meta-keyword': 'include'},
                    end: '$',
                    contains: [
                        STRING, {
                            className: 'meta-string',
                            variants: [{
                                begin: '<',
                                end: '>'
                            }, {
                                begin: /"/,
                                end: /"/,
                                contains: [{
                                    begin: /""/,
                                    relevance: 0
                                }]
                            }, {
                                begin: /'/,
                                end: /'/,
                                contains: [{
                                    begin: /''/,
                                    relevance: 0
                                }]
                            }]
                        }
                    ]
                },
                STRING,
                COMMENT
            ]
        },

        CONSTANT = {
            className: 'symbol',
            // begin: '@',
            // end: '$',
            // keywords: 'AppDataCommonDir AppDataDir AutoItExe AutoItPID AutoItVersion AutoItX64 COM_EventObj CommonFilesDir Compiled ComputerName ComSpec CPUArch CR CRLF DesktopCommonDir DesktopDepth DesktopDir DesktopHeight DesktopRefresh DesktopWidth DocumentsCommonDir error exitCode exitMethod extended FavoritesCommonDir FavoritesDir GUI_CtrlHandle GUI_CtrlId GUI_DragFile GUI_DragId GUI_DropId GUI_WinHandle HomeDrive HomePath HomeShare HotKeyPressed HOUR IPAddress1 IPAddress2 IPAddress3 IPAddress4 KBLayout LF LocalAppDataDir LogonDNSDomain LogonDomain LogonServer MDAY MIN MON MSEC MUILang MyDocumentsDir NumParams OSArch OSBuild OSLang OSServicePack OSType OSVersion ProgramFilesDir ProgramsCommonDir ProgramsDir ScriptDir ScriptFullPath ScriptLineNumber ScriptName SEC StartMenuCommonDir StartMenuDir StartupCommonDir StartupDir SW_DISABLE SW_ENABLE SW_HIDE SW_LOCK SW_MAXIMIZE SW_MINIMIZE SW_RESTORE SW_SHOW SW_SHOWDEFAULT SW_SHOWMAXIMIZED SW_SHOWMINIMIZED SW_SHOWMINNOACTIVE SW_SHOWNA SW_SHOWNOACTIVATE SW_SHOWNORMAL SW_UNLOCK SystemDir TAB TempDir TRAY_ID TrayIconFlashing TrayIconVisible UserName UserProfileDir WDAY WindowsDir WorkingDir YDAY YEAR',
            // relevance: 5
            begin: '@[A-z0-9_]+'
        },

        FUNCTION = {
            className: 'function',
            beginKeywords: 'Func',
            end: '$',
            illegal: '\\$|\\[|%',
            contains: [
                hljs.UNDERSCORE_TITLE_MODE, {
                    className: 'params',
                    begin: '\\(',
                    end: '\\)',
                    contains: [
                        VARIABLE,
                        STRING,
                        NUMBER
                    ]
                }
            ]
        };

    return {
        case_insensitive: true,
        illegal: /\/\*/,
        keywords: {
            keyword: KEYWORDS,
            built_in: BUILT_IN,
            literal: LITERAL
        },
        contains: [
            COMMENT,
            VARIABLE,
            STRING,
            NUMBER,
            PREPROCESSOR,
            CONSTANT,
            FUNCTION
        ]
    }
};

/***/ }),
/* 135 */
/***/ (function(module, exports) {

module.exports = function(hljs) {
  return {
    case_insensitive: true,
    lexemes: '\\.?' + hljs.IDENT_RE,
    keywords: {
      keyword:
        /* mnemonic */
        'adc add adiw and andi asr bclr bld brbc brbs brcc brcs break breq brge brhc brhs ' +
        'brid brie brlo brlt brmi brne brpl brsh brtc brts brvc brvs bset bst call cbi cbr ' +
        'clc clh cli cln clr cls clt clv clz com cp cpc cpi cpse dec eicall eijmp elpm eor ' +
        'fmul fmuls fmulsu icall ijmp in inc jmp ld ldd ldi lds lpm lsl lsr mov movw mul ' +
        'muls mulsu neg nop or ori out pop push rcall ret reti rjmp rol ror sbc sbr sbrc sbrs ' +
        'sec seh sbi sbci sbic sbis sbiw sei sen ser ses set sev sez sleep spm st std sts sub ' +
        'subi swap tst wdr',
      built_in:
        /* general purpose registers */
        'r0 r1 r2 r3 r4 r5 r6 r7 r8 r9 r10 r11 r12 r13 r14 r15 r16 r17 r18 r19 r20 r21 r22 ' +
        'r23 r24 r25 r26 r27 r28 r29 r30 r31 x|0 xh xl y|0 yh yl z|0 zh zl ' +
        /* IO Registers (ATMega128) */
        'ucsr1c udr1 ucsr1a ucsr1b ubrr1l ubrr1h ucsr0c ubrr0h tccr3c tccr3a tccr3b tcnt3h ' +
        'tcnt3l ocr3ah ocr3al ocr3bh ocr3bl ocr3ch ocr3cl icr3h icr3l etimsk etifr tccr1c ' +
        'ocr1ch ocr1cl twcr twdr twar twsr twbr osccal xmcra xmcrb eicra spmcsr spmcr portg ' +
        'ddrg ping portf ddrf sreg sph spl xdiv rampz eicrb eimsk gimsk gicr eifr gifr timsk ' +
        'tifr mcucr mcucsr tccr0 tcnt0 ocr0 assr tccr1a tccr1b tcnt1h tcnt1l ocr1ah ocr1al ' +
        'ocr1bh ocr1bl icr1h icr1l tccr2 tcnt2 ocr2 ocdr wdtcr sfior eearh eearl eedr eecr ' +
        'porta ddra pina portb ddrb pinb portc ddrc pinc portd ddrd pind spdr spsr spcr udr0 ' +
        'ucsr0a ucsr0b ubrr0l acsr admux adcsr adch adcl porte ddre pine pinf',
      meta:
        '.byte .cseg .db .def .device .dseg .dw .endmacro .equ .eseg .exit .include .list ' +
        '.listmac .macro .nolist .org .set'
    },
    contains: [
      hljs.C_BLOCK_COMMENT_MODE,
      hljs.COMMENT(
        ';',
        '$',
        {
          relevance: 0
        }
      ),
      hljs.C_NUMBER_MODE, // 0x..., decimal, float
      hljs.BINARY_NUMBER_MODE, // 0b...
      {
        className: 'number',
        begin: '\\b(\\$[a-zA-Z0-9]+|0o[0-7]+)' // $..., 0o...
      },
      hljs.QUOTE_STRING_MODE,
      {
        className: 'string',
        begin: '\'', end: '[^\\\\]\'',
        illegal: '[^\\\\][^\']'
      },
      {className: 'symbol',  begin: '^[A-Za-z0-9_.$]+:'},
      {className: 'meta', begin: '#', end: '$'},
      {  // подстановка в «.macro»
        className: 'subst',
        begin: '@[0-9]+'
      }
    ]
  };
};

/***/ }),
/* 136 */
/***/ (function(module, exports) {

module.exports = function(hljs) {
  var VARIABLE = {
    className: 'variable',
    variants: [
      {begin: /\$[\w\d#@][\w\d_]*/},
      {begin: /\$\{(.*?)}/}
    ]
  };
  var KEYWORDS = 'BEGIN END if else while do for in break continue delete next nextfile function func exit|10';
  var STRING = {
    className: 'string',
    contains: [hljs.BACKSLASH_ESCAPE],
    variants: [
      {
        begin: /(u|b)?r?'''/, end: /'''/,
        relevance: 10
      },
      {
        begin: /(u|b)?r?"""/, end: /"""/,
        relevance: 10
      },
      {
        begin: /(u|r|ur)'/, end: /'/,
        relevance: 10
      },
      {
        begin: /(u|r|ur)"/, end: /"/,
        relevance: 10
      },
      {
        begin: /(b|br)'/, end: /'/
      },
      {
        begin: /(b|br)"/, end: /"/
      },
      hljs.APOS_STRING_MODE,
      hljs.QUOTE_STRING_MODE
    ]
  };
  return {
	 keywords: {
	   keyword: KEYWORDS
    },
    contains: [
      VARIABLE,
      STRING,
      hljs.REGEXP_MODE,
      hljs.HASH_COMMENT_MODE,
      hljs.NUMBER_MODE
    ]
  }
};

/***/ }),
/* 137 */
/***/ (function(module, exports) {

module.exports = function(hljs) {
  return {
    keywords: 'false int abstract private char boolean static null if for true ' +
      'while long throw finally protected final return void enum else ' +
      'break new catch byte super case short default double public try this switch ' +
      'continue reverse firstfast firstonly forupdate nofetch sum avg minof maxof count ' +
      'order group by asc desc index hint like dispaly edit client server ttsbegin ' +
      'ttscommit str real date container anytype common div mod',
    contains: [
      hljs.C_LINE_COMMENT_MODE,
      hljs.C_BLOCK_COMMENT_MODE,
      hljs.APOS_STRING_MODE,
      hljs.QUOTE_STRING_MODE,
      hljs.C_NUMBER_MODE,
      {
        className: 'meta',
        begin: '#', end: '$'
      },
      {
        className: 'class',
        beginKeywords: 'class interface', end: '{', excludeEnd: true,
        illegal: ':',
        contains: [
          {beginKeywords: 'extends implements'},
          hljs.UNDERSCORE_TITLE_MODE
        ]
      }
    ]
  };
};

/***/ }),
/* 138 */
/***/ (function(module, exports) {

module.exports = function(hljs) {
  var VAR = {
    className: 'variable',
    variants: [
      {begin: /\$[\w\d#@][\w\d_]*/},
      {begin: /\$\{(.*?)}/}
    ]
  };
  var QUOTE_STRING = {
    className: 'string',
    begin: /"/, end: /"/,
    contains: [
      hljs.BACKSLASH_ESCAPE,
      VAR,
      {
        className: 'variable',
        begin: /\$\(/, end: /\)/,
        contains: [hljs.BACKSLASH_ESCAPE]
      }
    ]
  };
  var APOS_STRING = {
    className: 'string',
    begin: /'/, end: /'/
  };

  return {
    aliases: ['sh', 'zsh'],
    lexemes: /\b-?[a-z\._]+\b/,
    keywords: {
      keyword:
        'if then else elif fi for while in do done case esac function',
      literal:
        'true false',
      built_in:
        // Shell built-ins
        // http://www.gnu.org/software/bash/manual/html_node/Shell-Builtin-Commands.html
        'break cd continue eval exec exit export getopts hash pwd readonly return shift test times ' +
        'trap umask unset ' +
        // Bash built-ins
        'alias bind builtin caller command declare echo enable help let local logout mapfile printf ' +
        'read readarray source type typeset ulimit unalias ' +
        // Shell modifiers
        'set shopt ' +
        // Zsh built-ins
        'autoload bg bindkey bye cap chdir clone comparguments compcall compctl compdescribe compfiles ' +
        'compgroups compquote comptags comptry compvalues dirs disable disown echotc echoti emulate ' +
        'fc fg float functions getcap getln history integer jobs kill limit log noglob popd print ' +
        'pushd pushln rehash sched setcap setopt stat suspend ttyctl unfunction unhash unlimit ' +
        'unsetopt vared wait whence where which zcompile zformat zftp zle zmodload zparseopts zprof ' +
        'zpty zregexparse zsocket zstyle ztcp',
      _:
        '-ne -eq -lt -gt -f -d -e -s -l -a' // relevance booster
    },
    contains: [
      {
        className: 'meta',
        begin: /^#![^\n]+sh\s*$/,
        relevance: 10
      },
      {
        className: 'function',
        begin: /\w[\w\d_]*\s*\(\s*\)\s*\{/,
        returnBegin: true,
        contains: [hljs.inherit(hljs.TITLE_MODE, {begin: /\w[\w\d_]*/})],
        relevance: 0
      },
      hljs.HASH_COMMENT_MODE,
      QUOTE_STRING,
      APOS_STRING,
      VAR
    ]
  };
};

/***/ }),
/* 139 */
/***/ (function(module, exports) {

module.exports = function(hljs) {
  return {
    case_insensitive: true,
    illegal: '^\.',
    // Support explicitely typed variables that end with $%! or #.
    lexemes: '[a-zA-Z][a-zA-Z0-9_\$\%\!\#]*',
    keywords: {
        keyword:
          'ABS ASC AND ATN AUTO|0 BEEP BLOAD|10 BSAVE|10 CALL CALLS CDBL CHAIN CHDIR CHR$|10 CINT CIRCLE ' +
          'CLEAR CLOSE CLS COLOR COM COMMON CONT COS CSNG CSRLIN CVD CVI CVS DATA DATE$ ' +
          'DEFDBL DEFINT DEFSNG DEFSTR DEF|0 SEG USR DELETE DIM DRAW EDIT END ENVIRON ENVIRON$ ' +
          'EOF EQV ERASE ERDEV ERDEV$ ERL ERR ERROR EXP FIELD FILES FIX FOR|0 FRE GET GOSUB|10 GOTO ' +
          'HEX$ IF|0 THEN ELSE|0 INKEY$ INP INPUT INPUT# INPUT$ INSTR IMP INT IOCTL IOCTL$ KEY ON ' +
          'OFF LIST KILL LEFT$ LEN LET LINE LLIST LOAD LOC LOCATE LOF LOG LPRINT USING LSET ' +
          'MERGE MID$ MKDIR MKD$ MKI$ MKS$ MOD NAME NEW NEXT NOISE NOT OCT$ ON OR PEN PLAY STRIG OPEN OPTION ' +
          'BASE OUT PAINT PALETTE PCOPY PEEK PMAP POINT POKE POS PRINT PRINT] PSET PRESET ' +
          'PUT RANDOMIZE READ REM RENUM RESET|0 RESTORE RESUME RETURN|0 RIGHT$ RMDIR RND RSET ' +
          'RUN SAVE SCREEN SGN SHELL SIN SOUND SPACE$ SPC SQR STEP STICK STOP STR$ STRING$ SWAP ' +
          'SYSTEM TAB TAN TIME$ TIMER TROFF TRON TO USR VAL VARPTR VARPTR$ VIEW WAIT WHILE ' +
          'WEND WIDTH WINDOW WRITE XOR'
    },
    contains: [
      hljs.QUOTE_STRING_MODE,
      hljs.COMMENT('REM', '$', {relevance: 10}),
      hljs.COMMENT('\'', '$', {relevance: 0}),
      {
        // Match line numbers
        className: 'symbol',
        begin: '^[0-9]+\ ',
        relevance: 10
      },
      {
        // Match typed numeric constants (1000, 12.34!, 1.2e5, 1.5#, 1.2D2)
        className: 'number',
        begin: '\\b([0-9]+[0-9edED\.]*[#\!]?)',
        relevance: 0
      },
      {
        // Match hexadecimal numbers (&Hxxxx)
        className: 'number',
        begin: '(\&[hH][0-9a-fA-F]{1,4})'
      },
      {
        // Match octal numbers (&Oxxxxxx)
        className: 'number',
        begin: '(\&[oO][0-7]{1,6})'
      }
    ]
  };
};

/***/ }),
/* 140 */
/***/ (function(module, exports) {

module.exports = function(hljs){
  return {
    contains: [
      // Attribute
      {
        className: 'attribute',
        begin: /</, end: />/
      },
      // Specific
      {
        begin: /::=/,
        starts: {
          end: /$/,
          contains: [
            {
              begin: /</, end: />/
            },
            // Common
            hljs.C_LINE_COMMENT_MODE,
            hljs.C_BLOCK_COMMENT_MODE,
            hljs.APOS_STRING_MODE,
            hljs.QUOTE_STRING_MODE
          ]
        }
      }
    ]
  };
};

/***/ }),
/* 141 */
/***/ (function(module, exports) {

module.exports = function(hljs){
  var LITERAL = {
    className: 'literal',
    begin: '[\\+\\-]',
    relevance: 0
  };
  return {
    aliases: ['bf'],
    contains: [
      hljs.COMMENT(
        '[^\\[\\]\\.,\\+\\-<> \r\n]',
        '[\\[\\]\\.,\\+\\-<> \r\n]',
        {
          returnEnd: true,
          relevance: 0
        }
      ),
      {
        className: 'title',
        begin: '[\\[\\]]',
        relevance: 0
      },
      {
        className: 'string',
        begin: '[\\.,]',
        relevance: 0
      },
      {
        // this mode works as the only relevance counter
        begin: /\+\+|\-\-/, returnBegin: true,
        contains: [LITERAL]
      },
      LITERAL
    ]
  };
};

/***/ }),
/* 142 */
/***/ (function(module, exports) {

module.exports = function(hljs) {
  var KEYWORDS =
    'div mod in and or not xor asserterror begin case do downto else end exit for if of repeat then to ' +
    'until while with var';
  var LITERALS = 'false true';
  var COMMENT_MODES = [
    hljs.C_LINE_COMMENT_MODE,
    hljs.COMMENT(
      /\{/,
      /\}/,
      {
        relevance: 0
      }
    ),
    hljs.COMMENT(
      /\(\*/,
      /\*\)/,
      {
        relevance: 10
      }
    )
  ];
  var STRING = {
    className: 'string',
    begin: /'/, end: /'/,
    contains: [{begin: /''/}]
  };
  var CHAR_STRING = {
    className: 'string', begin: /(#\d+)+/
  };
  var DATE = {
      className: 'number',
      begin: '\\b\\d+(\\.\\d+)?(DT|D|T)',
      relevance: 0
  };
  var DBL_QUOTED_VARIABLE = {
      className: 'string', // not a string technically but makes sense to be highlighted in the same style
      begin: '"',
      end: '"'
  };

  var PROCEDURE = {
    className: 'function',
    beginKeywords: 'procedure', end: /[:;]/,
    keywords: 'procedure|10',
    contains: [
      hljs.TITLE_MODE,
      {
        className: 'params',
        begin: /\(/, end: /\)/,
        keywords: KEYWORDS,
        contains: [STRING, CHAR_STRING]
      }
    ].concat(COMMENT_MODES)
  };

  var OBJECT = {
    className: 'class',
    begin: 'OBJECT (Table|Form|Report|Dataport|Codeunit|XMLport|MenuSuite|Page|Query) (\\d+) ([^\\r\\n]+)',
    returnBegin: true,
    contains: [
      hljs.TITLE_MODE,
        PROCEDURE
    ]
  };

  return {
    case_insensitive: true,
    keywords: { keyword: KEYWORDS, literal: LITERALS },
    illegal: /\/\*/,
    contains: [
      STRING, CHAR_STRING,
      DATE, DBL_QUOTED_VARIABLE,
      hljs.NUMBER_MODE,
      OBJECT,
      PROCEDURE
    ]
  };
};

/***/ }),
/* 143 */
/***/ (function(module, exports) {

module.exports = function(hljs) {
  return {
    aliases: ['capnp'],
    keywords: {
      keyword:
        'struct enum interface union group import using const annotation extends in of on as with from fixed',
      built_in:
        'Void Bool Int8 Int16 Int32 Int64 UInt8 UInt16 UInt32 UInt64 Float32 Float64 ' +
        'Text Data AnyPointer AnyStruct Capability List',
      literal:
        'true false'
    },
    contains: [
      hljs.QUOTE_STRING_MODE,
      hljs.NUMBER_MODE,
      hljs.HASH_COMMENT_MODE,
      {
        className: 'meta',
        begin: /@0x[\w\d]{16};/,
        illegal: /\n/
      },
      {
        className: 'symbol',
        begin: /@\d+\b/
      },
      {
        className: 'class',
        beginKeywords: 'struct enum', end: /\{/,
        illegal: /\n/,
        contains: [
          hljs.inherit(hljs.TITLE_MODE, {
            starts: {endsWithParent: true, excludeEnd: true} // hack: eating everything after the first title
          })
        ]
      },
      {
        className: 'class',
        beginKeywords: 'interface', end: /\{/,
        illegal: /\n/,
        contains: [
          hljs.inherit(hljs.TITLE_MODE, {
            starts: {endsWithParent: true, excludeEnd: true} // hack: eating everything after the first title
          })
        ]
      }
    ]
  };
};

/***/ }),
/* 144 */
/***/ (function(module, exports) {

module.exports = function(hljs) {
  // 2.3. Identifiers and keywords
  var KEYWORDS =
    'assembly module package import alias class interface object given value ' +
    'assign void function new of extends satisfies abstracts in out return ' +
    'break continue throw assert dynamic if else switch case for while try ' +
    'catch finally then let this outer super is exists nonempty';
  // 7.4.1 Declaration Modifiers
  var DECLARATION_MODIFIERS =
    'shared abstract formal default actual variable late native deprecated' +
    'final sealed annotation suppressWarnings small';
  // 7.4.2 Documentation
  var DOCUMENTATION =
    'doc by license see throws tagged';
  var SUBST = {
    className: 'subst', excludeBegin: true, excludeEnd: true,
    begin: /``/, end: /``/,
    keywords: KEYWORDS,
    relevance: 10
  };
  var EXPRESSIONS = [
    {
      // verbatim string
      className: 'string',
      begin: '"""',
      end: '"""',
      relevance: 10
    },
    {
      // string literal or template
      className: 'string',
      begin: '"', end: '"',
      contains: [SUBST]
    },
    {
      // character literal
      className: 'string',
      begin: "'",
      end: "'"
    },
    {
      // numeric literal
      className: 'number',
      begin: '#[0-9a-fA-F_]+|\\$[01_]+|[0-9_]+(?:\\.[0-9_](?:[eE][+-]?\\d+)?)?[kMGTPmunpf]?',
      relevance: 0
    }
  ];
  SUBST.contains = EXPRESSIONS;

  return {
    keywords: {
      keyword: KEYWORDS + ' ' + DECLARATION_MODIFIERS,
      meta: DOCUMENTATION
    },
    illegal: '\\$[^01]|#[^0-9a-fA-F]',
    contains: [
      hljs.C_LINE_COMMENT_MODE,
      hljs.COMMENT('/\\*', '\\*/', {contains: ['self']}),
      {
        // compiler annotation
        className: 'meta',
        begin: '@[a-z]\\w*(?:\\:\"[^\"]*\")?'
      }
    ].concat(EXPRESSIONS)
  };
};

/***/ }),
/* 145 */
/***/ (function(module, exports) {

module.exports = function(hljs) {
  return {
    aliases: ['clean','icl','dcl'],
    keywords: {
      keyword:
        'if let in with where case of class instance otherwise ' +
        'implementation definition system module from import qualified as ' +
        'special code inline foreign export ccall stdcall generic derive ' +
        'infix infixl infixr',
      literal:
        'True False'
    },
    contains: [

      hljs.C_LINE_COMMENT_MODE,
      hljs.C_BLOCK_COMMENT_MODE,
      hljs.APOS_STRING_MODE,
      hljs.QUOTE_STRING_MODE,
      hljs.C_NUMBER_MODE,

      {begin: '->|<-[|:]?|::|#!?|>>=|\\{\\||\\|\\}|:==|=:|\\.\\.|<>|`'} // relevance booster
    ]
  };
};

/***/ }),
/* 146 */
/***/ (function(module, exports) {

module.exports = function(hljs) {
  var keywords = {
    'builtin-name':
      // Clojure keywords
      'def defonce cond apply if-not if-let if not not= = < > <= >= == + / * - rem '+
      'quot neg? pos? delay? symbol? keyword? true? false? integer? empty? coll? list? '+
      'set? ifn? fn? associative? sequential? sorted? counted? reversible? number? decimal? '+
      'class? distinct? isa? float? rational? reduced? ratio? odd? even? char? seq? vector? '+
      'string? map? nil? contains? zero? instance? not-every? not-any? libspec? -> ->> .. . '+
      'inc compare do dotimes mapcat take remove take-while drop letfn drop-last take-last '+
      'drop-while while intern condp case reduced cycle split-at split-with repeat replicate '+
      'iterate range merge zipmap declare line-seq sort comparator sort-by dorun doall nthnext '+
      'nthrest partition eval doseq await await-for let agent atom send send-off release-pending-sends '+
      'add-watch mapv filterv remove-watch agent-error restart-agent set-error-handler error-handler '+
      'set-error-mode! error-mode shutdown-agents quote var fn loop recur throw try monitor-enter '+
      'monitor-exit defmacro defn defn- macroexpand macroexpand-1 for dosync and or '+
      'when when-not when-let comp juxt partial sequence memoize constantly complement identity assert '+
      'peek pop doto proxy defstruct first rest cons defprotocol cast coll deftype defrecord last butlast '+
      'sigs reify second ffirst fnext nfirst nnext defmulti defmethod meta with-meta ns in-ns create-ns import '+
      'refer keys select-keys vals key val rseq name namespace promise into transient persistent! conj! '+
      'assoc! dissoc! pop! disj! use class type num float double short byte boolean bigint biginteger '+
      'bigdec print-method print-dup throw-if printf format load compile get-in update-in pr pr-on newline '+
      'flush read slurp read-line subvec with-open memfn time re-find re-groups rand-int rand mod locking '+
      'assert-valid-fdecl alias resolve ref deref refset swap! reset! set-validator! compare-and-set! alter-meta! '+
      'reset-meta! commute get-validator alter ref-set ref-history-count ref-min-history ref-max-history ensure sync io! '+
      'new next conj set! to-array future future-call into-array aset gen-class reduce map filter find empty '+
      'hash-map hash-set sorted-map sorted-map-by sorted-set sorted-set-by vec vector seq flatten reverse assoc dissoc list '+
      'disj get union difference intersection extend extend-type extend-protocol int nth delay count concat chunk chunk-buffer '+
      'chunk-append chunk-first chunk-rest max min dec unchecked-inc-int unchecked-inc unchecked-dec-inc unchecked-dec unchecked-negate '+
      'unchecked-add-int unchecked-add unchecked-subtract-int unchecked-subtract chunk-next chunk-cons chunked-seq? prn vary-meta '+
      'lazy-seq spread list* str find-keyword keyword symbol gensym force rationalize'
   };

  var SYMBOLSTART = 'a-zA-Z_\\-!.?+*=<>&#\'';
  var SYMBOL_RE = '[' + SYMBOLSTART + '][' + SYMBOLSTART + '0-9/;:]*';
  var SIMPLE_NUMBER_RE = '[-+]?\\d+(\\.\\d+)?';

  var SYMBOL = {
    begin: SYMBOL_RE,
    relevance: 0
  };
  var NUMBER = {
    className: 'number', begin: SIMPLE_NUMBER_RE,
    relevance: 0
  };
  var STRING = hljs.inherit(hljs.QUOTE_STRING_MODE, {illegal: null});
  var COMMENT = hljs.COMMENT(
    ';',
    '$',
    {
      relevance: 0
    }
  );
  var LITERAL = {
    className: 'literal',
    begin: /\b(true|false|nil)\b/
  };
  var COLLECTION = {
    begin: '[\\[\\{]', end: '[\\]\\}]'
  };
  var HINT = {
    className: 'comment',
    begin: '\\^' + SYMBOL_RE
  };
  var HINT_COL = hljs.COMMENT('\\^\\{', '\\}');
  var KEY = {
    className: 'symbol',
    begin: '[:]{1,2}' + SYMBOL_RE
  };
  var LIST = {
    begin: '\\(', end: '\\)'
  };
  var BODY = {
    endsWithParent: true,
    relevance: 0
  };
  var NAME = {
    keywords: keywords,
    lexemes: SYMBOL_RE,
    className: 'name', begin: SYMBOL_RE,
    starts: BODY
  };
  var DEFAULT_CONTAINS = [LIST, STRING, HINT, HINT_COL, COMMENT, KEY, COLLECTION, NUMBER, LITERAL, SYMBOL];

  LIST.contains = [hljs.COMMENT('comment', ''), NAME, BODY];
  BODY.contains = DEFAULT_CONTAINS;
  COLLECTION.contains = DEFAULT_CONTAINS;
  HINT_COL.contains = [COLLECTION];

  return {
    aliases: ['clj'],
    illegal: /\S/,
    contains: [LIST, STRING, HINT, HINT_COL, COMMENT, KEY, COLLECTION, NUMBER, LITERAL]
  }
};

/***/ }),
/* 147 */
/***/ (function(module, exports) {

module.exports = function(hljs) {
  return {
    contains: [
      {
        className: 'meta',
        begin: /^([\w.-]+|\s*#_)=>/,
        starts: {
          end: /$/,
          subLanguage: 'clojure'
        }
      }
    ]
  }
};

/***/ }),
/* 148 */
/***/ (function(module, exports) {

module.exports = function(hljs) {
  return {
    aliases: ['cmake.in'],
    case_insensitive: true,
    keywords: {
      keyword:
        'add_custom_command add_custom_target add_definitions add_dependencies ' +
        'add_executable add_library add_subdirectory add_test aux_source_directory ' +
        'break build_command cmake_minimum_required cmake_policy configure_file ' +
        'create_test_sourcelist define_property else elseif enable_language enable_testing ' +
        'endforeach endfunction endif endmacro endwhile execute_process export find_file ' +
        'find_library find_package find_path find_program fltk_wrap_ui foreach function ' +
        'get_cmake_property get_directory_property get_filename_component get_property ' +
        'get_source_file_property get_target_property get_test_property if include ' +
        'include_directories include_external_msproject include_regular_expression install ' +
        'link_directories load_cache load_command macro mark_as_advanced message option ' +
        'output_required_files project qt_wrap_cpp qt_wrap_ui remove_definitions return ' +
        'separate_arguments set set_directory_properties set_property ' +
        'set_source_files_properties set_target_properties set_tests_properties site_name ' +
        'source_group string target_link_libraries try_compile try_run unset variable_watch ' +
        'while build_name exec_program export_library_dependencies install_files ' +
        'install_programs install_targets link_libraries make_directory remove subdir_depends ' +
        'subdirs use_mangled_mesa utility_source variable_requires write_file ' +
        'qt5_use_modules qt5_use_package qt5_wrap_cpp on off true false and or ' +
        'equal less greater strless strgreater strequal matches'
    },
    contains: [
      {
        className: 'variable',
        begin: '\\${', end: '}'
      },
      hljs.HASH_COMMENT_MODE,
      hljs.QUOTE_STRING_MODE,
      hljs.NUMBER_MODE
    ]
  };
};

/***/ }),
/* 149 */
/***/ (function(module, exports) {

module.exports = function(hljs) {
  var KEYWORDS = {
    keyword:
      // JS keywords
      'in if for while finally new do return else break catch instanceof throw try this ' +
      'switch continue typeof delete debugger super yield import export from as default await ' +
      // Coffee keywords
      'then unless until loop of by when and or is isnt not',
    literal:
      // JS literals
      'true false null undefined ' +
      // Coffee literals
      'yes no on off',
    built_in:
      'npm require console print module global window document'
  };
  var JS_IDENT_RE = '[A-Za-z$_][0-9A-Za-z$_]*';
  var SUBST = {
    className: 'subst',
    begin: /#\{/, end: /}/,
    keywords: KEYWORDS
  };
  var EXPRESSIONS = [
    hljs.BINARY_NUMBER_MODE,
    hljs.inherit(hljs.C_NUMBER_MODE, {starts: {end: '(\\s*/)?', relevance: 0}}), // a number tries to eat the following slash to prevent treating it as a regexp
    {
      className: 'string',
      variants: [
        {
          begin: /'''/, end: /'''/,
          contains: [hljs.BACKSLASH_ESCAPE]
        },
        {
          begin: /'/, end: /'/,
          contains: [hljs.BACKSLASH_ESCAPE]
        },
        {
          begin: /"""/, end: /"""/,
          contains: [hljs.BACKSLASH_ESCAPE, SUBST]
        },
        {
          begin: /"/, end: /"/,
          contains: [hljs.BACKSLASH_ESCAPE, SUBST]
        }
      ]
    },
    {
      className: 'regexp',
      variants: [
        {
          begin: '///', end: '///',
          contains: [SUBST, hljs.HASH_COMMENT_MODE]
        },
        {
          begin: '//[gim]*',
          relevance: 0
        },
        {
          // regex can't start with space to parse x / 2 / 3 as two divisions
          // regex can't start with *, and it supports an "illegal" in the main mode
          begin: /\/(?![ *])(\\\/|.)*?\/[gim]*(?=\W|$)/
        }
      ]
    },
    {
      begin: '@' + JS_IDENT_RE // relevance booster
    },
    {
      subLanguage: 'javascript',
      excludeBegin: true, excludeEnd: true,
      variants: [
        {
          begin: '```', end: '```',
        },
        {
          begin: '`', end: '`',
        }
      ]
    }
  ];
  SUBST.contains = EXPRESSIONS;

  var TITLE = hljs.inherit(hljs.TITLE_MODE, {begin: JS_IDENT_RE});
  var PARAMS_RE = '(\\(.*\\))?\\s*\\B[-=]>';
  var PARAMS = {
    className: 'params',
    begin: '\\([^\\(]', returnBegin: true,
    /* We need another contained nameless mode to not have every nested
    pair of parens to be called "params" */
    contains: [{
      begin: /\(/, end: /\)/,
      keywords: KEYWORDS,
      contains: ['self'].concat(EXPRESSIONS)
    }]
  };

  return {
    aliases: ['coffee', 'cson', 'iced'],
    keywords: KEYWORDS,
    illegal: /\/\*/,
    contains: EXPRESSIONS.concat([
      hljs.COMMENT('###', '###'),
      hljs.HASH_COMMENT_MODE,
      {
        className: 'function',
        begin: '^\\s*' + JS_IDENT_RE + '\\s*=\\s*' + PARAMS_RE, end: '[-=]>',
        returnBegin: true,
        contains: [TITLE, PARAMS]
      },
      {
        // anonymous function start
        begin: /[:\(,=]\s*/,
        relevance: 0,
        contains: [
          {
            className: 'function',
            begin: PARAMS_RE, end: '[-=]>',
            returnBegin: true,
            contains: [PARAMS]
          }
        ]
      },
      {
        className: 'class',
        beginKeywords: 'class',
        end: '$',
        illegal: /[:="\[\]]/,
        contains: [
          {
            beginKeywords: 'extends',
            endsWithParent: true,
            illegal: /[:="\[\]]/,
            contains: [TITLE]
          },
          TITLE
        ]
      },
      {
        begin: JS_IDENT_RE + ':', end: ':',
        returnBegin: true, returnEnd: true,
        relevance: 0
      }
    ])
  };
};

/***/ }),
/* 150 */
/***/ (function(module, exports) {

module.exports = function(hljs) {
  return {
    keywords: {
      keyword:
        '_ as at cofix else end exists exists2 fix for forall fun if IF in let ' +
        'match mod Prop return Set then Type using where with ' +
        'Abort About Add Admit Admitted All Arguments Assumptions Axiom Back BackTo ' +
        'Backtrack Bind Blacklist Canonical Cd Check Class Classes Close Coercion ' +
        'Coercions CoFixpoint CoInductive Collection Combined Compute Conjecture ' +
        'Conjectures Constant constr Constraint Constructors Context Corollary ' +
        'CreateHintDb Cut Declare Defined Definition Delimit Dependencies Dependent' +
        'Derive Drop eauto End Equality Eval Example Existential Existentials ' +
        'Existing Export exporting Extern Extract Extraction Fact Field Fields File ' +
        'Fixpoint Focus for From Function Functional Generalizable Global Goal Grab ' +
        'Grammar Graph Guarded Heap Hint HintDb Hints Hypotheses Hypothesis ident ' +
        'Identity If Immediate Implicit Import Include Inductive Infix Info Initial ' +
        'Inline Inspect Instance Instances Intro Intros Inversion Inversion_clear ' +
        'Language Left Lemma Let Libraries Library Load LoadPath Local Locate Ltac ML ' +
        'Mode Module Modules Monomorphic Morphism Next NoInline Notation Obligation ' +
        'Obligations Opaque Open Optimize Options Parameter Parameters Parametric ' +
        'Path Paths pattern Polymorphic Preterm Print Printing Program Projections ' +
        'Proof Proposition Pwd Qed Quit Rec Record Recursive Redirect Relation Remark ' +
        'Remove Require Reserved Reset Resolve Restart Rewrite Right Ring Rings Save ' +
        'Scheme Scope Scopes Script Search SearchAbout SearchHead SearchPattern ' +
        'SearchRewrite Section Separate Set Setoid Show Solve Sorted Step Strategies ' +
        'Strategy Structure SubClass Table Tables Tactic Term Test Theorem Time ' +
        'Timeout Transparent Type Typeclasses Types Undelimit Undo Unfocus Unfocused ' +
        'Unfold Universe Universes Unset Unshelve using Variable Variables Variant ' +
        'Verbose Visibility where with',
      built_in:
        'abstract absurd admit after apply as assert assumption at auto autorewrite ' +
        'autounfold before bottom btauto by case case_eq cbn cbv change ' +
        'classical_left classical_right clear clearbody cofix compare compute ' +
        'congruence constr_eq constructor contradict contradiction cut cutrewrite ' +
        'cycle decide decompose dependent destruct destruction dintuition ' +
        'discriminate discrR do double dtauto eapply eassumption eauto ecase ' +
        'econstructor edestruct ediscriminate eelim eexact eexists einduction ' +
        'einjection eleft elim elimtype enough equality erewrite eright ' +
        'esimplify_eq esplit evar exact exactly_once exfalso exists f_equal fail ' +
        'field field_simplify field_simplify_eq first firstorder fix fold fourier ' +
        'functional generalize generalizing gfail give_up has_evar hnf idtac in ' +
        'induction injection instantiate intro intro_pattern intros intuition ' +
        'inversion inversion_clear is_evar is_var lapply lazy left lia lra move ' +
        'native_compute nia nsatz omega once pattern pose progress proof psatz quote ' +
        'record red refine reflexivity remember rename repeat replace revert ' +
        'revgoals rewrite rewrite_strat right ring ring_simplify rtauto set ' +
        'setoid_reflexivity setoid_replace setoid_rewrite setoid_symmetry ' +
        'setoid_transitivity shelve shelve_unifiable simpl simple simplify_eq solve ' +
        'specialize split split_Rabs split_Rmult stepl stepr subst sum swap ' +
        'symmetry tactic tauto time timeout top transitivity trivial try tryif ' +
        'unfold unify until using vm_compute with'
    },
    contains: [
      hljs.QUOTE_STRING_MODE,
      hljs.COMMENT('\\(\\*', '\\*\\)'),
      hljs.C_NUMBER_MODE,
      {
        className: 'type',
        excludeBegin: true,
        begin: '\\|\\s*',
        end: '\\w+'
      },
      {begin: /[-=]>/} // relevance booster
    ]
  };
};

/***/ }),
/* 151 */
/***/ (function(module, exports) {

module.exports = function cos (hljs) {

  var STRINGS = {
    className: 'string',
    variants: [
      {
        begin: '"',
        end: '"',
        contains: [{ // escaped
          begin: "\"\"",
          relevance: 0
        }]
      }
    ]
  };

  var NUMBERS = {
    className: "number",
    begin: "\\b(\\d+(\\.\\d*)?|\\.\\d+)",
    relevance: 0
  };

  var COS_KEYWORDS =
    'property parameter class classmethod clientmethod extends as break ' +
    'catch close continue do d|0 else elseif for goto halt hang h|0 if job ' +
    'j|0 kill k|0 lock l|0 merge new open quit q|0 read r|0 return set s|0 ' +
    'tcommit throw trollback try tstart use view while write w|0 xecute x|0 ' +
    'zkill znspace zn ztrap zwrite zw zzdump zzwrite print zbreak zinsert ' +
    'zload zprint zremove zsave zzprint mv mvcall mvcrt mvdim mvprint zquit ' +
    'zsync ascii';

    // registered function - no need in them due to all functions are highlighted,
    // but I'll just leave this here.

    //"$bit", "$bitcount",
    //"$bitfind", "$bitlogic", "$case", "$char", "$classmethod", "$classname",
    //"$compile", "$data", "$decimal", "$double", "$extract", "$factor",
    //"$find", "$fnumber", "$get", "$increment", "$inumber", "$isobject",
    //"$isvaliddouble", "$isvalidnum", "$justify", "$length", "$list",
    //"$listbuild", "$listdata", "$listfind", "$listfromstring", "$listget",
    //"$listlength", "$listnext", "$listsame", "$listtostring", "$listvalid",
    //"$locate", "$match", "$method", "$name", "$nconvert", "$next",
    //"$normalize", "$now", "$number", "$order", "$parameter", "$piece",
    //"$prefetchoff", "$prefetchon", "$property", "$qlength", "$qsubscript",
    //"$query", "$random", "$replace", "$reverse", "$sconvert", "$select",
    //"$sortbegin", "$sortend", "$stack", "$text", "$translate", "$view",
    //"$wascii", "$wchar", "$wextract", "$wfind", "$wiswide", "$wlength",
    //"$wreverse", "$xecute", "$zabs", "$zarccos", "$zarcsin", "$zarctan",
    //"$zcos", "$zcot", "$zcsc", "$zdate", "$zdateh", "$zdatetime",
    //"$zdatetimeh", "$zexp", "$zhex", "$zln", "$zlog", "$zpower", "$zsec",
    //"$zsin", "$zsqr", "$ztan", "$ztime", "$ztimeh", "$zboolean",
    //"$zconvert", "$zcrc", "$zcyc", "$zdascii", "$zdchar", "$zf",
    //"$ziswide", "$zlascii", "$zlchar", "$zname", "$zposition", "$zqascii",
    //"$zqchar", "$zsearch", "$zseek", "$zstrip", "$zwascii", "$zwchar",
    //"$zwidth", "$zwpack", "$zwbpack", "$zwunpack", "$zwbunpack", "$zzenkaku",
    //"$change", "$mv", "$mvat", "$mvfmt", "$mvfmts", "$mviconv",
    //"$mviconvs", "$mvinmat", "$mvlover", "$mvoconv", "$mvoconvs", "$mvraise",
    //"$mvtrans", "$mvv", "$mvname", "$zbitand", "$zbitcount", "$zbitfind",
    //"$zbitget", "$zbitlen", "$zbitnot", "$zbitor", "$zbitset", "$zbitstr",
    //"$zbitxor", "$zincrement", "$znext", "$zorder", "$zprevious", "$zsort",
    //"device", "$ecode", "$estack", "$etrap", "$halt", "$horolog",
    //"$io", "$job", "$key", "$namespace", "$principal", "$quit", "$roles",
    //"$storage", "$system", "$test", "$this", "$tlevel", "$username",
    //"$x", "$y", "$za", "$zb", "$zchild", "$zeof", "$zeos", "$zerror",
    //"$zhorolog", "$zio", "$zjob", "$zmode", "$znspace", "$zparent", "$zpi",
    //"$zpos", "$zreference", "$zstorage", "$ztimestamp", "$ztimezone",
    //"$ztrap", "$zversion"

  return {
    case_insensitive: true,
    aliases: ["cos", "cls"],
    keywords: COS_KEYWORDS,
    contains: [
      NUMBERS,
      STRINGS,
      hljs.C_LINE_COMMENT_MODE,
      hljs.C_BLOCK_COMMENT_MODE,
      {
        className: "comment",
        begin: /;/, end: "$",
        relevance: 0
      },
      { // Functions and user-defined functions: write $ztime(60*60*3), $$myFunc(10), $$^Val(1)
        className: "built_in",
        begin: /(?:\$\$?|\.\.)\^?[a-zA-Z]+/
      },
      { // Macro command: quit $$$OK
        className: "built_in",
        begin: /\$\$\$[a-zA-Z]+/
      },
      { // Special (global) variables: write %request.Content; Built-in classes: %Library.Integer
        className: "built_in",
        begin: /%[a-z]+(?:\.[a-z]+)*/
      },
      { // Global variable: set ^globalName = 12 write ^globalName
        className: "symbol",
        begin: /\^%?[a-zA-Z][\w]*/
      },
      { // Some control constructions: do ##class(Package.ClassName).Method(), ##super()
        className: "keyword",
        begin: /##class|##super|#define|#dim/
      },

      // sub-languages: are not fully supported by hljs by 11/15/2015
      // left for the future implementation.
      {
        begin: /&sql\(/,    end: /\)/,
        excludeBegin: true, excludeEnd: true,
        subLanguage: "sql"
      },
      {
        begin: /&(js|jscript|javascript)</, end: />/,
        excludeBegin: true, excludeEnd: true,
        subLanguage: "javascript"
      },
      {
        // this brakes first and last tag, but this is the only way to embed a valid html
        begin: /&html<\s*</, end: />\s*>/,
        subLanguage: "xml"
      }
    ]
  };
};

/***/ }),
/* 152 */
/***/ (function(module, exports) {

module.exports = function(hljs) {
  var RESOURCES = 'primitive rsc_template';

  var COMMANDS = 'group clone ms master location colocation order fencing_topology ' +
      'rsc_ticket acl_target acl_group user role ' +
      'tag xml';

  var PROPERTY_SETS = 'property rsc_defaults op_defaults';

  var KEYWORDS = 'params meta operations op rule attributes utilization';

  var OPERATORS = 'read write deny defined not_defined in_range date spec in ' +
      'ref reference attribute type xpath version and or lt gt tag ' +
      'lte gte eq ne \\';

  var TYPES = 'number string';

  var LITERALS = 'Master Started Slave Stopped start promote demote stop monitor true false';

  return {
    aliases: ['crm', 'pcmk'],
    case_insensitive: true,
    keywords: {
      keyword: KEYWORDS + ' ' + OPERATORS + ' ' + TYPES,
      literal: LITERALS
    },
    contains: [
      hljs.HASH_COMMENT_MODE,
      {
        beginKeywords: 'node',
        starts: {
          end: '\\s*([\\w_-]+:)?',
          starts: {
            className: 'title',
            end: '\\s*[\\$\\w_][\\w_-]*'
          }
        }
      },
      {
        beginKeywords: RESOURCES,
        starts: {
          className: 'title',
          end: '\\s*[\\$\\w_][\\w_-]*',
          starts: {
            end: '\\s*@?[\\w_][\\w_\\.:-]*'
          }
        }
      },
      {
        begin: '\\b(' + COMMANDS.split(' ').join('|') + ')\\s+',
        keywords: COMMANDS,
        starts: {
          className: 'title',
          end: '[\\$\\w_][\\w_-]*'
        }
      },
      {
        beginKeywords: PROPERTY_SETS,
        starts: {
          className: 'title',
          end: '\\s*([\\w_-]+:)?'
        }
      },
      hljs.QUOTE_STRING_MODE,
      {
        className: 'meta',
        begin: '(ocf|systemd|service|lsb):[\\w_:-]+',
        relevance: 0
      },
      {
        className: 'number',
        begin: '\\b\\d+(\\.\\d+)?(ms|s|h|m)?',
        relevance: 0
      },
      {
        className: 'literal',
        begin: '[-]?(infinity|inf)',
        relevance: 0
      },
      {
        className: 'attr',
        begin: /([A-Za-z\$_\#][\w_-]+)=/,
        relevance: 0
      },
      {
        className: 'tag',
        begin: '</?',
        end: '/?>',
        relevance: 0
      }
    ]
  };
};

/***/ }),
/* 153 */
/***/ (function(module, exports) {

module.exports = function(hljs) {
  var NUM_SUFFIX = '(_[uif](8|16|32|64))?';
  var CRYSTAL_IDENT_RE = '[a-zA-Z_]\\w*[!?=]?';
  var RE_STARTER = '!=|!==|%|%=|&|&&|&=|\\*|\\*=|\\+|\\+=|,|-|-=|/=|/|:|;|<<|<<=|<=|<|===|==|=|>>>=|>>=|>=|>>>|' +
    '>>|>|\\[|\\{|\\(|\\^|\\^=|\\||\\|=|\\|\\||~';
  var CRYSTAL_METHOD_RE = '[a-zA-Z_]\\w*[!?=]?|[-+~]\\@|<<|>>|=~|===?|<=>|[<>]=?|\\*\\*|[-/+%^&*~`|]|\\[\\][=?]?';
  var CRYSTAL_KEYWORDS = {
    keyword:
      'abstract alias as as? asm begin break case class def do else elsif end ensure enum extend for fun if ' +
      'include instance_sizeof is_a? lib macro module next nil? of out pointerof private protected rescue responds_to? ' +
      'return require select self sizeof struct super then type typeof union uninitialized unless until when while with yield ' +
      '__DIR__ __END_LINE__ __FILE__ __LINE__',
    literal: 'false nil true'
  };
  var SUBST = {
    className: 'subst',
    begin: '#{', end: '}',
    keywords: CRYSTAL_KEYWORDS
  };
  var EXPANSION = {
    className: 'template-variable',
    variants: [
      {begin: '\\{\\{', end: '\\}\\}'},
      {begin: '\\{%', end: '%\\}'}
    ],
    keywords: CRYSTAL_KEYWORDS
  };

  function recursiveParen(begin, end) {
    var
    contains = [{begin: begin, end: end}];
    contains[0].contains = contains;
    return contains;
  }
  var STRING = {
    className: 'string',
    contains: [hljs.BACKSLASH_ESCAPE, SUBST],
    variants: [
      {begin: /'/, end: /'/},
      {begin: /"/, end: /"/},
      {begin: /`/, end: /`/},
      {begin: '%w?\\(', end: '\\)', contains: recursiveParen('\\(', '\\)')},
      {begin: '%w?\\[', end: '\\]', contains: recursiveParen('\\[', '\\]')},
      {begin: '%w?{', end: '}', contains: recursiveParen('{', '}')},
      {begin: '%w?<', end: '>', contains: recursiveParen('<', '>')},
      {begin: '%w?/', end: '/'},
      {begin: '%w?%', end: '%'},
      {begin: '%w?-', end: '-'},
      {begin: '%w?\\|', end: '\\|'},
      {begin: /<<-\w+$/, end: /^\s*\w+$/},
    ],
    relevance: 0,
  };
  var Q_STRING = {
    className: 'string',
    variants: [
      {begin: '%q\\(', end: '\\)', contains: recursiveParen('\\(', '\\)')},
      {begin: '%q\\[', end: '\\]', contains: recursiveParen('\\[', '\\]')},
      {begin: '%q{', end: '}', contains: recursiveParen('{', '}')},
      {begin: '%q<', end: '>', contains: recursiveParen('<', '>')},
      {begin: '%q/', end: '/'},
      {begin: '%q%', end: '%'},
      {begin: '%q-', end: '-'},
      {begin: '%q\\|', end: '\\|'},
      {begin: /<<-'\w+'$/, end: /^\s*\w+$/},
    ],
    relevance: 0,
  };
  var REGEXP = {
    begin: '(' + RE_STARTER + ')\\s*',
    contains: [
      {
        className: 'regexp',
        contains: [hljs.BACKSLASH_ESCAPE, SUBST],
        variants: [
          {begin: '//[a-z]*', relevance: 0},
          {begin: '/', end: '/[a-z]*'},
          {begin: '%r\\(', end: '\\)', contains: recursiveParen('\\(', '\\)')},
          {begin: '%r\\[', end: '\\]', contains: recursiveParen('\\[', '\\]')},
          {begin: '%r{', end: '}', contains: recursiveParen('{', '}')},
          {begin: '%r<', end: '>', contains: recursiveParen('<', '>')},
          {begin: '%r/', end: '/'},
          {begin: '%r%', end: '%'},
          {begin: '%r-', end: '-'},
          {begin: '%r\\|', end: '\\|'},
        ]
      }
    ],
    relevance: 0
  };
  var REGEXP2 = {
    className: 'regexp',
    contains: [hljs.BACKSLASH_ESCAPE, SUBST],
    variants: [
      {begin: '%r\\(', end: '\\)', contains: recursiveParen('\\(', '\\)')},
      {begin: '%r\\[', end: '\\]', contains: recursiveParen('\\[', '\\]')},
      {begin: '%r{', end: '}', contains: recursiveParen('{', '}')},
      {begin: '%r<', end: '>', contains: recursiveParen('<', '>')},
      {begin: '%r/', end: '/'},
      {begin: '%r%', end: '%'},
      {begin: '%r-', end: '-'},
      {begin: '%r\\|', end: '\\|'},
    ],
    relevance: 0
  };
  var ATTRIBUTE = {
    className: 'meta',
    begin: '@\\[', end: '\\]',
    contains: [
      hljs.inherit(hljs.QUOTE_STRING_MODE, {className: 'meta-string'})
    ]
  };
  var CRYSTAL_DEFAULT_CONTAINS = [
    EXPANSION,
    STRING,
    Q_STRING,
    REGEXP,
    REGEXP2,
    ATTRIBUTE,
    hljs.HASH_COMMENT_MODE,
    {
      className: 'class',
      beginKeywords: 'class module struct', end: '$|;',
      illegal: /=/,
      contains: [
        hljs.HASH_COMMENT_MODE,
        hljs.inherit(hljs.TITLE_MODE, {begin: '[A-Za-z_]\\w*(::\\w+)*(\\?|\\!)?'}),
        {begin: '<'} // relevance booster for inheritance
      ]
    },
    {
      className: 'class',
      beginKeywords: 'lib enum union', end: '$|;',
      illegal: /=/,
      contains: [
        hljs.HASH_COMMENT_MODE,
        hljs.inherit(hljs.TITLE_MODE, {begin: '[A-Za-z_]\\w*(::\\w+)*(\\?|\\!)?'}),
      ],
      relevance: 10
    },
    {
      className: 'function',
      beginKeywords: 'def', end: /\B\b/,
      contains: [
        hljs.inherit(hljs.TITLE_MODE, {
          begin: CRYSTAL_METHOD_RE,
          endsParent: true
        })
      ]
    },
    {
      className: 'function',
      beginKeywords: 'fun macro', end: /\B\b/,
      contains: [
        hljs.inherit(hljs.TITLE_MODE, {
          begin: CRYSTAL_METHOD_RE,
          endsParent: true
        })
      ],
      relevance: 5
    },
    {
      className: 'symbol',
      begin: hljs.UNDERSCORE_IDENT_RE + '(\\!|\\?)?:',
      relevance: 0
    },
    {
      className: 'symbol',
      begin: ':',
      contains: [STRING, {begin: CRYSTAL_METHOD_RE}],
      relevance: 0
    },
    {
      className: 'number',
      variants: [
        { begin: '\\b0b([01_]*[01])' + NUM_SUFFIX },
        { begin: '\\b0o([0-7_]*[0-7])' + NUM_SUFFIX },
        { begin: '\\b0x([A-Fa-f0-9_]*[A-Fa-f0-9])' + NUM_SUFFIX },
        { begin: '\\b(([0-9][0-9_]*[0-9]|[0-9])(\\.[0-9_]*[0-9])?([eE][+-]?[0-9_]*[0-9])?)' + NUM_SUFFIX}
      ],
      relevance: 0
    }
  ];
  SUBST.contains = CRYSTAL_DEFAULT_CONTAINS;
  EXPANSION.contains = CRYSTAL_DEFAULT_CONTAINS.slice(1); // without EXPANSION

  return {
    aliases: ['cr'],
    lexemes: CRYSTAL_IDENT_RE,
    keywords: CRYSTAL_KEYWORDS,
    contains: CRYSTAL_DEFAULT_CONTAINS
  };
};

/***/ }),
/* 154 */
/***/ (function(module, exports) {

module.exports = function(hljs) {
  var KEYWORDS = {
    keyword:
      // Normal keywords.
      'abstract as base bool break byte case catch char checked const continue decimal ' +
      'default delegate do double enum event explicit extern finally fixed float ' +
      'for foreach goto if implicit in int interface internal is lock long nameof ' +
      'object operator out override params private protected public readonly ref sbyte ' +
      'sealed short sizeof stackalloc static string struct switch this try typeof ' +
      'uint ulong unchecked unsafe ushort using virtual void volatile while ' +
      // Contextual keywords.
      'add alias ascending async await by descending dynamic equals from get global group into join ' +
      'let on orderby partial remove select set value var where yield',
    literal:
      'null false true'
  };

  var VERBATIM_STRING = {
    className: 'string',
    begin: '@"', end: '"',
    contains: [{begin: '""'}]
  };
  var VERBATIM_STRING_NO_LF = hljs.inherit(VERBATIM_STRING, {illegal: /\n/});
  var SUBST = {
    className: 'subst',
    begin: '{', end: '}',
    keywords: KEYWORDS
  };
  var SUBST_NO_LF = hljs.inherit(SUBST, {illegal: /\n/});
  var INTERPOLATED_STRING = {
    className: 'string',
    begin: /\$"/, end: '"',
    illegal: /\n/,
    contains: [{begin: '{{'}, {begin: '}}'}, hljs.BACKSLASH_ESCAPE, SUBST_NO_LF]
  };
  var INTERPOLATED_VERBATIM_STRING = {
    className: 'string',
    begin: /\$@"/, end: '"',
    contains: [{begin: '{{'}, {begin: '}}'}, {begin: '""'}, SUBST]
  };
  var INTERPOLATED_VERBATIM_STRING_NO_LF = hljs.inherit(INTERPOLATED_VERBATIM_STRING, {
    illegal: /\n/,
    contains: [{begin: '{{'}, {begin: '}}'}, {begin: '""'}, SUBST_NO_LF]
  });
  SUBST.contains = [
    INTERPOLATED_VERBATIM_STRING,
    INTERPOLATED_STRING,
    VERBATIM_STRING,
    hljs.APOS_STRING_MODE,
    hljs.QUOTE_STRING_MODE,
    hljs.C_NUMBER_MODE,
    hljs.C_BLOCK_COMMENT_MODE
  ];
  SUBST_NO_LF.contains = [
    INTERPOLATED_VERBATIM_STRING_NO_LF,
    INTERPOLATED_STRING,
    VERBATIM_STRING_NO_LF,
    hljs.APOS_STRING_MODE,
    hljs.QUOTE_STRING_MODE,
    hljs.C_NUMBER_MODE,
    hljs.inherit(hljs.C_BLOCK_COMMENT_MODE, {illegal: /\n/})
  ];
  var STRING = {
    variants: [
      INTERPOLATED_VERBATIM_STRING,
      INTERPOLATED_STRING,
      VERBATIM_STRING,
      hljs.APOS_STRING_MODE,
      hljs.QUOTE_STRING_MODE
    ]
  };

  var TYPE_IDENT_RE = hljs.IDENT_RE + '(<' + hljs.IDENT_RE + '(\\s*,\\s*' + hljs.IDENT_RE + ')*>)?(\\[\\])?';

  return {
    aliases: ['csharp'],
    keywords: KEYWORDS,
    illegal: /::/,
    contains: [
      hljs.COMMENT(
        '///',
        '$',
        {
          returnBegin: true,
          contains: [
            {
              className: 'doctag',
              variants: [
                {
                  begin: '///', relevance: 0
                },
                {
                  begin: '<!--|-->'
                },
                {
                  begin: '</?', end: '>'
                }
              ]
            }
          ]
        }
      ),
      hljs.C_LINE_COMMENT_MODE,
      hljs.C_BLOCK_COMMENT_MODE,
      {
        className: 'meta',
        begin: '#', end: '$',
        keywords: {
          'meta-keyword': 'if else elif endif define undef warning error line region endregion pragma checksum'
        }
      },
      STRING,
      hljs.C_NUMBER_MODE,
      {
        beginKeywords: 'class interface', end: /[{;=]/,
        illegal: /[^\s:]/,
        contains: [
          hljs.TITLE_MODE,
          hljs.C_LINE_COMMENT_MODE,
          hljs.C_BLOCK_COMMENT_MODE
        ]
      },
      {
        beginKeywords: 'namespace', end: /[{;=]/,
        illegal: /[^\s:]/,
        contains: [
          hljs.inherit(hljs.TITLE_MODE, {begin: '[a-zA-Z](\\.?\\w)*'}),
          hljs.C_LINE_COMMENT_MODE,
          hljs.C_BLOCK_COMMENT_MODE
        ]
      },
      {
        // [Attributes("")]
        className: 'meta',
        begin: '^\\s*\\[', excludeBegin: true, end: '\\]', excludeEnd: true,
        contains: [
          {className: 'meta-string', begin: /"/, end: /"/}
        ]
      },
      {
        // Expression keywords prevent 'keyword Name(...)' from being
        // recognized as a function definition
        beginKeywords: 'new return throw await else',
        relevance: 0
      },
      {
        className: 'function',
        begin: '(' + TYPE_IDENT_RE + '\\s+)+' + hljs.IDENT_RE + '\\s*\\(', returnBegin: true,
        end: /[{;=]/, excludeEnd: true,
        keywords: KEYWORDS,
        contains: [
          {
            begin: hljs.IDENT_RE + '\\s*\\(', returnBegin: true,
            contains: [hljs.TITLE_MODE],
            relevance: 0
          },
          {
            className: 'params',
            begin: /\(/, end: /\)/,
            excludeBegin: true,
            excludeEnd: true,
            keywords: KEYWORDS,
            relevance: 0,
            contains: [
              STRING,
              hljs.C_NUMBER_MODE,
              hljs.C_BLOCK_COMMENT_MODE
            ]
          },
          hljs.C_LINE_COMMENT_MODE,
          hljs.C_BLOCK_COMMENT_MODE
        ]
      }
    ]
  };
};

/***/ }),
/* 155 */
/***/ (function(module, exports) {

module.exports = function(hljs) {
  return {
    case_insensitive: false,
    lexemes: '[a-zA-Z][a-zA-Z0-9_-]*',
    keywords: {
      keyword: 'base-uri child-src connect-src default-src font-src form-action' +
        ' frame-ancestors frame-src img-src media-src object-src plugin-types' +
        ' report-uri sandbox script-src style-src', 
    },
    contains: [
    {
      className: 'string',
      begin: "'", end: "'"
    },
    {
      className: 'attribute',
      begin: '^Content', end: ':', excludeEnd: true,
    },
    ]
  };
};

/***/ }),
/* 156 */
/***/ (function(module, exports) {

module.exports = function(hljs) {
  var IDENT_RE = '[a-zA-Z-][a-zA-Z0-9_-]*';
  var RULE = {
    begin: /[A-Z\_\.\-]+\s*:/, returnBegin: true, end: ';', endsWithParent: true,
    contains: [
      {
        className: 'attribute',
        begin: /\S/, end: ':', excludeEnd: true,
        starts: {
          endsWithParent: true, excludeEnd: true,
          contains: [
            {
              begin: /[\w-]+\(/, returnBegin: true,
              contains: [
                {
                  className: 'built_in',
                  begin: /[\w-]+/
                },
                {
                  begin: /\(/, end: /\)/,
                  contains: [
                    hljs.APOS_STRING_MODE,
                    hljs.QUOTE_STRING_MODE
                  ]
                }
              ]
            },
            hljs.CSS_NUMBER_MODE,
            hljs.QUOTE_STRING_MODE,
            hljs.APOS_STRING_MODE,
            hljs.C_BLOCK_COMMENT_MODE,
            {
              className: 'number', begin: '#[0-9A-Fa-f]+'
            },
            {
              className: 'meta', begin: '!important'
            }
          ]
        }
      }
    ]
  };

  return {
    case_insensitive: true,
    illegal: /[=\/|'\$]/,
    contains: [
      hljs.C_BLOCK_COMMENT_MODE,
      {
        className: 'selector-id', begin: /#[A-Za-z0-9_-]+/
      },
      {
        className: 'selector-class', begin: /\.[A-Za-z0-9_-]+/
      },
      {
        className: 'selector-attr',
        begin: /\[/, end: /\]/,
        illegal: '$'
      },
      {
        className: 'selector-pseudo',
        begin: /:(:)?[a-zA-Z0-9\_\-\+\(\)"'.]+/
      },
      {
        begin: '@(font-face|page)',
        lexemes: '[a-z-]+',
        keywords: 'font-face page'
      },
      {
        begin: '@', end: '[{;]', // at_rule eating first "{" is a good thing
                                 // because it doesn’t let it to be parsed as
                                 // a rule set but instead drops parser into
                                 // the default mode which is how it should be.
        illegal: /:/, // break on Less variables @var: ...
        contains: [
          {
            className: 'keyword',
            begin: /\w+/
          },
          {
            begin: /\s/, endsWithParent: true, excludeEnd: true,
            relevance: 0,
            contains: [
              hljs.APOS_STRING_MODE, hljs.QUOTE_STRING_MODE,
              hljs.CSS_NUMBER_MODE
            ]
          }
        ]
      },
      {
        className: 'selector-tag', begin: IDENT_RE,
        relevance: 0
      },
      {
        begin: '{', end: '}',
        illegal: /\S/,
        contains: [
          hljs.C_BLOCK_COMMENT_MODE,
          RULE,
        ]
      }
    ]
  };
};

/***/ }),
/* 157 */
/***/ (function(module, exports) {

module.exports = /**
 * Known issues:
 *
 * - invalid hex string literals will be recognized as a double quoted strings
 *   but 'x' at the beginning of string will not be matched
 *
 * - delimited string literals are not checked for matching end delimiter
 *   (not possible to do with js regexp)
 *
 * - content of token string is colored as a string (i.e. no keyword coloring inside a token string)
 *   also, content of token string is not validated to contain only valid D tokens
 *
 * - special token sequence rule is not strictly following D grammar (anything following #line
 *   up to the end of line is matched as special token sequence)
 */

function(hljs) {
  /**
   * Language keywords
   *
   * @type {Object}
   */
  var D_KEYWORDS = {
    keyword:
      'abstract alias align asm assert auto body break byte case cast catch class ' +
      'const continue debug default delete deprecated do else enum export extern final ' +
      'finally for foreach foreach_reverse|10 goto if immutable import in inout int ' +
      'interface invariant is lazy macro mixin module new nothrow out override package ' +
      'pragma private protected public pure ref return scope shared static struct ' +
      'super switch synchronized template this throw try typedef typeid typeof union ' +
      'unittest version void volatile while with __FILE__ __LINE__ __gshared|10 ' +
      '__thread __traits __DATE__ __EOF__ __TIME__ __TIMESTAMP__ __VENDOR__ __VERSION__',
    built_in:
      'bool cdouble cent cfloat char creal dchar delegate double dstring float function ' +
      'idouble ifloat ireal long real short string ubyte ucent uint ulong ushort wchar ' +
      'wstring',
    literal:
      'false null true'
  };

  /**
   * Number literal regexps
   *
   * @type {String}
   */
  var decimal_integer_re = '(0|[1-9][\\d_]*)',
    decimal_integer_nosus_re = '(0|[1-9][\\d_]*|\\d[\\d_]*|[\\d_]+?\\d)',
    binary_integer_re = '0[bB][01_]+',
    hexadecimal_digits_re = '([\\da-fA-F][\\da-fA-F_]*|_[\\da-fA-F][\\da-fA-F_]*)',
    hexadecimal_integer_re = '0[xX]' + hexadecimal_digits_re,

    decimal_exponent_re = '([eE][+-]?' + decimal_integer_nosus_re + ')',
    decimal_float_re = '(' + decimal_integer_nosus_re + '(\\.\\d*|' + decimal_exponent_re + ')|' +
                '\\d+\\.' + decimal_integer_nosus_re + decimal_integer_nosus_re + '|' +
                '\\.' + decimal_integer_re + decimal_exponent_re + '?' +
              ')',
    hexadecimal_float_re = '(0[xX](' +
                  hexadecimal_digits_re + '\\.' + hexadecimal_digits_re + '|'+
                  '\\.?' + hexadecimal_digits_re +
                 ')[pP][+-]?' + decimal_integer_nosus_re + ')',

    integer_re = '(' +
      decimal_integer_re + '|' +
      binary_integer_re  + '|' +
       hexadecimal_integer_re   +
    ')',

    float_re = '(' +
      hexadecimal_float_re + '|' +
      decimal_float_re  +
    ')';

  /**
   * Escape sequence supported in D string and character literals
   *
   * @type {String}
   */
  var escape_sequence_re = '\\\\(' +
              '[\'"\\?\\\\abfnrtv]|' +  // common escapes
              'u[\\dA-Fa-f]{4}|' +     // four hex digit unicode codepoint
              '[0-7]{1,3}|' +       // one to three octal digit ascii char code
              'x[\\dA-Fa-f]{2}|' +    // two hex digit ascii char code
              'U[\\dA-Fa-f]{8}' +      // eight hex digit unicode codepoint
              ')|' +
              '&[a-zA-Z\\d]{2,};';      // named character entity

  /**
   * D integer number literals
   *
   * @type {Object}
   */
  var D_INTEGER_MODE = {
    className: 'number',
      begin: '\\b' + integer_re + '(L|u|U|Lu|LU|uL|UL)?',
      relevance: 0
  };

  /**
   * [D_FLOAT_MODE description]
   * @type {Object}
   */
  var D_FLOAT_MODE = {
    className: 'number',
    begin: '\\b(' +
        float_re + '([fF]|L|i|[fF]i|Li)?|' +
        integer_re + '(i|[fF]i|Li)' +
      ')',
    relevance: 0
  };

  /**
   * D character literal
   *
   * @type {Object}
   */
  var D_CHARACTER_MODE = {
    className: 'string',
    begin: '\'(' + escape_sequence_re + '|.)', end: '\'',
    illegal: '.'
  };

  /**
   * D string escape sequence
   *
   * @type {Object}
   */
  var D_ESCAPE_SEQUENCE = {
    begin: escape_sequence_re,
    relevance: 0
  };

  /**
   * D double quoted string literal
   *
   * @type {Object}
   */
  var D_STRING_MODE = {
    className: 'string',
    begin: '"',
    contains: [D_ESCAPE_SEQUENCE],
    end: '"[cwd]?'
  };

  /**
   * D wysiwyg and delimited string literals
   *
   * @type {Object}
   */
  var D_WYSIWYG_DELIMITED_STRING_MODE = {
    className: 'string',
    begin: '[rq]"',
    end: '"[cwd]?',
    relevance: 5
  };

  /**
   * D alternate wysiwyg string literal
   *
   * @type {Object}
   */
  var D_ALTERNATE_WYSIWYG_STRING_MODE = {
    className: 'string',
    begin: '`',
    end: '`[cwd]?'
  };

  /**
   * D hexadecimal string literal
   *
   * @type {Object}
   */
  var D_HEX_STRING_MODE = {
    className: 'string',
    begin: 'x"[\\da-fA-F\\s\\n\\r]*"[cwd]?',
    relevance: 10
  };

  /**
   * D delimited string literal
   *
   * @type {Object}
   */
  var D_TOKEN_STRING_MODE = {
    className: 'string',
    begin: 'q"\\{',
    end: '\\}"'
  };

  /**
   * Hashbang support
   *
   * @type {Object}
   */
  var D_HASHBANG_MODE = {
    className: 'meta',
    begin: '^#!',
    end: '$',
    relevance: 5
  };

  /**
   * D special token sequence
   *
   * @type {Object}
   */
  var D_SPECIAL_TOKEN_SEQUENCE_MODE = {
    className: 'meta',
    begin: '#(line)',
    end: '$',
    relevance: 5
  };

  /**
   * D attributes
   *
   * @type {Object}
   */
  var D_ATTRIBUTE_MODE = {
    className: 'keyword',
    begin: '@[a-zA-Z_][a-zA-Z_\\d]*'
  };

  /**
   * D nesting comment
   *
   * @type {Object}
   */
  var D_NESTING_COMMENT_MODE = hljs.COMMENT(
    '\\/\\+',
    '\\+\\/',
    {
      contains: ['self'],
      relevance: 10
    }
  );

  return {
    lexemes: hljs.UNDERSCORE_IDENT_RE,
    keywords: D_KEYWORDS,
    contains: [
      hljs.C_LINE_COMMENT_MODE,
        hljs.C_BLOCK_COMMENT_MODE,
        D_NESTING_COMMENT_MODE,
        D_HEX_STRING_MODE,
        D_STRING_MODE,
        D_WYSIWYG_DELIMITED_STRING_MODE,
        D_ALTERNATE_WYSIWYG_STRING_MODE,
        D_TOKEN_STRING_MODE,
        D_FLOAT_MODE,
        D_INTEGER_MODE,
        D_CHARACTER_MODE,
        D_HASHBANG_MODE,
        D_SPECIAL_TOKEN_SEQUENCE_MODE,
        D_ATTRIBUTE_MODE
    ]
  };
};

/***/ }),
/* 158 */
/***/ (function(module, exports) {

module.exports = function(hljs) {
  return {
    aliases: ['md', 'mkdown', 'mkd'],
    contains: [
      // highlight headers
      {
        className: 'section',
        variants: [
          { begin: '^#{1,6}', end: '$' },
          { begin: '^.+?\\n[=-]{2,}$' }
        ]
      },
      // inline html
      {
        begin: '<', end: '>',
        subLanguage: 'xml',
        relevance: 0
      },
      // lists (indicators only)
      {
        className: 'bullet',
        begin: '^([*+-]|(\\d+\\.))\\s+'
      },
      // strong segments
      {
        className: 'strong',
        begin: '[*_]{2}.+?[*_]{2}'
      },
      // emphasis segments
      {
        className: 'emphasis',
        variants: [
          { begin: '\\*.+?\\*' },
          { begin: '_.+?_'
          , relevance: 0
          }
        ]
      },
      // blockquotes
      {
        className: 'quote',
        begin: '^>\\s+', end: '$'
      },
      // code snippets
      {
        className: 'code',
        variants: [
          {
            begin: '^```\w*\s*$', end: '^```\s*$'
          },
          {
            begin: '`.+?`'
          },
          {
            begin: '^( {4}|\t)', end: '$',
            relevance: 0
          }
        ]
      },
      // horizontal rules
      {
        begin: '^[-\\*]{3,}', end: '$'
      },
      // using links - title and link
      {
        begin: '\\[.+?\\][\\(\\[].*?[\\)\\]]',
        returnBegin: true,
        contains: [
          {
            className: 'string',
            begin: '\\[', end: '\\]',
            excludeBegin: true,
            returnEnd: true,
            relevance: 0
          },
          {
            className: 'link',
            begin: '\\]\\(', end: '\\)',
            excludeBegin: true, excludeEnd: true
          },
          {
            className: 'symbol',
            begin: '\\]\\[', end: '\\]',
            excludeBegin: true, excludeEnd: true
          }
        ],
        relevance: 10
      },
      {
        begin: /^\[[^\n]+\]:/,
        returnBegin: true,
        contains: [
          {
            className: 'symbol',
            begin: /\[/, end: /\]/,
            excludeBegin: true, excludeEnd: true
          },
          {
            className: 'link',
            begin: /:\s*/, end: /$/,
            excludeBegin: true
          }
        ]
      }
    ]
  };
};

/***/ }),
/* 159 */
/***/ (function(module, exports) {

module.exports = function (hljs) {
  var SUBST = {
    className: 'subst',
    begin: '\\$\\{', end: '}',
    keywords: 'true false null this is new super'
  };

  var STRING = {
    className: 'string',
    variants: [
      {
        begin: 'r\'\'\'', end: '\'\'\''
      },
      {
        begin: 'r"""', end: '"""'
      },
      {
        begin: 'r\'', end: '\'',
        illegal: '\\n'
      },
      {
        begin: 'r"', end: '"',
        illegal: '\\n'
      },
      {
        begin: '\'\'\'', end: '\'\'\'',
        contains: [hljs.BACKSLASH_ESCAPE, SUBST]
      },
      {
        begin: '"""', end: '"""',
        contains: [hljs.BACKSLASH_ESCAPE, SUBST]
      },
      {
        begin: '\'', end: '\'',
        illegal: '\\n',
        contains: [hljs.BACKSLASH_ESCAPE, SUBST]
      },
      {
        begin: '"', end: '"',
        illegal: '\\n',
        contains: [hljs.BACKSLASH_ESCAPE, SUBST]
      }
    ]
  };
  SUBST.contains = [
    hljs.C_NUMBER_MODE, STRING
  ];

  var KEYWORDS = {
    keyword: 'assert async await break case catch class const continue default do else enum extends false final ' +
      'finally for if in is new null rethrow return super switch sync this throw true try var void while with yield ' +
      'abstract as dynamic export external factory get implements import library operator part set static typedef',
    built_in:
      // dart:core
      'print Comparable DateTime Duration Function Iterable Iterator List Map Match Null Object Pattern RegExp Set ' +
      'Stopwatch String StringBuffer StringSink Symbol Type Uri bool double int num ' +
      // dart:html
      'document window querySelector querySelectorAll Element ElementList'
  };

  return {
    keywords: KEYWORDS,
    contains: [
      STRING,
      hljs.COMMENT(
        '/\\*\\*',
        '\\*/',
        {
          subLanguage: 'markdown'
        }
      ),
      hljs.COMMENT(
        '///',
        '$',
        {
          subLanguage: 'markdown'
        }
      ),
      hljs.C_LINE_COMMENT_MODE,
      hljs.C_BLOCK_COMMENT_MODE,
      {
        className: 'class',
        beginKeywords: 'class interface', end: '{', excludeEnd: true,
        contains: [
          {
            beginKeywords: 'extends implements'
          },
          hljs.UNDERSCORE_TITLE_MODE
        ]
      },
      hljs.C_NUMBER_MODE,
      {
        className: 'meta', begin: '@[A-Za-z]+'
      },
      {
        begin: '=>' // No markup, just a relevance booster
      }
    ]
  }
};

/***/ }),
/* 160 */
/***/ (function(module, exports) {

module.exports = function(hljs) {
  var KEYWORDS =
    'exports register file shl array record property for mod while set ally label uses raise not ' +
    'stored class safecall var interface or private static exit index inherited to else stdcall ' +
    'override shr asm far resourcestring finalization packed virtual out and protected library do ' +
    'xorwrite goto near function end div overload object unit begin string on inline repeat until ' +
    'destructor write message program with read initialization except default nil if case cdecl in ' +
    'downto threadvar of try pascal const external constructor type public then implementation ' +
    'finally published procedure absolute reintroduce operator as is abstract alias assembler ' +
    'bitpacked break continue cppdecl cvar enumerator experimental platform deprecated ' +
    'unimplemented dynamic export far16 forward generic helper implements interrupt iochecks ' +
    'local name nodefault noreturn nostackframe oldfpccall otherwise saveregisters softfloat ' +
    'specialize strict unaligned varargs ';
  var COMMENT_MODES = [
    hljs.C_LINE_COMMENT_MODE,
    hljs.COMMENT(/\{/, /\}/, {relevance: 0}),
    hljs.COMMENT(/\(\*/, /\*\)/, {relevance: 10})
  ];
  var DIRECTIVE = {
    className: 'meta',
    variants: [
      {begin: /\{\$/, end: /\}/},
      {begin: /\(\*\$/, end: /\*\)/}
    ]
  };
  var STRING = {
    className: 'string',
    begin: /'/, end: /'/,
    contains: [{begin: /''/}]
  };
  var CHAR_STRING = {
    className: 'string', begin: /(#\d+)+/
  };
  var CLASS = {
    begin: hljs.IDENT_RE + '\\s*=\\s*class\\s*\\(', returnBegin: true,
    contains: [
      hljs.TITLE_MODE
    ]
  };
  var FUNCTION = {
    className: 'function',
    beginKeywords: 'function constructor destructor procedure', end: /[:;]/,
    keywords: 'function constructor|10 destructor|10 procedure|10',
    contains: [
      hljs.TITLE_MODE,
      {
        className: 'params',
        begin: /\(/, end: /\)/,
        keywords: KEYWORDS,
        contains: [STRING, CHAR_STRING, DIRECTIVE].concat(COMMENT_MODES)
      },
      DIRECTIVE
    ].concat(COMMENT_MODES)
  };
  return {
    aliases: ['dpr', 'dfm', 'pas', 'pascal', 'freepascal', 'lazarus', 'lpr', 'lfm'],
    case_insensitive: true,
    keywords: KEYWORDS,
    illegal: /"|\$[G-Zg-z]|\/\*|<\/|\|/,
    contains: [
      STRING, CHAR_STRING,
      hljs.NUMBER_MODE,
      CLASS,
      FUNCTION,
      DIRECTIVE
    ].concat(COMMENT_MODES)
  };
};

/***/ }),
/* 161 */
/***/ (function(module, exports) {

module.exports = function(hljs) {
  return {
    aliases: ['patch'],
    contains: [
      {
        className: 'meta',
        relevance: 10,
        variants: [
          {begin: /^@@ +\-\d+,\d+ +\+\d+,\d+ +@@$/},
          {begin: /^\*\*\* +\d+,\d+ +\*\*\*\*$/},
          {begin: /^\-\-\- +\d+,\d+ +\-\-\-\-$/}
        ]
      },
      {
        className: 'comment',
        variants: [
          {begin: /Index: /, end: /$/},
          {begin: /={3,}/, end: /$/},
          {begin: /^\-{3}/, end: /$/},
          {begin: /^\*{3} /, end: /$/},
          {begin: /^\+{3}/, end: /$/},
          {begin: /\*{5}/, end: /\*{5}$/}
        ]
      },
      {
        className: 'addition',
        begin: '^\\+', end: '$'
      },
      {
        className: 'deletion',
        begin: '^\\-', end: '$'
      },
      {
        className: 'addition',
        begin: '^\\!', end: '$'
      }
    ]
  };
};

/***/ }),
/* 162 */
/***/ (function(module, exports) {

module.exports = function(hljs) {
  var FILTER = {
    begin: /\|[A-Za-z]+:?/,
    keywords: {
      name:
        'truncatewords removetags linebreaksbr yesno get_digit timesince random striptags ' +
        'filesizeformat escape linebreaks length_is ljust rjust cut urlize fix_ampersands ' +
        'title floatformat capfirst pprint divisibleby add make_list unordered_list urlencode ' +
        'timeuntil urlizetrunc wordcount stringformat linenumbers slice date dictsort ' +
        'dictsortreversed default_if_none pluralize lower join center default ' +
        'truncatewords_html upper length phone2numeric wordwrap time addslashes slugify first ' +
        'escapejs force_escape iriencode last safe safeseq truncatechars localize unlocalize ' +
        'localtime utc timezone'
    },
    contains: [
      hljs.QUOTE_STRING_MODE,
      hljs.APOS_STRING_MODE
    ]
  };

  return {
    aliases: ['jinja'],
    case_insensitive: true,
    subLanguage: 'xml',
    contains: [
      hljs.COMMENT(/\{%\s*comment\s*%}/, /\{%\s*endcomment\s*%}/),
      hljs.COMMENT(/\{#/, /#}/),
      {
        className: 'template-tag',
        begin: /\{%/, end: /%}/,
        contains: [
          {
            className: 'name',
            begin: /\w+/,
            keywords: {
              name:
                'comment endcomment load templatetag ifchanged endifchanged if endif firstof for ' +
                'endfor ifnotequal endifnotequal widthratio extends include spaceless ' +
                'endspaceless regroup ifequal endifequal ssi now with cycle url filter ' +
                'endfilter debug block endblock else autoescape endautoescape csrf_token empty elif ' +
                'endwith static trans blocktrans endblocktrans get_static_prefix get_media_prefix ' +
                'plural get_current_language language get_available_languages ' +
                'get_current_language_bidi get_language_info get_language_info_list localize ' +
                'endlocalize localtime endlocaltime timezone endtimezone get_current_timezone ' +
                'verbatim'
            },
            starts: {
              endsWithParent: true,
              keywords: 'in by as',
              contains: [FILTER],
              relevance: 0
            }
          }
        ]
      },
      {
        className: 'template-variable',
        begin: /\{\{/, end: /}}/,
        contains: [FILTER]
      }
    ]
  };
};

/***/ }),
/* 163 */
/***/ (function(module, exports) {

module.exports = function(hljs) {
  return {
    aliases: ['bind', 'zone'],
    keywords: {
      keyword:
        'IN A AAAA AFSDB APL CAA CDNSKEY CDS CERT CNAME DHCID DLV DNAME DNSKEY DS HIP IPSECKEY KEY KX ' +
        'LOC MX NAPTR NS NSEC NSEC3 NSEC3PARAM PTR RRSIG RP SIG SOA SRV SSHFP TA TKEY TLSA TSIG TXT'
    },
    contains: [
      hljs.COMMENT(';', '$', {relevance: 0}),
      {
        className: 'meta',
        begin: /^\$(TTL|GENERATE|INCLUDE|ORIGIN)\b/
      },
      // IPv6
      {
        className: 'number',
        begin: '((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:)))\\b'
      },
      // IPv4
      {
        className: 'number',
        begin: '((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\b'
      },
      hljs.inherit(hljs.NUMBER_MODE, {begin: /\b\d+[dhwm]?/})
    ]
  };
};

/***/ }),
/* 164 */
/***/ (function(module, exports) {

module.exports = function(hljs) {
  return {
    aliases: ['docker'],
    case_insensitive: true,
    keywords: 'from maintainer expose env arg user onbuild stopsignal',
    contains: [
      hljs.HASH_COMMENT_MODE,
      hljs.APOS_STRING_MODE,
      hljs.QUOTE_STRING_MODE,
      hljs.NUMBER_MODE,
      {
        beginKeywords: 'run cmd entrypoint volume add copy workdir label healthcheck shell',
        starts: {
          end: /[^\\]\n/,
          subLanguage: 'bash'
        }
      }
    ],
    illegal: '</'
  }
};

/***/ }),
/* 165 */
/***/ (function(module, exports) {

module.exports = function(hljs) {
  var COMMENT = hljs.COMMENT(
    /^\s*@?rem\b/, /$/,
    {
      relevance: 10
    }
  );
  var LABEL = {
    className: 'symbol',
    begin: '^\\s*[A-Za-z._?][A-Za-z0-9_$#@~.?]*(:|\\s+label)',
    relevance: 0
  };
  return {
    aliases: ['bat', 'cmd'],
    case_insensitive: true,
    illegal: /\/\*/,
    keywords: {
      keyword:
        'if else goto for in do call exit not exist errorlevel defined ' +
        'equ neq lss leq gtr geq',
      built_in:
        'prn nul lpt3 lpt2 lpt1 con com4 com3 com2 com1 aux ' +
        'shift cd dir echo setlocal endlocal set pause copy ' +
        'append assoc at attrib break cacls cd chcp chdir chkdsk chkntfs cls cmd color ' +
        'comp compact convert date dir diskcomp diskcopy doskey erase fs ' +
        'find findstr format ftype graftabl help keyb label md mkdir mode more move path ' +
        'pause print popd pushd promt rd recover rem rename replace restore rmdir shift' +
        'sort start subst time title tree type ver verify vol ' +
        // winutils
        'ping net ipconfig taskkill xcopy ren del'
    },
    contains: [
      {
        className: 'variable', begin: /%%[^ ]|%[^ ]+?%|![^ ]+?!/
      },
      {
        className: 'function',
        begin: LABEL.begin, end: 'goto:eof',
        contains: [
          hljs.inherit(hljs.TITLE_MODE, {begin: '([_a-zA-Z]\\w*\\.)*([_a-zA-Z]\\w*:)?[_a-zA-Z]\\w*'}),
          COMMENT
        ]
      },
      {
        className: 'number', begin: '\\b\\d+',
        relevance: 0
      },
      COMMENT
    ]
  };
};

/***/ }),
/* 166 */
/***/ (function(module, exports) {

module.exports = function(hljs) {
  var QUOTED_PROPERTY = {
    className: 'string',
    begin: /"/, end: /"/
  };
  var APOS_PROPERTY = {
    className: 'string',
    begin: /'/, end: /'/
  };
  var UNQUOTED_PROPERTY = {
    className: 'string',
    begin: '[\\w-?]+:\\w+', end: '\\W',
    relevance: 0
  };
  var VALUELESS_PROPERTY = {
    className: 'string',
    begin: '\\w+-?\\w+', end: '\\W',
    relevance: 0
  };

  return {
    keywords: 'dsconfig',
    contains: [
      {
        className: 'keyword',
        begin: '^dsconfig', end: '\\s', excludeEnd: true,
        relevance: 10
      },
      {
        className: 'built_in',
        begin: '(list|create|get|set|delete)-(\\w+)', end: '\\s', excludeEnd: true,
        illegal: '!@#$%^&*()',
        relevance: 10
      },
      {
        className: 'built_in',
        begin: '--(\\w+)', end: '\\s', excludeEnd: true
      },
      QUOTED_PROPERTY,
      APOS_PROPERTY,
      UNQUOTED_PROPERTY,
      VALUELESS_PROPERTY,
      hljs.HASH_COMMENT_MODE
    ]
  };
};

/***/ }),
/* 167 */
/***/ (function(module, exports) {

module.exports = function(hljs) {
  var STRINGS = {
    className: 'string',
    variants: [
      hljs.inherit(hljs.QUOTE_STRING_MODE, { begin: '((u8?|U)|L)?"' }),
      {
        begin: '(u8?|U)?R"', end: '"',
        contains: [hljs.BACKSLASH_ESCAPE]
      },
      {
        begin: '\'\\\\?.', end: '\'',
        illegal: '.'
      }
    ]
  };

  var NUMBERS = {
    className: 'number',
    variants: [
      { begin: '\\b(\\d+(\\.\\d*)?|\\.\\d+)(u|U|l|L|ul|UL|f|F)' },
      { begin: hljs.C_NUMBER_RE }
    ],
    relevance: 0
  };

  var PREPROCESSOR = {
    className: 'meta',
    begin: '#', end: '$',
    keywords: {'meta-keyword': 'if else elif endif define undef ifdef ifndef'},
    contains: [
      {
        begin: /\\\n/, relevance: 0
      },
      {
        beginKeywords: 'include', end: '$',
        keywords: {'meta-keyword': 'include'},
        contains: [
          hljs.inherit(STRINGS, {className: 'meta-string'}),
          {
            className: 'meta-string',
            begin: '<', end: '>',
            illegal: '\\n'
          }
        ]
      },
      STRINGS,
      hljs.C_LINE_COMMENT_MODE,
      hljs.C_BLOCK_COMMENT_MODE
    ]
  };

  var DTS_REFERENCE = {
    className: 'variable',
    begin: '\\&[a-z\\d_]*\\b'
  };

  var DTS_KEYWORD = {
    className: 'meta-keyword',
    begin: '/[a-z][a-z\\d-]*/'
  };

  var DTS_LABEL = {
    className: 'symbol',
    begin: '^\\s*[a-zA-Z_][a-zA-Z\\d_]*:'
  };

  var DTS_CELL_PROPERTY = {
    className: 'params',
    begin: '<',
    end: '>',
    contains: [
      NUMBERS,
      DTS_REFERENCE
    ]
  };

  var DTS_NODE = {
    className: 'class',
    begin: /[a-zA-Z_][a-zA-Z\d_@]*\s{/,
    end: /[{;=]/,
    returnBegin: true,
    excludeEnd: true
  };

  var DTS_ROOT_NODE = {
    className: 'class',
    begin: '/\\s*{',
    end: '};',
    relevance: 10,
    contains: [
      DTS_REFERENCE,
      DTS_KEYWORD,
      DTS_LABEL,
      DTS_NODE,
      DTS_CELL_PROPERTY,
      hljs.C_LINE_COMMENT_MODE,
      hljs.C_BLOCK_COMMENT_MODE,
      NUMBERS,
      STRINGS
    ]
  };

  return {
    keywords: "",
    contains: [
      DTS_ROOT_NODE,
      DTS_REFERENCE,
      DTS_KEYWORD,
      DTS_LABEL,
      DTS_NODE,
      DTS_CELL_PROPERTY,
      hljs.C_LINE_COMMENT_MODE,
      hljs.C_BLOCK_COMMENT_MODE,
      NUMBERS,
      STRINGS,
      PREPROCESSOR,
      {
        begin: hljs.IDENT_RE + '::',
        keywords: ""
      }
    ]
  };
};

/***/ }),
/* 168 */
/***/ (function(module, exports) {

module.exports = function(hljs) {
  var EXPRESSION_KEYWORDS = 'if eq ne lt lte gt gte select default math sep';
  return {
    aliases: ['dst'],
    case_insensitive: true,
    subLanguage: 'xml',
    contains: [
      {
        className: 'template-tag',
        begin: /\{[#\/]/, end: /\}/, illegal: /;/,
        contains: [
          {
            className: 'name',
            begin: /[a-zA-Z\.-]+/,
            starts: {
              endsWithParent: true, relevance: 0,
              contains: [
                hljs.QUOTE_STRING_MODE
              ]
            }
          }
        ]
      },
      {
        className: 'template-variable',
        begin: /\{/, end: /\}/, illegal: /;/,
        keywords: EXPRESSION_KEYWORDS
      }
    ]
  };
};

/***/ }),
/* 169 */
/***/ (function(module, exports) {

module.exports = function(hljs) {
    var commentMode = hljs.COMMENT(/\(\*/, /\*\)/);

    var nonTerminalMode = {
        className: "attribute",
        begin: /^[ ]*[a-zA-Z][a-zA-Z-]*([\s-]+[a-zA-Z][a-zA-Z]*)*/
    };

    var specialSequenceMode = {
        className: "meta",
        begin: /\?.*\?/
    };

    var ruleBodyMode = {
        begin: /=/, end: /;/,
        contains: [
            commentMode,
            specialSequenceMode,
            // terminals
            hljs.APOS_STRING_MODE, hljs.QUOTE_STRING_MODE
        ]
    };

    return {
        illegal: /\S/,
        contains: [
            commentMode,
            nonTerminalMode,
            ruleBodyMode
        ]
    };
};

/***/ }),
/* 170 */
/***/ (function(module, exports) {

module.exports = function(hljs) {
  var ELIXIR_IDENT_RE = '[a-zA-Z_][a-zA-Z0-9_]*(\\!|\\?)?';
  var ELIXIR_METHOD_RE = '[a-zA-Z_]\\w*[!?=]?|[-+~]\\@|<<|>>|=~|===?|<=>|[<>]=?|\\*\\*|[-/+%^&*~`|]|\\[\\]=?';
  var ELIXIR_KEYWORDS =
    'and false then defined module in return redo retry end for true self when ' +
    'next until do begin unless nil break not case cond alias while ensure or ' +
    'include use alias fn quote';
  var SUBST = {
    className: 'subst',
    begin: '#\\{', end: '}',
    lexemes: ELIXIR_IDENT_RE,
    keywords: ELIXIR_KEYWORDS
  };
  var STRING = {
    className: 'string',
    contains: [hljs.BACKSLASH_ESCAPE, SUBST],
    variants: [
      {
        begin: /'/, end: /'/
      },
      {
        begin: /"/, end: /"/
      }
    ]
  };
  var FUNCTION = {
    className: 'function',
    beginKeywords: 'def defp defmacro', end: /\B\b/, // the mode is ended by the title
    contains: [
      hljs.inherit(hljs.TITLE_MODE, {
        begin: ELIXIR_IDENT_RE,
        endsParent: true
      })
    ]
  };
  var CLASS = hljs.inherit(FUNCTION, {
    className: 'class',
    beginKeywords: 'defimpl defmodule defprotocol defrecord', end: /\bdo\b|$|;/
  });
  var ELIXIR_DEFAULT_CONTAINS = [
    STRING,
    hljs.HASH_COMMENT_MODE,
    CLASS,
    FUNCTION,
    {
      className: 'symbol',
      begin: ':(?!\\s)',
      contains: [STRING, {begin: ELIXIR_METHOD_RE}],
      relevance: 0
    },
    {
      className: 'symbol',
      begin: ELIXIR_IDENT_RE + ':',
      relevance: 0
    },
    {
      className: 'number',
      begin: '(\\b0[0-7_]+)|(\\b0x[0-9a-fA-F_]+)|(\\b[1-9][0-9_]*(\\.[0-9_]+)?)|[0_]\\b',
      relevance: 0
    },
    {
      className: 'variable',
      begin: '(\\$\\W)|((\\$|\\@\\@?)(\\w+))'
    },
    {
      begin: '->'
    },
    { // regexp container
      begin: '(' + hljs.RE_STARTERS_RE + ')\\s*',
      contains: [
        hljs.HASH_COMMENT_MODE,
        {
          className: 'regexp',
          illegal: '\\n',
          contains: [hljs.BACKSLASH_ESCAPE, SUBST],
          variants: [
            {
              begin: '/', end: '/[a-z]*'
            },
            {
              begin: '%r\\[', end: '\\][a-z]*'
            }
          ]
        }
      ],
      relevance: 0
    }
  ];
  SUBST.contains = ELIXIR_DEFAULT_CONTAINS;

  return {
    lexemes: ELIXIR_IDENT_RE,
    keywords: ELIXIR_KEYWORDS,
    contains: ELIXIR_DEFAULT_CONTAINS
  };
};

/***/ }),
/* 171 */
/***/ (function(module, exports) {

module.exports = function(hljs) {
  var COMMENT = {
    variants: [
      hljs.COMMENT('--', '$'),
      hljs.COMMENT(
        '{-',
        '-}',
        {
          contains: ['self']
        }
      )
    ]
  };

  var CONSTRUCTOR = {
    className: 'type',
    begin: '\\b[A-Z][\\w\']*', // TODO: other constructors (built-in, infix).
    relevance: 0
  };

  var LIST = {
    begin: '\\(', end: '\\)',
    illegal: '"',
    contains: [
      {className: 'type', begin: '\\b[A-Z][\\w]*(\\((\\.\\.|,|\\w+)\\))?'},
      COMMENT
    ]
  };

  var RECORD = {
    begin: '{', end: '}',
    contains: LIST.contains
  };

  return {
    keywords:
      'let in if then else case of where module import exposing ' +
      'type alias as infix infixl infixr port effect command subscription',
    contains: [

      // Top-level constructions.

      {
        beginKeywords: 'port effect module', end: 'exposing',
        keywords: 'port effect module where command subscription exposing',
        contains: [LIST, COMMENT],
        illegal: '\\W\\.|;'
      },
      {
        begin: 'import', end: '$',
        keywords: 'import as exposing',
        contains: [LIST, COMMENT],
        illegal: '\\W\\.|;'
      },
      {
        begin: 'type', end: '$',
        keywords: 'type alias',
        contains: [CONSTRUCTOR, LIST, RECORD, COMMENT]
      },
      {
        beginKeywords: 'infix infixl infixr', end: '$',
        contains: [hljs.C_NUMBER_MODE, COMMENT]
      },
      {
        begin: 'port', end: '$',
        keywords: 'port',
        contains: [COMMENT]
      },

      // Literals and names.

      // TODO: characters.
      hljs.QUOTE_STRING_MODE,
      hljs.C_NUMBER_MODE,
      CONSTRUCTOR,
      hljs.inherit(hljs.TITLE_MODE, {begin: '^[_a-z][\\w\']*'}),
      COMMENT,

      {begin: '->|<-'} // No markup, relevance booster
    ],
    illegal: /;/
  };
};

/***/ }),
/* 172 */
/***/ (function(module, exports) {

module.exports = function(hljs) {
  var RUBY_METHOD_RE = '[a-zA-Z_]\\w*[!?=]?|[-+~]\\@|<<|>>|=~|===?|<=>|[<>]=?|\\*\\*|[-/+%^&*~`|]|\\[\\]=?';
  var RUBY_KEYWORDS = {
    keyword:
      'and then defined module in return redo if BEGIN retry end for self when ' +
      'next until do begin unless END rescue else break undef not super class case ' +
      'require yield alias while ensure elsif or include attr_reader attr_writer attr_accessor',
    literal:
      'true false nil'
  };
  var YARDOCTAG = {
    className: 'doctag',
    begin: '@[A-Za-z]+'
  };
  var IRB_OBJECT = {
    begin: '#<', end: '>'
  };
  var COMMENT_MODES = [
    hljs.COMMENT(
      '#',
      '$',
      {
        contains: [YARDOCTAG]
      }
    ),
    hljs.COMMENT(
      '^\\=begin',
      '^\\=end',
      {
        contains: [YARDOCTAG],
        relevance: 10
      }
    ),
    hljs.COMMENT('^__END__', '\\n$')
  ];
  var SUBST = {
    className: 'subst',
    begin: '#\\{', end: '}',
    keywords: RUBY_KEYWORDS
  };
  var STRING = {
    className: 'string',
    contains: [hljs.BACKSLASH_ESCAPE, SUBST],
    variants: [
      {begin: /'/, end: /'/},
      {begin: /"/, end: /"/},
      {begin: /`/, end: /`/},
      {begin: '%[qQwWx]?\\(', end: '\\)'},
      {begin: '%[qQwWx]?\\[', end: '\\]'},
      {begin: '%[qQwWx]?{', end: '}'},
      {begin: '%[qQwWx]?<', end: '>'},
      {begin: '%[qQwWx]?/', end: '/'},
      {begin: '%[qQwWx]?%', end: '%'},
      {begin: '%[qQwWx]?-', end: '-'},
      {begin: '%[qQwWx]?\\|', end: '\\|'},
      {
        // \B in the beginning suppresses recognition of ?-sequences where ?
        // is the last character of a preceding identifier, as in: `func?4`
        begin: /\B\?(\\\d{1,3}|\\x[A-Fa-f0-9]{1,2}|\\u[A-Fa-f0-9]{4}|\\?\S)\b/
      },
      {
        begin: /<<(-?)\w+$/, end: /^\s*\w+$/,
      }
    ]
  };
  var PARAMS = {
    className: 'params',
    begin: '\\(', end: '\\)', endsParent: true,
    keywords: RUBY_KEYWORDS
  };

  var RUBY_DEFAULT_CONTAINS = [
    STRING,
    IRB_OBJECT,
    {
      className: 'class',
      beginKeywords: 'class module', end: '$|;',
      illegal: /=/,
      contains: [
        hljs.inherit(hljs.TITLE_MODE, {begin: '[A-Za-z_]\\w*(::\\w+)*(\\?|\\!)?'}),
        {
          begin: '<\\s*',
          contains: [{
            begin: '(' + hljs.IDENT_RE + '::)?' + hljs.IDENT_RE
          }]
        }
      ].concat(COMMENT_MODES)
    },
    {
      className: 'function',
      beginKeywords: 'def', end: '$|;',
      contains: [
        hljs.inherit(hljs.TITLE_MODE, {begin: RUBY_METHOD_RE}),
        PARAMS
      ].concat(COMMENT_MODES)
    },
    {
      // swallow namespace qualifiers before symbols
      begin: hljs.IDENT_RE + '::'
    },
    {
      className: 'symbol',
      begin: hljs.UNDERSCORE_IDENT_RE + '(\\!|\\?)?:',
      relevance: 0
    },
    {
      className: 'symbol',
      begin: ':(?!\\s)',
      contains: [STRING, {begin: RUBY_METHOD_RE}],
      relevance: 0
    },
    {
      className: 'number',
      begin: '(\\b0[0-7_]+)|(\\b0x[0-9a-fA-F_]+)|(\\b[1-9][0-9_]*(\\.[0-9_]+)?)|[0_]\\b',
      relevance: 0
    },
    {
      begin: '(\\$\\W)|((\\$|\\@\\@?)(\\w+))' // variables
    },
    {
      className: 'params',
      begin: /\|/, end: /\|/,
      keywords: RUBY_KEYWORDS
    },
    { // regexp container
      begin: '(' + hljs.RE_STARTERS_RE + '|unless)\\s*',
      keywords: 'unless',
      contains: [
        IRB_OBJECT,
        {
          className: 'regexp',
          contains: [hljs.BACKSLASH_ESCAPE, SUBST],
          illegal: /\n/,
          variants: [
            {begin: '/', end: '/[a-z]*'},
            {begin: '%r{', end: '}[a-z]*'},
            {begin: '%r\\(', end: '\\)[a-z]*'},
            {begin: '%r!', end: '![a-z]*'},
            {begin: '%r\\[', end: '\\][a-z]*'}
          ]
        }
      ].concat(COMMENT_MODES),
      relevance: 0
    }
  ].concat(COMMENT_MODES);

  SUBST.contains = RUBY_DEFAULT_CONTAINS;
  PARAMS.contains = RUBY_DEFAULT_CONTAINS;

  var SIMPLE_PROMPT = "[>?]>";
  var DEFAULT_PROMPT = "[\\w#]+\\(\\w+\\):\\d+:\\d+>";
  var RVM_PROMPT = "(\\w+-)?\\d+\\.\\d+\\.\\d(p\\d+)?[^>]+>";

  var IRB_DEFAULT = [
    {
      begin: /^\s*=>/,
      starts: {
        end: '$', contains: RUBY_DEFAULT_CONTAINS
      }
    },
    {
      className: 'meta',
      begin: '^('+SIMPLE_PROMPT+"|"+DEFAULT_PROMPT+'|'+RVM_PROMPT+')',
      starts: {
        end: '$', contains: RUBY_DEFAULT_CONTAINS
      }
    }
  ];

  return {
    aliases: ['rb', 'gemspec', 'podspec', 'thor', 'irb'],
    keywords: RUBY_KEYWORDS,
    illegal: /\/\*/,
    contains: COMMENT_MODES.concat(IRB_DEFAULT).concat(RUBY_DEFAULT_CONTAINS)
  };
};

/***/ }),
/* 173 */
/***/ (function(module, exports) {

module.exports = function(hljs) {
  return {
    subLanguage: 'xml',
    contains: [
      hljs.COMMENT('<%#', '%>'),
      {
        begin: '<%[%=-]?', end: '[%-]?%>',
        subLanguage: 'ruby',
        excludeBegin: true,
        excludeEnd: true
      }
    ]
  };
};

/***/ }),
/* 174 */
/***/ (function(module, exports) {

module.exports = function(hljs) {
  return {
    keywords: {
      built_in:
        'spawn spawn_link self',
      keyword:
        'after and andalso|10 band begin bnot bor bsl bsr bxor case catch cond div end fun if ' +
        'let not of or orelse|10 query receive rem try when xor'
    },
    contains: [
      {
        className: 'meta', begin: '^[0-9]+> ',
        relevance: 10
      },
      hljs.COMMENT('%', '$'),
      {
        className: 'number',
        begin: '\\b(\\d+#[a-fA-F0-9]+|\\d+(\\.\\d+)?([eE][-+]?\\d+)?)',
        relevance: 0
      },
      hljs.APOS_STRING_MODE,
      hljs.QUOTE_STRING_MODE,
      {
        begin: '\\?(::)?([A-Z]\\w*(::)?)+'
      },
      {
        begin: '->'
      },
      {
        begin: 'ok'
      },
      {
        begin: '!'
      },
      {
        begin: '(\\b[a-z\'][a-zA-Z0-9_\']*:[a-z\'][a-zA-Z0-9_\']*)|(\\b[a-z\'][a-zA-Z0-9_\']*)',
        relevance: 0
      },
      {
        begin: '[A-Z][a-zA-Z0-9_\']*',
        relevance: 0
      }
    ]
  };
};

/***/ }),
/* 175 */
/***/ (function(module, exports) {

module.exports = function(hljs) {
  var BASIC_ATOM_RE = '[a-z\'][a-zA-Z0-9_\']*';
  var FUNCTION_NAME_RE = '(' + BASIC_ATOM_RE + ':' + BASIC_ATOM_RE + '|' + BASIC_ATOM_RE + ')';
  var ERLANG_RESERVED = {
    keyword:
      'after and andalso|10 band begin bnot bor bsl bzr bxor case catch cond div end fun if ' +
      'let not of orelse|10 query receive rem try when xor',
    literal:
      'false true'
  };

  var COMMENT = hljs.COMMENT('%', '$');
  var NUMBER = {
    className: 'number',
    begin: '\\b(\\d+#[a-fA-F0-9]+|\\d+(\\.\\d+)?([eE][-+]?\\d+)?)',
    relevance: 0
  };
  var NAMED_FUN = {
    begin: 'fun\\s+' + BASIC_ATOM_RE + '/\\d+'
  };
  var FUNCTION_CALL = {
    begin: FUNCTION_NAME_RE + '\\(', end: '\\)',
    returnBegin: true,
    relevance: 0,
    contains: [
      {
        begin: FUNCTION_NAME_RE, relevance: 0
      },
      {
        begin: '\\(', end: '\\)', endsWithParent: true,
        returnEnd: true,
        relevance: 0
        // "contains" defined later
      }
    ]
  };
  var TUPLE = {
    begin: '{', end: '}',
    relevance: 0
    // "contains" defined later
  };
  var VAR1 = {
    begin: '\\b_([A-Z][A-Za-z0-9_]*)?',
    relevance: 0
  };
  var VAR2 = {
    begin: '[A-Z][a-zA-Z0-9_]*',
    relevance: 0
  };
  var RECORD_ACCESS = {
    begin: '#' + hljs.UNDERSCORE_IDENT_RE,
    relevance: 0,
    returnBegin: true,
    contains: [
      {
        begin: '#' + hljs.UNDERSCORE_IDENT_RE,
        relevance: 0
      },
      {
        begin: '{', end: '}',
        relevance: 0
        // "contains" defined later
      }
    ]
  };

  var BLOCK_STATEMENTS = {
    beginKeywords: 'fun receive if try case', end: 'end',
    keywords: ERLANG_RESERVED
  };
  BLOCK_STATEMENTS.contains = [
    COMMENT,
    NAMED_FUN,
    hljs.inherit(hljs.APOS_STRING_MODE, {className: ''}),
    BLOCK_STATEMENTS,
    FUNCTION_CALL,
    hljs.QUOTE_STRING_MODE,
    NUMBER,
    TUPLE,
    VAR1, VAR2,
    RECORD_ACCESS
  ];

  var BASIC_MODES = [
    COMMENT,
    NAMED_FUN,
    BLOCK_STATEMENTS,
    FUNCTION_CALL,
    hljs.QUOTE_STRING_MODE,
    NUMBER,
    TUPLE,
    VAR1, VAR2,
    RECORD_ACCESS
  ];
  FUNCTION_CALL.contains[1].contains = BASIC_MODES;
  TUPLE.contains = BASIC_MODES;
  RECORD_ACCESS.contains[1].contains = BASIC_MODES;

  var PARAMS = {
    className: 'params',
    begin: '\\(', end: '\\)',
    contains: BASIC_MODES
  };
  return {
    aliases: ['erl'],
    keywords: ERLANG_RESERVED,
    illegal: '(</|\\*=|\\+=|-=|/\\*|\\*/|\\(\\*|\\*\\))',
    contains: [
      {
        className: 'function',
        begin: '^' + BASIC_ATOM_RE + '\\s*\\(', end: '->',
        returnBegin: true,
        illegal: '\\(|#|//|/\\*|\\\\|:|;',
        contains: [
          PARAMS,
          hljs.inherit(hljs.TITLE_MODE, {begin: BASIC_ATOM_RE})
        ],
        starts: {
          end: ';|\\.',
          keywords: ERLANG_RESERVED,
          contains: BASIC_MODES
        }
      },
      COMMENT,
      {
        begin: '^-', end: '\\.',
        relevance: 0,
        excludeEnd: true,
        returnBegin: true,
        lexemes: '-' + hljs.IDENT_RE,
        keywords:
          '-module -record -undef -export -ifdef -ifndef -author -copyright -doc -vsn ' +
          '-import -include -include_lib -compile -define -else -endif -file -behaviour ' +
          '-behavior -spec',
        contains: [PARAMS]
      },
      NUMBER,
      hljs.QUOTE_STRING_MODE,
      RECORD_ACCESS,
      VAR1, VAR2,
      TUPLE,
      {begin: /\.$/} // relevance booster
    ]
  };
};

/***/ }),
/* 176 */
/***/ (function(module, exports) {

module.exports = function(hljs) {
  return {
    aliases: ['xlsx', 'xls'],
    case_insensitive: true,
    lexemes: /[a-zA-Z][\w\.]*/,
    // built-in functions imported from https://web.archive.org/web/20160513042710/https://support.office.com/en-us/article/Excel-functions-alphabetical-b3944572-255d-4efb-bb96-c6d90033e188
    keywords: {
        built_in: 'ABS ACCRINT ACCRINTM ACOS ACOSH ACOT ACOTH AGGREGATE ADDRESS AMORDEGRC AMORLINC AND ARABIC AREAS ASC ASIN ASINH ATAN ATAN2 ATANH AVEDEV AVERAGE AVERAGEA AVERAGEIF AVERAGEIFS BAHTTEXT BASE BESSELI BESSELJ BESSELK BESSELY BETADIST BETA.DIST BETAINV BETA.INV BIN2DEC BIN2HEX BIN2OCT BINOMDIST BINOM.DIST BINOM.DIST.RANGE BINOM.INV BITAND BITLSHIFT BITOR BITRSHIFT BITXOR CALL CEILING CEILING.MATH CEILING.PRECISE CELL CHAR CHIDIST CHIINV CHITEST CHISQ.DIST CHISQ.DIST.RT CHISQ.INV CHISQ.INV.RT CHISQ.TEST CHOOSE CLEAN CODE COLUMN COLUMNS COMBIN COMBINA COMPLEX CONCAT CONCATENATE CONFIDENCE CONFIDENCE.NORM CONFIDENCE.T CONVERT CORREL COS COSH COT COTH COUNT COUNTA COUNTBLANK COUNTIF COUNTIFS COUPDAYBS COUPDAYS COUPDAYSNC COUPNCD COUPNUM COUPPCD COVAR COVARIANCE.P COVARIANCE.S CRITBINOM CSC CSCH CUBEKPIMEMBER CUBEMEMBER CUBEMEMBERPROPERTY CUBERANKEDMEMBER CUBESET CUBESETCOUNT CUBEVALUE CUMIPMT CUMPRINC DATE DATEDIF DATEVALUE DAVERAGE DAY DAYS DAYS360 DB DBCS DCOUNT DCOUNTA DDB DEC2BIN DEC2HEX DEC2OCT DECIMAL DEGREES DELTA DEVSQ DGET DISC DMAX DMIN DOLLAR DOLLARDE DOLLARFR DPRODUCT DSTDEV DSTDEVP DSUM DURATION DVAR DVARP EDATE EFFECT ENCODEURL EOMONTH ERF ERF.PRECISE ERFC ERFC.PRECISE ERROR.TYPE EUROCONVERT EVEN EXACT EXP EXPON.DIST EXPONDIST FACT FACTDOUBLE FALSE|0 F.DIST FDIST F.DIST.RT FILTERXML FIND FINDB F.INV F.INV.RT FINV FISHER FISHERINV FIXED FLOOR FLOOR.MATH FLOOR.PRECISE FORECAST FORECAST.ETS FORECAST.ETS.CONFINT FORECAST.ETS.SEASONALITY FORECAST.ETS.STAT FORECAST.LINEAR FORMULATEXT FREQUENCY F.TEST FTEST FV FVSCHEDULE GAMMA GAMMA.DIST GAMMADIST GAMMA.INV GAMMAINV GAMMALN GAMMALN.PRECISE GAUSS GCD GEOMEAN GESTEP GETPIVOTDATA GROWTH HARMEAN HEX2BIN HEX2DEC HEX2OCT HLOOKUP HOUR HYPERLINK HYPGEOM.DIST HYPGEOMDIST IF|0 IFERROR IFNA IFS IMABS IMAGINARY IMARGUMENT IMCONJUGATE IMCOS IMCOSH IMCOT IMCSC IMCSCH IMDIV IMEXP IMLN IMLOG10 IMLOG2 IMPOWER IMPRODUCT IMREAL IMSEC IMSECH IMSIN IMSINH IMSQRT IMSUB IMSUM IMTAN INDEX INDIRECT INFO INT INTERCEPT INTRATE IPMT IRR ISBLANK ISERR ISERROR ISEVEN ISFORMULA ISLOGICAL ISNA ISNONTEXT ISNUMBER ISODD ISREF ISTEXT ISO.CEILING ISOWEEKNUM ISPMT JIS KURT LARGE LCM LEFT LEFTB LEN LENB LINEST LN LOG LOG10 LOGEST LOGINV LOGNORM.DIST LOGNORMDIST LOGNORM.INV LOOKUP LOWER MATCH MAX MAXA MAXIFS MDETERM MDURATION MEDIAN MID MIDBs MIN MINIFS MINA MINUTE MINVERSE MIRR MMULT MOD MODE MODE.MULT MODE.SNGL MONTH MROUND MULTINOMIAL MUNIT N NA NEGBINOM.DIST NEGBINOMDIST NETWORKDAYS NETWORKDAYS.INTL NOMINAL NORM.DIST NORMDIST NORMINV NORM.INV NORM.S.DIST NORMSDIST NORM.S.INV NORMSINV NOT NOW NPER NPV NUMBERVALUE OCT2BIN OCT2DEC OCT2HEX ODD ODDFPRICE ODDFYIELD ODDLPRICE ODDLYIELD OFFSET OR PDURATION PEARSON PERCENTILE.EXC PERCENTILE.INC PERCENTILE PERCENTRANK.EXC PERCENTRANK.INC PERCENTRANK PERMUT PERMUTATIONA PHI PHONETIC PI PMT POISSON.DIST POISSON POWER PPMT PRICE PRICEDISC PRICEMAT PROB PRODUCT PROPER PV QUARTILE QUARTILE.EXC QUARTILE.INC QUOTIENT RADIANS RAND RANDBETWEEN RANK.AVG RANK.EQ RANK RATE RECEIVED REGISTER.ID REPLACE REPLACEB REPT RIGHT RIGHTB ROMAN ROUND ROUNDDOWN ROUNDUP ROW ROWS RRI RSQ RTD SEARCH SEARCHB SEC SECH SECOND SERIESSUM SHEET SHEETS SIGN SIN SINH SKEW SKEW.P SLN SLOPE SMALL SQL.REQUEST SQRT SQRTPI STANDARDIZE STDEV STDEV.P STDEV.S STDEVA STDEVP STDEVPA STEYX SUBSTITUTE SUBTOTAL SUM SUMIF SUMIFS SUMPRODUCT SUMSQ SUMX2MY2 SUMX2PY2 SUMXMY2 SWITCH SYD T TAN TANH TBILLEQ TBILLPRICE TBILLYIELD T.DIST T.DIST.2T T.DIST.RT TDIST TEXT TEXTJOIN TIME TIMEVALUE T.INV T.INV.2T TINV TODAY TRANSPOSE TREND TRIM TRIMMEAN TRUE|0 TRUNC T.TEST TTEST TYPE UNICHAR UNICODE UPPER VALUE VAR VAR.P VAR.S VARA VARP VARPA VDB VLOOKUP WEBSERVICE WEEKDAY WEEKNUM WEIBULL WEIBULL.DIST WORKDAY WORKDAY.INTL XIRR XNPV XOR YEAR YEARFRAC YIELD YIELDDISC YIELDMAT Z.TEST ZTEST'
    },
    contains: [
      {
        /* matches a beginning equal sign found in Excel formula examples */ 
        begin: /^=/,
        end: /[^=]/, returnEnd: true, illegal: /=/, /* only allow single equal sign at front of line */
        relevance: 10
      },
      /* technically, there can be more than 2 letters in column names, but this prevents conflict with some keywords */
      {
        /* matches a reference to a single cell */
        className: 'symbol',
        begin: /\b[A-Z]{1,2}\d+\b/,
        end: /[^\d]/, excludeEnd: true,
        relevance: 0
      },
      {
        /* matches a reference to a range of cells */
        className: 'symbol',
        begin: /[A-Z]{0,2}\d*:[A-Z]{0,2}\d*/,
        relevance: 0
      },
      hljs.BACKSLASH_ESCAPE,
      hljs.QUOTE_STRING_MODE,
      {
        className: 'number',
        begin: hljs.NUMBER_RE + '(%)?',
        relevance: 0
      },
      /* Excel formula comments are done by putting the comment in a function call to N() */
      hljs.COMMENT(/\bN\(/,/\)/,
      {
        excludeBegin: true,
        excludeEnd: true,
        illegal: /\n/
      })
    ]
  };
};

/***/ }),
/* 177 */
/***/ (function(module, exports) {

module.exports = function(hljs) {
  return {
    contains: [
    {
      begin: /[^\u2401\u0001]+/,
      end: /[\u2401\u0001]/,
      excludeEnd: true,
      returnBegin: true,
      returnEnd: false,
      contains: [
      {
        begin: /([^\u2401\u0001=]+)/,
        end: /=([^\u2401\u0001=]+)/,
        returnEnd: true,
        returnBegin: false,
        className: 'attr'
      },
      {
        begin: /=/,
        end: /([\u2401\u0001])/,
        excludeEnd: true,
        excludeBegin: true,
        className: 'string'
      }]
    }],
    case_insensitive: true
  };
};

/***/ }),
/* 178 */
/***/ (function(module, exports) {

module.exports = function (hljs) {

    var CHAR = {
        className: 'string',
        begin: /'(.|\\[xXuU][a-zA-Z0-9]+)'/
    };

    var STRING = {
        className: 'string',
        variants: [
            {
                begin: '"', end: '"'
            }
        ]
    };

    var NAME = {
        className: 'title',
        begin: /[^0-9\n\t "'(),.`{}\[\]:;][^\n\t "'(),.`{}\[\]:;]+|[^0-9\n\t "'(),.`{}\[\]:;=]/
    };

    var METHOD = {
        className: 'function',
        beginKeywords: 'def',
        end: /[:={\[(\n;]/,
        excludeEnd: true,
        contains: [NAME]
    };

    return {
        keywords: {
            literal: 'true false',
            keyword: 'case class def else enum if impl import in lat rel index let match namespace switch type yield with'
        },
        contains: [
            hljs.C_LINE_COMMENT_MODE,
            hljs.C_BLOCK_COMMENT_MODE,
            CHAR,
            STRING,
            METHOD,
            hljs.C_NUMBER_MODE
        ]
    };
};

/***/ }),
/* 179 */
/***/ (function(module, exports) {

module.exports = function(hljs) {
  var PARAMS = {
    className: 'params',
    begin: '\\(', end: '\\)'
  };

  var F_KEYWORDS = {
    literal: '.False. .True.',
    keyword: 'kind do while private call intrinsic where elsewhere ' +
      'type endtype endmodule endselect endinterface end enddo endif if forall endforall only contains default return stop then ' +
      'public subroutine|10 function program .and. .or. .not. .le. .eq. .ge. .gt. .lt. ' +
      'goto save else use module select case ' +
      'access blank direct exist file fmt form formatted iostat name named nextrec number opened rec recl sequential status unformatted unit ' +
      'continue format pause cycle exit ' +
      'c_null_char c_alert c_backspace c_form_feed flush wait decimal round iomsg ' +
      'synchronous nopass non_overridable pass protected volatile abstract extends import ' +
      'non_intrinsic value deferred generic final enumerator class associate bind enum ' +
      'c_int c_short c_long c_long_long c_signed_char c_size_t c_int8_t c_int16_t c_int32_t c_int64_t c_int_least8_t c_int_least16_t ' +
      'c_int_least32_t c_int_least64_t c_int_fast8_t c_int_fast16_t c_int_fast32_t c_int_fast64_t c_intmax_t C_intptr_t c_float c_double ' +
      'c_long_double c_float_complex c_double_complex c_long_double_complex c_bool c_char c_null_ptr c_null_funptr ' +
      'c_new_line c_carriage_return c_horizontal_tab c_vertical_tab iso_c_binding c_loc c_funloc c_associated  c_f_pointer ' +
      'c_ptr c_funptr iso_fortran_env character_storage_size error_unit file_storage_size input_unit iostat_end iostat_eor ' +
      'numeric_storage_size output_unit c_f_procpointer ieee_arithmetic ieee_support_underflow_control ' +
      'ieee_get_underflow_mode ieee_set_underflow_mode newunit contiguous recursive ' +
      'pad position action delim readwrite eor advance nml interface procedure namelist include sequence elemental pure ' +
      'integer real character complex logical dimension allocatable|10 parameter ' +
      'external implicit|10 none double precision assign intent optional pointer ' +
      'target in out common equivalence data',
    built_in: 'alog alog10 amax0 amax1 amin0 amin1 amod cabs ccos cexp clog csin csqrt dabs dacos dasin datan datan2 dcos dcosh ddim dexp dint ' +
      'dlog dlog10 dmax1 dmin1 dmod dnint dsign dsin dsinh dsqrt dtan dtanh float iabs idim idint idnint ifix isign max0 max1 min0 min1 sngl ' +
      'algama cdabs cdcos cdexp cdlog cdsin cdsqrt cqabs cqcos cqexp cqlog cqsin cqsqrt dcmplx dconjg derf derfc dfloat dgamma dimag dlgama ' +
      'iqint qabs qacos qasin qatan qatan2 qcmplx qconjg qcos qcosh qdim qerf qerfc qexp qgamma qimag qlgama qlog qlog10 qmax1 qmin1 qmod ' +
      'qnint qsign qsin qsinh qsqrt qtan qtanh abs acos aimag aint anint asin atan atan2 char cmplx conjg cos cosh exp ichar index int log ' +
      'log10 max min nint sign sin sinh sqrt tan tanh print write dim lge lgt lle llt mod nullify allocate deallocate ' +
      'adjustl adjustr all allocated any associated bit_size btest ceiling count cshift date_and_time digits dot_product ' +
      'eoshift epsilon exponent floor fraction huge iand ibclr ibits ibset ieor ior ishft ishftc lbound len_trim matmul ' +
      'maxexponent maxloc maxval merge minexponent minloc minval modulo mvbits nearest pack present product ' +
      'radix random_number random_seed range repeat reshape rrspacing scale scan selected_int_kind selected_real_kind ' +
      'set_exponent shape size spacing spread sum system_clock tiny transpose trim ubound unpack verify achar iachar transfer ' +
      'dble entry dprod cpu_time command_argument_count get_command get_command_argument get_environment_variable is_iostat_end ' +
      'ieee_arithmetic ieee_support_underflow_control ieee_get_underflow_mode ieee_set_underflow_mode ' +
      'is_iostat_eor move_alloc new_line selected_char_kind same_type_as extends_type_of'  +
      'acosh asinh atanh bessel_j0 bessel_j1 bessel_jn bessel_y0 bessel_y1 bessel_yn erf erfc erfc_scaled gamma log_gamma hypot norm2 ' +
      'atomic_define atomic_ref execute_command_line leadz trailz storage_size merge_bits ' +
      'bge bgt ble blt dshiftl dshiftr findloc iall iany iparity image_index lcobound ucobound maskl maskr ' +
      'num_images parity popcnt poppar shifta shiftl shiftr this_image'
  };
  return {
    case_insensitive: true,
    aliases: ['f90', 'f95'],
    keywords: F_KEYWORDS,
    illegal: /\/\*/,
    contains: [
      hljs.inherit(hljs.APOS_STRING_MODE, {className: 'string', relevance: 0}),
      hljs.inherit(hljs.QUOTE_STRING_MODE, {className: 'string', relevance: 0}),
      {
        className: 'function',
        beginKeywords: 'subroutine function program',
        illegal: '[${=\\n]',
        contains: [hljs.UNDERSCORE_TITLE_MODE, PARAMS]
      },
      hljs.COMMENT('!', '$', {relevance: 0}),
      {
        className: 'number',
        begin: '(?=\\b|\\+|\\-|\\.)(?=\\.\\d|\\d)(?:\\d+)?(?:\\.?\\d*)(?:[de][+-]?\\d+)?\\b\\.?',
        relevance: 0
      }
    ]
  };
};

/***/ }),
/* 180 */
/***/ (function(module, exports) {

module.exports = function(hljs) {
  var TYPEPARAM = {
    begin: '<', end: '>',
    contains: [
      hljs.inherit(hljs.TITLE_MODE, {begin: /'[a-zA-Z0-9_]+/})
    ]
  };

  return {
    aliases: ['fs'],
    keywords:
      'abstract and as assert base begin class default delegate do done ' +
      'downcast downto elif else end exception extern false finally for ' +
      'fun function global if in inherit inline interface internal lazy let ' +
      'match member module mutable namespace new null of open or ' +
      'override private public rec return sig static struct then to ' +
      'true try type upcast use val void when while with yield',
    illegal: /\/\*/,
    contains: [
      {
        // monad builder keywords (matches before non-bang kws)
        className: 'keyword',
        begin: /\b(yield|return|let|do)!/
      },
      {
        className: 'string',
        begin: '@"', end: '"',
        contains: [{begin: '""'}]
      },
      {
        className: 'string',
        begin: '"""', end: '"""'
      },
      hljs.COMMENT('\\(\\*', '\\*\\)'),
      {
        className: 'class',
        beginKeywords: 'type', end: '\\(|=|$', excludeEnd: true,
        contains: [
          hljs.UNDERSCORE_TITLE_MODE,
          TYPEPARAM
        ]
      },
      {
        className: 'meta',
        begin: '\\[<', end: '>\\]',
        relevance: 10
      },
      {
        className: 'symbol',
        begin: '\\B(\'[A-Za-z])\\b',
        contains: [hljs.BACKSLASH_ESCAPE]
      },
      hljs.C_LINE_COMMENT_MODE,
      hljs.inherit(hljs.QUOTE_STRING_MODE, {illegal: null}),
      hljs.C_NUMBER_MODE
    ]
  };
};

/***/ }),
/* 181 */
/***/ (function(module, exports) {

module.exports = function (hljs) {
  var KEYWORDS = {
    'keyword':
      'abort acronym acronyms alias all and assign binary card diag display ' +
      'else eq file files for free ge gt if integer le loop lt maximizing ' +
      'minimizing model models ne negative no not option options or ord ' +
      'positive prod put putpage puttl repeat sameas semicont semiint smax ' +
      'smin solve sos1 sos2 sum system table then until using while xor yes',
    'literal': 'eps inf na',
    'built-in':
      'abs arccos arcsin arctan arctan2 Beta betaReg binomial ceil centropy ' +
      'cos cosh cvPower div div0 eDist entropy errorf execSeed exp fact ' +
      'floor frac gamma gammaReg log logBeta logGamma log10 log2 mapVal max ' +
      'min mod ncpCM ncpF ncpVUpow ncpVUsin normal pi poly power ' +
      'randBinomial randLinear randTriangle round rPower sigmoid sign ' +
      'signPower sin sinh slexp sllog10 slrec sqexp sqlog10 sqr sqrec sqrt ' +
      'tan tanh trunc uniform uniformInt vcPower bool_and bool_eqv bool_imp ' +
      'bool_not bool_or bool_xor ifThen rel_eq rel_ge rel_gt rel_le rel_lt ' +
      'rel_ne gday gdow ghour gleap gmillisec gminute gmonth gsecond gyear ' +
      'jdate jnow jstart jtime errorLevel execError gamsRelease gamsVersion ' +
      'handleCollect handleDelete handleStatus handleSubmit heapFree ' +
      'heapLimit heapSize jobHandle jobKill jobStatus jobTerminate ' +
      'licenseLevel licenseStatus maxExecError sleep timeClose timeComp ' +
      'timeElapsed timeExec timeStart'
  };
  var PARAMS = {
    className: 'params',
    begin: /\(/, end: /\)/,
    excludeBegin: true,
    excludeEnd: true,
  };
  var SYMBOLS = {
    className: 'symbol',
    variants: [
      {begin: /\=[lgenxc]=/},
      {begin: /\$/},
    ]
  };
  var QSTR = { // One-line quoted comment string
    className: 'comment',
    variants: [
      {begin: '\'', end: '\''},
      {begin: '"', end: '"'},
    ],
    illegal: '\\n',
    contains: [hljs.BACKSLASH_ESCAPE]
  };
  var ASSIGNMENT = {
    begin: '/',
    end: '/',
    keywords: KEYWORDS,
    contains: [
      QSTR,
      hljs.C_LINE_COMMENT_MODE,
      hljs.C_BLOCK_COMMENT_MODE,
      hljs.QUOTE_STRING_MODE,
      hljs.APOS_STRING_MODE,
      hljs.C_NUMBER_MODE,
    ],
  };
  var DESCTEXT = { // Parameter/set/variable description text
    begin: /[a-z][a-z0-9_]*(\([a-z0-9_, ]*\))?[ \t]+/,
    excludeBegin: true,
    end: '$',
    endsWithParent: true,
    contains: [
      QSTR,
      ASSIGNMENT,
      {
        className: 'comment',
        begin: /([ ]*[a-z0-9&#*=?@>\\<:\-,()$\[\]_.{}!+%^]+)+/,
        relevance: 0
      },
    ],
  };

  return {
    aliases: ['gms'],
    case_insensitive: true,
    keywords: KEYWORDS,
    contains: [
      hljs.COMMENT(/^\$ontext/, /^\$offtext/),
      {
        className: 'meta',
        begin: '^\\$[a-z0-9]+',
        end: '$',
        returnBegin: true,
        contains: [
          {
            className: 'meta-keyword',
            begin: '^\\$[a-z0-9]+',
          }
        ]
      },
      hljs.COMMENT('^\\*', '$'),
      hljs.C_LINE_COMMENT_MODE,
      hljs.C_BLOCK_COMMENT_MODE,
      hljs.QUOTE_STRING_MODE,
      hljs.APOS_STRING_MODE,
      // Declarations
      {
        beginKeywords:
          'set sets parameter parameters variable variables ' +
          'scalar scalars equation equations',
        end: ';',
        contains: [
          hljs.COMMENT('^\\*', '$'),
          hljs.C_LINE_COMMENT_MODE,
          hljs.C_BLOCK_COMMENT_MODE,
          hljs.QUOTE_STRING_MODE,
          hljs.APOS_STRING_MODE,
          ASSIGNMENT,
          DESCTEXT,
        ]
      },
      { // table environment
        beginKeywords: 'table',
        end: ';',
        returnBegin: true,
        contains: [
          { // table header row
            beginKeywords: 'table',
            end: '$',
            contains: [DESCTEXT],
          },
          hljs.COMMENT('^\\*', '$'),
          hljs.C_LINE_COMMENT_MODE,
          hljs.C_BLOCK_COMMENT_MODE,
          hljs.QUOTE_STRING_MODE,
          hljs.APOS_STRING_MODE,
          hljs.C_NUMBER_MODE,
          // Table does not contain DESCTEXT or ASSIGNMENT
        ]
      },
      // Function definitions
      {
        className: 'function',
        begin: /^[a-z][a-z0-9_,\-+' ()$]+\.{2}/,
        returnBegin: true,
        contains: [
              { // Function title
                className: 'title',
                begin: /^[a-z0-9_]+/,
              },
              PARAMS,
              SYMBOLS,
            ],
      },
      hljs.C_NUMBER_MODE,
      SYMBOLS,
    ]
  };
};

/***/ }),
/* 182 */
/***/ (function(module, exports) {

module.exports = function(hljs) {
  var KEYWORDS = {
    keyword: 'and bool break call callexe checkinterrupt clear clearg closeall cls comlog compile ' +
              'continue create debug declare delete disable dlibrary dllcall do dos ed edit else ' +
              'elseif enable end endfor endif endp endo errorlog errorlogat expr external fn ' +
              'for format goto gosub graph if keyword let lib library line load loadarray loadexe ' +
              'loadf loadk loadm loadp loads loadx local locate loopnextindex lprint lpwidth lshow ' +
              'matrix msym ndpclex new not open or output outwidth plot plotsym pop prcsn print ' +
              'printdos proc push retp return rndcon rndmod rndmult rndseed run save saveall screen ' +
              'scroll setarray show sparse stop string struct system trace trap threadfor ' +
              'threadendfor threadbegin threadjoin threadstat threadend until use while winprint',
    built_in: 'abs acf aconcat aeye amax amean AmericanBinomCall AmericanBinomCall_Greeks AmericanBinomCall_ImpVol ' +
              'AmericanBinomPut AmericanBinomPut_Greeks AmericanBinomPut_ImpVol AmericanBSCall AmericanBSCall_Greeks ' +
              'AmericanBSCall_ImpVol AmericanBSPut AmericanBSPut_Greeks AmericanBSPut_ImpVol amin amult annotationGetDefaults ' +
              'annotationSetBkd annotationSetFont annotationSetLineColor annotationSetLineStyle annotationSetLineThickness ' +
              'annualTradingDays arccos arcsin areshape arrayalloc arrayindex arrayinit arraytomat asciiload asclabel astd ' +
              'astds asum atan atan2 atranspose axmargin balance band bandchol bandcholsol bandltsol bandrv bandsolpd bar ' +
              'base10 begwind besselj bessely beta box boxcox cdfBeta cdfBetaInv cdfBinomial cdfBinomialInv cdfBvn cdfBvn2 ' +
              'cdfBvn2e cdfCauchy cdfCauchyInv cdfChic cdfChii cdfChinc cdfChincInv cdfExp cdfExpInv cdfFc cdfFnc cdfFncInv ' +
              'cdfGam cdfGenPareto cdfHyperGeo cdfLaplace cdfLaplaceInv cdfLogistic cdfLogisticInv cdfmControlCreate cdfMvn ' +
              'cdfMvn2e cdfMvnce cdfMvne cdfMvt2e cdfMvtce cdfMvte cdfN cdfN2 cdfNc cdfNegBinomial cdfNegBinomialInv cdfNi ' +
              'cdfPoisson cdfPoissonInv cdfRayleigh cdfRayleighInv cdfTc cdfTci cdfTnc cdfTvn cdfWeibull cdfWeibullInv cdir ' +
              'ceil ChangeDir chdir chiBarSquare chol choldn cholsol cholup chrs close code cols colsf combinate combinated ' +
              'complex con cond conj cons ConScore contour conv convertsatostr convertstrtosa corrm corrms corrvc corrx corrxs ' +
              'cos cosh counts countwts crossprd crout croutp csrcol csrlin csvReadM csvReadSA cumprodc cumsumc curve cvtos ' +
              'datacreate datacreatecomplex datalist dataload dataloop dataopen datasave date datestr datestring datestrymd ' +
              'dayinyr dayofweek dbAddDatabase dbClose dbCommit dbCreateQuery dbExecQuery dbGetConnectOptions dbGetDatabaseName ' +
              'dbGetDriverName dbGetDrivers dbGetHostName dbGetLastErrorNum dbGetLastErrorText dbGetNumericalPrecPolicy ' +
              'dbGetPassword dbGetPort dbGetTableHeaders dbGetTables dbGetUserName dbHasFeature dbIsDriverAvailable dbIsOpen ' +
              'dbIsOpenError dbOpen dbQueryBindValue dbQueryClear dbQueryCols dbQueryExecPrepared dbQueryFetchAllM dbQueryFetchAllSA ' +
              'dbQueryFetchOneM dbQueryFetchOneSA dbQueryFinish dbQueryGetBoundValue dbQueryGetBoundValues dbQueryGetField ' +
              'dbQueryGetLastErrorNum dbQueryGetLastErrorText dbQueryGetLastInsertID dbQueryGetLastQuery dbQueryGetPosition ' +
              'dbQueryIsActive dbQueryIsForwardOnly dbQueryIsNull dbQueryIsSelect dbQueryIsValid dbQueryPrepare dbQueryRows ' +
              'dbQuerySeek dbQuerySeekFirst dbQuerySeekLast dbQuerySeekNext dbQuerySeekPrevious dbQuerySetForwardOnly ' +
              'dbRemoveDatabase dbRollback dbSetConnectOptions dbSetDatabaseName dbSetHostName dbSetNumericalPrecPolicy ' +
              'dbSetPort dbSetUserName dbTransaction DeleteFile delif delrows denseToSp denseToSpRE denToZero design det detl ' +
              'dfft dffti diag diagrv digamma doswin DOSWinCloseall DOSWinOpen dotfeq dotfeqmt dotfge dotfgemt dotfgt dotfgtmt ' +
              'dotfle dotflemt dotflt dotfltmt dotfne dotfnemt draw drop dsCreate dstat dstatmt dstatmtControlCreate dtdate dtday ' +
              'dttime dttodtv dttostr dttoutc dtvnormal dtvtodt dtvtoutc dummy dummybr dummydn eig eigh eighv eigv elapsedTradingDays ' +
              'endwind envget eof eqSolve eqSolvemt eqSolvemtControlCreate eqSolvemtOutCreate eqSolveset erf erfc erfccplx erfcplx error ' +
              'etdays ethsec etstr EuropeanBinomCall EuropeanBinomCall_Greeks EuropeanBinomCall_ImpVol EuropeanBinomPut ' +
              'EuropeanBinomPut_Greeks EuropeanBinomPut_ImpVol EuropeanBSCall EuropeanBSCall_Greeks EuropeanBSCall_ImpVol ' +
              'EuropeanBSPut EuropeanBSPut_Greeks EuropeanBSPut_ImpVol exctsmpl exec execbg exp extern eye fcheckerr fclearerr feq ' +
              'feqmt fflush fft ffti fftm fftmi fftn fge fgemt fgets fgetsa fgetsat fgetst fgt fgtmt fileinfo filesa fle flemt ' +
              'floor flt fltmt fmod fne fnemt fonts fopen formatcv formatnv fputs fputst fseek fstrerror ftell ftocv ftos ftostrC ' +
              'gamma gammacplx gammaii gausset gdaAppend gdaCreate gdaDStat gdaDStatMat gdaGetIndex gdaGetName gdaGetNames gdaGetOrders ' +
              'gdaGetType gdaGetTypes gdaGetVarInfo gdaIsCplx gdaLoad gdaPack gdaRead gdaReadByIndex gdaReadSome gdaReadSparse ' +
              'gdaReadStruct gdaReportVarInfo gdaSave gdaUpdate gdaUpdateAndPack gdaVars gdaWrite gdaWrite32 gdaWriteSome getarray ' +
              'getdims getf getGAUSShome getmatrix getmatrix4D getname getnamef getNextTradingDay getNextWeekDay getnr getorders ' +
              'getpath getPreviousTradingDay getPreviousWeekDay getRow getscalar3D getscalar4D getTrRow getwind glm gradcplx gradMT ' +
              'gradMTm gradMTT gradMTTm gradp graphprt graphset hasimag header headermt hess hessMT hessMTg hessMTgw hessMTm ' +
              'hessMTmw hessMTT hessMTTg hessMTTgw hessMTTm hessMTw hessp hist histf histp hsec imag indcv indexcat indices indices2 ' +
              'indicesf indicesfn indnv indsav integrate1d integrateControlCreate intgrat2 intgrat3 inthp1 inthp2 inthp3 inthp4 ' +
              'inthpControlCreate intquad1 intquad2 intquad3 intrleav intrleavsa intrsect intsimp inv invpd invswp iscplx iscplxf ' +
              'isden isinfnanmiss ismiss key keyav keyw lag lag1 lagn lapEighb lapEighi lapEighvb lapEighvi lapgEig lapgEigh lapgEighv ' +
              'lapgEigv lapgSchur lapgSvdcst lapgSvds lapgSvdst lapSvdcusv lapSvds lapSvdusv ldlp ldlsol linSolve listwise ln lncdfbvn ' +
              'lncdfbvn2 lncdfmvn lncdfn lncdfn2 lncdfnc lnfact lngammacplx lnpdfmvn lnpdfmvt lnpdfn lnpdft loadd loadstruct loadwind ' +
              'loess loessmt loessmtControlCreate log loglog logx logy lower lowmat lowmat1 ltrisol lu lusol machEpsilon make makevars ' +
              'makewind margin matalloc matinit mattoarray maxbytes maxc maxindc maxv maxvec mbesselei mbesselei0 mbesselei1 mbesseli ' +
              'mbesseli0 mbesseli1 meanc median mergeby mergevar minc minindc minv miss missex missrv moment momentd movingave ' +
              'movingaveExpwgt movingaveWgt nextindex nextn nextnevn nextwind ntos null null1 numCombinations ols olsmt olsmtControlCreate ' +
              'olsqr olsqr2 olsqrmt ones optn optnevn orth outtyp pacf packedToSp packr parse pause pdfCauchy pdfChi pdfExp pdfGenPareto ' +
              'pdfHyperGeo pdfLaplace pdfLogistic pdfn pdfPoisson pdfRayleigh pdfWeibull pi pinv pinvmt plotAddArrow plotAddBar plotAddBox ' +
              'plotAddHist plotAddHistF plotAddHistP plotAddPolar plotAddScatter plotAddShape plotAddTextbox plotAddTS plotAddXY plotArea ' +
              'plotBar plotBox plotClearLayout plotContour plotCustomLayout plotGetDefaults plotHist plotHistF plotHistP plotLayout ' +
              'plotLogLog plotLogX plotLogY plotOpenWindow plotPolar plotSave plotScatter plotSetAxesPen plotSetBar plotSetBarFill ' +
              'plotSetBarStacked plotSetBkdColor plotSetFill plotSetGrid plotSetLegend plotSetLineColor plotSetLineStyle plotSetLineSymbol ' +
              'plotSetLineThickness plotSetNewWindow plotSetTitle plotSetWhichYAxis plotSetXAxisShow plotSetXLabel plotSetXRange ' +
              'plotSetXTicInterval plotSetXTicLabel plotSetYAxisShow plotSetYLabel plotSetYRange plotSetZAxisShow plotSetZLabel ' +
              'plotSurface plotTS plotXY polar polychar polyeval polygamma polyint polymake polymat polymroot polymult polyroot ' +
              'pqgwin previousindex princomp printfm printfmt prodc psi putarray putf putvals pvCreate pvGetIndex pvGetParNames ' +
              'pvGetParVector pvLength pvList pvPack pvPacki pvPackm pvPackmi pvPacks pvPacksi pvPacksm pvPacksmi pvPutParVector ' +
              'pvTest pvUnpack QNewton QNewtonmt QNewtonmtControlCreate QNewtonmtOutCreate QNewtonSet QProg QProgmt QProgmtInCreate ' +
              'qqr qqre qqrep qr qre qrep qrsol qrtsol qtyr qtyre qtyrep quantile quantiled qyr qyre qyrep qz rank rankindx readr ' +
              'real reclassify reclassifyCuts recode recserar recsercp recserrc rerun rescale reshape rets rev rfft rffti rfftip rfftn ' +
              'rfftnp rfftp rndBernoulli rndBeta rndBinomial rndCauchy rndChiSquare rndCon rndCreateState rndExp rndGamma rndGeo rndGumbel ' +
              'rndHyperGeo rndi rndKMbeta rndKMgam rndKMi rndKMn rndKMnb rndKMp rndKMu rndKMvm rndLaplace rndLCbeta rndLCgam rndLCi rndLCn ' +
              'rndLCnb rndLCp rndLCu rndLCvm rndLogNorm rndMTu rndMVn rndMVt rndn rndnb rndNegBinomial rndp rndPoisson rndRayleigh ' +
              'rndStateSkip rndu rndvm rndWeibull rndWishart rotater round rows rowsf rref sampleData satostrC saved saveStruct savewind ' +
              'scale scale3d scalerr scalinfnanmiss scalmiss schtoc schur searchsourcepath seekr select selif seqa seqm setdif setdifsa ' +
              'setvars setvwrmode setwind shell shiftr sin singleindex sinh sleep solpd sortc sortcc sortd sorthc sorthcc sortind ' +
              'sortindc sortmc sortr sortrc spBiconjGradSol spChol spConjGradSol spCreate spDenseSubmat spDiagRvMat spEigv spEye spLDL ' +
              'spline spLU spNumNZE spOnes spreadSheetReadM spreadSheetReadSA spreadSheetWrite spScale spSubmat spToDense spTrTDense ' +
              'spTScalar spZeros sqpSolve sqpSolveMT sqpSolveMTControlCreate sqpSolveMTlagrangeCreate sqpSolveMToutCreate sqpSolveSet ' +
              'sqrt statements stdc stdsc stocv stof strcombine strindx strlen strput strrindx strsect strsplit strsplitPad strtodt ' +
              'strtof strtofcplx strtriml strtrimr strtrunc strtruncl strtruncpad strtruncr submat subscat substute subvec sumc sumr ' +
              'surface svd svd1 svd2 svdcusv svds svdusv sysstate tab tan tanh tempname threadBegin threadEnd threadEndFor threadFor ' +
              'threadJoin threadStat time timedt timestr timeutc title tkf2eps tkf2ps tocart todaydt toeplitz token topolar trapchk ' +
              'trigamma trimr trunc type typecv typef union unionsa uniqindx uniqindxsa unique uniquesa upmat upmat1 upper utctodt ' +
              'utctodtv utrisol vals varCovMS varCovXS varget vargetl varmall varmares varput varputl vartypef vcm vcms vcx vcxs ' +
              'vec vech vecr vector vget view viewxyz vlist vnamecv volume vput vread vtypecv wait waitc walkindex where window ' +
              'writer xlabel xlsGetSheetCount xlsGetSheetSize xlsGetSheetTypes xlsMakeRange xlsReadM xlsReadSA xlsWrite xlsWriteM ' +
              'xlsWriteSA xpnd xtics xy xyz ylabel ytics zeros zeta zlabel ztics cdfEmpirical dot h5create h5open h5read h5readAttribute ' +
              'h5write h5writeAttribute ldl plotAddErrorBar plotAddSurface plotCDFEmpirical plotSetColormap plotSetContourLabels ' +
              'plotSetLegendFont plotSetTextInterpreter plotSetXTicCount plotSetYTicCount plotSetZLevels powerm strjoin strtrim sylvester',
    literal: 'DB_AFTER_LAST_ROW DB_ALL_TABLES DB_BATCH_OPERATIONS DB_BEFORE_FIRST_ROW DB_BLOB DB_EVENT_NOTIFICATIONS ' +
             'DB_FINISH_QUERY DB_HIGH_PRECISION DB_LAST_INSERT_ID DB_LOW_PRECISION_DOUBLE DB_LOW_PRECISION_INT32 ' +
             'DB_LOW_PRECISION_INT64 DB_LOW_PRECISION_NUMBERS DB_MULTIPLE_RESULT_SETS DB_NAMED_PLACEHOLDERS ' +
             'DB_POSITIONAL_PLACEHOLDERS DB_PREPARED_QUERIES DB_QUERY_SIZE DB_SIMPLE_LOCKING DB_SYSTEM_TABLES DB_TABLES ' +
             'DB_TRANSACTIONS DB_UNICODE DB_VIEWS'
  };

  var PREPROCESSOR =
  {
    className: 'meta',
    begin: '#', end: '$',
    keywords: {'meta-keyword': 'define definecs|10 undef ifdef ifndef iflight ifdllcall ifmac ifos2win ifunix else endif lineson linesoff srcfile srcline'},
    contains: [
      {
        begin: /\\\n/, relevance: 0
      },
      {
        beginKeywords: 'include', end: '$',
        keywords: {'meta-keyword': 'include'},
        contains: [
          {
            className: 'meta-string',
            begin: '"', end: '"',
            illegal: '\\n'
          }
        ]
      },
      hljs.C_LINE_COMMENT_MODE,
      hljs.C_BLOCK_COMMENT_MODE
    ]
  };

  var FUNCTION_TITLE = hljs.UNDERSCORE_IDENT_RE + '\\s*\\(?';
  var PARSE_PARAMS = [
    {
      className: 'params',
      begin: /\(/, end: /\)/,
      keywords: KEYWORDS,
      relevance: 0,
      contains: [
        hljs.C_NUMBER_MODE,
        hljs.C_LINE_COMMENT_MODE,
        hljs.C_BLOCK_COMMENT_MODE
      ]
    }
  ];

  return {
    aliases: ['gss'],
    case_insensitive: true, // language is case-insensitive
    keywords: KEYWORDS,
    illegal: '(\\{[%#]|[%#]\\})',
    contains: [
      hljs.C_NUMBER_MODE,
      hljs.C_LINE_COMMENT_MODE,
      hljs.C_BLOCK_COMMENT_MODE,
      hljs.COMMENT('@', '@'),
      PREPROCESSOR,
      {
        className: 'string',
        begin: '"', end: '"',
        contains: [hljs.BACKSLASH_ESCAPE]
      },
      {
        className: 'function',
        beginKeywords: 'proc keyword',
        end: ';',
        excludeEnd: true,
        keywords: KEYWORDS,
        contains: [
          {
            begin: FUNCTION_TITLE, returnBegin: true,
            contains: [hljs.UNDERSCORE_TITLE_MODE],
            relevance: 0
          },
          hljs.C_NUMBER_MODE,
          hljs.C_LINE_COMMENT_MODE,
          hljs.C_BLOCK_COMMENT_MODE,
          PREPROCESSOR
        ].concat(PARSE_PARAMS)
      },
      {
        className: 'function',
        beginKeywords: 'fn',
        end: ';',
        excludeEnd: true,
        keywords: KEYWORDS,
        contains: [
          {
            begin: FUNCTION_TITLE + hljs.IDENT_RE + '\\)?\\s*\\=\\s*', returnBegin: true,
            contains: [hljs.UNDERSCORE_TITLE_MODE],
            relevance: 0
          },
          hljs.C_NUMBER_MODE,
          hljs.C_LINE_COMMENT_MODE,
          hljs.C_BLOCK_COMMENT_MODE
        ].concat(PARSE_PARAMS)
      },
      {
        className: 'function',
        begin: '\\bexternal (proc|keyword|fn)\\s+',
        end: ';',
        excludeEnd: true,
        keywords: KEYWORDS,
        contains: [
          {
            begin: FUNCTION_TITLE, returnBegin: true,
            contains: [hljs.UNDERSCORE_TITLE_MODE],
            relevance: 0
          },
          hljs.C_LINE_COMMENT_MODE,
          hljs.C_BLOCK_COMMENT_MODE
        ]
      },
      {
        className: 'function',
        begin: '\\bexternal (matrix|string|array|sparse matrix|struct ' + hljs.IDENT_RE + ')\\s+',
        end: ';',
        excludeEnd: true,
        keywords: KEYWORDS,
        contains: [
          hljs.C_LINE_COMMENT_MODE,
          hljs.C_BLOCK_COMMENT_MODE
        ]
      }
    ]
  };
};

/***/ }),
/* 183 */
/***/ (function(module, exports) {

module.exports = function(hljs) {
    var GCODE_IDENT_RE = '[A-Z_][A-Z0-9_.]*';
    var GCODE_CLOSE_RE = '\\%';
    var GCODE_KEYWORDS =
      'IF DO WHILE ENDWHILE CALL ENDIF SUB ENDSUB GOTO REPEAT ENDREPEAT ' +
      'EQ LT GT NE GE LE OR XOR';
    var GCODE_START = {
        className: 'meta',
        begin: '([O])([0-9]+)'
    };
    var GCODE_CODE = [
        hljs.C_LINE_COMMENT_MODE,
        hljs.C_BLOCK_COMMENT_MODE,
        hljs.COMMENT(/\(/, /\)/),
        hljs.inherit(hljs.C_NUMBER_MODE, {begin: '([-+]?([0-9]*\\.?[0-9]+\\.?))|' + hljs.C_NUMBER_RE}),
        hljs.inherit(hljs.APOS_STRING_MODE, {illegal: null}),
        hljs.inherit(hljs.QUOTE_STRING_MODE, {illegal: null}),
        {
            className: 'name',
            begin: '([G])([0-9]+\\.?[0-9]?)'
        },
        {
            className: 'name',
            begin: '([M])([0-9]+\\.?[0-9]?)'
        },
        {
            className: 'attr',
            begin: '(VC|VS|#)',
            end: '(\\d+)'
        },
        {
            className: 'attr',
            begin: '(VZOFX|VZOFY|VZOFZ)'
        },
        {
            className: 'built_in',
            begin: '(ATAN|ABS|ACOS|ASIN|SIN|COS|EXP|FIX|FUP|ROUND|LN|TAN)(\\[)',
            end: '([-+]?([0-9]*\\.?[0-9]+\\.?))(\\])'
        },
        {
            className: 'symbol',
            variants: [
                {
                    begin: 'N', end: '\\d+',
                    illegal: '\\W'
                }
            ]
        }
    ];

    return {
        aliases: ['nc'],
        // Some implementations (CNC controls) of G-code are interoperable with uppercase and lowercase letters seamlessly.
        // However, most prefer all uppercase and uppercase is customary.
        case_insensitive: true,
        lexemes: GCODE_IDENT_RE,
        keywords: GCODE_KEYWORDS,
        contains: [
            {
                className: 'meta',
                begin: GCODE_CLOSE_RE
            },
            GCODE_START
        ].concat(GCODE_CODE)
    };
};

/***/ }),
/* 184 */
/***/ (function(module, exports) {

module.exports = function (hljs) {
  return {
    aliases: ['feature'],
    keywords: 'Feature Background Ability Business\ Need Scenario Scenarios Scenario\ Outline Scenario\ Template Examples Given And Then But When',
    contains: [
      {
        className: 'symbol',
        begin: '\\*',
        relevance: 0
      },
      {
        className: 'meta',
        begin: '@[^@\\s]+'
      },
      {
        begin: '\\|', end: '\\|\\w*$',
        contains: [
          {
            className: 'string',
            begin: '[^|]+'
          }
        ]
      },
      {
        className: 'variable',
        begin: '<', end: '>'
      },
      hljs.HASH_COMMENT_MODE,
      {
        className: 'string',
        begin: '"""', end: '"""'
      },
      hljs.QUOTE_STRING_MODE
    ]
  };
};

/***/ }),
/* 185 */
/***/ (function(module, exports) {

module.exports = function(hljs) {
  return {
    keywords: {
      keyword:
        // Statements
        'break continue discard do else for if return while switch case default ' +
        // Qualifiers
        'attribute binding buffer ccw centroid centroid varying coherent column_major const cw ' +
        'depth_any depth_greater depth_less depth_unchanged early_fragment_tests equal_spacing ' +
        'flat fractional_even_spacing fractional_odd_spacing highp in index inout invariant ' +
        'invocations isolines layout line_strip lines lines_adjacency local_size_x local_size_y ' +
        'local_size_z location lowp max_vertices mediump noperspective offset origin_upper_left ' +
        'out packed patch pixel_center_integer point_mode points precise precision quads r11f_g11f_b10f '+
        'r16 r16_snorm r16f r16i r16ui r32f r32i r32ui r8 r8_snorm r8i r8ui readonly restrict ' +
        'rg16 rg16_snorm rg16f rg16i rg16ui rg32f rg32i rg32ui rg8 rg8_snorm rg8i rg8ui rgb10_a2 ' +
        'rgb10_a2ui rgba16 rgba16_snorm rgba16f rgba16i rgba16ui rgba32f rgba32i rgba32ui rgba8 ' +
        'rgba8_snorm rgba8i rgba8ui row_major sample shared smooth std140 std430 stream triangle_strip ' +
        'triangles triangles_adjacency uniform varying vertices volatile writeonly',
      type:
        'atomic_uint bool bvec2 bvec3 bvec4 dmat2 dmat2x2 dmat2x3 dmat2x4 dmat3 dmat3x2 dmat3x3 ' +
        'dmat3x4 dmat4 dmat4x2 dmat4x3 dmat4x4 double dvec2 dvec3 dvec4 float iimage1D iimage1DArray ' +
        'iimage2D iimage2DArray iimage2DMS iimage2DMSArray iimage2DRect iimage3D iimageBuffer' +
        'iimageCube iimageCubeArray image1D image1DArray image2D image2DArray image2DMS image2DMSArray ' +
        'image2DRect image3D imageBuffer imageCube imageCubeArray int isampler1D isampler1DArray ' +
        'isampler2D isampler2DArray isampler2DMS isampler2DMSArray isampler2DRect isampler3D ' +
        'isamplerBuffer isamplerCube isamplerCubeArray ivec2 ivec3 ivec4 mat2 mat2x2 mat2x3 ' +
        'mat2x4 mat3 mat3x2 mat3x3 mat3x4 mat4 mat4x2 mat4x3 mat4x4 sampler1D sampler1DArray ' +
        'sampler1DArrayShadow sampler1DShadow sampler2D sampler2DArray sampler2DArrayShadow ' +
        'sampler2DMS sampler2DMSArray sampler2DRect sampler2DRectShadow sampler2DShadow sampler3D ' +
        'samplerBuffer samplerCube samplerCubeArray samplerCubeArrayShadow samplerCubeShadow ' +
        'image1D uimage1DArray uimage2D uimage2DArray uimage2DMS uimage2DMSArray uimage2DRect ' +
        'uimage3D uimageBuffer uimageCube uimageCubeArray uint usampler1D usampler1DArray ' +
        'usampler2D usampler2DArray usampler2DMS usampler2DMSArray usampler2DRect usampler3D ' +
        'samplerBuffer usamplerCube usamplerCubeArray uvec2 uvec3 uvec4 vec2 vec3 vec4 void',
      built_in:
        // Constants
        'gl_MaxAtomicCounterBindings gl_MaxAtomicCounterBufferSize gl_MaxClipDistances gl_MaxClipPlanes ' +
        'gl_MaxCombinedAtomicCounterBuffers gl_MaxCombinedAtomicCounters gl_MaxCombinedImageUniforms ' +
        'gl_MaxCombinedImageUnitsAndFragmentOutputs gl_MaxCombinedTextureImageUnits gl_MaxComputeAtomicCounterBuffers ' +
        'gl_MaxComputeAtomicCounters gl_MaxComputeImageUniforms gl_MaxComputeTextureImageUnits ' +
        'gl_MaxComputeUniformComponents gl_MaxComputeWorkGroupCount gl_MaxComputeWorkGroupSize ' +
        'gl_MaxDrawBuffers gl_MaxFragmentAtomicCounterBuffers gl_MaxFragmentAtomicCounters ' +
        'gl_MaxFragmentImageUniforms gl_MaxFragmentInputComponents gl_MaxFragmentInputVectors ' +
        'gl_MaxFragmentUniformComponents gl_MaxFragmentUniformVectors gl_MaxGeometryAtomicCounterBuffers ' +
        'gl_MaxGeometryAtomicCounters gl_MaxGeometryImageUniforms gl_MaxGeometryInputComponents ' +
        'gl_MaxGeometryOutputComponents gl_MaxGeometryOutputVertices gl_MaxGeometryTextureImageUnits ' +
        'gl_MaxGeometryTotalOutputComponents gl_MaxGeometryUniformComponents gl_MaxGeometryVaryingComponents ' +
        'gl_MaxImageSamples gl_MaxImageUnits gl_MaxLights gl_MaxPatchVertices gl_MaxProgramTexelOffset ' +
        'gl_MaxTessControlAtomicCounterBuffers gl_MaxTessControlAtomicCounters gl_MaxTessControlImageUniforms ' +
        'gl_MaxTessControlInputComponents gl_MaxTessControlOutputComponents gl_MaxTessControlTextureImageUnits ' +
        'gl_MaxTessControlTotalOutputComponents gl_MaxTessControlUniformComponents ' +
        'gl_MaxTessEvaluationAtomicCounterBuffers gl_MaxTessEvaluationAtomicCounters ' +
        'gl_MaxTessEvaluationImageUniforms gl_MaxTessEvaluationInputComponents gl_MaxTessEvaluationOutputComponents ' +
        'gl_MaxTessEvaluationTextureImageUnits gl_MaxTessEvaluationUniformComponents ' +
        'gl_MaxTessGenLevel gl_MaxTessPatchComponents gl_MaxTextureCoords gl_MaxTextureImageUnits ' +
        'gl_MaxTextureUnits gl_MaxVaryingComponents gl_MaxVaryingFloats gl_MaxVaryingVectors ' +
        'gl_MaxVertexAtomicCounterBuffers gl_MaxVertexAtomicCounters gl_MaxVertexAttribs gl_MaxVertexImageUniforms ' +
        'gl_MaxVertexOutputComponents gl_MaxVertexOutputVectors gl_MaxVertexTextureImageUnits ' +
        'gl_MaxVertexUniformComponents gl_MaxVertexUniformVectors gl_MaxViewports gl_MinProgramTexelOffset ' +
        // Variables
        'gl_BackColor gl_BackLightModelProduct gl_BackLightProduct gl_BackMaterial ' +
        'gl_BackSecondaryColor gl_ClipDistance gl_ClipPlane gl_ClipVertex gl_Color ' +
        'gl_DepthRange gl_EyePlaneQ gl_EyePlaneR gl_EyePlaneS gl_EyePlaneT gl_Fog gl_FogCoord ' +
        'gl_FogFragCoord gl_FragColor gl_FragCoord gl_FragData gl_FragDepth gl_FrontColor ' +
        'gl_FrontFacing gl_FrontLightModelProduct gl_FrontLightProduct gl_FrontMaterial ' +
        'gl_FrontSecondaryColor gl_GlobalInvocationID gl_InstanceID gl_InvocationID gl_Layer gl_LightModel ' +
        'gl_LightSource gl_LocalInvocationID gl_LocalInvocationIndex gl_ModelViewMatrix ' +
        'gl_ModelViewMatrixInverse gl_ModelViewMatrixInverseTranspose gl_ModelViewMatrixTranspose ' +
        'gl_ModelViewProjectionMatrix gl_ModelViewProjectionMatrixInverse gl_ModelViewProjectionMatrixInverseTranspose ' +
        'gl_ModelViewProjectionMatrixTranspose gl_MultiTexCoord0 gl_MultiTexCoord1 gl_MultiTexCoord2 ' +
        'gl_MultiTexCoord3 gl_MultiTexCoord4 gl_MultiTexCoord5 gl_MultiTexCoord6 gl_MultiTexCoord7 ' +
        'gl_Normal gl_NormalMatrix gl_NormalScale gl_NumSamples gl_NumWorkGroups gl_ObjectPlaneQ ' +
        'gl_ObjectPlaneR gl_ObjectPlaneS gl_ObjectPlaneT gl_PatchVerticesIn gl_Point gl_PointCoord ' +
        'gl_PointSize gl_Position gl_PrimitiveID gl_PrimitiveIDIn gl_ProjectionMatrix gl_ProjectionMatrixInverse ' +
        'gl_ProjectionMatrixInverseTranspose gl_ProjectionMatrixTranspose gl_SampleID gl_SampleMask ' +
        'gl_SampleMaskIn gl_SamplePosition gl_SecondaryColor gl_TessCoord gl_TessLevelInner gl_TessLevelOuter ' +
        'gl_TexCoord gl_TextureEnvColor gl_TextureMatrix gl_TextureMatrixInverse gl_TextureMatrixInverseTranspose ' +
        'gl_TextureMatrixTranspose gl_Vertex gl_VertexID gl_ViewportIndex gl_WorkGroupID gl_WorkGroupSize gl_in gl_out ' +
        // Functions
        'EmitStreamVertex EmitVertex EndPrimitive EndStreamPrimitive abs acos acosh all any asin ' +
        'asinh atan atanh atomicAdd atomicAnd atomicCompSwap atomicCounter atomicCounterDecrement ' +
        'atomicCounterIncrement atomicExchange atomicMax atomicMin atomicOr atomicXor barrier ' +
        'bitCount bitfieldExtract bitfieldInsert bitfieldReverse ceil clamp cos cosh cross ' +
        'dFdx dFdy degrees determinant distance dot equal exp exp2 faceforward findLSB findMSB ' +
        'floatBitsToInt floatBitsToUint floor fma fract frexp ftransform fwidth greaterThan ' +
        'greaterThanEqual groupMemoryBarrier imageAtomicAdd imageAtomicAnd imageAtomicCompSwap ' +
        'imageAtomicExchange imageAtomicMax imageAtomicMin imageAtomicOr imageAtomicXor imageLoad ' +
        'imageSize imageStore imulExtended intBitsToFloat interpolateAtCentroid interpolateAtOffset ' +
        'interpolateAtSample inverse inversesqrt isinf isnan ldexp length lessThan lessThanEqual log ' +
        'log2 matrixCompMult max memoryBarrier memoryBarrierAtomicCounter memoryBarrierBuffer ' +
        'memoryBarrierImage memoryBarrierShared min mix mod modf noise1 noise2 noise3 noise4 ' +
        'normalize not notEqual outerProduct packDouble2x32 packHalf2x16 packSnorm2x16 packSnorm4x8 ' +
        'packUnorm2x16 packUnorm4x8 pow radians reflect refract round roundEven shadow1D shadow1DLod ' +
        'shadow1DProj shadow1DProjLod shadow2D shadow2DLod shadow2DProj shadow2DProjLod sign sin sinh ' +
        'smoothstep sqrt step tan tanh texelFetch texelFetchOffset texture texture1D texture1DLod ' +
        'texture1DProj texture1DProjLod texture2D texture2DLod texture2DProj texture2DProjLod ' +
        'texture3D texture3DLod texture3DProj texture3DProjLod textureCube textureCubeLod ' +
        'textureGather textureGatherOffset textureGatherOffsets textureGrad textureGradOffset ' +
        'textureLod textureLodOffset textureOffset textureProj textureProjGrad textureProjGradOffset ' +
        'textureProjLod textureProjLodOffset textureProjOffset textureQueryLevels textureQueryLod ' +
        'textureSize transpose trunc uaddCarry uintBitsToFloat umulExtended unpackDouble2x32 ' +
        'unpackHalf2x16 unpackSnorm2x16 unpackSnorm4x8 unpackUnorm2x16 unpackUnorm4x8 usubBorrow',
      literal: 'true false'
    },
    illegal: '"',
    contains: [
      hljs.C_LINE_COMMENT_MODE,
      hljs.C_BLOCK_COMMENT_MODE,
      hljs.C_NUMBER_MODE,
      {
        className: 'meta',
        begin: '#', end: '$'
      }
    ]
  };
};

/***/ }),
/* 186 */
/***/ (function(module, exports) {

module.exports = function(hljs) {
  var GO_KEYWORDS = {
    keyword:
      'break default func interface select case map struct chan else goto package switch ' +
      'const fallthrough if range type continue for import return var go defer ' +
      'bool byte complex64 complex128 float32 float64 int8 int16 int32 int64 string uint8 ' +
      'uint16 uint32 uint64 int uint uintptr rune',
    literal:
       'true false iota nil',
    built_in:
      'append cap close complex copy imag len make new panic print println real recover delete'
  };
  return {
    aliases: ['golang'],
    keywords: GO_KEYWORDS,
    illegal: '</',
    contains: [
      hljs.C_LINE_COMMENT_MODE,
      hljs.C_BLOCK_COMMENT_MODE,
      {
        className: 'string',
        variants: [
          hljs.QUOTE_STRING_MODE,
          {begin: '\'', end: '[^\\\\]\''},
          {begin: '`', end: '`'},
        ]
      },
      {
        className: 'number',
        variants: [
          {begin: hljs.C_NUMBER_RE + '[dflsi]', relevance: 1},
          hljs.C_NUMBER_MODE
        ]
      },
      {
        begin: /:=/ // relevance booster
      },
      {
        className: 'function',
        beginKeywords: 'func', end: /\s*\{/, excludeEnd: true,
        contains: [
          hljs.TITLE_MODE,
          {
            className: 'params',
            begin: /\(/, end: /\)/,
            keywords: GO_KEYWORDS,
            illegal: /["']/
          }
        ]
      }
    ]
  };
};

/***/ }),
/* 187 */
/***/ (function(module, exports) {

module.exports = function(hljs) {
    return {
      keywords: {
        keyword:
          'println readln print import module function local return let var ' +
          'while for foreach times in case when match with break continue ' +
          'augment augmentation each find filter reduce ' +
          'if then else otherwise try catch finally raise throw orIfNull ' +
          'DynamicObject|10 DynamicVariable struct Observable map set vector list array',
        literal:
          'true false null'
      },
      contains: [
        hljs.HASH_COMMENT_MODE,
        hljs.QUOTE_STRING_MODE,
        hljs.C_NUMBER_MODE,
        {
          className: 'meta', begin: '@[A-Za-z]+'
        }
      ]
    }
};

/***/ }),
/* 188 */
/***/ (function(module, exports) {

module.exports = function(hljs) {
  return {
    case_insensitive: true,
    keywords: {
      keyword:
        'task project allprojects subprojects artifacts buildscript configurations ' +
        'dependencies repositories sourceSets description delete from into include ' +
        'exclude source classpath destinationDir includes options sourceCompatibility ' +
        'targetCompatibility group flatDir doLast doFirst flatten todir fromdir ant ' +
        'def abstract break case catch continue default do else extends final finally ' +
        'for if implements instanceof native new private protected public return static ' +
        'switch synchronized throw throws transient try volatile while strictfp package ' +
        'import false null super this true antlrtask checkstyle codenarc copy boolean ' +
        'byte char class double float int interface long short void compile runTime ' +
        'file fileTree abs any append asList asWritable call collect compareTo count ' +
        'div dump each eachByte eachFile eachLine every find findAll flatten getAt ' +
        'getErr getIn getOut getText grep immutable inject inspect intersect invokeMethods ' +
        'isCase join leftShift minus multiply newInputStream newOutputStream newPrintWriter ' +
        'newReader newWriter next plus pop power previous print println push putAt read ' +
        'readBytes readLines reverse reverseEach round size sort splitEachLine step subMap ' +
        'times toInteger toList tokenize upto waitForOrKill withPrintWriter withReader ' +
        'withStream withWriter withWriterAppend write writeLine'
    },
    contains: [
      hljs.C_LINE_COMMENT_MODE,
      hljs.C_BLOCK_COMMENT_MODE,
      hljs.APOS_STRING_MODE,
      hljs.QUOTE_STRING_MODE,
      hljs.NUMBER_MODE,
      hljs.REGEXP_MODE

    ]
  }
};

/***/ }),
/* 189 */
/***/ (function(module, exports) {

module.exports = function(hljs) {
    return {
        keywords: {
            literal : 'true false null',
            keyword:
            'byte short char int long boolean float double void ' +
            // groovy specific keywords
            'def as in assert trait ' +
            // common keywords with Java
            'super this abstract static volatile transient public private protected synchronized final ' +
            'class interface enum if else for while switch case break default continue ' +
            'throw throws try catch finally implements extends new import package return instanceof'
        },

        contains: [
            hljs.COMMENT(
                '/\\*\\*',
                '\\*/',
                {
                    relevance : 0,
                    contains : [
                      {
                          // eat up @'s in emails to prevent them to be recognized as doctags
                          begin: /\w+@/, relevance: 0
                      },
                      {
                          className : 'doctag',
                          begin : '@[A-Za-z]+'
                      }
                    ]
                }
            ),
            hljs.C_LINE_COMMENT_MODE,
            hljs.C_BLOCK_COMMENT_MODE,
            {
                className: 'string',
                begin: '"""', end: '"""'
            },
            {
                className: 'string',
                begin: "'''", end: "'''"
            },
            {
                className: 'string',
                begin: "\\$/", end: "/\\$",
                relevance: 10
            },
            hljs.APOS_STRING_MODE,
            {
                className: 'regexp',
                begin: /~?\/[^\/\n]+\//,
                contains: [
                    hljs.BACKSLASH_ESCAPE
                ]
            },
            hljs.QUOTE_STRING_MODE,
            {
                className: 'meta',
                begin: "^#!/usr/bin/env", end: '$',
                illegal: '\n'
            },
            hljs.BINARY_NUMBER_MODE,
            {
                className: 'class',
                beginKeywords: 'class interface trait enum', end: '{',
                illegal: ':',
                contains: [
                    {beginKeywords: 'extends implements'},
                    hljs.UNDERSCORE_TITLE_MODE
                ]
            },
            hljs.C_NUMBER_MODE,
            {
                className: 'meta', begin: '@[A-Za-z]+'
            },
            {
                // highlight map keys and named parameters as strings
                className: 'string', begin: /[^\?]{0}[A-Za-z0-9_$]+ *:/
            },
            {
                // catch middle element of the ternary operator
                // to avoid highlight it as a label, named parameter, or map key
                begin: /\?/, end: /\:/
            },
            {
                // highlight labeled statements
                className: 'symbol', begin: '^\\s*[A-Za-z0-9_$]+:',
                relevance: 0
            }
        ],
        illegal: /#|<\//
    }
};

/***/ }),
/* 190 */
/***/ (function(module, exports) {

module.exports = // TODO support filter tags like :javascript, support inline HTML
function(hljs) {
  return {
    case_insensitive: true,
    contains: [
      {
        className: 'meta',
        begin: '^!!!( (5|1\\.1|Strict|Frameset|Basic|Mobile|RDFa|XML\\b.*))?$',
        relevance: 10
      },
      // FIXME these comments should be allowed to span indented lines
      hljs.COMMENT(
        '^\\s*(!=#|=#|-#|/).*$',
        false,
        {
          relevance: 0
        }
      ),
      {
        begin: '^\\s*(-|=|!=)(?!#)',
        starts: {
          end: '\\n',
          subLanguage: 'ruby'
        }
      },
      {
        className: 'tag',
        begin: '^\\s*%',
        contains: [
          {
            className: 'selector-tag',
            begin: '\\w+'
          },
          {
            className: 'selector-id',
            begin: '#[\\w-]+'
          },
          {
            className: 'selector-class',
            begin: '\\.[\\w-]+'
          },
          {
            begin: '{\\s*',
            end: '\\s*}',
            contains: [
              {
                begin: ':\\w+\\s*=>',
                end: ',\\s+',
                returnBegin: true,
                endsWithParent: true,
                contains: [
                  {
                    className: 'attr',
                    begin: ':\\w+'
                  },
                  hljs.APOS_STRING_MODE,
                  hljs.QUOTE_STRING_MODE,
                  {
                    begin: '\\w+',
                    relevance: 0
                  }
                ]
              }
            ]
          },
          {
            begin: '\\(\\s*',
            end: '\\s*\\)',
            excludeEnd: true,
            contains: [
              {
                begin: '\\w+\\s*=',
                end: '\\s+',
                returnBegin: true,
                endsWithParent: true,
                contains: [
                  {
                    className: 'attr',
                    begin: '\\w+',
                    relevance: 0
                  },
                  hljs.APOS_STRING_MODE,
                  hljs.QUOTE_STRING_MODE,
                  {
                    begin: '\\w+',
                    relevance: 0
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        begin: '^\\s*[=~]\\s*'
      },
      {
        begin: '#{',
        starts: {
          end: '}',
          subLanguage: 'ruby'
        }
      }
    ]
  };
};

/***/ }),
/* 191 */
/***/ (function(module, exports) {

module.exports = function(hljs) {
  var BUILT_INS = {'builtin-name': 'each in with if else unless bindattr action collection debugger log outlet template unbound view yield'};
  return {
    aliases: ['hbs', 'html.hbs', 'html.handlebars'],
    case_insensitive: true,
    subLanguage: 'xml',
    contains: [
    hljs.COMMENT('{{!(--)?', '(--)?}}'),
      {
        className: 'template-tag',
        begin: /\{\{[#\/]/, end: /\}\}/,
        contains: [
          {
            className: 'name',
            begin: /[a-zA-Z\.-]+/,
            keywords: BUILT_INS,
            starts: {
              endsWithParent: true, relevance: 0,
              contains: [
                hljs.QUOTE_STRING_MODE
              ]
            }
          }
        ]
      },
      {
        className: 'template-variable',
        begin: /\{\{/, end: /\}\}/,
        keywords: BUILT_INS
      }
    ]
  };
};

/***/ }),
/* 192 */
/***/ (function(module, exports) {

module.exports = function(hljs) {
  var COMMENT = {
    variants: [
      hljs.COMMENT('--', '$'),
      hljs.COMMENT(
        '{-',
        '-}',
        {
          contains: ['self']
        }
      )
    ]
  };

  var PRAGMA = {
    className: 'meta',
    begin: '{-#', end: '#-}'
  };

  var PREPROCESSOR = {
    className: 'meta',
    begin: '^#', end: '$'
  };

  var CONSTRUCTOR = {
    className: 'type',
    begin: '\\b[A-Z][\\w\']*', // TODO: other constructors (build-in, infix).
    relevance: 0
  };

  var LIST = {
    begin: '\\(', end: '\\)',
    illegal: '"',
    contains: [
      PRAGMA,
      PREPROCESSOR,
      {className: 'type', begin: '\\b[A-Z][\\w]*(\\((\\.\\.|,|\\w+)\\))?'},
      hljs.inherit(hljs.TITLE_MODE, {begin: '[_a-z][\\w\']*'}),
      COMMENT
    ]
  };

  var RECORD = {
    begin: '{', end: '}',
    contains: LIST.contains
  };

  return {
    aliases: ['hs'],
    keywords:
      'let in if then else case of where do module import hiding ' +
      'qualified type data newtype deriving class instance as default ' +
      'infix infixl infixr foreign export ccall stdcall cplusplus ' +
      'jvm dotnet safe unsafe family forall mdo proc rec',
    contains: [

      // Top-level constructions.

      {
        beginKeywords: 'module', end: 'where',
        keywords: 'module where',
        contains: [LIST, COMMENT],
        illegal: '\\W\\.|;'
      },
      {
        begin: '\\bimport\\b', end: '$',
        keywords: 'import qualified as hiding',
        contains: [LIST, COMMENT],
        illegal: '\\W\\.|;'
      },

      {
        className: 'class',
        begin: '^(\\s*)?(class|instance)\\b', end: 'where',
        keywords: 'class family instance where',
        contains: [CONSTRUCTOR, LIST, COMMENT]
      },
      {
        className: 'class',
        begin: '\\b(data|(new)?type)\\b', end: '$',
        keywords: 'data family type newtype deriving',
        contains: [PRAGMA, CONSTRUCTOR, LIST, RECORD, COMMENT]
      },
      {
        beginKeywords: 'default', end: '$',
        contains: [CONSTRUCTOR, LIST, COMMENT]
      },
      {
        beginKeywords: 'infix infixl infixr', end: '$',
        contains: [hljs.C_NUMBER_MODE, COMMENT]
      },
      {
        begin: '\\bforeign\\b', end: '$',
        keywords: 'foreign import export ccall stdcall cplusplus jvm ' +
                  'dotnet safe unsafe',
        contains: [CONSTRUCTOR, hljs.QUOTE_STRING_MODE, COMMENT]
      },
      {
        className: 'meta',
        begin: '#!\\/usr\\/bin\\/env\ runhaskell', end: '$'
      },

      // "Whitespaces".

      PRAGMA,
      PREPROCESSOR,

      // Literals and names.

      // TODO: characters.
      hljs.QUOTE_STRING_MODE,
      hljs.C_NUMBER_MODE,
      CONSTRUCTOR,
      hljs.inherit(hljs.TITLE_MODE, {begin: '^[_a-z][\\w\']*'}),

      COMMENT,

      {begin: '->|<-'} // No markup, relevance booster
    ]
  };
};

/***/ }),
/* 193 */
/***/ (function(module, exports) {

module.exports = function(hljs) {
  var IDENT_RE = '[a-zA-Z_$][a-zA-Z0-9_$]*';
  var IDENT_FUNC_RETURN_TYPE_RE = '([*]|[a-zA-Z_$][a-zA-Z0-9_$]*)';

  var HAXE_BASIC_TYPES = 'Int Float String Bool Dynamic Void Array ';

  return {
    aliases: ['hx'],
    keywords: {
      keyword: 'break case cast catch continue default do dynamic else enum extern ' +
               'for function here if import in inline never new override package private get set ' +
               'public return static super switch this throw trace try typedef untyped using var while ' +
               HAXE_BASIC_TYPES,
      built_in:
        'trace this',
      literal:
        'true false null _'
    },
    contains: [
      { className: 'string', // interpolate-able strings
        begin: '\'', end: '\'',
        contains: [
          hljs.BACKSLASH_ESCAPE,
          { className: 'subst', // interpolation
            begin: '\\$\\{', end: '\\}'
          },
          { className: 'subst', // interpolation
            begin: '\\$', end: '\\W}'
          }
        ]
      },
      hljs.QUOTE_STRING_MODE,
      hljs.C_LINE_COMMENT_MODE,
      hljs.C_BLOCK_COMMENT_MODE,
      hljs.C_NUMBER_MODE,
      { className: 'meta', // compiler meta
        begin: '@:', end: '$'
      },
      { className: 'meta', // compiler conditionals
        begin: '#', end: '$',
        keywords: {'meta-keyword': 'if else elseif end error'}
      },
      { className: 'type', // function types
        begin: ':[ \t]*', end: '[^A-Za-z0-9_ \t\\->]',
        excludeBegin: true, excludeEnd: true,
        relevance: 0
      },
      { className: 'type', // types
        begin: ':[ \t]*', end: '\\W',
        excludeBegin: true, excludeEnd: true
      },
      { className: 'type', // instantiation
        begin: 'new *', end: '\\W',
        excludeBegin: true, excludeEnd: true
      },
      { className: 'class', // enums
        beginKeywords: 'enum', end: '\\{',
        contains: [
          hljs.TITLE_MODE
        ]
      },
      { className: 'class', // abstracts
        beginKeywords: 'abstract', end: '[\\{$]',
        contains: [
          { className: 'type',
            begin: '\\(', end: '\\)',
            excludeBegin: true, excludeEnd: true
          },
          { className: 'type',
            begin: 'from +', end: '\\W',
            excludeBegin: true, excludeEnd: true
          },
          { className: 'type',
            begin: 'to +', end: '\\W',
            excludeBegin: true, excludeEnd: true
          },
          hljs.TITLE_MODE
        ],
        keywords: {
          keyword: 'abstract from to'
        }
      },
      { className: 'class', // classes
        begin: '\\b(class|interface) +', end: '[\\{$]',  excludeEnd: true,
        keywords: 'class interface',
        contains: [
          { className: 'keyword',
            begin: '\\b(extends|implements) +',
            keywords: 'extends implements',
            contains: [
              {
                className: 'type',
                begin: hljs.IDENT_RE,
                relevance: 0
              }
            ]
          },
          hljs.TITLE_MODE
        ]
      },
      { className: 'function',
        beginKeywords: 'function', end: '\\(', excludeEnd: true,
        illegal: '\\S',
        contains: [
          hljs.TITLE_MODE
        ]
      }
    ],
    illegal: /<\//
  };
};

/***/ }),
/* 194 */
/***/ (function(module, exports) {

module.exports = function(hljs) {
  return {
    case_insensitive: true,
    lexemes: /[\w\._]+/,
    keywords: 'goto gosub return break repeat loop continue wait await dim sdim foreach dimtype dup dupptr end stop newmod delmod mref run exgoto on mcall assert logmes newlab resume yield onexit onerror onkey onclick oncmd exist delete mkdir chdir dirlist bload bsave bcopy memfile if else poke wpoke lpoke getstr chdpm memexpand memcpy memset notesel noteadd notedel noteload notesave randomize noteunsel noteget split strrep setease button chgdisp exec dialog mmload mmplay mmstop mci pset pget syscolor mes print title pos circle cls font sysfont objsize picload color palcolor palette redraw width gsel gcopy gzoom gmode bmpsave hsvcolor getkey listbox chkbox combox input mesbox buffer screen bgscr mouse objsel groll line clrobj boxf objprm objmode stick grect grotate gsquare gradf objimage objskip objenable celload celdiv celput newcom querycom delcom cnvstow comres axobj winobj sendmsg comevent comevarg sarrayconv callfunc cnvwtos comevdisp libptr system hspstat hspver stat cnt err strsize looplev sublev iparam wparam lparam refstr refdval int rnd strlen length length2 length3 length4 vartype gettime peek wpeek lpeek varptr varuse noteinfo instr abs limit getease str strmid strf getpath strtrim sin cos tan atan sqrt double absf expf logf limitf powf geteasef mousex mousey mousew hwnd hinstance hdc ginfo objinfo dirinfo sysinfo thismod __hspver__ __hsp30__ __date__ __time__ __line__ __file__ _debug __hspdef__ and or xor not screen_normal screen_palette screen_hide screen_fixedsize screen_tool screen_frame gmode_gdi gmode_mem gmode_rgb0 gmode_alpha gmode_rgb0alpha gmode_add gmode_sub gmode_pixela ginfo_mx ginfo_my ginfo_act ginfo_sel ginfo_wx1 ginfo_wy1 ginfo_wx2 ginfo_wy2 ginfo_vx ginfo_vy ginfo_sizex ginfo_sizey ginfo_winx ginfo_winy ginfo_mesx ginfo_mesy ginfo_r ginfo_g ginfo_b ginfo_paluse ginfo_dispx ginfo_dispy ginfo_cx ginfo_cy ginfo_intid ginfo_newid ginfo_sx ginfo_sy objinfo_mode objinfo_bmscr objinfo_hwnd notemax notesize dir_cur dir_exe dir_win dir_sys dir_cmdline dir_desktop dir_mydoc dir_tv font_normal font_bold font_italic font_underline font_strikeout font_antialias objmode_normal objmode_guifont objmode_usefont gsquare_grad msgothic msmincho do until while wend for next _break _continue switch case default swbreak swend ddim ldim alloc m_pi rad2deg deg2rad ease_linear ease_quad_in ease_quad_out ease_quad_inout ease_cubic_in ease_cubic_out ease_cubic_inout ease_quartic_in ease_quartic_out ease_quartic_inout ease_bounce_in ease_bounce_out ease_bounce_inout ease_shake_in ease_shake_out ease_shake_inout ease_loop',
    contains: [
      hljs.C_LINE_COMMENT_MODE,
      hljs.C_BLOCK_COMMENT_MODE,
      hljs.QUOTE_STRING_MODE,
      hljs.APOS_STRING_MODE,

      {
        // multi-line string
        className: 'string',
        begin: '{"', end: '"}',
        contains: [hljs.BACKSLASH_ESCAPE]
      },

      hljs.COMMENT(';', '$', {relevance: 0}),

      {
        // pre-processor
        className: 'meta',
        begin: '#', end: '$',
        keywords: {'meta-keyword': 'addion cfunc cmd cmpopt comfunc const defcfunc deffunc define else endif enum epack func global if ifdef ifndef include modcfunc modfunc modinit modterm module pack packopt regcmd runtime undef usecom uselib'},
        contains: [
          hljs.inherit(hljs.QUOTE_STRING_MODE, {className: 'meta-string'}),
          hljs.NUMBER_MODE,
          hljs.C_NUMBER_MODE,
          hljs.C_LINE_COMMENT_MODE,
          hljs.C_BLOCK_COMMENT_MODE
        ]
      },

      {
        // label
        className: 'symbol',
        begin: '^\\*(\\w+|@)'
      },

      hljs.NUMBER_MODE,
      hljs.C_NUMBER_MODE
    ]
  };
};

/***/ }),
/* 195 */
/***/ (function(module, exports) {

module.exports = function(hljs) {
  var BUILT_INS = 'action collection component concat debugger each each-in else get hash if input link-to loc log mut outlet partial query-params render textarea unbound unless with yield view';

  var ATTR_ASSIGNMENT = {
    illegal: /\}\}/,
    begin: /[a-zA-Z0-9_]+=/,
    returnBegin: true,
    relevance: 0,
    contains: [
      {
        className: 'attr', begin: /[a-zA-Z0-9_]+/
      }
    ]
  };

  var SUB_EXPR = {
    illegal: /\}\}/,
    begin: /\)/, end: /\)/,
    contains: [
      {
        begin: /[a-zA-Z\.\-]+/,
        keywords: {built_in: BUILT_INS},
        starts: {
          endsWithParent: true, relevance: 0,
          contains: [
            hljs.QUOTE_STRING_MODE,
          ]
        }
      }
    ]
  };

  var TAG_INNARDS = {
    endsWithParent: true, relevance: 0,
    keywords: {keyword: 'as', built_in: BUILT_INS},
    contains: [
      hljs.QUOTE_STRING_MODE,
      ATTR_ASSIGNMENT,
      hljs.NUMBER_MODE
    ]
  };

  return {
    case_insensitive: true,
    subLanguage: 'xml',
    contains: [
      hljs.COMMENT('{{!(--)?', '(--)?}}'),
      {
        className: 'template-tag',
        begin: /\{\{[#\/]/, end: /\}\}/,
        contains: [
          {
            className: 'name',
            begin: /[a-zA-Z\.\-]+/,
            keywords: {'builtin-name': BUILT_INS},
            starts: TAG_INNARDS
          }
        ]
      },
      {
        className: 'template-variable',
        begin: /\{\{[a-zA-Z][a-zA-Z\-]+/, end: /\}\}/,
        keywords: {keyword: 'as', built_in: BUILT_INS},
        contains: [
          hljs.QUOTE_STRING_MODE
        ]
      }
    ]
  };
};

/***/ }),
/* 196 */
/***/ (function(module, exports) {

module.exports = function(hljs) {
  var VERSION = 'HTTP/[0-9\\.]+';
  return {
    aliases: ['https'],
    illegal: '\\S',
    contains: [
      {
        begin: '^' + VERSION, end: '$',
        contains: [{className: 'number', begin: '\\b\\d{3}\\b'}]
      },
      {
        begin: '^[A-Z]+ (.*?) ' + VERSION + '$', returnBegin: true, end: '$',
        contains: [
          {
            className: 'string',
            begin: ' ', end: ' ',
            excludeBegin: true, excludeEnd: true
          },
          {
            begin: VERSION
          },
          {
            className: 'keyword',
            begin: '[A-Z]+'
          }
        ]
      },
      {
        className: 'attribute',
        begin: '^\\w', end: ': ', excludeEnd: true,
        illegal: '\\n|\\s|=',
        starts: {end: '$', relevance: 0}
      },
      {
        begin: '\\n\\n',
        starts: {subLanguage: [], endsWithParent: true}
      }
    ]
  };
};

/***/ }),
/* 197 */
/***/ (function(module, exports) {

module.exports = function(hljs) {
  var keywords = {
    'builtin-name':
      // keywords
      '!= % %= & &= * ** **= *= *map ' +
      '+ += , --build-class-- --import-- -= . / // //= ' +
      '/= < << <<= <= = > >= >> >>= ' +
      '@ @= ^ ^= abs accumulate all and any ap-compose ' +
      'ap-dotimes ap-each ap-each-while ap-filter ap-first ap-if ap-last ap-map ap-map-when ap-pipe ' +
      'ap-reduce ap-reject apply as-> ascii assert assoc bin break butlast ' +
      'callable calling-module-name car case cdr chain chr coll? combinations compile ' +
      'compress cond cons cons? continue count curry cut cycle dec ' +
      'def default-method defclass defmacro defmacro-alias defmacro/g! defmain defmethod defmulti defn ' +
      'defn-alias defnc defnr defreader defseq del delattr delete-route dict-comp dir ' +
      'disassemble dispatch-reader-macro distinct divmod do doto drop drop-last drop-while empty? ' +
      'end-sequence eval eval-and-compile eval-when-compile even? every? except exec filter first ' +
      'flatten float? fn fnc fnr for for* format fraction genexpr ' +
      'gensym get getattr global globals group-by hasattr hash hex id ' +
      'identity if if* if-not if-python2 import in inc input instance? ' +
      'integer integer-char? integer? interleave interpose is is-coll is-cons is-empty is-even ' +
      'is-every is-float is-instance is-integer is-integer-char is-iterable is-iterator is-keyword is-neg is-none ' +
      'is-not is-numeric is-odd is-pos is-string is-symbol is-zero isinstance islice issubclass ' +
      'iter iterable? iterate iterator? keyword keyword? lambda last len let ' +
      'lif lif-not list* list-comp locals loop macro-error macroexpand macroexpand-1 macroexpand-all ' +
      'map max merge-with method-decorator min multi-decorator multicombinations name neg? next ' +
      'none? nonlocal not not-in not? nth numeric? oct odd? open ' +
      'or ord partition permutations pos? post-route postwalk pow prewalk print ' +
      'product profile/calls profile/cpu put-route quasiquote quote raise range read read-str ' +
      'recursive-replace reduce remove repeat repeatedly repr require rest round route ' +
      'route-with-methods rwm second seq set-comp setattr setv some sorted string ' +
      'string? sum switch symbol? take take-nth take-while tee try unless ' +
      'unquote unquote-splicing vars walk when while with with* with-decorator with-gensyms ' +
      'xi xor yield yield-from zero? zip zip-longest | |= ~'
   };

  var SYMBOLSTART = 'a-zA-Z_\\-!.?+*=<>&#\'';
  var SYMBOL_RE = '[' + SYMBOLSTART + '][' + SYMBOLSTART + '0-9/;:]*';
  var SIMPLE_NUMBER_RE = '[-+]?\\d+(\\.\\d+)?';

  var SHEBANG = {
    className: 'meta',
    begin: '^#!', end: '$'
  };

  var SYMBOL = {
    begin: SYMBOL_RE,
    relevance: 0
  };
  var NUMBER = {
    className: 'number', begin: SIMPLE_NUMBER_RE,
    relevance: 0
  };
  var STRING = hljs.inherit(hljs.QUOTE_STRING_MODE, {illegal: null});
  var COMMENT = hljs.COMMENT(
    ';',
    '$',
    {
      relevance: 0
    }
  );
  var LITERAL = {
    className: 'literal',
    begin: /\b([Tt]rue|[Ff]alse|nil|None)\b/
  };
  var COLLECTION = {
    begin: '[\\[\\{]', end: '[\\]\\}]'
  };
  var HINT = {
    className: 'comment',
    begin: '\\^' + SYMBOL_RE
  };
  var HINT_COL = hljs.COMMENT('\\^\\{', '\\}');
  var KEY = {
    className: 'symbol',
    begin: '[:]{1,2}' + SYMBOL_RE
  };
  var LIST = {
    begin: '\\(', end: '\\)'
  };
  var BODY = {
    endsWithParent: true,
    relevance: 0
  };
  var NAME = {
    keywords: keywords,
    lexemes: SYMBOL_RE,
    className: 'name', begin: SYMBOL_RE,
    starts: BODY
  };
  var DEFAULT_CONTAINS = [LIST, STRING, HINT, HINT_COL, COMMENT, KEY, COLLECTION, NUMBER, LITERAL, SYMBOL];

  LIST.contains = [hljs.COMMENT('comment', ''), NAME, BODY];
  BODY.contains = DEFAULT_CONTAINS;
  COLLECTION.contains = DEFAULT_CONTAINS;

  return {
    aliases: ['hylang'],
    illegal: /\S/,
    contains: [SHEBANG, LIST, STRING, HINT, HINT_COL, COMMENT, KEY, COLLECTION, NUMBER, LITERAL]
  }
};

/***/ }),
/* 198 */
/***/ (function(module, exports) {

module.exports = function(hljs) {
  var START_BRACKET = '\\[';
  var END_BRACKET = '\\]';
  return {
    aliases: ['i7'],
    case_insensitive: true,
    keywords: {
      // Some keywords more or less unique to I7, for relevance.
      keyword:
        // kind:
        'thing room person man woman animal container ' +
        'supporter backdrop door ' +
        // characteristic:
        'scenery open closed locked inside gender ' +
        // verb:
        'is are say understand ' +
        // misc keyword:
        'kind of rule'
    },
    contains: [
      {
        className: 'string',
        begin: '"', end: '"',
        relevance: 0,
        contains: [
          {
            className: 'subst',
            begin: START_BRACKET, end: END_BRACKET
          }
        ]
      },
      {
        className: 'section',
        begin: /^(Volume|Book|Part|Chapter|Section|Table)\b/,
        end: '$'
      },
      {
        // Rule definition
        // This is here for relevance.
        begin: /^(Check|Carry out|Report|Instead of|To|Rule|When|Before|After)\b/,
        end: ':',
        contains: [
          {
            //Rule name
            begin: '\\(This', end: '\\)'
          }
        ]
      },
      {
        className: 'comment',
        begin: START_BRACKET, end: END_BRACKET,
        contains: ['self']
      }
    ]
  };
};

/***/ }),
/* 199 */
/***/ (function(module, exports) {

module.exports = function(hljs) {
  var STRING = {
    className: "string",
    contains: [hljs.BACKSLASH_ESCAPE],
    variants: [
      {
        begin: "'''", end: "'''",
        relevance: 10
      }, {
        begin: '"""', end: '"""',
        relevance: 10
      }, {
        begin: '"', end: '"'
      }, {
        begin: "'", end: "'"
      }
    ]
  };
  return {
    aliases: ['toml'],
    case_insensitive: true,
    illegal: /\S/,
    contains: [
      hljs.COMMENT(';', '$'),
      hljs.HASH_COMMENT_MODE,
      {
        className: 'section',
        begin: /^\s*\[+/, end: /\]+/
      },
      {
        begin: /^[a-z0-9\[\]_-]+\s*=\s*/, end: '$',
        returnBegin: true,
        contains: [
          {
            className: 'attr',
            begin: /[a-z0-9\[\]_-]+/
          },
          {
            begin: /=/, endsWithParent: true,
            relevance: 0,
            contains: [
              {
                className: 'literal',
                begin: /\bon|off|true|false|yes|no\b/
              },
              {
                className: 'variable',
                variants: [
                  {begin: /\$[\w\d"][\w\d_]*/},
                  {begin: /\$\{(.*?)}/}
                ]
              },
              STRING,
              {
                className: 'number',
                begin: /([\+\-]+)?[\d]+_[\d_]+/
              },
              hljs.NUMBER_MODE
            ]
          }
        ]
      }
    ]
  };
};

/***/ }),
/* 200 */
/***/ (function(module, exports) {

module.exports = function(hljs) {
  var PARAMS = {
    className: 'params',
    begin: '\\(', end: '\\)'
  };

  var F_KEYWORDS = {
    literal: '.False. .True.',
    keyword: 'kind do while private call intrinsic where elsewhere ' +
      'type endtype endmodule endselect endinterface end enddo endif if forall endforall only contains default return stop then ' +
      'public subroutine|10 function program .and. .or. .not. .le. .eq. .ge. .gt. .lt. ' +
      'goto save else use module select case ' +
      'access blank direct exist file fmt form formatted iostat name named nextrec number opened rec recl sequential status unformatted unit ' +
      'continue format pause cycle exit ' +
      'c_null_char c_alert c_backspace c_form_feed flush wait decimal round iomsg ' +
      'synchronous nopass non_overridable pass protected volatile abstract extends import ' +
      'non_intrinsic value deferred generic final enumerator class associate bind enum ' +
      'c_int c_short c_long c_long_long c_signed_char c_size_t c_int8_t c_int16_t c_int32_t c_int64_t c_int_least8_t c_int_least16_t ' +
      'c_int_least32_t c_int_least64_t c_int_fast8_t c_int_fast16_t c_int_fast32_t c_int_fast64_t c_intmax_t C_intptr_t c_float c_double ' +
      'c_long_double c_float_complex c_double_complex c_long_double_complex c_bool c_char c_null_ptr c_null_funptr ' +
      'c_new_line c_carriage_return c_horizontal_tab c_vertical_tab iso_c_binding c_loc c_funloc c_associated  c_f_pointer ' +
      'c_ptr c_funptr iso_fortran_env character_storage_size error_unit file_storage_size input_unit iostat_end iostat_eor ' +
      'numeric_storage_size output_unit c_f_procpointer ieee_arithmetic ieee_support_underflow_control ' +
      'ieee_get_underflow_mode ieee_set_underflow_mode newunit contiguous recursive ' +
      'pad position action delim readwrite eor advance nml interface procedure namelist include sequence elemental pure ' +
      'integer real character complex logical dimension allocatable|10 parameter ' +
      'external implicit|10 none double precision assign intent optional pointer ' +
      'target in out common equivalence data ' +
      // IRPF90 special keywords
      'begin_provider &begin_provider end_provider begin_shell end_shell begin_template end_template subst assert touch ' +
      'soft_touch provide no_dep free irp_if irp_else irp_endif irp_write irp_read',
    built_in: 'alog alog10 amax0 amax1 amin0 amin1 amod cabs ccos cexp clog csin csqrt dabs dacos dasin datan datan2 dcos dcosh ddim dexp dint ' +
      'dlog dlog10 dmax1 dmin1 dmod dnint dsign dsin dsinh dsqrt dtan dtanh float iabs idim idint idnint ifix isign max0 max1 min0 min1 sngl ' +
      'algama cdabs cdcos cdexp cdlog cdsin cdsqrt cqabs cqcos cqexp cqlog cqsin cqsqrt dcmplx dconjg derf derfc dfloat dgamma dimag dlgama ' +
      'iqint qabs qacos qasin qatan qatan2 qcmplx qconjg qcos qcosh qdim qerf qerfc qexp qgamma qimag qlgama qlog qlog10 qmax1 qmin1 qmod ' +
      'qnint qsign qsin qsinh qsqrt qtan qtanh abs acos aimag aint anint asin atan atan2 char cmplx conjg cos cosh exp ichar index int log ' +
      'log10 max min nint sign sin sinh sqrt tan tanh print write dim lge lgt lle llt mod nullify allocate deallocate ' +
      'adjustl adjustr all allocated any associated bit_size btest ceiling count cshift date_and_time digits dot_product ' +
      'eoshift epsilon exponent floor fraction huge iand ibclr ibits ibset ieor ior ishft ishftc lbound len_trim matmul ' +
      'maxexponent maxloc maxval merge minexponent minloc minval modulo mvbits nearest pack present product ' +
      'radix random_number random_seed range repeat reshape rrspacing scale scan selected_int_kind selected_real_kind ' +
      'set_exponent shape size spacing spread sum system_clock tiny transpose trim ubound unpack verify achar iachar transfer ' +
      'dble entry dprod cpu_time command_argument_count get_command get_command_argument get_environment_variable is_iostat_end ' +
      'ieee_arithmetic ieee_support_underflow_control ieee_get_underflow_mode ieee_set_underflow_mode ' +
      'is_iostat_eor move_alloc new_line selected_char_kind same_type_as extends_type_of'  +
      'acosh asinh atanh bessel_j0 bessel_j1 bessel_jn bessel_y0 bessel_y1 bessel_yn erf erfc erfc_scaled gamma log_gamma hypot norm2 ' +
      'atomic_define atomic_ref execute_command_line leadz trailz storage_size merge_bits ' +
      'bge bgt ble blt dshiftl dshiftr findloc iall iany iparity image_index lcobound ucobound maskl maskr ' +
      'num_images parity popcnt poppar shifta shiftl shiftr this_image ' +
      // IRPF90 special built_ins
      'IRP_ALIGN irp_here'
  };
  return {
    case_insensitive: true,
    keywords: F_KEYWORDS,
    illegal: /\/\*/,
    contains: [
      hljs.inherit(hljs.APOS_STRING_MODE, {className: 'string', relevance: 0}),
      hljs.inherit(hljs.QUOTE_STRING_MODE, {className: 'string', relevance: 0}),
      {
        className: 'function',
        beginKeywords: 'subroutine function program',
        illegal: '[${=\\n]',
        contains: [hljs.UNDERSCORE_TITLE_MODE, PARAMS]
      },
      hljs.COMMENT('!', '$', {relevance: 0}),
      hljs.COMMENT('begin_doc', 'end_doc', {relevance: 10}),
      {
        className: 'number',
        begin: '(?=\\b|\\+|\\-|\\.)(?=\\.\\d|\\d)(?:\\d+)?(?:\\.?\\d*)(?:[de][+-]?\\d+)?\\b\\.?',
        relevance: 0
      }
    ]
  };
};

/***/ }),
/* 201 */
/***/ (function(module, exports) {

module.exports = function(hljs) {
  var JAVA_IDENT_RE = '[\u00C0-\u02B8a-zA-Z_$][\u00C0-\u02B8a-zA-Z_$0-9]*';
  var GENERIC_IDENT_RE = JAVA_IDENT_RE + '(<' + JAVA_IDENT_RE + '(\\s*,\\s*' + JAVA_IDENT_RE + ')*>)?';
  var KEYWORDS =
    'false synchronized int abstract float private char boolean static null if const ' +
    'for true while long strictfp finally protected import native final void ' +
    'enum else break transient catch instanceof byte super volatile case assert short ' +
    'package default double public try this switch continue throws protected public private ' +
    'module requires exports do';

  // https://docs.oracle.com/javase/7/docs/technotes/guides/language/underscores-literals.html
  var JAVA_NUMBER_RE = '\\b' +
    '(' +
      '0[bB]([01]+[01_]+[01]+|[01]+)' + // 0b...
      '|' +
      '0[xX]([a-fA-F0-9]+[a-fA-F0-9_]+[a-fA-F0-9]+|[a-fA-F0-9]+)' + // 0x...
      '|' +
      '(' +
        '([\\d]+[\\d_]+[\\d]+|[\\d]+)(\\.([\\d]+[\\d_]+[\\d]+|[\\d]+))?' +
        '|' +
        '\\.([\\d]+[\\d_]+[\\d]+|[\\d]+)' +
      ')' +
      '([eE][-+]?\\d+)?' + // octal, decimal, float
    ')' +
    '[lLfF]?';
  var JAVA_NUMBER_MODE = {
    className: 'number',
    begin: JAVA_NUMBER_RE,
    relevance: 0
  };

  return {
    aliases: ['jsp'],
    keywords: KEYWORDS,
    illegal: /<\/|#/,
    contains: [
      hljs.COMMENT(
        '/\\*\\*',
        '\\*/',
        {
          relevance : 0,
          contains : [
            {
              // eat up @'s in emails to prevent them to be recognized as doctags
              begin: /\w+@/, relevance: 0
            },
            {
              className : 'doctag',
              begin : '@[A-Za-z]+'
            }
          ]
        }
      ),
      hljs.C_LINE_COMMENT_MODE,
      hljs.C_BLOCK_COMMENT_MODE,
      hljs.APOS_STRING_MODE,
      hljs.QUOTE_STRING_MODE,
      {
        className: 'class',
        beginKeywords: 'class interface', end: /[{;=]/, excludeEnd: true,
        keywords: 'class interface',
        illegal: /[:"\[\]]/,
        contains: [
          {beginKeywords: 'extends implements'},
          hljs.UNDERSCORE_TITLE_MODE
        ]
      },
      {
        // Expression keywords prevent 'keyword Name(...)' from being
        // recognized as a function definition
        beginKeywords: 'new throw return else',
        relevance: 0
      },
      {
        className: 'function',
        begin: '(' + GENERIC_IDENT_RE + '\\s+)+' + hljs.UNDERSCORE_IDENT_RE + '\\s*\\(', returnBegin: true, end: /[{;=]/,
        excludeEnd: true,
        keywords: KEYWORDS,
        contains: [
          {
            begin: hljs.UNDERSCORE_IDENT_RE + '\\s*\\(', returnBegin: true,
            relevance: 0,
            contains: [hljs.UNDERSCORE_TITLE_MODE]
          },
          {
            className: 'params',
            begin: /\(/, end: /\)/,
            keywords: KEYWORDS,
            relevance: 0,
            contains: [
              hljs.APOS_STRING_MODE,
              hljs.QUOTE_STRING_MODE,
              hljs.C_NUMBER_MODE,
              hljs.C_BLOCK_COMMENT_MODE
            ]
          },
          hljs.C_LINE_COMMENT_MODE,
          hljs.C_BLOCK_COMMENT_MODE
        ]
      },
      JAVA_NUMBER_MODE,
      {
        className: 'meta', begin: '@[A-Za-z]+'
      }
    ]
  };
};

/***/ }),
/* 202 */
/***/ (function(module, exports) {

module.exports = function(hljs) {
  var IDENT_RE = '[A-Za-z$_][0-9A-Za-z$_]*';
  var KEYWORDS = {
    keyword:
      'in of if for while finally var new function do return void else break catch ' +
      'instanceof with throw case default try this switch continue typeof delete ' +
      'let yield const export super debugger as async await static ' +
      // ECMAScript 6 modules import
      'import from as'
    ,
    literal:
      'true false null undefined NaN Infinity',
    built_in:
      'eval isFinite isNaN parseFloat parseInt decodeURI decodeURIComponent ' +
      'encodeURI encodeURIComponent escape unescape Object Function Boolean Error ' +
      'EvalError InternalError RangeError ReferenceError StopIteration SyntaxError ' +
      'TypeError URIError Number Math Date String RegExp Array Float32Array ' +
      'Float64Array Int16Array Int32Array Int8Array Uint16Array Uint32Array ' +
      'Uint8Array Uint8ClampedArray ArrayBuffer DataView JSON Intl arguments require ' +
      'module console window document Symbol Set Map WeakSet WeakMap Proxy Reflect ' +
      'Promise'
  };
  var EXPRESSIONS;
  var NUMBER = {
    className: 'number',
    variants: [
      { begin: '\\b(0[bB][01]+)' },
      { begin: '\\b(0[oO][0-7]+)' },
      { begin: hljs.C_NUMBER_RE }
    ],
    relevance: 0
  };
  var SUBST = {
    className: 'subst',
    begin: '\\$\\{', end: '\\}',
    keywords: KEYWORDS,
    contains: []  // defined later
  };
  var TEMPLATE_STRING = {
    className: 'string',
    begin: '`', end: '`',
    contains: [
      hljs.BACKSLASH_ESCAPE,
      SUBST
    ]
  };
  SUBST.contains = [
    hljs.APOS_STRING_MODE,
    hljs.QUOTE_STRING_MODE,
    TEMPLATE_STRING,
    NUMBER,
    hljs.REGEXP_MODE
  ]
  var PARAMS_CONTAINS = SUBST.contains.concat([
    hljs.C_BLOCK_COMMENT_MODE,
    hljs.C_LINE_COMMENT_MODE
  ]);

  return {
    aliases: ['js', 'jsx'],
    keywords: KEYWORDS,
    contains: [
      {
        className: 'meta',
        relevance: 10,
        begin: /^\s*['"]use (strict|asm)['"]/
      },
      {
        className: 'meta',
        begin: /^#!/, end: /$/
      },
      hljs.APOS_STRING_MODE,
      hljs.QUOTE_STRING_MODE,
      TEMPLATE_STRING,
      hljs.C_LINE_COMMENT_MODE,
      hljs.C_BLOCK_COMMENT_MODE,
      NUMBER,
      { // object attr container
        begin: /[{,]\s*/, relevance: 0,
        contains: [
          {
            begin: IDENT_RE + '\\s*:', returnBegin: true,
            relevance: 0,
            contains: [{className: 'attr', begin: IDENT_RE, relevance: 0}]
          }
        ]
      },
      { // "value" container
        begin: '(' + hljs.RE_STARTERS_RE + '|\\b(case|return|throw)\\b)\\s*',
        keywords: 'return throw case',
        contains: [
          hljs.C_LINE_COMMENT_MODE,
          hljs.C_BLOCK_COMMENT_MODE,
          hljs.REGEXP_MODE,
          {
            className: 'function',
            begin: '(\\(.*?\\)|' + IDENT_RE + ')\\s*=>', returnBegin: true,
            end: '\\s*=>',
            contains: [
              {
                className: 'params',
                variants: [
                  {
                    begin: IDENT_RE
                  },
                  {
                    begin: /\(\s*\)/,
                  },
                  {
                    begin: /\(/, end: /\)/,
                    excludeBegin: true, excludeEnd: true,
                    keywords: KEYWORDS,
                    contains: PARAMS_CONTAINS
                  }
                ]
              }
            ]
          },
          { // E4X / JSX
            begin: /</, end: /(\/\w+|\w+\/)>/,
            subLanguage: 'xml',
            contains: [
              {begin: /<\w+\s*\/>/, skip: true},
              {
                begin: /<\w+/, end: /(\/\w+|\w+\/)>/, skip: true,
                contains: [
                  {begin: /<\w+\s*\/>/, skip: true},
                  'self'
                ]
              }
            ]
          }
        ],
        relevance: 0
      },
      {
        className: 'function',
        beginKeywords: 'function', end: /\{/, excludeEnd: true,
        contains: [
          hljs.inherit(hljs.TITLE_MODE, {begin: IDENT_RE}),
          {
            className: 'params',
            begin: /\(/, end: /\)/,
            excludeBegin: true,
            excludeEnd: true,
            contains: PARAMS_CONTAINS
          }
        ],
        illegal: /\[|%/
      },
      {
        begin: /\$[(.]/ // relevance booster for a pattern common to JS libs: `$(something)` and `$.something`
      },
      hljs.METHOD_GUARD,
      { // ES6 class
        className: 'class',
        beginKeywords: 'class', end: /[{;=]/, excludeEnd: true,
        illegal: /[:"\[\]]/,
        contains: [
          {beginKeywords: 'extends'},
          hljs.UNDERSCORE_TITLE_MODE
        ]
      },
      {
        beginKeywords: 'constructor', end: /\{/, excludeEnd: true
      }
    ],
    illegal: /#(?!!)/
  };
};

/***/ }),
/* 203 */
/***/ (function(module, exports) {

module.exports = function (hljs) {
  var PARAM = {
    begin: /[\w-]+ *=/, returnBegin: true,
    relevance: 0,
    contains: [{className: 'attr', begin: /[\w-]+/}]
  };
  var PARAMSBLOCK = {
    className: 'params',
    begin: /\(/,
    end: /\)/,
    contains: [PARAM],
    relevance : 0
  };
  var OPERATION = {
    className: 'function',
    begin: /:[\w\-.]+/,
    relevance: 0
  };
  var PATH = {
    className: 'string',
    begin: /\B(([\/.])[\w\-.\/=]+)+/,
  };
  var COMMAND_PARAMS = {
    className: 'params',
    begin: /--[\w\-=\/]+/,
  };
  return {
    aliases: ['wildfly-cli'],
    lexemes: '[a-z\-]+',
    keywords: {
      keyword: 'alias batch cd clear command connect connection-factory connection-info data-source deploy ' +
      'deployment-info deployment-overlay echo echo-dmr help history if jdbc-driver-info jms-queue|20 jms-topic|20 ls ' +
      'patch pwd quit read-attribute read-operation reload rollout-plan run-batch set shutdown try unalias ' +
      'undeploy unset version xa-data-source', // module
      literal: 'true false'
    },
    contains: [
      hljs.HASH_COMMENT_MODE,
      hljs.QUOTE_STRING_MODE,
      COMMAND_PARAMS,
      OPERATION,
      PATH,
      PARAMSBLOCK
    ]
  }
};

/***/ }),
/* 204 */
/***/ (function(module, exports) {

module.exports = function(hljs) {
  var LITERALS = {literal: 'true false null'};
  var TYPES = [
    hljs.QUOTE_STRING_MODE,
    hljs.C_NUMBER_MODE
  ];
  var VALUE_CONTAINER = {
    end: ',', endsWithParent: true, excludeEnd: true,
    contains: TYPES,
    keywords: LITERALS
  };
  var OBJECT = {
    begin: '{', end: '}',
    contains: [
      {
        className: 'attr',
        begin: /"/, end: /"/,
        contains: [hljs.BACKSLASH_ESCAPE],
        illegal: '\\n',
      },
      hljs.inherit(VALUE_CONTAINER, {begin: /:/})
    ],
    illegal: '\\S'
  };
  var ARRAY = {
    begin: '\\[', end: '\\]',
    contains: [hljs.inherit(VALUE_CONTAINER)], // inherit is a workaround for a bug that makes shared modes with endsWithParent compile only the ending of one of the parents
    illegal: '\\S'
  };
  TYPES.splice(TYPES.length, 0, OBJECT, ARRAY);
  return {
    contains: TYPES,
    keywords: LITERALS,
    illegal: '\\S'
  };
};

/***/ }),
/* 205 */
/***/ (function(module, exports) {

module.exports = function(hljs) {
  // Since there are numerous special names in Julia, it is too much trouble
  // to maintain them by hand. Hence these names (i.e. keywords, literals and
  // built-ins) are automatically generated from Julia v0.6 itself through
  // the following scripts for each.

  var KEYWORDS = {
    // # keyword generator, multi-word keywords handled manually below
    // foreach(println, ["in", "isa", "where"])
    // for kw in Base.REPLCompletions.complete_keyword("")
    //     if !(contains(kw, " ") || kw == "struct")
    //         println(kw)
    //     end
    // end
    keyword:
      'in isa where ' +
      'baremodule begin break catch ccall const continue do else elseif end export false finally for function ' +
      'global if import importall let local macro module quote return true try using while ' +
      // legacy, to be deprecated in the next release
      'type immutable abstract bitstype typealias ',

    // # literal generator
    // println("true")
    // println("false")
    // for name in Base.REPLCompletions.completions("", 0)[1]
    //     try
    //         v = eval(Symbol(name))
    //         if !(v isa Function || v isa Type || v isa TypeVar || v isa Module || v isa Colon)
    //             println(name)
    //         end
    //     end
    // end
    literal:
      'true false ' +
      'ARGS C_NULL DevNull ENDIAN_BOM ENV I Inf Inf16 Inf32 Inf64 InsertionSort JULIA_HOME LOAD_PATH MergeSort ' +
      'NaN NaN16 NaN32 NaN64 PROGRAM_FILE QuickSort RoundDown RoundFromZero RoundNearest RoundNearestTiesAway ' +
      'RoundNearestTiesUp RoundToZero RoundUp STDERR STDIN STDOUT VERSION catalan e|0 eu|0 eulergamma golden im ' +
      'nothing pi γ π φ ',

    // # built_in generator:
    // for name in Base.REPLCompletions.completions("", 0)[1]
    //     try
    //         v = eval(Symbol(name))
    //         if v isa Type || v isa TypeVar
    //             println(name)
    //         end
    //     end
    // end
    built_in:
      'ANY AbstractArray AbstractChannel AbstractFloat AbstractMatrix AbstractRNG AbstractSerializer AbstractSet ' +
      'AbstractSparseArray AbstractSparseMatrix AbstractSparseVector AbstractString AbstractUnitRange AbstractVecOrMat ' +
      'AbstractVector Any ArgumentError Array AssertionError Associative Base64DecodePipe Base64EncodePipe Bidiagonal '+
      'BigFloat BigInt BitArray BitMatrix BitVector Bool BoundsError BufferStream CachingPool CapturedException ' +
      'CartesianIndex CartesianRange Cchar Cdouble Cfloat Channel Char Cint Cintmax_t Clong Clonglong ClusterManager ' +
      'Cmd CodeInfo Colon Complex Complex128 Complex32 Complex64 CompositeException Condition ConjArray ConjMatrix ' +
      'ConjVector Cptrdiff_t Cshort Csize_t Cssize_t Cstring Cuchar Cuint Cuintmax_t Culong Culonglong Cushort Cwchar_t ' +
      'Cwstring DataType Date DateFormat DateTime DenseArray DenseMatrix DenseVecOrMat DenseVector Diagonal Dict ' +
      'DimensionMismatch Dims DirectIndexString Display DivideError DomainError EOFError EachLine Enum Enumerate ' +
      'ErrorException Exception ExponentialBackOff Expr Factorization FileMonitor Float16 Float32 Float64 Function ' +
      'Future GlobalRef GotoNode HTML Hermitian IO IOBuffer IOContext IOStream IPAddr IPv4 IPv6 IndexCartesian IndexLinear ' +
      'IndexStyle InexactError InitError Int Int128 Int16 Int32 Int64 Int8 IntSet Integer InterruptException ' +
      'InvalidStateException Irrational KeyError LabelNode LinSpace LineNumberNode LoadError LowerTriangular MIME Matrix ' +
      'MersenneTwister Method MethodError MethodTable Module NTuple NewvarNode NullException Nullable Number ObjectIdDict ' +
      'OrdinalRange OutOfMemoryError OverflowError Pair ParseError PartialQuickSort PermutedDimsArray Pipe ' +
      'PollingFileWatcher ProcessExitedException Ptr QuoteNode RandomDevice Range RangeIndex Rational RawFD ' +
      'ReadOnlyMemoryError Real ReentrantLock Ref Regex RegexMatch RemoteChannel RemoteException RevString RoundingMode ' +
      'RowVector SSAValue SegmentationFault SerializationState Set SharedArray SharedMatrix SharedVector Signed ' +
      'SimpleVector Slot SlotNumber SparseMatrixCSC SparseVector StackFrame StackOverflowError StackTrace StepRange ' +
      'StepRangeLen StridedArray StridedMatrix StridedVecOrMat StridedVector String SubArray SubString SymTridiagonal ' +
      'Symbol Symmetric SystemError TCPSocket Task Text TextDisplay Timer Tridiagonal Tuple Type TypeError TypeMapEntry ' +
      'TypeMapLevel TypeName TypeVar TypedSlot UDPSocket UInt UInt128 UInt16 UInt32 UInt64 UInt8 UndefRefError UndefVarError ' +
      'UnicodeError UniformScaling Union UnionAll UnitRange Unsigned UpperTriangular Val Vararg VecElement VecOrMat Vector ' +
      'VersionNumber Void WeakKeyDict WeakRef WorkerConfig WorkerPool '
  };

  // ref: http://julia.readthedocs.org/en/latest/manual/variables/#allowed-variable-names
  var VARIABLE_NAME_RE = '[A-Za-z_\\u00A1-\\uFFFF][A-Za-z_0-9\\u00A1-\\uFFFF]*';

  // placeholder for recursive self-reference
  var DEFAULT = {
    lexemes: VARIABLE_NAME_RE, keywords: KEYWORDS, illegal: /<\//
  };

  // ref: http://julia.readthedocs.org/en/latest/manual/integers-and-floating-point-numbers/
  var NUMBER = {
    className: 'number',
    // supported numeric literals:
    //  * binary literal (e.g. 0x10)
    //  * octal literal (e.g. 0o76543210)
    //  * hexadecimal literal (e.g. 0xfedcba876543210)
    //  * hexadecimal floating point literal (e.g. 0x1p0, 0x1.2p2)
    //  * decimal literal (e.g. 9876543210, 100_000_000)
    //  * floating pointe literal (e.g. 1.2, 1.2f, .2, 1., 1.2e10, 1.2e-10)
    begin: /(\b0x[\d_]*(\.[\d_]*)?|0x\.\d[\d_]*)p[-+]?\d+|\b0[box][a-fA-F0-9][a-fA-F0-9_]*|(\b\d[\d_]*(\.[\d_]*)?|\.\d[\d_]*)([eEfF][-+]?\d+)?/,
    relevance: 0
  };

  var CHAR = {
    className: 'string',
    begin: /'(.|\\[xXuU][a-zA-Z0-9]+)'/
  };

  var INTERPOLATION = {
    className: 'subst',
    begin: /\$\(/, end: /\)/,
    keywords: KEYWORDS
  };

  var INTERPOLATED_VARIABLE = {
    className: 'variable',
    begin: '\\$' + VARIABLE_NAME_RE
  };

  // TODO: neatly escape normal code in string literal
  var STRING = {
    className: 'string',
    contains: [hljs.BACKSLASH_ESCAPE, INTERPOLATION, INTERPOLATED_VARIABLE],
    variants: [
      { begin: /\w*"""/, end: /"""\w*/, relevance: 10 },
      { begin: /\w*"/, end: /"\w*/ }
    ]
  };

  var COMMAND = {
    className: 'string',
    contains: [hljs.BACKSLASH_ESCAPE, INTERPOLATION, INTERPOLATED_VARIABLE],
    begin: '`', end: '`'
  };

  var MACROCALL = {
    className: 'meta',
    begin: '@' + VARIABLE_NAME_RE
  };

  var COMMENT = {
    className: 'comment',
    variants: [
      { begin: '#=', end: '=#', relevance: 10 },
      { begin: '#', end: '$' }
    ]
  };

  DEFAULT.contains = [
    NUMBER,
    CHAR,
    STRING,
    COMMAND,
    MACROCALL,
    COMMENT,
    hljs.HASH_COMMENT_MODE,
    {
      className: 'keyword',
      begin:
        '\\b(((abstract|primitive)\\s+)type|(mutable\\s+)?struct)\\b'
    },
    {begin: /<:/}  // relevance booster
  ];
  INTERPOLATION.contains = DEFAULT.contains;

  return DEFAULT;
};

/***/ }),
/* 206 */
/***/ (function(module, exports) {

module.exports = function(hljs) {
  return {
    contains: [
      {
        className: 'meta',
        begin: /^julia>/,
        relevance: 10,
        starts: {
          // end the highlighting if we are on a new line and the line does not have at
          // least six spaces in the beginning
          end: /^(?![ ]{6})/,
          subLanguage: 'julia'
      },
      // jldoctest Markdown blocks are used in the Julia manual and package docs indicate
      // code snippets that should be verified when the documentation is built. They can be
      // either REPL-like or script-like, but are usually REPL-like and therefore we apply
      // julia-repl highlighting to them. More information can be found in Documenter's
      // manual: https://juliadocs.github.io/Documenter.jl/latest/man/doctests.html
      aliases: ['jldoctest']
      }
    ]
  }
};

/***/ }),
/* 207 */
/***/ (function(module, exports) {

module.exports = function(hljs) {
  var KEYWORDS = {
    keyword:
      'abstract as val var vararg get set class object open private protected public noinline ' +
      'crossinline dynamic final enum if else do while for when throw try catch finally ' +
      'import package is in fun override companion reified inline lateinit init' +
      'interface annotation data sealed internal infix operator out by constructor super ' +
      // to be deleted soon
      'trait volatile transient native default',
    built_in:
      'Byte Short Char Int Long Boolean Float Double Void Unit Nothing',
    literal:
      'true false null'
  };
  var KEYWORDS_WITH_LABEL = {
    className: 'keyword',
    begin: /\b(break|continue|return|this)\b/,
    starts: {
      contains: [
        {
          className: 'symbol',
          begin: /@\w+/
        }
      ]
    }
  };
  var LABEL = {
    className: 'symbol', begin: hljs.UNDERSCORE_IDENT_RE + '@'
  };

  // for string templates
  var SUBST = {
    className: 'subst',
    begin: '\\${', end: '}', contains: [hljs.APOS_STRING_MODE, hljs.C_NUMBER_MODE]
  };
  var VARIABLE = {
    className: 'variable', begin: '\\$' + hljs.UNDERSCORE_IDENT_RE
  };
  var STRING = {
    className: 'string',
    variants: [
      {
        begin: '"""', end: '"""',
        contains: [VARIABLE, SUBST]
      },
      // Can't use built-in modes easily, as we want to use STRING in the meta
      // context as 'meta-string' and there's no syntax to remove explicitly set
      // classNames in built-in modes.
      {
        begin: '\'', end: '\'',
        illegal: /\n/,
        contains: [hljs.BACKSLASH_ESCAPE]
      },
      {
        begin: '"', end: '"',
        illegal: /\n/,
        contains: [hljs.BACKSLASH_ESCAPE, VARIABLE, SUBST]
      }
    ]
  };

  var ANNOTATION_USE_SITE = {
    className: 'meta', begin: '@(?:file|property|field|get|set|receiver|param|setparam|delegate)\\s*:(?:\\s*' + hljs.UNDERSCORE_IDENT_RE + ')?'
  };
  var ANNOTATION = {
    className: 'meta', begin: '@' + hljs.UNDERSCORE_IDENT_RE,
    contains: [
      {
        begin: /\(/, end: /\)/,
        contains: [
          hljs.inherit(STRING, {className: 'meta-string'})
        ]
      }
    ]
  };

  return {
    keywords: KEYWORDS,
    contains : [
      hljs.COMMENT(
        '/\\*\\*',
        '\\*/',
        {
          relevance : 0,
          contains : [{
            className : 'doctag',
            begin : '@[A-Za-z]+'
          }]
        }
      ),
      hljs.C_LINE_COMMENT_MODE,
      hljs.C_BLOCK_COMMENT_MODE,
      KEYWORDS_WITH_LABEL,
      LABEL,
      ANNOTATION_USE_SITE,
      ANNOTATION,
      {
        className: 'function',
        beginKeywords: 'fun', end: '[(]|$',
        returnBegin: true,
        excludeEnd: true,
        keywords: KEYWORDS,
        illegal: /fun\s+(<.*>)?[^\s\(]+(\s+[^\s\(]+)\s*=/,
        relevance: 5,
        contains: [
          {
            begin: hljs.UNDERSCORE_IDENT_RE + '\\s*\\(', returnBegin: true,
            relevance: 0,
            contains: [hljs.UNDERSCORE_TITLE_MODE]
          },
          {
            className: 'type',
            begin: /</, end: />/, keywords: 'reified',
            relevance: 0
          },
          {
            className: 'params',
            begin: /\(/, end: /\)/,
            endsParent: true,
            keywords: KEYWORDS,
            relevance: 0,
            contains: [
              {
                begin: /:/, end: /[=,\/]/, endsWithParent: true,
                contains: [
                  {className: 'type', begin: hljs.UNDERSCORE_IDENT_RE},
                  hljs.C_LINE_COMMENT_MODE,
                  hljs.C_BLOCK_COMMENT_MODE
                ],
                relevance: 0
              },
              hljs.C_LINE_COMMENT_MODE,
              hljs.C_BLOCK_COMMENT_MODE,
              ANNOTATION_USE_SITE,
              ANNOTATION,
              STRING,
              hljs.C_NUMBER_MODE
            ]
          },
          hljs.C_BLOCK_COMMENT_MODE
        ]
      },
      {
        className: 'class',
        beginKeywords: 'class interface trait', end: /[:\{(]|$/, // remove 'trait' when removed from KEYWORDS
        excludeEnd: true,
        illegal: 'extends implements',
        contains: [
          {beginKeywords: 'public protected internal private constructor'},
          hljs.UNDERSCORE_TITLE_MODE,
          {
            className: 'type',
            begin: /</, end: />/, excludeBegin: true, excludeEnd: true,
            relevance: 0
          },
          {
            className: 'type',
            begin: /[,:]\s*/, end: /[<\(,]|$/, excludeBegin: true, returnEnd: true
          },
          ANNOTATION_USE_SITE,
          ANNOTATION
        ]
      },
      STRING,
      {
        className: 'meta',
        begin: "^#!/usr/bin/env", end: '$',
        illegal: '\n'
      },
      hljs.C_NUMBER_MODE
    ]
  };
};

/***/ }),
/* 208 */
/***/ (function(module, exports) {

module.exports = function(hljs) {
  var LASSO_IDENT_RE = '[a-zA-Z_][\\w.]*';
  var LASSO_ANGLE_RE = '<\\?(lasso(script)?|=)';
  var LASSO_CLOSE_RE = '\\]|\\?>';
  var LASSO_KEYWORDS = {
    literal:
      'true false none minimal full all void and or not ' +
      'bw nbw ew new cn ncn lt lte gt gte eq neq rx nrx ft',
    built_in:
      'array date decimal duration integer map pair string tag xml null ' +
      'boolean bytes keyword list locale queue set stack staticarray ' +
      'local var variable global data self inherited currentcapture givenblock',
    keyword:
      'cache database_names database_schemanames database_tablenames ' +
      'define_tag define_type email_batch encode_set html_comment handle ' +
      'handle_error header if inline iterate ljax_target link ' +
      'link_currentaction link_currentgroup link_currentrecord link_detail ' +
      'link_firstgroup link_firstrecord link_lastgroup link_lastrecord ' +
      'link_nextgroup link_nextrecord link_prevgroup link_prevrecord log ' +
      'loop namespace_using output_none portal private protect records ' +
      'referer referrer repeating resultset rows search_args ' +
      'search_arguments select sort_args sort_arguments thread_atomic ' +
      'value_list while abort case else fail_if fail_ifnot fail if_empty ' +
      'if_false if_null if_true loop_abort loop_continue loop_count params ' +
      'params_up return return_value run_children soap_definetag ' +
      'soap_lastrequest soap_lastresponse tag_name ascending average by ' +
      'define descending do equals frozen group handle_failure import in ' +
      'into join let match max min on order parent protected provide public ' +
      'require returnhome skip split_thread sum take thread to trait type ' +
      'where with yield yieldhome'
  };
  var HTML_COMMENT = hljs.COMMENT(
    '<!--',
    '-->',
    {
      relevance: 0
    }
  );
  var LASSO_NOPROCESS = {
    className: 'meta',
    begin: '\\[noprocess\\]',
    starts: {
      end: '\\[/noprocess\\]',
      returnEnd: true,
      contains: [HTML_COMMENT]
    }
  };
  var LASSO_START = {
    className: 'meta',
    begin: '\\[/noprocess|' + LASSO_ANGLE_RE
  };
  var LASSO_DATAMEMBER = {
    className: 'symbol',
    begin: '\'' + LASSO_IDENT_RE + '\''
  };
  var LASSO_CODE = [
    hljs.C_LINE_COMMENT_MODE,
    hljs.C_BLOCK_COMMENT_MODE,
    hljs.inherit(hljs.C_NUMBER_MODE, {begin: hljs.C_NUMBER_RE + '|(-?infinity|NaN)\\b'}),
    hljs.inherit(hljs.APOS_STRING_MODE, {illegal: null}),
    hljs.inherit(hljs.QUOTE_STRING_MODE, {illegal: null}),
    {
      className: 'string',
      begin: '`', end: '`'
    },
    { // variables
      variants: [
        {
          begin: '[#$]' + LASSO_IDENT_RE
        },
        {
          begin: '#', end: '\\d+',
          illegal: '\\W'
        }
      ]
    },
    {
      className: 'type',
      begin: '::\\s*', end: LASSO_IDENT_RE,
      illegal: '\\W'
    },
    {
      className: 'params',
      variants: [
        {
          begin: '-(?!infinity)' + LASSO_IDENT_RE,
          relevance: 0
        },
        {
          begin: '(\\.\\.\\.)'
        }
      ]
    },
    {
      begin: /(->|\.)\s*/,
      relevance: 0,
      contains: [LASSO_DATAMEMBER]
    },
    {
      className: 'class',
      beginKeywords: 'define',
      returnEnd: true, end: '\\(|=>',
      contains: [
        hljs.inherit(hljs.TITLE_MODE, {begin: LASSO_IDENT_RE + '(=(?!>))?|[-+*/%](?!>)'})
      ]
    }
  ];
  return {
    aliases: ['ls', 'lassoscript'],
    case_insensitive: true,
    lexemes: LASSO_IDENT_RE + '|&[lg]t;',
    keywords: LASSO_KEYWORDS,
    contains: [
      {
        className: 'meta',
        begin: LASSO_CLOSE_RE,
        relevance: 0,
        starts: { // markup
          end: '\\[|' + LASSO_ANGLE_RE,
          returnEnd: true,
          relevance: 0,
          contains: [HTML_COMMENT]
        }
      },
      LASSO_NOPROCESS,
      LASSO_START,
      {
        className: 'meta',
        begin: '\\[no_square_brackets',
        starts: {
          end: '\\[/no_square_brackets\\]', // not implemented in the language
          lexemes: LASSO_IDENT_RE + '|&[lg]t;',
          keywords: LASSO_KEYWORDS,
          contains: [
            {
              className: 'meta',
              begin: LASSO_CLOSE_RE,
              relevance: 0,
              starts: {
                end: '\\[noprocess\\]|' + LASSO_ANGLE_RE,
                returnEnd: true,
                contains: [HTML_COMMENT]
              }
            },
            LASSO_NOPROCESS,
            LASSO_START
          ].concat(LASSO_CODE)
        }
      },
      {
        className: 'meta',
        begin: '\\[',
        relevance: 0
      },
      {
        className: 'meta',
        begin: '^#!', end:'lasso9$',
        relevance: 10
      }
    ].concat(LASSO_CODE)
  };
};

/***/ }),
/* 209 */
/***/ (function(module, exports) {

module.exports = function(hljs) {
  return {
    contains: [
      {
        className: 'attribute',
        begin: '^dn', end: ': ', excludeEnd: true,
        starts: {end: '$', relevance: 0},
        relevance: 10
      },
      {
        className: 'attribute',
        begin: '^\\w', end: ': ', excludeEnd: true,
        starts: {end: '$', relevance: 0}
      },
      {
        className: 'literal',
        begin: '^-', end: '$'
      },
      hljs.HASH_COMMENT_MODE
    ]
  };
};

/***/ }),
/* 210 */
/***/ (function(module, exports) {

module.exports = function (hljs) {
  return {
    contains: [
      {
        className: 'function',
        begin: '#+' + '[A-Za-z_0-9]*' + '\\(',
        end:' {',
        returnBegin: true,
        excludeEnd: true,
        contains : [
          {
            className: 'keyword',
            begin: '#+'
          },
          {
            className: 'title',
            begin: '[A-Za-z_][A-Za-z_0-9]*'
          },
          {
            className: 'params',
            begin: '\\(', end: '\\)',
            endsParent: true,
            contains: [
              {
                className: 'string',
                begin: '"',
                end: '"'
              },
              {
                className: 'variable',
                begin: '[A-Za-z_][A-Za-z_0-9]*'
              }
            ]
          }
        ]
      }
    ]
  };
};

/***/ }),
/* 211 */
/***/ (function(module, exports) {

module.exports = function(hljs) {
  var IDENT_RE        = '[\\w-]+'; // yes, Less identifiers may begin with a digit
  var INTERP_IDENT_RE = '(' + IDENT_RE + '|@{' + IDENT_RE + '})';

  /* Generic Modes */

  var RULES = [], VALUE = []; // forward def. for recursive modes

  var STRING_MODE = function(c) { return {
    // Less strings are not multiline (also include '~' for more consistent coloring of "escaped" strings)
    className: 'string', begin: '~?' + c + '.*?' + c
  };};

  var IDENT_MODE = function(name, begin, relevance) { return {
    className: name, begin: begin, relevance: relevance
  };};

  var PARENS_MODE = {
    // used only to properly balance nested parens inside mixin call, def. arg list
    begin: '\\(', end: '\\)', contains: VALUE, relevance: 0
  };

  // generic Less highlighter (used almost everywhere except selectors):
  VALUE.push(
    hljs.C_LINE_COMMENT_MODE,
    hljs.C_BLOCK_COMMENT_MODE,
    STRING_MODE("'"),
    STRING_MODE('"'),
    hljs.CSS_NUMBER_MODE, // fixme: it does not include dot for numbers like .5em :(
    {
      begin: '(url|data-uri)\\(',
      starts: {className: 'string', end: '[\\)\\n]', excludeEnd: true}
    },
    IDENT_MODE('number', '#[0-9A-Fa-f]+\\b'),
    PARENS_MODE,
    IDENT_MODE('variable', '@@?' + IDENT_RE, 10),
    IDENT_MODE('variable', '@{'  + IDENT_RE + '}'),
    IDENT_MODE('built_in', '~?`[^`]*?`'), // inline javascript (or whatever host language) *multiline* string
    { // @media features (it’s here to not duplicate things in AT_RULE_MODE with extra PARENS_MODE overriding):
      className: 'attribute', begin: IDENT_RE + '\\s*:', end: ':', returnBegin: true, excludeEnd: true
    },
    {
      className: 'meta',
      begin: '!important'
    }
  );

  var VALUE_WITH_RULESETS = VALUE.concat({
    begin: '{', end: '}', contains: RULES
  });

  var MIXIN_GUARD_MODE = {
    beginKeywords: 'when', endsWithParent: true,
    contains: [{beginKeywords: 'and not'}].concat(VALUE) // using this form to override VALUE’s 'function' match
  };

  /* Rule-Level Modes */

  var RULE_MODE = {
    begin: INTERP_IDENT_RE + '\\s*:', returnBegin: true, end: '[;}]',
    relevance: 0,
    contains: [
      {
        className: 'attribute',
        begin: INTERP_IDENT_RE, end: ':', excludeEnd: true,
        starts: {
          endsWithParent: true, illegal: '[<=$]',
          relevance: 0,
          contains: VALUE
        }
      }
    ]
  };

  var AT_RULE_MODE = {
    className: 'keyword',
    begin: '@(import|media|charset|font-face|(-[a-z]+-)?keyframes|supports|document|namespace|page|viewport|host)\\b',
    starts: {end: '[;{}]', returnEnd: true, contains: VALUE, relevance: 0}
  };

  // variable definitions and calls
  var VAR_RULE_MODE = {
    className: 'variable',
    variants: [
      // using more strict pattern for higher relevance to increase chances of Less detection.
      // this is *the only* Less specific statement used in most of the sources, so...
      // (we’ll still often loose to the css-parser unless there's '//' comment,
      // simply because 1 variable just can't beat 99 properties :)
      {begin: '@' + IDENT_RE + '\\s*:', relevance: 15},
      {begin: '@' + IDENT_RE}
    ],
    starts: {end: '[;}]', returnEnd: true, contains: VALUE_WITH_RULESETS}
  };

  var SELECTOR_MODE = {
    // first parse unambiguous selectors (i.e. those not starting with tag)
    // then fall into the scary lookahead-discriminator variant.
    // this mode also handles mixin definitions and calls
    variants: [{
      begin: '[\\.#:&\\[>]', end: '[;{}]'  // mixin calls end with ';'
      }, {
      begin: INTERP_IDENT_RE, end: '{'
    }],
    returnBegin: true,
    returnEnd:   true,
    illegal: '[<=\'$"]',
    relevance: 0,
    contains: [
      hljs.C_LINE_COMMENT_MODE,
      hljs.C_BLOCK_COMMENT_MODE,
      MIXIN_GUARD_MODE,
      IDENT_MODE('keyword',  'all\\b'),
      IDENT_MODE('variable', '@{'  + IDENT_RE + '}'),     // otherwise it’s identified as tag
      IDENT_MODE('selector-tag',  INTERP_IDENT_RE + '%?', 0), // '%' for more consistent coloring of @keyframes "tags"
      IDENT_MODE('selector-id', '#' + INTERP_IDENT_RE),
      IDENT_MODE('selector-class', '\\.' + INTERP_IDENT_RE, 0),
      IDENT_MODE('selector-tag',  '&', 0),
      {className: 'selector-attr', begin: '\\[', end: '\\]'},
      {className: 'selector-pseudo', begin: /:(:)?[a-zA-Z0-9\_\-\+\(\)"'.]+/},
      {begin: '\\(', end: '\\)', contains: VALUE_WITH_RULESETS}, // argument list of parametric mixins
      {begin: '!important'} // eat !important after mixin call or it will be colored as tag
    ]
  };

  RULES.push(
    hljs.C_LINE_COMMENT_MODE,
    hljs.C_BLOCK_COMMENT_MODE,
    AT_RULE_MODE,
    VAR_RULE_MODE,
    RULE_MODE,
    SELECTOR_MODE
  );

  return {
    case_insensitive: true,
    illegal: '[=>\'/<($"]',
    contains: RULES
  };
};

/***/ }),
/* 212 */
/***/ (function(module, exports) {

module.exports = function(hljs) {
  var LISP_IDENT_RE = '[a-zA-Z_\\-\\+\\*\\/\\<\\=\\>\\&\\#][a-zA-Z0-9_\\-\\+\\*\\/\\<\\=\\>\\&\\#!]*';
  var MEC_RE = '\\|[^]*?\\|';
  var LISP_SIMPLE_NUMBER_RE = '(\\-|\\+)?\\d+(\\.\\d+|\\/\\d+)?((d|e|f|l|s|D|E|F|L|S)(\\+|\\-)?\\d+)?';
  var SHEBANG = {
    className: 'meta',
    begin: '^#!', end: '$'
  };
  var LITERAL = {
    className: 'literal',
    begin: '\\b(t{1}|nil)\\b'
  };
  var NUMBER = {
    className: 'number',
    variants: [
      {begin: LISP_SIMPLE_NUMBER_RE, relevance: 0},
      {begin: '#(b|B)[0-1]+(/[0-1]+)?'},
      {begin: '#(o|O)[0-7]+(/[0-7]+)?'},
      {begin: '#(x|X)[0-9a-fA-F]+(/[0-9a-fA-F]+)?'},
      {begin: '#(c|C)\\(' + LISP_SIMPLE_NUMBER_RE + ' +' + LISP_SIMPLE_NUMBER_RE, end: '\\)'}
    ]
  };
  var STRING = hljs.inherit(hljs.QUOTE_STRING_MODE, {illegal: null});
  var COMMENT = hljs.COMMENT(
    ';', '$',
    {
      relevance: 0
    }
  );
  var VARIABLE = {
    begin: '\\*', end: '\\*'
  };
  var KEYWORD = {
    className: 'symbol',
    begin: '[:&]' + LISP_IDENT_RE
  };
  var IDENT = {
    begin: LISP_IDENT_RE,
    relevance: 0
  };
  var MEC = {
    begin: MEC_RE
  };
  var QUOTED_LIST = {
    begin: '\\(', end: '\\)',
    contains: ['self', LITERAL, STRING, NUMBER, IDENT]
  };
  var QUOTED = {
    contains: [NUMBER, STRING, VARIABLE, KEYWORD, QUOTED_LIST, IDENT],
    variants: [
      {
        begin: '[\'`]\\(', end: '\\)'
      },
      {
        begin: '\\(quote ', end: '\\)',
        keywords: {name: 'quote'}
      },
      {
        begin: '\'' + MEC_RE
      }
    ]
  };
  var QUOTED_ATOM = {
    variants: [
      {begin: '\'' + LISP_IDENT_RE},
      {begin: '#\'' + LISP_IDENT_RE + '(::' + LISP_IDENT_RE + ')*'}
    ]
  };
  var LIST = {
    begin: '\\(\\s*', end: '\\)'
  };
  var BODY = {
    endsWithParent: true,
    relevance: 0
  };
  LIST.contains = [
    {
      className: 'name',
      variants: [
        {begin: LISP_IDENT_RE},
        {begin: MEC_RE}
      ]
    },
    BODY
  ];
  BODY.contains = [QUOTED, QUOTED_ATOM, LIST, LITERAL, NUMBER, STRING, COMMENT, VARIABLE, KEYWORD, MEC, IDENT];

  return {
    illegal: /\S/,
    contains: [
      NUMBER,
      SHEBANG,
      LITERAL,
      STRING,
      COMMENT,
      QUOTED,
      QUOTED_ATOM,
      LIST,
      IDENT
    ]
  };
};

/***/ }),
/* 213 */
/***/ (function(module, exports) {

module.exports = function(hljs) {
  var VARIABLE = {
    begin: '\\b[gtps][A-Z]+[A-Za-z0-9_\\-]*\\b|\\$_[A-Z]+',
    relevance: 0
  };
  var COMMENT_MODES = [
    hljs.C_BLOCK_COMMENT_MODE,
    hljs.HASH_COMMENT_MODE,
    hljs.COMMENT('--', '$'),
    hljs.COMMENT('[^:]//', '$')
  ];
  var TITLE1 = hljs.inherit(hljs.TITLE_MODE, {
    variants: [
      {begin: '\\b_*rig[A-Z]+[A-Za-z0-9_\\-]*'},
      {begin: '\\b_[a-z0-9\\-]+'}
    ]
  });
  var TITLE2 = hljs.inherit(hljs.TITLE_MODE, {begin: '\\b([A-Za-z0-9_\\-]+)\\b'});
  return {
    case_insensitive: false,
    keywords: {
      keyword:
        '$_COOKIE $_FILES $_GET $_GET_BINARY $_GET_RAW $_POST $_POST_BINARY $_POST_RAW $_SESSION $_SERVER ' +
        'codepoint codepoints segment segments codeunit codeunits sentence sentences trueWord trueWords paragraph ' +
        'after byte bytes english the until http forever descending using line real8 with seventh ' +
        'for stdout finally element word words fourth before black ninth sixth characters chars stderr ' +
        'uInt1 uInt1s uInt2 uInt2s stdin string lines relative rel any fifth items from middle mid ' +
        'at else of catch then third it file milliseconds seconds second secs sec int1 int1s int4 ' +
        'int4s internet int2 int2s normal text item last long detailed effective uInt4 uInt4s repeat ' +
        'end repeat URL in try into switch to words https token binfile each tenth as ticks tick ' +
        'system real4 by dateItems without char character ascending eighth whole dateTime numeric short ' +
        'first ftp integer abbreviated abbr abbrev private case while if ' +
        'div mod wrap and or bitAnd bitNot bitOr bitXor among not in a an within ' +
        'contains ends with begins the keys of keys',
      literal:
        'SIX TEN FORMFEED NINE ZERO NONE SPACE FOUR FALSE COLON CRLF PI COMMA ENDOFFILE EOF EIGHT FIVE ' +
        'QUOTE EMPTY ONE TRUE RETURN CR LINEFEED RIGHT BACKSLASH NULL SEVEN TAB THREE TWO ' +
        'six ten formfeed nine zero none space four false colon crlf pi comma endoffile eof eight five ' +
        'quote empty one true return cr linefeed right backslash null seven tab three two ' +
        'RIVERSION RISTATE FILE_READ_MODE FILE_WRITE_MODE FILE_WRITE_MODE DIR_WRITE_MODE FILE_READ_UMASK ' +
        'FILE_WRITE_UMASK DIR_READ_UMASK DIR_WRITE_UMASK',
      built_in:
        'put abs acos aliasReference annuity arrayDecode arrayEncode asin atan atan2 average avg avgDev base64Decode ' +
        'base64Encode baseConvert binaryDecode binaryEncode byteOffset byteToNum cachedURL cachedURLs charToNum ' +
        'cipherNames codepointOffset codepointProperty codepointToNum codeunitOffset commandNames compound compress ' +
        'constantNames cos date dateFormat decompress directories ' +
        'diskSpace DNSServers exp exp1 exp2 exp10 extents files flushEvents folders format functionNames geometricMean global ' +
        'globals hasMemory harmonicMean hostAddress hostAddressToName hostName hostNameToAddress isNumber ISOToMac itemOffset ' +
        'keys len length libURLErrorData libUrlFormData libURLftpCommand libURLLastHTTPHeaders libURLLastRHHeaders ' +
        'libUrlMultipartFormAddPart libUrlMultipartFormData libURLVersion lineOffset ln ln1 localNames log log2 log10 ' +
        'longFilePath lower macToISO matchChunk matchText matrixMultiply max md5Digest median merge millisec ' +
        'millisecs millisecond milliseconds min monthNames nativeCharToNum normalizeText num number numToByte numToChar ' +
        'numToCodepoint numToNativeChar offset open openfiles openProcesses openProcessIDs openSockets ' +
        'paragraphOffset paramCount param params peerAddress pendingMessages platform popStdDev populationStandardDeviation ' +
        'populationVariance popVariance processID random randomBytes replaceText result revCreateXMLTree revCreateXMLTreeFromFile ' +
        'revCurrentRecord revCurrentRecordIsFirst revCurrentRecordIsLast revDatabaseColumnCount revDatabaseColumnIsNull ' +
        'revDatabaseColumnLengths revDatabaseColumnNames revDatabaseColumnNamed revDatabaseColumnNumbered ' +
        'revDatabaseColumnTypes revDatabaseConnectResult revDatabaseCursors revDatabaseID revDatabaseTableNames ' +
        'revDatabaseType revDataFromQuery revdb_closeCursor revdb_columnbynumber revdb_columncount revdb_columnisnull ' +
        'revdb_columnlengths revdb_columnnames revdb_columntypes revdb_commit revdb_connect revdb_connections ' +
        'revdb_connectionerr revdb_currentrecord revdb_cursorconnection revdb_cursorerr revdb_cursors revdb_dbtype ' +
        'revdb_disconnect revdb_execute revdb_iseof revdb_isbof revdb_movefirst revdb_movelast revdb_movenext ' +
        'revdb_moveprev revdb_query revdb_querylist revdb_recordcount revdb_rollback revdb_tablenames ' +
        'revGetDatabaseDriverPath revNumberOfRecords revOpenDatabase revOpenDatabases revQueryDatabase ' +
        'revQueryDatabaseBlob revQueryResult revQueryIsAtStart revQueryIsAtEnd revUnixFromMacPath revXMLAttribute ' +
        'revXMLAttributes revXMLAttributeValues revXMLChildContents revXMLChildNames revXMLCreateTreeFromFileWithNamespaces ' +
        'revXMLCreateTreeWithNamespaces revXMLDataFromXPathQuery revXMLEvaluateXPath revXMLFirstChild revXMLMatchingNode ' +
        'revXMLNextSibling revXMLNodeContents revXMLNumberOfChildren revXMLParent revXMLPreviousSibling ' +
        'revXMLRootNode revXMLRPC_CreateRequest revXMLRPC_Documents revXMLRPC_Error ' +
        'revXMLRPC_GetHost revXMLRPC_GetMethod revXMLRPC_GetParam revXMLText revXMLRPC_Execute ' +
        'revXMLRPC_GetParamCount revXMLRPC_GetParamNode revXMLRPC_GetParamType revXMLRPC_GetPath revXMLRPC_GetPort ' +
        'revXMLRPC_GetProtocol revXMLRPC_GetRequest revXMLRPC_GetResponse revXMLRPC_GetSocket revXMLTree ' +
        'revXMLTrees revXMLValidateDTD revZipDescribeItem revZipEnumerateItems revZipOpenArchives round sampVariance ' +
        'sec secs seconds sentenceOffset sha1Digest shell shortFilePath sin specialFolderPath sqrt standardDeviation statRound ' +
        'stdDev sum sysError systemVersion tan tempName textDecode textEncode tick ticks time to tokenOffset toLower toUpper ' +
        'transpose truewordOffset trunc uniDecode uniEncode upper URLDecode URLEncode URLStatus uuid value variableNames ' +
        'variance version waitDepth weekdayNames wordOffset xsltApplyStylesheet xsltApplyStylesheetFromFile xsltLoadStylesheet ' +
        'xsltLoadStylesheetFromFile add breakpoint cancel clear local variable file word line folder directory URL close socket process ' +
        'combine constant convert create new alias folder directory decrypt delete variable word line folder ' +
        'directory URL dispatch divide do encrypt filter get include intersect kill libURLDownloadToFile ' +
        'libURLFollowHttpRedirects libURLftpUpload libURLftpUploadFile libURLresetAll libUrlSetAuthCallback ' +
        'libURLSetCustomHTTPHeaders libUrlSetExpect100 libURLSetFTPListCommand libURLSetFTPMode libURLSetFTPStopTime ' +
        'libURLSetStatusCallback load multiply socket prepare process post seek rel relative read from process rename ' +
        'replace require resetAll resolve revAddXMLNode revAppendXML revCloseCursor revCloseDatabase revCommitDatabase ' +
        'revCopyFile revCopyFolder revCopyXMLNode revDeleteFolder revDeleteXMLNode revDeleteAllXMLTrees ' +
        'revDeleteXMLTree revExecuteSQL revGoURL revInsertXMLNode revMoveFolder revMoveToFirstRecord revMoveToLastRecord ' +
        'revMoveToNextRecord revMoveToPreviousRecord revMoveToRecord revMoveXMLNode revPutIntoXMLNode revRollBackDatabase ' +
        'revSetDatabaseDriverPath revSetXMLAttribute revXMLRPC_AddParam revXMLRPC_DeleteAllDocuments revXMLAddDTD ' +
        'revXMLRPC_Free revXMLRPC_FreeAll revXMLRPC_DeleteDocument revXMLRPC_DeleteParam revXMLRPC_SetHost ' +
        'revXMLRPC_SetMethod revXMLRPC_SetPort revXMLRPC_SetProtocol revXMLRPC_SetSocket revZipAddItemWithData ' +
        'revZipAddItemWithFile revZipAddUncompressedItemWithData revZipAddUncompressedItemWithFile revZipCancel ' +
        'revZipCloseArchive revZipDeleteItem revZipExtractItemToFile revZipExtractItemToVariable revZipSetProgressCallback ' +
        'revZipRenameItem revZipReplaceItemWithData revZipReplaceItemWithFile revZipOpenArchive send set sort split start stop ' +
        'subtract union unload wait write'
    },
    contains: [
      VARIABLE,
      {
        className: 'keyword',
        begin: '\\bend\\sif\\b'
      },
      {
        className: 'function',
        beginKeywords: 'function', end: '$',
        contains: [
          VARIABLE,
          TITLE2,
          hljs.APOS_STRING_MODE,
          hljs.QUOTE_STRING_MODE,
          hljs.BINARY_NUMBER_MODE,
          hljs.C_NUMBER_MODE,
          TITLE1
        ]
      },
      {
        className: 'function',
        begin: '\\bend\\s+', end: '$',
        keywords: 'end',
        contains: [
          TITLE2,
          TITLE1
        ],
        relevance: 0
      },
      {
        beginKeywords: 'command on', end: '$',
        contains: [
          VARIABLE,
          TITLE2,
          hljs.APOS_STRING_MODE,
          hljs.QUOTE_STRING_MODE,
          hljs.BINARY_NUMBER_MODE,
          hljs.C_NUMBER_MODE,
          TITLE1
        ]
      },
      {
        className: 'meta',
        variants: [
          {
            begin: '<\\?(rev|lc|livecode)',
            relevance: 10
          },
          { begin: '<\\?' },
          { begin: '\\?>' }
        ]
      },
      hljs.APOS_STRING_MODE,
      hljs.QUOTE_STRING_MODE,
      hljs.BINARY_NUMBER_MODE,
      hljs.C_NUMBER_MODE,
      TITLE1
    ].concat(COMMENT_MODES),
    illegal: ';$|^\\[|^=|&|{'
  };
};

/***/ }),
/* 214 */
/***/ (function(module, exports) {

module.exports = function(hljs) {
  var KEYWORDS = {
    keyword:
      // JS keywords
      'in if for while finally new do return else break catch instanceof throw try this ' +
      'switch continue typeof delete debugger case default function var with ' +
      // LiveScript keywords
      'then unless until loop of by when and or is isnt not it that otherwise from to til fallthrough super ' +
      'case default function var void const let enum export import native ' +
      '__hasProp __extends __slice __bind __indexOf',
    literal:
      // JS literals
      'true false null undefined ' +
      // LiveScript literals
      'yes no on off it that void',
    built_in:
      'npm require console print module global window document'
  };
  var JS_IDENT_RE = '[A-Za-z$_](?:\-[0-9A-Za-z$_]|[0-9A-Za-z$_])*';
  var TITLE = hljs.inherit(hljs.TITLE_MODE, {begin: JS_IDENT_RE});
  var SUBST = {
    className: 'subst',
    begin: /#\{/, end: /}/,
    keywords: KEYWORDS
  };
  var SUBST_SIMPLE = {
    className: 'subst',
    begin: /#[A-Za-z$_]/, end: /(?:\-[0-9A-Za-z$_]|[0-9A-Za-z$_])*/,
    keywords: KEYWORDS
  };
  var EXPRESSIONS = [
    hljs.BINARY_NUMBER_MODE,
    {
      className: 'number',
      begin: '(\\b0[xX][a-fA-F0-9_]+)|(\\b\\d(\\d|_\\d)*(\\.(\\d(\\d|_\\d)*)?)?(_*[eE]([-+]\\d(_\\d|\\d)*)?)?[_a-z]*)',
      relevance: 0,
      starts: {end: '(\\s*/)?', relevance: 0} // a number tries to eat the following slash to prevent treating it as a regexp
    },
    {
      className: 'string',
      variants: [
        {
          begin: /'''/, end: /'''/,
          contains: [hljs.BACKSLASH_ESCAPE]
        },
        {
          begin: /'/, end: /'/,
          contains: [hljs.BACKSLASH_ESCAPE]
        },
        {
          begin: /"""/, end: /"""/,
          contains: [hljs.BACKSLASH_ESCAPE, SUBST, SUBST_SIMPLE]
        },
        {
          begin: /"/, end: /"/,
          contains: [hljs.BACKSLASH_ESCAPE, SUBST, SUBST_SIMPLE]
        },
        {
          begin: /\\/, end: /(\s|$)/,
          excludeEnd: true
        }
      ]
    },
    {
      className: 'regexp',
      variants: [
        {
          begin: '//', end: '//[gim]*',
          contains: [SUBST, hljs.HASH_COMMENT_MODE]
        },
        {
          // regex can't start with space to parse x / 2 / 3 as two divisions
          // regex can't start with *, and it supports an "illegal" in the main mode
          begin: /\/(?![ *])(\\\/|.)*?\/[gim]*(?=\W|$)/
        }
      ]
    },
    {
      begin: '@' + JS_IDENT_RE
    },
    {
      begin: '``', end: '``',
      excludeBegin: true, excludeEnd: true,
      subLanguage: 'javascript'
    }
  ];
  SUBST.contains = EXPRESSIONS;

  var PARAMS = {
    className: 'params',
    begin: '\\(', returnBegin: true,
    /* We need another contained nameless mode to not have every nested
    pair of parens to be called "params" */
    contains: [
      {
        begin: /\(/, end: /\)/,
        keywords: KEYWORDS,
        contains: ['self'].concat(EXPRESSIONS)
      }
    ]
  };

  return {
    aliases: ['ls'],
    keywords: KEYWORDS,
    illegal: /\/\*/,
    contains: EXPRESSIONS.concat([
      hljs.COMMENT('\\/\\*', '\\*\\/'),
      hljs.HASH_COMMENT_MODE,
      {
        className: 'function',
        contains: [TITLE, PARAMS],
        returnBegin: true,
        variants: [
          {
            begin: '(' + JS_IDENT_RE + '\\s*(?:=|:=)\\s*)?(\\(.*\\))?\\s*\\B\\->\\*?', end: '\\->\\*?'
          },
          {
            begin: '(' + JS_IDENT_RE + '\\s*(?:=|:=)\\s*)?!?(\\(.*\\))?\\s*\\B[-~]{1,2}>\\*?', end: '[-~]{1,2}>\\*?'
          },
          {
            begin: '(' + JS_IDENT_RE + '\\s*(?:=|:=)\\s*)?(\\(.*\\))?\\s*\\B!?[-~]{1,2}>\\*?', end: '!?[-~]{1,2}>\\*?'
          }
        ]
      },
      {
        className: 'class',
        beginKeywords: 'class',
        end: '$',
        illegal: /[:="\[\]]/,
        contains: [
          {
            beginKeywords: 'extends',
            endsWithParent: true,
            illegal: /[:="\[\]]/,
            contains: [TITLE]
          },
          TITLE
        ]
      },
      {
        begin: JS_IDENT_RE + ':', end: ':',
        returnBegin: true, returnEnd: true,
        relevance: 0
      }
    ])
  };
};

/***/ }),
/* 215 */
/***/ (function(module, exports) {

module.exports = function(hljs) {
  var identifier = '([-a-zA-Z$._][\\w\\-$.]*)';
  return {
    //lexemes: '[.%]?' + hljs.IDENT_RE,
    keywords:
      'begin end true false declare define global ' +
      'constant private linker_private internal ' +
      'available_externally linkonce linkonce_odr weak ' +
      'weak_odr appending dllimport dllexport common ' +
      'default hidden protected extern_weak external ' +
      'thread_local zeroinitializer undef null to tail ' +
      'target triple datalayout volatile nuw nsw nnan ' +
      'ninf nsz arcp fast exact inbounds align ' +
      'addrspace section alias module asm sideeffect ' +
      'gc dbg linker_private_weak attributes blockaddress ' +
      'initialexec localdynamic localexec prefix unnamed_addr ' +
      'ccc fastcc coldcc x86_stdcallcc x86_fastcallcc ' +
      'arm_apcscc arm_aapcscc arm_aapcs_vfpcc ptx_device ' +
      'ptx_kernel intel_ocl_bicc msp430_intrcc spir_func ' +
      'spir_kernel x86_64_sysvcc x86_64_win64cc x86_thiscallcc ' +
      'cc c signext zeroext inreg sret nounwind ' +
      'noreturn noalias nocapture byval nest readnone ' +
      'readonly inlinehint noinline alwaysinline optsize ssp ' +
      'sspreq noredzone noimplicitfloat naked builtin cold ' +
      'nobuiltin noduplicate nonlazybind optnone returns_twice ' +
      'sanitize_address sanitize_memory sanitize_thread sspstrong ' +
      'uwtable returned type opaque eq ne slt sgt ' +
      'sle sge ult ugt ule uge oeq one olt ogt ' +
      'ole oge ord uno ueq une x acq_rel acquire ' +
      'alignstack atomic catch cleanup filter inteldialect ' +
      'max min monotonic nand personality release seq_cst ' +
      'singlethread umax umin unordered xchg add fadd ' +
      'sub fsub mul fmul udiv sdiv fdiv urem srem ' +
      'frem shl lshr ashr and or xor icmp fcmp ' +
      'phi call trunc zext sext fptrunc fpext uitofp ' +
      'sitofp fptoui fptosi inttoptr ptrtoint bitcast ' +
      'addrspacecast select va_arg ret br switch invoke ' +
      'unwind unreachable indirectbr landingpad resume ' +
      'malloc alloca free load store getelementptr ' +
      'extractelement insertelement shufflevector getresult ' +
      'extractvalue insertvalue atomicrmw cmpxchg fence ' +
      'argmemonly double',
    contains: [
      {
        className: 'keyword',
        begin: 'i\\d+'
      },
      hljs.COMMENT(
        ';', '\\n', {relevance: 0}
      ),
      // Double quote string
      hljs.QUOTE_STRING_MODE,
      {
        className: 'string',
        variants: [
          // Double-quoted string
          { begin: '"', end: '[^\\\\]"' },
        ],
        relevance: 0
      },
      {
        className: 'title',
        variants: [
          { begin: '@' + identifier },
          { begin: '@\\d+' },
          { begin: '!' + identifier },
          { begin: '!\\d+' + identifier }
        ]
      },
      {
        className: 'symbol',
        variants: [
          { begin: '%' + identifier },
          { begin: '%\\d+' },
          { begin: '#\\d+' },
        ]
      },
      {
        className: 'number',
        variants: [
            { begin: '0[xX][a-fA-F0-9]+' },
            { begin: '-?\\d+(?:[.]\\d+)?(?:[eE][-+]?\\d+(?:[.]\\d+)?)?' }
        ],
        relevance: 0
      },
    ]
  };
};

/***/ }),
/* 216 */
/***/ (function(module, exports) {

module.exports = function(hljs) {

    var LSL_STRING_ESCAPE_CHARS = {
        className: 'subst',
        begin: /\\[tn"\\]/
    };

    var LSL_STRINGS = {
        className: 'string',
        begin: '"',
        end: '"',
        contains: [
            LSL_STRING_ESCAPE_CHARS
        ]
    };

    var LSL_NUMBERS = {
        className: 'number',
        begin: hljs.C_NUMBER_RE
    };

    var LSL_CONSTANTS = {
        className: 'literal',
        variants: [
            {
                begin: '\\b(?:PI|TWO_PI|PI_BY_TWO|DEG_TO_RAD|RAD_TO_DEG|SQRT2)\\b'
            },
            {
                begin: '\\b(?:XP_ERROR_(?:EXPERIENCES_DISABLED|EXPERIENCE_(?:DISABLED|SUSPENDED)|INVALID_(?:EXPERIENCE|PARAMETERS)|KEY_NOT_FOUND|MATURITY_EXCEEDED|NONE|NOT_(?:FOUND|PERMITTED(?:_LAND)?)|NO_EXPERIENCE|QUOTA_EXCEEDED|RETRY_UPDATE|STORAGE_EXCEPTION|STORE_DISABLED|THROTTLED|UNKNOWN_ERROR)|JSON_APPEND|STATUS_(?:PHYSICS|ROTATE_[XYZ]|PHANTOM|SANDBOX|BLOCK_GRAB(?:_OBJECT)?|(?:DIE|RETURN)_AT_EDGE|CAST_SHADOWS|OK|MALFORMED_PARAMS|TYPE_MISMATCH|BOUNDS_ERROR|NOT_(?:FOUND|SUPPORTED)|INTERNAL_ERROR|WHITELIST_FAILED)|AGENT(?:_(?:BY_(?:LEGACY_|USER)NAME|FLYING|ATTACHMENTS|SCRIPTED|MOUSELOOK|SITTING|ON_OBJECT|AWAY|WALKING|IN_AIR|TYPING|CROUCHING|BUSY|ALWAYS_RUN|AUTOPILOT|LIST_(?:PARCEL(?:_OWNER)?|REGION)))?|CAMERA_(?:PITCH|DISTANCE|BEHINDNESS_(?:ANGLE|LAG)|(?:FOCUS|POSITION)(?:_(?:THRESHOLD|LOCKED|LAG))?|FOCUS_OFFSET|ACTIVE)|ANIM_ON|LOOP|REVERSE|PING_PONG|SMOOTH|ROTATE|SCALE|ALL_SIDES|LINK_(?:ROOT|SET|ALL_(?:OTHERS|CHILDREN)|THIS)|ACTIVE|PASS(?:IVE|_(?:ALWAYS|IF_NOT_HANDLED|NEVER))|SCRIPTED|CONTROL_(?:FWD|BACK|(?:ROT_)?(?:LEFT|RIGHT)|UP|DOWN|(?:ML_)?LBUTTON)|PERMISSION_(?:RETURN_OBJECTS|DEBIT|OVERRIDE_ANIMATIONS|SILENT_ESTATE_MANAGEMENT|TAKE_CONTROLS|TRIGGER_ANIMATION|ATTACH|CHANGE_LINKS|(?:CONTROL|TRACK)_CAMERA|TELEPORT)|INVENTORY_(?:TEXTURE|SOUND|OBJECT|SCRIPT|LANDMARK|CLOTHING|NOTECARD|BODYPART|ANIMATION|GESTURE|ALL|NONE)|CHANGED_(?:INVENTORY|COLOR|SHAPE|SCALE|TEXTURE|LINK|ALLOWED_DROP|OWNER|REGION(?:_START)?|TELEPORT|MEDIA)|OBJECT_(?:CLICK_ACTION|HOVER_HEIGHT|LAST_OWNER_ID|(?:PHYSICS|SERVER|STREAMING)_COST|UNKNOWN_DETAIL|CHARACTER_TIME|PHANTOM|PHYSICS|TEMP_ON_REZ|NAME|DESC|POS|PRIM_(?:COUNT|EQUIVALENCE)|RETURN_(?:PARCEL(?:_OWNER)?|REGION)|REZZER_KEY|ROO?T|VELOCITY|OMEGA|OWNER|GROUP|CREATOR|ATTACHED_POINT|RENDER_WEIGHT|(?:BODY_SHAPE|PATHFINDING)_TYPE|(?:RUNNING|TOTAL)_SCRIPT_COUNT|TOTAL_INVENTORY_COUNT|SCRIPT_(?:MEMORY|TIME))|TYPE_(?:INTEGER|FLOAT|STRING|KEY|VECTOR|ROTATION|INVALID)|(?:DEBUG|PUBLIC)_CHANNEL|ATTACH_(?:AVATAR_CENTER|CHEST|HEAD|BACK|PELVIS|MOUTH|CHIN|NECK|NOSE|BELLY|[LR](?:SHOULDER|HAND|FOOT|EAR|EYE|[UL](?:ARM|LEG)|HIP)|(?:LEFT|RIGHT)_PEC|HUD_(?:CENTER_[12]|TOP_(?:RIGHT|CENTER|LEFT)|BOTTOM(?:_(?:RIGHT|LEFT))?)|[LR]HAND_RING1|TAIL_(?:BASE|TIP)|[LR]WING|FACE_(?:JAW|[LR]EAR|[LR]EYE|TOUNGE)|GROIN|HIND_[LR]FOOT)|LAND_(?:LEVEL|RAISE|LOWER|SMOOTH|NOISE|REVERT)|DATA_(?:ONLINE|NAME|BORN|SIM_(?:POS|STATUS|RATING)|PAYINFO)|PAYMENT_INFO_(?:ON_FILE|USED)|REMOTE_DATA_(?:CHANNEL|REQUEST|REPLY)|PSYS_(?:PART_(?:BF_(?:ZERO|ONE(?:_MINUS_(?:DEST_COLOR|SOURCE_(ALPHA|COLOR)))?|DEST_COLOR|SOURCE_(ALPHA|COLOR))|BLEND_FUNC_(DEST|SOURCE)|FLAGS|(?:START|END)_(?:COLOR|ALPHA|SCALE|GLOW)|MAX_AGE|(?:RIBBON|WIND|INTERP_(?:COLOR|SCALE)|BOUNCE|FOLLOW_(?:SRC|VELOCITY)|TARGET_(?:POS|LINEAR)|EMISSIVE)_MASK)|SRC_(?:MAX_AGE|PATTERN|ANGLE_(?:BEGIN|END)|BURST_(?:RATE|PART_COUNT|RADIUS|SPEED_(?:MIN|MAX))|ACCEL|TEXTURE|TARGET_KEY|OMEGA|PATTERN_(?:DROP|EXPLODE|ANGLE(?:_CONE(?:_EMPTY)?)?)))|VEHICLE_(?:REFERENCE_FRAME|TYPE_(?:NONE|SLED|CAR|BOAT|AIRPLANE|BALLOON)|(?:LINEAR|ANGULAR)_(?:FRICTION_TIMESCALE|MOTOR_DIRECTION)|LINEAR_MOTOR_OFFSET|HOVER_(?:HEIGHT|EFFICIENCY|TIMESCALE)|BUOYANCY|(?:LINEAR|ANGULAR)_(?:DEFLECTION_(?:EFFICIENCY|TIMESCALE)|MOTOR_(?:DECAY_)?TIMESCALE)|VERTICAL_ATTRACTION_(?:EFFICIENCY|TIMESCALE)|BANKING_(?:EFFICIENCY|MIX|TIMESCALE)|FLAG_(?:NO_DEFLECTION_UP|LIMIT_(?:ROLL_ONLY|MOTOR_UP)|HOVER_(?:(?:WATER|TERRAIN|UP)_ONLY|GLOBAL_HEIGHT)|MOUSELOOK_(?:STEER|BANK)|CAMERA_DECOUPLED))|PRIM_(?:ALPHA_MODE(?:_(?:BLEND|EMISSIVE|MASK|NONE))?|NORMAL|SPECULAR|TYPE(?:_(?:BOX|CYLINDER|PRISM|SPHERE|TORUS|TUBE|RING|SCULPT))?|HOLE_(?:DEFAULT|CIRCLE|SQUARE|TRIANGLE)|MATERIAL(?:_(?:STONE|METAL|GLASS|WOOD|FLESH|PLASTIC|RUBBER))?|SHINY_(?:NONE|LOW|MEDIUM|HIGH)|BUMP_(?:NONE|BRIGHT|DARK|WOOD|BARK|BRICKS|CHECKER|CONCRETE|TILE|STONE|DISKS|GRAVEL|BLOBS|SIDING|LARGETILE|STUCCO|SUCTION|WEAVE)|TEXGEN_(?:DEFAULT|PLANAR)|SCULPT_(?:TYPE_(?:SPHERE|TORUS|PLANE|CYLINDER|MASK)|FLAG_(?:MIRROR|INVERT))|PHYSICS(?:_(?:SHAPE_(?:CONVEX|NONE|PRIM|TYPE)))?|(?:POS|ROT)_LOCAL|SLICE|TEXT|FLEXIBLE|POINT_LIGHT|TEMP_ON_REZ|PHANTOM|POSITION|SIZE|ROTATION|TEXTURE|NAME|OMEGA|DESC|LINK_TARGET|COLOR|BUMP_SHINY|FULLBRIGHT|TEXGEN|GLOW|MEDIA_(?:ALT_IMAGE_ENABLE|CONTROLS|(?:CURRENT|HOME)_URL|AUTO_(?:LOOP|PLAY|SCALE|ZOOM)|FIRST_CLICK_INTERACT|(?:WIDTH|HEIGHT)_PIXELS|WHITELIST(?:_ENABLE)?|PERMS_(?:INTERACT|CONTROL)|PARAM_MAX|CONTROLS_(?:STANDARD|MINI)|PERM_(?:NONE|OWNER|GROUP|ANYONE)|MAX_(?:URL_LENGTH|WHITELIST_(?:SIZE|COUNT)|(?:WIDTH|HEIGHT)_PIXELS)))|MASK_(?:BASE|OWNER|GROUP|EVERYONE|NEXT)|PERM_(?:TRANSFER|MODIFY|COPY|MOVE|ALL)|PARCEL_(?:MEDIA_COMMAND_(?:STOP|PAUSE|PLAY|LOOP|TEXTURE|URL|TIME|AGENT|UNLOAD|AUTO_ALIGN|TYPE|SIZE|DESC|LOOP_SET)|FLAG_(?:ALLOW_(?:FLY|(?:GROUP_)?SCRIPTS|LANDMARK|TERRAFORM|DAMAGE|CREATE_(?:GROUP_)?OBJECTS)|USE_(?:ACCESS_(?:GROUP|LIST)|BAN_LIST|LAND_PASS_LIST)|LOCAL_SOUND_ONLY|RESTRICT_PUSHOBJECT|ALLOW_(?:GROUP|ALL)_OBJECT_ENTRY)|COUNT_(?:TOTAL|OWNER|GROUP|OTHER|SELECTED|TEMP)|DETAILS_(?:NAME|DESC|OWNER|GROUP|AREA|ID|SEE_AVATARS))|LIST_STAT_(?:MAX|MIN|MEAN|MEDIAN|STD_DEV|SUM(?:_SQUARES)?|NUM_COUNT|GEOMETRIC_MEAN|RANGE)|PAY_(?:HIDE|DEFAULT)|REGION_FLAG_(?:ALLOW_DAMAGE|FIXED_SUN|BLOCK_TERRAFORM|SANDBOX|DISABLE_(?:COLLISIONS|PHYSICS)|BLOCK_FLY|ALLOW_DIRECT_TELEPORT|RESTRICT_PUSHOBJECT)|HTTP_(?:METHOD|MIMETYPE|BODY_(?:MAXLENGTH|TRUNCATED)|CUSTOM_HEADER|PRAGMA_NO_CACHE|VERBOSE_THROTTLE|VERIFY_CERT)|STRING_(?:TRIM(?:_(?:HEAD|TAIL))?)|CLICK_ACTION_(?:NONE|TOUCH|SIT|BUY|PAY|OPEN(?:_MEDIA)?|PLAY|ZOOM)|TOUCH_INVALID_FACE|PROFILE_(?:NONE|SCRIPT_MEMORY)|RC_(?:DATA_FLAGS|DETECT_PHANTOM|GET_(?:LINK_NUM|NORMAL|ROOT_KEY)|MAX_HITS|REJECT_(?:TYPES|AGENTS|(?:NON)?PHYSICAL|LAND))|RCERR_(?:CAST_TIME_EXCEEDED|SIM_PERF_LOW|UNKNOWN)|ESTATE_ACCESS_(?:ALLOWED_(?:AGENT|GROUP)_(?:ADD|REMOVE)|BANNED_AGENT_(?:ADD|REMOVE))|DENSITY|FRICTION|RESTITUTION|GRAVITY_MULTIPLIER|KFM_(?:COMMAND|CMD_(?:PLAY|STOP|PAUSE)|MODE|FORWARD|LOOP|PING_PONG|REVERSE|DATA|ROTATION|TRANSLATION)|ERR_(?:GENERIC|PARCEL_PERMISSIONS|MALFORMED_PARAMS|RUNTIME_PERMISSIONS|THROTTLED)|CHARACTER_(?:CMD_(?:(?:SMOOTH_)?STOP|JUMP)|DESIRED_(?:TURN_)?SPEED|RADIUS|STAY_WITHIN_PARCEL|LENGTH|ORIENTATION|ACCOUNT_FOR_SKIPPED_FRAMES|AVOIDANCE_MODE|TYPE(?:_(?:[ABCD]|NONE))?|MAX_(?:DECEL|TURN_RADIUS|(?:ACCEL|SPEED)))|PURSUIT_(?:OFFSET|FUZZ_FACTOR|GOAL_TOLERANCE|INTERCEPT)|REQUIRE_LINE_OF_SIGHT|FORCE_DIRECT_PATH|VERTICAL|HORIZONTAL|AVOID_(?:CHARACTERS|DYNAMIC_OBSTACLES|NONE)|PU_(?:EVADE_(?:HIDDEN|SPOTTED)|FAILURE_(?:DYNAMIC_PATHFINDING_DISABLED|INVALID_(?:GOAL|START)|NO_(?:NAVMESH|VALID_DESTINATION)|OTHER|TARGET_GONE|(?:PARCEL_)?UNREACHABLE)|(?:GOAL|SLOWDOWN_DISTANCE)_REACHED)|TRAVERSAL_TYPE(?:_(?:FAST|NONE|SLOW))?|CONTENT_TYPE_(?:ATOM|FORM|HTML|JSON|LLSD|RSS|TEXT|XHTML|XML)|GCNP_(?:RADIUS|STATIC)|(?:PATROL|WANDER)_PAUSE_AT_WAYPOINTS|OPT_(?:AVATAR|CHARACTER|EXCLUSION_VOLUME|LEGACY_LINKSET|MATERIAL_VOLUME|OTHER|STATIC_OBSTACLE|WALKABLE)|SIM_STAT_PCT_CHARS_STEPPED)\\b'
            },
            {
                begin: '\\b(?:FALSE|TRUE)\\b'
            },
            {
                begin: '\\b(?:ZERO_ROTATION)\\b'
            },
            {
                begin: '\\b(?:EOF|JSON_(?:ARRAY|DELETE|FALSE|INVALID|NULL|NUMBER|OBJECT|STRING|TRUE)|NULL_KEY|TEXTURE_(?:BLANK|DEFAULT|MEDIA|PLYWOOD|TRANSPARENT)|URL_REQUEST_(?:GRANTED|DENIED))\\b'
            },
            {
                begin: '\\b(?:ZERO_VECTOR|TOUCH_INVALID_(?:TEXCOORD|VECTOR))\\b'
            }
        ]
    };

    var LSL_FUNCTIONS = {
        className: 'built_in',
        begin: '\\b(?:ll(?:AgentInExperience|(?:Create|DataSize|Delete|KeyCount|Keys|Read|Update)KeyValue|GetExperience(?:Details|ErrorMessage)|ReturnObjectsBy(?:ID|Owner)|Json(?:2List|[GS]etValue|ValueType)|Sin|Cos|Tan|Atan2|Sqrt|Pow|Abs|Fabs|Frand|Floor|Ceil|Round|Vec(?:Mag|Norm|Dist)|Rot(?:Between|2(?:Euler|Fwd|Left|Up))|(?:Euler|Axes)2Rot|Whisper|(?:Region|Owner)?Say|Shout|Listen(?:Control|Remove)?|Sensor(?:Repeat|Remove)?|Detected(?:Name|Key|Owner|Type|Pos|Vel|Grab|Rot|Group|LinkNumber)|Die|Ground|Wind|(?:[GS]et)(?:AnimationOverride|MemoryLimit|PrimMediaParams|ParcelMusicURL|Object(?:Desc|Name)|PhysicsMaterial|Status|Scale|Color|Alpha|Texture|Pos|Rot|Force|Torque)|ResetAnimationOverride|(?:Scale|Offset|Rotate)Texture|(?:Rot)?Target(?:Remove)?|(?:Stop)?MoveToTarget|Apply(?:Rotational)?Impulse|Set(?:KeyframedMotion|ContentType|RegionPos|(?:Angular)?Velocity|Buoyancy|HoverHeight|ForceAndTorque|TimerEvent|ScriptState|Damage|TextureAnim|Sound(?:Queueing|Radius)|Vehicle(?:Type|(?:Float|Vector|Rotation)Param)|(?:Touch|Sit)?Text|Camera(?:Eye|At)Offset|PrimitiveParams|ClickAction|Link(?:Alpha|Color|PrimitiveParams(?:Fast)?|Texture(?:Anim)?|Camera|Media)|RemoteScriptAccessPin|PayPrice|LocalRot)|ScaleByFactor|Get(?:(?:Max|Min)ScaleFactor|ClosestNavPoint|StaticPath|SimStats|Env|PrimitiveParams|Link(?:PrimitiveParams|Number(?:OfSides)?|Key|Name|Media)|HTTPHeader|FreeURLs|Object(?:Details|PermMask|PrimCount)|Parcel(?:MaxPrims|Details|Prim(?:Count|Owners))|Attached(?:List)?|(?:SPMax|Free|Used)Memory|Region(?:Name|TimeDilation|FPS|Corner|AgentCount)|Root(?:Position|Rotation)|UnixTime|(?:Parcel|Region)Flags|(?:Wall|GMT)clock|SimulatorHostname|BoundingBox|GeometricCenter|Creator|NumberOf(?:Prims|NotecardLines|Sides)|Animation(?:List)?|(?:Camera|Local)(?:Pos|Rot)|Vel|Accel|Omega|Time(?:stamp|OfDay)|(?:Object|CenterOf)?Mass|MassMKS|Energy|Owner|(?:Owner)?Key|SunDirection|Texture(?:Offset|Scale|Rot)|Inventory(?:Number|Name|Key|Type|Creator|PermMask)|Permissions(?:Key)?|StartParameter|List(?:Length|EntryType)|Date|Agent(?:Size|Info|Language|List)|LandOwnerAt|NotecardLine|Script(?:Name|State))|(?:Get|Reset|GetAndReset)Time|PlaySound(?:Slave)?|LoopSound(?:Master|Slave)?|(?:Trigger|Stop|Preload)Sound|(?:(?:Get|Delete)Sub|Insert)String|To(?:Upper|Lower)|Give(?:InventoryList|Money)|RezObject|(?:Stop)?LookAt|Sleep|CollisionFilter|(?:Take|Release)Controls|DetachFromAvatar|AttachToAvatar(?:Temp)?|InstantMessage|(?:GetNext)?Email|StopHover|MinEventDelay|RotLookAt|String(?:Length|Trim)|(?:Start|Stop)Animation|TargetOmega|Request(?:Experience)?Permissions|(?:Create|Break)Link|BreakAllLinks|(?:Give|Remove)Inventory|Water|PassTouches|Request(?:Agent|Inventory)Data|TeleportAgent(?:Home|GlobalCoords)?|ModifyLand|CollisionSound|ResetScript|MessageLinked|PushObject|PassCollisions|AxisAngle2Rot|Rot2(?:Axis|Angle)|A(?:cos|sin)|AngleBetween|AllowInventoryDrop|SubStringIndex|List2(?:CSV|Integer|Json|Float|String|Key|Vector|Rot|List(?:Strided)?)|DeleteSubList|List(?:Statistics|Sort|Randomize|(?:Insert|Find|Replace)List)|EdgeOfWorld|AdjustSoundVolume|Key2Name|TriggerSoundLimited|EjectFromLand|(?:CSV|ParseString)2List|OverMyLand|SameGroup|UnSit|Ground(?:Slope|Normal|Contour)|GroundRepel|(?:Set|Remove)VehicleFlags|(?:AvatarOn)?(?:Link)?SitTarget|Script(?:Danger|Profiler)|Dialog|VolumeDetect|ResetOtherScript|RemoteLoadScriptPin|(?:Open|Close)RemoteDataChannel|SendRemoteData|RemoteDataReply|(?:Integer|String)ToBase64|XorBase64|Log(?:10)?|Base64To(?:String|Integer)|ParseStringKeepNulls|RezAtRoot|RequestSimulatorData|ForceMouselook|(?:Load|Release|(?:E|Une)scape)URL|ParcelMedia(?:CommandList|Query)|ModPow|MapDestination|(?:RemoveFrom|AddTo|Reset)Land(?:Pass|Ban)List|(?:Set|Clear)CameraParams|HTTP(?:Request|Response)|TextBox|DetectedTouch(?:UV|Face|Pos|(?:N|Bin)ormal|ST)|(?:MD5|SHA1|DumpList2)String|Request(?:Secure)?URL|Clear(?:Prim|Link)Media|(?:Link)?ParticleSystem|(?:Get|Request)(?:Username|DisplayName)|RegionSayTo|CastRay|GenerateKey|TransferLindenDollars|ManageEstateAccess|(?:Create|Delete)Character|ExecCharacterCmd|Evade|FleeFrom|NavigateTo|PatrolPoints|Pursue|UpdateCharacter|WanderWithin))\\b'
    };

    return {
        illegal: ':',
        contains: [
            LSL_STRINGS,
            {
                className: 'comment',
                variants: [
                    hljs.COMMENT('//', '$'),
                    hljs.COMMENT('/\\*', '\\*/')
                ]
            },
            LSL_NUMBERS,
            {
                className: 'section',
                variants: [
                    {
                        begin: '\\b(?:state|default)\\b'
                    },
                    {
                        begin: '\\b(?:state_(?:entry|exit)|touch(?:_(?:start|end))?|(?:land_)?collision(?:_(?:start|end))?|timer|listen|(?:no_)?sensor|control|(?:not_)?at_(?:rot_)?target|money|email|experience_permissions(?:_denied)?|run_time_permissions|changed|attach|dataserver|moving_(?:start|end)|link_message|(?:on|object)_rez|remote_data|http_re(?:sponse|quest)|path_update|transaction_result)\\b'
                    }
                ]
            },
            LSL_FUNCTIONS,
            LSL_CONSTANTS,
            {
                className: 'type',
                begin: '\\b(?:integer|float|string|key|vector|quaternion|rotation|list)\\b'
            }
        ]
    };
};

/***/ }),
/* 217 */
/***/ (function(module, exports) {

module.exports = function(hljs) {
  var OPENING_LONG_BRACKET = '\\[=*\\[';
  var CLOSING_LONG_BRACKET = '\\]=*\\]';
  var LONG_BRACKETS = {
    begin: OPENING_LONG_BRACKET, end: CLOSING_LONG_BRACKET,
    contains: ['self']
  };
  var COMMENTS = [
    hljs.COMMENT('--(?!' + OPENING_LONG_BRACKET + ')', '$'),
    hljs.COMMENT(
      '--' + OPENING_LONG_BRACKET,
      CLOSING_LONG_BRACKET,
      {
        contains: [LONG_BRACKETS],
        relevance: 10
      }
    )
  ];
  return {
    lexemes: hljs.UNDERSCORE_IDENT_RE,
    keywords: {
      literal: "true false nil",
      keyword: "and break do else elseif end for goto if in local not or repeat return then until while",
      built_in:
        //Metatags and globals:
        '_G _ENV _VERSION __index __newindex __mode __call __metatable __tostring __len ' +
        '__gc __add __sub __mul __div __mod __pow __concat __unm __eq __lt __le assert ' +
        //Standard methods and properties:
        'collectgarbage dofile error getfenv getmetatable ipairs load loadfile loadstring' +
        'module next pairs pcall print rawequal rawget rawset require select setfenv' +
        'setmetatable tonumber tostring type unpack xpcall arg self' +
        //Library methods and properties (one line per library):
        'coroutine resume yield status wrap create running debug getupvalue ' +
        'debug sethook getmetatable gethook setmetatable setlocal traceback setfenv getinfo setupvalue getlocal getregistry getfenv ' +
        'io lines write close flush open output type read stderr stdin input stdout popen tmpfile ' +
        'math log max acos huge ldexp pi cos tanh pow deg tan cosh sinh random randomseed frexp ceil floor rad abs sqrt modf asin min mod fmod log10 atan2 exp sin atan ' +
        'os exit setlocale date getenv difftime remove time clock tmpname rename execute package preload loadlib loaded loaders cpath config path seeall ' +
        'string sub upper len gfind rep find match char dump gmatch reverse byte format gsub lower ' +
        'table setn insert getn foreachi maxn foreach concat sort remove'
    },
    contains: COMMENTS.concat([
      {
        className: 'function',
        beginKeywords: 'function', end: '\\)',
        contains: [
          hljs.inherit(hljs.TITLE_MODE, {begin: '([_a-zA-Z]\\w*\\.)*([_a-zA-Z]\\w*:)?[_a-zA-Z]\\w*'}),
          {
            className: 'params',
            begin: '\\(', endsWithParent: true,
            contains: COMMENTS
          }
        ].concat(COMMENTS)
      },
      hljs.C_NUMBER_MODE,
      hljs.APOS_STRING_MODE,
      hljs.QUOTE_STRING_MODE,
      {
        className: 'string',
        begin: OPENING_LONG_BRACKET, end: CLOSING_LONG_BRACKET,
        contains: [LONG_BRACKETS],
        relevance: 5
      }
    ])
  };
};

/***/ }),
/* 218 */
/***/ (function(module, exports) {

module.exports = function(hljs) {
  /* Variables: simple (eg $(var)) and special (eg $@) */
  var VARIABLE = {
    className: 'variable',
    variants: [
      {
        begin: '\\$\\(' + hljs.UNDERSCORE_IDENT_RE + '\\)',
        contains: [hljs.BACKSLASH_ESCAPE],
      },
      {
        begin: /\$[@%<?\^\+\*]/
      },
    ]
  };
  /* Quoted string with variables inside */
  var QUOTE_STRING = {
    className: 'string',
    begin: /"/, end: /"/,
    contains: [
      hljs.BACKSLASH_ESCAPE,
      VARIABLE,
    ]
  };
  /* Function: $(func arg,...) */
  var FUNC = {
    className: 'variable',
    begin: /\$\([\w-]+\s/, end: /\)/,
    keywords: {
      built_in:
        'subst patsubst strip findstring filter filter-out sort ' +
        'word wordlist firstword lastword dir notdir suffix basename ' +
        'addsuffix addprefix join wildcard realpath abspath error warning ' +
        'shell origin flavor foreach if or and call eval file value',
    },
    contains: [
      VARIABLE,
    ]
  };
  /* Variable assignment */
  var VAR_ASSIG = {
    begin: '^' + hljs.UNDERSCORE_IDENT_RE + '\\s*[:+?]?=',
    illegal: '\\n',
    returnBegin: true,
    contains: [
      {
        begin: '^' + hljs.UNDERSCORE_IDENT_RE, end: '[:+?]?=',
        excludeEnd: true,
      }
    ]
  };
  /* Meta targets (.PHONY) */
  var META = {
    className: 'meta',
    begin: /^\.PHONY:/, end: /$/,
    keywords: {'meta-keyword': '.PHONY'},
    lexemes: /[\.\w]+/
  };
  /* Targets */
  var TARGET = {
    className: 'section',
    begin: /^[^\s]+:/, end: /$/,
    contains: [VARIABLE,]
  };
  return {
    aliases: ['mk', 'mak'],
    keywords:
      'define endef undefine ifdef ifndef ifeq ifneq else endif ' +
      'include -include sinclude override export unexport private vpath',
    lexemes: /[\w-]+/,
    contains: [
      hljs.HASH_COMMENT_MODE,
      VARIABLE,
      QUOTE_STRING,
      FUNC,
      VAR_ASSIG,
      META,
      TARGET,
    ]
  };
};

/***/ }),
/* 219 */
/***/ (function(module, exports) {

module.exports = function(hljs) {
  return {
    aliases: ['mma'],
    lexemes: '(\\$|\\b)' + hljs.IDENT_RE + '\\b',
    keywords: 'AbelianGroup Abort AbortKernels AbortProtect Above Abs Absolute AbsoluteCorrelation AbsoluteCorrelationFunction AbsoluteCurrentValue AbsoluteDashing AbsoluteFileName AbsoluteOptions AbsolutePointSize AbsoluteThickness AbsoluteTime AbsoluteTiming AccountingForm Accumulate Accuracy AccuracyGoal ActionDelay ActionMenu ActionMenuBox ActionMenuBoxOptions Active ActiveItem ActiveStyle AcyclicGraphQ AddOnHelpPath AddTo AdjacencyGraph AdjacencyList AdjacencyMatrix AdjustmentBox AdjustmentBoxOptions AdjustTimeSeriesForecast AffineTransform After AiryAi AiryAiPrime AiryAiZero AiryBi AiryBiPrime AiryBiZero AlgebraicIntegerQ AlgebraicNumber AlgebraicNumberDenominator AlgebraicNumberNorm AlgebraicNumberPolynomial AlgebraicNumberTrace AlgebraicRules AlgebraicRulesData Algebraics AlgebraicUnitQ Alignment AlignmentMarker AlignmentPoint All AllowedDimensions AllowGroupClose AllowInlineCells AllowKernelInitialization AllowReverseGroupClose AllowScriptLevelChange AlphaChannel AlternatingGroup AlternativeHypothesis Alternatives AmbientLight Analytic AnchoredSearch And AndersonDarlingTest AngerJ AngleBracket AngularGauge Animate AnimationCycleOffset AnimationCycleRepetitions AnimationDirection AnimationDisplayTime AnimationRate AnimationRepetitions AnimationRunning Animator AnimatorBox AnimatorBoxOptions AnimatorElements Annotation Annuity AnnuityDue Antialiasing Antisymmetric Apart ApartSquareFree Appearance AppearanceElements AppellF1 Append AppendTo Apply ArcCos ArcCosh ArcCot ArcCoth ArcCsc ArcCsch ArcSec ArcSech ArcSin ArcSinDistribution ArcSinh ArcTan ArcTanh Arg ArgMax ArgMin ArgumentCountQ ARIMAProcess ArithmeticGeometricMean ARMAProcess ARProcess Array ArrayComponents ArrayDepth ArrayFlatten ArrayPad ArrayPlot ArrayQ ArrayReshape ArrayRules Arrays Arrow Arrow3DBox ArrowBox Arrowheads AspectRatio AspectRatioFixed Assert Assuming Assumptions AstronomicalData Asynchronous AsynchronousTaskObject AsynchronousTasks AtomQ Attributes AugmentedSymmetricPolynomial AutoAction AutoDelete AutoEvaluateEvents AutoGeneratedPackage AutoIndent AutoIndentSpacings AutoItalicWords AutoloadPath AutoMatch Automatic AutomaticImageSize AutoMultiplicationSymbol AutoNumberFormatting AutoOpenNotebooks AutoOpenPalettes AutorunSequencing AutoScaling AutoScroll AutoSpacing AutoStyleOptions AutoStyleWords Axes AxesEdge AxesLabel AxesOrigin AxesStyle Axis ' +
      'BabyMonsterGroupB Back Background BackgroundTasksSettings Backslash Backsubstitution Backward Band BandpassFilter BandstopFilter BarabasiAlbertGraphDistribution BarChart BarChart3D BarLegend BarlowProschanImportance BarnesG BarOrigin BarSpacing BartlettHannWindow BartlettWindow BaseForm Baseline BaselinePosition BaseStyle BatesDistribution BattleLemarieWavelet Because BeckmannDistribution Beep Before Begin BeginDialogPacket BeginFrontEndInteractionPacket BeginPackage BellB BellY Below BenfordDistribution BeniniDistribution BenktanderGibratDistribution BenktanderWeibullDistribution BernoulliB BernoulliDistribution BernoulliGraphDistribution BernoulliProcess BernsteinBasis BesselFilterModel BesselI BesselJ BesselJZero BesselK BesselY BesselYZero Beta BetaBinomialDistribution BetaDistribution BetaNegativeBinomialDistribution BetaPrimeDistribution BetaRegularized BetweennessCentrality BezierCurve BezierCurve3DBox BezierCurve3DBoxOptions BezierCurveBox BezierCurveBoxOptions BezierFunction BilateralFilter Binarize BinaryFormat BinaryImageQ BinaryRead BinaryReadList BinaryWrite BinCounts BinLists Binomial BinomialDistribution BinomialProcess BinormalDistribution BiorthogonalSplineWavelet BipartiteGraphQ BirnbaumImportance BirnbaumSaundersDistribution BitAnd BitClear BitGet BitLength BitNot BitOr BitSet BitShiftLeft BitShiftRight BitXor Black BlackmanHarrisWindow BlackmanNuttallWindow BlackmanWindow Blank BlankForm BlankNullSequence BlankSequence Blend Block BlockRandom BlomqvistBeta BlomqvistBetaTest Blue Blur BodePlot BohmanWindow Bold Bookmarks Boole BooleanConsecutiveFunction BooleanConvert BooleanCountingFunction BooleanFunction BooleanGraph BooleanMaxterms BooleanMinimize BooleanMinterms Booleans BooleanTable BooleanVariables BorderDimensions BorelTannerDistribution Bottom BottomHatTransform BoundaryStyle Bounds Box BoxBaselineShift BoxData BoxDimensions Boxed Boxes BoxForm BoxFormFormatTypes BoxFrame BoxID BoxMargins BoxMatrix BoxRatios BoxRotation BoxRotationPoint BoxStyle BoxWhiskerChart Bra BracketingBar BraKet BrayCurtisDistance BreadthFirstScan Break Brown BrownForsytheTest BrownianBridgeProcess BrowserCategory BSplineBasis BSplineCurve BSplineCurve3DBox BSplineCurveBox BSplineCurveBoxOptions BSplineFunction BSplineSurface BSplineSurface3DBox BubbleChart BubbleChart3D BubbleScale BubbleSizes BulletGauge BusinessDayQ ButterflyGraph ButterworthFilterModel Button ButtonBar ButtonBox ButtonBoxOptions ButtonCell ButtonContents ButtonData ButtonEvaluator ButtonExpandable ButtonFrame ButtonFunction ButtonMargins ButtonMinHeight ButtonNote ButtonNotebook ButtonSource ButtonStyle ButtonStyleMenuListing Byte ByteCount ByteOrdering ' +
      'C CachedValue CacheGraphics CalendarData CalendarType CallPacket CanberraDistance Cancel CancelButton CandlestickChart Cap CapForm CapitalDifferentialD CardinalBSplineBasis CarmichaelLambda Cases Cashflow Casoratian Catalan CatalanNumber Catch CauchyDistribution CauchyWindow CayleyGraph CDF CDFDeploy CDFInformation CDFWavelet Ceiling Cell CellAutoOverwrite CellBaseline CellBoundingBox CellBracketOptions CellChangeTimes CellContents CellContext CellDingbat CellDynamicExpression CellEditDuplicate CellElementsBoundingBox CellElementSpacings CellEpilog CellEvaluationDuplicate CellEvaluationFunction CellEventActions CellFrame CellFrameColor CellFrameLabelMargins CellFrameLabels CellFrameMargins CellGroup CellGroupData CellGrouping CellGroupingRules CellHorizontalScrolling CellID CellLabel CellLabelAutoDelete CellLabelMargins CellLabelPositioning CellMargins CellObject CellOpen CellPrint CellProlog Cells CellSize CellStyle CellTags CellularAutomaton CensoredDistribution Censoring Center CenterDot CentralMoment CentralMomentGeneratingFunction CForm ChampernowneNumber ChanVeseBinarize Character CharacterEncoding CharacterEncodingsPath CharacteristicFunction CharacteristicPolynomial CharacterRange Characters ChartBaseStyle ChartElementData ChartElementDataFunction ChartElementFunction ChartElements ChartLabels ChartLayout ChartLegends ChartStyle Chebyshev1FilterModel Chebyshev2FilterModel ChebyshevDistance ChebyshevT ChebyshevU Check CheckAbort CheckAll Checkbox CheckboxBar CheckboxBox CheckboxBoxOptions ChemicalData ChessboardDistance ChiDistribution ChineseRemainder ChiSquareDistribution ChoiceButtons ChoiceDialog CholeskyDecomposition Chop Circle CircleBox CircleDot CircleMinus CirclePlus CircleTimes CirculantGraph CityData Clear ClearAll ClearAttributes ClearSystemCache ClebschGordan ClickPane Clip ClipboardNotebook ClipFill ClippingStyle ClipPlanes ClipRange Clock ClockGauge ClockwiseContourIntegral Close Closed CloseKernels ClosenessCentrality Closing ClosingAutoSave ClosingEvent ClusteringComponents CMYKColor Coarse Coefficient CoefficientArrays CoefficientDomain CoefficientList CoefficientRules CoifletWavelet Collect Colon ColonForm ColorCombine ColorConvert ColorData ColorDataFunction ColorFunction ColorFunctionScaling Colorize ColorNegate ColorOutput ColorProfileData ColorQuantize ColorReplace ColorRules ColorSelectorSettings ColorSeparate ColorSetter ColorSetterBox ColorSetterBoxOptions ColorSlider ColorSpace Column ColumnAlignments ColumnBackgrounds ColumnForm ColumnLines ColumnsEqual ColumnSpacings ColumnWidths CommonDefaultFormatTypes Commonest CommonestFilter CommonUnits CommunityBoundaryStyle CommunityGraphPlot CommunityLabels CommunityRegionStyle CompatibleUnitQ CompilationOptions CompilationTarget Compile Compiled CompiledFunction Complement CompleteGraph CompleteGraphQ CompleteKaryTree CompletionsListPacket Complex Complexes ComplexExpand ComplexInfinity ComplexityFunction ComponentMeasurements ' +
      'ComponentwiseContextMenu Compose ComposeList ComposeSeries Composition CompoundExpression CompoundPoissonDistribution CompoundPoissonProcess CompoundRenewalProcess Compress CompressedData Condition ConditionalExpression Conditioned Cone ConeBox ConfidenceLevel ConfidenceRange ConfidenceTransform ConfigurationPath Congruent Conjugate ConjugateTranspose Conjunction Connect ConnectedComponents ConnectedGraphQ ConnesWindow ConoverTest ConsoleMessage ConsoleMessagePacket ConsolePrint Constant ConstantArray Constants ConstrainedMax ConstrainedMin ContentPadding ContentsBoundingBox ContentSelectable ContentSize Context ContextMenu Contexts ContextToFilename ContextToFileName Continuation Continue ContinuedFraction ContinuedFractionK ContinuousAction ContinuousMarkovProcess ContinuousTimeModelQ ContinuousWaveletData ContinuousWaveletTransform ContourDetect ContourGraphics ContourIntegral ContourLabels ContourLines ContourPlot ContourPlot3D Contours ContourShading ContourSmoothing ContourStyle ContraharmonicMean Control ControlActive ControlAlignment ControllabilityGramian ControllabilityMatrix ControllableDecomposition ControllableModelQ ControllerDuration ControllerInformation ControllerInformationData ControllerLinking ControllerManipulate ControllerMethod ControllerPath ControllerState ControlPlacement ControlsRendering ControlType Convergents ConversionOptions ConversionRules ConvertToBitmapPacket ConvertToPostScript ConvertToPostScriptPacket Convolve ConwayGroupCo1 ConwayGroupCo2 ConwayGroupCo3 CoordinateChartData CoordinatesToolOptions CoordinateTransform CoordinateTransformData CoprimeQ Coproduct CopulaDistribution Copyable CopyDirectory CopyFile CopyTag CopyToClipboard CornerFilter CornerNeighbors Correlation CorrelationDistance CorrelationFunction CorrelationTest Cos Cosh CoshIntegral CosineDistance CosineWindow CosIntegral Cot Coth Count CounterAssignments CounterBox CounterBoxOptions CounterClockwiseContourIntegral CounterEvaluator CounterFunction CounterIncrements CounterStyle CounterStyleMenuListing CountRoots CountryData Covariance CovarianceEstimatorFunction CovarianceFunction CoxianDistribution CoxIngersollRossProcess CoxModel CoxModelFit CramerVonMisesTest CreateArchive CreateDialog CreateDirectory CreateDocument CreateIntermediateDirectories CreatePalette CreatePalettePacket CreateScheduledTask CreateTemporary CreateWindow CriticalityFailureImportance CriticalitySuccessImportance CriticalSection Cross CrossingDetect CrossMatrix Csc Csch CubeRoot Cubics Cuboid CuboidBox Cumulant CumulantGeneratingFunction Cup CupCap Curl CurlyDoubleQuote CurlyQuote CurrentImage CurrentlySpeakingPacket CurrentValue CurvatureFlowFilter CurveClosed Cyan CycleGraph CycleIndexPolynomial Cycles CyclicGroup Cyclotomic Cylinder CylinderBox CylindricalDecomposition ' +
      'D DagumDistribution DamerauLevenshteinDistance DampingFactor Darker Dashed Dashing DataCompression DataDistribution DataRange DataReversed Date DateDelimiters DateDifference DateFunction DateList DateListLogPlot DateListPlot DatePattern DatePlus DateRange DateString DateTicksFormat DaubechiesWavelet DavisDistribution DawsonF DayCount DayCountConvention DayMatchQ DayName DayPlus DayRange DayRound DeBruijnGraph Debug DebugTag Decimal DeclareKnownSymbols DeclarePackage Decompose Decrement DedekindEta Default DefaultAxesStyle DefaultBaseStyle DefaultBoxStyle DefaultButton DefaultColor DefaultControlPlacement DefaultDuplicateCellStyle DefaultDuration DefaultElement DefaultFaceGridsStyle DefaultFieldHintStyle DefaultFont DefaultFontProperties DefaultFormatType DefaultFormatTypeForStyle DefaultFrameStyle DefaultFrameTicksStyle DefaultGridLinesStyle DefaultInlineFormatType DefaultInputFormatType DefaultLabelStyle DefaultMenuStyle DefaultNaturalLanguage DefaultNewCellStyle DefaultNewInlineCellStyle DefaultNotebook DefaultOptions DefaultOutputFormatType DefaultStyle DefaultStyleDefinitions DefaultTextFormatType DefaultTextInlineFormatType DefaultTicksStyle DefaultTooltipStyle DefaultValues Defer DefineExternal DefineInputStreamMethod DefineOutputStreamMethod Definition Degree DegreeCentrality DegreeGraphDistribution DegreeLexicographic DegreeReverseLexicographic Deinitialization Del Deletable Delete DeleteBorderComponents DeleteCases DeleteContents DeleteDirectory DeleteDuplicates DeleteFile DeleteSmallComponents DeleteWithContents DeletionWarning Delimiter DelimiterFlashTime DelimiterMatching Delimiters Denominator DensityGraphics DensityHistogram DensityPlot DependentVariables Deploy Deployed Depth DepthFirstScan Derivative DerivativeFilter DescriptorStateSpace DesignMatrix Det DGaussianWavelet DiacriticalPositioning Diagonal DiagonalMatrix Dialog DialogIndent DialogInput DialogLevel DialogNotebook DialogProlog DialogReturn DialogSymbols Diamond DiamondMatrix DiceDissimilarity DictionaryLookup DifferenceDelta DifferenceOrder DifferenceRoot DifferenceRootReduce Differences DifferentialD DifferentialRoot DifferentialRootReduce DifferentiatorFilter DigitBlock DigitBlockMinimum DigitCharacter DigitCount DigitQ DihedralGroup Dilation Dimensions DiracComb DiracDelta DirectedEdge DirectedEdges DirectedGraph DirectedGraphQ DirectedInfinity Direction Directive Directory DirectoryName DirectoryQ DirectoryStack DirichletCharacter DirichletConvolve DirichletDistribution DirichletL DirichletTransform DirichletWindow DisableConsolePrintPacket DiscreteChirpZTransform DiscreteConvolve DiscreteDelta DiscreteHadamardTransform DiscreteIndicator DiscreteLQEstimatorGains DiscreteLQRegulatorGains DiscreteLyapunovSolve DiscreteMarkovProcess DiscretePlot DiscretePlot3D DiscreteRatio DiscreteRiccatiSolve DiscreteShift DiscreteTimeModelQ DiscreteUniformDistribution DiscreteVariables DiscreteWaveletData DiscreteWaveletPacketTransform ' +
      'DiscreteWaveletTransform Discriminant Disjunction Disk DiskBox DiskMatrix Dispatch DispersionEstimatorFunction Display DisplayAllSteps DisplayEndPacket DisplayFlushImagePacket DisplayForm DisplayFunction DisplayPacket DisplayRules DisplaySetSizePacket DisplayString DisplayTemporary DisplayWith DisplayWithRef DisplayWithVariable DistanceFunction DistanceTransform Distribute Distributed DistributedContexts DistributeDefinitions DistributionChart DistributionDomain DistributionFitTest DistributionParameterAssumptions DistributionParameterQ Dithering Div Divergence Divide DivideBy Dividers Divisible Divisors DivisorSigma DivisorSum DMSList DMSString Do DockedCells DocumentNotebook DominantColors DOSTextFormat Dot DotDashed DotEqual Dotted DoubleBracketingBar DoubleContourIntegral DoubleDownArrow DoubleLeftArrow DoubleLeftRightArrow DoubleLeftTee DoubleLongLeftArrow DoubleLongLeftRightArrow DoubleLongRightArrow DoubleRightArrow DoubleRightTee DoubleUpArrow DoubleUpDownArrow DoubleVerticalBar DoublyInfinite Down DownArrow DownArrowBar DownArrowUpArrow DownLeftRightVector DownLeftTeeVector DownLeftVector DownLeftVectorBar DownRightTeeVector DownRightVector DownRightVectorBar Downsample DownTee DownTeeArrow DownValues DragAndDrop DrawEdges DrawFrontFaces DrawHighlighted Drop DSolve Dt DualLinearProgramming DualSystemsModel DumpGet DumpSave DuplicateFreeQ Dynamic DynamicBox DynamicBoxOptions DynamicEvaluationTimeout DynamicLocation DynamicModule DynamicModuleBox DynamicModuleBoxOptions DynamicModuleParent DynamicModuleValues DynamicName DynamicNamespace DynamicReference DynamicSetting DynamicUpdating DynamicWrapper DynamicWrapperBox DynamicWrapperBoxOptions ' +
      'E EccentricityCentrality EdgeAdd EdgeBetweennessCentrality EdgeCapacity EdgeCapForm EdgeColor EdgeConnectivity EdgeCost EdgeCount EdgeCoverQ EdgeDashing EdgeDelete EdgeDetect EdgeForm EdgeIndex EdgeJoinForm EdgeLabeling EdgeLabels EdgeLabelStyle EdgeList EdgeOpacity EdgeQ EdgeRenderingFunction EdgeRules EdgeShapeFunction EdgeStyle EdgeThickness EdgeWeight Editable EditButtonSettings EditCellTagsSettings EditDistance EffectiveInterest Eigensystem Eigenvalues EigenvectorCentrality Eigenvectors Element ElementData Eliminate EliminationOrder EllipticE EllipticExp EllipticExpPrime EllipticF EllipticFilterModel EllipticK EllipticLog EllipticNomeQ EllipticPi EllipticReducedHalfPeriods EllipticTheta EllipticThetaPrime EmitSound EmphasizeSyntaxErrors EmpiricalDistribution Empty EmptyGraphQ EnableConsolePrintPacket Enabled Encode End EndAdd EndDialogPacket EndFrontEndInteractionPacket EndOfFile EndOfLine EndOfString EndPackage EngineeringForm Enter EnterExpressionPacket EnterTextPacket Entropy EntropyFilter Environment Epilog Equal EqualColumns EqualRows EqualTilde EquatedTo Equilibrium EquirippleFilterKernel Equivalent Erf Erfc Erfi ErlangB ErlangC ErlangDistribution Erosion ErrorBox ErrorBoxOptions ErrorNorm ErrorPacket ErrorsDialogSettings EstimatedDistribution EstimatedProcess EstimatorGains EstimatorRegulator EuclideanDistance EulerE EulerGamma EulerianGraphQ EulerPhi Evaluatable Evaluate Evaluated EvaluatePacket EvaluationCell EvaluationCompletionAction EvaluationElements EvaluationMode EvaluationMonitor EvaluationNotebook EvaluationObject EvaluationOrder Evaluator EvaluatorNames EvenQ EventData EventEvaluator EventHandler EventHandlerTag EventLabels ExactBlackmanWindow ExactNumberQ ExactRootIsolation ExampleData Except ExcludedForms ExcludePods Exclusions ExclusionsStyle Exists Exit ExitDialog Exp Expand ExpandAll ExpandDenominator ExpandFileName ExpandNumerator Expectation ExpectationE ExpectedValue ExpGammaDistribution ExpIntegralE ExpIntegralEi Exponent ExponentFunction ExponentialDistribution ExponentialFamily ExponentialGeneratingFunction ExponentialMovingAverage ExponentialPowerDistribution ExponentPosition ExponentStep Export ExportAutoReplacements ExportPacket ExportString Expression ExpressionCell ExpressionPacket ExpToTrig ExtendedGCD Extension ExtentElementFunction ExtentMarkers ExtentSize ExternalCall ExternalDataCharacterEncoding Extract ExtractArchive ExtremeValueDistribution ' +
      'FaceForm FaceGrids FaceGridsStyle Factor FactorComplete Factorial Factorial2 FactorialMoment FactorialMomentGeneratingFunction FactorialPower FactorInteger FactorList FactorSquareFree FactorSquareFreeList FactorTerms FactorTermsList Fail FailureDistribution False FARIMAProcess FEDisableConsolePrintPacket FeedbackSector FeedbackSectorStyle FeedbackType FEEnableConsolePrintPacket Fibonacci FieldHint FieldHintStyle FieldMasked FieldSize File FileBaseName FileByteCount FileDate FileExistsQ FileExtension FileFormat FileHash FileInformation FileName FileNameDepth FileNameDialogSettings FileNameDrop FileNameJoin FileNames FileNameSetter FileNameSplit FileNameTake FilePrint FileType FilledCurve FilledCurveBox Filling FillingStyle FillingTransform FilterRules FinancialBond FinancialData FinancialDerivative FinancialIndicator Find FindArgMax FindArgMin FindClique FindClusters FindCurvePath FindDistributionParameters FindDivisions FindEdgeCover FindEdgeCut FindEulerianCycle FindFaces FindFile FindFit FindGeneratingFunction FindGeoLocation FindGeometricTransform FindGraphCommunities FindGraphIsomorphism FindGraphPartition FindHamiltonianCycle FindIndependentEdgeSet FindIndependentVertexSet FindInstance FindIntegerNullVector FindKClan FindKClique FindKClub FindKPlex FindLibrary FindLinearRecurrence FindList FindMaximum FindMaximumFlow FindMaxValue FindMinimum FindMinimumCostFlow FindMinimumCut FindMinValue FindPermutation FindPostmanTour FindProcessParameters FindRoot FindSequenceFunction FindSettings FindShortestPath FindShortestTour FindThreshold FindVertexCover FindVertexCut Fine FinishDynamic FiniteAbelianGroupCount FiniteGroupCount FiniteGroupData First FirstPassageTimeDistribution FischerGroupFi22 FischerGroupFi23 FischerGroupFi24Prime FisherHypergeometricDistribution FisherRatioTest FisherZDistribution Fit FitAll FittedModel FixedPoint FixedPointList FlashSelection Flat Flatten FlattenAt FlatTopWindow FlipView Floor FlushPrintOutputPacket Fold FoldList Font FontColor FontFamily FontForm FontName FontOpacity FontPostScriptName FontProperties FontReencoding FontSize FontSlant FontSubstitutions FontTracking FontVariations FontWeight For ForAll Format FormatRules FormatType FormatTypeAutoConvert FormatValues FormBox FormBoxOptions FortranForm Forward ForwardBackward Fourier FourierCoefficient FourierCosCoefficient FourierCosSeries FourierCosTransform FourierDCT FourierDCTFilter FourierDCTMatrix FourierDST FourierDSTMatrix FourierMatrix FourierParameters FourierSequenceTransform FourierSeries FourierSinCoefficient FourierSinSeries FourierSinTransform FourierTransform FourierTrigSeries FractionalBrownianMotionProcess FractionalPart FractionBox FractionBoxOptions FractionLine Frame FrameBox FrameBoxOptions Framed FrameInset FrameLabel Frameless FrameMargins FrameStyle FrameTicks FrameTicksStyle FRatioDistribution FrechetDistribution FreeQ FrequencySamplingFilterKernel FresnelC FresnelS Friday FrobeniusNumber FrobeniusSolve ' +
      'FromCharacterCode FromCoefficientRules FromContinuedFraction FromDate FromDigits FromDMS Front FrontEndDynamicExpression FrontEndEventActions FrontEndExecute FrontEndObject FrontEndResource FrontEndResourceString FrontEndStackSize FrontEndToken FrontEndTokenExecute FrontEndValueCache FrontEndVersion FrontFaceColor FrontFaceOpacity Full FullAxes FullDefinition FullForm FullGraphics FullOptions FullSimplify Function FunctionExpand FunctionInterpolation FunctionSpace FussellVeselyImportance ' +
      'GaborFilter GaborMatrix GaborWavelet GainMargins GainPhaseMargins Gamma GammaDistribution GammaRegularized GapPenalty Gather GatherBy GaugeFaceElementFunction GaugeFaceStyle GaugeFrameElementFunction GaugeFrameSize GaugeFrameStyle GaugeLabels GaugeMarkers GaugeStyle GaussianFilter GaussianIntegers GaussianMatrix GaussianWindow GCD GegenbauerC General GeneralizedLinearModelFit GenerateConditions GeneratedCell GeneratedParameters GeneratingFunction Generic GenericCylindricalDecomposition GenomeData GenomeLookup GeodesicClosing GeodesicDilation GeodesicErosion GeodesicOpening GeoDestination GeodesyData GeoDirection GeoDistance GeoGridPosition GeometricBrownianMotionProcess GeometricDistribution GeometricMean GeometricMeanFilter GeometricTransformation GeometricTransformation3DBox GeometricTransformation3DBoxOptions GeometricTransformationBox GeometricTransformationBoxOptions GeoPosition GeoPositionENU GeoPositionXYZ GeoProjectionData GestureHandler GestureHandlerTag Get GetBoundingBoxSizePacket GetContext GetEnvironment GetFileName GetFrontEndOptionsDataPacket GetLinebreakInformationPacket GetMenusPacket GetPageBreakInformationPacket Glaisher GlobalClusteringCoefficient GlobalPreferences GlobalSession Glow GoldenRatio GompertzMakehamDistribution GoodmanKruskalGamma GoodmanKruskalGammaTest Goto Grad Gradient GradientFilter GradientOrientationFilter Graph GraphAssortativity GraphCenter GraphComplement GraphData GraphDensity GraphDiameter GraphDifference GraphDisjointUnion ' +
      'GraphDistance GraphDistanceMatrix GraphElementData GraphEmbedding GraphHighlight GraphHighlightStyle GraphHub Graphics Graphics3D Graphics3DBox Graphics3DBoxOptions GraphicsArray GraphicsBaseline GraphicsBox GraphicsBoxOptions GraphicsColor GraphicsColumn GraphicsComplex GraphicsComplex3DBox GraphicsComplex3DBoxOptions GraphicsComplexBox GraphicsComplexBoxOptions GraphicsContents GraphicsData GraphicsGrid GraphicsGridBox GraphicsGroup GraphicsGroup3DBox GraphicsGroup3DBoxOptions GraphicsGroupBox GraphicsGroupBoxOptions GraphicsGrouping GraphicsHighlightColor GraphicsRow GraphicsSpacing GraphicsStyle GraphIntersection GraphLayout GraphLinkEfficiency GraphPeriphery GraphPlot GraphPlot3D GraphPower GraphPropertyDistribution GraphQ GraphRadius GraphReciprocity GraphRoot GraphStyle GraphUnion Gray GrayLevel GreatCircleDistance Greater GreaterEqual GreaterEqualLess GreaterFullEqual GreaterGreater GreaterLess GreaterSlantEqual GreaterTilde Green Grid GridBaseline GridBox GridBoxAlignment GridBoxBackground GridBoxDividers GridBoxFrame GridBoxItemSize GridBoxItemStyle GridBoxOptions GridBoxSpacings GridCreationSettings GridDefaultElement GridElementStyleOptions GridFrame GridFrameMargins GridGraph GridLines GridLinesStyle GroebnerBasis GroupActionBase GroupCentralizer GroupElementFromWord GroupElementPosition GroupElementQ GroupElements GroupElementToWord GroupGenerators GroupMultiplicationTable GroupOrbits GroupOrder GroupPageBreakWithin GroupSetwiseStabilizer GroupStabilizer GroupStabilizerChain Gudermannian GumbelDistribution ' +
      'HaarWavelet HadamardMatrix HalfNormalDistribution HamiltonianGraphQ HammingDistance HammingWindow HankelH1 HankelH2 HankelMatrix HannPoissonWindow HannWindow HaradaNortonGroupHN HararyGraph HarmonicMean HarmonicMeanFilter HarmonicNumber Hash HashTable Haversine HazardFunction Head HeadCompose Heads HeavisideLambda HeavisidePi HeavisideTheta HeldGroupHe HeldPart HelpBrowserLookup HelpBrowserNotebook HelpBrowserSettings HermiteDecomposition HermiteH HermitianMatrixQ HessenbergDecomposition Hessian HexadecimalCharacter Hexahedron HexahedronBox HexahedronBoxOptions HiddenSurface HighlightGraph HighlightImage HighpassFilter HigmanSimsGroupHS HilbertFilter HilbertMatrix Histogram Histogram3D HistogramDistribution HistogramList HistogramTransform HistogramTransformInterpolation HitMissTransform HITSCentrality HodgeDual HoeffdingD HoeffdingDTest Hold HoldAll HoldAllComplete HoldComplete HoldFirst HoldForm HoldPattern HoldRest HolidayCalendar HomeDirectory HomePage Horizontal HorizontalForm HorizontalGauge HorizontalScrollPosition HornerForm HotellingTSquareDistribution HoytDistribution HTMLSave Hue HumpDownHump HumpEqual HurwitzLerchPhi HurwitzZeta HyperbolicDistribution HypercubeGraph HyperexponentialDistribution Hyperfactorial Hypergeometric0F1 Hypergeometric0F1Regularized Hypergeometric1F1 Hypergeometric1F1Regularized Hypergeometric2F1 Hypergeometric2F1Regularized HypergeometricDistribution HypergeometricPFQ HypergeometricPFQRegularized HypergeometricU Hyperlink HyperlinkCreationSettings Hyphenation HyphenationOptions HypoexponentialDistribution HypothesisTestData ' +
      'I Identity IdentityMatrix If IgnoreCase Im Image Image3D Image3DSlices ImageAccumulate ImageAdd ImageAdjust ImageAlign ImageApply ImageAspectRatio ImageAssemble ImageCache ImageCacheValid ImageCapture ImageChannels ImageClip ImageColorSpace ImageCompose ImageConvolve ImageCooccurrence ImageCorners ImageCorrelate ImageCorrespondingPoints ImageCrop ImageData ImageDataPacket ImageDeconvolve ImageDemosaic ImageDifference ImageDimensions ImageDistance ImageEffect ImageFeatureTrack ImageFileApply ImageFileFilter ImageFileScan ImageFilter ImageForestingComponents ImageForwardTransformation ImageHistogram ImageKeypoints ImageLevels ImageLines ImageMargins ImageMarkers ImageMeasurements ImageMultiply ImageOffset ImagePad ImagePadding ImagePartition ImagePeriodogram ImagePerspectiveTransformation ImageQ ImageRangeCache ImageReflect ImageRegion ImageResize ImageResolution ImageRotate ImageRotated ImageScaled ImageScan ImageSize ImageSizeAction ImageSizeCache ImageSizeMultipliers ImageSizeRaw ImageSubtract ImageTake ImageTransformation ImageTrim ImageType ImageValue ImageValuePositions Implies Import ImportAutoReplacements ImportString ImprovementImportance In IncidenceGraph IncidenceList IncidenceMatrix IncludeConstantBasis IncludeFileExtension IncludePods IncludeSingularTerm Increment Indent IndentingNewlineSpacings IndentMaxFraction IndependenceTest IndependentEdgeSetQ IndependentUnit IndependentVertexSetQ Indeterminate IndexCreationOptions Indexed IndexGraph IndexTag Inequality InexactNumberQ InexactNumbers Infinity Infix Information Inherited InheritScope Initialization InitializationCell InitializationCellEvaluation InitializationCellWarning InlineCounterAssignments InlineCounterIncrements InlineRules Inner Inpaint Input InputAliases InputAssumptions InputAutoReplacements InputField InputFieldBox InputFieldBoxOptions InputForm InputGrouping InputNamePacket InputNotebook InputPacket InputSettings InputStream InputString InputStringPacket InputToBoxFormPacket Insert InsertionPointObject InsertResults Inset Inset3DBox Inset3DBoxOptions InsetBox InsetBoxOptions Install InstallService InString Integer IntegerDigits IntegerExponent IntegerLength IntegerPart IntegerPartitions IntegerQ Integers IntegerString Integral Integrate Interactive InteractiveTradingChart Interlaced Interleaving InternallyBalancedDecomposition InterpolatingFunction InterpolatingPolynomial Interpolation InterpolationOrder InterpolationPoints InterpolationPrecision Interpretation InterpretationBox InterpretationBoxOptions InterpretationFunction ' +
      'InterpretTemplate InterquartileRange Interrupt InterruptSettings Intersection Interval IntervalIntersection IntervalMemberQ IntervalUnion Inverse InverseBetaRegularized InverseCDF InverseChiSquareDistribution InverseContinuousWaveletTransform InverseDistanceTransform InverseEllipticNomeQ InverseErf InverseErfc InverseFourier InverseFourierCosTransform InverseFourierSequenceTransform InverseFourierSinTransform InverseFourierTransform InverseFunction InverseFunctions InverseGammaDistribution InverseGammaRegularized InverseGaussianDistribution InverseGudermannian InverseHaversine InverseJacobiCD InverseJacobiCN InverseJacobiCS InverseJacobiDC InverseJacobiDN InverseJacobiDS InverseJacobiNC InverseJacobiND InverseJacobiNS InverseJacobiSC InverseJacobiSD InverseJacobiSN InverseLaplaceTransform InversePermutation InverseRadon InverseSeries InverseSurvivalFunction InverseWaveletTransform InverseWeierstrassP InverseZTransform Invisible InvisibleApplication InvisibleTimes IrreduciblePolynomialQ IsolatingInterval IsomorphicGraphQ IsotopeData Italic Item ItemBox ItemBoxOptions ItemSize ItemStyle ItoProcess ' +
      'JaccardDissimilarity JacobiAmplitude Jacobian JacobiCD JacobiCN JacobiCS JacobiDC JacobiDN JacobiDS JacobiNC JacobiND JacobiNS JacobiP JacobiSC JacobiSD JacobiSN JacobiSymbol JacobiZeta JankoGroupJ1 JankoGroupJ2 JankoGroupJ3 JankoGroupJ4 JarqueBeraALMTest JohnsonDistribution Join Joined JoinedCurve JoinedCurveBox JoinForm JordanDecomposition JordanModelDecomposition ' +
      'K KagiChart KaiserBesselWindow KaiserWindow KalmanEstimator KalmanFilter KarhunenLoeveDecomposition KaryTree KatzCentrality KCoreComponents KDistribution KelvinBei KelvinBer KelvinKei KelvinKer KendallTau KendallTauTest KernelExecute KernelMixtureDistribution KernelObject Kernels Ket Khinchin KirchhoffGraph KirchhoffMatrix KleinInvariantJ KnightTourGraph KnotData KnownUnitQ KolmogorovSmirnovTest KroneckerDelta KroneckerModelDecomposition KroneckerProduct KroneckerSymbol KuiperTest KumaraswamyDistribution Kurtosis KuwaharaFilter ' +
      'Label Labeled LabeledSlider LabelingFunction LabelStyle LaguerreL LambdaComponents LambertW LanczosWindow LandauDistribution Language LanguageCategory LaplaceDistribution LaplaceTransform Laplacian LaplacianFilter LaplacianGaussianFilter Large Larger Last Latitude LatitudeLongitude LatticeData LatticeReduce Launch LaunchKernels LayeredGraphPlot LayerSizeFunction LayoutInformation LCM LeafCount LeapYearQ LeastSquares LeastSquaresFilterKernel Left LeftArrow LeftArrowBar LeftArrowRightArrow LeftDownTeeVector LeftDownVector LeftDownVectorBar LeftRightArrow LeftRightVector LeftTee LeftTeeArrow LeftTeeVector LeftTriangle LeftTriangleBar LeftTriangleEqual LeftUpDownVector LeftUpTeeVector LeftUpVector LeftUpVectorBar LeftVector LeftVectorBar LegendAppearance Legended LegendFunction LegendLabel LegendLayout LegendMargins LegendMarkers LegendMarkerSize LegendreP LegendreQ LegendreType Length LengthWhile LerchPhi Less LessEqual LessEqualGreater LessFullEqual LessGreater LessLess LessSlantEqual LessTilde LetterCharacter LetterQ Level LeveneTest LeviCivitaTensor LevyDistribution Lexicographic LibraryFunction LibraryFunctionError LibraryFunctionInformation LibraryFunctionLoad LibraryFunctionUnload LibraryLoad LibraryUnload LicenseID LiftingFilterData LiftingWaveletTransform LightBlue LightBrown LightCyan Lighter LightGray LightGreen Lighting LightingAngle LightMagenta LightOrange LightPink LightPurple LightRed LightSources LightYellow Likelihood Limit LimitsPositioning LimitsPositioningTokens LindleyDistribution Line Line3DBox LinearFilter LinearFractionalTransform LinearModelFit LinearOffsetFunction LinearProgramming LinearRecurrence LinearSolve LinearSolveFunction LineBox LineBreak LinebreakAdjustments LineBreakChart LineBreakWithin LineColor LineForm LineGraph LineIndent LineIndentMaxFraction LineIntegralConvolutionPlot LineIntegralConvolutionScale LineLegend LineOpacity LineSpacing LineWrapParts LinkActivate LinkClose LinkConnect LinkConnectedQ LinkCreate LinkError LinkFlush LinkFunction LinkHost LinkInterrupt LinkLaunch LinkMode LinkObject LinkOpen LinkOptions LinkPatterns LinkProtocol LinkRead LinkReadHeld LinkReadyQ Links LinkWrite LinkWriteHeld LiouvilleLambda List Listable ListAnimate ListContourPlot ListContourPlot3D ListConvolve ListCorrelate ListCurvePathPlot ListDeconvolve ListDensityPlot Listen ListFourierSequenceTransform ListInterpolation ListLineIntegralConvolutionPlot ListLinePlot ListLogLinearPlot ListLogLogPlot ListLogPlot ListPicker ListPickerBox ListPickerBoxBackground ListPickerBoxOptions ListPlay ListPlot ListPlot3D ListPointPlot3D ListPolarPlot ListQ ListStreamDensityPlot ListStreamPlot ListSurfacePlot3D ListVectorDensityPlot ListVectorPlot ListVectorPlot3D ListZTransform Literal LiteralSearch LocalClusteringCoefficient LocalizeVariables LocationEquivalenceTest LocationTest Locator LocatorAutoCreate LocatorBox LocatorBoxOptions LocatorCentering LocatorPane LocatorPaneBox LocatorPaneBoxOptions ' +
      'LocatorRegion Locked Log Log10 Log2 LogBarnesG LogGamma LogGammaDistribution LogicalExpand LogIntegral LogisticDistribution LogitModelFit LogLikelihood LogLinearPlot LogLogisticDistribution LogLogPlot LogMultinormalDistribution LogNormalDistribution LogPlot LogRankTest LogSeriesDistribution LongEqual Longest LongestAscendingSequence LongestCommonSequence LongestCommonSequencePositions LongestCommonSubsequence LongestCommonSubsequencePositions LongestMatch LongForm Longitude LongLeftArrow LongLeftRightArrow LongRightArrow Loopback LoopFreeGraphQ LowerCaseQ LowerLeftArrow LowerRightArrow LowerTriangularize LowpassFilter LQEstimatorGains LQGRegulator LQOutputRegulatorGains LQRegulatorGains LUBackSubstitution LucasL LuccioSamiComponents LUDecomposition LyapunovSolve LyonsGroupLy ' +
      'MachineID MachineName MachineNumberQ MachinePrecision MacintoshSystemPageSetup Magenta Magnification Magnify MainSolve MaintainDynamicCaches Majority MakeBoxes MakeExpression MakeRules MangoldtLambda ManhattanDistance Manipulate Manipulator MannWhitneyTest MantissaExponent Manual Map MapAll MapAt MapIndexed MAProcess MapThread MarcumQ MardiaCombinedTest MardiaKurtosisTest MardiaSkewnessTest MarginalDistribution MarkovProcessProperties Masking MatchingDissimilarity MatchLocalNameQ MatchLocalNames MatchQ Material MathematicaNotation MathieuC MathieuCharacteristicA MathieuCharacteristicB MathieuCharacteristicExponent MathieuCPrime MathieuGroupM11 MathieuGroupM12 MathieuGroupM22 MathieuGroupM23 MathieuGroupM24 MathieuS MathieuSPrime MathMLForm MathMLText Matrices MatrixExp MatrixForm MatrixFunction MatrixLog MatrixPlot MatrixPower MatrixQ MatrixRank Max MaxBend MaxDetect MaxExtraBandwidths MaxExtraConditions MaxFeatures MaxFilter Maximize MaxIterations MaxMemoryUsed MaxMixtureKernels MaxPlotPoints MaxPoints MaxRecursion MaxStableDistribution MaxStepFraction MaxSteps MaxStepSize MaxValue MaxwellDistribution McLaughlinGroupMcL Mean MeanClusteringCoefficient MeanDegreeConnectivity MeanDeviation MeanFilter MeanGraphDistance MeanNeighborDegree MeanShift MeanShiftFilter Median MedianDeviation MedianFilter Medium MeijerG MeixnerDistribution MemberQ MemoryConstrained MemoryInUse Menu MenuAppearance MenuCommandKey MenuEvaluator MenuItem MenuPacket MenuSortingValue MenuStyle MenuView MergeDifferences Mesh MeshFunctions MeshRange MeshShading MeshStyle Message MessageDialog MessageList MessageName MessageOptions MessagePacket Messages MessagesNotebook MetaCharacters MetaInformation Method MethodOptions MexicanHatWavelet MeyerWavelet Min MinDetect MinFilter MinimalPolynomial MinimalStateSpaceModel Minimize Minors MinRecursion MinSize MinStableDistribution Minus MinusPlus MinValue Missing MissingDataMethod MittagLefflerE MixedRadix MixedRadixQuantity MixtureDistribution Mod Modal Mode Modular ModularLambda Module Modulus MoebiusMu Moment Momentary MomentConvert MomentEvaluate MomentGeneratingFunction Monday Monitor MonomialList MonomialOrder MonsterGroupM MorletWavelet MorphologicalBinarize MorphologicalBranchPoints MorphologicalComponents MorphologicalEulerNumber MorphologicalGraph MorphologicalPerimeter MorphologicalTransform Most MouseAnnotation MouseAppearance MouseAppearanceTag MouseButtons Mouseover MousePointerNote MousePosition MovingAverage MovingMedian MoyalDistribution MultiedgeStyle MultilaunchWarning MultiLetterItalics MultiLetterStyle MultilineFunction Multinomial MultinomialDistribution MultinormalDistribution MultiplicativeOrder Multiplicity Multiselection MultivariateHypergeometricDistribution MultivariatePoissonDistribution MultivariateTDistribution ' +
      'N NakagamiDistribution NameQ Names NamespaceBox Nand NArgMax NArgMin NBernoulliB NCache NDSolve NDSolveValue Nearest NearestFunction NeedCurrentFrontEndPackagePacket NeedCurrentFrontEndSymbolsPacket NeedlemanWunschSimilarity Needs Negative NegativeBinomialDistribution NegativeMultinomialDistribution NeighborhoodGraph Nest NestedGreaterGreater NestedLessLess NestedScriptRules NestList NestWhile NestWhileList NevilleThetaC NevilleThetaD NevilleThetaN NevilleThetaS NewPrimitiveStyle NExpectation Next NextPrime NHoldAll NHoldFirst NHoldRest NicholsGridLines NicholsPlot NIntegrate NMaximize NMaxValue NMinimize NMinValue NominalVariables NonAssociative NoncentralBetaDistribution NoncentralChiSquareDistribution NoncentralFRatioDistribution NoncentralStudentTDistribution NonCommutativeMultiply NonConstants None NonlinearModelFit NonlocalMeansFilter NonNegative NonPositive Nor NorlundB Norm Normal NormalDistribution NormalGrouping Normalize NormalizedSquaredEuclideanDistance NormalsFunction NormFunction Not NotCongruent NotCupCap NotDoubleVerticalBar Notebook NotebookApply NotebookAutoSave NotebookClose NotebookConvertSettings NotebookCreate NotebookCreateReturnObject NotebookDefault NotebookDelete NotebookDirectory NotebookDynamicExpression NotebookEvaluate NotebookEventActions NotebookFileName NotebookFind NotebookFindReturnObject NotebookGet NotebookGetLayoutInformationPacket NotebookGetMisspellingsPacket NotebookInformation NotebookInterfaceObject NotebookLocate NotebookObject NotebookOpen NotebookOpenReturnObject NotebookPath NotebookPrint NotebookPut NotebookPutReturnObject NotebookRead NotebookResetGeneratedCells Notebooks NotebookSave NotebookSaveAs NotebookSelection NotebookSetupLayoutInformationPacket NotebooksMenu NotebookWrite NotElement NotEqualTilde NotExists NotGreater NotGreaterEqual NotGreaterFullEqual NotGreaterGreater NotGreaterLess NotGreaterSlantEqual NotGreaterTilde NotHumpDownHump NotHumpEqual NotLeftTriangle NotLeftTriangleBar NotLeftTriangleEqual NotLess NotLessEqual NotLessFullEqual NotLessGreater NotLessLess NotLessSlantEqual NotLessTilde NotNestedGreaterGreater NotNestedLessLess NotPrecedes NotPrecedesEqual NotPrecedesSlantEqual NotPrecedesTilde NotReverseElement NotRightTriangle NotRightTriangleBar NotRightTriangleEqual NotSquareSubset NotSquareSubsetEqual NotSquareSuperset NotSquareSupersetEqual NotSubset NotSubsetEqual NotSucceeds NotSucceedsEqual NotSucceedsSlantEqual NotSucceedsTilde NotSuperset NotSupersetEqual NotTilde NotTildeEqual NotTildeFullEqual NotTildeTilde NotVerticalBar NProbability NProduct NProductFactors NRoots NSolve NSum NSumTerms Null NullRecords NullSpace NullWords Number NumberFieldClassNumber NumberFieldDiscriminant NumberFieldFundamentalUnits NumberFieldIntegralBasis NumberFieldNormRepresentatives NumberFieldRegulator NumberFieldRootsOfUnity NumberFieldSignature NumberForm NumberFormat NumberMarks NumberMultiplier NumberPadding NumberPoint NumberQ NumberSeparator ' +
      'NumberSigns NumberString Numerator NumericFunction NumericQ NuttallWindow NValues NyquistGridLines NyquistPlot ' +
      'O ObservabilityGramian ObservabilityMatrix ObservableDecomposition ObservableModelQ OddQ Off Offset OLEData On ONanGroupON OneIdentity Opacity Open OpenAppend Opener OpenerBox OpenerBoxOptions OpenerView OpenFunctionInspectorPacket Opening OpenRead OpenSpecialOptions OpenTemporary OpenWrite Operate OperatingSystem OptimumFlowData Optional OptionInspectorSettings OptionQ Options OptionsPacket OptionsPattern OptionValue OptionValueBox OptionValueBoxOptions Or Orange Order OrderDistribution OrderedQ Ordering Orderless OrnsteinUhlenbeckProcess Orthogonalize Out Outer OutputAutoOverwrite OutputControllabilityMatrix OutputControllableModelQ OutputForm OutputFormData OutputGrouping OutputMathEditExpression OutputNamePacket OutputResponse OutputSizeLimit OutputStream Over OverBar OverDot Overflow OverHat Overlaps Overlay OverlayBox OverlayBoxOptions Overscript OverscriptBox OverscriptBoxOptions OverTilde OverVector OwenT OwnValues ' +
      'PackingMethod PaddedForm Padding PadeApproximant PadLeft PadRight PageBreakAbove PageBreakBelow PageBreakWithin PageFooterLines PageFooters PageHeaderLines PageHeaders PageHeight PageRankCentrality PageWidth PairedBarChart PairedHistogram PairedSmoothHistogram PairedTTest PairedZTest PaletteNotebook PalettePath Pane PaneBox PaneBoxOptions Panel PanelBox PanelBoxOptions Paneled PaneSelector PaneSelectorBox PaneSelectorBoxOptions PaperWidth ParabolicCylinderD ParagraphIndent ParagraphSpacing ParallelArray ParallelCombine ParallelDo ParallelEvaluate Parallelization Parallelize ParallelMap ParallelNeeds ParallelProduct ParallelSubmit ParallelSum ParallelTable ParallelTry Parameter ParameterEstimator ParameterMixtureDistribution ParameterVariables ParametricFunction ParametricNDSolve ParametricNDSolveValue ParametricPlot ParametricPlot3D ParentConnect ParentDirectory ParentForm Parenthesize ParentList ParetoDistribution Part PartialCorrelationFunction PartialD ParticleData Partition PartitionsP PartitionsQ ParzenWindow PascalDistribution PassEventsDown PassEventsUp Paste PasteBoxFormInlineCells PasteButton Path PathGraph PathGraphQ Pattern PatternSequence PatternTest PauliMatrix PaulWavelet Pause PausedTime PDF PearsonChiSquareTest PearsonCorrelationTest PearsonDistribution PerformanceGoal PeriodicInterpolation Periodogram PeriodogramArray PermutationCycles PermutationCyclesQ PermutationGroup PermutationLength PermutationList PermutationListQ PermutationMax PermutationMin PermutationOrder PermutationPower PermutationProduct PermutationReplace Permutations PermutationSupport Permute PeronaMalikFilter Perpendicular PERTDistribution PetersenGraph PhaseMargins Pi Pick PIDData PIDDerivativeFilter PIDFeedforward PIDTune Piecewise PiecewiseExpand PieChart PieChart3D PillaiTrace PillaiTraceTest Pink Pivoting PixelConstrained PixelValue PixelValuePositions Placed Placeholder PlaceholderReplace Plain PlanarGraphQ Play PlayRange Plot Plot3D Plot3Matrix PlotDivision PlotJoined PlotLabel PlotLayout PlotLegends PlotMarkers PlotPoints PlotRange PlotRangeClipping PlotRangePadding PlotRegion PlotStyle Plus PlusMinus Pochhammer PodStates PodWidth Point Point3DBox PointBox PointFigureChart PointForm PointLegend PointSize PoissonConsulDistribution PoissonDistribution PoissonProcess PoissonWindow PolarAxes PolarAxesOrigin PolarGridLines PolarPlot PolarTicks PoleZeroMarkers PolyaAeppliDistribution PolyGamma Polygon Polygon3DBox Polygon3DBoxOptions PolygonBox PolygonBoxOptions PolygonHoleScale PolygonIntersections PolygonScale PolyhedronData PolyLog PolynomialExtendedGCD PolynomialForm PolynomialGCD PolynomialLCM PolynomialMod PolynomialQ PolynomialQuotient PolynomialQuotientRemainder PolynomialReduce PolynomialRemainder Polynomials PopupMenu PopupMenuBox PopupMenuBoxOptions PopupView PopupWindow Position Positive PositiveDefiniteMatrixQ PossibleZeroQ Postfix PostScript Power PowerDistribution PowerExpand PowerMod PowerModList ' +
      'PowerSpectralDensity PowersRepresentations PowerSymmetricPolynomial Precedence PrecedenceForm Precedes PrecedesEqual PrecedesSlantEqual PrecedesTilde Precision PrecisionGoal PreDecrement PredictionRoot PreemptProtect PreferencesPath Prefix PreIncrement Prepend PrependTo PreserveImageOptions Previous PriceGraphDistribution PrimaryPlaceholder Prime PrimeNu PrimeOmega PrimePi PrimePowerQ PrimeQ Primes PrimeZetaP PrimitiveRoot PrincipalComponents PrincipalValue Print PrintAction PrintForm PrintingCopies PrintingOptions PrintingPageRange PrintingStartingPageNumber PrintingStyleEnvironment PrintPrecision PrintTemporary Prism PrismBox PrismBoxOptions PrivateCellOptions PrivateEvaluationOptions PrivateFontOptions PrivateFrontEndOptions PrivateNotebookOptions PrivatePaths Probability ProbabilityDistribution ProbabilityPlot ProbabilityPr ProbabilityScalePlot ProbitModelFit ProcessEstimator ProcessParameterAssumptions ProcessParameterQ ProcessStateDomain ProcessTimeDomain Product ProductDistribution ProductLog ProgressIndicator ProgressIndicatorBox ProgressIndicatorBoxOptions Projection Prolog PromptForm Properties Property PropertyList PropertyValue Proportion Proportional Protect Protected ProteinData Pruning PseudoInverse Purple Put PutAppend Pyramid PyramidBox PyramidBoxOptions ' +
      'QBinomial QFactorial QGamma QHypergeometricPFQ QPochhammer QPolyGamma QRDecomposition QuadraticIrrationalQ Quantile QuantilePlot Quantity QuantityForm QuantityMagnitude QuantityQ QuantityUnit Quartics QuartileDeviation Quartiles QuartileSkewness QueueingNetworkProcess QueueingProcess QueueProperties Quiet Quit Quotient QuotientRemainder ' +
      'RadialityCentrality RadicalBox RadicalBoxOptions RadioButton RadioButtonBar RadioButtonBox RadioButtonBoxOptions Radon RamanujanTau RamanujanTauL RamanujanTauTheta RamanujanTauZ Random RandomChoice RandomComplex RandomFunction RandomGraph RandomImage RandomInteger RandomPermutation RandomPrime RandomReal RandomSample RandomSeed RandomVariate RandomWalkProcess Range RangeFilter RangeSpecification RankedMax RankedMin Raster Raster3D Raster3DBox Raster3DBoxOptions RasterArray RasterBox RasterBoxOptions Rasterize RasterSize Rational RationalFunctions Rationalize Rationals Ratios Raw RawArray RawBoxes RawData RawMedium RayleighDistribution Re Read ReadList ReadProtected Real RealBlockDiagonalForm RealDigits RealExponent Reals Reap Record RecordLists RecordSeparators Rectangle RectangleBox RectangleBoxOptions RectangleChart RectangleChart3D RecurrenceFilter RecurrenceTable RecurringDigitsForm Red Reduce RefBox ReferenceLineStyle ReferenceMarkers ReferenceMarkerStyle Refine ReflectionMatrix ReflectionTransform Refresh RefreshRate RegionBinarize RegionFunction RegionPlot RegionPlot3D RegularExpression Regularization Reinstall Release ReleaseHold ReliabilityDistribution ReliefImage ReliefPlot Remove RemoveAlphaChannel RemoveAsynchronousTask Removed RemoveInputStreamMethod RemoveOutputStreamMethod RemoveProperty RemoveScheduledTask RenameDirectory RenameFile RenderAll RenderingOptions RenewalProcess RenkoChart Repeated RepeatedNull RepeatedString Replace ReplaceAll ReplaceHeldPart ReplaceImageValue ReplaceList ReplacePart ReplacePixelValue ReplaceRepeated Resampling Rescale RescalingTransform ResetDirectory ResetMenusPacket ResetScheduledTask Residue Resolve Rest Resultant ResumePacket Return ReturnExpressionPacket ReturnInputFormPacket ReturnPacket ReturnTextPacket Reverse ReverseBiorthogonalSplineWavelet ReverseElement ReverseEquilibrium ReverseGraph ReverseUpEquilibrium RevolutionAxis RevolutionPlot3D RGBColor RiccatiSolve RiceDistribution RidgeFilter RiemannR RiemannSiegelTheta RiemannSiegelZ Riffle Right RightArrow RightArrowBar RightArrowLeftArrow RightCosetRepresentative RightDownTeeVector RightDownVector RightDownVectorBar RightTee RightTeeArrow RightTeeVector RightTriangle RightTriangleBar RightTriangleEqual RightUpDownVector RightUpTeeVector RightUpVector RightUpVectorBar RightVector RightVectorBar RiskAchievementImportance RiskReductionImportance RogersTanimotoDissimilarity Root RootApproximant RootIntervals RootLocusPlot RootMeanSquare RootOfUnityQ RootReduce Roots RootSum Rotate RotateLabel RotateLeft RotateRight RotationAction RotationBox RotationBoxOptions RotationMatrix RotationTransform Round RoundImplies RoundingRadius Row RowAlignments RowBackgrounds RowBox RowHeights RowLines RowMinHeight RowReduce RowsEqual RowSpacings RSolve RudvalisGroupRu Rule RuleCondition RuleDelayed RuleForm RulerUnits Run RunScheduledTask RunThrough RuntimeAttributes RuntimeOptions RussellRaoDissimilarity ' +
      'SameQ SameTest SampleDepth SampledSoundFunction SampledSoundList SampleRate SamplingPeriod SARIMAProcess SARMAProcess SatisfiabilityCount SatisfiabilityInstances SatisfiableQ Saturday Save Saveable SaveAutoDelete SaveDefinitions SawtoothWave Scale Scaled ScaleDivisions ScaledMousePosition ScaleOrigin ScalePadding ScaleRanges ScaleRangeStyle ScalingFunctions ScalingMatrix ScalingTransform Scan ScheduledTaskActiveQ ScheduledTaskData ScheduledTaskObject ScheduledTasks SchurDecomposition ScientificForm ScreenRectangle ScreenStyleEnvironment ScriptBaselineShifts ScriptLevel ScriptMinSize ScriptRules ScriptSizeMultipliers Scrollbars ScrollingOptions ScrollPosition Sec Sech SechDistribution SectionGrouping SectorChart SectorChart3D SectorOrigin SectorSpacing SeedRandom Select Selectable SelectComponents SelectedCells SelectedNotebook Selection SelectionAnimate SelectionCell SelectionCellCreateCell SelectionCellDefaultStyle SelectionCellParentStyle SelectionCreateCell SelectionDebuggerTag SelectionDuplicateCell SelectionEvaluate SelectionEvaluateCreateCell SelectionMove SelectionPlaceholder SelectionSetStyle SelectWithContents SelfLoops SelfLoopStyle SemialgebraicComponentInstances SendMail Sequence SequenceAlignment SequenceForm SequenceHold SequenceLimit Series SeriesCoefficient SeriesData SessionTime Set SetAccuracy SetAlphaChannel SetAttributes Setbacks SetBoxFormNamesPacket SetDelayed SetDirectory SetEnvironment SetEvaluationNotebook SetFileDate SetFileLoadingContext SetNotebookStatusLine SetOptions SetOptionsPacket SetPrecision SetProperty SetSelectedNotebook SetSharedFunction SetSharedVariable SetSpeechParametersPacket SetStreamPosition SetSystemOptions Setter SetterBar SetterBox SetterBoxOptions Setting SetValue Shading Shallow ShannonWavelet ShapiroWilkTest Share Sharpen ShearingMatrix ShearingTransform ShenCastanMatrix Short ShortDownArrow Shortest ShortestMatch ShortestPathFunction ShortLeftArrow ShortRightArrow ShortUpArrow Show ShowAutoStyles ShowCellBracket ShowCellLabel ShowCellTags ShowClosedCellArea ShowContents ShowControls ShowCursorTracker ShowGroupOpenCloseIcon ShowGroupOpener ShowInvisibleCharacters ShowPageBreaks ShowPredictiveInterface ShowSelection ShowShortBoxForm ShowSpecialCharacters ShowStringCharacters ShowSyntaxStyles ShrinkingDelay ShrinkWrapBoundingBox SiegelTheta SiegelTukeyTest Sign Signature SignedRankTest SignificanceLevel SignPadding SignTest SimilarityRules SimpleGraph SimpleGraphQ Simplify Sin Sinc SinghMaddalaDistribution SingleEvaluation SingleLetterItalics SingleLetterStyle SingularValueDecomposition SingularValueList SingularValuePlot SingularValues Sinh SinhIntegral SinIntegral SixJSymbol Skeleton SkeletonTransform SkellamDistribution Skewness SkewNormalDistribution Skip SliceDistribution Slider Slider2D Slider2DBox Slider2DBoxOptions SliderBox SliderBoxOptions SlideView Slot SlotSequence Small SmallCircle Smaller SmithDelayCompensator SmithWatermanSimilarity ' +
      'SmoothDensityHistogram SmoothHistogram SmoothHistogram3D SmoothKernelDistribution SocialMediaData Socket SokalSneathDissimilarity Solve SolveAlways SolveDelayed Sort SortBy Sound SoundAndGraphics SoundNote SoundVolume Sow Space SpaceForm Spacer Spacings Span SpanAdjustments SpanCharacterRounding SpanFromAbove SpanFromBoth SpanFromLeft SpanLineThickness SpanMaxSize SpanMinSize SpanningCharacters SpanSymmetric SparseArray SpatialGraphDistribution Speak SpeakTextPacket SpearmanRankTest SpearmanRho Spectrogram SpectrogramArray Specularity SpellingCorrection SpellingDictionaries SpellingDictionariesPath SpellingOptions SpellingSuggestionsPacket Sphere SphereBox SphericalBesselJ SphericalBesselY SphericalHankelH1 SphericalHankelH2 SphericalHarmonicY SphericalPlot3D SphericalRegion SpheroidalEigenvalue SpheroidalJoiningFactor SpheroidalPS SpheroidalPSPrime SpheroidalQS SpheroidalQSPrime SpheroidalRadialFactor SpheroidalS1 SpheroidalS1Prime SpheroidalS2 SpheroidalS2Prime Splice SplicedDistribution SplineClosed SplineDegree SplineKnots SplineWeights Split SplitBy SpokenString Sqrt SqrtBox SqrtBoxOptions Square SquaredEuclideanDistance SquareFreeQ SquareIntersection SquaresR SquareSubset SquareSubsetEqual SquareSuperset SquareSupersetEqual SquareUnion SquareWave StabilityMargins StabilityMarginsStyle StableDistribution Stack StackBegin StackComplete StackInhibit StandardDeviation StandardDeviationFilter StandardForm Standardize StandbyDistribution Star StarGraph StartAsynchronousTask StartingStepSize StartOfLine StartOfString StartScheduledTask StartupSound StateDimensions StateFeedbackGains StateOutputEstimator StateResponse StateSpaceModel StateSpaceRealization StateSpaceTransform StationaryDistribution StationaryWaveletPacketTransform StationaryWaveletTransform StatusArea StatusCentrality StepMonitor StieltjesGamma StirlingS1 StirlingS2 StopAsynchronousTask StopScheduledTask StrataVariables StratonovichProcess StreamColorFunction StreamColorFunctionScaling StreamDensityPlot StreamPlot StreamPoints StreamPosition Streams StreamScale StreamStyle String StringBreak StringByteCount StringCases StringCount StringDrop StringExpression StringForm StringFormat StringFreeQ StringInsert StringJoin StringLength StringMatchQ StringPosition StringQ StringReplace StringReplaceList StringReplacePart StringReverse StringRotateLeft StringRotateRight StringSkeleton StringSplit StringTake StringToStream StringTrim StripBoxes StripOnInput StripWrapperBoxes StrokeForm StructuralImportance StructuredArray StructuredSelection StruveH StruveL Stub StudentTDistribution Style StyleBox StyleBoxAutoDelete StyleBoxOptions StyleData StyleDefinitions StyleForm StyleKeyMapping StyleMenuListing StyleNameDialogSettings StyleNames StylePrint StyleSheetPath Subfactorial Subgraph SubMinus SubPlus SubresultantPolynomialRemainders ' +
      'SubresultantPolynomials Subresultants Subscript SubscriptBox SubscriptBoxOptions Subscripted Subset SubsetEqual Subsets SubStar Subsuperscript SubsuperscriptBox SubsuperscriptBoxOptions Subtract SubtractFrom SubValues Succeeds SucceedsEqual SucceedsSlantEqual SucceedsTilde SuchThat Sum SumConvergence Sunday SuperDagger SuperMinus SuperPlus Superscript SuperscriptBox SuperscriptBoxOptions Superset SupersetEqual SuperStar Surd SurdForm SurfaceColor SurfaceGraphics SurvivalDistribution SurvivalFunction SurvivalModel SurvivalModelFit SuspendPacket SuzukiDistribution SuzukiGroupSuz SwatchLegend Switch Symbol SymbolName SymletWavelet Symmetric SymmetricGroup SymmetricMatrixQ SymmetricPolynomial SymmetricReduction Symmetrize SymmetrizedArray SymmetrizedArrayRules SymmetrizedDependentComponents SymmetrizedIndependentComponents SymmetrizedReplacePart SynchronousInitialization SynchronousUpdating Syntax SyntaxForm SyntaxInformation SyntaxLength SyntaxPacket SyntaxQ SystemDialogInput SystemException SystemHelpPath SystemInformation SystemInformationData SystemOpen SystemOptions SystemsModelDelay SystemsModelDelayApproximate SystemsModelDelete SystemsModelDimensions SystemsModelExtract SystemsModelFeedbackConnect SystemsModelLabels SystemsModelOrder SystemsModelParallelConnect SystemsModelSeriesConnect SystemsModelStateFeedbackConnect SystemStub ' +
      'Tab TabFilling Table TableAlignments TableDepth TableDirections TableForm TableHeadings TableSpacing TableView TableViewBox TabSpacings TabView TabViewBox TabViewBoxOptions TagBox TagBoxNote TagBoxOptions TaggingRules TagSet TagSetDelayed TagStyle TagUnset Take TakeWhile Tally Tan Tanh TargetFunctions TargetUnits TautologyQ TelegraphProcess TemplateBox TemplateBoxOptions TemplateSlotSequence TemporalData Temporary TemporaryVariable TensorContract TensorDimensions TensorExpand TensorProduct TensorQ TensorRank TensorReduce TensorSymmetry TensorTranspose TensorWedge Tetrahedron TetrahedronBox TetrahedronBoxOptions TeXForm TeXSave Text Text3DBox Text3DBoxOptions TextAlignment TextBand TextBoundingBox TextBox TextCell TextClipboardType TextData TextForm TextJustification TextLine TextPacket TextParagraph TextRecognize TextRendering TextStyle Texture TextureCoordinateFunction TextureCoordinateScaling Therefore ThermometerGauge Thick Thickness Thin Thinning ThisLink ThompsonGroupTh Thread ThreeJSymbol Threshold Through Throw Thumbnail Thursday Ticks TicksStyle Tilde TildeEqual TildeFullEqual TildeTilde TimeConstrained TimeConstraint Times TimesBy TimeSeriesForecast TimeSeriesInvertibility TimeUsed TimeValue TimeZone Timing Tiny TitleGrouping TitsGroupT ToBoxes ToCharacterCode ToColor ToContinuousTimeModel ToDate ToDiscreteTimeModel ToeplitzMatrix ToExpression ToFileName Together Toggle ToggleFalse Toggler TogglerBar TogglerBox TogglerBoxOptions ToHeldExpression ToInvertibleTimeSeries TokenWords Tolerance ToLowerCase ToNumberField TooBig Tooltip TooltipBox TooltipBoxOptions TooltipDelay TooltipStyle Top TopHatTransform TopologicalSort ToRadicals ToRules ToString Total TotalHeight TotalVariationFilter TotalWidth TouchscreenAutoZoom TouchscreenControlPlacement ToUpperCase Tr Trace TraceAbove TraceAction TraceBackward TraceDepth TraceDialog TraceForward TraceInternal TraceLevel TraceOff TraceOn TraceOriginal TracePrint TraceScan TrackedSymbols TradingChart TraditionalForm TraditionalFunctionNotation TraditionalNotation TraditionalOrder TransferFunctionCancel TransferFunctionExpand TransferFunctionFactor TransferFunctionModel TransferFunctionPoles TransferFunctionTransform TransferFunctionZeros TransformationFunction TransformationFunctions TransformationMatrix TransformedDistribution TransformedField Translate TranslationTransform TransparentColor Transpose TreeForm TreeGraph TreeGraphQ TreePlot TrendStyle TriangleWave TriangularDistribution Trig TrigExpand TrigFactor TrigFactorList Trigger TrigReduce TrigToExp TrimmedMean True TrueQ TruncatedDistribution TsallisQExponentialDistribution TsallisQGaussianDistribution TTest Tube TubeBezierCurveBox TubeBezierCurveBoxOptions TubeBox TubeBSplineCurveBox TubeBSplineCurveBoxOptions Tuesday TukeyLambdaDistribution TukeyWindow Tuples TuranGraph TuringMachine ' +
      'Transparent ' +
      'UnateQ Uncompress Undefined UnderBar Underflow Underlined Underoverscript UnderoverscriptBox UnderoverscriptBoxOptions Underscript UnderscriptBox UnderscriptBoxOptions UndirectedEdge UndirectedGraph UndirectedGraphQ UndocumentedTestFEParserPacket UndocumentedTestGetSelectionPacket Unequal Unevaluated UniformDistribution UniformGraphDistribution UniformSumDistribution Uninstall Union UnionPlus Unique UnitBox UnitConvert UnitDimensions Unitize UnitRootTest UnitSimplify UnitStep UnitTriangle UnitVector Unprotect UnsameQ UnsavedVariables Unset UnsetShared UntrackedVariables Up UpArrow UpArrowBar UpArrowDownArrow Update UpdateDynamicObjects UpdateDynamicObjectsSynchronous UpdateInterval UpDownArrow UpEquilibrium UpperCaseQ UpperLeftArrow UpperRightArrow UpperTriangularize Upsample UpSet UpSetDelayed UpTee UpTeeArrow UpValues URL URLFetch URLFetchAsynchronous URLSave URLSaveAsynchronous UseGraphicsRange Using UsingFrontEnd ' +
      'V2Get ValidationLength Value ValueBox ValueBoxOptions ValueForm ValueQ ValuesData Variables Variance VarianceEquivalenceTest VarianceEstimatorFunction VarianceGammaDistribution VarianceTest VectorAngle VectorColorFunction VectorColorFunctionScaling VectorDensityPlot VectorGlyphData VectorPlot VectorPlot3D VectorPoints VectorQ Vectors VectorScale VectorStyle Vee Verbatim Verbose VerboseConvertToPostScriptPacket VerifyConvergence VerifySolutions VerifyTestAssumptions Version VersionNumber VertexAdd VertexCapacity VertexColors VertexComponent VertexConnectivity VertexCoordinateRules VertexCoordinates VertexCorrelationSimilarity VertexCosineSimilarity VertexCount VertexCoverQ VertexDataCoordinates VertexDegree VertexDelete VertexDiceSimilarity VertexEccentricity VertexInComponent VertexInDegree VertexIndex VertexJaccardSimilarity VertexLabeling VertexLabels VertexLabelStyle VertexList VertexNormals VertexOutComponent VertexOutDegree VertexQ VertexRenderingFunction VertexReplace VertexShape VertexShapeFunction VertexSize VertexStyle VertexTextureCoordinates VertexWeight Vertical VerticalBar VerticalForm VerticalGauge VerticalSeparator VerticalSlider VerticalTilde ViewAngle ViewCenter ViewMatrix ViewPoint ViewPointSelectorSettings ViewPort ViewRange ViewVector ViewVertical VirtualGroupData Visible VisibleCell VoigtDistribution VonMisesDistribution ' +
      'WaitAll WaitAsynchronousTask WaitNext WaitUntil WakebyDistribution WalleniusHypergeometricDistribution WaringYuleDistribution WatershedComponents WatsonUSquareTest WattsStrogatzGraphDistribution WaveletBestBasis WaveletFilterCoefficients WaveletImagePlot WaveletListPlot WaveletMapIndexed WaveletMatrixPlot WaveletPhi WaveletPsi WaveletScale WaveletScalogram WaveletThreshold WeaklyConnectedComponents WeaklyConnectedGraphQ WeakStationarity WeatherData WeberE Wedge Wednesday WeibullDistribution WeierstrassHalfPeriods WeierstrassInvariants WeierstrassP WeierstrassPPrime WeierstrassSigma WeierstrassZeta WeightedAdjacencyGraph WeightedAdjacencyMatrix WeightedData WeightedGraphQ Weights WelchWindow WheelGraph WhenEvent Which While White Whitespace WhitespaceCharacter WhittakerM WhittakerW WienerFilter WienerProcess WignerD WignerSemicircleDistribution WilksW WilksWTest WindowClickSelect WindowElements WindowFloating WindowFrame WindowFrameElements WindowMargins WindowMovable WindowOpacity WindowSelected WindowSize WindowStatusArea WindowTitle WindowToolbars WindowWidth With WolframAlpha WolframAlphaDate WolframAlphaQuantity WolframAlphaResult Word WordBoundary WordCharacter WordData WordSearch WordSeparators WorkingPrecision Write WriteString Wronskian ' +
      'XMLElement XMLObject Xnor Xor ' +
      'Yellow YuleDissimilarity ' +
      'ZernikeR ZeroSymmetric ZeroTest ZeroWidthTimes Zeta ZetaZero ZipfDistribution ZTest ZTransform ' +
      '$Aborted $ActivationGroupID $ActivationKey $ActivationUserRegistered $AddOnsDirectory $AssertFunction $Assumptions $AsynchronousTask $BaseDirectory $BatchInput $BatchOutput $BoxForms $ByteOrdering $Canceled $CharacterEncoding $CharacterEncodings $CommandLine $CompilationTarget $ConditionHold $ConfiguredKernels $Context $ContextPath $ControlActiveSetting $CreationDate $CurrentLink $DateStringFormat $DefaultFont $DefaultFrontEnd $DefaultImagingDevice $DefaultPath $Display $DisplayFunction $DistributedContexts $DynamicEvaluation $Echo $Epilog $ExportFormats $Failed $FinancialDataSource $FormatType $FrontEnd $FrontEndSession $GeoLocation $HistoryLength $HomeDirectory $HTTPCookies $IgnoreEOF $ImagingDevices $ImportFormats $InitialDirectory $Input $InputFileName $InputStreamMethods $Inspector $InstallationDate $InstallationDirectory $InterfaceEnvironment $IterationLimit $KernelCount $KernelID $Language $LaunchDirectory $LibraryPath $LicenseExpirationDate $LicenseID $LicenseProcesses $LicenseServer $LicenseSubprocesses $LicenseType $Line $Linked $LinkSupported $LoadedFiles $MachineAddresses $MachineDomain $MachineDomains $MachineEpsilon $MachineID $MachineName $MachinePrecision $MachineType $MaxExtraPrecision $MaxLicenseProcesses $MaxLicenseSubprocesses $MaxMachineNumber $MaxNumber $MaxPiecewiseCases $MaxPrecision $MaxRootDegree $MessageGroups $MessageList $MessagePrePrint $Messages $MinMachineNumber $MinNumber $MinorReleaseNumber $MinPrecision $ModuleNumber $NetworkLicense $NewMessage $NewSymbol $Notebooks $NumberMarks $Off $OperatingSystem $Output $OutputForms $OutputSizeLimit $OutputStreamMethods $Packages $ParentLink $ParentProcessID $PasswordFile $PatchLevelID $Path $PathnameSeparator $PerformanceGoal $PipeSupported $Post $Pre $PreferencesDirectory $PrePrint $PreRead $PrintForms $PrintLiteral $ProcessID $ProcessorCount $ProcessorType $ProductInformation $ProgramName $RandomState $RecursionLimit $ReleaseNumber $RootDirectory $ScheduledTask $ScriptCommandLine $SessionID $SetParentLink $SharedFunctions $SharedVariables $SoundDisplay $SoundDisplayFunction $SuppressInputFormHeads $SynchronousEvaluation $SyntaxHandler $System $SystemCharacterEncoding $SystemID $SystemWordLength $TemporaryDirectory $TemporaryPrefix $TextStyle $TimedOut $TimeUnit $TimeZone $TopDirectory $TraceOff $TraceOn $TracePattern $TracePostAction $TracePreAction $Urgent $UserAddOnsDirectory $UserBaseDirectory $UserDocumentsDirectory $UserName $Version $VersionNumber',
    contains: [
      {
        className: 'comment',
        begin: /\(\*/, end: /\*\)/
      },
      hljs.APOS_STRING_MODE,
      hljs.QUOTE_STRING_MODE,
      hljs.C_NUMBER_MODE,
      {
        begin: /\{/, end: /\}/,
        illegal: /:/
      }
    ]
  };
};

/***/ }),
/* 220 */
/***/ (function(module, exports) {

module.exports = function(hljs) {
  var COMMON_CONTAINS = [
    hljs.C_NUMBER_MODE,
    {
      className: 'string',
      begin: '\'', end: '\'',
      contains: [hljs.BACKSLASH_ESCAPE, {begin: '\'\''}]
    }
  ];
  var TRANSPOSE = {
    relevance: 0,
    contains: [
      {
        begin: /'['\.]*/
      }
    ]
  };

  return {
    keywords: {
      keyword:
        'break case catch classdef continue else elseif end enumerated events for function ' +
        'global if methods otherwise parfor persistent properties return spmd switch try while',
      built_in:
        'sin sind sinh asin asind asinh cos cosd cosh acos acosd acosh tan tand tanh atan ' +
        'atand atan2 atanh sec secd sech asec asecd asech csc cscd csch acsc acscd acsch cot ' +
        'cotd coth acot acotd acoth hypot exp expm1 log log1p log10 log2 pow2 realpow reallog ' +
        'realsqrt sqrt nthroot nextpow2 abs angle complex conj imag real unwrap isreal ' +
        'cplxpair fix floor ceil round mod rem sign airy besselj bessely besselh besseli ' +
        'besselk beta betainc betaln ellipj ellipke erf erfc erfcx erfinv expint gamma ' +
        'gammainc gammaln psi legendre cross dot factor isprime primes gcd lcm rat rats perms ' +
        'nchoosek factorial cart2sph cart2pol pol2cart sph2cart hsv2rgb rgb2hsv zeros ones ' +
        'eye repmat rand randn linspace logspace freqspace meshgrid accumarray size length ' +
        'ndims numel disp isempty isequal isequalwithequalnans cat reshape diag blkdiag tril ' +
        'triu fliplr flipud flipdim rot90 find sub2ind ind2sub bsxfun ndgrid permute ipermute ' +
        'shiftdim circshift squeeze isscalar isvector ans eps realmax realmin pi i inf nan ' +
        'isnan isinf isfinite j why compan gallery hadamard hankel hilb invhilb magic pascal ' +
        'rosser toeplitz vander wilkinson'
    },
    illegal: '(//|"|#|/\\*|\\s+/\\w+)',
    contains: [
      {
        className: 'function',
        beginKeywords: 'function', end: '$',
        contains: [
          hljs.UNDERSCORE_TITLE_MODE,
          {
            className: 'params',
            variants: [
              {begin: '\\(', end: '\\)'},
              {begin: '\\[', end: '\\]'}
            ]
          }
        ]
      },
      {
        begin: /[a-zA-Z_][a-zA-Z_0-9]*'['\.]*/,
        returnBegin: true,
        relevance: 0,
        contains: [
          {begin: /[a-zA-Z_][a-zA-Z_0-9]*/, relevance: 0},
          TRANSPOSE.contains[0]
        ]
      },
      {
        begin: '\\[', end: '\\]',
        contains: COMMON_CONTAINS,
        relevance: 0,
        starts: TRANSPOSE
      },
      {
        begin: '\\{', end: /}/,
        contains: COMMON_CONTAINS,
        relevance: 0,
        starts: TRANSPOSE
      },
      {
        // transpose operators at the end of a function call
        begin: /\)/,
        relevance: 0,
        starts: TRANSPOSE
      },
      hljs.COMMENT('^\\s*\\%\\{\\s*$', '^\\s*\\%\\}\\s*$'),
      hljs.COMMENT('\\%', '$')
    ].concat(COMMON_CONTAINS)
  };
};

/***/ }),
/* 221 */
/***/ (function(module, exports) {

module.exports = function(hljs) {
  var KEYWORDS = 'if then else elseif for thru do while unless step in and or not';
  var LITERALS = 'true false unknown inf minf ind und %e %i %pi %phi %gamma';
  var BUILTIN_FUNCTIONS =
        ' abasep abs absint absolute_real_time acos acosh acot acoth acsc acsch activate'
      + ' addcol add_edge add_edges addmatrices addrow add_vertex add_vertices adjacency_matrix'
      + ' adjoin adjoint af agd airy airy_ai airy_bi airy_dai airy_dbi algsys alg_type'
      + ' alias allroots alphacharp alphanumericp amortization %and annuity_fv'
      + ' annuity_pv antid antidiff AntiDifference append appendfile apply apply1 apply2'
      + ' applyb1 apropos args arit_amortization arithmetic arithsum array arrayapply'
      + ' arrayinfo arraymake arraysetapply ascii asec asech asin asinh askinteger'
      + ' asksign assoc assoc_legendre_p assoc_legendre_q assume assume_external_byte_order'
      + ' asympa at atan atan2 atanh atensimp atom atvalue augcoefmatrix augmented_lagrangian_method'
      + ' av average_degree backtrace bars barsplot barsplot_description base64 base64_decode'
      + ' bashindices batch batchload bc2 bdvac belln benefit_cost bern bernpoly bernstein_approx'
      + ' bernstein_expand bernstein_poly bessel bessel_i bessel_j bessel_k bessel_simplify'
      + ' bessel_y beta beta_incomplete beta_incomplete_generalized beta_incomplete_regularized'
      + ' bezout bfallroots bffac bf_find_root bf_fmin_cobyla bfhzeta bfloat bfloatp'
      + ' bfpsi bfpsi0 bfzeta biconnected_components bimetric binomial bipartition'
      + ' block blockmatrixp bode_gain bode_phase bothcoef box boxplot boxplot_description'
      + ' break bug_report build_info|10 buildq build_sample burn cabs canform canten'
      + ' cardinality carg cartan cartesian_product catch cauchy_matrix cbffac cdf_bernoulli'
      + ' cdf_beta cdf_binomial cdf_cauchy cdf_chi2 cdf_continuous_uniform cdf_discrete_uniform'
      + ' cdf_exp cdf_f cdf_gamma cdf_general_finite_discrete cdf_geometric cdf_gumbel'
      + ' cdf_hypergeometric cdf_laplace cdf_logistic cdf_lognormal cdf_negative_binomial'
      + ' cdf_noncentral_chi2 cdf_noncentral_student_t cdf_normal cdf_pareto cdf_poisson'
      + ' cdf_rank_sum cdf_rayleigh cdf_signed_rank cdf_student_t cdf_weibull cdisplay'
      + ' ceiling central_moment cequal cequalignore cf cfdisrep cfexpand cgeodesic'
      + ' cgreaterp cgreaterpignore changename changevar chaosgame charat charfun charfun2'
      + ' charlist charp charpoly chdir chebyshev_t chebyshev_u checkdiv check_overlaps'
      + ' chinese cholesky christof chromatic_index chromatic_number cint circulant_graph'
      + ' clear_edge_weight clear_rules clear_vertex_label clebsch_gordan clebsch_graph'
      + ' clessp clesspignore close closefile cmetric coeff coefmatrix cograd col collapse'
      + ' collectterms columnop columnspace columnswap columnvector combination combine'
      + ' comp2pui compare compfile compile compile_file complement_graph complete_bipartite_graph'
      + ' complete_graph complex_number_p components compose_functions concan concat'
      + ' conjugate conmetderiv connected_components connect_vertices cons constant'
      + ' constantp constituent constvalue cont2part content continuous_freq contortion'
      + ' contour_plot contract contract_edge contragrad contrib_ode convert coord'
      + ' copy copy_file copy_graph copylist copymatrix cor cos cosh cot coth cov cov1'
      + ' covdiff covect covers crc24sum create_graph create_list csc csch csetup cspline'
      + ' ctaylor ct_coordsys ctransform ctranspose cube_graph cuboctahedron_graph'
      + ' cunlisp cv cycle_digraph cycle_graph cylindrical days360 dblint deactivate'
      + ' declare declare_constvalue declare_dimensions declare_fundamental_dimensions'
      + ' declare_fundamental_units declare_qty declare_translated declare_unit_conversion'
      + ' declare_units declare_weights decsym defcon define define_alt_display define_variable'
      + ' defint defmatch defrule defstruct deftaylor degree_sequence del delete deleten'
      + ' delta demo demoivre denom depends derivdegree derivlist describe desolve'
      + ' determinant dfloat dgauss_a dgauss_b dgeev dgemm dgeqrf dgesv dgesvd diag'
      + ' diagmatrix diag_matrix diagmatrixp diameter diff digitcharp dimacs_export'
      + ' dimacs_import dimension dimensionless dimensions dimensions_as_list direct'
      + ' directory discrete_freq disjoin disjointp disolate disp dispcon dispform'
      + ' dispfun dispJordan display disprule dispterms distrib divide divisors divsum'
      + ' dkummer_m dkummer_u dlange dodecahedron_graph dotproduct dotsimp dpart'
      + ' draw draw2d draw3d drawdf draw_file draw_graph dscalar echelon edge_coloring'
      + ' edge_connectivity edges eigens_by_jacobi eigenvalues eigenvectors eighth'
      + ' einstein eivals eivects elapsed_real_time elapsed_run_time ele2comp ele2polynome'
      + ' ele2pui elem elementp elevation_grid elim elim_allbut eliminate eliminate_using'
      + ' ellipse elliptic_e elliptic_ec elliptic_eu elliptic_f elliptic_kc elliptic_pi'
      + ' ematrix empty_graph emptyp endcons entermatrix entertensor entier equal equalp'
      + ' equiv_classes erf erfc erf_generalized erfi errcatch error errormsg errors'
      + ' euler ev eval_string evenp every evolution evolution2d evundiff example exp'
      + ' expand expandwrt expandwrt_factored expint expintegral_chi expintegral_ci'
      + ' expintegral_e expintegral_e1 expintegral_ei expintegral_e_simplify expintegral_li'
      + ' expintegral_shi expintegral_si explicit explose exponentialize express expt'
      + ' exsec extdiff extract_linear_equations extremal_subset ezgcd %f f90 facsum'
      + ' factcomb factor factorfacsum factorial factorout factorsum facts fast_central_elements'
      + ' fast_linsolve fasttimes featurep fernfale fft fib fibtophi fifth filename_merge'
      + ' file_search file_type fillarray findde find_root find_root_abs find_root_error'
      + ' find_root_rel first fix flatten flength float floatnump floor flower_snark'
      + ' flush flush1deriv flushd flushnd flush_output fmin_cobyla forget fortran'
      + ' fourcos fourexpand fourier fourier_elim fourint fourintcos fourintsin foursimp'
      + ' foursin fourth fposition frame_bracket freeof freshline fresnel_c fresnel_s'
      + ' from_adjacency_matrix frucht_graph full_listify fullmap fullmapl fullratsimp'
      + ' fullratsubst fullsetify funcsolve fundamental_dimensions fundamental_units'
      + ' fundef funmake funp fv g0 g1 gamma gamma_greek gamma_incomplete gamma_incomplete_generalized'
      + ' gamma_incomplete_regularized gauss gauss_a gauss_b gaussprob gcd gcdex gcdivide'
      + ' gcfac gcfactor gd generalized_lambert_w genfact gen_laguerre genmatrix gensym'
      + ' geo_amortization geo_annuity_fv geo_annuity_pv geomap geometric geometric_mean'
      + ' geosum get getcurrentdirectory get_edge_weight getenv get_lu_factors get_output_stream_string'
      + ' get_pixel get_plot_option get_tex_environment get_tex_environment_default'
      + ' get_vertex_label gfactor gfactorsum ggf girth global_variances gn gnuplot_close'
      + ' gnuplot_replot gnuplot_reset gnuplot_restart gnuplot_start go Gosper GosperSum'
      + ' gr2d gr3d gradef gramschmidt graph6_decode graph6_encode graph6_export graph6_import'
      + ' graph_center graph_charpoly graph_eigenvalues graph_flow graph_order graph_periphery'
      + ' graph_product graph_size graph_union great_rhombicosidodecahedron_graph great_rhombicuboctahedron_graph'
      + ' grid_graph grind grobner_basis grotzch_graph hamilton_cycle hamilton_path'
      + ' hankel hankel_1 hankel_2 harmonic harmonic_mean hav heawood_graph hermite'
      + ' hessian hgfred hilbertmap hilbert_matrix hipow histogram histogram_description'
      + ' hodge horner hypergeometric i0 i1 %ibes ic1 ic2 ic_convert ichr1 ichr2 icosahedron_graph'
      + ' icosidodecahedron_graph icurvature ident identfor identity idiff idim idummy'
      + ' ieqn %if ifactors iframes ifs igcdex igeodesic_coords ilt image imagpart'
      + ' imetric implicit implicit_derivative implicit_plot indexed_tensor indices'
      + ' induced_subgraph inferencep inference_result infix info_display init_atensor'
      + ' init_ctensor in_neighbors innerproduct inpart inprod inrt integerp integer_partitions'
      + ' integrate intersect intersection intervalp intopois intosum invariant1 invariant2'
      + ' inverse_fft inverse_jacobi_cd inverse_jacobi_cn inverse_jacobi_cs inverse_jacobi_dc'
      + ' inverse_jacobi_dn inverse_jacobi_ds inverse_jacobi_nc inverse_jacobi_nd inverse_jacobi_ns'
      + ' inverse_jacobi_sc inverse_jacobi_sd inverse_jacobi_sn invert invert_by_adjoint'
      + ' invert_by_lu inv_mod irr is is_biconnected is_bipartite is_connected is_digraph'
      + ' is_edge_in_graph is_graph is_graph_or_digraph ishow is_isomorphic isolate'
      + ' isomorphism is_planar isqrt isreal_p is_sconnected is_tree is_vertex_in_graph'
      + ' items_inference %j j0 j1 jacobi jacobian jacobi_cd jacobi_cn jacobi_cs jacobi_dc'
      + ' jacobi_dn jacobi_ds jacobi_nc jacobi_nd jacobi_ns jacobi_p jacobi_sc jacobi_sd'
      + ' jacobi_sn JF jn join jordan julia julia_set julia_sin %k kdels kdelta kill'
      + ' killcontext kostka kron_delta kronecker_product kummer_m kummer_u kurtosis'
      + ' kurtosis_bernoulli kurtosis_beta kurtosis_binomial kurtosis_chi2 kurtosis_continuous_uniform'
      + ' kurtosis_discrete_uniform kurtosis_exp kurtosis_f kurtosis_gamma kurtosis_general_finite_discrete'
      + ' kurtosis_geometric kurtosis_gumbel kurtosis_hypergeometric kurtosis_laplace'
      + ' kurtosis_logistic kurtosis_lognormal kurtosis_negative_binomial kurtosis_noncentral_chi2'
      + ' kurtosis_noncentral_student_t kurtosis_normal kurtosis_pareto kurtosis_poisson'
      + ' kurtosis_rayleigh kurtosis_student_t kurtosis_weibull label labels lagrange'
      + ' laguerre lambda lambert_w laplace laplacian_matrix last lbfgs lc2kdt lcharp'
      + ' lc_l lcm lc_u ldefint ldisp ldisplay legendre_p legendre_q leinstein length'
      + ' let letrules letsimp levi_civita lfreeof lgtreillis lhs li liediff limit'
      + ' Lindstedt linear linearinterpol linear_program linear_regression line_graph'
      + ' linsolve listarray list_correlations listify list_matrix_entries list_nc_monomials'
      + ' listoftens listofvars listp lmax lmin load loadfile local locate_matrix_entry'
      + ' log logcontract log_gamma lopow lorentz_gauge lowercasep lpart lratsubst'
      + ' lreduce lriemann lsquares_estimates lsquares_estimates_approximate lsquares_estimates_exact'
      + ' lsquares_mse lsquares_residual_mse lsquares_residuals lsum ltreillis lu_backsub'
      + ' lucas lu_factor %m macroexpand macroexpand1 make_array makebox makefact makegamma'
      + ' make_graph make_level_picture makelist makeOrders make_poly_continent make_poly_country'
      + ' make_polygon make_random_state make_rgb_picture makeset make_string_input_stream'
      + ' make_string_output_stream make_transform mandelbrot mandelbrot_set map mapatom'
      + ' maplist matchdeclare matchfix mat_cond mat_fullunblocker mat_function mathml_display'
      + ' mat_norm matrix matrixmap matrixp matrix_size mattrace mat_trace mat_unblocker'
      + ' max max_clique max_degree max_flow maximize_lp max_independent_set max_matching'
      + ' maybe md5sum mean mean_bernoulli mean_beta mean_binomial mean_chi2 mean_continuous_uniform'
      + ' mean_deviation mean_discrete_uniform mean_exp mean_f mean_gamma mean_general_finite_discrete'
      + ' mean_geometric mean_gumbel mean_hypergeometric mean_laplace mean_logistic'
      + ' mean_lognormal mean_negative_binomial mean_noncentral_chi2 mean_noncentral_student_t'
      + ' mean_normal mean_pareto mean_poisson mean_rayleigh mean_student_t mean_weibull'
      + ' median median_deviation member mesh metricexpandall mgf1_sha1 min min_degree'
      + ' min_edge_cut minfactorial minimalPoly minimize_lp minimum_spanning_tree minor'
      + ' minpack_lsquares minpack_solve min_vertex_cover min_vertex_cut mkdir mnewton'
      + ' mod mode_declare mode_identity ModeMatrix moebius mon2schur mono monomial_dimensions'
      + ' multibernstein_poly multi_display_for_texinfo multi_elem multinomial multinomial_coeff'
      + ' multi_orbit multiplot_mode multi_pui multsym multthru mycielski_graph nary'
      + ' natural_unit nc_degree ncexpt ncharpoly negative_picture neighbors new newcontext'
      + ' newdet new_graph newline newton new_variable next_prime nicedummies niceindices'
      + ' ninth nofix nonarray noncentral_moment nonmetricity nonnegintegerp nonscalarp'
      + ' nonzeroandfreeof notequal nounify nptetrad npv nroots nterms ntermst'
      + ' nthroot nullity nullspace num numbered_boundaries numberp number_to_octets'
      + ' num_distinct_partitions numerval numfactor num_partitions nusum nzeta nzetai'
      + ' nzetar octets_to_number octets_to_oid odd_girth oddp ode2 ode_check odelin'
      + ' oid_to_octets op opena opena_binary openr openr_binary openw openw_binary'
      + ' operatorp opsubst optimize %or orbit orbits ordergreat ordergreatp orderless'
      + ' orderlessp orthogonal_complement orthopoly_recur orthopoly_weight outermap'
      + ' out_neighbors outofpois pade parabolic_cylinder_d parametric parametric_surface'
      + ' parg parGosper parse_string parse_timedate part part2cont partfrac partition'
      + ' partition_set partpol path_digraph path_graph pathname_directory pathname_name'
      + ' pathname_type pdf_bernoulli pdf_beta pdf_binomial pdf_cauchy pdf_chi2 pdf_continuous_uniform'
      + ' pdf_discrete_uniform pdf_exp pdf_f pdf_gamma pdf_general_finite_discrete'
      + ' pdf_geometric pdf_gumbel pdf_hypergeometric pdf_laplace pdf_logistic pdf_lognormal'
      + ' pdf_negative_binomial pdf_noncentral_chi2 pdf_noncentral_student_t pdf_normal'
      + ' pdf_pareto pdf_poisson pdf_rank_sum pdf_rayleigh pdf_signed_rank pdf_student_t'
      + ' pdf_weibull pearson_skewness permanent permut permutation permutations petersen_graph'
      + ' petrov pickapart picture_equalp picturep piechart piechart_description planar_embedding'
      + ' playback plog plot2d plot3d plotdf ploteq plsquares pochhammer points poisdiff'
      + ' poisexpt poisint poismap poisplus poissimp poissubst poistimes poistrim polar'
      + ' polarform polartorect polar_to_xy poly_add poly_buchberger poly_buchberger_criterion'
      + ' poly_colon_ideal poly_content polydecomp poly_depends_p poly_elimination_ideal'
      + ' poly_exact_divide poly_expand poly_expt poly_gcd polygon poly_grobner poly_grobner_equal'
      + ' poly_grobner_member poly_grobner_subsetp poly_ideal_intersection poly_ideal_polysaturation'
      + ' poly_ideal_polysaturation1 poly_ideal_saturation poly_ideal_saturation1 poly_lcm'
      + ' poly_minimization polymod poly_multiply polynome2ele polynomialp poly_normal_form'
      + ' poly_normalize poly_normalize_list poly_polysaturation_extension poly_primitive_part'
      + ' poly_pseudo_divide poly_reduced_grobner poly_reduction poly_saturation_extension'
      + ' poly_s_polynomial poly_subtract polytocompanion pop postfix potential power_mod'
      + ' powerseries powerset prefix prev_prime primep primes principal_components'
      + ' print printf printfile print_graph printpois printprops prodrac product properties'
      + ' propvars psi psubst ptriangularize pui pui2comp pui2ele pui2polynome pui_direct'
      + ' puireduc push put pv qput qrange qty quad_control quad_qag quad_qagi quad_qagp'
      + ' quad_qags quad_qawc quad_qawf quad_qawo quad_qaws quadrilateral quantile'
      + ' quantile_bernoulli quantile_beta quantile_binomial quantile_cauchy quantile_chi2'
      + ' quantile_continuous_uniform quantile_discrete_uniform quantile_exp quantile_f'
      + ' quantile_gamma quantile_general_finite_discrete quantile_geometric quantile_gumbel'
      + ' quantile_hypergeometric quantile_laplace quantile_logistic quantile_lognormal'
      + ' quantile_negative_binomial quantile_noncentral_chi2 quantile_noncentral_student_t'
      + ' quantile_normal quantile_pareto quantile_poisson quantile_rayleigh quantile_student_t'
      + ' quantile_weibull quartile_skewness quit qunit quotient racah_v racah_w radcan'
      + ' radius random random_bernoulli random_beta random_binomial random_bipartite_graph'
      + ' random_cauchy random_chi2 random_continuous_uniform random_digraph random_discrete_uniform'
      + ' random_exp random_f random_gamma random_general_finite_discrete random_geometric'
      + ' random_graph random_graph1 random_gumbel random_hypergeometric random_laplace'
      + ' random_logistic random_lognormal random_negative_binomial random_network'
      + ' random_noncentral_chi2 random_noncentral_student_t random_normal random_pareto'
      + ' random_permutation random_poisson random_rayleigh random_regular_graph random_student_t'
      + ' random_tournament random_tree random_weibull range rank rat ratcoef ratdenom'
      + ' ratdiff ratdisrep ratexpand ratinterpol rational rationalize ratnumer ratnump'
      + ' ratp ratsimp ratsubst ratvars ratweight read read_array read_binary_array'
      + ' read_binary_list read_binary_matrix readbyte readchar read_hashed_array readline'
      + ' read_list read_matrix read_nested_list readonly read_xpm real_imagpart_to_conjugate'
      + ' realpart realroots rearray rectangle rectform rectform_log_if_constant recttopolar'
      + ' rediff reduce_consts reduce_order region region_boundaries region_boundaries_plus'
      + ' rem remainder remarray rembox remcomps remcon remcoord remfun remfunction'
      + ' remlet remove remove_constvalue remove_dimensions remove_edge remove_fundamental_dimensions'
      + ' remove_fundamental_units remove_plot_option remove_vertex rempart remrule'
      + ' remsym remvalue rename rename_file reset reset_displays residue resolvante'
      + ' resolvante_alternee1 resolvante_bipartite resolvante_diedrale resolvante_klein'
      + ' resolvante_klein3 resolvante_produit_sym resolvante_unitaire resolvante_vierer'
      + ' rest resultant return reveal reverse revert revert2 rgb2level rhs ricci riemann'
      + ' rinvariant risch rk rmdir rncombine romberg room rootscontract round row'
      + ' rowop rowswap rreduce run_testsuite %s save saving scalarp scaled_bessel_i'
      + ' scaled_bessel_i0 scaled_bessel_i1 scalefactors scanmap scatterplot scatterplot_description'
      + ' scene schur2comp sconcat scopy scsimp scurvature sdowncase sec sech second'
      + ' sequal sequalignore set_alt_display setdifference set_draw_defaults set_edge_weight'
      + ' setelmx setequalp setify setp set_partitions set_plot_option set_prompt set_random_state'
      + ' set_tex_environment set_tex_environment_default setunits setup_autoload set_up_dot_simplifications'
      + ' set_vertex_label seventh sexplode sf sha1sum sha256sum shortest_path shortest_weighted_path'
      + ' show showcomps showratvars sierpinskiale sierpinskimap sign signum similaritytransform'
      + ' simp_inequality simplify_sum simplode simpmetderiv simtran sin sinh sinsert'
      + ' sinvertcase sixth skewness skewness_bernoulli skewness_beta skewness_binomial'
      + ' skewness_chi2 skewness_continuous_uniform skewness_discrete_uniform skewness_exp'
      + ' skewness_f skewness_gamma skewness_general_finite_discrete skewness_geometric'
      + ' skewness_gumbel skewness_hypergeometric skewness_laplace skewness_logistic'
      + ' skewness_lognormal skewness_negative_binomial skewness_noncentral_chi2 skewness_noncentral_student_t'
      + ' skewness_normal skewness_pareto skewness_poisson skewness_rayleigh skewness_student_t'
      + ' skewness_weibull slength smake small_rhombicosidodecahedron_graph small_rhombicuboctahedron_graph'
      + ' smax smin smismatch snowmap snub_cube_graph snub_dodecahedron_graph solve'
      + ' solve_rec solve_rec_rat some somrac sort sparse6_decode sparse6_encode sparse6_export'
      + ' sparse6_import specint spherical spherical_bessel_j spherical_bessel_y spherical_hankel1'
      + ' spherical_hankel2 spherical_harmonic spherical_to_xyz splice split sposition'
      + ' sprint sqfr sqrt sqrtdenest sremove sremovefirst sreverse ssearch ssort sstatus'
      + ' ssubst ssubstfirst staircase standardize standardize_inverse_trig starplot'
      + ' starplot_description status std std1 std_bernoulli std_beta std_binomial'
      + ' std_chi2 std_continuous_uniform std_discrete_uniform std_exp std_f std_gamma'
      + ' std_general_finite_discrete std_geometric std_gumbel std_hypergeometric std_laplace'
      + ' std_logistic std_lognormal std_negative_binomial std_noncentral_chi2 std_noncentral_student_t'
      + ' std_normal std_pareto std_poisson std_rayleigh std_student_t std_weibull'
      + ' stemplot stirling stirling1 stirling2 strim striml strimr string stringout'
      + ' stringp strong_components struve_h struve_l sublis sublist sublist_indices'
      + ' submatrix subsample subset subsetp subst substinpart subst_parallel substpart'
      + ' substring subvar subvarp sum sumcontract summand_to_rec supcase supcontext'
      + ' symbolp symmdifference symmetricp system take_channel take_inference tan'
      + ' tanh taylor taylorinfo taylorp taylor_simplifier taytorat tcl_output tcontract'
      + ' tellrat tellsimp tellsimpafter tentex tenth test_mean test_means_difference'
      + ' test_normality test_proportion test_proportions_difference test_rank_sum'
      + ' test_sign test_signed_rank test_variance test_variance_ratio tex tex1 tex_display'
      + ' texput %th third throw time timedate timer timer_info tldefint tlimit todd_coxeter'
      + ' toeplitz tokens to_lisp topological_sort to_poly to_poly_solve totaldisrep'
      + ' totalfourier totient tpartpol trace tracematrix trace_options transform_sample'
      + ' translate translate_file transpose treefale tree_reduce treillis treinat'
      + ' triangle triangularize trigexpand trigrat trigreduce trigsimp trunc truncate'
      + ' truncated_cube_graph truncated_dodecahedron_graph truncated_icosahedron_graph'
      + ' truncated_tetrahedron_graph tr_warnings_get tube tutte_graph ueivects uforget'
      + ' ultraspherical underlying_graph undiff union unique uniteigenvectors unitp'
      + ' units unit_step unitvector unorder unsum untellrat untimer'
      + ' untrace uppercasep uricci uriemann uvect vandermonde_matrix var var1 var_bernoulli'
      + ' var_beta var_binomial var_chi2 var_continuous_uniform var_discrete_uniform'
      + ' var_exp var_f var_gamma var_general_finite_discrete var_geometric var_gumbel'
      + ' var_hypergeometric var_laplace var_logistic var_lognormal var_negative_binomial'
      + ' var_noncentral_chi2 var_noncentral_student_t var_normal var_pareto var_poisson'
      + ' var_rayleigh var_student_t var_weibull vector vectorpotential vectorsimp'
      + ' verbify vers vertex_coloring vertex_connectivity vertex_degree vertex_distance'
      + ' vertex_eccentricity vertex_in_degree vertex_out_degree vertices vertices_to_cycle'
      + ' vertices_to_path %w weyl wheel_graph wiener_index wigner_3j wigner_6j'
      + ' wigner_9j with_stdout write_binary_data writebyte write_data writefile wronskian'
      + ' xreduce xthru %y Zeilberger zeroequiv zerofor zeromatrix zeromatrixp zeta'
      + ' zgeev zheev zlange zn_add_table zn_carmichael_lambda zn_characteristic_factors'
      + ' zn_determinant zn_factor_generators zn_invert_by_lu zn_log zn_mult_table'
      + ' absboxchar activecontexts adapt_depth additive adim aform algebraic'
      + ' algepsilon algexact aliases allbut all_dotsimp_denoms allocation allsym alphabetic'
      + ' animation antisymmetric arrays askexp assume_pos assume_pos_pred assumescalar'
      + ' asymbol atomgrad atrig1 axes axis_3d axis_bottom axis_left axis_right axis_top'
      + ' azimuth background background_color backsubst berlefact bernstein_explicit'
      + ' besselexpand beta_args_sum_to_integer beta_expand bftorat bftrunc bindtest'
      + ' border boundaries_array box boxchar breakup %c capping cauchysum cbrange'
      + ' cbtics center cflength cframe_flag cnonmet_flag color color_bar color_bar_tics'
      + ' colorbox columns commutative complex cone context contexts contour contour_levels'
      + ' cosnpiflag ctaypov ctaypt ctayswitch ctayvar ct_coords ctorsion_flag ctrgsimp'
      + ' cube current_let_rule_package cylinder data_file_name debugmode decreasing'
      + ' default_let_rule_package delay dependencies derivabbrev derivsubst detout'
      + ' diagmetric diff dim dimensions dispflag display2d|10 display_format_internal'
      + ' distribute_over doallmxops domain domxexpt domxmxops domxnctimes dontfactor'
      + ' doscmxops doscmxplus dot0nscsimp dot0simp dot1simp dotassoc dotconstrules'
      + ' dotdistrib dotexptsimp dotident dotscrules draw_graph_program draw_realpart'
      + ' edge_color edge_coloring edge_partition edge_type edge_width %edispflag'
      + ' elevation %emode endphi endtheta engineering_format_floats enhanced3d %enumer'
      + ' epsilon_lp erfflag erf_representation errormsg error_size error_syms error_type'
      + ' %e_to_numlog eval even evenfun evflag evfun ev_point expandwrt_denom expintexpand'
      + ' expintrep expon expop exptdispflag exptisolate exptsubst facexpand facsum_combine'
      + ' factlim factorflag factorial_expand factors_only fb feature features'
      + ' file_name file_output_append file_search_demo file_search_lisp file_search_maxima|10'
      + ' file_search_tests file_search_usage file_type_lisp file_type_maxima|10 fill_color'
      + ' fill_density filled_func fixed_vertices flipflag float2bf font font_size'
      + ' fortindent fortspaces fpprec fpprintprec functions gamma_expand gammalim'
      + ' gdet genindex gensumnum GGFCFMAX GGFINFINITY globalsolve gnuplot_command'
      + ' gnuplot_curve_styles gnuplot_curve_titles gnuplot_default_term_command gnuplot_dumb_term_command'
      + ' gnuplot_file_args gnuplot_file_name gnuplot_out_file gnuplot_pdf_term_command'
      + ' gnuplot_pm3d gnuplot_png_term_command gnuplot_postamble gnuplot_preamble'
      + ' gnuplot_ps_term_command gnuplot_svg_term_command gnuplot_term gnuplot_view_args'
      + ' Gosper_in_Zeilberger gradefs grid grid2d grind halfangles head_angle head_both'
      + ' head_length head_type height hypergeometric_representation %iargs ibase'
      + ' icc1 icc2 icounter idummyx ieqnprint ifb ifc1 ifc2 ifg ifgi ifr iframe_bracket_form'
      + ' ifri igeowedge_flag ikt1 ikt2 imaginary inchar increasing infeval'
      + ' infinity inflag infolists inm inmc1 inmc2 intanalysis integer integervalued'
      + ' integrate_use_rootsof integration_constant integration_constant_counter interpolate_color'
      + ' intfaclim ip_grid ip_grid_in irrational isolate_wrt_times iterations itr'
      + ' julia_parameter %k1 %k2 keepfloat key key_pos kinvariant kt label label_alignment'
      + ' label_orientation labels lassociative lbfgs_ncorrections lbfgs_nfeval_max'
      + ' leftjust legend letrat let_rule_packages lfg lg lhospitallim limsubst linear'
      + ' linear_solver linechar linel|10 linenum line_type linewidth line_width linsolve_params'
      + ' linsolvewarn lispdisp listarith listconstvars listdummyvars lmxchar load_pathname'
      + ' loadprint logabs logarc logcb logconcoeffp logexpand lognegint logsimp logx'
      + ' logx_secondary logy logy_secondary logz lriem m1pbranch macroexpansion macros'
      + ' mainvar manual_demo maperror mapprint matrix_element_add matrix_element_mult'
      + ' matrix_element_transpose maxapplydepth maxapplyheight maxima_tempdir|10 maxima_userdir|10'
      + ' maxnegex MAX_ORD maxposex maxpsifracdenom maxpsifracnum maxpsinegint maxpsiposint'
      + ' maxtayorder mesh_lines_color method mod_big_prime mode_check_errorp'
      + ' mode_checkp mode_check_warnp mod_test mod_threshold modular_linear_solver'
      + ' modulus multiplicative multiplicities myoptions nary negdistrib negsumdispflag'
      + ' newline newtonepsilon newtonmaxiter nextlayerfactor niceindicespref nm nmc'
      + ' noeval nolabels nonegative_lp noninteger nonscalar noun noundisp nouns np'
      + ' npi nticks ntrig numer numer_pbranch obase odd oddfun opacity opproperties'
      + ' opsubst optimprefix optionset orientation origin orthopoly_returns_intervals'
      + ' outative outchar packagefile palette partswitch pdf_file pfeformat phiresolution'
      + ' %piargs piece pivot_count_sx pivot_max_sx plot_format plot_options plot_realpart'
      + ' png_file pochhammer_max_index points pointsize point_size points_joined point_type'
      + ' poislim poisson poly_coefficient_ring poly_elimination_order polyfactor poly_grobner_algorithm'
      + ' poly_grobner_debug poly_monomial_order poly_primary_elimination_order poly_return_term_list'
      + ' poly_secondary_elimination_order poly_top_reduction_only posfun position'
      + ' powerdisp pred prederror primep_number_of_tests product_use_gamma program'
      + ' programmode promote_float_to_bigfloat prompt proportional_axes props psexpand'
      + ' ps_file radexpand radius radsubstflag rassociative ratalgdenom ratchristof'
      + ' ratdenomdivide rateinstein ratepsilon ratfac rational ratmx ratprint ratriemann'
      + ' ratsimpexpons ratvarswitch ratweights ratweyl ratwtlvl real realonly redraw'
      + ' refcheck resolution restart resultant ric riem rmxchar %rnum_list rombergabs'
      + ' rombergit rombergmin rombergtol rootsconmode rootsepsilon run_viewer same_xy'
      + ' same_xyz savedef savefactors scalar scalarmatrixp scale scale_lp setcheck'
      + ' setcheckbreak setval show_edge_color show_edges show_edge_type show_edge_width'
      + ' show_id show_label showtime show_vertex_color show_vertex_size show_vertex_type'
      + ' show_vertices show_weight simp simplified_output simplify_products simpproduct'
      + ' simpsum sinnpiflag solvedecomposes solveexplicit solvefactors solvenullwarn'
      + ' solveradcan solvetrigwarn space sparse sphere spring_embedding_depth sqrtdispflag'
      + ' stardisp startphi starttheta stats_numer stringdisp structures style sublis_apply_lambda'
      + ' subnumsimp sumexpand sumsplitfact surface surface_hide svg_file symmetric'
      + ' tab taylordepth taylor_logexpand taylor_order_coefficients taylor_truncate_polynomials'
      + ' tensorkill terminal testsuite_files thetaresolution timer_devalue title tlimswitch'
      + ' tr track transcompile transform transform_xy translate_fast_arrays transparent'
      + ' transrun tr_array_as_ref tr_bound_function_applyp tr_file_tty_messagesp tr_float_can_branch_complex'
      + ' tr_function_call_default trigexpandplus trigexpandtimes triginverses trigsign'
      + ' trivial_solutions tr_numer tr_optimize_max_loop tr_semicompile tr_state_vars'
      + ' tr_warn_bad_function_calls tr_warn_fexpr tr_warn_meval tr_warn_mode'
      + ' tr_warn_undeclared tr_warn_undefined_variable tstep ttyoff tube_extremes'
      + ' ufg ug %unitexpand unit_vectors uric uriem use_fast_arrays user_preamble'
      + ' usersetunits values vect_cross verbose vertex_color vertex_coloring vertex_partition'
      + ' vertex_size vertex_type view warnings weyl width windowname windowtitle wired_surface'
      + ' wireframe xaxis xaxis_color xaxis_secondary xaxis_type xaxis_width xlabel'
      + ' xlabel_secondary xlength xrange xrange_secondary xtics xtics_axis xtics_rotate'
      + ' xtics_rotate_secondary xtics_secondary xtics_secondary_axis xu_grid x_voxel'
      + ' xy_file xyplane xy_scale yaxis yaxis_color yaxis_secondary yaxis_type yaxis_width'
      + ' ylabel ylabel_secondary ylength yrange yrange_secondary ytics ytics_axis'
      + ' ytics_rotate ytics_rotate_secondary ytics_secondary ytics_secondary_axis'
      + ' yv_grid y_voxel yx_ratio zaxis zaxis_color zaxis_type zaxis_width zeroa zerob'
      + ' zerobern zeta%pi zlabel zlabel_rotate zlength zmin zn_primroot_limit zn_primroot_pretest';
  var SYMBOLS = '_ __ %|0 %%|0';

  return {
    lexemes: '[A-Za-z_%][0-9A-Za-z_%]*',
    keywords: {
      keyword: KEYWORDS,
      literal: LITERALS,
      built_in: BUILTIN_FUNCTIONS,
      symbol: SYMBOLS,
    },
    contains: [
      {
        className: 'comment',
        begin: '/\\*',
        end: '\\*/',
        contains: ['self']
      },
      hljs.QUOTE_STRING_MODE,
      {
        className: 'number',
        relevance: 0,
        variants: [
          {
            // float number w/ exponent
            // hmm, I wonder if we ought to include other exponent markers?
            begin: '\\b(\\d+|\\d+\\.|\\.\\d+|\\d+\\.\\d+)[Ee][-+]?\\d+\\b',
          },
          {
            // bigfloat number
            begin: '\\b(\\d+|\\d+\\.|\\.\\d+|\\d+\\.\\d+)[Bb][-+]?\\d+\\b',
            relevance: 10
          },
          {
            // float number w/out exponent
            // Doesn't seem to recognize floats which start with '.'
            begin: '\\b(\\.\\d+|\\d+\\.\\d+)\\b',
          },
          {
            // integer in base up to 36
            // Doesn't seem to recognize integers which end with '.'
            begin: '\\b(\\d+|0[0-9A-Za-z]+)\\.?\\b',
          }
        ]
      }
    ],
    illegal: /@/
  }
};

/***/ }),
/* 222 */
/***/ (function(module, exports) {

module.exports = function(hljs) {
  return {
    keywords:
      'int float string vector matrix if else switch case default while do for in break ' +
      'continue global proc return about abs addAttr addAttributeEditorNodeHelp addDynamic ' +
      'addNewShelfTab addPP addPanelCategory addPrefixToName advanceToNextDrivenKey ' +
      'affectedNet affects aimConstraint air alias aliasAttr align alignCtx alignCurve ' +
      'alignSurface allViewFit ambientLight angle angleBetween animCone animCurveEditor ' +
      'animDisplay animView annotate appendStringArray applicationName applyAttrPreset ' +
      'applyTake arcLenDimContext arcLengthDimension arclen arrayMapper art3dPaintCtx ' +
      'artAttrCtx artAttrPaintVertexCtx artAttrSkinPaintCtx artAttrTool artBuildPaintMenu ' +
      'artFluidAttrCtx artPuttyCtx artSelectCtx artSetPaintCtx artUserPaintCtx assignCommand ' +
      'assignInputDevice assignViewportFactories attachCurve attachDeviceAttr attachSurface ' +
      'attrColorSliderGrp attrCompatibility attrControlGrp attrEnumOptionMenu ' +
      'attrEnumOptionMenuGrp attrFieldGrp attrFieldSliderGrp attrNavigationControlGrp ' +
      'attrPresetEditWin attributeExists attributeInfo attributeMenu attributeQuery ' +
      'autoKeyframe autoPlace bakeClip bakeFluidShading bakePartialHistory bakeResults ' +
      'bakeSimulation basename basenameEx batchRender bessel bevel bevelPlus binMembership ' +
      'bindSkin blend2 blendShape blendShapeEditor blendShapePanel blendTwoAttr blindDataType ' +
      'boneLattice boundary boxDollyCtx boxZoomCtx bufferCurve buildBookmarkMenu ' +
      'buildKeyframeMenu button buttonManip CBG cacheFile cacheFileCombine cacheFileMerge ' +
      'cacheFileTrack camera cameraView canCreateManip canvas capitalizeString catch ' +
      'catchQuiet ceil changeSubdivComponentDisplayLevel changeSubdivRegion channelBox ' +
      'character characterMap characterOutlineEditor characterize chdir checkBox checkBoxGrp ' +
      'checkDefaultRenderGlobals choice circle circularFillet clamp clear clearCache clip ' +
      'clipEditor clipEditorCurrentTimeCtx clipSchedule clipSchedulerOutliner clipTrimBefore ' +
      'closeCurve closeSurface cluster cmdFileOutput cmdScrollFieldExecuter ' +
      'cmdScrollFieldReporter cmdShell coarsenSubdivSelectionList collision color ' +
      'colorAtPoint colorEditor colorIndex colorIndexSliderGrp colorSliderButtonGrp ' +
      'colorSliderGrp columnLayout commandEcho commandLine commandPort compactHairSystem ' +
      'componentEditor compositingInterop computePolysetVolume condition cone confirmDialog ' +
      'connectAttr connectControl connectDynamic connectJoint connectionInfo constrain ' +
      'constrainValue constructionHistory container containsMultibyte contextInfo control ' +
      'convertFromOldLayers convertIffToPsd convertLightmap convertSolidTx convertTessellation ' +
      'convertUnit copyArray copyFlexor copyKey copySkinWeights cos cpButton cpCache ' +
      'cpClothSet cpCollision cpConstraint cpConvClothToMesh cpForces cpGetSolverAttr cpPanel ' +
      'cpProperty cpRigidCollisionFilter cpSeam cpSetEdit cpSetSolverAttr cpSolver ' +
      'cpSolverTypes cpTool cpUpdateClothUVs createDisplayLayer createDrawCtx createEditor ' +
      'createLayeredPsdFile createMotionField createNewShelf createNode createRenderLayer ' +
      'createSubdivRegion cross crossProduct ctxAbort ctxCompletion ctxEditMode ctxTraverse ' +
      'currentCtx currentTime currentTimeCtx currentUnit curve curveAddPtCtx ' +
      'curveCVCtx curveEPCtx curveEditorCtx curveIntersect curveMoveEPCtx curveOnSurface ' +
      'curveSketchCtx cutKey cycleCheck cylinder dagPose date defaultLightListCheckBox ' +
      'defaultNavigation defineDataServer defineVirtualDevice deformer deg_to_rad delete ' +
      'deleteAttr deleteShadingGroupsAndMaterials deleteShelfTab deleteUI deleteUnusedBrushes ' +
      'delrandstr detachCurve detachDeviceAttr detachSurface deviceEditor devicePanel dgInfo ' +
      'dgdirty dgeval dgtimer dimWhen directKeyCtx directionalLight dirmap dirname disable ' +
      'disconnectAttr disconnectJoint diskCache displacementToPoly displayAffected ' +
      'displayColor displayCull displayLevelOfDetail displayPref displayRGBColor ' +
      'displaySmoothness displayStats displayString displaySurface distanceDimContext ' +
      'distanceDimension doBlur dolly dollyCtx dopeSheetEditor dot dotProduct ' +
      'doubleProfileBirailSurface drag dragAttrContext draggerContext dropoffLocator ' +
      'duplicate duplicateCurve duplicateSurface dynCache dynControl dynExport dynExpression ' +
      'dynGlobals dynPaintEditor dynParticleCtx dynPref dynRelEdPanel dynRelEditor ' +
      'dynamicLoad editAttrLimits editDisplayLayerGlobals editDisplayLayerMembers ' +
      'editRenderLayerAdjustment editRenderLayerGlobals editRenderLayerMembers editor ' +
      'editorTemplate effector emit emitter enableDevice encodeString endString endsWith env ' +
      'equivalent equivalentTol erf error eval evalDeferred evalEcho event ' +
      'exactWorldBoundingBox exclusiveLightCheckBox exec executeForEachObject exists exp ' +
      'expression expressionEditorListen extendCurve extendSurface extrude fcheck fclose feof ' +
      'fflush fgetline fgetword file fileBrowserDialog fileDialog fileExtension fileInfo ' +
      'filetest filletCurve filter filterCurve filterExpand filterStudioImport ' +
      'findAllIntersections findAnimCurves findKeyframe findMenuItem findRelatedSkinCluster ' +
      'finder firstParentOf fitBspline flexor floatEq floatField floatFieldGrp floatScrollBar ' +
      'floatSlider floatSlider2 floatSliderButtonGrp floatSliderGrp floor flow fluidCacheInfo ' +
      'fluidEmitter fluidVoxelInfo flushUndo fmod fontDialog fopen formLayout format fprint ' +
      'frameLayout fread freeFormFillet frewind fromNativePath fwrite gamma gauss ' +
      'geometryConstraint getApplicationVersionAsFloat getAttr getClassification ' +
      'getDefaultBrush getFileList getFluidAttr getInputDeviceRange getMayaPanelTypes ' +
      'getModifiers getPanel getParticleAttr getPluginResource getenv getpid glRender ' +
      'glRenderEditor globalStitch gmatch goal gotoBindPose grabColor gradientControl ' +
      'gradientControlNoAttr graphDollyCtx graphSelectContext graphTrackCtx gravity grid ' +
      'gridLayout group groupObjectsByName HfAddAttractorToAS HfAssignAS HfBuildEqualMap ' +
      'HfBuildFurFiles HfBuildFurImages HfCancelAFR HfConnectASToHF HfCreateAttractor ' +
      'HfDeleteAS HfEditAS HfPerformCreateAS HfRemoveAttractorFromAS HfSelectAttached ' +
      'HfSelectAttractors HfUnAssignAS hardenPointCurve hardware hardwareRenderPanel ' +
      'headsUpDisplay headsUpMessage help helpLine hermite hide hilite hitTest hotBox hotkey ' +
      'hotkeyCheck hsv_to_rgb hudButton hudSlider hudSliderButton hwReflectionMap hwRender ' +
      'hwRenderLoad hyperGraph hyperPanel hyperShade hypot iconTextButton iconTextCheckBox ' +
      'iconTextRadioButton iconTextRadioCollection iconTextScrollList iconTextStaticLabel ' +
      'ikHandle ikHandleCtx ikHandleDisplayScale ikSolver ikSplineHandleCtx ikSystem ' +
      'ikSystemInfo ikfkDisplayMethod illustratorCurves image imfPlugins inheritTransform ' +
      'insertJoint insertJointCtx insertKeyCtx insertKnotCurve insertKnotSurface instance ' +
      'instanceable instancer intField intFieldGrp intScrollBar intSlider intSliderGrp ' +
      'interToUI internalVar intersect iprEngine isAnimCurve isConnected isDirty isParentOf ' +
      'isSameObject isTrue isValidObjectName isValidString isValidUiName isolateSelect ' +
      'itemFilter itemFilterAttr itemFilterRender itemFilterType joint jointCluster jointCtx ' +
      'jointDisplayScale jointLattice keyTangent keyframe keyframeOutliner ' +
      'keyframeRegionCurrentTimeCtx keyframeRegionDirectKeyCtx keyframeRegionDollyCtx ' +
      'keyframeRegionInsertKeyCtx keyframeRegionMoveKeyCtx keyframeRegionScaleKeyCtx ' +
      'keyframeRegionSelectKeyCtx keyframeRegionSetKeyCtx keyframeRegionTrackCtx ' +
      'keyframeStats lassoContext lattice latticeDeformKeyCtx launch launchImageEditor ' +
      'layerButton layeredShaderPort layeredTexturePort layout layoutDialog lightList ' +
      'lightListEditor lightListPanel lightlink lineIntersection linearPrecision linstep ' +
      'listAnimatable listAttr listCameras listConnections listDeviceAttachments listHistory ' +
      'listInputDeviceAxes listInputDeviceButtons listInputDevices listMenuAnnotation ' +
      'listNodeTypes listPanelCategories listRelatives listSets listTransforms ' +
      'listUnselected listerEditor loadFluid loadNewShelf loadPlugin ' +
      'loadPluginLanguageResources loadPrefObjects localizedPanelLabel lockNode loft log ' +
      'longNameOf lookThru ls lsThroughFilter lsType lsUI Mayatomr mag makeIdentity makeLive ' +
      'makePaintable makeRoll makeSingleSurface makeTubeOn makebot manipMoveContext ' +
      'manipMoveLimitsCtx manipOptions manipRotateContext manipRotateLimitsCtx ' +
      'manipScaleContext manipScaleLimitsCtx marker match max memory menu menuBarLayout ' +
      'menuEditor menuItem menuItemToShelf menuSet menuSetPref messageLine min minimizeApp ' +
      'mirrorJoint modelCurrentTimeCtx modelEditor modelPanel mouse movIn movOut move ' +
      'moveIKtoFK moveKeyCtx moveVertexAlongDirection multiProfileBirailSurface mute ' +
      'nParticle nameCommand nameField namespace namespaceInfo newPanelItems newton nodeCast ' +
      'nodeIconButton nodeOutliner nodePreset nodeType noise nonLinear normalConstraint ' +
      'normalize nurbsBoolean nurbsCopyUVSet nurbsCube nurbsEditUV nurbsPlane nurbsSelect ' +
      'nurbsSquare nurbsToPoly nurbsToPolygonsPref nurbsToSubdiv nurbsToSubdivPref ' +
      'nurbsUVSet nurbsViewDirectionVector objExists objectCenter objectLayer objectType ' +
      'objectTypeUI obsoleteProc oceanNurbsPreviewPlane offsetCurve offsetCurveOnSurface ' +
      'offsetSurface openGLExtension openMayaPref optionMenu optionMenuGrp optionVar orbit ' +
      'orbitCtx orientConstraint outlinerEditor outlinerPanel overrideModifier ' +
      'paintEffectsDisplay pairBlend palettePort paneLayout panel panelConfiguration ' +
      'panelHistory paramDimContext paramDimension paramLocator parent parentConstraint ' +
      'particle particleExists particleInstancer particleRenderInfo partition pasteKey ' +
      'pathAnimation pause pclose percent performanceOptions pfxstrokes pickWalk picture ' +
      'pixelMove planarSrf plane play playbackOptions playblast plugAttr plugNode pluginInfo ' +
      'pluginResourceUtil pointConstraint pointCurveConstraint pointLight pointMatrixMult ' +
      'pointOnCurve pointOnSurface pointPosition poleVectorConstraint polyAppend ' +
      'polyAppendFacetCtx polyAppendVertex polyAutoProjection polyAverageNormal ' +
      'polyAverageVertex polyBevel polyBlendColor polyBlindData polyBoolOp polyBridgeEdge ' +
      'polyCacheMonitor polyCheck polyChipOff polyClipboard polyCloseBorder polyCollapseEdge ' +
      'polyCollapseFacet polyColorBlindData polyColorDel polyColorPerVertex polyColorSet ' +
      'polyCompare polyCone polyCopyUV polyCrease polyCreaseCtx polyCreateFacet ' +
      'polyCreateFacetCtx polyCube polyCut polyCutCtx polyCylinder polyCylindricalProjection ' +
      'polyDelEdge polyDelFacet polyDelVertex polyDuplicateAndConnect polyDuplicateEdge ' +
      'polyEditUV polyEditUVShell polyEvaluate polyExtrudeEdge polyExtrudeFacet ' +
      'polyExtrudeVertex polyFlipEdge polyFlipUV polyForceUV polyGeoSampler polyHelix ' +
      'polyInfo polyInstallAction polyLayoutUV polyListComponentConversion polyMapCut ' +
      'polyMapDel polyMapSew polyMapSewMove polyMergeEdge polyMergeEdgeCtx polyMergeFacet ' +
      'polyMergeFacetCtx polyMergeUV polyMergeVertex polyMirrorFace polyMoveEdge ' +
      'polyMoveFacet polyMoveFacetUV polyMoveUV polyMoveVertex polyNormal polyNormalPerVertex ' +
      'polyNormalizeUV polyOptUvs polyOptions polyOutput polyPipe polyPlanarProjection ' +
      'polyPlane polyPlatonicSolid polyPoke polyPrimitive polyPrism polyProjection ' +
      'polyPyramid polyQuad polyQueryBlindData polyReduce polySelect polySelectConstraint ' +
      'polySelectConstraintMonitor polySelectCtx polySelectEditCtx polySeparate ' +
      'polySetToFaceNormal polySewEdge polyShortestPathCtx polySmooth polySoftEdge ' +
      'polySphere polySphericalProjection polySplit polySplitCtx polySplitEdge polySplitRing ' +
      'polySplitVertex polyStraightenUVBorder polySubdivideEdge polySubdivideFacet ' +
      'polyToSubdiv polyTorus polyTransfer polyTriangulate polyUVSet polyUnite polyWedgeFace ' +
      'popen popupMenu pose pow preloadRefEd print progressBar progressWindow projFileViewer ' +
      'projectCurve projectTangent projectionContext projectionManip promptDialog propModCtx ' +
      'propMove psdChannelOutliner psdEditTextureFile psdExport psdTextureFile putenv pwd ' +
      'python querySubdiv quit rad_to_deg radial radioButton radioButtonGrp radioCollection ' +
      'radioMenuItemCollection rampColorPort rand randomizeFollicles randstate rangeControl ' +
      'readTake rebuildCurve rebuildSurface recordAttr recordDevice redo reference ' +
      'referenceEdit referenceQuery refineSubdivSelectionList refresh refreshAE ' +
      'registerPluginResource rehash reloadImage removeJoint removeMultiInstance ' +
      'removePanelCategory rename renameAttr renameSelectionList renameUI render ' +
      'renderGlobalsNode renderInfo renderLayerButton renderLayerParent ' +
      'renderLayerPostProcess renderLayerUnparent renderManip renderPartition ' +
      'renderQualityNode renderSettings renderThumbnailUpdate renderWindowEditor ' +
      'renderWindowSelectContext renderer reorder reorderDeformers requires reroot ' +
      'resampleFluid resetAE resetPfxToPolyCamera resetTool resolutionNode retarget ' +
      'reverseCurve reverseSurface revolve rgb_to_hsv rigidBody rigidSolver roll rollCtx ' +
      'rootOf rot rotate rotationInterpolation roundConstantRadius rowColumnLayout rowLayout ' +
      'runTimeCommand runup sampleImage saveAllShelves saveAttrPreset saveFluid saveImage ' +
      'saveInitialState saveMenu savePrefObjects savePrefs saveShelf saveToolSettings scale ' +
      'scaleBrushBrightness scaleComponents scaleConstraint scaleKey scaleKeyCtx sceneEditor ' +
      'sceneUIReplacement scmh scriptCtx scriptEditorInfo scriptJob scriptNode scriptTable ' +
      'scriptToShelf scriptedPanel scriptedPanelType scrollField scrollLayout sculpt ' +
      'searchPathArray seed selLoadSettings select selectContext selectCurveCV selectKey ' +
      'selectKeyCtx selectKeyframeRegionCtx selectMode selectPref selectPriority selectType ' +
      'selectedNodes selectionConnection separator setAttr setAttrEnumResource ' +
      'setAttrMapping setAttrNiceNameResource setConstraintRestPosition ' +
      'setDefaultShadingGroup setDrivenKeyframe setDynamic setEditCtx setEditor setFluidAttr ' +
      'setFocus setInfinity setInputDeviceMapping setKeyCtx setKeyPath setKeyframe ' +
      'setKeyframeBlendshapeTargetWts setMenuMode setNodeNiceNameResource setNodeTypeFlag ' +
      'setParent setParticleAttr setPfxToPolyCamera setPluginResource setProject ' +
      'setStampDensity setStartupMessage setState setToolTo setUITemplate setXformManip sets ' +
      'shadingConnection shadingGeometryRelCtx shadingLightRelCtx shadingNetworkCompare ' +
      'shadingNode shapeCompare shelfButton shelfLayout shelfTabLayout shellField ' +
      'shortNameOf showHelp showHidden showManipCtx showSelectionInTitle ' +
      'showShadingGroupAttrEditor showWindow sign simplify sin singleProfileBirailSurface ' +
      'size sizeBytes skinCluster skinPercent smoothCurve smoothTangentSurface smoothstep ' +
      'snap2to2 snapKey snapMode snapTogetherCtx snapshot soft softMod softModCtx sort sound ' +
      'soundControl source spaceLocator sphere sphrand spotLight spotLightPreviewPort ' +
      'spreadSheetEditor spring sqrt squareSurface srtContext stackTrace startString ' +
      'startsWith stitchAndExplodeShell stitchSurface stitchSurfacePoints strcmp ' +
      'stringArrayCatenate stringArrayContains stringArrayCount stringArrayInsertAtIndex ' +
      'stringArrayIntersector stringArrayRemove stringArrayRemoveAtIndex ' +
      'stringArrayRemoveDuplicates stringArrayRemoveExact stringArrayToString ' +
      'stringToStringArray strip stripPrefixFromName stroke subdAutoProjection ' +
      'subdCleanTopology subdCollapse subdDuplicateAndConnect subdEditUV ' +
      'subdListComponentConversion subdMapCut subdMapSewMove subdMatchTopology subdMirror ' +
      'subdToBlind subdToPoly subdTransferUVsToCache subdiv subdivCrease ' +
      'subdivDisplaySmoothness substitute substituteAllString substituteGeometry substring ' +
      'surface surfaceSampler surfaceShaderList swatchDisplayPort switchTable symbolButton ' +
      'symbolCheckBox sysFile system tabLayout tan tangentConstraint texLatticeDeformContext ' +
      'texManipContext texMoveContext texMoveUVShellContext texRotateContext texScaleContext ' +
      'texSelectContext texSelectShortestPathCtx texSmudgeUVContext texWinToolCtx text ' +
      'textCurves textField textFieldButtonGrp textFieldGrp textManip textScrollList ' +
      'textToShelf textureDisplacePlane textureHairColor texturePlacementContext ' +
      'textureWindow threadCount threePointArcCtx timeControl timePort timerX toNativePath ' +
      'toggle toggleAxis toggleWindowVisibility tokenize tokenizeList tolerance tolower ' +
      'toolButton toolCollection toolDropped toolHasOptions toolPropertyWindow torus toupper ' +
      'trace track trackCtx transferAttributes transformCompare transformLimits translator ' +
      'trim trunc truncateFluidCache truncateHairCache tumble tumbleCtx turbulence ' +
      'twoPointArcCtx uiRes uiTemplate unassignInputDevice undo undoInfo ungroup uniform unit ' +
      'unloadPlugin untangleUV untitledFileName untrim upAxis updateAE userCtx uvLink ' +
      'uvSnapshot validateShelfName vectorize view2dToolCtx viewCamera viewClipPlane ' +
      'viewFit viewHeadOn viewLookAt viewManip viewPlace viewSet visor volumeAxis vortex ' +
      'waitCursor warning webBrowser webBrowserPrefs whatIs window windowPref wire ' +
      'wireContext workspace wrinkle wrinkleContext writeTake xbmLangPathList xform',
    illegal: '</',
    contains: [
      hljs.C_NUMBER_MODE,
      hljs.APOS_STRING_MODE,
      hljs.QUOTE_STRING_MODE,
      {
        className: 'string',
        begin: '`', end: '`',
        contains: [hljs.BACKSLASH_ESCAPE]
      },
      { // eats variables
        begin: '[\\$\\%\\@](\\^\\w\\b|#\\w+|[^\\s\\w{]|{\\w+}|\\w+)'
      },
      hljs.C_LINE_COMMENT_MODE,
      hljs.C_BLOCK_COMMENT_MODE
    ]
  };
};

/***/ }),
/* 223 */
/***/ (function(module, exports) {

module.exports = function(hljs) {
  var KEYWORDS = {
    keyword:
      'module use_module import_module include_module end_module initialise ' +
      'mutable initialize finalize finalise interface implementation pred ' +
      'mode func type inst solver any_pred any_func is semidet det nondet ' +
      'multi erroneous failure cc_nondet cc_multi typeclass instance where ' +
      'pragma promise external trace atomic or_else require_complete_switch ' +
      'require_det require_semidet require_multi require_nondet ' +
      'require_cc_multi require_cc_nondet require_erroneous require_failure',
    meta:
      // pragma
      'inline no_inline type_spec source_file fact_table obsolete memo ' +
      'loop_check minimal_model terminates does_not_terminate ' +
      'check_termination promise_equivalent_clauses ' +
      // preprocessor
      'foreign_proc foreign_decl foreign_code foreign_type ' +
      'foreign_import_module foreign_export_enum foreign_export ' +
      'foreign_enum may_call_mercury will_not_call_mercury thread_safe ' +
      'not_thread_safe maybe_thread_safe promise_pure promise_semipure ' +
      'tabled_for_io local untrailed trailed attach_to_io_state ' +
      'can_pass_as_mercury_type stable will_not_throw_exception ' +
      'may_modify_trail will_not_modify_trail may_duplicate ' +
      'may_not_duplicate affects_liveness does_not_affect_liveness ' +
      'doesnt_affect_liveness no_sharing unknown_sharing sharing',
    built_in:
      'some all not if then else true fail false try catch catch_any ' +
      'semidet_true semidet_false semidet_fail impure_true impure semipure'
  };

  var COMMENT = hljs.COMMENT('%', '$');

  var NUMCODE = {
    className: 'number',
    begin: "0'.\\|0[box][0-9a-fA-F]*"
  };

  var ATOM = hljs.inherit(hljs.APOS_STRING_MODE, {relevance: 0});
  var STRING = hljs.inherit(hljs.QUOTE_STRING_MODE, {relevance: 0});
  var STRING_FMT = {
    className: 'subst',
    begin: '\\\\[abfnrtv]\\|\\\\x[0-9a-fA-F]*\\\\\\|%[-+# *.0-9]*[dioxXucsfeEgGp]',
    relevance: 0
  };
  STRING.contains.push(STRING_FMT);

  var IMPLICATION = {
    className: 'built_in',
    variants: [
      {begin: '<=>'},
      {begin: '<=', relevance: 0},
      {begin: '=>', relevance: 0},
      {begin: '/\\\\'},
      {begin: '\\\\/'}
    ]
  };

  var HEAD_BODY_CONJUNCTION = {
    className: 'built_in',
    variants: [
      {begin: ':-\\|-->'},
      {begin: '=', relevance: 0}
    ]
  };

  return {
    aliases: ['m', 'moo'],
    keywords: KEYWORDS,
    contains: [
      IMPLICATION,
      HEAD_BODY_CONJUNCTION,
      COMMENT,
      hljs.C_BLOCK_COMMENT_MODE,
      NUMCODE,
      hljs.NUMBER_MODE,
      ATOM,
      STRING,
      {begin: /:-/} // relevance booster
    ]
  };
};

/***/ }),
/* 224 */
/***/ (function(module, exports) {

module.exports = function(hljs) {
    //local labels: %?[FB]?[AT]?\d{1,2}\w+
  return {
    case_insensitive: true,
    aliases: ['mips'],
    lexemes: '\\.?' + hljs.IDENT_RE,
    keywords: {
      meta:
        //GNU preprocs
        '.2byte .4byte .align .ascii .asciz .balign .byte .code .data .else .end .endif .endm .endr .equ .err .exitm .extern .global .hword .if .ifdef .ifndef .include .irp .long .macro .rept .req .section .set .skip .space .text .word .ltorg ',
      built_in:
        '$0 $1 $2 $3 $4 $5 $6 $7 $8 $9 $10 $11 $12 $13 $14 $15 ' + // integer registers
        '$16 $17 $18 $19 $20 $21 $22 $23 $24 $25 $26 $27 $28 $29 $30 $31 ' + // integer registers
        'zero at v0 v1 a0 a1 a2 a3 a4 a5 a6 a7 ' + // integer register aliases
        't0 t1 t2 t3 t4 t5 t6 t7 t8 t9 s0 s1 s2 s3 s4 s5 s6 s7 s8 ' + // integer register aliases
        'k0 k1 gp sp fp ra ' + // integer register aliases
        '$f0 $f1 $f2 $f2 $f4 $f5 $f6 $f7 $f8 $f9 $f10 $f11 $f12 $f13 $f14 $f15 ' + // floating-point registers
        '$f16 $f17 $f18 $f19 $f20 $f21 $f22 $f23 $f24 $f25 $f26 $f27 $f28 $f29 $f30 $f31 ' + // floating-point registers
        'Context Random EntryLo0 EntryLo1 Context PageMask Wired EntryHi ' + // Coprocessor 0 registers
        'HWREna BadVAddr Count Compare SR IntCtl SRSCtl SRSMap Cause EPC PRId ' + // Coprocessor 0 registers
        'EBase Config Config1 Config2 Config3 LLAddr Debug DEPC DESAVE CacheErr ' + // Coprocessor 0 registers
        'ECC ErrorEPC TagLo DataLo TagHi DataHi WatchLo WatchHi PerfCtl PerfCnt ' // Coprocessor 0 registers
    },
    contains: [
      {
        className: 'keyword',
        begin: '\\b('+     //mnemonics
            // 32-bit integer instructions
            'addi?u?|andi?|b(al)?|beql?|bgez(al)?l?|bgtzl?|blezl?|bltz(al)?l?|' +
            'bnel?|cl[oz]|divu?|ext|ins|j(al)?|jalr(\.hb)?|jr(\.hb)?|lbu?|lhu?|' +
            'll|lui|lw[lr]?|maddu?|mfhi|mflo|movn|movz|move|msubu?|mthi|mtlo|mul|' +
            'multu?|nop|nor|ori?|rotrv?|sb|sc|se[bh]|sh|sllv?|slti?u?|srav?|' +
            'srlv?|subu?|sw[lr]?|xori?|wsbh|' +
            // floating-point instructions
            'abs\.[sd]|add\.[sd]|alnv.ps|bc1[ft]l?|' +
            'c\.(s?f|un|u?eq|[ou]lt|[ou]le|ngle?|seq|l[et]|ng[et])\.[sd]|' +
            '(ceil|floor|round|trunc)\.[lw]\.[sd]|cfc1|cvt\.d\.[lsw]|' +
            'cvt\.l\.[dsw]|cvt\.ps\.s|cvt\.s\.[dlw]|cvt\.s\.p[lu]|cvt\.w\.[dls]|' +
            'div\.[ds]|ldx?c1|luxc1|lwx?c1|madd\.[sd]|mfc1|mov[fntz]?\.[ds]|' +
            'msub\.[sd]|mth?c1|mul\.[ds]|neg\.[ds]|nmadd\.[ds]|nmsub\.[ds]|' +
            'p[lu][lu]\.ps|recip\.fmt|r?sqrt\.[ds]|sdx?c1|sub\.[ds]|suxc1|' +
            'swx?c1|' +
            // system control instructions
            'break|cache|d?eret|[de]i|ehb|mfc0|mtc0|pause|prefx?|rdhwr|' +
            'rdpgpr|sdbbp|ssnop|synci?|syscall|teqi?|tgei?u?|tlb(p|r|w[ir])|' +
            'tlti?u?|tnei?|wait|wrpgpr'+
        ')',
        end: '\\s'
      },
      hljs.COMMENT('[;#]', '$'),
      hljs.C_BLOCK_COMMENT_MODE,
      hljs.QUOTE_STRING_MODE,
      {
        className: 'string',
        begin: '\'',
        end: '[^\\\\]\'',
        relevance: 0
      },
      {
        className: 'title',
        begin: '\\|', end: '\\|',
        illegal: '\\n',
        relevance: 0
      },
      {
        className: 'number',
        variants: [
            {begin: '0x[0-9a-f]+'}, //hex
            {begin: '\\b-?\\d+'}           //bare number
        ],
        relevance: 0
      },
      {
        className: 'symbol',
        variants: [
            {begin: '^\\s*[a-z_\\.\\$][a-z0-9_\\.\\$]+:'}, //GNU MIPS syntax
            {begin: '^\\s*[0-9]+:'}, // numbered local labels
            {begin: '[0-9]+[bf]' }  // number local label reference (backwards, forwards)
        ],
        relevance: 0
      }
    ],
    illegal: '\/'
  };
};

/***/ }),
/* 225 */
/***/ (function(module, exports) {

module.exports = function(hljs) {
  return {
    keywords:
      'environ vocabularies notations constructors definitions ' +
      'registrations theorems schemes requirements begin end definition ' +
      'registration cluster existence pred func defpred deffunc theorem ' +
      'proof let take assume then thus hence ex for st holds consider ' +
      'reconsider such that and in provided of as from be being by means ' +
      'equals implies iff redefine define now not or attr is mode ' +
      'suppose per cases set thesis contradiction scheme reserve struct ' +
      'correctness compatibility coherence symmetry assymetry ' +
      'reflexivity irreflexivity connectedness uniqueness commutativity ' +
      'idempotence involutiveness projectivity',
    contains: [
      hljs.COMMENT('::', '$')
    ]
  };
};

/***/ }),
/* 226 */
/***/ (function(module, exports) {

module.exports = function(hljs) {
  var PERL_KEYWORDS = 'getpwent getservent quotemeta msgrcv scalar kill dbmclose undef lc ' +
    'ma syswrite tr send umask sysopen shmwrite vec qx utime local oct semctl localtime ' +
    'readpipe do return format read sprintf dbmopen pop getpgrp not getpwnam rewinddir qq' +
    'fileno qw endprotoent wait sethostent bless s|0 opendir continue each sleep endgrent ' +
    'shutdown dump chomp connect getsockname die socketpair close flock exists index shmget' +
    'sub for endpwent redo lstat msgctl setpgrp abs exit select print ref gethostbyaddr ' +
    'unshift fcntl syscall goto getnetbyaddr join gmtime symlink semget splice x|0 ' +
    'getpeername recv log setsockopt cos last reverse gethostbyname getgrnam study formline ' +
    'endhostent times chop length gethostent getnetent pack getprotoent getservbyname rand ' +
    'mkdir pos chmod y|0 substr endnetent printf next open msgsnd readdir use unlink ' +
    'getsockopt getpriority rindex wantarray hex system getservbyport endservent int chr ' +
    'untie rmdir prototype tell listen fork shmread ucfirst setprotoent else sysseek link ' +
    'getgrgid shmctl waitpid unpack getnetbyname reset chdir grep split require caller ' +
    'lcfirst until warn while values shift telldir getpwuid my getprotobynumber delete and ' +
    'sort uc defined srand accept package seekdir getprotobyname semop our rename seek if q|0 ' +
    'chroot sysread setpwent no crypt getc chown sqrt write setnetent setpriority foreach ' +
    'tie sin msgget map stat getlogin unless elsif truncate exec keys glob tied closedir' +
    'ioctl socket readlink eval xor readline binmode setservent eof ord bind alarm pipe ' +
    'atan2 getgrent exp time push setgrent gt lt or ne m|0 break given say state when';
  var SUBST = {
    className: 'subst',
    begin: '[$@]\\{', end: '\\}',
    keywords: PERL_KEYWORDS
  };
  var METHOD = {
    begin: '->{', end: '}'
    // contains defined later
  };
  var VAR = {
    variants: [
      {begin: /\$\d/},
      {begin: /[\$%@](\^\w\b|#\w+(::\w+)*|{\w+}|\w+(::\w*)*)/},
      {begin: /[\$%@][^\s\w{]/, relevance: 0}
    ]
  };
  var STRING_CONTAINS = [hljs.BACKSLASH_ESCAPE, SUBST, VAR];
  var PERL_DEFAULT_CONTAINS = [
    VAR,
    hljs.HASH_COMMENT_MODE,
    hljs.COMMENT(
      '^\\=\\w',
      '\\=cut',
      {
        endsWithParent: true
      }
    ),
    METHOD,
    {
      className: 'string',
      contains: STRING_CONTAINS,
      variants: [
        {
          begin: 'q[qwxr]?\\s*\\(', end: '\\)',
          relevance: 5
        },
        {
          begin: 'q[qwxr]?\\s*\\[', end: '\\]',
          relevance: 5
        },
        {
          begin: 'q[qwxr]?\\s*\\{', end: '\\}',
          relevance: 5
        },
        {
          begin: 'q[qwxr]?\\s*\\|', end: '\\|',
          relevance: 5
        },
        {
          begin: 'q[qwxr]?\\s*\\<', end: '\\>',
          relevance: 5
        },
        {
          begin: 'qw\\s+q', end: 'q',
          relevance: 5
        },
        {
          begin: '\'', end: '\'',
          contains: [hljs.BACKSLASH_ESCAPE]
        },
        {
          begin: '"', end: '"'
        },
        {
          begin: '`', end: '`',
          contains: [hljs.BACKSLASH_ESCAPE]
        },
        {
          begin: '{\\w+}',
          contains: [],
          relevance: 0
        },
        {
          begin: '\-?\\w+\\s*\\=\\>',
          contains: [],
          relevance: 0
        }
      ]
    },
    {
      className: 'number',
      begin: '(\\b0[0-7_]+)|(\\b0x[0-9a-fA-F_]+)|(\\b[1-9][0-9_]*(\\.[0-9_]+)?)|[0_]\\b',
      relevance: 0
    },
    { // regexp container
      begin: '(\\/\\/|' + hljs.RE_STARTERS_RE + '|\\b(split|return|print|reverse|grep)\\b)\\s*',
      keywords: 'split return print reverse grep',
      relevance: 0,
      contains: [
        hljs.HASH_COMMENT_MODE,
        {
          className: 'regexp',
          begin: '(s|tr|y)/(\\\\.|[^/])*/(\\\\.|[^/])*/[a-z]*',
          relevance: 10
        },
        {
          className: 'regexp',
          begin: '(m|qr)?/', end: '/[a-z]*',
          contains: [hljs.BACKSLASH_ESCAPE],
          relevance: 0 // allows empty "//" which is a common comment delimiter in other languages
        }
      ]
    },
    {
      className: 'function',
      beginKeywords: 'sub', end: '(\\s*\\(.*?\\))?[;{]', excludeEnd: true,
      relevance: 5,
      contains: [hljs.TITLE_MODE]
    },
    {
      begin: '-\\w\\b',
      relevance: 0
    },
    {
      begin: "^__DATA__$",
      end: "^__END__$",
      subLanguage: 'mojolicious',
      contains: [
        {
            begin: "^@@.*",
            end: "$",
            className: "comment"
        }
      ]
    }
  ];
  SUBST.contains = PERL_DEFAULT_CONTAINS;
  METHOD.contains = PERL_DEFAULT_CONTAINS;

  return {
    aliases: ['pl', 'pm'],
    lexemes: /[\w\.]+/,
    keywords: PERL_KEYWORDS,
    contains: PERL_DEFAULT_CONTAINS
  };
};

/***/ }),
/* 227 */
/***/ (function(module, exports) {

module.exports = function(hljs) {
  return {
    subLanguage: 'xml',
    contains: [
      {
        className: 'meta',
        begin: '^__(END|DATA)__$'
      },
    // mojolicious line
      {
        begin: "^\\s*%{1,2}={0,2}", end: '$',
        subLanguage: 'perl'
      },
    // mojolicious block
      {
        begin: "<%{1,2}={0,2}",
        end: "={0,1}%>",
        subLanguage: 'perl',
        excludeBegin: true,
        excludeEnd: true
      }
    ]
  };
};

/***/ }),
/* 228 */
/***/ (function(module, exports) {

module.exports = function(hljs) {
  var NUMBER = {
    className: 'number', relevance: 0,
    variants: [
      {
        begin: '[$][a-fA-F0-9]+'
      },
      hljs.NUMBER_MODE
    ]
  };

  return {
    case_insensitive: true,
    keywords: {
      keyword: 'public private property continue exit extern new try catch ' +
        'eachin not abstract final select case default const local global field ' +
        'end if then else elseif endif while wend repeat until forever for ' +
        'to step next return module inline throw import',

      built_in: 'DebugLog DebugStop Error Print ACos ACosr ASin ASinr ATan ATan2 ATan2r ATanr Abs Abs Ceil ' +
        'Clamp Clamp Cos Cosr Exp Floor Log Max Max Min Min Pow Sgn Sgn Sin Sinr Sqrt Tan Tanr Seed PI HALFPI TWOPI',

      literal: 'true false null and or shl shr mod'
    },
    illegal: /\/\*/,
    contains: [
      hljs.COMMENT('#rem', '#end'),
      hljs.COMMENT(
        "'",
        '$',
        {
          relevance: 0
        }
      ),
      {
        className: 'function',
        beginKeywords: 'function method', end: '[(=:]|$',
        illegal: /\n/,
        contains: [
          hljs.UNDERSCORE_TITLE_MODE
        ]
      },
      {
        className: 'class',
        beginKeywords: 'class interface', end: '$',
        contains: [
          {
            beginKeywords: 'extends implements'
          },
          hljs.UNDERSCORE_TITLE_MODE
        ]
      },
      {
        className: 'built_in',
        begin: '\\b(self|super)\\b'
      },
      {
        className: 'meta',
        begin: '\\s*#', end: '$',
        keywords: {'meta-keyword': 'if else elseif endif end then'}
      },
      {
        className: 'meta',
        begin: '^\\s*strict\\b'
      },
      {
        beginKeywords: 'alias', end: '=',
        contains: [hljs.UNDERSCORE_TITLE_MODE]
      },
      hljs.QUOTE_STRING_MODE,
      NUMBER
    ]
  }
};

/***/ }),
/* 229 */
/***/ (function(module, exports) {

module.exports = function(hljs) {
  var KEYWORDS = {
    keyword:
      // Moonscript keywords
      'if then not for in while do return else elseif break continue switch and or ' +
      'unless when class extends super local import export from using',
    literal:
      'true false nil',
    built_in:
      '_G _VERSION assert collectgarbage dofile error getfenv getmetatable ipairs load ' +
      'loadfile loadstring module next pairs pcall print rawequal rawget rawset require ' +
      'select setfenv setmetatable tonumber tostring type unpack xpcall coroutine debug ' +
      'io math os package string table'
  };
  var JS_IDENT_RE = '[A-Za-z$_][0-9A-Za-z$_]*';
  var SUBST = {
    className: 'subst',
    begin: /#\{/, end: /}/,
    keywords: KEYWORDS
  };
  var EXPRESSIONS = [
    hljs.inherit(hljs.C_NUMBER_MODE,
      {starts: {end: '(\\s*/)?', relevance: 0}}), // a number tries to eat the following slash to prevent treating it as a regexp
    {
      className: 'string',
      variants: [
        {
          begin: /'/, end: /'/,
          contains: [hljs.BACKSLASH_ESCAPE]
        },
        {
          begin: /"/, end: /"/,
          contains: [hljs.BACKSLASH_ESCAPE, SUBST]
        }
      ]
    },
    {
      className: 'built_in',
      begin: '@__' + hljs.IDENT_RE
    },
    {
      begin: '@' + hljs.IDENT_RE // relevance booster on par with CoffeeScript
    },
    {
      begin: hljs.IDENT_RE + '\\\\' + hljs.IDENT_RE // inst\method
    }
  ];
  SUBST.contains = EXPRESSIONS;

  var TITLE = hljs.inherit(hljs.TITLE_MODE, {begin: JS_IDENT_RE});
  var PARAMS_RE = '(\\(.*\\))?\\s*\\B[-=]>';
  var PARAMS = {
    className: 'params',
    begin: '\\([^\\(]', returnBegin: true,
    /* We need another contained nameless mode to not have every nested
    pair of parens to be called "params" */
    contains: [{
      begin: /\(/, end: /\)/,
      keywords: KEYWORDS,
      contains: ['self'].concat(EXPRESSIONS)
    }]
  };

  return {
    aliases: ['moon'],
    keywords: KEYWORDS,
    illegal: /\/\*/,
    contains: EXPRESSIONS.concat([
      hljs.COMMENT('--', '$'),
      {
        className: 'function',  // function: -> =>
        begin: '^\\s*' + JS_IDENT_RE + '\\s*=\\s*' + PARAMS_RE, end: '[-=]>',
        returnBegin: true,
        contains: [TITLE, PARAMS]
      },
      {
        begin: /[\(,:=]\s*/, // anonymous function start
        relevance: 0,
        contains: [
          {
            className: 'function',
            begin: PARAMS_RE, end: '[-=]>',
            returnBegin: true,
            contains: [PARAMS]
          }
        ]
      },
      {
        className: 'class',
        beginKeywords: 'class',
        end: '$',
        illegal: /[:="\[\]]/,
        contains: [
          {
            beginKeywords: 'extends',
            endsWithParent: true,
            illegal: /[:="\[\]]/,
            contains: [TITLE]
          },
          TITLE
        ]
      },
      {
        className: 'name',    // table
        begin: JS_IDENT_RE + ':', end: ':',
        returnBegin: true, returnEnd: true,
        relevance: 0
      }
    ])
  };
};

/***/ }),
/* 230 */
/***/ (function(module, exports) {

module.exports = function(hljs) {
  return {
    case_insensitive: true,
    contains: [
      {
        beginKeywords:
          'build create index delete drop explain infer|10 insert merge prepare select update upsert|10',
        end: /;/, endsWithParent: true,
        keywords: {
          // Taken from http://developer.couchbase.com/documentation/server/current/n1ql/n1ql-language-reference/reservedwords.html
          keyword:
            'all alter analyze and any array as asc begin between binary boolean break bucket build by call ' +
            'case cast cluster collate collection commit connect continue correlate cover create database ' +
            'dataset datastore declare decrement delete derived desc describe distinct do drop each element ' +
            'else end every except exclude execute exists explain fetch first flatten for force from ' +
            'function grant group gsi having if ignore ilike in include increment index infer inline inner ' +
            'insert intersect into is join key keys keyspace known last left let letting like limit lsm map ' +
            'mapping matched materialized merge minus namespace nest not number object offset on ' +
            'option or order outer over parse partition password path pool prepare primary private privilege ' +
            'procedure public raw realm reduce rename return returning revoke right role rollback satisfies ' +
            'schema select self semi set show some start statistics string system then to transaction trigger ' +
            'truncate under union unique unknown unnest unset update upsert use user using validate value ' +
            'valued values via view when where while with within work xor',
          // Taken from http://developer.couchbase.com/documentation/server/4.5/n1ql/n1ql-language-reference/literals.html
          literal:
            'true false null missing|5',
          // Taken from http://developer.couchbase.com/documentation/server/4.5/n1ql/n1ql-language-reference/functions.html
          built_in:
            'array_agg array_append array_concat array_contains array_count array_distinct array_ifnull array_length ' +
            'array_max array_min array_position array_prepend array_put array_range array_remove array_repeat array_replace ' +
            'array_reverse array_sort array_sum avg count max min sum greatest least ifmissing ifmissingornull ifnull ' +
            'missingif nullif ifinf ifnan ifnanorinf naninf neginfif posinfif clock_millis clock_str date_add_millis ' +
            'date_add_str date_diff_millis date_diff_str date_part_millis date_part_str date_trunc_millis date_trunc_str ' +
            'duration_to_str millis str_to_millis millis_to_str millis_to_utc millis_to_zone_name now_millis now_str ' +
            'str_to_duration str_to_utc str_to_zone_name decode_json encode_json encoded_size poly_length base64 base64_encode ' +
            'base64_decode meta uuid abs acos asin atan atan2 ceil cos degrees e exp ln log floor pi power radians random ' +
            'round sign sin sqrt tan trunc object_length object_names object_pairs object_inner_pairs object_values ' +
            'object_inner_values object_add object_put object_remove object_unwrap regexp_contains regexp_like regexp_position ' +
            'regexp_replace contains initcap length lower ltrim position repeat replace rtrim split substr title trim upper ' +
            'isarray isatom isboolean isnumber isobject isstring type toarray toatom toboolean tonumber toobject tostring'
        },
        contains: [
          {
            className: 'string',
            begin: '\'', end: '\'',
            contains: [hljs.BACKSLASH_ESCAPE],
            relevance: 0
          },
          {
            className: 'string',
            begin: '"', end: '"',
            contains: [hljs.BACKSLASH_ESCAPE],
            relevance: 0
          },
          {
            className: 'symbol',
            begin: '`', end: '`',
            contains: [hljs.BACKSLASH_ESCAPE],
            relevance: 2
          },
          hljs.C_NUMBER_MODE,
          hljs.C_BLOCK_COMMENT_MODE
        ]
      },
      hljs.C_BLOCK_COMMENT_MODE
    ]
  };
};

/***/ }),
/* 231 */
/***/ (function(module, exports) {

module.exports = function(hljs) {
  var VAR = {
    className: 'variable',
    variants: [
      {begin: /\$\d+/},
      {begin: /\$\{/, end: /}/},
      {begin: '[\\$\\@]' + hljs.UNDERSCORE_IDENT_RE}
    ]
  };
  var DEFAULT = {
    endsWithParent: true,
    lexemes: '[a-z/_]+',
    keywords: {
      literal:
        'on off yes no true false none blocked debug info notice warn error crit ' +
        'select break last permanent redirect kqueue rtsig epoll poll /dev/poll'
    },
    relevance: 0,
    illegal: '=>',
    contains: [
      hljs.HASH_COMMENT_MODE,
      {
        className: 'string',
        contains: [hljs.BACKSLASH_ESCAPE, VAR],
        variants: [
          {begin: /"/, end: /"/},
          {begin: /'/, end: /'/}
        ]
      },
      // this swallows entire URLs to avoid detecting numbers within
      {
        begin: '([a-z]+):/', end: '\\s', endsWithParent: true, excludeEnd: true,
        contains: [VAR]
      },
      {
        className: 'regexp',
        contains: [hljs.BACKSLASH_ESCAPE, VAR],
        variants: [
          {begin: "\\s\\^", end: "\\s|{|;", returnEnd: true},
          // regexp locations (~, ~*)
          {begin: "~\\*?\\s+", end: "\\s|{|;", returnEnd: true},
          // *.example.com
          {begin: "\\*(\\.[a-z\\-]+)+"},
          // sub.example.*
          {begin: "([a-z\\-]+\\.)+\\*"}
        ]
      },
      // IP
      {
        className: 'number',
        begin: '\\b\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}(:\\d{1,5})?\\b'
      },
      // units
      {
        className: 'number',
        begin: '\\b\\d+[kKmMgGdshdwy]*\\b',
        relevance: 0
      },
      VAR
    ]
  };

  return {
    aliases: ['nginxconf'],
    contains: [
      hljs.HASH_COMMENT_MODE,
      {
        begin: hljs.UNDERSCORE_IDENT_RE + '\\s+{', returnBegin: true,
        end: '{',
        contains: [
          {
            className: 'section',
            begin: hljs.UNDERSCORE_IDENT_RE
          }
        ],
        relevance: 0
      },
      {
        begin: hljs.UNDERSCORE_IDENT_RE + '\\s', end: ';|{', returnBegin: true,
        contains: [
          {
            className: 'attribute',
            begin: hljs.UNDERSCORE_IDENT_RE,
            starts: DEFAULT
          }
        ],
        relevance: 0
      }
    ],
    illegal: '[^\\s\\}]'
  };
};

/***/ }),
/* 232 */
/***/ (function(module, exports) {

module.exports = function(hljs) {
  return {
    aliases: ['nim'],
    keywords: {
      keyword:
        'addr and as asm bind block break case cast const continue converter ' +
        'discard distinct div do elif else end enum except export finally ' +
        'for from generic if import in include interface is isnot iterator ' +
        'let macro method mixin mod nil not notin object of or out proc ptr ' +
        'raise ref return shl shr static template try tuple type using var ' +
        'when while with without xor yield',
      literal:
        'shared guarded stdin stdout stderr result true false',
      built_in:
        'int int8 int16 int32 int64 uint uint8 uint16 uint32 uint64 float ' +
        'float32 float64 bool char string cstring pointer expr stmt void ' +
        'auto any range array openarray varargs seq set clong culong cchar ' +
        'cschar cshort cint csize clonglong cfloat cdouble clongdouble ' +
        'cuchar cushort cuint culonglong cstringarray semistatic'
    },
    contains: [ {
        className: 'meta', // Actually pragma
        begin: /{\./,
        end: /\.}/,
        relevance: 10
      }, {
        className: 'string',
        begin: /[a-zA-Z]\w*"/,
        end: /"/,
        contains: [{begin: /""/}]
      }, {
        className: 'string',
        begin: /([a-zA-Z]\w*)?"""/,
        end: /"""/
      },
      hljs.QUOTE_STRING_MODE,
      {
        className: 'type',
        begin: /\b[A-Z]\w+\b/,
        relevance: 0
      }, {
        className: 'number',
        relevance: 0,
        variants: [
          {begin: /\b(0[xX][0-9a-fA-F][_0-9a-fA-F]*)('?[iIuU](8|16|32|64))?/},
          {begin: /\b(0o[0-7][_0-7]*)('?[iIuUfF](8|16|32|64))?/},
          {begin: /\b(0(b|B)[01][_01]*)('?[iIuUfF](8|16|32|64))?/},
          {begin: /\b(\d[_\d]*)('?[iIuUfF](8|16|32|64))?/}
        ]
      },
      hljs.HASH_COMMENT_MODE
    ]
  }
};

/***/ }),
/* 233 */
/***/ (function(module, exports) {

module.exports = function(hljs) {
  var NIX_KEYWORDS = {
    keyword:
      'rec with let in inherit assert if else then',
    literal:
      'true false or and null',
    built_in:
      'import abort baseNameOf dirOf isNull builtins map removeAttrs throw ' +
      'toString derivation'
  };
  var ANTIQUOTE = {
    className: 'subst',
    begin: /\$\{/,
    end: /}/,
    keywords: NIX_KEYWORDS
  };
  var ATTRS = {
    begin: /[a-zA-Z0-9-_]+(\s*=)/, returnBegin: true,
    relevance: 0,
    contains: [
      {
        className: 'attr',
        begin: /\S+/
      }
    ]
  };
  var STRING = {
    className: 'string',
    contains: [ANTIQUOTE],
    variants: [
      {begin: "''", end: "''"},
      {begin: '"', end: '"'}
    ]
  };
  var EXPRESSIONS = [
    hljs.NUMBER_MODE,
    hljs.HASH_COMMENT_MODE,
    hljs.C_BLOCK_COMMENT_MODE,
    STRING,
    ATTRS
  ];
  ANTIQUOTE.contains = EXPRESSIONS;
  return {
    aliases: ["nixos"],
    keywords: NIX_KEYWORDS,
    contains: EXPRESSIONS
  };
};

/***/ }),
/* 234 */
/***/ (function(module, exports) {

module.exports = function(hljs) {
  var CONSTANTS = {
    className: 'variable',
    begin: /\$(ADMINTOOLS|APPDATA|CDBURN_AREA|CMDLINE|COMMONFILES32|COMMONFILES64|COMMONFILES|COOKIES|DESKTOP|DOCUMENTS|EXEDIR|EXEFILE|EXEPATH|FAVORITES|FONTS|HISTORY|HWNDPARENT|INSTDIR|INTERNET_CACHE|LANGUAGE|LOCALAPPDATA|MUSIC|NETHOOD|OUTDIR|PICTURES|PLUGINSDIR|PRINTHOOD|PROFILE|PROGRAMFILES32|PROGRAMFILES64|PROGRAMFILES|QUICKLAUNCH|RECENT|RESOURCES_LOCALIZED|RESOURCES|SENDTO|SMPROGRAMS|SMSTARTUP|STARTMENU|SYSDIR|TEMP|TEMPLATES|VIDEOS|WINDIR)/
  };

  var DEFINES = {
    // ${defines}
    className: 'variable',
    begin: /\$+{[\w\.:-]+}/
  };

  var VARIABLES = {
    // $variables
    className: 'variable',
    begin: /\$+\w+/,
    illegal: /\(\){}/
  };

  var LANGUAGES = {
    // $(language_strings)
    className: 'variable',
    begin: /\$+\([\w\^\.:-]+\)/
  };

  var PARAMETERS = {
    // command parameters
    className: 'params',
    begin: '(ARCHIVE|FILE_ATTRIBUTE_ARCHIVE|FILE_ATTRIBUTE_NORMAL|FILE_ATTRIBUTE_OFFLINE|FILE_ATTRIBUTE_READONLY|FILE_ATTRIBUTE_SYSTEM|FILE_ATTRIBUTE_TEMPORARY|HKCR|HKCU|HKDD|HKEY_CLASSES_ROOT|HKEY_CURRENT_CONFIG|HKEY_CURRENT_USER|HKEY_DYN_DATA|HKEY_LOCAL_MACHINE|HKEY_PERFORMANCE_DATA|HKEY_USERS|HKLM|HKPD|HKU|IDABORT|IDCANCEL|IDIGNORE|IDNO|IDOK|IDRETRY|IDYES|MB_ABORTRETRYIGNORE|MB_DEFBUTTON1|MB_DEFBUTTON2|MB_DEFBUTTON3|MB_DEFBUTTON4|MB_ICONEXCLAMATION|MB_ICONINFORMATION|MB_ICONQUESTION|MB_ICONSTOP|MB_OK|MB_OKCANCEL|MB_RETRYCANCEL|MB_RIGHT|MB_RTLREADING|MB_SETFOREGROUND|MB_TOPMOST|MB_USERICON|MB_YESNO|NORMAL|OFFLINE|READONLY|SHCTX|SHELL_CONTEXT|SYSTEM|TEMPORARY)'
  };

  var COMPILER = {
    // !compiler_flags
    className: 'keyword',
    begin: /\!(addincludedir|addplugindir|appendfile|cd|define|delfile|echo|else|endif|error|execute|finalize|getdllversionsystem|ifdef|ifmacrodef|ifmacrondef|ifndef|if|include|insertmacro|macroend|macro|makensis|packhdr|searchparse|searchreplace|tempfile|undef|verbose|warning)/
  };

  var METACHARS = {
    // $\n, $\r, $\t, $$
    className: 'subst',
    begin: /\$(\\[nrt]|\$)/
  };

  var PLUGINS = {
    // plug::ins
    className: 'class',
    begin: /\w+\:\:\w+/
  };

    var STRING = {
      className: 'string',
      variants: [
        {
          begin: '"', end: '"'
        },
        {
          begin: '\'', end: '\''
        },
        {
          begin: '`', end: '`'
        }
      ],
      illegal: /\n/,
      contains: [
        METACHARS,
        CONSTANTS,
        DEFINES,
        VARIABLES,
        LANGUAGES
      ]
  };

  return {
    case_insensitive: false,
    keywords: {
      keyword:
      'Abort AddBrandingImage AddSize AllowRootDirInstall AllowSkipFiles AutoCloseWindow BGFont BGGradient BrandingText BringToFront Call CallInstDLL Caption ChangeUI CheckBitmap ClearErrors CompletedText ComponentText CopyFiles CRCCheck CreateDirectory CreateFont CreateShortCut Delete DeleteINISec DeleteINIStr DeleteRegKey DeleteRegValue DetailPrint DetailsButtonText DirText DirVar DirVerify EnableWindow EnumRegKey EnumRegValue Exch Exec ExecShell ExecWait ExpandEnvStrings File FileBufSize FileClose FileErrorText FileOpen FileRead FileReadByte FileReadUTF16LE FileReadWord FileSeek FileWrite FileWriteByte FileWriteUTF16LE FileWriteWord FindClose FindFirst FindNext FindWindow FlushINI FunctionEnd GetCurInstType GetCurrentAddress GetDlgItem GetDLLVersion GetDLLVersionLocal GetErrorLevel GetFileTime GetFileTimeLocal GetFullPathName GetFunctionAddress GetInstDirError GetLabelAddress GetTempFileName Goto HideWindow Icon IfAbort IfErrors IfFileExists IfRebootFlag IfSilent InitPluginsDir InstallButtonText InstallColors InstallDir InstallDirRegKey InstProgressFlags InstType InstTypeGetText InstTypeSetText IntCmp IntCmpU IntFmt IntOp IsWindow LangString LicenseBkColor LicenseData LicenseForceSelection LicenseLangString LicenseText LoadLanguageFile LockWindow LogSet LogText ManifestDPIAware ManifestSupportedOS MessageBox MiscButtonText Name Nop OutFile Page PageCallbacks PageExEnd Pop Push Quit ReadEnvStr ReadINIStr ReadRegDWORD ReadRegStr Reboot RegDLL Rename RequestExecutionLevel ReserveFile Return RMDir SearchPath SectionEnd SectionGetFlags SectionGetInstTypes SectionGetSize SectionGetText SectionGroupEnd SectionIn SectionSetFlags SectionSetInstTypes SectionSetSize SectionSetText SendMessage SetAutoClose SetBrandingImage SetCompress SetCompressor SetCompressorDictSize SetCtlColors SetCurInstType SetDatablockOptimize SetDateSave SetDetailsPrint SetDetailsView SetErrorLevel SetErrors SetFileAttributes SetFont SetOutPath SetOverwrite SetRebootFlag SetRegView SetShellVarContext SetSilent ShowInstDetails ShowUninstDetails ShowWindow SilentInstall SilentUnInstall Sleep SpaceTexts StrCmp StrCmpS StrCpy StrLen SubCaption Unicode UninstallButtonText UninstallCaption UninstallIcon UninstallSubCaption UninstallText UninstPage UnRegDLL Var VIAddVersionKey VIFileVersion VIProductVersion WindowIcon WriteINIStr WriteRegBin WriteRegDWORD WriteRegExpandStr WriteRegStr WriteUninstaller XPStyle',
      literal:
      'admin all auto both bottom bzip2 colored components current custom directory false force hide highest ifdiff ifnewer instfiles lastused leave left license listonly lzma nevershow none normal notset off on open print right show silent silentlog smooth textonly top true try un.components un.custom un.directory un.instfiles un.license uninstConfirm user Win10 Win7 Win8 WinVista zlib'
    },
    contains: [
      hljs.HASH_COMMENT_MODE,
      hljs.C_BLOCK_COMMENT_MODE,
      hljs.COMMENT(
        ';',
        '$',
        {
          relevance: 0
        }
      ),
      {
        className: 'function',
        beginKeywords: 'Function PageEx Section SectionGroup', end: '$'
      },
      STRING,
      COMPILER,
      DEFINES,
      VARIABLES,
      LANGUAGES,
      PARAMETERS,
      PLUGINS,
      hljs.NUMBER_MODE
    ]
  };
};

/***/ }),
/* 235 */
/***/ (function(module, exports) {

module.exports = function(hljs) {
  var API_CLASS = {
    className: 'built_in',
    begin: '\\b(AV|CA|CF|CG|CI|CL|CM|CN|CT|MK|MP|MTK|MTL|NS|SCN|SK|UI|WK|XC)\\w+',
  };
  var OBJC_KEYWORDS = {
    keyword:
      'int float while char export sizeof typedef const struct for union ' +
      'unsigned long volatile static bool mutable if do return goto void ' +
      'enum else break extern asm case short default double register explicit ' +
      'signed typename this switch continue wchar_t inline readonly assign ' +
      'readwrite self @synchronized id typeof ' +
      'nonatomic super unichar IBOutlet IBAction strong weak copy ' +
      'in out inout bycopy byref oneway __strong __weak __block __autoreleasing ' +
      '@private @protected @public @try @property @end @throw @catch @finally ' +
      '@autoreleasepool @synthesize @dynamic @selector @optional @required ' +
      '@encode @package @import @defs @compatibility_alias ' +
      '__bridge __bridge_transfer __bridge_retained __bridge_retain ' +
      '__covariant __contravariant __kindof ' +
      '_Nonnull _Nullable _Null_unspecified ' +
      '__FUNCTION__ __PRETTY_FUNCTION__ __attribute__ ' +
      'getter setter retain unsafe_unretained ' +
      'nonnull nullable null_unspecified null_resettable class instancetype ' +
      'NS_DESIGNATED_INITIALIZER NS_UNAVAILABLE NS_REQUIRES_SUPER ' +
      'NS_RETURNS_INNER_POINTER NS_INLINE NS_AVAILABLE NS_DEPRECATED ' +
      'NS_ENUM NS_OPTIONS NS_SWIFT_UNAVAILABLE ' +
      'NS_ASSUME_NONNULL_BEGIN NS_ASSUME_NONNULL_END ' +
      'NS_REFINED_FOR_SWIFT NS_SWIFT_NAME NS_SWIFT_NOTHROW ' +
      'NS_DURING NS_HANDLER NS_ENDHANDLER NS_VALUERETURN NS_VOIDRETURN',
    literal:
      'false true FALSE TRUE nil YES NO NULL',
    built_in:
      'BOOL dispatch_once_t dispatch_queue_t dispatch_sync dispatch_async dispatch_once'
  };
  var LEXEMES = /[a-zA-Z@][a-zA-Z0-9_]*/;
  var CLASS_KEYWORDS = '@interface @class @protocol @implementation';
  return {
    aliases: ['mm', 'objc', 'obj-c'],
    keywords: OBJC_KEYWORDS,
    lexemes: LEXEMES,
    illegal: '</',
    contains: [
      API_CLASS,
      hljs.C_LINE_COMMENT_MODE,
      hljs.C_BLOCK_COMMENT_MODE,
      hljs.C_NUMBER_MODE,
      hljs.QUOTE_STRING_MODE,
      {
        className: 'string',
        variants: [
          {
            begin: '@"', end: '"',
            illegal: '\\n',
            contains: [hljs.BACKSLASH_ESCAPE]
          },
          {
            begin: '\'', end: '[^\\\\]\'',
            illegal: '[^\\\\][^\']'
          }
        ]
      },
      {
        className: 'meta',
        begin: '#',
        end: '$',
        contains: [
          {
            className: 'meta-string',
            variants: [
              { begin: '\"', end: '\"' },
              { begin: '<', end: '>' }
            ]
          }
        ]
      },
      {
        className: 'class',
        begin: '(' + CLASS_KEYWORDS.split(' ').join('|') + ')\\b', end: '({|$)', excludeEnd: true,
        keywords: CLASS_KEYWORDS, lexemes: LEXEMES,
        contains: [
          hljs.UNDERSCORE_TITLE_MODE
        ]
      },
      {
        begin: '\\.'+hljs.UNDERSCORE_IDENT_RE,
        relevance: 0
      }
    ]
  };
};

/***/ }),
/* 236 */
/***/ (function(module, exports) {

module.exports = function(hljs) {
  /* missing support for heredoc-like string (OCaml 4.0.2+) */
  return {
    aliases: ['ml'],
    keywords: {
      keyword:
        'and as assert asr begin class constraint do done downto else end ' +
        'exception external for fun function functor if in include ' +
        'inherit! inherit initializer land lazy let lor lsl lsr lxor match method!|10 method ' +
        'mod module mutable new object of open! open or private rec sig struct ' +
        'then to try type val! val virtual when while with ' +
        /* camlp4 */
        'parser value',
      built_in:
        /* built-in types */
        'array bool bytes char exn|5 float int int32 int64 list lazy_t|5 nativeint|5 string unit ' +
        /* (some) types in Pervasives */
        'in_channel out_channel ref',
      literal:
        'true false'
    },
    illegal: /\/\/|>>/,
    lexemes: '[a-z_]\\w*!?',
    contains: [
      {
        className: 'literal',
        begin: '\\[(\\|\\|)?\\]|\\(\\)',
        relevance: 0
      },
      hljs.COMMENT(
        '\\(\\*',
        '\\*\\)',
        {
          contains: ['self']
        }
      ),
      { /* type variable */
        className: 'symbol',
        begin: '\'[A-Za-z_](?!\')[\\w\']*'
        /* the grammar is ambiguous on how 'a'b should be interpreted but not the compiler */
      },
      { /* polymorphic variant */
        className: 'type',
        begin: '`[A-Z][\\w\']*'
      },
      { /* module or constructor */
        className: 'type',
        begin: '\\b[A-Z][\\w\']*',
        relevance: 0
      },
      { /* don't color identifiers, but safely catch all identifiers with '*/
        begin: '[a-z_]\\w*\'[\\w\']*', relevance: 0
      },
      hljs.inherit(hljs.APOS_STRING_MODE, {className: 'string', relevance: 0}),
      hljs.inherit(hljs.QUOTE_STRING_MODE, {illegal: null}),
      {
        className: 'number',
        begin:
          '\\b(0[xX][a-fA-F0-9_]+[Lln]?|' +
          '0[oO][0-7_]+[Lln]?|' +
          '0[bB][01_]+[Lln]?|' +
          '[0-9][0-9_]*([Lln]|(\\.[0-9_]*)?([eE][-+]?[0-9_]+)?)?)',
        relevance: 0
      },
      {
        begin: /[-=]>/ // relevance booster
      }
    ]
  }
};

/***/ }),
/* 237 */
/***/ (function(module, exports) {

module.exports = function(hljs) {
	var SPECIAL_VARS = {
		className: 'keyword',
		begin: '\\$(f[asn]|t|vp[rtd]|children)'
	},
	LITERALS = {
		className: 'literal',
		begin: 'false|true|PI|undef'
	},
	NUMBERS = {
		className: 'number',
		begin: '\\b\\d+(\\.\\d+)?(e-?\\d+)?', //adds 1e5, 1e-10
		relevance: 0
	},
	STRING = hljs.inherit(hljs.QUOTE_STRING_MODE,{illegal: null}),
	PREPRO = {
		className: 'meta',
		keywords: {'meta-keyword': 'include use'},
		begin: 'include|use <',
		end: '>'
	},
	PARAMS = {
		className: 'params',
		begin: '\\(', end: '\\)',
		contains: ['self', NUMBERS, STRING, SPECIAL_VARS, LITERALS]
	},
	MODIFIERS = {
		begin: '[*!#%]',
		relevance: 0
	},
	FUNCTIONS = {
		className: 'function',
		beginKeywords: 'module function',
		end: '\\=|\\{',
		contains: [PARAMS, hljs.UNDERSCORE_TITLE_MODE]
	};

	return {
		aliases: ['scad'],
		keywords: {
			keyword: 'function module include use for intersection_for if else \\%',
			literal: 'false true PI undef',
			built_in: 'circle square polygon text sphere cube cylinder polyhedron translate rotate scale resize mirror multmatrix color offset hull minkowski union difference intersection abs sign sin cos tan acos asin atan atan2 floor round ceil ln log pow sqrt exp rands min max concat lookup str chr search version version_num norm cross parent_module echo import import_dxf dxf_linear_extrude linear_extrude rotate_extrude surface projection render children dxf_cross dxf_dim let assign'
		},
		contains: [
			hljs.C_LINE_COMMENT_MODE,
			hljs.C_BLOCK_COMMENT_MODE,
			NUMBERS,
			PREPRO,
			STRING,
			SPECIAL_VARS,
			MODIFIERS,
			FUNCTIONS
		]
	}
};

/***/ }),
/* 238 */
/***/ (function(module, exports) {

module.exports = function(hljs) {
  var OXYGENE_KEYWORDS = 'abstract add and array as asc aspect assembly async begin break block by case class concat const copy constructor continue '+
    'create default delegate desc distinct div do downto dynamic each else empty end ensure enum equals event except exit extension external false '+
    'final finalize finalizer finally flags for forward from function future global group has if implementation implements implies in index inherited '+
    'inline interface into invariants is iterator join locked locking loop matching method mod module namespace nested new nil not notify nullable of '+
    'old on operator or order out override parallel params partial pinned private procedure property protected public queryable raise read readonly '+
    'record reintroduce remove repeat require result reverse sealed select self sequence set shl shr skip static step soft take then to true try tuple '+
    'type union unit unsafe until uses using var virtual raises volatile where while with write xor yield await mapped deprecated stdcall cdecl pascal '+
    'register safecall overload library platform reference packed strict published autoreleasepool selector strong weak unretained';
  var CURLY_COMMENT =  hljs.COMMENT(
    '{',
    '}',
    {
      relevance: 0
    }
  );
  var PAREN_COMMENT = hljs.COMMENT(
    '\\(\\*',
    '\\*\\)',
    {
      relevance: 10
    }
  );
  var STRING = {
    className: 'string',
    begin: '\'', end: '\'',
    contains: [{begin: '\'\''}]
  };
  var CHAR_STRING = {
    className: 'string', begin: '(#\\d+)+'
  };
  var FUNCTION = {
    className: 'function',
    beginKeywords: 'function constructor destructor procedure method', end: '[:;]',
    keywords: 'function constructor|10 destructor|10 procedure|10 method|10',
    contains: [
      hljs.TITLE_MODE,
      {
        className: 'params',
        begin: '\\(', end: '\\)',
        keywords: OXYGENE_KEYWORDS,
        contains: [STRING, CHAR_STRING]
      },
      CURLY_COMMENT, PAREN_COMMENT
    ]
  };
  return {
    case_insensitive: true,
    lexemes: /\.?\w+/,
    keywords: OXYGENE_KEYWORDS,
    illegal: '("|\\$[G-Zg-z]|\\/\\*|</|=>|->)',
    contains: [
      CURLY_COMMENT, PAREN_COMMENT, hljs.C_LINE_COMMENT_MODE,
      STRING, CHAR_STRING,
      hljs.NUMBER_MODE,
      FUNCTION,
      {
        className: 'class',
        begin: '=\\bclass\\b', end: 'end;',
        keywords: OXYGENE_KEYWORDS,
        contains: [
          STRING, CHAR_STRING,
          CURLY_COMMENT, PAREN_COMMENT, hljs.C_LINE_COMMENT_MODE,
          FUNCTION
        ]
      }
    ]
  };
};

/***/ }),
/* 239 */
/***/ (function(module, exports) {

module.exports = function(hljs) {
  var CURLY_SUBCOMMENT = hljs.COMMENT(
    '{',
    '}',
    {
      contains: ['self']
    }
  );
  return {
    subLanguage: 'xml', relevance: 0,
    contains: [
      hljs.COMMENT('^#', '$'),
      hljs.COMMENT(
        '\\^rem{',
        '}',
        {
          relevance: 10,
          contains: [
            CURLY_SUBCOMMENT
          ]
        }
      ),
      {
        className: 'meta',
        begin: '^@(?:BASE|USE|CLASS|OPTIONS)$',
        relevance: 10
      },
      {
        className: 'title',
        begin: '@[\\w\\-]+\\[[\\w^;\\-]*\\](?:\\[[\\w^;\\-]*\\])?(?:.*)$'
      },
      {
        className: 'variable',
        begin: '\\$\\{?[\\w\\-\\.\\:]+\\}?'
      },
      {
        className: 'keyword',
        begin: '\\^[\\w\\-\\.\\:]+'
      },
      {
        className: 'number',
        begin: '\\^#[0-9a-fA-F]+'
      },
      hljs.C_NUMBER_MODE
    ]
  };
};

/***/ }),
/* 240 */
/***/ (function(module, exports) {

module.exports = function(hljs) {
  var MACRO = {
    className: 'variable',
    begin: /\$[\w\d#@][\w\d_]*/
  };
  var TABLE = {
    className: 'variable',
    begin: /<(?!\/)/, end: />/
  };
  var QUOTE_STRING = {
    className: 'string',
    begin: /"/, end: /"/
  };

  return {
    aliases: ['pf.conf'],
    lexemes: /[a-z0-9_<>-]+/,
    keywords: {
      built_in: /* block match pass are "actions" in pf.conf(5), the rest are
                 * lexically similar top-level commands.
                 */
        'block match pass load anchor|5 antispoof|10 set table',
      keyword:
        'in out log quick on rdomain inet inet6 proto from port os to route' +
        'allow-opts divert-packet divert-reply divert-to flags group icmp-type' +
        'icmp6-type label once probability recieved-on rtable prio queue' +
        'tos tag tagged user keep fragment for os drop' +
        'af-to|10 binat-to|10 nat-to|10 rdr-to|10 bitmask least-stats random round-robin' +
        'source-hash static-port' +
        'dup-to reply-to route-to' +
        'parent bandwidth default min max qlimit' +
        'block-policy debug fingerprints hostid limit loginterface optimization' +
        'reassemble ruleset-optimization basic none profile skip state-defaults' +
        'state-policy timeout' +
        'const counters persist' +
        'no modulate synproxy state|5 floating if-bound no-sync pflow|10 sloppy' +
        'source-track global rule max-src-nodes max-src-states max-src-conn' +
        'max-src-conn-rate overload flush' +
        'scrub|5 max-mss min-ttl no-df|10 random-id',
      literal:
        'all any no-route self urpf-failed egress|5 unknown'
    },
    contains: [
      hljs.HASH_COMMENT_MODE,
      hljs.NUMBER_MODE,
      hljs.QUOTE_STRING_MODE,
      MACRO,
      TABLE
    ]
  };
};

/***/ }),
/* 241 */
/***/ (function(module, exports) {

module.exports = function(hljs) {
  var VARIABLE = {
    begin: '\\$+[a-zA-Z_\x7f-\xff][a-zA-Z0-9_\x7f-\xff]*'
  };
  var PREPROCESSOR = {
    className: 'meta', begin: /<\?(php)?|\?>/
  };
  var STRING = {
    className: 'string',
    contains: [hljs.BACKSLASH_ESCAPE, PREPROCESSOR],
    variants: [
      {
        begin: 'b"', end: '"'
      },
      {
        begin: 'b\'', end: '\''
      },
      hljs.inherit(hljs.APOS_STRING_MODE, {illegal: null}),
      hljs.inherit(hljs.QUOTE_STRING_MODE, {illegal: null})
    ]
  };
  var NUMBER = {variants: [hljs.BINARY_NUMBER_MODE, hljs.C_NUMBER_MODE]};
  return {
    aliases: ['php3', 'php4', 'php5', 'php6'],
    case_insensitive: true,
    keywords:
      'and include_once list abstract global private echo interface as static endswitch ' +
      'array null if endwhile or const for endforeach self var while isset public ' +
      'protected exit foreach throw elseif include __FILE__ empty require_once do xor ' +
      'return parent clone use __CLASS__ __LINE__ else break print eval new ' +
      'catch __METHOD__ case exception default die require __FUNCTION__ ' +
      'enddeclare final try switch continue endfor endif declare unset true false ' +
      'trait goto instanceof insteadof __DIR__ __NAMESPACE__ ' +
      'yield finally',
    contains: [
      hljs.HASH_COMMENT_MODE,
      hljs.COMMENT('//', '$', {contains: [PREPROCESSOR]}),
      hljs.COMMENT(
        '/\\*',
        '\\*/',
        {
          contains: [
            {
              className: 'doctag',
              begin: '@[A-Za-z]+'
            }
          ]
        }
      ),
      hljs.COMMENT(
        '__halt_compiler.+?;',
        false,
        {
          endsWithParent: true,
          keywords: '__halt_compiler',
          lexemes: hljs.UNDERSCORE_IDENT_RE
        }
      ),
      {
        className: 'string',
        begin: /<<<['"]?\w+['"]?$/, end: /^\w+;?$/,
        contains: [
          hljs.BACKSLASH_ESCAPE,
          {
            className: 'subst',
            variants: [
              {begin: /\$\w+/},
              {begin: /\{\$/, end: /\}/}
            ]
          }
        ]
      },
      PREPROCESSOR,
      {
        className: 'keyword', begin: /\$this\b/
      },
      VARIABLE,
      {
        // swallow composed identifiers to avoid parsing them as keywords
        begin: /(::|->)+[a-zA-Z_\x7f-\xff][a-zA-Z0-9_\x7f-\xff]*/
      },
      {
        className: 'function',
        beginKeywords: 'function', end: /[;{]/, excludeEnd: true,
        illegal: '\\$|\\[|%',
        contains: [
          hljs.UNDERSCORE_TITLE_MODE,
          {
            className: 'params',
            begin: '\\(', end: '\\)',
            contains: [
              'self',
              VARIABLE,
              hljs.C_BLOCK_COMMENT_MODE,
              STRING,
              NUMBER
            ]
          }
        ]
      },
      {
        className: 'class',
        beginKeywords: 'class interface', end: '{', excludeEnd: true,
        illegal: /[:\(\$"]/,
        contains: [
          {beginKeywords: 'extends implements'},
          hljs.UNDERSCORE_TITLE_MODE
        ]
      },
      {
        beginKeywords: 'namespace', end: ';',
        illegal: /[\.']/,
        contains: [hljs.UNDERSCORE_TITLE_MODE]
      },
      {
        beginKeywords: 'use', end: ';',
        contains: [hljs.UNDERSCORE_TITLE_MODE]
      },
      {
        begin: '=>' // No markup, just a relevance booster
      },
      STRING,
      NUMBER
    ]
  };
};

/***/ }),
/* 242 */
/***/ (function(module, exports) {

module.exports = function(hljs) {
  var KEYWORDS = {
    keyword:
      'actor addressof and as be break class compile_error compile_intrinsic' +
      'consume continue delegate digestof do else elseif embed end error' +
      'for fun if ifdef in interface is isnt lambda let match new not object' +
      'or primitive recover repeat return struct then trait try type until ' +
      'use var where while with xor',
    meta:
      'iso val tag trn box ref',
    literal:
      'this false true'
  };

  var TRIPLE_QUOTE_STRING_MODE = {
    className: 'string',
    begin: '"""', end: '"""',
    relevance: 10
  };

  var QUOTE_STRING_MODE = {
    className: 'string',
    begin: '"', end: '"',
    contains: [hljs.BACKSLASH_ESCAPE]
  };

  var SINGLE_QUOTE_CHAR_MODE = {
    className: 'string',
    begin: '\'', end: '\'',
    contains: [hljs.BACKSLASH_ESCAPE],
    relevance: 0
  };

  var TYPE_NAME = {
    className: 'type',
    begin: '\\b_?[A-Z][\\w]*',
    relevance: 0
  };

  var PRIMED_NAME = {
    begin: hljs.IDENT_RE + '\'', relevance: 0
  };

  var CLASS = {
    className: 'class',
    beginKeywords: 'class actor', end: '$',
    contains: [
      hljs.TITLE_MODE,
      hljs.C_LINE_COMMENT_MODE
    ]
  }

  var FUNCTION = {
    className: 'function',
    beginKeywords: 'new fun', end: '=>',
    contains: [
      hljs.TITLE_MODE,
      {
        begin: /\(/, end: /\)/,
        contains: [
          TYPE_NAME,
          PRIMED_NAME,
          hljs.C_NUMBER_MODE,
          hljs.C_BLOCK_COMMENT_MODE
        ]
      },
      {
        begin: /:/, endsWithParent: true,
        contains: [TYPE_NAME]
      },
      hljs.C_LINE_COMMENT_MODE
    ]
  }

  return {
    keywords: KEYWORDS,
    contains: [
      CLASS,
      FUNCTION,
      TYPE_NAME,
      TRIPLE_QUOTE_STRING_MODE,
      QUOTE_STRING_MODE,
      SINGLE_QUOTE_CHAR_MODE,
      PRIMED_NAME,
      hljs.C_NUMBER_MODE,
      hljs.C_LINE_COMMENT_MODE,
      hljs.C_BLOCK_COMMENT_MODE
    ]
  };
};

/***/ }),
/* 243 */
/***/ (function(module, exports) {

module.exports = function(hljs) {
  var BACKTICK_ESCAPE = {
    begin: '`[\\s\\S]',
    relevance: 0
  };
  var VAR = {
    className: 'variable',
    variants: [
      {begin: /\$[\w\d][\w\d_:]*/}
    ]
  };
  var LITERAL = {
    className: 'literal',
    begin: /\$(null|true|false)\b/
  };
  var QUOTE_STRING = {
    className: 'string',
    variants: [
      { begin: /"/, end: /"/ },
      { begin: /@"/, end: /^"@/ }
    ],
    contains: [
      BACKTICK_ESCAPE,
      VAR,
      {
        className: 'variable',
        begin: /\$[A-z]/, end: /[^A-z]/
      }
    ]
  };
  var APOS_STRING = {
    className: 'string',
    variants: [
      { begin: /'/, end: /'/ },
      { begin: /@'/, end: /^'@/ }
    ]
  };

  var PS_HELPTAGS = {
    className: 'doctag',
    variants: [
      /* no paramater help tags */ 
      { begin: /\.(synopsis|description|example|inputs|outputs|notes|link|component|role|functionality)/ },
      /* one parameter help tags */
      { begin: /\.(parameter|forwardhelptargetname|forwardhelpcategory|remotehelprunspace|externalhelp)\s+\S+/ }
    ]
  };
  var PS_COMMENT = hljs.inherit(
    hljs.COMMENT(null, null),
    {
      variants: [
        /* single-line comment */
        { begin: /#/, end: /$/ },
        /* multi-line comment */
        { begin: /<#/, end: /#>/ }
      ],
      contains: [PS_HELPTAGS]
    }
  );

  return {
    aliases: ['ps'],
    lexemes: /-?[A-z\.\-]+/,
    case_insensitive: true,
    keywords: {
      keyword: 'if else foreach return function do while until elseif begin for trap data dynamicparam end break throw param continue finally in switch exit filter try process catch',
      built_in: 'Add-Computer Add-Content Add-History Add-JobTrigger Add-Member Add-PSSnapin Add-Type Checkpoint-Computer Clear-Content Clear-EventLog Clear-History Clear-Host Clear-Item Clear-ItemProperty Clear-Variable Compare-Object Complete-Transaction Connect-PSSession Connect-WSMan Convert-Path ConvertFrom-Csv ConvertFrom-Json ConvertFrom-SecureString ConvertFrom-StringData ConvertTo-Csv ConvertTo-Html ConvertTo-Json ConvertTo-SecureString ConvertTo-Xml Copy-Item Copy-ItemProperty Debug-Process Disable-ComputerRestore Disable-JobTrigger Disable-PSBreakpoint Disable-PSRemoting Disable-PSSessionConfiguration Disable-WSManCredSSP Disconnect-PSSession Disconnect-WSMan Disable-ScheduledJob Enable-ComputerRestore Enable-JobTrigger Enable-PSBreakpoint Enable-PSRemoting Enable-PSSessionConfiguration Enable-ScheduledJob Enable-WSManCredSSP Enter-PSSession Exit-PSSession Export-Alias Export-Clixml Export-Console Export-Counter Export-Csv Export-FormatData Export-ModuleMember Export-PSSession ForEach-Object Format-Custom Format-List Format-Table Format-Wide Get-Acl Get-Alias Get-AuthenticodeSignature Get-ChildItem Get-Command Get-ComputerRestorePoint Get-Content Get-ControlPanelItem Get-Counter Get-Credential Get-Culture Get-Date Get-Event Get-EventLog Get-EventSubscriber Get-ExecutionPolicy Get-FormatData Get-Host Get-HotFix Get-Help Get-History Get-IseSnippet Get-Item Get-ItemProperty Get-Job Get-JobTrigger Get-Location Get-Member Get-Module Get-PfxCertificate Get-Process Get-PSBreakpoint Get-PSCallStack Get-PSDrive Get-PSProvider Get-PSSession Get-PSSessionConfiguration Get-PSSnapin Get-Random Get-ScheduledJob Get-ScheduledJobOption Get-Service Get-TraceSource Get-Transaction Get-TypeData Get-UICulture Get-Unique Get-Variable Get-Verb Get-WinEvent Get-WmiObject Get-WSManCredSSP Get-WSManInstance Group-Object Import-Alias Import-Clixml Import-Counter Import-Csv Import-IseSnippet Import-LocalizedData Import-PSSession Import-Module Invoke-AsWorkflow Invoke-Command Invoke-Expression Invoke-History Invoke-Item Invoke-RestMethod Invoke-WebRequest Invoke-WmiMethod Invoke-WSManAction Join-Path Limit-EventLog Measure-Command Measure-Object Move-Item Move-ItemProperty New-Alias New-Event New-EventLog New-IseSnippet New-Item New-ItemProperty New-JobTrigger New-Object New-Module New-ModuleManifest New-PSDrive New-PSSession New-PSSessionConfigurationFile New-PSSessionOption New-PSTransportOption New-PSWorkflowExecutionOption New-PSWorkflowSession New-ScheduledJobOption New-Service New-TimeSpan New-Variable New-WebServiceProxy New-WinEvent New-WSManInstance New-WSManSessionOption Out-Default Out-File Out-GridView Out-Host Out-Null Out-Printer Out-String Pop-Location Push-Location Read-Host Receive-Job Register-EngineEvent Register-ObjectEvent Register-PSSessionConfiguration Register-ScheduledJob Register-WmiEvent Remove-Computer Remove-Event Remove-EventLog Remove-Item Remove-ItemProperty Remove-Job Remove-JobTrigger Remove-Module Remove-PSBreakpoint Remove-PSDrive Remove-PSSession Remove-PSSnapin Remove-TypeData Remove-Variable Remove-WmiObject Remove-WSManInstance Rename-Computer Rename-Item Rename-ItemProperty Reset-ComputerMachinePassword Resolve-Path Restart-Computer Restart-Service Restore-Computer Resume-Job Resume-Service Save-Help Select-Object Select-String Select-Xml Send-MailMessage Set-Acl Set-Alias Set-AuthenticodeSignature Set-Content Set-Date Set-ExecutionPolicy Set-Item Set-ItemProperty Set-JobTrigger Set-Location Set-PSBreakpoint Set-PSDebug Set-PSSessionConfiguration Set-ScheduledJob Set-ScheduledJobOption Set-Service Set-StrictMode Set-TraceSource Set-Variable Set-WmiInstance Set-WSManInstance Set-WSManQuickConfig Show-Command Show-ControlPanelItem Show-EventLog Sort-Object Split-Path Start-Job Start-Process Start-Service Start-Sleep Start-Transaction Start-Transcript Stop-Computer Stop-Job Stop-Process Stop-Service Stop-Transcript Suspend-Job Suspend-Service Tee-Object Test-ComputerSecureChannel Test-Connection Test-ModuleManifest Test-Path Test-PSSessionConfigurationFile Trace-Command Unblock-File Undo-Transaction Unregister-Event Unregister-PSSessionConfiguration Unregister-ScheduledJob Update-FormatData Update-Help Update-List Update-TypeData Use-Transaction Wait-Event Wait-Job Wait-Process Where-Object Write-Debug Write-Error Write-EventLog Write-Host Write-Output Write-Progress Write-Verbose Write-Warning Add-MDTPersistentDrive Disable-MDTMonitorService Enable-MDTMonitorService Get-MDTDeploymentShareStatistics Get-MDTMonitorData Get-MDTOperatingSystemCatalog Get-MDTPersistentDrive Import-MDTApplication Import-MDTDriver Import-MDTOperatingSystem Import-MDTPackage Import-MDTTaskSequence New-MDTDatabase Remove-MDTMonitorData Remove-MDTPersistentDrive Restore-MDTPersistentDrive Set-MDTMonitorData Test-MDTDeploymentShare Test-MDTMonitorData Update-MDTDatabaseSchema Update-MDTDeploymentShare Update-MDTLinkedDS Update-MDTMedia Update-MDTMedia Add-VamtProductKey Export-VamtData Find-VamtManagedMachine Get-VamtConfirmationId Get-VamtProduct Get-VamtProductKey Import-VamtData Initialize-VamtData Install-VamtConfirmationId Install-VamtProductActivation Install-VamtProductKey Update-VamtProduct',
      nomarkup: '-ne -eq -lt -gt -ge -le -not -like -notlike -match -notmatch -contains -notcontains -in -notin -replace'
    },
    contains: [
      BACKTICK_ESCAPE,
      hljs.NUMBER_MODE,
      QUOTE_STRING,
      APOS_STRING,
      LITERAL,
      VAR,
      PS_COMMENT
    ]
  };
};

/***/ }),
/* 244 */
/***/ (function(module, exports) {

module.exports = function(hljs) {
  return {
    keywords: {
      keyword: 'BufferedReader PVector PFont PImage PGraphics HashMap boolean byte char color ' +
        'double float int long String Array FloatDict FloatList IntDict IntList JSONArray JSONObject ' +
        'Object StringDict StringList Table TableRow XML ' +
        // Java keywords
        'false synchronized int abstract float private char boolean static null if const ' +
        'for true while long throw strictfp finally protected import native final return void ' +
        'enum else break transient new catch instanceof byte super volatile case assert short ' +
        'package default double public try this switch continue throws protected public private',
      literal: 'P2D P3D HALF_PI PI QUARTER_PI TAU TWO_PI',
      title: 'setup draw',
      built_in: 'displayHeight displayWidth mouseY mouseX mousePressed pmouseX pmouseY key ' +
        'keyCode pixels focused frameCount frameRate height width ' +
        'size createGraphics beginDraw createShape loadShape PShape arc ellipse line point ' +
        'quad rect triangle bezier bezierDetail bezierPoint bezierTangent curve curveDetail curvePoint ' +
        'curveTangent curveTightness shape shapeMode beginContour beginShape bezierVertex curveVertex ' +
        'endContour endShape quadraticVertex vertex ellipseMode noSmooth rectMode smooth strokeCap ' +
        'strokeJoin strokeWeight mouseClicked mouseDragged mouseMoved mousePressed mouseReleased ' +
        'mouseWheel keyPressed keyPressedkeyReleased keyTyped print println save saveFrame day hour ' +
        'millis minute month second year background clear colorMode fill noFill noStroke stroke alpha ' +
        'blue brightness color green hue lerpColor red saturation modelX modelY modelZ screenX screenY ' +
        'screenZ ambient emissive shininess specular add createImage beginCamera camera endCamera frustum ' +
        'ortho perspective printCamera printProjection cursor frameRate noCursor exit loop noLoop popStyle ' +
        'pushStyle redraw binary boolean byte char float hex int str unbinary unhex join match matchAll nf ' +
        'nfc nfp nfs split splitTokens trim append arrayCopy concat expand reverse shorten sort splice subset ' +
        'box sphere sphereDetail createInput createReader loadBytes loadJSONArray loadJSONObject loadStrings ' +
        'loadTable loadXML open parseXML saveTable selectFolder selectInput beginRaw beginRecord createOutput ' +
        'createWriter endRaw endRecord PrintWritersaveBytes saveJSONArray saveJSONObject saveStream saveStrings ' +
        'saveXML selectOutput popMatrix printMatrix pushMatrix resetMatrix rotate rotateX rotateY rotateZ scale ' +
        'shearX shearY translate ambientLight directionalLight lightFalloff lights lightSpecular noLights normal ' +
        'pointLight spotLight image imageMode loadImage noTint requestImage tint texture textureMode textureWrap ' +
        'blend copy filter get loadPixels set updatePixels blendMode loadShader PShaderresetShader shader createFont ' +
        'loadFont text textFont textAlign textLeading textMode textSize textWidth textAscent textDescent abs ceil ' +
        'constrain dist exp floor lerp log mag map max min norm pow round sq sqrt acos asin atan atan2 cos degrees ' +
        'radians sin tan noise noiseDetail noiseSeed random randomGaussian randomSeed'
    },
    contains: [
      hljs.C_LINE_COMMENT_MODE,
      hljs.C_BLOCK_COMMENT_MODE,
      hljs.APOS_STRING_MODE,
      hljs.QUOTE_STRING_MODE,
      hljs.C_NUMBER_MODE
    ]
  };
};

/***/ }),
/* 245 */
/***/ (function(module, exports) {

module.exports = function(hljs) {
  return {
    contains: [
      hljs.C_NUMBER_MODE,
      {
        begin: '[a-zA-Z_][\\da-zA-Z_]+\\.[\\da-zA-Z_]{1,3}', end: ':',
        excludeEnd: true
      },
      {
        begin: '(ncalls|tottime|cumtime)', end: '$',
        keywords: 'ncalls tottime|10 cumtime|10 filename',
        relevance: 10
      },
      {
        begin: 'function calls', end: '$',
        contains: [hljs.C_NUMBER_MODE],
        relevance: 10
      },
      hljs.APOS_STRING_MODE,
      hljs.QUOTE_STRING_MODE,
      {
        className: 'string',
        begin: '\\(', end: '\\)$',
        excludeBegin: true, excludeEnd: true,
        relevance: 0
      }
    ]
  };
};

/***/ }),
/* 246 */
/***/ (function(module, exports) {

module.exports = function(hljs) {

  var ATOM = {

    begin: /[a-z][A-Za-z0-9_]*/,
    relevance: 0
  };

  var VAR = {

    className: 'symbol',
    variants: [
      {begin: /[A-Z][a-zA-Z0-9_]*/},
      {begin: /_[A-Za-z0-9_]*/},
    ],
    relevance: 0
  };

  var PARENTED = {

    begin: /\(/,
    end: /\)/,
    relevance: 0
  };

  var LIST = {

    begin: /\[/,
    end: /\]/
  };

  var LINE_COMMENT = {

    className: 'comment',
    begin: /%/, end: /$/,
    contains: [hljs.PHRASAL_WORDS_MODE]
  };

  var BACKTICK_STRING = {

    className: 'string',
    begin: /`/, end: /`/,
    contains: [hljs.BACKSLASH_ESCAPE]
  };

  var CHAR_CODE = {

    className: 'string', // 0'a etc.
    begin: /0\'(\\\'|.)/
  };

  var SPACE_CODE = {

    className: 'string',
    begin: /0\'\\s/ // 0'\s
  };

  var PRED_OP = { // relevance booster
    begin: /:-/
  };

  var inner = [

    ATOM,
    VAR,
    PARENTED,
    PRED_OP,
    LIST,
    LINE_COMMENT,
    hljs.C_BLOCK_COMMENT_MODE,
    hljs.QUOTE_STRING_MODE,
    hljs.APOS_STRING_MODE,
    BACKTICK_STRING,
    CHAR_CODE,
    SPACE_CODE,
    hljs.C_NUMBER_MODE
  ];

  PARENTED.contains = inner;
  LIST.contains = inner;

  return {
    contains: inner.concat([
      {begin: /\.$/} // relevance booster
    ])
  };
};

/***/ }),
/* 247 */
/***/ (function(module, exports) {

module.exports = function(hljs) {
  return {
    keywords: {
      keyword: 'package import option optional required repeated group',
      built_in: 'double float int32 int64 uint32 uint64 sint32 sint64 ' +
        'fixed32 fixed64 sfixed32 sfixed64 bool string bytes',
      literal: 'true false'
    },
    contains: [
      hljs.QUOTE_STRING_MODE,
      hljs.NUMBER_MODE,
      hljs.C_LINE_COMMENT_MODE,
      {
        className: 'class',
        beginKeywords: 'message enum service', end: /\{/,
        illegal: /\n/,
        contains: [
          hljs.inherit(hljs.TITLE_MODE, {
            starts: {endsWithParent: true, excludeEnd: true} // hack: eating everything after the first title
          })
        ]
      },
      {
        className: 'function',
        beginKeywords: 'rpc',
        end: /;/, excludeEnd: true,
        keywords: 'rpc returns'
      },
      {
        begin: /^\s*[A-Z_]+/,
        end: /\s*=/, excludeEnd: true
      }
    ]
  };
};

/***/ }),
/* 248 */
/***/ (function(module, exports) {

module.exports = function(hljs) {

  var PUPPET_KEYWORDS = {
    keyword:
    /* language keywords */
      'and case default else elsif false if in import enherits node or true undef unless main settings $string ',
    literal:
    /* metaparameters */
      'alias audit before loglevel noop require subscribe tag ' +
    /* normal attributes */
      'owner ensure group mode name|0 changes context force incl lens load_path onlyif provider returns root show_diff type_check ' +
      'en_address ip_address realname command environment hour monute month monthday special target weekday '+
      'creates cwd ogoutput refresh refreshonly tries try_sleep umask backup checksum content ctime force ignore ' +
      'links mtime purge recurse recurselimit replace selinux_ignore_defaults selrange selrole seltype seluser source ' +
      'souirce_permissions sourceselect validate_cmd validate_replacement allowdupe attribute_membership auth_membership forcelocal gid '+
      'ia_load_module members system host_aliases ip allowed_trunk_vlans description device_url duplex encapsulation etherchannel ' +
      'native_vlan speed principals allow_root auth_class auth_type authenticate_user k_of_n mechanisms rule session_owner shared options ' +
      'device fstype enable hasrestart directory present absent link atboot blockdevice device dump pass remounts poller_tag use ' +
      'message withpath adminfile allow_virtual allowcdrom category configfiles flavor install_options instance package_settings platform ' +
      'responsefile status uninstall_options vendor unless_system_user unless_uid binary control flags hasstatus manifest pattern restart running ' +
      'start stop allowdupe auths expiry gid groups home iterations key_membership keys managehome membership password password_max_age ' +
      'password_min_age profile_membership profiles project purge_ssh_keys role_membership roles salt shell uid baseurl cost descr enabled ' +
      'enablegroups exclude failovermethod gpgcheck gpgkey http_caching include includepkgs keepalive metadata_expire metalink mirrorlist ' +
      'priority protect proxy proxy_password proxy_username repo_gpgcheck s3_enabled skip_if_unavailable sslcacert sslclientcert sslclientkey ' +
      'sslverify mounted',
    built_in:
    /* core facts */
      'architecture augeasversion blockdevices boardmanufacturer boardproductname boardserialnumber cfkey dhcp_servers ' +
      'domain ec2_ ec2_userdata facterversion filesystems ldom fqdn gid hardwareisa hardwaremodel hostname id|0 interfaces '+
      'ipaddress ipaddress_ ipaddress6 ipaddress6_ iphostnumber is_virtual kernel kernelmajversion kernelrelease kernelversion ' +
      'kernelrelease kernelversion lsbdistcodename lsbdistdescription lsbdistid lsbdistrelease lsbmajdistrelease lsbminordistrelease ' +
      'lsbrelease macaddress macaddress_ macosx_buildversion macosx_productname macosx_productversion macosx_productverson_major ' +
      'macosx_productversion_minor manufacturer memoryfree memorysize netmask metmask_ network_ operatingsystem operatingsystemmajrelease '+
      'operatingsystemrelease osfamily partitions path physicalprocessorcount processor processorcount productname ps puppetversion '+
      'rubysitedir rubyversion selinux selinux_config_mode selinux_config_policy selinux_current_mode selinux_current_mode selinux_enforced '+
      'selinux_policyversion serialnumber sp_ sshdsakey sshecdsakey sshrsakey swapencrypted swapfree swapsize timezone type uniqueid uptime '+
      'uptime_days uptime_hours uptime_seconds uuid virtual vlans xendomains zfs_version zonenae zones zpool_version'
  };

  var COMMENT = hljs.COMMENT('#', '$');

  var IDENT_RE = '([A-Za-z_]|::)(\\w|::)*';

  var TITLE = hljs.inherit(hljs.TITLE_MODE, {begin: IDENT_RE});

  var VARIABLE = {className: 'variable', begin: '\\$' + IDENT_RE};

  var STRING = {
    className: 'string',
    contains: [hljs.BACKSLASH_ESCAPE, VARIABLE],
    variants: [
      {begin: /'/, end: /'/},
      {begin: /"/, end: /"/}
    ]
  };

  return {
    aliases: ['pp'],
    contains: [
      COMMENT,
      VARIABLE,
      STRING,
      {
        beginKeywords: 'class', end: '\\{|;',
        illegal: /=/,
        contains: [TITLE, COMMENT]
      },
      {
        beginKeywords: 'define', end: /\{/,
        contains: [
          {
            className: 'section', begin: hljs.IDENT_RE, endsParent: true
          }
        ]
      },
      {
        begin: hljs.IDENT_RE + '\\s+\\{', returnBegin: true,
        end: /\S/,
        contains: [
          {
            className: 'keyword',
            begin: hljs.IDENT_RE
          },
          {
            begin: /\{/, end: /\}/,
            keywords: PUPPET_KEYWORDS,
            relevance: 0,
            contains: [
              STRING,
              COMMENT,
              {
                begin:'[a-zA-Z_]+\\s*=>',
                returnBegin: true, end: '=>',
                contains: [
                  {
                    className: 'attr',
                    begin: hljs.IDENT_RE,
                  }
                ]
              },
              {
                className: 'number',
                begin: '(\\b0[0-7_]+)|(\\b0x[0-9a-fA-F_]+)|(\\b[1-9][0-9_]*(\\.[0-9_]+)?)|[0_]\\b',
                relevance: 0
              },
              VARIABLE
            ]
          }
        ],
        relevance: 0
      }
    ]
  }
};

/***/ }),
/* 249 */
/***/ (function(module, exports) {

module.exports = // Base deafult colors in PB IDE: background: #FFFFDF; foreground: #000000;

function(hljs) {
  var STRINGS = { // PB IDE color: #0080FF (Azure Radiance)
    className: 'string',
    begin: '(~)?"', end: '"',
    illegal: '\\n'
  };
  var CONSTANTS = { // PB IDE color: #924B72 (Cannon Pink)
    //  "#" + a letter or underscore + letters, digits or underscores + (optional) "$"
    className: 'symbol',
    begin: '#[a-zA-Z_]\\w*\\$?'
  };

  return {
    aliases: ['pb', 'pbi'],
    keywords: // PB IDE color: #006666 (Blue Stone) + Bold
      // The following keywords list was taken and adapted from GuShH's PureBasic language file for GeSHi...
      'And As Break CallDebugger Case CompilerCase CompilerDefault CompilerElse CompilerEndIf CompilerEndSelect ' +
      'CompilerError CompilerIf CompilerSelect Continue Data DataSection EndDataSection Debug DebugLevel ' +
      'Default Define Dim DisableASM DisableDebugger DisableExplicit Else ElseIf EnableASM ' +
      'EnableDebugger EnableExplicit End EndEnumeration EndIf EndImport EndInterface EndMacro EndProcedure ' +
      'EndSelect EndStructure EndStructureUnion EndWith Enumeration Extends FakeReturn For Next ForEach ' +
      'ForEver Global Gosub Goto If Import ImportC IncludeBinary IncludeFile IncludePath Interface Macro ' +
      'NewList Not Or ProcedureReturn Protected Prototype ' +
      'PrototypeC Read ReDim Repeat Until Restore Return Select Shared Static Step Structure StructureUnion ' +
      'Swap To Wend While With XIncludeFile XOr ' +
      'Procedure ProcedureC ProcedureCDLL ProcedureDLL Declare DeclareC DeclareCDLL DeclareDLL',
    contains: [
      // COMMENTS | PB IDE color: #00AAAA (Persian Green)
      hljs.COMMENT(';', '$', {relevance: 0}),

      { // PROCEDURES DEFINITIONS
        className: 'function',
        begin: '\\b(Procedure|Declare)(C|CDLL|DLL)?\\b',
        end: '\\(',
        excludeEnd: true,
        returnBegin: true,
        contains: [
          { // PROCEDURE KEYWORDS | PB IDE color: #006666 (Blue Stone) + Bold
            className: 'keyword',
            begin: '(Procedure|Declare)(C|CDLL|DLL)?',
            excludeEnd: true
          },
          { // PROCEDURE RETURN TYPE SETTING | PB IDE color: #000000 (Black)
            className: 'type',
            begin: '\\.\\w*'
            // end: ' ',
          },
          hljs.UNDERSCORE_TITLE_MODE // PROCEDURE NAME | PB IDE color: #006666 (Blue Stone)
        ]
      },
      STRINGS,
      CONSTANTS
    ]
  };
};

/***/ }),
/* 250 */
/***/ (function(module, exports) {

module.exports = function(hljs) {
  var KEYWORDS = {
    keyword:
      'and elif is global as in if from raise for except finally print import pass return ' +
      'exec else break not with class assert yield try while continue del or def lambda ' +
      'async await nonlocal|10 None True False',
    built_in:
      'Ellipsis NotImplemented'
  };
  var PROMPT = {
    className: 'meta',  begin: /^(>>>|\.\.\.) /
  };
  var SUBST = {
    className: 'subst',
    begin: /\{/, end: /\}/,
    keywords: KEYWORDS,
    illegal: /#/
  };
  var STRING = {
    className: 'string',
    contains: [hljs.BACKSLASH_ESCAPE],
    variants: [
      {
        begin: /(u|b)?r?'''/, end: /'''/,
        contains: [PROMPT],
        relevance: 10
      },
      {
        begin: /(u|b)?r?"""/, end: /"""/,
        contains: [PROMPT],
        relevance: 10
      },
      {
        begin: /(fr|rf|f)'''/, end: /'''/,
        contains: [PROMPT, SUBST]
      },
      {
        begin: /(fr|rf|f)"""/, end: /"""/,
        contains: [PROMPT, SUBST]
      },
      {
        begin: /(u|r|ur)'/, end: /'/,
        relevance: 10
      },
      {
        begin: /(u|r|ur)"/, end: /"/,
        relevance: 10
      },
      {
        begin: /(b|br)'/, end: /'/
      },
      {
        begin: /(b|br)"/, end: /"/
      },
      {
        begin: /(fr|rf|f)'/, end: /'/,
        contains: [SUBST]
      },
      {
        begin: /(fr|rf|f)"/, end: /"/,
        contains: [SUBST]
      },
      hljs.APOS_STRING_MODE,
      hljs.QUOTE_STRING_MODE
    ]
  };
  var NUMBER = {
    className: 'number', relevance: 0,
    variants: [
      {begin: hljs.BINARY_NUMBER_RE + '[lLjJ]?'},
      {begin: '\\b(0o[0-7]+)[lLjJ]?'},
      {begin: hljs.C_NUMBER_RE + '[lLjJ]?'}
    ]
  };
  var PARAMS = {
    className: 'params',
    begin: /\(/, end: /\)/,
    contains: ['self', PROMPT, NUMBER, STRING]
  };
  SUBST.contains = [STRING, NUMBER, PROMPT];
  return {
    aliases: ['py', 'gyp'],
    keywords: KEYWORDS,
    illegal: /(<\/|->|\?)|=>/,
    contains: [
      PROMPT,
      NUMBER,
      STRING,
      hljs.HASH_COMMENT_MODE,
      {
        variants: [
          {className: 'function', beginKeywords: 'def'},
          {className: 'class', beginKeywords: 'class'}
        ],
        end: /:/,
        illegal: /[${=;\n,]/,
        contains: [
          hljs.UNDERSCORE_TITLE_MODE,
          PARAMS,
          {
            begin: /->/, endsWithParent: true,
            keywords: 'None'
          }
        ]
      },
      {
        className: 'meta',
        begin: /^[\t ]*@/, end: /$/
      },
      {
        begin: /\b(print|exec)\(/ // don’t highlight keywords-turned-functions in Python 3
      }
    ]
  };
};

/***/ }),
/* 251 */
/***/ (function(module, exports) {

module.exports = function(hljs) {
  var Q_KEYWORDS = {
  keyword:
    'do while select delete by update from',
  literal:
    '0b 1b',
  built_in:
    'neg not null string reciprocal floor ceiling signum mod xbar xlog and or each scan over prior mmu lsq inv md5 ltime gtime count first var dev med cov cor all any rand sums prds mins maxs fills deltas ratios avgs differ prev next rank reverse iasc idesc asc desc msum mcount mavg mdev xrank mmin mmax xprev rotate distinct group where flip type key til get value attr cut set upsert raze union inter except cross sv vs sublist enlist read0 read1 hopen hclose hdel hsym hcount peach system ltrim rtrim trim lower upper ssr view tables views cols xcols keys xkey xcol xasc xdesc fkeys meta lj aj aj0 ij pj asof uj ww wj wj1 fby xgroup ungroup ej save load rsave rload show csv parse eval min max avg wavg wsum sin cos tan sum',
  type:
    '`float `double int `timestamp `timespan `datetime `time `boolean `symbol `char `byte `short `long `real `month `date `minute `second `guid'
  };
  return {
  aliases:['k', 'kdb'],
  keywords: Q_KEYWORDS,
  lexemes: /(`?)[A-Za-z0-9_]+\b/,
  contains: [
  hljs.C_LINE_COMMENT_MODE,
    hljs.QUOTE_STRING_MODE,
    hljs.C_NUMBER_MODE
     ]
  };
};

/***/ }),
/* 252 */
/***/ (function(module, exports) {

module.exports = function(hljs) {
  var KEYWORDS = {
      keyword:
        'in of on if for while finally var new function do return void else break catch ' +
        'instanceof with throw case default try this switch continue typeof delete ' +
        'let yield const export super debugger as async await import',
      literal:
        'true false null undefined NaN Infinity',
      built_in:
        'eval isFinite isNaN parseFloat parseInt decodeURI decodeURIComponent ' +
        'encodeURI encodeURIComponent escape unescape Object Function Boolean Error ' +
        'EvalError InternalError RangeError ReferenceError StopIteration SyntaxError ' +
        'TypeError URIError Number Math Date String RegExp Array Float32Array ' +
        'Float64Array Int16Array Int32Array Int8Array Uint16Array Uint32Array ' +
        'Uint8Array Uint8ClampedArray ArrayBuffer DataView JSON Intl arguments require ' +
        'module console window document Symbol Set Map WeakSet WeakMap Proxy Reflect ' +
        'Behavior bool color coordinate date double enumeration font geocircle georectangle ' +
        'geoshape int list matrix4x4 parent point quaternion real rect ' +
        'size string url variant vector2d vector3d vector4d' +
        'Promise'
    };

  var QML_IDENT_RE = '[a-zA-Z_][a-zA-Z0-9\\._]*';

  // Isolate property statements. Ends at a :, =, ;, ,, a comment or end of line.
  // Use property class.
  var PROPERTY = {
      className: 'keyword',
      begin: '\\bproperty\\b',
      starts: {
        className: 'string',
        end: '(:|=|;|,|//|/\\*|$)',
        returnEnd: true
      }
  };

  // Isolate signal statements. Ends at a ) a comment or end of line.
  // Use property class.
  var SIGNAL = {
      className: 'keyword',
      begin: '\\bsignal\\b',
      starts: {
        className: 'string',
        end: '(\\(|:|=|;|,|//|/\\*|$)',
        returnEnd: true
      }
  };

  // id: is special in QML. When we see id: we want to mark the id: as attribute and
  // emphasize the token following.
  var ID_ID = {
      className: 'attribute',
      begin: '\\bid\\s*:',
      starts: {
        className: 'string',
        end: QML_IDENT_RE,
        returnEnd: false
      }
  };

  // Find QML object attribute. An attribute is a QML identifier followed by :.
  // Unfortunately it's hard to know where it ends, as it may contain scalars,
  // objects, object definitions, or javascript. The true end is either when the parent
  // ends or the next attribute is detected.
  var QML_ATTRIBUTE = {
    begin: QML_IDENT_RE + '\\s*:',
    returnBegin: true,
    contains: [
      {
        className: 'attribute',
        begin: QML_IDENT_RE,
        end: '\\s*:',
        excludeEnd: true,
        relevance: 0
      }
    ],
    relevance: 0
  };

  // Find QML object. A QML object is a QML identifier followed by { and ends at the matching }.
  // All we really care about is finding IDENT followed by { and just mark up the IDENT and ignore the {.
  var QML_OBJECT = {
    begin: QML_IDENT_RE + '\\s*{', end: '{',
    returnBegin: true,
    relevance: 0,
    contains: [
      hljs.inherit(hljs.TITLE_MODE, {begin: QML_IDENT_RE})
    ]
  };

  return {
    aliases: ['qt'],
    case_insensitive: false,
    keywords: KEYWORDS,
    contains: [
      {
        className: 'meta',
        begin: /^\s*['"]use (strict|asm)['"]/
      },
      hljs.APOS_STRING_MODE,
      hljs.QUOTE_STRING_MODE,
      { // template string
        className: 'string',
        begin: '`', end: '`',
        contains: [
          hljs.BACKSLASH_ESCAPE,
          {
            className: 'subst',
            begin: '\\$\\{', end: '\\}'
          }
        ]
      },
      hljs.C_LINE_COMMENT_MODE,
      hljs.C_BLOCK_COMMENT_MODE,
      {
        className: 'number',
        variants: [
          { begin: '\\b(0[bB][01]+)' },
          { begin: '\\b(0[oO][0-7]+)' },
          { begin: hljs.C_NUMBER_RE }
        ],
        relevance: 0
      },
      { // "value" container
        begin: '(' + hljs.RE_STARTERS_RE + '|\\b(case|return|throw)\\b)\\s*',
        keywords: 'return throw case',
        contains: [
          hljs.C_LINE_COMMENT_MODE,
          hljs.C_BLOCK_COMMENT_MODE,
          hljs.REGEXP_MODE,
          { // E4X / JSX
            begin: /</, end: />\s*[);\]]/,
            relevance: 0,
            subLanguage: 'xml'
          }
        ],
        relevance: 0
      },
      SIGNAL,
      PROPERTY,
      {
        className: 'function',
        beginKeywords: 'function', end: /\{/, excludeEnd: true,
        contains: [
          hljs.inherit(hljs.TITLE_MODE, {begin: /[A-Za-z$_][0-9A-Za-z$_]*/}),
          {
            className: 'params',
            begin: /\(/, end: /\)/,
            excludeBegin: true,
            excludeEnd: true,
            contains: [
              hljs.C_LINE_COMMENT_MODE,
              hljs.C_BLOCK_COMMENT_MODE
            ]
          }
        ],
        illegal: /\[|%/
      },
      {
        begin: '\\.' + hljs.IDENT_RE, relevance: 0 // hack: prevents detection of keywords after dots
      },
      ID_ID,
      QML_ATTRIBUTE,
      QML_OBJECT
    ],
    illegal: /#/
  };
};

/***/ }),
/* 253 */
/***/ (function(module, exports) {

module.exports = function(hljs) {
  var IDENT_RE = '([a-zA-Z]|\\.[a-zA-Z.])[a-zA-Z0-9._]*';

  return {
    contains: [
      hljs.HASH_COMMENT_MODE,
      {
        begin: IDENT_RE,
        lexemes: IDENT_RE,
        keywords: {
          keyword:
            'function if in break next repeat else for return switch while try tryCatch ' +
            'stop warning require library attach detach source setMethod setGeneric ' +
            'setGroupGeneric setClass ...',
          literal:
            'NULL NA TRUE FALSE T F Inf NaN NA_integer_|10 NA_real_|10 NA_character_|10 ' +
            'NA_complex_|10'
        },
        relevance: 0
      },
      {
        // hex value
        className: 'number',
        begin: "0[xX][0-9a-fA-F]+[Li]?\\b",
        relevance: 0
      },
      {
        // explicit integer
        className: 'number',
        begin: "\\d+(?:[eE][+\\-]?\\d*)?L\\b",
        relevance: 0
      },
      {
        // number with trailing decimal
        className: 'number',
        begin: "\\d+\\.(?!\\d)(?:i\\b)?",
        relevance: 0
      },
      {
        // number
        className: 'number',
        begin: "\\d+(?:\\.\\d*)?(?:[eE][+\\-]?\\d*)?i?\\b",
        relevance: 0
      },
      {
        // number with leading decimal
        className: 'number',
        begin: "\\.\\d+(?:[eE][+\\-]?\\d*)?i?\\b",
        relevance: 0
      },

      {
        // escaped identifier
        begin: '`',
        end: '`',
        relevance: 0
      },

      {
        className: 'string',
        contains: [hljs.BACKSLASH_ESCAPE],
        variants: [
          {begin: '"', end: '"'},
          {begin: "'", end: "'"}
        ]
      }
    ]
  };
};

/***/ }),
/* 254 */
/***/ (function(module, exports) {

module.exports = function(hljs) {
  return {
    keywords:
      'ArchiveRecord AreaLightSource Atmosphere Attribute AttributeBegin AttributeEnd Basis ' +
      'Begin Blobby Bound Clipping ClippingPlane Color ColorSamples ConcatTransform Cone ' +
      'CoordinateSystem CoordSysTransform CropWindow Curves Cylinder DepthOfField Detail ' +
      'DetailRange Disk Displacement Display End ErrorHandler Exposure Exterior Format ' +
      'FrameAspectRatio FrameBegin FrameEnd GeneralPolygon GeometricApproximation Geometry ' +
      'Hider Hyperboloid Identity Illuminate Imager Interior LightSource ' +
      'MakeCubeFaceEnvironment MakeLatLongEnvironment MakeShadow MakeTexture Matte ' +
      'MotionBegin MotionEnd NuPatch ObjectBegin ObjectEnd ObjectInstance Opacity Option ' +
      'Orientation Paraboloid Patch PatchMesh Perspective PixelFilter PixelSamples ' +
      'PixelVariance Points PointsGeneralPolygons PointsPolygons Polygon Procedural Projection ' +
      'Quantize ReadArchive RelativeDetail ReverseOrientation Rotate Scale ScreenWindow ' +
      'ShadingInterpolation ShadingRate Shutter Sides Skew SolidBegin SolidEnd Sphere ' +
      'SubdivisionMesh Surface TextureCoordinates Torus Transform TransformBegin TransformEnd ' +
      'TransformPoints Translate TrimCurve WorldBegin WorldEnd',
    illegal: '</',
    contains: [
      hljs.HASH_COMMENT_MODE,
      hljs.C_NUMBER_MODE,
      hljs.APOS_STRING_MODE,
      hljs.QUOTE_STRING_MODE
    ]
  };
};

/***/ }),
/* 255 */
/***/ (function(module, exports) {

module.exports = function(hljs) {
  var IDENTIFIER = '[a-zA-Z-_][^\\n{]+\\{';

  var PROPERTY = {
    className: 'attribute',
    begin: /[a-zA-Z-_]+/, end: /\s*:/, excludeEnd: true,
    starts: {
      end: ';',
      relevance: 0,
      contains: [
        {
          className: 'variable',
          begin: /\.[a-zA-Z-_]+/
        },
        {
          className: 'keyword',
          begin: /\(optional\)/
        }
      ]
    }
  };

  return {
    aliases: ['graph', 'instances'],
    case_insensitive: true,
    keywords: 'import',
    contains: [
      // Facet sections
      {
        begin: '^facet ' + IDENTIFIER,
        end: '}',
        keywords: 'facet',
        contains: [
          PROPERTY,
          hljs.HASH_COMMENT_MODE
        ]
      },

      // Instance sections
      {
        begin: '^\\s*instance of ' + IDENTIFIER,
        end: '}',
        keywords: 'name count channels instance-data instance-state instance of',
        illegal: /\S/,
        contains: [
          'self',
          PROPERTY,
          hljs.HASH_COMMENT_MODE
        ]
      },

      // Component sections
      {
        begin: '^' + IDENTIFIER,
        end: '}',
        contains: [
          PROPERTY,
          hljs.HASH_COMMENT_MODE
        ]
      },

      // Comments
      hljs.HASH_COMMENT_MODE
    ]
  };
};

/***/ }),
/* 256 */
/***/ (function(module, exports) {

module.exports = // Colors from RouterOS terminal:
//   green        - #0E9A00
//   teal         - #0C9A9A
//   purple       - #99069A
//   light-brown  - #9A9900

function(hljs) {

  var STATEMENTS = 'foreach do while for if from to step else on-error and or not in';

  // Global commands: Every global command should start with ":" token, otherwise it will be treated as variable.
  var GLOBAL_COMMANDS = 'global local beep delay put len typeof pick log time set find environment terminal error execute parse resolve toarray tobool toid toip toip6 tonum tostr totime';

  // Common commands: Following commands available from most sub-menus:
  var COMMON_COMMANDS = 'add remove enable disable set get print export edit find run debug error info warning';

  var LITERALS = 'true false yes no nothing nil null';

  var OBJECTS = 'traffic-flow traffic-generator firewall scheduler aaa accounting address-list address align area bandwidth-server bfd bgp bridge client clock community config connection console customer default dhcp-client dhcp-server discovery dns e-mail ethernet filter firewall firmware gps graphing group hardware health hotspot identity igmp-proxy incoming instance interface ip ipsec ipv6 irq l2tp-server lcd ldp logging mac-server mac-winbox mangle manual mirror mme mpls nat nd neighbor network note ntp ospf ospf-v3 ovpn-server page peer pim ping policy pool port ppp pppoe-client pptp-server prefix profile proposal proxy queue radius resource rip ripng route routing screen script security-profiles server service service-port settings shares smb sms sniffer snmp snooper socks sstp-server system tool tracking type upgrade upnp user-manager users user vlan secret vrrp watchdog web-access wireless pptp pppoe lan wan layer7-protocol lease simple raw';

  // print parameters
  // Several parameters are available for print command:
  // ToDo: var PARAMETERS_PRINT = 'append as-value brief detail count-only file follow follow-only from interval terse value-list without-paging where info';
  // ToDo: var OPERATORS = '&& and ! not || or in ~ ^ & << >> + - * /';
  // ToDo: var TYPES = 'num number bool boolean str string ip ip6-prefix id time array';
  // ToDo: The following tokens serve as delimiters in the grammar: ()  []  {}  :   ;   $   / 

  var VAR_PREFIX = 'global local set for foreach';

  var VAR = {
    className: 'variable',
    variants: [
      {begin: /\$[\w\d#@][\w\d_]*/},
      {begin: /\$\{(.*?)}/}
    ]
  };
  
  var QUOTE_STRING = {
    className: 'string',
    begin: /"/, end: /"/,
    contains: [
      hljs.BACKSLASH_ESCAPE,
      VAR,
      {
        className: 'variable',
        begin: /\$\(/, end: /\)/,
        contains: [hljs.BACKSLASH_ESCAPE]
      }
    ]
  };
  
  var APOS_STRING = {
    className: 'string',
    begin: /'/, end: /'/
  };
  
  var IPADDR = '((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\b';
  var IPADDR_wBITMASK =  IPADDR+'/(3[0-2]|[1-2][0-9]|\\d)';
  //////////////////////////////////////////////////////////////////////
  return {
    aliases: ['routeros', 'mikrotik'],
    case_insensitive: true,
    lexemes: /:?[\w-]+/,
    keywords: {
      literal: LITERALS,
      keyword: STATEMENTS + ' :' + STATEMENTS.split(' ').join(' :') + ' :' + GLOBAL_COMMANDS.split(' ').join(' :'),
    },
    contains: [
      { // недопустимые конструкции
        variants: [
          { begin: /^@/, end: /$/, },               // dns
          { begin: /\/\*/, end: /\*\//, },          // -- comment
          { begin: /%%/, end: /$/, },               // -- comment
          { begin: /^'/, end: /$/, },               // Monkey one line comment
          { begin: /^\s*\/[\w-]+=/, end: /$/, },    // jboss-cli
          { begin: /\/\//, end: /$/, },             // Stan comment
          { begin: /^\[\</, end: /\>\]$/, },        // F# class declaration?
          { begin: /<\//, end: />/, },              // HTML tags
          { begin: /^facet /, end: /\}/, },         // roboconf - лютый костыль )))
          { begin: '^1\\.\\.(\\d+)$', end: /$/, },  // tap  
        ],
        illegal: /./,
      },
      hljs.COMMENT('^#', '$'),
      QUOTE_STRING,
      APOS_STRING,
      VAR,
      { // attribute=value
        begin: /[\w-]+\=([^\s\{\}\[\]\(\)]+)/, 
        relevance: 0,
        returnBegin: true,
        contains: [
          {
            className: 'attribute',
            begin: /[^=]+/
          },
          {
            begin: /=/, 
            endsWithParent:  true,
            relevance: 0,
            contains: [
              QUOTE_STRING,
              APOS_STRING,
              VAR,
              {
                className: 'literal',
                begin: '\\b(' + LITERALS.split(' ').join('|') + ')\\b',
              },
              /*{
                // IPv4 addresses and subnets
                className: 'number',
                variants: [
                  {begin: IPADDR_wBITMASK+'(,'+IPADDR_wBITMASK+')*'}, //192.168.0.0/24,1.2.3.0/24
                  {begin: IPADDR+'-'+IPADDR},       // 192.168.0.1-192.168.0.3
                  {begin: IPADDR+'(,'+IPADDR+')*'}, // 192.168.0.1,192.168.0.34,192.168.24.1,192.168.0.1
                ]
              }, // */
              /*{
                // MAC addresses and DHCP Client IDs
                className: 'number',
                begin: /\b(1:)?([0-9A-Fa-f]{1,2}[:-]){5}([0-9A-Fa-f]){1,2}\b/,
              }, //*/
              {
                // Не форматировать не классифицированные значения. Необходимо для исключения подсветки значений как built_in.
                // className: 'number',  
                begin: /("[^"]*"|[^\s\{\}\[\]]+)/,
              }, //*/
            ]
          } //*/
        ]
      },//*/
      {
        // HEX values
        className: 'number',
        begin: /\*[0-9a-fA-F]+/,
      }, //*/

      { 
        begin: '\\b(' + COMMON_COMMANDS.split(' ').join('|') + ')([\\s\[\(]|\])',
        returnBegin: true,
        contains: [
          {
            className: 'builtin-name', //'function',
            begin: /\w+/,
          },
        ],  
      },
      
      { 
        className: 'built_in',
        variants: [
          {begin: '(\\.\\./|/|\\s)((' + OBJECTS.split(' ').join('|') + ');?\\s)+',relevance: 10,},
          {begin: /\.\./,},
        ],
      },//*/
    ]
  };
};

/***/ }),
/* 257 */
/***/ (function(module, exports) {

module.exports = function(hljs) {
  return {
    keywords: {
      keyword:
        'float color point normal vector matrix while for if do return else break extern continue',
      built_in:
        'abs acos ambient area asin atan atmosphere attribute calculatenormal ceil cellnoise ' +
        'clamp comp concat cos degrees depth Deriv diffuse distance Du Dv environment exp ' +
        'faceforward filterstep floor format fresnel incident length lightsource log match ' +
        'max min mod noise normalize ntransform opposite option phong pnoise pow printf ' +
        'ptlined radians random reflect refract renderinfo round setcomp setxcomp setycomp ' +
        'setzcomp shadow sign sin smoothstep specular specularbrdf spline sqrt step tan ' +
        'texture textureinfo trace transform vtransform xcomp ycomp zcomp'
    },
    illegal: '</',
    contains: [
      hljs.C_LINE_COMMENT_MODE,
      hljs.C_BLOCK_COMMENT_MODE,
      hljs.QUOTE_STRING_MODE,
      hljs.APOS_STRING_MODE,
      hljs.C_NUMBER_MODE,
      {
        className: 'meta',
        begin: '#', end: '$'
      },
      {
        className: 'class',
        beginKeywords: 'surface displacement light volume imager', end: '\\('
      },
      {
        beginKeywords: 'illuminate illuminance gather', end: '\\('
      }
    ]
  };
};

/***/ }),
/* 258 */
/***/ (function(module, exports) {

module.exports = function(hljs) {
  return {
    keywords: {
       keyword: 'BILL_PERIOD BILL_START BILL_STOP RS_EFFECTIVE_START RS_EFFECTIVE_STOP RS_JURIS_CODE RS_OPCO_CODE ' +
         'INTDADDATTRIBUTE|5 INTDADDVMSG|5 INTDBLOCKOP|5 INTDBLOCKOPNA|5 INTDCLOSE|5 INTDCOUNT|5 ' +
         'INTDCOUNTSTATUSCODE|5 INTDCREATEMASK|5 INTDCREATEDAYMASK|5 INTDCREATEFACTORMASK|5 ' +
         'INTDCREATEHANDLE|5 INTDCREATEOVERRIDEDAYMASK|5 INTDCREATEOVERRIDEMASK|5 ' +
         'INTDCREATESTATUSCODEMASK|5 INTDCREATETOUPERIOD|5 INTDDELETE|5 INTDDIPTEST|5 INTDEXPORT|5 ' +
         'INTDGETERRORCODE|5 INTDGETERRORMESSAGE|5 INTDISEQUAL|5 INTDJOIN|5 INTDLOAD|5 INTDLOADACTUALCUT|5 ' +
         'INTDLOADDATES|5 INTDLOADHIST|5 INTDLOADLIST|5 INTDLOADLISTDATES|5 INTDLOADLISTENERGY|5 ' +
         'INTDLOADLISTHIST|5 INTDLOADRELATEDCHANNEL|5 INTDLOADSP|5 INTDLOADSTAGING|5 INTDLOADUOM|5 ' +
         'INTDLOADUOMDATES|5 INTDLOADUOMHIST|5 INTDLOADVERSION|5 INTDOPEN|5 INTDREADFIRST|5 INTDREADNEXT|5 ' +
         'INTDRECCOUNT|5 INTDRELEASE|5 INTDREPLACE|5 INTDROLLAVG|5 INTDROLLPEAK|5 INTDSCALAROP|5 INTDSCALE|5 ' +
         'INTDSETATTRIBUTE|5 INTDSETDSTPARTICIPANT|5 INTDSETSTRING|5 INTDSETVALUE|5 INTDSETVALUESTATUS|5 ' +
         'INTDSHIFTSTARTTIME|5 INTDSMOOTH|5 INTDSORT|5 INTDSPIKETEST|5 INTDSUBSET|5 INTDTOU|5 ' +
         'INTDTOURELEASE|5 INTDTOUVALUE|5 INTDUPDATESTATS|5 INTDVALUE|5 STDEV INTDDELETEEX|5 ' +
         'INTDLOADEXACTUAL|5 INTDLOADEXCUT|5 INTDLOADEXDATES|5 INTDLOADEX|5 INTDLOADEXRELATEDCHANNEL|5 ' +
         'INTDSAVEEX|5 MVLOAD|5 MVLOADACCT|5 MVLOADACCTDATES|5 MVLOADACCTHIST|5 MVLOADDATES|5 MVLOADHIST|5 ' +
         'MVLOADLIST|5 MVLOADLISTDATES|5 MVLOADLISTHIST|5 IF FOR NEXT DONE SELECT END CALL ABORT CLEAR CHANNEL FACTOR LIST NUMBER ' +
         'OVERRIDE SET WEEK DISTRIBUTIONNODE ELSE WHEN THEN OTHERWISE IENUM CSV INCLUDE LEAVE RIDER SAVE DELETE ' +
         'NOVALUE SECTION WARN SAVE_UPDATE DETERMINANT LABEL REPORT REVENUE EACH ' +
         'IN FROM TOTAL CHARGE BLOCK AND OR CSV_FILE RATE_CODE AUXILIARY_DEMAND ' +
         'UIDACCOUNT RS BILL_PERIOD_SELECT HOURS_PER_MONTH INTD_ERROR_STOP SEASON_SCHEDULE_NAME ' +
         'ACCOUNTFACTOR ARRAYUPPERBOUND CALLSTOREDPROC GETADOCONNECTION GETCONNECT GETDATASOURCE ' +
         'GETQUALIFIER GETUSERID HASVALUE LISTCOUNT LISTOP LISTUPDATE LISTVALUE PRORATEFACTOR RSPRORATE ' +
         'SETBINPATH SETDBMONITOR WQ_OPEN BILLINGHOURS DATE DATEFROMFLOAT DATETIMEFROMSTRING ' +
         'DATETIMETOSTRING DATETOFLOAT DAY DAYDIFF DAYNAME DBDATETIME HOUR MINUTE MONTH MONTHDIFF ' +
         'MONTHHOURS MONTHNAME ROUNDDATE SAMEWEEKDAYLASTYEAR SECOND WEEKDAY WEEKDIFF YEAR YEARDAY ' +
         'YEARSTR COMPSUM HISTCOUNT HISTMAX HISTMIN HISTMINNZ HISTVALUE MAXNRANGE MAXRANGE MINRANGE ' +
         'COMPIKVA COMPKVA COMPKVARFROMKQKW COMPLF IDATTR FLAG LF2KW LF2KWH MAXKW POWERFACTOR ' +
         'READING2USAGE AVGSEASON MAXSEASON MONTHLYMERGE SEASONVALUE SUMSEASON ACCTREADDATES ' +
         'ACCTTABLELOAD CONFIGADD CONFIGGET CREATEOBJECT CREATEREPORT EMAILCLIENT EXPBLKMDMUSAGE ' +
         'EXPMDMUSAGE EXPORT_USAGE FACTORINEFFECT GETUSERSPECIFIEDSTOP INEFFECT ISHOLIDAY RUNRATE ' +
         'SAVE_PROFILE SETREPORTTITLE USEREXIT WATFORRUNRATE TO TABLE ACOS ASIN ATAN ATAN2 BITAND CEIL ' +
         'COS COSECANT COSH COTANGENT DIVQUOT DIVREM EXP FABS FLOOR FMOD FREPM FREXPN LOG LOG10 MAX MAXN ' +
         'MIN MINNZ MODF POW ROUND ROUND2VALUE ROUNDINT SECANT SIN SINH SQROOT TAN TANH FLOAT2STRING ' +
         'FLOAT2STRINGNC INSTR LEFT LEN LTRIM MID RIGHT RTRIM STRING STRINGNC TOLOWER TOUPPER TRIM ' +
         'NUMDAYS READ_DATE STAGING',
       built_in: 'IDENTIFIER OPTIONS XML_ELEMENT XML_OP XML_ELEMENT_OF DOMDOCCREATE DOMDOCLOADFILE DOMDOCLOADXML ' +
         'DOMDOCSAVEFILE DOMDOCGETROOT DOMDOCADDPI DOMNODEGETNAME DOMNODEGETTYPE DOMNODEGETVALUE DOMNODEGETCHILDCT ' +
         'DOMNODEGETFIRSTCHILD DOMNODEGETSIBLING DOMNODECREATECHILDELEMENT DOMNODESETATTRIBUTE ' +
         'DOMNODEGETCHILDELEMENTCT DOMNODEGETFIRSTCHILDELEMENT DOMNODEGETSIBLINGELEMENT DOMNODEGETATTRIBUTECT ' +
         'DOMNODEGETATTRIBUTEI DOMNODEGETATTRIBUTEBYNAME DOMNODEGETBYNAME'
    },
    contains: [
      hljs.C_LINE_COMMENT_MODE,
      hljs.C_BLOCK_COMMENT_MODE,
      hljs.APOS_STRING_MODE,
      hljs.QUOTE_STRING_MODE,
      hljs.C_NUMBER_MODE,
      {
        className: 'literal',
        variants: [
          {begin: '#\\s+[a-zA-Z\\ \\.]*', relevance: 0}, // looks like #-comment
          {begin: '#[a-zA-Z\\ \\.]+'}
        ]
      }
    ]
  };
};

/***/ }),
/* 259 */
/***/ (function(module, exports) {

module.exports = function(hljs) {
  var NUM_SUFFIX = '([ui](8|16|32|64|128|size)|f(32|64))\?';
  var KEYWORDS =
    'alignof as be box break const continue crate do else enum extern ' +
    'false fn for if impl in let loop match mod mut offsetof once priv ' +
    'proc pub pure ref return self Self sizeof static struct super trait true ' +
    'type typeof unsafe unsized use virtual while where yield move default';
  var BUILTINS =
    // functions
    'drop ' +
    // types
    'i8 i16 i32 i64 i128 isize ' +
    'u8 u16 u32 u64 u128 usize ' +
    'f32 f64 ' +
    'str char bool ' +
    'Box Option Result String Vec ' +
    // traits
    'Copy Send Sized Sync Drop Fn FnMut FnOnce ToOwned Clone Debug ' +
    'PartialEq PartialOrd Eq Ord AsRef AsMut Into From Default Iterator ' +
    'Extend IntoIterator DoubleEndedIterator ExactSizeIterator ' +
    'SliceConcatExt ToString ' +
    // macros
    'assert! assert_eq! bitflags! bytes! cfg! col! concat! concat_idents! ' +
    'debug_assert! debug_assert_eq! env! panic! file! format! format_args! ' +
    'include_bin! include_str! line! local_data_key! module_path! ' +
    'option_env! print! println! select! stringify! try! unimplemented! ' +
    'unreachable! vec! write! writeln! macro_rules! assert_ne! debug_assert_ne!';
  return {
    aliases: ['rs'],
    keywords: {
      keyword:
        KEYWORDS,
      literal:
        'true false Some None Ok Err',
      built_in:
        BUILTINS
    },
    lexemes: hljs.IDENT_RE + '!?',
    illegal: '</',
    contains: [
      hljs.C_LINE_COMMENT_MODE,
      hljs.COMMENT('/\\*', '\\*/', {contains: ['self']}),
      hljs.inherit(hljs.QUOTE_STRING_MODE, {begin: /b?"/, illegal: null}),
      {
        className: 'string',
        variants: [
           { begin: /r(#*)"(.|\n)*?"\1(?!#)/ },
           { begin: /b?'\\?(x\w{2}|u\w{4}|U\w{8}|.)'/ }
        ]
      },
      {
        className: 'symbol',
        begin: /'[a-zA-Z_][a-zA-Z0-9_]*/
      },
      {
        className: 'number',
        variants: [
          { begin: '\\b0b([01_]+)' + NUM_SUFFIX },
          { begin: '\\b0o([0-7_]+)' + NUM_SUFFIX },
          { begin: '\\b0x([A-Fa-f0-9_]+)' + NUM_SUFFIX },
          { begin: '\\b(\\d[\\d_]*(\\.[0-9_]+)?([eE][+-]?[0-9_]+)?)' +
                   NUM_SUFFIX
          }
        ],
        relevance: 0
      },
      {
        className: 'function',
        beginKeywords: 'fn', end: '(\\(|<)', excludeEnd: true,
        contains: [hljs.UNDERSCORE_TITLE_MODE]
      },
      {
        className: 'meta',
        begin: '#\\!?\\[', end: '\\]',
        contains: [
          {
            className: 'meta-string',
            begin: /"/, end: /"/
          }
        ]
      },
      {
        className: 'class',
        beginKeywords: 'type', end: ';',
        contains: [
          hljs.inherit(hljs.UNDERSCORE_TITLE_MODE, {endsParent: true})
        ],
        illegal: '\\S'
      },
      {
        className: 'class',
        beginKeywords: 'trait enum struct union', end: '{',
        contains: [
          hljs.inherit(hljs.UNDERSCORE_TITLE_MODE, {endsParent: true})
        ],
        illegal: '[\\w\\d]'
      },
      {
        begin: hljs.IDENT_RE + '::',
        keywords: {built_in: BUILTINS}
      },
      {
        begin: '->'
      }
    ]
  };
};

/***/ }),
/* 260 */
/***/ (function(module, exports) {

module.exports = function(hljs) {

  var ANNOTATION = { className: 'meta', begin: '@[A-Za-z]+' };

  // used in strings for escaping/interpolation/substitution
  var SUBST = {
    className: 'subst',
    variants: [
      {begin: '\\$[A-Za-z0-9_]+'},
      {begin: '\\${', end: '}'}
    ]
  };

  var STRING = {
    className: 'string',
    variants: [
      {
        begin: '"', end: '"',
        illegal: '\\n',
        contains: [hljs.BACKSLASH_ESCAPE]
      },
      {
        begin: '"""', end: '"""',
        relevance: 10
      },
      {
        begin: '[a-z]+"', end: '"',
        illegal: '\\n',
        contains: [hljs.BACKSLASH_ESCAPE, SUBST]
      },
      {
        className: 'string',
        begin: '[a-z]+"""', end: '"""',
        contains: [SUBST],
        relevance: 10
      }
    ]

  };

  var SYMBOL = {
    className: 'symbol',
    begin: '\'\\w[\\w\\d_]*(?!\')'
  };

  var TYPE = {
    className: 'type',
    begin: '\\b[A-Z][A-Za-z0-9_]*',
    relevance: 0
  };

  var NAME = {
    className: 'title',
    begin: /[^0-9\n\t "'(),.`{}\[\]:;][^\n\t "'(),.`{}\[\]:;]+|[^0-9\n\t "'(),.`{}\[\]:;=]/,
    relevance: 0
  };

  var CLASS = {
    className: 'class',
    beginKeywords: 'class object trait type',
    end: /[:={\[\n;]/,
    excludeEnd: true,
    contains: [
      {
        beginKeywords: 'extends with',
        relevance: 10
      },
      {
        begin: /\[/,
        end: /\]/,
        excludeBegin: true,
        excludeEnd: true,
        relevance: 0,
        contains: [TYPE]
      },
      {
        className: 'params',
        begin: /\(/,
        end: /\)/,
        excludeBegin: true,
        excludeEnd: true,
        relevance: 0,
        contains: [TYPE]
      },
      NAME
    ]
  };

  var METHOD = {
    className: 'function',
    beginKeywords: 'def',
    end: /[:={\[(\n;]/,
    excludeEnd: true,
    contains: [NAME]
  };

  return {
    keywords: {
      literal: 'true false null',
      keyword: 'type yield lazy override def with val var sealed abstract private trait object if forSome for while throw finally protected extends import final return else break new catch super class case package default try this match continue throws implicit'
    },
    contains: [
      hljs.C_LINE_COMMENT_MODE,
      hljs.C_BLOCK_COMMENT_MODE,
      STRING,
      SYMBOL,
      TYPE,
      METHOD,
      CLASS,
      hljs.C_NUMBER_MODE,
      ANNOTATION
    ]
  };
};

/***/ }),
/* 261 */
/***/ (function(module, exports) {

module.exports = function(hljs) {
  var SCHEME_IDENT_RE = '[^\\(\\)\\[\\]\\{\\}",\'`;#|\\\\\\s]+';
  var SCHEME_SIMPLE_NUMBER_RE = '(\\-|\\+)?\\d+([./]\\d+)?';
  var SCHEME_COMPLEX_NUMBER_RE = SCHEME_SIMPLE_NUMBER_RE + '[+\\-]' + SCHEME_SIMPLE_NUMBER_RE + 'i';
  var BUILTINS = {
    'builtin-name':
      'case-lambda call/cc class define-class exit-handler field import ' +
      'inherit init-field interface let*-values let-values let/ec mixin ' +
      'opt-lambda override protect provide public rename require ' +
      'require-for-syntax syntax syntax-case syntax-error unit/sig unless ' +
      'when with-syntax and begin call-with-current-continuation ' +
      'call-with-input-file call-with-output-file case cond define ' +
      'define-syntax delay do dynamic-wind else for-each if lambda let let* ' +
      'let-syntax letrec letrec-syntax map or syntax-rules \' * + , ,@ - ... / ' +
      '; < <= = => > >= ` abs acos angle append apply asin assoc assq assv atan ' +
      'boolean? caar cadr call-with-input-file call-with-output-file ' +
      'call-with-values car cdddar cddddr cdr ceiling char->integer ' +
      'char-alphabetic? char-ci<=? char-ci<? char-ci=? char-ci>=? char-ci>? ' +
      'char-downcase char-lower-case? char-numeric? char-ready? char-upcase ' +
      'char-upper-case? char-whitespace? char<=? char<? char=? char>=? char>? ' +
      'char? close-input-port close-output-port complex? cons cos ' +
      'current-input-port current-output-port denominator display eof-object? ' +
      'eq? equal? eqv? eval even? exact->inexact exact? exp expt floor ' +
      'force gcd imag-part inexact->exact inexact? input-port? integer->char ' +
      'integer? interaction-environment lcm length list list->string ' +
      'list->vector list-ref list-tail list? load log magnitude make-polar ' +
      'make-rectangular make-string make-vector max member memq memv min ' +
      'modulo negative? newline not null-environment null? number->string ' +
      'number? numerator odd? open-input-file open-output-file output-port? ' +
      'pair? peek-char port? positive? procedure? quasiquote quote quotient ' +
      'rational? rationalize read read-char real-part real? remainder reverse ' +
      'round scheme-report-environment set! set-car! set-cdr! sin sqrt string ' +
      'string->list string->number string->symbol string-append string-ci<=? ' +
      'string-ci<? string-ci=? string-ci>=? string-ci>? string-copy ' +
      'string-fill! string-length string-ref string-set! string<=? string<? ' +
      'string=? string>=? string>? string? substring symbol->string symbol? ' +
      'tan transcript-off transcript-on truncate values vector ' +
      'vector->list vector-fill! vector-length vector-ref vector-set! ' +
      'with-input-from-file with-output-to-file write write-char zero?'
  };

  var SHEBANG = {
    className: 'meta',
    begin: '^#!',
    end: '$'
  };

  var LITERAL = {
    className: 'literal',
    begin: '(#t|#f|#\\\\' + SCHEME_IDENT_RE + '|#\\\\.)'
  };

  var NUMBER = {
    className: 'number',
    variants: [
      { begin: SCHEME_SIMPLE_NUMBER_RE, relevance: 0 },
      { begin: SCHEME_COMPLEX_NUMBER_RE, relevance: 0 },
      { begin: '#b[0-1]+(/[0-1]+)?' },
      { begin: '#o[0-7]+(/[0-7]+)?' },
      { begin: '#x[0-9a-f]+(/[0-9a-f]+)?' }
    ]
  };

  var STRING = hljs.QUOTE_STRING_MODE;

  var REGULAR_EXPRESSION = {
    className: 'regexp',
    begin: '#[pr]x"',
    end: '[^\\\\]"'
  };

  var COMMENT_MODES = [
    hljs.COMMENT(
      ';',
      '$',
      {
        relevance: 0
      }
    ),
    hljs.COMMENT('#\\|', '\\|#')
  ];

  var IDENT = {
    begin: SCHEME_IDENT_RE,
    relevance: 0
  };

  var QUOTED_IDENT = {
    className: 'symbol',
    begin: '\'' + SCHEME_IDENT_RE
  };

  var BODY = {
    endsWithParent: true,
    relevance: 0
  };

  var QUOTED_LIST = {
    variants: [
      { begin: /'/ },
      { begin: '`' }
    ],
    contains: [
      {
        begin: '\\(', end: '\\)',
        contains: ['self', LITERAL, STRING, NUMBER, IDENT, QUOTED_IDENT]
      }
    ]
  };

  var NAME = {
    className: 'name',
    begin: SCHEME_IDENT_RE,
    lexemes: SCHEME_IDENT_RE,
    keywords: BUILTINS
  };

  var LAMBDA = {
    begin: /lambda/, endsWithParent: true, returnBegin: true,
    contains: [
      NAME,
      {
        begin: /\(/, end: /\)/, endsParent: true,
        contains: [IDENT],
      }
    ]
  };

  var LIST = {
    variants: [
      { begin: '\\(', end: '\\)' },
      { begin: '\\[', end: '\\]' }
    ],
    contains: [LAMBDA, NAME, BODY]
  };

  BODY.contains = [LITERAL, NUMBER, STRING, IDENT, QUOTED_IDENT, QUOTED_LIST, LIST].concat(COMMENT_MODES);

  return {
    illegal: /\S/,
    contains: [SHEBANG, NUMBER, STRING, QUOTED_IDENT, QUOTED_LIST, LIST].concat(COMMENT_MODES)
  };
};

/***/ }),
/* 262 */
/***/ (function(module, exports) {

module.exports = function(hljs) {

  var COMMON_CONTAINS = [
    hljs.C_NUMBER_MODE,
    {
      className: 'string',
      begin: '\'|\"', end: '\'|\"',
      contains: [hljs.BACKSLASH_ESCAPE, {begin: '\'\''}]
    }
  ];

  return {
    aliases: ['sci'],
    lexemes: /%?\w+/,
    keywords: {
      keyword: 'abort break case clear catch continue do elseif else endfunction end for function '+
        'global if pause return resume select try then while',
      literal:
        '%f %F %t %T %pi %eps %inf %nan %e %i %z %s',
      built_in: // Scilab has more than 2000 functions. Just list the most commons
       'abs and acos asin atan ceil cd chdir clearglobal cosh cos cumprod deff disp error '+
       'exec execstr exists exp eye gettext floor fprintf fread fsolve imag isdef isempty '+
       'isinfisnan isvector lasterror length load linspace list listfiles log10 log2 log '+
       'max min msprintf mclose mopen ones or pathconvert poly printf prod pwd rand real '+
       'round sinh sin size gsort sprintf sqrt strcat strcmps tring sum system tanh tan '+
       'type typename warning zeros matrix'
    },
    illegal: '("|#|/\\*|\\s+/\\w+)',
    contains: [
      {
        className: 'function',
        beginKeywords: 'function', end: '$',
        contains: [
          hljs.UNDERSCORE_TITLE_MODE,
          {
            className: 'params',
            begin: '\\(', end: '\\)'
          }
        ]
      },
      {
        begin: '[a-zA-Z_][a-zA-Z_0-9]*(\'+[\\.\']*|[\\.\']+)', end: '',
        relevance: 0
      },
      {
        begin: '\\[', end: '\\]\'*[\\.\']*',
        relevance: 0,
        contains: COMMON_CONTAINS
      },
      hljs.COMMENT('//', '$')
    ].concat(COMMON_CONTAINS)
  };
};

/***/ }),
/* 263 */
/***/ (function(module, exports) {

module.exports = function(hljs) {
  var IDENT_RE = '[a-zA-Z-][a-zA-Z0-9_-]*';
  var VARIABLE = {
    className: 'variable',
    begin: '(\\$' + IDENT_RE + ')\\b'
  };
  var HEXCOLOR = {
    className: 'number', begin: '#[0-9A-Fa-f]+'
  };
  var DEF_INTERNALS = {
    className: 'attribute',
    begin: '[A-Z\\_\\.\\-]+', end: ':',
    excludeEnd: true,
    illegal: '[^\\s]',
    starts: {
      endsWithParent: true, excludeEnd: true,
      contains: [
        HEXCOLOR,
        hljs.CSS_NUMBER_MODE,
        hljs.QUOTE_STRING_MODE,
        hljs.APOS_STRING_MODE,
        hljs.C_BLOCK_COMMENT_MODE,
        {
          className: 'meta', begin: '!important'
        }
      ]
    }
  };
  return {
    case_insensitive: true,
    illegal: '[=/|\']',
    contains: [
      hljs.C_LINE_COMMENT_MODE,
      hljs.C_BLOCK_COMMENT_MODE,
      {
        className: 'selector-id', begin: '\\#[A-Za-z0-9_-]+',
        relevance: 0
      },
      {
        className: 'selector-class', begin: '\\.[A-Za-z0-9_-]+',
        relevance: 0
      },
      {
        className: 'selector-attr', begin: '\\[', end: '\\]',
        illegal: '$'
      },
      {
        className: 'selector-tag', // begin: IDENT_RE, end: '[,|\\s]'
        begin: '\\b(a|abbr|acronym|address|area|article|aside|audio|b|base|big|blockquote|body|br|button|canvas|caption|cite|code|col|colgroup|command|datalist|dd|del|details|dfn|div|dl|dt|em|embed|fieldset|figcaption|figure|footer|form|frame|frameset|(h[1-6])|head|header|hgroup|hr|html|i|iframe|img|input|ins|kbd|keygen|label|legend|li|link|map|mark|meta|meter|nav|noframes|noscript|object|ol|optgroup|option|output|p|param|pre|progress|q|rp|rt|ruby|samp|script|section|select|small|span|strike|strong|style|sub|sup|table|tbody|td|textarea|tfoot|th|thead|time|title|tr|tt|ul|var|video)\\b',
        relevance: 0
      },
      {
        begin: ':(visited|valid|root|right|required|read-write|read-only|out-range|optional|only-of-type|only-child|nth-of-type|nth-last-of-type|nth-last-child|nth-child|not|link|left|last-of-type|last-child|lang|invalid|indeterminate|in-range|hover|focus|first-of-type|first-line|first-letter|first-child|first|enabled|empty|disabled|default|checked|before|after|active)'
      },
      {
        begin: '::(after|before|choices|first-letter|first-line|repeat-index|repeat-item|selection|value)'
      },
      VARIABLE,
      {
        className: 'attribute',
        begin: '\\b(z-index|word-wrap|word-spacing|word-break|width|widows|white-space|visibility|vertical-align|unicode-bidi|transition-timing-function|transition-property|transition-duration|transition-delay|transition|transform-style|transform-origin|transform|top|text-underline-position|text-transform|text-shadow|text-rendering|text-overflow|text-indent|text-decoration-style|text-decoration-line|text-decoration-color|text-decoration|text-align-last|text-align|tab-size|table-layout|right|resize|quotes|position|pointer-events|perspective-origin|perspective|page-break-inside|page-break-before|page-break-after|padding-top|padding-right|padding-left|padding-bottom|padding|overflow-y|overflow-x|overflow-wrap|overflow|outline-width|outline-style|outline-offset|outline-color|outline|orphans|order|opacity|object-position|object-fit|normal|none|nav-up|nav-right|nav-left|nav-index|nav-down|min-width|min-height|max-width|max-height|mask|marks|margin-top|margin-right|margin-left|margin-bottom|margin|list-style-type|list-style-position|list-style-image|list-style|line-height|letter-spacing|left|justify-content|initial|inherit|ime-mode|image-orientation|image-resolution|image-rendering|icon|hyphens|height|font-weight|font-variant-ligatures|font-variant|font-style|font-stretch|font-size-adjust|font-size|font-language-override|font-kerning|font-feature-settings|font-family|font|float|flex-wrap|flex-shrink|flex-grow|flex-flow|flex-direction|flex-basis|flex|filter|empty-cells|display|direction|cursor|counter-reset|counter-increment|content|column-width|column-span|column-rule-width|column-rule-style|column-rule-color|column-rule|column-gap|column-fill|column-count|columns|color|clip-path|clip|clear|caption-side|break-inside|break-before|break-after|box-sizing|box-shadow|box-decoration-break|bottom|border-width|border-top-width|border-top-style|border-top-right-radius|border-top-left-radius|border-top-color|border-top|border-style|border-spacing|border-right-width|border-right-style|border-right-color|border-right|border-radius|border-left-width|border-left-style|border-left-color|border-left|border-image-width|border-image-source|border-image-slice|border-image-repeat|border-image-outset|border-image|border-color|border-collapse|border-bottom-width|border-bottom-style|border-bottom-right-radius|border-bottom-left-radius|border-bottom-color|border-bottom|border|background-size|background-repeat|background-position|background-origin|background-image|background-color|background-clip|background-attachment|background-blend-mode|background|backface-visibility|auto|animation-timing-function|animation-play-state|animation-name|animation-iteration-count|animation-fill-mode|animation-duration|animation-direction|animation-delay|animation|align-self|align-items|align-content)\\b',
        illegal: '[^\\s]'
      },
      {
        begin: '\\b(whitespace|wait|w-resize|visible|vertical-text|vertical-ideographic|uppercase|upper-roman|upper-alpha|underline|transparent|top|thin|thick|text|text-top|text-bottom|tb-rl|table-header-group|table-footer-group|sw-resize|super|strict|static|square|solid|small-caps|separate|se-resize|scroll|s-resize|rtl|row-resize|ridge|right|repeat|repeat-y|repeat-x|relative|progress|pointer|overline|outside|outset|oblique|nowrap|not-allowed|normal|none|nw-resize|no-repeat|no-drop|newspaper|ne-resize|n-resize|move|middle|medium|ltr|lr-tb|lowercase|lower-roman|lower-alpha|loose|list-item|line|line-through|line-edge|lighter|left|keep-all|justify|italic|inter-word|inter-ideograph|inside|inset|inline|inline-block|inherit|inactive|ideograph-space|ideograph-parenthesis|ideograph-numeric|ideograph-alpha|horizontal|hidden|help|hand|groove|fixed|ellipsis|e-resize|double|dotted|distribute|distribute-space|distribute-letter|distribute-all-lines|disc|disabled|default|decimal|dashed|crosshair|collapse|col-resize|circle|char|center|capitalize|break-word|break-all|bottom|both|bolder|bold|block|bidi-override|below|baseline|auto|always|all-scroll|absolute|table|table-cell)\\b'
      },
      {
        begin: ':', end: ';',
        contains: [
          VARIABLE,
          HEXCOLOR,
          hljs.CSS_NUMBER_MODE,
          hljs.QUOTE_STRING_MODE,
          hljs.APOS_STRING_MODE,
          {
            className: 'meta', begin: '!important'
          }
        ]
      },
      {
        begin: '@', end: '[{;]',
        keywords: 'mixin include extend for if else each while charset import debug media page content font-face namespace warn',
        contains: [
          VARIABLE,
          hljs.QUOTE_STRING_MODE,
          hljs.APOS_STRING_MODE,
          HEXCOLOR,
          hljs.CSS_NUMBER_MODE,
          {
            begin: '\\s[A-Za-z0-9_.-]+',
            relevance: 0
          }
        ]
      }
    ]
  };
};

/***/ }),
/* 264 */
/***/ (function(module, exports) {

module.exports = function(hljs) {
  return {
    aliases: ['console'],
    contains: [
      {
        className: 'meta',
        begin: '^\\s{0,3}[\\w\\d\\[\\]()@-]*[>%$#]',
        starts: {
          end: '$', subLanguage: 'bash'
        }
      },
    ]
  }
};

/***/ }),
/* 265 */
/***/ (function(module, exports) {

module.exports = function(hljs) {
  var smali_instr_low_prio = ['add', 'and', 'cmp', 'cmpg', 'cmpl', 'const', 'div', 'double', 'float', 'goto', 'if', 'int', 'long', 'move', 'mul', 'neg', 'new', 'nop', 'not', 'or', 'rem', 'return', 'shl', 'shr', 'sput', 'sub', 'throw', 'ushr', 'xor'];
  var smali_instr_high_prio = ['aget', 'aput', 'array', 'check', 'execute', 'fill', 'filled', 'goto/16', 'goto/32', 'iget', 'instance', 'invoke', 'iput', 'monitor', 'packed', 'sget', 'sparse'];
  var smali_keywords = ['transient', 'constructor', 'abstract', 'final', 'synthetic', 'public', 'private', 'protected', 'static', 'bridge', 'system'];
  return {
    aliases: ['smali'],
    contains: [
      {
        className: 'string',
        begin: '"', end: '"',
        relevance: 0
      },
      hljs.COMMENT(
        '#',
        '$',
        {
          relevance: 0
        }
      ),
      {
        className: 'keyword',
        variants: [
          {begin: '\\s*\\.end\\s[a-zA-Z0-9]*'},
          {begin: '^[ ]*\\.[a-zA-Z]*', relevance: 0},
          {begin: '\\s:[a-zA-Z_0-9]*', relevance: 0},
          {begin: '\\s(' + smali_keywords.join('|') + ')'}
        ]
      },
      {
        className: 'built_in',
        variants : [
          {
            begin: '\\s('+smali_instr_low_prio.join('|')+')\\s'
          },
          {
            begin: '\\s('+smali_instr_low_prio.join('|')+')((\\-|/)[a-zA-Z0-9]+)+\\s',
            relevance: 10
          },
          {
            begin: '\\s('+smali_instr_high_prio.join('|')+')((\\-|/)[a-zA-Z0-9]+)*\\s',
            relevance: 10
          },
        ]
      },
      {
        className: 'class',
        begin: 'L[^\(;:\n]*;',
        relevance: 0
      },
      {
        begin: '[vp][0-9]+',
      }
    ]
  };
};

/***/ }),
/* 266 */
/***/ (function(module, exports) {

module.exports = function(hljs) {
  var VAR_IDENT_RE = '[a-z][a-zA-Z0-9_]*';
  var CHAR = {
    className: 'string',
    begin: '\\$.{1}'
  };
  var SYMBOL = {
    className: 'symbol',
    begin: '#' + hljs.UNDERSCORE_IDENT_RE
  };
  return {
    aliases: ['st'],
    keywords: 'self super nil true false thisContext', // only 6
    contains: [
      hljs.COMMENT('"', '"'),
      hljs.APOS_STRING_MODE,
      {
        className: 'type',
        begin: '\\b[A-Z][A-Za-z0-9_]*',
        relevance: 0
      },
      {
        begin: VAR_IDENT_RE + ':',
        relevance: 0
      },
      hljs.C_NUMBER_MODE,
      SYMBOL,
      CHAR,
      {
        // This looks more complicated than needed to avoid combinatorial
        // explosion under V8. It effectively means `| var1 var2 ... |` with
        // whitespace adjacent to `|` being optional.
        begin: '\\|[ ]*' + VAR_IDENT_RE + '([ ]+' + VAR_IDENT_RE + ')*[ ]*\\|',
        returnBegin: true, end: /\|/,
        illegal: /\S/,
        contains: [{begin: '(\\|[ ]*)?' + VAR_IDENT_RE}]
      },
      {
        begin: '\\#\\(', end: '\\)',
        contains: [
          hljs.APOS_STRING_MODE,
          CHAR,
          hljs.C_NUMBER_MODE,
          SYMBOL
        ]
      }
    ]
  };
};

/***/ }),
/* 267 */
/***/ (function(module, exports) {

module.exports = function(hljs) {
  return {
    aliases: ['ml'],
    keywords: {
      keyword:
        /* according to Definition of Standard ML 97  */
        'abstype and andalso as case datatype do else end eqtype ' +
        'exception fn fun functor handle if in include infix infixr ' +
        'let local nonfix of op open orelse raise rec sharing sig ' +
        'signature struct structure then type val with withtype where while',
      built_in:
        /* built-in types according to basis library */
        'array bool char exn int list option order real ref string substring vector unit word',
      literal:
        'true false NONE SOME LESS EQUAL GREATER nil'
    },
    illegal: /\/\/|>>/,
    lexemes: '[a-z_]\\w*!?',
    contains: [
      {
        className: 'literal',
        begin: /\[(\|\|)?\]|\(\)/,
        relevance: 0
      },
      hljs.COMMENT(
        '\\(\\*',
        '\\*\\)',
        {
          contains: ['self']
        }
      ),
      { /* type variable */
        className: 'symbol',
        begin: '\'[A-Za-z_](?!\')[\\w\']*'
        /* the grammar is ambiguous on how 'a'b should be interpreted but not the compiler */
      },
      { /* polymorphic variant */
        className: 'type',
        begin: '`[A-Z][\\w\']*'
      },
      { /* module or constructor */
        className: 'type',
        begin: '\\b[A-Z][\\w\']*',
        relevance: 0
      },
      { /* don't color identifiers, but safely catch all identifiers with '*/
        begin: '[a-z_]\\w*\'[\\w\']*'
      },
      hljs.inherit(hljs.APOS_STRING_MODE, {className: 'string', relevance: 0}),
      hljs.inherit(hljs.QUOTE_STRING_MODE, {illegal: null}),
      {
        className: 'number',
        begin:
          '\\b(0[xX][a-fA-F0-9_]+[Lln]?|' +
          '0[oO][0-7_]+[Lln]?|' +
          '0[bB][01_]+[Lln]?|' +
          '[0-9][0-9_]*([Lln]|(\\.[0-9_]*)?([eE][-+]?[0-9_]+)?)?)',
        relevance: 0
      },
      {
        begin: /[-=]>/ // relevance booster
      }
    ]
  };
};

/***/ }),
/* 268 */
/***/ (function(module, exports) {

module.exports = function(hljs) {
  var CPP = hljs.getLanguage('cpp').exports;

  // In SQF, a variable start with _
  var VARIABLE = {
    className: 'variable',
    begin: /\b_+[a-zA-Z_]\w*/
  };

  // In SQF, a function should fit myTag_fnc_myFunction pattern
  // https://community.bistudio.com/wiki/Functions_Library_(Arma_3)#Adding_a_Function
  var FUNCTION = {
    className: 'title',
    begin: /[a-zA-Z][a-zA-Z0-9]+_fnc_\w*/
  };

  // In SQF strings, quotes matching the start are escaped by adding a consecutive.
  // Example of single escaped quotes: " "" " and  ' '' '.
  var STRINGS = {
    className: 'string',
    variants: [
      {
        begin: '"',
        end: '"',
        contains: [{begin: '""', relevance: 0}]
      },
      {
        begin: '\'',
        end: '\'',
        contains: [{begin: '\'\'', relevance: 0}]
      }
    ]
  };

  return {
    aliases: ['sqf'],
    case_insensitive: true,
    keywords: {
      keyword:
        'case catch default do else exit exitWith for forEach from if ' +
        'switch then throw to try waitUntil while with',
      built_in:
        'abs accTime acos action actionIDs actionKeys actionKeysImages actionKeysNames ' +
        'actionKeysNamesArray actionName actionParams activateAddons activatedAddons activateKey ' +
        'add3DENConnection add3DENEventHandler add3DENLayer addAction addBackpack addBackpackCargo ' +
        'addBackpackCargoGlobal addBackpackGlobal addCamShake addCuratorAddons addCuratorCameraArea ' +
        'addCuratorEditableObjects addCuratorEditingArea addCuratorPoints addEditorObject addEventHandler ' +
        'addGoggles addGroupIcon addHandgunItem addHeadgear addItem addItemCargo addItemCargoGlobal ' +
        'addItemPool addItemToBackpack addItemToUniform addItemToVest addLiveStats addMagazine ' +
        'addMagazineAmmoCargo addMagazineCargo addMagazineCargoGlobal addMagazineGlobal addMagazinePool ' +
        'addMagazines addMagazineTurret addMenu addMenuItem addMissionEventHandler addMPEventHandler ' +
        'addMusicEventHandler addOwnedMine addPlayerScores addPrimaryWeaponItem ' +
        'addPublicVariableEventHandler addRating addResources addScore addScoreSide addSecondaryWeaponItem ' +
        'addSwitchableUnit addTeamMember addToRemainsCollector addUniform addVehicle addVest addWaypoint ' +
        'addWeapon addWeaponCargo addWeaponCargoGlobal addWeaponGlobal addWeaponItem addWeaponPool ' +
        'addWeaponTurret agent agents AGLToASL aimedAtTarget aimPos airDensityRTD airportSide ' +
        'AISFinishHeal alive all3DENEntities allControls allCurators allCutLayers allDead allDeadMen ' +
        'allDisplays allGroups allMapMarkers allMines allMissionObjects allow3DMode allowCrewInImmobile ' +
        'allowCuratorLogicIgnoreAreas allowDamage allowDammage allowFileOperations allowFleeing allowGetIn ' +
        'allowSprint allPlayers allSites allTurrets allUnits allUnitsUAV allVariables ammo and animate ' +
        'animateDoor animateSource animationNames animationPhase animationSourcePhase animationState ' +
        'append apply armoryPoints arrayIntersect asin ASLToAGL ASLToATL assert assignAsCargo ' +
        'assignAsCargoIndex assignAsCommander assignAsDriver assignAsGunner assignAsTurret assignCurator ' +
        'assignedCargo assignedCommander assignedDriver assignedGunner assignedItems assignedTarget ' +
        'assignedTeam assignedVehicle assignedVehicleRole assignItem assignTeam assignToAirport atan atan2 ' +
        'atg ATLToASL attachedObject attachedObjects attachedTo attachObject attachTo attackEnabled ' +
        'backpack backpackCargo backpackContainer backpackItems backpackMagazines backpackSpaceFor ' +
        'behaviour benchmark binocular blufor boundingBox boundingBoxReal boundingCenter breakOut breakTo ' +
        'briefingName buildingExit buildingPos buttonAction buttonSetAction cadetMode call callExtension ' +
        'camCommand camCommit camCommitPrepared camCommitted camConstuctionSetParams camCreate camDestroy ' +
        'cameraEffect cameraEffectEnableHUD cameraInterest cameraOn cameraView campaignConfigFile ' +
        'camPreload camPreloaded camPrepareBank camPrepareDir camPrepareDive camPrepareFocus camPrepareFov ' +
        'camPrepareFovRange camPreparePos camPrepareRelPos camPrepareTarget camSetBank camSetDir ' +
        'camSetDive camSetFocus camSetFov camSetFovRange camSetPos camSetRelPos camSetTarget camTarget ' +
        'camUseNVG canAdd canAddItemToBackpack canAddItemToUniform canAddItemToVest ' +
        'cancelSimpleTaskDestination canFire canMove canSlingLoad canStand canSuspend canUnloadInCombat ' +
        'canVehicleCargo captive captiveNum cbChecked cbSetChecked ceil channelEnabled cheatsEnabled ' +
        'checkAIFeature checkVisibility civilian className clearAllItemsFromBackpack clearBackpackCargo ' +
        'clearBackpackCargoGlobal clearGroupIcons clearItemCargo clearItemCargoGlobal clearItemPool ' +
        'clearMagazineCargo clearMagazineCargoGlobal clearMagazinePool clearOverlay clearRadio ' +
        'clearWeaponCargo clearWeaponCargoGlobal clearWeaponPool clientOwner closeDialog closeDisplay ' +
        'closeOverlay collapseObjectTree collect3DENHistory combatMode commandArtilleryFire commandChat ' +
        'commander commandFire commandFollow commandFSM commandGetOut commandingMenu commandMove ' +
        'commandRadio commandStop commandSuppressiveFire commandTarget commandWatch comment commitOverlay ' +
        'compile compileFinal completedFSM composeText configClasses configFile configHierarchy configName ' +
        'configNull configProperties configSourceAddonList configSourceMod configSourceModList ' +
        'connectTerminalToUAV controlNull controlsGroupCtrl copyFromClipboard copyToClipboard ' +
        'copyWaypoints cos count countEnemy countFriendly countSide countType countUnknown ' +
        'create3DENComposition create3DENEntity createAgent createCenter createDialog createDiaryLink ' +
        'createDiaryRecord createDiarySubject createDisplay createGearDialog createGroup ' +
        'createGuardedPoint createLocation createMarker createMarkerLocal createMenu createMine ' +
        'createMissionDisplay createMPCampaignDisplay createSimpleObject createSimpleTask createSite ' +
        'createSoundSource createTask createTeam createTrigger createUnit createVehicle createVehicleCrew ' +
        'createVehicleLocal crew ctrlActivate ctrlAddEventHandler ctrlAngle ctrlAutoScrollDelay ' +
        'ctrlAutoScrollRewind ctrlAutoScrollSpeed ctrlChecked ctrlClassName ctrlCommit ctrlCommitted ' +
        'ctrlCreate ctrlDelete ctrlEnable ctrlEnabled ctrlFade ctrlHTMLLoaded ctrlIDC ctrlIDD ' +
        'ctrlMapAnimAdd ctrlMapAnimClear ctrlMapAnimCommit ctrlMapAnimDone ctrlMapCursor ctrlMapMouseOver ' +
        'ctrlMapScale ctrlMapScreenToWorld ctrlMapWorldToScreen ctrlModel ctrlModelDirAndUp ctrlModelScale ' +
        'ctrlParent ctrlParentControlsGroup ctrlPosition ctrlRemoveAllEventHandlers ctrlRemoveEventHandler ' +
        'ctrlScale ctrlSetActiveColor ctrlSetAngle ctrlSetAutoScrollDelay ctrlSetAutoScrollRewind ' +
        'ctrlSetAutoScrollSpeed ctrlSetBackgroundColor ctrlSetChecked ctrlSetEventHandler ctrlSetFade ' +
        'ctrlSetFocus ctrlSetFont ctrlSetFontH1 ctrlSetFontH1B ctrlSetFontH2 ctrlSetFontH2B ctrlSetFontH3 ' +
        'ctrlSetFontH3B ctrlSetFontH4 ctrlSetFontH4B ctrlSetFontH5 ctrlSetFontH5B ctrlSetFontH6 ' +
        'ctrlSetFontH6B ctrlSetFontHeight ctrlSetFontHeightH1 ctrlSetFontHeightH2 ctrlSetFontHeightH3 ' +
        'ctrlSetFontHeightH4 ctrlSetFontHeightH5 ctrlSetFontHeightH6 ctrlSetFontHeightSecondary ' +
        'ctrlSetFontP ctrlSetFontPB ctrlSetFontSecondary ctrlSetForegroundColor ctrlSetModel ' +
        'ctrlSetModelDirAndUp ctrlSetModelScale ctrlSetPosition ctrlSetScale ctrlSetStructuredText ' +
        'ctrlSetText ctrlSetTextColor ctrlSetTooltip ctrlSetTooltipColorBox ctrlSetTooltipColorShade ' +
        'ctrlSetTooltipColorText ctrlShow ctrlShown ctrlText ctrlTextHeight ctrlType ctrlVisible ' +
        'curatorAddons curatorCamera curatorCameraArea curatorCameraAreaCeiling curatorCoef ' +
        'curatorEditableObjects curatorEditingArea curatorEditingAreaType curatorMouseOver curatorPoints ' +
        'curatorRegisteredObjects curatorSelected curatorWaypointCost current3DENOperation currentChannel ' +
        'currentCommand currentMagazine currentMagazineDetail currentMagazineDetailTurret ' +
        'currentMagazineTurret currentMuzzle currentNamespace currentTask currentTasks currentThrowable ' +
        'currentVisionMode currentWaypoint currentWeapon currentWeaponMode currentWeaponTurret ' +
        'currentZeroing cursorObject cursorTarget customChat customRadio cutFadeOut cutObj cutRsc cutText ' +
        'damage date dateToNumber daytime deActivateKey debriefingText debugFSM debugLog deg ' +
        'delete3DENEntities deleteAt deleteCenter deleteCollection deleteEditorObject deleteGroup ' +
        'deleteIdentity deleteLocation deleteMarker deleteMarkerLocal deleteRange deleteResources ' +
        'deleteSite deleteStatus deleteTeam deleteVehicle deleteVehicleCrew deleteWaypoint detach ' +
        'detectedMines diag_activeMissionFSMs diag_activeScripts diag_activeSQFScripts ' +
        'diag_activeSQSScripts diag_captureFrame diag_captureSlowFrame diag_codePerformance diag_drawMode ' +
        'diag_enable diag_enabled diag_fps diag_fpsMin diag_frameNo diag_list diag_log diag_logSlowFrame ' +
        'diag_mergeConfigFile diag_recordTurretLimits diag_tickTime diag_toggle dialog diarySubjectExists ' +
        'didJIP didJIPOwner difficulty difficultyEnabled difficultyEnabledRTD difficultyOption direction ' +
        'directSay disableAI disableCollisionWith disableConversation disableDebriefingStats ' +
        'disableNVGEquipment disableRemoteSensors disableSerialization disableTIEquipment ' +
        'disableUAVConnectability disableUserInput displayAddEventHandler displayCtrl displayNull ' +
        'displayParent displayRemoveAllEventHandlers displayRemoveEventHandler displaySetEventHandler ' +
        'dissolveTeam distance distance2D distanceSqr distributionRegion do3DENAction doArtilleryFire ' +
        'doFire doFollow doFSM doGetOut doMove doorPhase doStop doSuppressiveFire doTarget doWatch ' +
        'drawArrow drawEllipse drawIcon drawIcon3D drawLine drawLine3D drawLink drawLocation drawPolygon ' +
        'drawRectangle driver drop east echo edit3DENMissionAttributes editObject editorSetEventHandler ' +
        'effectiveCommander emptyPositions enableAI enableAIFeature enableAimPrecision enableAttack ' +
        'enableAudioFeature enableCamShake enableCaustics enableChannel enableCollisionWith enableCopilot ' +
        'enableDebriefingStats enableDiagLegend enableEndDialog enableEngineArtillery enableEnvironment ' +
        'enableFatigue enableGunLights enableIRLasers enableMimics enablePersonTurret enableRadio ' +
        'enableReload enableRopeAttach enableSatNormalOnDetail enableSaving enableSentences ' +
        'enableSimulation enableSimulationGlobal enableStamina enableTeamSwitch enableUAVConnectability ' +
        'enableUAVWaypoints enableVehicleCargo endLoadingScreen endMission engineOn enginesIsOnRTD ' +
        'enginesRpmRTD enginesTorqueRTD entities estimatedEndServerTime estimatedTimeLeft ' +
        'evalObjectArgument everyBackpack everyContainer exec execEditorScript execFSM execVM exp ' +
        'expectedDestination exportJIPMessages eyeDirection eyePos face faction fadeMusic fadeRadio ' +
        'fadeSound fadeSpeech failMission fillWeaponsFromPool find findCover findDisplay findEditorObject ' +
        'findEmptyPosition findEmptyPositionReady findNearestEnemy finishMissionInit finite fire ' +
        'fireAtTarget firstBackpack flag flagOwner flagSide flagTexture fleeing floor flyInHeight ' +
        'flyInHeightASL fog fogForecast fogParams forceAddUniform forcedMap forceEnd forceMap forceRespawn ' +
        'forceSpeed forceWalk forceWeaponFire forceWeatherChange forEachMember forEachMemberAgent ' +
        'forEachMemberTeam format formation formationDirection formationLeader formationMembers ' +
        'formationPosition formationTask formatText formLeader freeLook fromEditor fuel fullCrew ' +
        'gearIDCAmmoCount gearSlotAmmoCount gearSlotData get3DENActionState get3DENAttribute get3DENCamera ' +
        'get3DENConnections get3DENEntity get3DENEntityID get3DENGrid get3DENIconsVisible ' +
        'get3DENLayerEntities get3DENLinesVisible get3DENMissionAttribute get3DENMouseOver get3DENSelected ' +
        'getAimingCoef getAllHitPointsDamage getAllOwnedMines getAmmoCargo getAnimAimPrecision ' +
        'getAnimSpeedCoef getArray getArtilleryAmmo getArtilleryComputerSettings getArtilleryETA ' +
        'getAssignedCuratorLogic getAssignedCuratorUnit getBackpackCargo getBleedingRemaining ' +
        'getBurningValue getCameraViewDirection getCargoIndex getCenterOfMass getClientState ' +
        'getClientStateNumber getConnectedUAV getCustomAimingCoef getDammage getDescription getDir ' +
        'getDirVisual getDLCs getEditorCamera getEditorMode getEditorObjectScope getElevationOffset ' +
        'getFatigue getFriend getFSMVariable getFuelCargo getGroupIcon getGroupIconParams getGroupIcons ' +
        'getHideFrom getHit getHitIndex getHitPointDamage getItemCargo getMagazineCargo getMarkerColor ' +
        'getMarkerPos getMarkerSize getMarkerType getMass getMissionConfig getMissionConfigValue ' +
        'getMissionDLCs getMissionLayerEntities getModelInfo getMousePosition getNumber getObjectArgument ' +
        'getObjectChildren getObjectDLC getObjectMaterials getObjectProxy getObjectTextures getObjectType ' +
        'getObjectViewDistance getOxygenRemaining getPersonUsedDLCs getPilotCameraDirection ' +
        'getPilotCameraPosition getPilotCameraRotation getPilotCameraTarget getPlayerChannel ' +
        'getPlayerScores getPlayerUID getPos getPosASL getPosASLVisual getPosASLW getPosATL ' +
        'getPosATLVisual getPosVisual getPosWorld getRelDir getRelPos getRemoteSensorsDisabled ' +
        'getRepairCargo getResolution getShadowDistance getShotParents getSlingLoad getSpeed getStamina ' +
        'getStatValue getSuppression getTerrainHeightASL getText getUnitLoadout getUnitTrait getVariable ' +
        'getVehicleCargo getWeaponCargo getWeaponSway getWPPos glanceAt globalChat globalRadio goggles ' +
        'goto group groupChat groupFromNetId groupIconSelectable groupIconsVisible groupId groupOwner ' +
        'groupRadio groupSelectedUnits groupSelectUnit grpNull gunner gusts halt handgunItems ' +
        'handgunMagazine handgunWeapon handsHit hasInterface hasPilotCamera hasWeapon hcAllGroups ' +
        'hcGroupParams hcLeader hcRemoveAllGroups hcRemoveGroup hcSelected hcSelectGroup hcSetGroup ' +
        'hcShowBar hcShownBar headgear hideBody hideObject hideObjectGlobal hideSelection hint hintC ' +
        'hintCadet hintSilent hmd hostMission htmlLoad HUDMovementLevels humidity image importAllGroups ' +
        'importance in inArea inAreaArray incapacitatedState independent inflame inflamed ' +
        'inGameUISetEventHandler inheritsFrom initAmbientLife inPolygon inputAction inRangeOfArtillery ' +
        'insertEditorObject intersect is3DEN is3DENMultiplayer isAbleToBreathe isAgent isArray ' +
        'isAutoHoverOn isAutonomous isAutotest isBleeding isBurning isClass isCollisionLightOn ' +
        'isCopilotEnabled isDedicated isDLCAvailable isEngineOn isEqualTo isEqualType isEqualTypeAll ' +
        'isEqualTypeAny isEqualTypeArray isEqualTypeParams isFilePatchingEnabled isFlashlightOn ' +
        'isFlatEmpty isForcedWalk isFormationLeader isHidden isInRemainsCollector ' +
        'isInstructorFigureEnabled isIRLaserOn isKeyActive isKindOf isLightOn isLocalized isManualFire ' +
        'isMarkedForCollection isMultiplayer isMultiplayerSolo isNil isNull isNumber isObjectHidden ' +
        'isObjectRTD isOnRoad isPipEnabled isPlayer isRealTime isRemoteExecuted isRemoteExecutedJIP ' +
        'isServer isShowing3DIcons isSprintAllowed isStaminaEnabled isSteamMission ' +
        'isStreamFriendlyUIEnabled isText isTouchingGround isTurnedOut isTutHintsEnabled isUAVConnectable ' +
        'isUAVConnected isUniformAllowed isVehicleCargo isWalking isWeaponDeployed isWeaponRested ' +
        'itemCargo items itemsWithMagazines join joinAs joinAsSilent joinSilent joinString kbAddDatabase ' +
        'kbAddDatabaseTargets kbAddTopic kbHasTopic kbReact kbRemoveTopic kbTell kbWasSaid keyImage ' +
        'keyName knowsAbout land landAt landResult language laserTarget lbAdd lbClear lbColor lbCurSel ' +
        'lbData lbDelete lbIsSelected lbPicture lbSelection lbSetColor lbSetCurSel lbSetData lbSetPicture ' +
        'lbSetPictureColor lbSetPictureColorDisabled lbSetPictureColorSelected lbSetSelectColor ' +
        'lbSetSelectColorRight lbSetSelected lbSetTooltip lbSetValue lbSize lbSort lbSortByValue lbText ' +
        'lbValue leader leaderboardDeInit leaderboardGetRows leaderboardInit leaveVehicle libraryCredits ' +
        'libraryDisclaimers lifeState lightAttachObject lightDetachObject lightIsOn lightnings limitSpeed ' +
        'linearConversion lineBreak lineIntersects lineIntersectsObjs lineIntersectsSurfaces ' +
        'lineIntersectsWith linkItem list listObjects ln lnbAddArray lnbAddColumn lnbAddRow lnbClear ' +
        'lnbColor lnbCurSelRow lnbData lnbDeleteColumn lnbDeleteRow lnbGetColumnsPosition lnbPicture ' +
        'lnbSetColor lnbSetColumnsPos lnbSetCurSelRow lnbSetData lnbSetPicture lnbSetText lnbSetValue ' +
        'lnbSize lnbText lnbValue load loadAbs loadBackpack loadFile loadGame loadIdentity loadMagazine ' +
        'loadOverlay loadStatus loadUniform loadVest local localize locationNull locationPosition lock ' +
        'lockCameraTo lockCargo lockDriver locked lockedCargo lockedDriver lockedTurret lockIdentity ' +
        'lockTurret lockWP log logEntities logNetwork logNetworkTerminate lookAt lookAtPos magazineCargo ' +
        'magazines magazinesAllTurrets magazinesAmmo magazinesAmmoCargo magazinesAmmoFull magazinesDetail ' +
        'magazinesDetailBackpack magazinesDetailUniform magazinesDetailVest magazinesTurret ' +
        'magazineTurretAmmo mapAnimAdd mapAnimClear mapAnimCommit mapAnimDone mapCenterOnCamera ' +
        'mapGridPosition markAsFinishedOnSteam markerAlpha markerBrush markerColor markerDir markerPos ' +
        'markerShape markerSize markerText markerType max members menuAction menuAdd menuChecked menuClear ' +
        'menuCollapse menuData menuDelete menuEnable menuEnabled menuExpand menuHover menuPicture ' +
        'menuSetAction menuSetCheck menuSetData menuSetPicture menuSetValue menuShortcut menuShortcutText ' +
        'menuSize menuSort menuText menuURL menuValue min mineActive mineDetectedBy missionConfigFile ' +
        'missionDifficulty missionName missionNamespace missionStart missionVersion mod modelToWorld ' +
        'modelToWorldVisual modParams moonIntensity moonPhase morale move move3DENCamera moveInAny ' +
        'moveInCargo moveInCommander moveInDriver moveInGunner moveInTurret moveObjectToEnd moveOut ' +
        'moveTime moveTo moveToCompleted moveToFailed musicVolume name nameSound nearEntities ' +
        'nearestBuilding nearestLocation nearestLocations nearestLocationWithDubbing nearestObject ' +
        'nearestObjects nearestTerrainObjects nearObjects nearObjectsReady nearRoads nearSupplies ' +
        'nearTargets needReload netId netObjNull newOverlay nextMenuItemIndex nextWeatherChange nMenuItems ' +
        'not numberToDate objectCurators objectFromNetId objectParent objNull objStatus onBriefingGroup ' +
        'onBriefingNotes onBriefingPlan onBriefingTeamSwitch onCommandModeChanged onDoubleClick ' +
        'onEachFrame onGroupIconClick onGroupIconOverEnter onGroupIconOverLeave onHCGroupSelectionChanged ' +
        'onMapSingleClick onPlayerConnected onPlayerDisconnected onPreloadFinished onPreloadStarted ' +
        'onShowNewObject onTeamSwitch openCuratorInterface openDLCPage openMap openYoutubeVideo opfor or ' +
        'orderGetIn overcast overcastForecast owner param params parseNumber parseText parsingNamespace ' +
        'particlesQuality pi pickWeaponPool pitch pixelGrid pixelGridBase pixelGridNoUIScale pixelH pixelW ' +
        'playableSlotsNumber playableUnits playAction playActionNow player playerRespawnTime playerSide ' +
        'playersNumber playGesture playMission playMove playMoveNow playMusic playScriptedMission ' +
        'playSound playSound3D position positionCameraToWorld posScreenToWorld posWorldToScreen ' +
        'ppEffectAdjust ppEffectCommit ppEffectCommitted ppEffectCreate ppEffectDestroy ppEffectEnable ' +
        'ppEffectEnabled ppEffectForceInNVG precision preloadCamera preloadObject preloadSound ' +
        'preloadTitleObj preloadTitleRsc preprocessFile preprocessFileLineNumbers primaryWeapon ' +
        'primaryWeaponItems primaryWeaponMagazine priority private processDiaryLink productVersion ' +
        'profileName profileNamespace profileNameSteam progressLoadingScreen progressPosition ' +
        'progressSetPosition publicVariable publicVariableClient publicVariableServer pushBack ' +
        'pushBackUnique putWeaponPool queryItemsPool queryMagazinePool queryWeaponPool rad radioChannelAdd ' +
        'radioChannelCreate radioChannelRemove radioChannelSetCallSign radioChannelSetLabel radioVolume ' +
        'rain rainbow random rank rankId rating rectangular registeredTasks registerTask reload ' +
        'reloadEnabled remoteControl remoteExec remoteExecCall remove3DENConnection remove3DENEventHandler ' +
        'remove3DENLayer removeAction removeAll3DENEventHandlers removeAllActions removeAllAssignedItems ' +
        'removeAllContainers removeAllCuratorAddons removeAllCuratorCameraAreas ' +
        'removeAllCuratorEditingAreas removeAllEventHandlers removeAllHandgunItems removeAllItems ' +
        'removeAllItemsWithMagazines removeAllMissionEventHandlers removeAllMPEventHandlers ' +
        'removeAllMusicEventHandlers removeAllOwnedMines removeAllPrimaryWeaponItems removeAllWeapons ' +
        'removeBackpack removeBackpackGlobal removeCuratorAddons removeCuratorCameraArea ' +
        'removeCuratorEditableObjects removeCuratorEditingArea removeDrawIcon removeDrawLinks ' +
        'removeEventHandler removeFromRemainsCollector removeGoggles removeGroupIcon removeHandgunItem ' +
        'removeHeadgear removeItem removeItemFromBackpack removeItemFromUniform removeItemFromVest ' +
        'removeItems removeMagazine removeMagazineGlobal removeMagazines removeMagazinesTurret ' +
        'removeMagazineTurret removeMenuItem removeMissionEventHandler removeMPEventHandler ' +
        'removeMusicEventHandler removeOwnedMine removePrimaryWeaponItem removeSecondaryWeaponItem ' +
        'removeSimpleTask removeSwitchableUnit removeTeamMember removeUniform removeVest removeWeapon ' +
        'removeWeaponGlobal removeWeaponTurret requiredVersion resetCamShake resetSubgroupDirection ' +
        'resistance resize resources respawnVehicle restartEditorCamera reveal revealMine reverse ' +
        'reversedMouseY roadAt roadsConnectedTo roleDescription ropeAttachedObjects ropeAttachedTo ' +
        'ropeAttachEnabled ropeAttachTo ropeCreate ropeCut ropeDestroy ropeDetach ropeEndPosition ' +
        'ropeLength ropes ropeUnwind ropeUnwound rotorsForcesRTD rotorsRpmRTD round runInitScript ' +
        'safeZoneH safeZoneW safeZoneWAbs safeZoneX safeZoneXAbs safeZoneY save3DENInventory saveGame ' +
        'saveIdentity saveJoysticks saveOverlay saveProfileNamespace saveStatus saveVar savingEnabled say ' +
        'say2D say3D scopeName score scoreSide screenshot screenToWorld scriptDone scriptName scriptNull ' +
        'scudState secondaryWeapon secondaryWeaponItems secondaryWeaponMagazine select selectBestPlaces ' +
        'selectDiarySubject selectedEditorObjects selectEditorObject selectionNames selectionPosition ' +
        'selectLeader selectMax selectMin selectNoPlayer selectPlayer selectRandom selectWeapon ' +
        'selectWeaponTurret sendAUMessage sendSimpleCommand sendTask sendTaskResult sendUDPMessage ' +
        'serverCommand serverCommandAvailable serverCommandExecutable serverName serverTime set ' +
        'set3DENAttribute set3DENAttributes set3DENGrid set3DENIconsVisible set3DENLayer ' +
        'set3DENLinesVisible set3DENMissionAttributes set3DENModelsVisible set3DENObjectType ' +
        'set3DENSelected setAccTime setAirportSide setAmmo setAmmoCargo setAnimSpeedCoef setAperture ' +
        'setApertureNew setArmoryPoints setAttributes setAutonomous setBehaviour setBleedingRemaining ' +
        'setCameraInterest setCamShakeDefParams setCamShakeParams setCamUseTi setCaptive setCenterOfMass ' +
        'setCollisionLight setCombatMode setCompassOscillation setCuratorCameraAreaCeiling setCuratorCoef ' +
        'setCuratorEditingAreaType setCuratorWaypointCost setCurrentChannel setCurrentTask ' +
        'setCurrentWaypoint setCustomAimCoef setDamage setDammage setDate setDebriefingText ' +
        'setDefaultCamera setDestination setDetailMapBlendPars setDir setDirection setDrawIcon ' +
        'setDropInterval setEditorMode setEditorObjectScope setEffectCondition setFace setFaceAnimation ' +
        'setFatigue setFlagOwner setFlagSide setFlagTexture setFog setFormation setFormationTask ' +
        'setFormDir setFriend setFromEditor setFSMVariable setFuel setFuelCargo setGroupIcon ' +
        'setGroupIconParams setGroupIconsSelectable setGroupIconsVisible setGroupId setGroupIdGlobal ' +
        'setGroupOwner setGusts setHideBehind setHit setHitIndex setHitPointDamage setHorizonParallaxCoef ' +
        'setHUDMovementLevels setIdentity setImportance setLeader setLightAmbient setLightAttenuation ' +
        'setLightBrightness setLightColor setLightDayLight setLightFlareMaxDistance setLightFlareSize ' +
        'setLightIntensity setLightnings setLightUseFlare setLocalWindParams setMagazineTurretAmmo ' +
        'setMarkerAlpha setMarkerAlphaLocal setMarkerBrush setMarkerBrushLocal setMarkerColor ' +
        'setMarkerColorLocal setMarkerDir setMarkerDirLocal setMarkerPos setMarkerPosLocal setMarkerShape ' +
        'setMarkerShapeLocal setMarkerSize setMarkerSizeLocal setMarkerText setMarkerTextLocal ' +
        'setMarkerType setMarkerTypeLocal setMass setMimic setMousePosition setMusicEffect ' +
        'setMusicEventHandler setName setNameSound setObjectArguments setObjectMaterial ' +
        'setObjectMaterialGlobal setObjectProxy setObjectTexture setObjectTextureGlobal ' +
        'setObjectViewDistance setOvercast setOwner setOxygenRemaining setParticleCircle setParticleClass ' +
        'setParticleFire setParticleParams setParticleRandom setPilotCameraDirection ' +
        'setPilotCameraRotation setPilotCameraTarget setPilotLight setPiPEffect setPitch setPlayable ' +
        'setPlayerRespawnTime setPos setPosASL setPosASL2 setPosASLW setPosATL setPosition setPosWorld ' +
        'setRadioMsg setRain setRainbow setRandomLip setRank setRectangular setRepairCargo ' +
        'setShadowDistance setShotParents setSide setSimpleTaskAlwaysVisible setSimpleTaskCustomData ' +
        'setSimpleTaskDescription setSimpleTaskDestination setSimpleTaskTarget setSimpleTaskType ' +
        'setSimulWeatherLayers setSize setSkill setSlingLoad setSoundEffect setSpeaker setSpeech ' +
        'setSpeedMode setStamina setStaminaScheme setStatValue setSuppression setSystemOfUnits ' +
        'setTargetAge setTaskResult setTaskState setTerrainGrid setText setTimeMultiplier setTitleEffect ' +
        'setTriggerActivation setTriggerArea setTriggerStatements setTriggerText setTriggerTimeout ' +
        'setTriggerType setType setUnconscious setUnitAbility setUnitLoadout setUnitPos setUnitPosWeak ' +
        'setUnitRank setUnitRecoilCoefficient setUnitTrait setUnloadInCombat setUserActionText setVariable ' +
        'setVectorDir setVectorDirAndUp setVectorUp setVehicleAmmo setVehicleAmmoDef setVehicleArmor ' +
        'setVehicleCargo setVehicleId setVehicleLock setVehiclePosition setVehicleTiPars setVehicleVarName ' +
        'setVelocity setVelocityTransformation setViewDistance setVisibleIfTreeCollapsed setWaves ' +
        'setWaypointBehaviour setWaypointCombatMode setWaypointCompletionRadius setWaypointDescription ' +
        'setWaypointForceBehaviour setWaypointFormation setWaypointHousePosition setWaypointLoiterRadius ' +
        'setWaypointLoiterType setWaypointName setWaypointPosition setWaypointScript setWaypointSpeed ' +
        'setWaypointStatements setWaypointTimeout setWaypointType setWaypointVisible ' +
        'setWeaponReloadingTime setWind setWindDir setWindForce setWindStr setWPPos show3DIcons showChat ' +
        'showCinemaBorder showCommandingMenu showCompass showCuratorCompass showGPS showHUD showLegend ' +
        'showMap shownArtilleryComputer shownChat shownCompass shownCuratorCompass showNewEditorObject ' +
        'shownGPS shownHUD shownMap shownPad shownRadio shownScoretable shownUAVFeed shownWarrant ' +
        'shownWatch showPad showRadio showScoretable showSubtitles showUAVFeed showWarrant showWatch ' +
        'showWaypoint showWaypoints side sideAmbientLife sideChat sideEmpty sideEnemy sideFriendly ' +
        'sideLogic sideRadio sideUnknown simpleTasks simulationEnabled simulCloudDensity ' +
        'simulCloudOcclusion simulInClouds simulWeatherSync sin size sizeOf skill skillFinal skipTime ' +
        'sleep sliderPosition sliderRange sliderSetPosition sliderSetRange sliderSetSpeed sliderSpeed ' +
        'slingLoadAssistantShown soldierMagazines someAmmo sort soundVolume spawn speaker speed speedMode ' +
        'splitString sqrt squadParams stance startLoadingScreen step stop stopEngineRTD stopped str ' +
        'sunOrMoon supportInfo suppressFor surfaceIsWater surfaceNormal surfaceType swimInDepth ' +
        'switchableUnits switchAction switchCamera switchGesture switchLight switchMove ' +
        'synchronizedObjects synchronizedTriggers synchronizedWaypoints synchronizeObjectsAdd ' +
        'synchronizeObjectsRemove synchronizeTrigger synchronizeWaypoint systemChat systemOfUnits tan ' +
        'targetKnowledge targetsAggregate targetsQuery taskAlwaysVisible taskChildren taskCompleted ' +
        'taskCustomData taskDescription taskDestination taskHint taskMarkerOffset taskNull taskParent ' +
        'taskResult taskState taskType teamMember teamMemberNull teamName teams teamSwitch ' +
        'teamSwitchEnabled teamType terminate terrainIntersect terrainIntersectASL text textLog ' +
        'textLogFormat tg time timeMultiplier titleCut titleFadeOut titleObj titleRsc titleText toArray ' +
        'toFixed toLower toString toUpper triggerActivated triggerActivation triggerArea ' +
        'triggerAttachedVehicle triggerAttachObject triggerAttachVehicle triggerStatements triggerText ' +
        'triggerTimeout triggerTimeoutCurrent triggerType turretLocal turretOwner turretUnit tvAdd tvClear ' +
        'tvCollapse tvCount tvCurSel tvData tvDelete tvExpand tvPicture tvSetCurSel tvSetData tvSetPicture ' +
        'tvSetPictureColor tvSetPictureColorDisabled tvSetPictureColorSelected tvSetPictureRight ' +
        'tvSetPictureRightColor tvSetPictureRightColorDisabled tvSetPictureRightColorSelected tvSetText ' +
        'tvSetTooltip tvSetValue tvSort tvSortByValue tvText tvTooltip tvValue type typeName typeOf ' +
        'UAVControl uiNamespace uiSleep unassignCurator unassignItem unassignTeam unassignVehicle ' +
        'underwater uniform uniformContainer uniformItems uniformMagazines unitAddons unitAimPosition ' +
        'unitAimPositionVisual unitBackpack unitIsUAV unitPos unitReady unitRecoilCoefficient units ' +
        'unitsBelowHeight unlinkItem unlockAchievement unregisterTask updateDrawIcon updateMenuItem ' +
        'updateObjectTree useAISteeringComponent useAudioTimeForMoves vectorAdd vectorCos ' +
        'vectorCrossProduct vectorDiff vectorDir vectorDirVisual vectorDistance vectorDistanceSqr ' +
        'vectorDotProduct vectorFromTo vectorMagnitude vectorMagnitudeSqr vectorMultiply vectorNormalized ' +
        'vectorUp vectorUpVisual vehicle vehicleCargoEnabled vehicleChat vehicleRadio vehicles ' +
        'vehicleVarName velocity velocityModelSpace verifySignature vest vestContainer vestItems ' +
        'vestMagazines viewDistance visibleCompass visibleGPS visibleMap visiblePosition ' +
        'visiblePositionASL visibleScoretable visibleWatch waves waypointAttachedObject ' +
        'waypointAttachedVehicle waypointAttachObject waypointAttachVehicle waypointBehaviour ' +
        'waypointCombatMode waypointCompletionRadius waypointDescription waypointForceBehaviour ' +
        'waypointFormation waypointHousePosition waypointLoiterRadius waypointLoiterType waypointName ' +
        'waypointPosition waypoints waypointScript waypointsEnabledUAV waypointShow waypointSpeed ' +
        'waypointStatements waypointTimeout waypointTimeoutCurrent waypointType waypointVisible ' +
        'weaponAccessories weaponAccessoriesCargo weaponCargo weaponDirection weaponInertia weaponLowered ' +
        'weapons weaponsItems weaponsItemsCargo weaponState weaponsTurret weightRTD west WFSideText wind',
      literal:
        'true false nil'
    },
    contains: [
      hljs.C_LINE_COMMENT_MODE,
      hljs.C_BLOCK_COMMENT_MODE,
      hljs.NUMBER_MODE,
      VARIABLE,
      FUNCTION,
      STRINGS,
      CPP.preprocessor
    ],
    illegal: /#/
  };
};

/***/ }),
/* 269 */
/***/ (function(module, exports) {

module.exports = function(hljs) {
  var COMMENT_MODE = hljs.COMMENT('--', '$');
  return {
    case_insensitive: true,
    illegal: /[<>{}*#]/,
    contains: [
      {
        beginKeywords:
          'begin end start commit rollback savepoint lock alter create drop rename call ' +
          'delete do handler insert load replace select truncate update set show pragma grant ' +
          'merge describe use explain help declare prepare execute deallocate release ' +
          'unlock purge reset change stop analyze cache flush optimize repair kill ' +
          'install uninstall checksum restore check backup revoke comment',
        end: /;/, endsWithParent: true,
        lexemes: /[\w\.]+/,
        keywords: {
          keyword:
            'abort abs absolute acc acce accep accept access accessed accessible account acos action activate add ' +
            'addtime admin administer advanced advise aes_decrypt aes_encrypt after agent aggregate ali alia alias ' +
            'allocate allow alter always analyze ancillary and any anydata anydataset anyschema anytype apply ' +
            'archive archived archivelog are as asc ascii asin assembly assertion associate asynchronous at atan ' +
            'atn2 attr attri attrib attribu attribut attribute attributes audit authenticated authentication authid ' +
            'authors auto autoallocate autodblink autoextend automatic availability avg backup badfile basicfile ' +
            'before begin beginning benchmark between bfile bfile_base big bigfile bin binary_double binary_float ' +
            'binlog bit_and bit_count bit_length bit_or bit_xor bitmap blob_base block blocksize body both bound ' +
            'buffer_cache buffer_pool build bulk by byte byteordermark bytes cache caching call calling cancel ' +
            'capacity cascade cascaded case cast catalog category ceil ceiling chain change changed char_base ' +
            'char_length character_length characters characterset charindex charset charsetform charsetid check ' +
            'checksum checksum_agg child choose chr chunk class cleanup clear client clob clob_base clone close ' +
            'cluster_id cluster_probability cluster_set clustering coalesce coercibility col collate collation ' +
            'collect colu colum column column_value columns columns_updated comment commit compact compatibility ' +
            'compiled complete composite_limit compound compress compute concat concat_ws concurrent confirm conn ' +
            'connec connect connect_by_iscycle connect_by_isleaf connect_by_root connect_time connection ' +
            'consider consistent constant constraint constraints constructor container content contents context ' +
            'contributors controlfile conv convert convert_tz corr corr_k corr_s corresponding corruption cos cost ' +
            'count count_big counted covar_pop covar_samp cpu_per_call cpu_per_session crc32 create creation ' +
            'critical cross cube cume_dist curdate current current_date current_time current_timestamp current_user ' +
            'cursor curtime customdatum cycle data database databases datafile datafiles datalength date_add ' +
            'date_cache date_format date_sub dateadd datediff datefromparts datename datepart datetime2fromparts ' +
            'day day_to_second dayname dayofmonth dayofweek dayofyear days db_role_change dbtimezone ddl deallocate ' +
            'declare decode decompose decrement decrypt deduplicate def defa defau defaul default defaults ' +
            'deferred defi defin define degrees delayed delegate delete delete_all delimited demand dense_rank ' +
            'depth dequeue des_decrypt des_encrypt des_key_file desc descr descri describ describe descriptor ' +
            'deterministic diagnostics difference dimension direct_load directory disable disable_all ' +
            'disallow disassociate discardfile disconnect diskgroup distinct distinctrow distribute distributed div ' +
            'do document domain dotnet double downgrade drop dumpfile duplicate duration each edition editionable ' +
            'editions element ellipsis else elsif elt empty enable enable_all enclosed encode encoding encrypt ' +
            'end end-exec endian enforced engine engines enqueue enterprise entityescaping eomonth error errors ' +
            'escaped evalname evaluate event eventdata events except exception exceptions exchange exclude excluding ' +
            'execu execut execute exempt exists exit exp expire explain export export_set extended extent external ' +
            'external_1 external_2 externally extract failed failed_login_attempts failover failure far fast ' +
            'feature_set feature_value fetch field fields file file_name_convert filesystem_like_logging final ' +
            'finish first first_value fixed flash_cache flashback floor flush following follows for forall force ' +
            'form forma format found found_rows freelist freelists freepools fresh from from_base64 from_days ' +
            'ftp full function general generated get get_format get_lock getdate getutcdate global global_name ' +
            'globally go goto grant grants greatest group group_concat group_id grouping grouping_id groups ' +
            'gtid_subtract guarantee guard handler hash hashkeys having hea head headi headin heading heap help hex ' +
            'hierarchy high high_priority hosts hour http id ident_current ident_incr ident_seed identified ' +
            'identity idle_time if ifnull ignore iif ilike ilm immediate import in include including increment ' +
            'index indexes indexing indextype indicator indices inet6_aton inet6_ntoa inet_aton inet_ntoa infile ' +
            'initial initialized initially initrans inmemory inner innodb input insert install instance instantiable ' +
            'instr interface interleaved intersect into invalidate invisible is is_free_lock is_ipv4 is_ipv4_compat ' +
            'is_not is_not_null is_used_lock isdate isnull isolation iterate java join json json_exists ' +
            'keep keep_duplicates key keys kill language large last last_day last_insert_id last_value lax lcase ' +
            'lead leading least leaves left len lenght length less level levels library like like2 like4 likec limit ' +
            'lines link list listagg little ln load load_file lob lobs local localtime localtimestamp locate ' +
            'locator lock locked log log10 log2 logfile logfiles logging logical logical_reads_per_call ' +
            'logoff logon logs long loop low low_priority lower lpad lrtrim ltrim main make_set makedate maketime ' +
            'managed management manual map mapping mask master master_pos_wait match matched materialized max ' +
            'maxextents maximize maxinstances maxlen maxlogfiles maxloghistory maxlogmembers maxsize maxtrans ' +
            'md5 measures median medium member memcompress memory merge microsecond mid migration min minextents ' +
            'minimum mining minus minute minvalue missing mod mode model modification modify module monitoring month ' +
            'months mount move movement multiset mutex name name_const names nan national native natural nav nchar ' +
            'nclob nested never new newline next nextval no no_write_to_binlog noarchivelog noaudit nobadfile ' +
            'nocheck nocompress nocopy nocycle nodelay nodiscardfile noentityescaping noguarantee nokeep nologfile ' +
            'nomapping nomaxvalue nominimize nominvalue nomonitoring none noneditionable nonschema noorder ' +
            'nopr nopro noprom nopromp noprompt norely noresetlogs noreverse normal norowdependencies noschemacheck ' +
            'noswitch not nothing notice notrim novalidate now nowait nth_value nullif nulls num numb numbe ' +
            'nvarchar nvarchar2 object ocicoll ocidate ocidatetime ociduration ociinterval ociloblocator ocinumber ' +
            'ociref ocirefcursor ocirowid ocistring ocitype oct octet_length of off offline offset oid oidindex old ' +
            'on online only opaque open operations operator optimal optimize option optionally or oracle oracle_date ' +
            'oradata ord ordaudio orddicom orddoc order ordimage ordinality ordvideo organization orlany orlvary ' +
            'out outer outfile outline output over overflow overriding package pad parallel parallel_enable ' +
            'parameters parent parse partial partition partitions pascal passing password password_grace_time ' +
            'password_lock_time password_reuse_max password_reuse_time password_verify_function patch path patindex ' +
            'pctincrease pctthreshold pctused pctversion percent percent_rank percentile_cont percentile_disc ' +
            'performance period period_add period_diff permanent physical pi pipe pipelined pivot pluggable plugin ' +
            'policy position post_transaction pow power pragma prebuilt precedes preceding precision prediction ' +
            'prediction_cost prediction_details prediction_probability prediction_set prepare present preserve ' +
            'prior priority private private_sga privileges procedural procedure procedure_analyze processlist ' +
            'profiles project prompt protection public publishingservername purge quarter query quick quiesce quota ' +
            'quotename radians raise rand range rank raw read reads readsize rebuild record records ' +
            'recover recovery recursive recycle redo reduced ref reference referenced references referencing refresh ' +
            'regexp_like register regr_avgx regr_avgy regr_count regr_intercept regr_r2 regr_slope regr_sxx regr_sxy ' +
            'reject rekey relational relative relaylog release release_lock relies_on relocate rely rem remainder rename ' +
            'repair repeat replace replicate replication required reset resetlogs resize resource respect restore ' +
            'restricted result result_cache resumable resume retention return returning returns reuse reverse revoke ' +
            'right rlike role roles rollback rolling rollup round row row_count rowdependencies rowid rownum rows ' +
            'rtrim rules safe salt sample save savepoint sb1 sb2 sb4 scan schema schemacheck scn scope scroll ' +
            'sdo_georaster sdo_topo_geometry search sec_to_time second section securefile security seed segment select ' +
            'self sequence sequential serializable server servererror session session_user sessions_per_user set ' +
            'sets settings sha sha1 sha2 share shared shared_pool short show shrink shutdown si_averagecolor ' +
            'si_colorhistogram si_featurelist si_positionalcolor si_stillimage si_texture siblings sid sign sin ' +
            'size size_t sizes skip slave sleep smalldatetimefromparts smallfile snapshot some soname sort soundex ' +
            'source space sparse spfile split sql sql_big_result sql_buffer_result sql_cache sql_calc_found_rows ' +
            'sql_small_result sql_variant_property sqlcode sqldata sqlerror sqlname sqlstate sqrt square standalone ' +
            'standby start starting startup statement static statistics stats_binomial_test stats_crosstab ' +
            'stats_ks_test stats_mode stats_mw_test stats_one_way_anova stats_t_test_ stats_t_test_indep ' +
            'stats_t_test_one stats_t_test_paired stats_wsr_test status std stddev stddev_pop stddev_samp stdev ' +
            'stop storage store stored str str_to_date straight_join strcmp strict string struct stuff style subdate ' +
            'subpartition subpartitions substitutable substr substring subtime subtring_index subtype success sum ' +
            'suspend switch switchoffset switchover sync synchronous synonym sys sys_xmlagg sysasm sysaux sysdate ' +
            'sysdatetimeoffset sysdba sysoper system system_user sysutcdatetime table tables tablespace tan tdo ' +
            'template temporary terminated tertiary_weights test than then thread through tier ties time time_format ' +
            'time_zone timediff timefromparts timeout timestamp timestampadd timestampdiff timezone_abbr ' +
            'timezone_minute timezone_region to to_base64 to_date to_days to_seconds todatetimeoffset trace tracking ' +
            'transaction transactional translate translation treat trigger trigger_nestlevel triggers trim truncate ' +
            'try_cast try_convert try_parse type ub1 ub2 ub4 ucase unarchived unbounded uncompress ' +
            'under undo unhex unicode uniform uninstall union unique unix_timestamp unknown unlimited unlock unpivot ' +
            'unrecoverable unsafe unsigned until untrusted unusable unused update updated upgrade upped upper upsert ' +
            'url urowid usable usage use use_stored_outlines user user_data user_resources users using utc_date ' +
            'utc_timestamp uuid uuid_short validate validate_password_strength validation valist value values var ' +
            'var_samp varcharc vari varia variab variabl variable variables variance varp varraw varrawc varray ' +
            'verify version versions view virtual visible void wait wallet warning warnings week weekday weekofyear ' +
            'wellformed when whene whenev wheneve whenever where while whitespace with within without work wrapped ' +
            'xdb xml xmlagg xmlattributes xmlcast xmlcolattval xmlelement xmlexists xmlforest xmlindex xmlnamespaces ' +
            'xmlpi xmlquery xmlroot xmlschema xmlserialize xmltable xmltype xor year year_to_month years yearweek',
          literal:
            'true false null',
          built_in:
            'array bigint binary bit blob boolean char character date dec decimal float int int8 integer interval number ' +
            'numeric real record serial serial8 smallint text varchar varying void'
        },
        contains: [
          {
            className: 'string',
            begin: '\'', end: '\'',
            contains: [hljs.BACKSLASH_ESCAPE, {begin: '\'\''}]
          },
          {
            className: 'string',
            begin: '"', end: '"',
            contains: [hljs.BACKSLASH_ESCAPE, {begin: '""'}]
          },
          {
            className: 'string',
            begin: '`', end: '`',
            contains: [hljs.BACKSLASH_ESCAPE]
          },
          hljs.C_NUMBER_MODE,
          hljs.C_BLOCK_COMMENT_MODE,
          COMMENT_MODE
        ]
      },
      hljs.C_BLOCK_COMMENT_MODE,
      COMMENT_MODE
    ]
  };
};

/***/ }),
/* 270 */
/***/ (function(module, exports) {

module.exports = function(hljs) {
  return {
    contains: [
      hljs.HASH_COMMENT_MODE,
      hljs.C_LINE_COMMENT_MODE,
      hljs.C_BLOCK_COMMENT_MODE,
      {
        begin: hljs.UNDERSCORE_IDENT_RE,
        lexemes: hljs.UNDERSCORE_IDENT_RE,
        keywords: {
          // Stan's keywords
          name:
            'for in while repeat until if then else',
          // Stan's probablity distributions (less beta and gamma, as commonly
          // used for parameter names). So far, _log and _rng variants are not
          // included
          symbol:
            'bernoulli bernoulli_logit binomial binomial_logit '               +
            'beta_binomial hypergeometric categorical categorical_logit '      +
            'ordered_logistic neg_binomial neg_binomial_2 '                    +
            'neg_binomial_2_log poisson poisson_log multinomial normal '       +
            'exp_mod_normal skew_normal student_t cauchy double_exponential '  +
            'logistic gumbel lognormal chi_square inv_chi_square '             +
            'scaled_inv_chi_square exponential inv_gamma weibull frechet '     +
            'rayleigh wiener pareto pareto_type_2 von_mises uniform '          +
            'multi_normal multi_normal_prec multi_normal_cholesky multi_gp '   +
            'multi_gp_cholesky multi_student_t gaussian_dlm_obs dirichlet '    +
            'lkj_corr lkj_corr_cholesky wishart inv_wishart',
          // Stan's data types
          'selector-tag':
            'int real vector simplex unit_vector ordered positive_ordered '    +
            'row_vector matrix cholesky_factor_corr cholesky_factor_cov '      +
            'corr_matrix cov_matrix',
          // Stan's model blocks
          title:
            'functions model data parameters quantities transformed '          +
            'generated',
          literal:
            'true false'
        },
        relevance: 0
      },
      // The below is all taken from the R language definition
      {
        // hex value
        className: 'number',
        begin: "0[xX][0-9a-fA-F]+[Li]?\\b",
        relevance: 0
      },
      {
        // hex value
        className: 'number',
        begin: "0[xX][0-9a-fA-F]+[Li]?\\b",
        relevance: 0
      },
      {
        // explicit integer
        className: 'number',
        begin: "\\d+(?:[eE][+\\-]?\\d*)?L\\b",
        relevance: 0
      },
      {
        // number with trailing decimal
        className: 'number',
        begin: "\\d+\\.(?!\\d)(?:i\\b)?",
        relevance: 0
      },
      {
        // number
        className: 'number',
        begin: "\\d+(?:\\.\\d*)?(?:[eE][+\\-]?\\d*)?i?\\b",
        relevance: 0
      },
      {
        // number with leading decimal
        className: 'number',
        begin: "\\.\\d+(?:[eE][+\\-]?\\d*)?i?\\b",
        relevance: 0
      }
    ]
  };
};

/***/ }),
/* 271 */
/***/ (function(module, exports) {

module.exports = function(hljs) {
  return {
    aliases: ['do', 'ado'],
    case_insensitive: true,
    keywords: 'if else in foreach for forv forva forval forvalu forvalue forvalues by bys bysort xi quietly qui capture about ac ac_7 acprplot acprplot_7 adjust ado adopath adoupdate alpha ameans an ano anov anova anova_estat anova_terms anovadef aorder ap app appe appen append arch arch_dr arch_estat arch_p archlm areg areg_p args arima arima_dr arima_estat arima_p as asmprobit asmprobit_estat asmprobit_lf asmprobit_mfx__dlg asmprobit_p ass asse asser assert avplot avplot_7 avplots avplots_7 bcskew0 bgodfrey binreg bip0_lf biplot bipp_lf bipr_lf bipr_p biprobit bitest bitesti bitowt blogit bmemsize boot bootsamp bootstrap bootstrap_8 boxco_l boxco_p boxcox boxcox_6 boxcox_p bprobit br break brier bro brow brows browse brr brrstat bs bs_7 bsampl_w bsample bsample_7 bsqreg bstat bstat_7 bstat_8 bstrap bstrap_7 ca ca_estat ca_p cabiplot camat canon canon_8 canon_8_p canon_estat canon_p cap caprojection capt captu captur capture cat cc cchart cchart_7 cci cd censobs_table centile cf char chdir checkdlgfiles checkestimationsample checkhlpfiles checksum chelp ci cii cl class classutil clear cli clis clist clo clog clog_lf clog_p clogi clogi_sw clogit clogit_lf clogit_p clogitp clogl_sw cloglog clonevar clslistarray cluster cluster_measures cluster_stop cluster_tree cluster_tree_8 clustermat cmdlog cnr cnre cnreg cnreg_p cnreg_sw cnsreg codebook collaps4 collapse colormult_nb colormult_nw compare compress conf confi confir confirm conren cons const constr constra constrai constrain constraint continue contract copy copyright copysource cor corc corr corr2data corr_anti corr_kmo corr_smc corre correl correla correlat correlate corrgram cou coun count cox cox_p cox_sw coxbase coxhaz coxvar cprplot cprplot_7 crc cret cretu cretur creturn cross cs cscript cscript_log csi ct ct_is ctset ctst_5 ctst_st cttost cumsp cumsp_7 cumul cusum cusum_7 cutil d|0 datasig datasign datasigna datasignat datasignatu datasignatur datasignature datetof db dbeta de dec deco decod decode deff des desc descr descri describ describe destring dfbeta dfgls dfuller di di_g dir dirstats dis discard disp disp_res disp_s displ displa display distinct do doe doed doedi doedit dotplot dotplot_7 dprobit drawnorm drop ds ds_util dstdize duplicates durbina dwstat dydx e|0 ed edi edit egen eivreg emdef en enc enco encod encode eq erase ereg ereg_lf ereg_p ereg_sw ereghet ereghet_glf ereghet_glf_sh ereghet_gp ereghet_ilf ereghet_ilf_sh ereghet_ip eret eretu eretur ereturn err erro error est est_cfexist est_cfname est_clickable est_expand est_hold est_table est_unhold est_unholdok estat estat_default estat_summ estat_vce_only esti estimates etodow etof etomdy ex exi exit expand expandcl fac fact facto factor factor_estat factor_p factor_pca_rotated factor_rotate factormat fcast fcast_compute fcast_graph fdades fdadesc fdadescr fdadescri fdadescrib fdadescribe fdasav fdasave fdause fh_st file open file read file close file filefilter fillin find_hlp_file findfile findit findit_7 fit fl fli flis flist for5_0 form forma format fpredict frac_154 frac_adj frac_chk frac_cox frac_ddp frac_dis frac_dv frac_in frac_mun frac_pp frac_pq frac_pv frac_wgt frac_xo fracgen fracplot fracplot_7 fracpoly fracpred fron_ex fron_hn fron_p fron_tn fron_tn2 frontier ftodate ftoe ftomdy ftowdate g|0 gamhet_glf gamhet_gp gamhet_ilf gamhet_ip gamma gamma_d2 gamma_p gamma_sw gammahet gdi_hexagon gdi_spokes ge gen gene gener genera generat generate genrank genstd genvmean gettoken gl gladder gladder_7 glim_l01 glim_l02 glim_l03 glim_l04 glim_l05 glim_l06 glim_l07 glim_l08 glim_l09 glim_l10 glim_l11 glim_l12 glim_lf glim_mu glim_nw1 glim_nw2 glim_nw3 glim_p glim_v1 glim_v2 glim_v3 glim_v4 glim_v5 glim_v6 glim_v7 glm glm_6 glm_p glm_sw glmpred glo glob globa global glogit glogit_8 glogit_p gmeans gnbre_lf gnbreg gnbreg_5 gnbreg_p gomp_lf gompe_sw gomper_p gompertz gompertzhet gomphet_glf gomphet_glf_sh gomphet_gp gomphet_ilf gomphet_ilf_sh gomphet_ip gphdot gphpen gphprint gprefs gprobi_p gprobit gprobit_8 gr gr7 gr_copy gr_current gr_db gr_describe gr_dir gr_draw gr_draw_replay gr_drop gr_edit gr_editviewopts gr_example gr_example2 gr_export gr_print gr_qscheme gr_query gr_read gr_rename gr_replay gr_save gr_set gr_setscheme gr_table gr_undo gr_use graph graph7 grebar greigen greigen_7 greigen_8 grmeanby grmeanby_7 gs_fileinfo gs_filetype gs_graphinfo gs_stat gsort gwood h|0 hadimvo hareg hausman haver he heck_d2 heckma_p heckman heckp_lf heckpr_p heckprob hel help hereg hetpr_lf hetpr_p hetprob hettest hexdump hilite hist hist_7 histogram hlogit hlu hmeans hotel hotelling hprobit hreg hsearch icd9 icd9_ff icd9p iis impute imtest inbase include inf infi infil infile infix inp inpu input ins insheet insp inspe inspec inspect integ inten intreg intreg_7 intreg_p intrg2_ll intrg_ll intrg_ll2 ipolate iqreg ir irf irf_create irfm iri is_svy is_svysum isid istdize ivprob_1_lf ivprob_lf ivprobit ivprobit_p ivreg ivreg_footnote ivtob_1_lf ivtob_lf ivtobit ivtobit_p jackknife jacknife jknife jknife_6 jknife_8 jkstat joinby kalarma1 kap kap_3 kapmeier kappa kapwgt kdensity kdensity_7 keep ksm ksmirnov ktau kwallis l|0 la lab labe label labelbook ladder levels levelsof leverage lfit lfit_p li lincom line linktest lis list lloghet_glf lloghet_glf_sh lloghet_gp lloghet_ilf lloghet_ilf_sh lloghet_ip llogi_sw llogis_p llogist llogistic llogistichet lnorm_lf lnorm_sw lnorma_p lnormal lnormalhet lnormhet_glf lnormhet_glf_sh lnormhet_gp lnormhet_ilf lnormhet_ilf_sh lnormhet_ip lnskew0 loadingplot loc loca local log logi logis_lf logistic logistic_p logit logit_estat logit_p loglogs logrank loneway lookfor lookup lowess lowess_7 lpredict lrecomp lroc lroc_7 lrtest ls lsens lsens_7 lsens_x lstat ltable ltable_7 ltriang lv lvr2plot lvr2plot_7 m|0 ma mac macr macro makecns man manova manova_estat manova_p manovatest mantel mark markin markout marksample mat mat_capp mat_order mat_put_rr mat_rapp mata mata_clear mata_describe mata_drop mata_matdescribe mata_matsave mata_matuse mata_memory mata_mlib mata_mosave mata_rename mata_which matalabel matcproc matlist matname matr matri matrix matrix_input__dlg matstrik mcc mcci md0_ md1_ md1debug_ md2_ md2debug_ mds mds_estat mds_p mdsconfig mdslong mdsmat mdsshepard mdytoe mdytof me_derd mean means median memory memsize meqparse mer merg merge mfp mfx mhelp mhodds minbound mixed_ll mixed_ll_reparm mkassert mkdir mkmat mkspline ml ml_5 ml_adjs ml_bhhhs ml_c_d ml_check ml_clear ml_cnt ml_debug ml_defd ml_e0 ml_e0_bfgs ml_e0_cycle ml_e0_dfp ml_e0i ml_e1 ml_e1_bfgs ml_e1_bhhh ml_e1_cycle ml_e1_dfp ml_e2 ml_e2_cycle ml_ebfg0 ml_ebfr0 ml_ebfr1 ml_ebh0q ml_ebhh0 ml_ebhr0 ml_ebr0i ml_ecr0i ml_edfp0 ml_edfr0 ml_edfr1 ml_edr0i ml_eds ml_eer0i ml_egr0i ml_elf ml_elf_bfgs ml_elf_bhhh ml_elf_cycle ml_elf_dfp ml_elfi ml_elfs ml_enr0i ml_enrr0 ml_erdu0 ml_erdu0_bfgs ml_erdu0_bhhh ml_erdu0_bhhhq ml_erdu0_cycle ml_erdu0_dfp ml_erdu0_nrbfgs ml_exde ml_footnote ml_geqnr ml_grad0 ml_graph ml_hbhhh ml_hd0 ml_hold ml_init ml_inv ml_log ml_max ml_mlout ml_mlout_8 ml_model ml_nb0 ml_opt ml_p ml_plot ml_query ml_rdgrd ml_repor ml_s_e ml_score ml_searc ml_technique ml_unhold mleval mlf_ mlmatbysum mlmatsum mlog mlogi mlogit mlogit_footnote mlogit_p mlopts mlsum mlvecsum mnl0_ mor more mov move mprobit mprobit_lf mprobit_p mrdu0_ mrdu1_ mvdecode mvencode mvreg mvreg_estat n|0 nbreg nbreg_al nbreg_lf nbreg_p nbreg_sw nestreg net newey newey_7 newey_p news nl nl_7 nl_9 nl_9_p nl_p nl_p_7 nlcom nlcom_p nlexp2 nlexp2_7 nlexp2a nlexp2a_7 nlexp3 nlexp3_7 nlgom3 nlgom3_7 nlgom4 nlgom4_7 nlinit nllog3 nllog3_7 nllog4 nllog4_7 nlog_rd nlogit nlogit_p nlogitgen nlogittree nlpred no nobreak noi nois noisi noisil noisily note notes notes_dlg nptrend numlabel numlist odbc old_ver olo olog ologi ologi_sw ologit ologit_p ologitp on one onew onewa oneway op_colnm op_comp op_diff op_inv op_str opr opro oprob oprob_sw oprobi oprobi_p oprobit oprobitp opts_exclusive order orthog orthpoly ou out outf outfi outfil outfile outs outsh outshe outshee outsheet ovtest pac pac_7 palette parse parse_dissim pause pca pca_8 pca_display pca_estat pca_p pca_rotate pcamat pchart pchart_7 pchi pchi_7 pcorr pctile pentium pergram pergram_7 permute permute_8 personal peto_st pkcollapse pkcross pkequiv pkexamine pkexamine_7 pkshape pksumm pksumm_7 pl plo plot plugin pnorm pnorm_7 poisgof poiss_lf poiss_sw poisso_p poisson poisson_estat post postclose postfile postutil pperron pr prais prais_e prais_e2 prais_p predict predictnl preserve print pro prob probi probit probit_estat probit_p proc_time procoverlay procrustes procrustes_estat procrustes_p profiler prog progr progra program prop proportion prtest prtesti pwcorr pwd q\\s qby qbys qchi qchi_7 qladder qladder_7 qnorm qnorm_7 qqplot qqplot_7 qreg qreg_c qreg_p qreg_sw qu quadchk quantile quantile_7 que quer query range ranksum ratio rchart rchart_7 rcof recast reclink recode reg reg3 reg3_p regdw regr regre regre_p2 regres regres_p regress regress_estat regriv_p remap ren rena renam rename renpfix repeat replace report reshape restore ret retu retur return rm rmdir robvar roccomp roccomp_7 roccomp_8 rocf_lf rocfit rocfit_8 rocgold rocplot rocplot_7 roctab roctab_7 rolling rologit rologit_p rot rota rotat rotate rotatemat rreg rreg_p ru run runtest rvfplot rvfplot_7 rvpplot rvpplot_7 sa safesum sample sampsi sav save savedresults saveold sc sca scal scala scalar scatter scm_mine sco scob_lf scob_p scobi_sw scobit scor score scoreplot scoreplot_help scree screeplot screeplot_help sdtest sdtesti se search separate seperate serrbar serrbar_7 serset set set_defaults sfrancia sh she shel shell shewhart shewhart_7 signestimationsample signrank signtest simul simul_7 simulate simulate_8 sktest sleep slogit slogit_d2 slogit_p smooth snapspan so sor sort spearman spikeplot spikeplot_7 spikeplt spline_x split sqreg sqreg_p sret sretu sretur sreturn ssc st st_ct st_hc st_hcd st_hcd_sh st_is st_issys st_note st_promo st_set st_show st_smpl st_subid stack statsby statsby_8 stbase stci stci_7 stcox stcox_estat stcox_fr stcox_fr_ll stcox_p stcox_sw stcoxkm stcoxkm_7 stcstat stcurv stcurve stcurve_7 stdes stem stepwise stereg stfill stgen stir stjoin stmc stmh stphplot stphplot_7 stphtest stphtest_7 stptime strate strate_7 streg streg_sw streset sts sts_7 stset stsplit stsum sttocc sttoct stvary stweib su suest suest_8 sum summ summa summar summari summariz summarize sunflower sureg survcurv survsum svar svar_p svmat svy svy_disp svy_dreg svy_est svy_est_7 svy_estat svy_get svy_gnbreg_p svy_head svy_header svy_heckman_p svy_heckprob_p svy_intreg_p svy_ivreg_p svy_logistic_p svy_logit_p svy_mlogit_p svy_nbreg_p svy_ologit_p svy_oprobit_p svy_poisson_p svy_probit_p svy_regress_p svy_sub svy_sub_7 svy_x svy_x_7 svy_x_p svydes svydes_8 svygen svygnbreg svyheckman svyheckprob svyintreg svyintreg_7 svyintrg svyivreg svylc svylog_p svylogit svymarkout svymarkout_8 svymean svymlog svymlogit svynbreg svyolog svyologit svyoprob svyoprobit svyopts svypois svypois_7 svypoisson svyprobit svyprobt svyprop svyprop_7 svyratio svyreg svyreg_p svyregress svyset svyset_7 svyset_8 svytab svytab_7 svytest svytotal sw sw_8 swcnreg swcox swereg swilk swlogis swlogit swologit swoprbt swpois swprobit swqreg swtobit swweib symmetry symmi symplot symplot_7 syntax sysdescribe sysdir sysuse szroeter ta tab tab1 tab2 tab_or tabd tabdi tabdis tabdisp tabi table tabodds tabodds_7 tabstat tabu tabul tabula tabulat tabulate te tempfile tempname tempvar tes test testnl testparm teststd tetrachoric time_it timer tis tob tobi tobit tobit_p tobit_sw token tokeni tokeniz tokenize tostring total translate translator transmap treat_ll treatr_p treatreg trim trnb_cons trnb_mean trpoiss_d2 trunc_ll truncr_p truncreg tsappend tset tsfill tsline tsline_ex tsreport tsrevar tsrline tsset tssmooth tsunab ttest ttesti tut_chk tut_wait tutorial tw tware_st two twoway twoway__fpfit_serset twoway__function_gen twoway__histogram_gen twoway__ipoint_serset twoway__ipoints_serset twoway__kdensity_gen twoway__lfit_serset twoway__normgen_gen twoway__pci_serset twoway__qfit_serset twoway__scatteri_serset twoway__sunflower_gen twoway_ksm_serset ty typ type typeof u|0 unab unabbrev unabcmd update us use uselabel var var_mkcompanion var_p varbasic varfcast vargranger varirf varirf_add varirf_cgraph varirf_create varirf_ctable varirf_describe varirf_dir varirf_drop varirf_erase varirf_graph varirf_ograph varirf_rename varirf_set varirf_table varlist varlmar varnorm varsoc varstable varstable_w varstable_w2 varwle vce vec vec_fevd vec_mkphi vec_p vec_p_w vecirf_create veclmar veclmar_w vecnorm vecnorm_w vecrank vecstable verinst vers versi versio version view viewsource vif vwls wdatetof webdescribe webseek webuse weib1_lf weib2_lf weib_lf weib_lf0 weibhet_glf weibhet_glf_sh weibhet_glfa weibhet_glfa_sh weibhet_gp weibhet_ilf weibhet_ilf_sh weibhet_ilfa weibhet_ilfa_sh weibhet_ip weibu_sw weibul_p weibull weibull_c weibull_s weibullhet wh whelp whi which whil while wilc_st wilcoxon win wind windo window winexec wntestb wntestb_7 wntestq xchart xchart_7 xcorr xcorr_7 xi xi_6 xmlsav xmlsave xmluse xpose xsh xshe xshel xshell xt_iis xt_tis xtab_p xtabond xtbin_p xtclog xtcloglog xtcloglog_8 xtcloglog_d2 xtcloglog_pa_p xtcloglog_re_p xtcnt_p xtcorr xtdata xtdes xtfront_p xtfrontier xtgee xtgee_elink xtgee_estat xtgee_makeivar xtgee_p xtgee_plink xtgls xtgls_p xthaus xthausman xtht_p xthtaylor xtile xtint_p xtintreg xtintreg_8 xtintreg_d2 xtintreg_p xtivp_1 xtivp_2 xtivreg xtline xtline_ex xtlogit xtlogit_8 xtlogit_d2 xtlogit_fe_p xtlogit_pa_p xtlogit_re_p xtmixed xtmixed_estat xtmixed_p xtnb_fe xtnb_lf xtnbreg xtnbreg_pa_p xtnbreg_refe_p xtpcse xtpcse_p xtpois xtpoisson xtpoisson_d2 xtpoisson_pa_p xtpoisson_refe_p xtpred xtprobit xtprobit_8 xtprobit_d2 xtprobit_re_p xtps_fe xtps_lf xtps_ren xtps_ren_8 xtrar_p xtrc xtrc_p xtrchh xtrefe_p xtreg xtreg_be xtreg_fe xtreg_ml xtreg_pa_p xtreg_re xtregar xtrere_p xtset xtsf_ll xtsf_llti xtsum xttab xttest0 xttobit xttobit_8 xttobit_p xttrans yx yxview__barlike_draw yxview_area_draw yxview_bar_draw yxview_dot_draw yxview_dropline_draw yxview_function_draw yxview_iarrow_draw yxview_ilabels_draw yxview_normal_draw yxview_pcarrow_draw yxview_pcbarrow_draw yxview_pccapsym_draw yxview_pcscatter_draw yxview_pcspike_draw yxview_rarea_draw yxview_rbar_draw yxview_rbarm_draw yxview_rcap_draw yxview_rcapsym_draw yxview_rconnected_draw yxview_rline_draw yxview_rscatter_draw yxview_rspike_draw yxview_spike_draw yxview_sunflower_draw zap_s zinb zinb_llf zinb_plf zip zip_llf zip_p zip_plf zt_ct_5 zt_hc_5 zt_hcd_5 zt_is_5 zt_iss_5 zt_sho_5 zt_smp_5 ztbase_5 ztcox_5 ztdes_5 ztereg_5 ztfill_5 ztgen_5 ztir_5 ztjoin_5 ztnb ztnb_p ztp ztp_p zts_5 ztset_5 ztspli_5 ztsum_5 zttoct_5 ztvary_5 ztweib_5',
        contains: [
      {
        className: 'symbol',
        begin: /`[a-zA-Z0-9_]+'/
      },
      {
        className: 'variable',
        begin: /\$\{?[a-zA-Z0-9_]+\}?/
      },
      {
        className: 'string',
        variants: [
          {begin: '`"[^\r\n]*?"\''},
          {begin: '"[^\r\n"]*"'}
        ]
      },

      {
        className: 'built_in',
        variants: [
          {
            begin: '\\b(abs|acos|asin|atan|atan2|atanh|ceil|cloglog|comb|cos|digamma|exp|floor|invcloglog|invlogit|ln|lnfact|lnfactorial|lngamma|log|log10|max|min|mod|reldif|round|sign|sin|sqrt|sum|tan|tanh|trigamma|trunc|betaden|Binomial|binorm|binormal|chi2|chi2tail|dgammapda|dgammapdada|dgammapdadx|dgammapdx|dgammapdxdx|F|Fden|Ftail|gammaden|gammap|ibeta|invbinomial|invchi2|invchi2tail|invF|invFtail|invgammap|invibeta|invnchi2|invnFtail|invnibeta|invnorm|invnormal|invttail|nbetaden|nchi2|nFden|nFtail|nibeta|norm|normal|normalden|normd|npnchi2|tden|ttail|uniform|abbrev|char|index|indexnot|length|lower|ltrim|match|plural|proper|real|regexm|regexr|regexs|reverse|rtrim|string|strlen|strlower|strltrim|strmatch|strofreal|strpos|strproper|strreverse|strrtrim|strtrim|strupper|subinstr|subinword|substr|trim|upper|word|wordcount|_caller|autocode|byteorder|chop|clip|cond|e|epsdouble|epsfloat|group|inlist|inrange|irecode|matrix|maxbyte|maxdouble|maxfloat|maxint|maxlong|mi|minbyte|mindouble|minfloat|minint|minlong|missing|r|recode|replay|return|s|scalar|d|date|day|dow|doy|halfyear|mdy|month|quarter|week|year|d|daily|dofd|dofh|dofm|dofq|dofw|dofy|h|halfyearly|hofd|m|mofd|monthly|q|qofd|quarterly|tin|twithin|w|weekly|wofd|y|yearly|yh|ym|yofd|yq|yw|cholesky|colnumb|colsof|corr|det|diag|diag0cnt|el|get|hadamard|I|inv|invsym|issym|issymmetric|J|matmissing|matuniform|mreldif|nullmat|rownumb|rowsof|sweep|syminv|trace|vec|vecdiag)(?=\\(|$)'
          }
        ]
      },

      hljs.COMMENT('^[ \t]*\\*.*$', false),
      hljs.C_LINE_COMMENT_MODE,
      hljs.C_BLOCK_COMMENT_MODE
    ]
  };
};

/***/ }),
/* 272 */
/***/ (function(module, exports) {

module.exports = function(hljs) {
  var STEP21_IDENT_RE = '[A-Z_][A-Z0-9_.]*';
  var STEP21_KEYWORDS = {
    keyword: 'HEADER ENDSEC DATA'
  };
  var STEP21_START = {
    className: 'meta',
    begin: 'ISO-10303-21;',
    relevance: 10
  };
  var STEP21_CLOSE = {
    className: 'meta',
    begin: 'END-ISO-10303-21;',
    relevance: 10
  };

  return {
    aliases: ['p21', 'step', 'stp'],
    case_insensitive: true, // STEP 21 is case insensitive in theory, in practice all non-comments are capitalized.
    lexemes: STEP21_IDENT_RE,
    keywords: STEP21_KEYWORDS,
    contains: [
      STEP21_START,
      STEP21_CLOSE,
      hljs.C_LINE_COMMENT_MODE,
      hljs.C_BLOCK_COMMENT_MODE,
      hljs.COMMENT('/\\*\\*!', '\\*/'),
      hljs.C_NUMBER_MODE,
      hljs.inherit(hljs.APOS_STRING_MODE, {illegal: null}),
      hljs.inherit(hljs.QUOTE_STRING_MODE, {illegal: null}),
      {
        className: 'string',
        begin: "'", end: "'"
      },
      {
        className: 'symbol',
        variants: [
          {
            begin: '#', end: '\\d+',
            illegal: '\\W'
          }
        ]
      }
    ]
  };
};

/***/ }),
/* 273 */
/***/ (function(module, exports) {

module.exports = function(hljs) {

  var VARIABLE = {
    className: 'variable',
    begin: '\\$' + hljs.IDENT_RE
  };

  var HEX_COLOR = {
    className: 'number',
    begin: '#([a-fA-F0-9]{6}|[a-fA-F0-9]{3})'
  };

  var AT_KEYWORDS = [
    'charset',
    'css',
    'debug',
    'extend',
    'font-face',
    'for',
    'import',
    'include',
    'media',
    'mixin',
    'page',
    'warn',
    'while'
  ];

  var PSEUDO_SELECTORS = [
    'after',
    'before',
    'first-letter',
    'first-line',
    'active',
    'first-child',
    'focus',
    'hover',
    'lang',
    'link',
    'visited'
  ];

  var TAGS = [
    'a',
    'abbr',
    'address',
    'article',
    'aside',
    'audio',
    'b',
    'blockquote',
    'body',
    'button',
    'canvas',
    'caption',
    'cite',
    'code',
    'dd',
    'del',
    'details',
    'dfn',
    'div',
    'dl',
    'dt',
    'em',
    'fieldset',
    'figcaption',
    'figure',
    'footer',
    'form',
    'h1',
    'h2',
    'h3',
    'h4',
    'h5',
    'h6',
    'header',
    'hgroup',
    'html',
    'i',
    'iframe',
    'img',
    'input',
    'ins',
    'kbd',
    'label',
    'legend',
    'li',
    'mark',
    'menu',
    'nav',
    'object',
    'ol',
    'p',
    'q',
    'quote',
    'samp',
    'section',
    'span',
    'strong',
    'summary',
    'sup',
    'table',
    'tbody',
    'td',
    'textarea',
    'tfoot',
    'th',
    'thead',
    'time',
    'tr',
    'ul',
    'var',
    'video'
  ];

  var TAG_END = '[\\.\\s\\n\\[\\:,]';

  var ATTRIBUTES = [
    'align-content',
    'align-items',
    'align-self',
    'animation',
    'animation-delay',
    'animation-direction',
    'animation-duration',
    'animation-fill-mode',
    'animation-iteration-count',
    'animation-name',
    'animation-play-state',
    'animation-timing-function',
    'auto',
    'backface-visibility',
    'background',
    'background-attachment',
    'background-clip',
    'background-color',
    'background-image',
    'background-origin',
    'background-position',
    'background-repeat',
    'background-size',
    'border',
    'border-bottom',
    'border-bottom-color',
    'border-bottom-left-radius',
    'border-bottom-right-radius',
    'border-bottom-style',
    'border-bottom-width',
    'border-collapse',
    'border-color',
    'border-image',
    'border-image-outset',
    'border-image-repeat',
    'border-image-slice',
    'border-image-source',
    'border-image-width',
    'border-left',
    'border-left-color',
    'border-left-style',
    'border-left-width',
    'border-radius',
    'border-right',
    'border-right-color',
    'border-right-style',
    'border-right-width',
    'border-spacing',
    'border-style',
    'border-top',
    'border-top-color',
    'border-top-left-radius',
    'border-top-right-radius',
    'border-top-style',
    'border-top-width',
    'border-width',
    'bottom',
    'box-decoration-break',
    'box-shadow',
    'box-sizing',
    'break-after',
    'break-before',
    'break-inside',
    'caption-side',
    'clear',
    'clip',
    'clip-path',
    'color',
    'column-count',
    'column-fill',
    'column-gap',
    'column-rule',
    'column-rule-color',
    'column-rule-style',
    'column-rule-width',
    'column-span',
    'column-width',
    'columns',
    'content',
    'counter-increment',
    'counter-reset',
    'cursor',
    'direction',
    'display',
    'empty-cells',
    'filter',
    'flex',
    'flex-basis',
    'flex-direction',
    'flex-flow',
    'flex-grow',
    'flex-shrink',
    'flex-wrap',
    'float',
    'font',
    'font-family',
    'font-feature-settings',
    'font-kerning',
    'font-language-override',
    'font-size',
    'font-size-adjust',
    'font-stretch',
    'font-style',
    'font-variant',
    'font-variant-ligatures',
    'font-weight',
    'height',
    'hyphens',
    'icon',
    'image-orientation',
    'image-rendering',
    'image-resolution',
    'ime-mode',
    'inherit',
    'initial',
    'justify-content',
    'left',
    'letter-spacing',
    'line-height',
    'list-style',
    'list-style-image',
    'list-style-position',
    'list-style-type',
    'margin',
    'margin-bottom',
    'margin-left',
    'margin-right',
    'margin-top',
    'marks',
    'mask',
    'max-height',
    'max-width',
    'min-height',
    'min-width',
    'nav-down',
    'nav-index',
    'nav-left',
    'nav-right',
    'nav-up',
    'none',
    'normal',
    'object-fit',
    'object-position',
    'opacity',
    'order',
    'orphans',
    'outline',
    'outline-color',
    'outline-offset',
    'outline-style',
    'outline-width',
    'overflow',
    'overflow-wrap',
    'overflow-x',
    'overflow-y',
    'padding',
    'padding-bottom',
    'padding-left',
    'padding-right',
    'padding-top',
    'page-break-after',
    'page-break-before',
    'page-break-inside',
    'perspective',
    'perspective-origin',
    'pointer-events',
    'position',
    'quotes',
    'resize',
    'right',
    'tab-size',
    'table-layout',
    'text-align',
    'text-align-last',
    'text-decoration',
    'text-decoration-color',
    'text-decoration-line',
    'text-decoration-style',
    'text-indent',
    'text-overflow',
    'text-rendering',
    'text-shadow',
    'text-transform',
    'text-underline-position',
    'top',
    'transform',
    'transform-origin',
    'transform-style',
    'transition',
    'transition-delay',
    'transition-duration',
    'transition-property',
    'transition-timing-function',
    'unicode-bidi',
    'vertical-align',
    'visibility',
    'white-space',
    'widows',
    'width',
    'word-break',
    'word-spacing',
    'word-wrap',
    'z-index'
  ];

  // illegals
  var ILLEGAL = [
    '\\?',
    '(\\bReturn\\b)', // monkey
    '(\\bEnd\\b)', // monkey
    '(\\bend\\b)', // vbscript
    '(\\bdef\\b)', // gradle
    ';', // a whole lot of languages
    '#\\s', // markdown
    '\\*\\s', // markdown
    '===\\s', // markdown
    '\\|',
    '%', // prolog
  ];

  return {
    aliases: ['styl'],
    case_insensitive: false,
    keywords: 'if else for in',
    illegal: '(' + ILLEGAL.join('|') + ')',
    contains: [

      // strings
      hljs.QUOTE_STRING_MODE,
      hljs.APOS_STRING_MODE,

      // comments
      hljs.C_LINE_COMMENT_MODE,
      hljs.C_BLOCK_COMMENT_MODE,

      // hex colors
      HEX_COLOR,

      // class tag
      {
        begin: '\\.[a-zA-Z][a-zA-Z0-9_-]*' + TAG_END,
        returnBegin: true,
        contains: [
          {className: 'selector-class', begin: '\\.[a-zA-Z][a-zA-Z0-9_-]*'}
        ]
      },

      // id tag
      {
        begin: '\\#[a-zA-Z][a-zA-Z0-9_-]*' + TAG_END,
        returnBegin: true,
        contains: [
          {className: 'selector-id', begin: '\\#[a-zA-Z][a-zA-Z0-9_-]*'}
        ]
      },

      // tags
      {
        begin: '\\b(' + TAGS.join('|') + ')' + TAG_END,
        returnBegin: true,
        contains: [
          {className: 'selector-tag', begin: '\\b[a-zA-Z][a-zA-Z0-9_-]*'}
        ]
      },

      // psuedo selectors
      {
        begin: '&?:?:\\b(' + PSEUDO_SELECTORS.join('|') + ')' + TAG_END
      },

      // @ keywords
      {
        begin: '\@(' + AT_KEYWORDS.join('|') + ')\\b'
      },

      // variables
      VARIABLE,

      // dimension
      hljs.CSS_NUMBER_MODE,

      // number
      hljs.NUMBER_MODE,

      // functions
      //  - only from beginning of line + whitespace
      {
        className: 'function',
        begin: '^[a-zA-Z][a-zA-Z0-9_\-]*\\(.*\\)',
        illegal: '[\\n]',
        returnBegin: true,
        contains: [
          {className: 'title', begin: '\\b[a-zA-Z][a-zA-Z0-9_\-]*'},
          {
            className: 'params',
            begin: /\(/,
            end: /\)/,
            contains: [
              HEX_COLOR,
              VARIABLE,
              hljs.APOS_STRING_MODE,
              hljs.CSS_NUMBER_MODE,
              hljs.NUMBER_MODE,
              hljs.QUOTE_STRING_MODE
            ]
          }
        ]
      },

      // attributes
      //  - only from beginning of line + whitespace
      //  - must have whitespace after it
      {
        className: 'attribute',
        begin: '\\b(' + ATTRIBUTES.reverse().join('|') + ')\\b',
        starts: {
          // value container
          end: /;|$/,
          contains: [
            HEX_COLOR,
            VARIABLE,
            hljs.APOS_STRING_MODE,
            hljs.QUOTE_STRING_MODE,
            hljs.CSS_NUMBER_MODE,
            hljs.NUMBER_MODE,
            hljs.C_BLOCK_COMMENT_MODE
          ],
          illegal: /\./,
          relevance: 0
        }
      }
    ]
  };
};

/***/ }),
/* 274 */
/***/ (function(module, exports) {

module.exports = function(hljs) {
  var DETAILS = {
    className: 'string',
    begin: '\\[\n(multipart)?', end: '\\]\n'
  };
  var TIME = {
    className: 'string',
    begin: '\\d{4}-\\d{2}-\\d{2}(\\s+)\\d{2}:\\d{2}:\\d{2}\.\\d+Z'
  };
  var PROGRESSVALUE = {
    className: 'string',
    begin: '(\\+|-)\\d+'
  };
  var KEYWORDS = {
    className: 'keyword',
    relevance: 10,
    variants: [
      { begin: '^(test|testing|success|successful|failure|error|skip|xfail|uxsuccess)(:?)\\s+(test)?' },
      { begin: '^progress(:?)(\\s+)?(pop|push)?' },
      { begin: '^tags:' },
      { begin: '^time:' }
    ],
  };
  return {
    case_insensitive: true,
    contains: [
      DETAILS,
      TIME,
      PROGRESSVALUE,
      KEYWORDS
    ]
  };
};

/***/ }),
/* 275 */
/***/ (function(module, exports) {

module.exports = function(hljs) {
  var SWIFT_KEYWORDS = {
      keyword: '__COLUMN__ __FILE__ __FUNCTION__ __LINE__ as as! as? associativity ' +
        'break case catch class continue convenience default defer deinit didSet do ' +
        'dynamic dynamicType else enum extension fallthrough false fileprivate final for func ' +
        'get guard if import in indirect infix init inout internal is lazy left let ' +
        'mutating nil none nonmutating open operator optional override postfix precedence ' +
        'prefix private protocol Protocol public repeat required rethrows return ' +
        'right self Self set static struct subscript super switch throw throws true ' +
        'try try! try? Type typealias unowned var weak where while willSet',
      literal: 'true false nil',
      built_in: 'abs advance alignof alignofValue anyGenerator assert assertionFailure ' +
        'bridgeFromObjectiveC bridgeFromObjectiveCUnconditional bridgeToObjectiveC ' +
        'bridgeToObjectiveCUnconditional c contains count countElements countLeadingZeros ' +
        'debugPrint debugPrintln distance dropFirst dropLast dump encodeBitsAsWords ' +
        'enumerate equal fatalError filter find getBridgedObjectiveCType getVaList ' +
        'indices insertionSort isBridgedToObjectiveC isBridgedVerbatimToObjectiveC ' +
        'isUniquelyReferenced isUniquelyReferencedNonObjC join lazy lexicographicalCompare ' +
        'map max maxElement min minElement numericCast overlaps partition posix ' +
        'precondition preconditionFailure print println quickSort readLine reduce reflect ' +
        'reinterpretCast reverse roundUpToAlignment sizeof sizeofValue sort split ' +
        'startsWith stride strideof strideofValue swap toString transcode ' +
        'underestimateCount unsafeAddressOf unsafeBitCast unsafeDowncast unsafeUnwrap ' +
        'unsafeReflect withExtendedLifetime withObjectAtPlusZero withUnsafePointer ' +
        'withUnsafePointerToObject withUnsafeMutablePointer withUnsafeMutablePointers ' +
        'withUnsafePointer withUnsafePointers withVaList zip'
    };

  var TYPE = {
    className: 'type',
    begin: '\\b[A-Z][\\w\u00C0-\u02B8\']*',
    relevance: 0
  };
  var BLOCK_COMMENT = hljs.COMMENT(
    '/\\*',
    '\\*/',
    {
      contains: ['self']
    }
  );
  var SUBST = {
    className: 'subst',
    begin: /\\\(/, end: '\\)',
    keywords: SWIFT_KEYWORDS,
    contains: [] // assigned later
  };
  var NUMBERS = {
      className: 'number',
      begin: '\\b([\\d_]+(\\.[\\deE_]+)?|0x[a-fA-F0-9_]+(\\.[a-fA-F0-9p_]+)?|0b[01_]+|0o[0-7_]+)\\b',
      relevance: 0
  };
  var QUOTE_STRING_MODE = hljs.inherit(hljs.QUOTE_STRING_MODE, {
    contains: [SUBST, hljs.BACKSLASH_ESCAPE]
  });
  SUBST.contains = [NUMBERS];

  return {
    keywords: SWIFT_KEYWORDS,
    contains: [
      QUOTE_STRING_MODE,
      hljs.C_LINE_COMMENT_MODE,
      BLOCK_COMMENT,
      TYPE,
      NUMBERS,
      {
        className: 'function',
        beginKeywords: 'func', end: '{', excludeEnd: true,
        contains: [
          hljs.inherit(hljs.TITLE_MODE, {
            begin: /[A-Za-z$_][0-9A-Za-z$_]*/
          }),
          {
            begin: /</, end: />/
          },
          {
            className: 'params',
            begin: /\(/, end: /\)/, endsParent: true,
            keywords: SWIFT_KEYWORDS,
            contains: [
              'self',
              NUMBERS,
              QUOTE_STRING_MODE,
              hljs.C_BLOCK_COMMENT_MODE,
              {begin: ':'} // relevance booster
            ],
            illegal: /["']/
          }
        ],
        illegal: /\[|%/
      },
      {
        className: 'class',
        beginKeywords: 'struct protocol class extension enum',
        keywords: SWIFT_KEYWORDS,
        end: '\\{',
        excludeEnd: true,
        contains: [
          hljs.inherit(hljs.TITLE_MODE, {begin: /[A-Za-z$_][\u00C0-\u02B80-9A-Za-z$_]*/})
        ]
      },
      {
        className: 'meta', // @attributes
        begin: '(@warn_unused_result|@exported|@lazy|@noescape|' +
                  '@NSCopying|@NSManaged|@objc|@convention|@required|' +
                  '@noreturn|@IBAction|@IBDesignable|@IBInspectable|@IBOutlet|' +
                  '@infix|@prefix|@postfix|@autoclosure|@testable|@available|' +
                  '@nonobjc|@NSApplicationMain|@UIApplicationMain)'

      },
      {
        beginKeywords: 'import', end: /$/,
        contains: [hljs.C_LINE_COMMENT_MODE, BLOCK_COMMENT]
      }
    ]
  };
};

/***/ }),
/* 276 */
/***/ (function(module, exports) {

module.exports = function(hljs) {

  var COMMENT = {
    className: 'comment',
    begin: /\$noop\(/,
    end: /\)/,
    contains: [{
      begin: /\(/,
      end: /\)/,
      contains: ['self', {
        begin: /\\./
      }]
    }],
    relevance: 10
  };

  var FUNCTION = {
    className: 'keyword',
    begin: /\$(?!noop)[a-zA-Z][_a-zA-Z0-9]*/,
    end: /\(/,
    excludeEnd: true
  };

  var VARIABLE = {
    className: 'variable',
    begin: /%[_a-zA-Z0-9:]*/,
    end: '%'
  };

  var ESCAPE_SEQUENCE = {
    className: 'symbol',
    begin: /\\./
  };

  return {
    contains: [
      COMMENT,
      FUNCTION,
      VARIABLE,
      ESCAPE_SEQUENCE
    ]
  };
};

/***/ }),
/* 277 */
/***/ (function(module, exports) {

module.exports = function(hljs) {
  var LITERALS = 'true false yes no null';

  var keyPrefix = '^[ \\-]*';
  var keyName =  '[a-zA-Z_][\\w\\-]*';
  var KEY = {
    className: 'attr',
    variants: [
      { begin: keyPrefix + keyName + ":"},
      { begin: keyPrefix + '"' + keyName + '"' + ":"},
      { begin: keyPrefix + "'" + keyName + "'" + ":"}
    ]
  };

  var TEMPLATE_VARIABLES = {
    className: 'template-variable',
    variants: [
      { begin: '\{\{', end: '\}\}' }, // jinja templates Ansible
      { begin: '%\{', end: '\}' } // Ruby i18n
    ]
  };
  var STRING = {
    className: 'string',
    relevance: 0,
    variants: [
      {begin: /'/, end: /'/},
      {begin: /"/, end: /"/},
      {begin: /\S+/}
    ],
    contains: [
      hljs.BACKSLASH_ESCAPE,
      TEMPLATE_VARIABLES
    ]
  };

  return {
    case_insensitive: true,
    aliases: ['yml', 'YAML', 'yaml'],
    contains: [
      KEY,
      {
        className: 'meta',
        begin: '^---\s*$',
        relevance: 10
      },
      { // multi line string
        className: 'string',
        begin: '[\\|>] *$',
        returnEnd: true,
        contains: STRING.contains,
        // very simple termination: next hash key
        end: KEY.variants[0].begin
      },
      { // Ruby/Rails erb
        begin: '<%[%=-]?', end: '[%-]?%>',
        subLanguage: 'ruby',
        excludeBegin: true,
        excludeEnd: true,
        relevance: 0
      },
      { // data type
        className: 'type',
        begin: '!!' + hljs.UNDERSCORE_IDENT_RE,
      },
      { // fragment id &ref
        className: 'meta',
        begin: '&' + hljs.UNDERSCORE_IDENT_RE + '$',
      },
      { // fragment reference *ref
        className: 'meta',
        begin: '\\*' + hljs.UNDERSCORE_IDENT_RE + '$'
      },
      { // array listing
        className: 'bullet',
        begin: '^ *-',
        relevance: 0
      },
      hljs.HASH_COMMENT_MODE,
      {
        beginKeywords: LITERALS,
        keywords: {literal: LITERALS}
      },
      hljs.C_NUMBER_MODE,
      STRING
    ]
  };
};

/***/ }),
/* 278 */
/***/ (function(module, exports) {

module.exports = function(hljs) {
  return {
    case_insensitive: true,
    contains: [
      hljs.HASH_COMMENT_MODE,
      // version of format and total amount of testcases
      {
        className: 'meta',
        variants: [
          { begin: '^TAP version (\\d+)$' },
          { begin: '^1\\.\\.(\\d+)$' }
        ],
      },
      // YAML block
      {
        begin: '(\s+)?---$', end: '\\.\\.\\.$',
        subLanguage: 'yaml',
        relevance: 0
      },
	  // testcase number
      {
        className: 'number',
        begin: ' (\\d+) '
      },
	  // testcase status and description
      {
        className: 'symbol',
        variants: [
          { begin: '^ok' },
          { begin: '^not ok' }
        ],
      },
    ]
  };
};

/***/ }),
/* 279 */
/***/ (function(module, exports) {

module.exports = function(hljs) {
  return {
    aliases: ['tk'],
    keywords: 'after append apply array auto_execok auto_import auto_load auto_mkindex ' +
      'auto_mkindex_old auto_qualify auto_reset bgerror binary break catch cd chan clock ' +
      'close concat continue dde dict encoding eof error eval exec exit expr fblocked ' +
      'fconfigure fcopy file fileevent filename flush for foreach format gets glob global ' +
      'history http if incr info interp join lappend|10 lassign|10 lindex|10 linsert|10 list ' +
      'llength|10 load lrange|10 lrepeat|10 lreplace|10 lreverse|10 lsearch|10 lset|10 lsort|10 '+
      'mathfunc mathop memory msgcat namespace open package parray pid pkg::create pkg_mkIndex '+
      'platform platform::shell proc puts pwd read refchan regexp registry regsub|10 rename '+
      'return safe scan seek set socket source split string subst switch tcl_endOfWord '+
      'tcl_findLibrary tcl_startOfNextWord tcl_startOfPreviousWord tcl_wordBreakAfter '+
      'tcl_wordBreakBefore tcltest tclvars tell time tm trace unknown unload unset update '+
      'uplevel upvar variable vwait while',
    contains: [
      hljs.COMMENT(';[ \\t]*#', '$'),
      hljs.COMMENT('^[ \\t]*#', '$'),
      {
        beginKeywords: 'proc',
        end: '[\\{]',
        excludeEnd: true,
        contains: [
          {
            className: 'title',
            begin: '[ \\t\\n\\r]+(::)?[a-zA-Z_]((::)?[a-zA-Z0-9_])*',
            end: '[ \\t\\n\\r]',
            endsWithParent: true,
            excludeEnd: true
          }
        ]
      },
      {
        excludeEnd: true,
        variants: [
          {
            begin: '\\$(\\{)?(::)?[a-zA-Z_]((::)?[a-zA-Z0-9_])*\\(([a-zA-Z0-9_])*\\)',
            end: '[^a-zA-Z0-9_\\}\\$]'
          },
          {
            begin: '\\$(\\{)?(::)?[a-zA-Z_]((::)?[a-zA-Z0-9_])*',
            end: '(\\))?[^a-zA-Z0-9_\\}\\$]'
          }
        ]
      },
      {
        className: 'string',
        contains: [hljs.BACKSLASH_ESCAPE],
        variants: [
          hljs.inherit(hljs.APOS_STRING_MODE, {illegal: null}),
          hljs.inherit(hljs.QUOTE_STRING_MODE, {illegal: null})
        ]
      },
      {
        className: 'number',
        variants: [hljs.BINARY_NUMBER_MODE, hljs.C_NUMBER_MODE]
      }
    ]
  }
};

/***/ }),
/* 280 */
/***/ (function(module, exports) {

module.exports = function(hljs) {
  var COMMAND = {
    className: 'tag',
    begin: /\\/,
    relevance: 0,
    contains: [
      {
        className: 'name',
        variants: [
          {begin: /[a-zA-Zа-яА-я]+[*]?/},
          {begin: /[^a-zA-Zа-яА-я0-9]/}
        ],
        starts: {
          endsWithParent: true,
          relevance: 0,
          contains: [
            {
              className: 'string', // because it looks like attributes in HTML tags
              variants: [
                {begin: /\[/, end: /\]/},
                {begin: /\{/, end: /\}/}
              ]
            },
            {
              begin: /\s*=\s*/, endsWithParent: true,
              relevance: 0,
              contains: [
                {
                  className: 'number',
                  begin: /-?\d*\.?\d+(pt|pc|mm|cm|in|dd|cc|ex|em)?/
                }
              ]
            }
          ]
        }
      }
    ]
  };

  return {
    contains: [
      COMMAND,
      {
        className: 'formula',
        contains: [COMMAND],
        relevance: 0,
        variants: [
          {begin: /\$\$/, end: /\$\$/},
          {begin: /\$/, end: /\$/}
        ]
      },
      hljs.COMMENT(
        '%',
        '$',
        {
          relevance: 0
        }
      )
    ]
  };
};

/***/ }),
/* 281 */
/***/ (function(module, exports) {

module.exports = function(hljs) {
  var BUILT_IN_TYPES = 'bool byte i16 i32 i64 double string binary';
  return {
    keywords: {
      keyword:
        'namespace const typedef struct enum service exception void oneway set list map required optional',
      built_in:
        BUILT_IN_TYPES,
      literal:
        'true false'
    },
    contains: [
      hljs.QUOTE_STRING_MODE,
      hljs.NUMBER_MODE,
      hljs.C_LINE_COMMENT_MODE,
      hljs.C_BLOCK_COMMENT_MODE,
      {
        className: 'class',
        beginKeywords: 'struct enum service exception', end: /\{/,
        illegal: /\n/,
        contains: [
          hljs.inherit(hljs.TITLE_MODE, {
            starts: {endsWithParent: true, excludeEnd: true} // hack: eating everything after the first title
          })
        ]
      },
      {
        begin: '\\b(set|list|map)\\s*<', end: '>',
        keywords: BUILT_IN_TYPES,
        contains: ['self']
      }
    ]
  };
};

/***/ }),
/* 282 */
/***/ (function(module, exports) {

module.exports = function(hljs) {
  var TPID = {
    className: 'number',
    begin: '[1-9][0-9]*', /* no leading zeros */
    relevance: 0
  };
  var TPLABEL = {
    className: 'symbol',
    begin: ':[^\\]]+'
  };
  var TPDATA = {
    className: 'built_in',
    begin: '(AR|P|PAYLOAD|PR|R|SR|RSR|LBL|VR|UALM|MESSAGE|UTOOL|UFRAME|TIMER|\
    TIMER_OVERFLOW|JOINT_MAX_SPEED|RESUME_PROG|DIAG_REC)\\[', end: '\\]',
    contains: [
      'self',
      TPID,
      TPLABEL
    ]
  };
  var TPIO = {
    className: 'built_in',
    begin: '(AI|AO|DI|DO|F|RI|RO|UI|UO|GI|GO|SI|SO)\\[', end: '\\]',
    contains: [
      'self',
      TPID,
      hljs.QUOTE_STRING_MODE, /* for pos section at bottom */
      TPLABEL
    ]
  };

  return {
    keywords: {
      keyword:
        'ABORT ACC ADJUST AND AP_LD BREAK CALL CNT COL CONDITION CONFIG DA DB ' +
        'DIV DETECT ELSE END ENDFOR ERR_NUM ERROR_PROG FINE FOR GP GUARD INC ' +
        'IF JMP LINEAR_MAX_SPEED LOCK MOD MONITOR OFFSET Offset OR OVERRIDE ' +
        'PAUSE PREG PTH RT_LD RUN SELECT SKIP Skip TA TB TO TOOL_OFFSET ' +
        'Tool_Offset UF UT UFRAME_NUM UTOOL_NUM UNLOCK WAIT X Y Z W P R STRLEN ' +
        'SUBSTR FINDSTR VOFFSET PROG ATTR MN POS',
      literal:
        'ON OFF max_speed LPOS JPOS ENABLE DISABLE START STOP RESET'
    },
    contains: [
      TPDATA,
      TPIO,
      {
        className: 'keyword',
        begin: '/(PROG|ATTR|MN|POS|END)\\b'
      },
      {
        /* this is for cases like ,CALL */
        className: 'keyword',
        begin: '(CALL|RUN|POINT_LOGIC|LBL)\\b'
      },
      {
        /* this is for cases like CNT100 where the default lexemes do not
         * separate the keyword and the number */
        className: 'keyword',
        begin: '\\b(ACC|CNT|Skip|Offset|PSPD|RT_LD|AP_LD|Tool_Offset)'
      },
      {
        /* to catch numbers that do not have a word boundary on the left */
        className: 'number',
        begin: '\\d+(sec|msec|mm/sec|cm/min|inch/min|deg/sec|mm|in|cm)?\\b',
        relevance: 0
      },
      hljs.COMMENT('//', '[;$]'),
      hljs.COMMENT('!', '[;$]'),
      hljs.COMMENT('--eg:', '$'),
      hljs.QUOTE_STRING_MODE,
      {
        className: 'string',
        begin: '\'', end: '\''
      },
      hljs.C_NUMBER_MODE,
      {
        className: 'variable',
        begin: '\\$[A-Za-z0-9_]+'
      }
    ]
  };
};

/***/ }),
/* 283 */
/***/ (function(module, exports) {

module.exports = function(hljs) {
  var PARAMS = {
    className: 'params',
    begin: '\\(', end: '\\)'
  };

  var FUNCTION_NAMES = 'attribute block constant cycle date dump include ' +
                  'max min parent random range source template_from_string';

  var FUNCTIONS = {
    beginKeywords: FUNCTION_NAMES,
    keywords: {name: FUNCTION_NAMES},
    relevance: 0,
    contains: [
      PARAMS
    ]
  };

  var FILTER = {
    begin: /\|[A-Za-z_]+:?/,
    keywords:
      'abs batch capitalize convert_encoding date date_modify default ' +
      'escape first format join json_encode keys last length lower ' +
      'merge nl2br number_format raw replace reverse round slice sort split ' +
      'striptags title trim upper url_encode',
    contains: [
      FUNCTIONS
    ]
  };

  var TAGS = 'autoescape block do embed extends filter flush for ' +
    'if import include macro sandbox set spaceless use verbatim';

  TAGS = TAGS + ' ' + TAGS.split(' ').map(function(t){return 'end' + t}).join(' ');

  return {
    aliases: ['craftcms'],
    case_insensitive: true,
    subLanguage: 'xml',
    contains: [
      hljs.COMMENT(/\{#/, /#}/),
      {
        className: 'template-tag',
        begin: /\{%/, end: /%}/,
        contains: [
          {
            className: 'name',
            begin: /\w+/,
            keywords: TAGS,
            starts: {
              endsWithParent: true,
              contains: [FILTER, FUNCTIONS],
              relevance: 0
            }
          }
        ]
      },
      {
        className: 'template-variable',
        begin: /\{\{/, end: /}}/,
        contains: ['self', FILTER, FUNCTIONS]
      }
    ]
  };
};

/***/ }),
/* 284 */
/***/ (function(module, exports) {

module.exports = function(hljs) {
  var KEYWORDS = {
    keyword:
      'in if for while finally var new function do return void else break catch ' +
      'instanceof with throw case default try this switch continue typeof delete ' +
      'let yield const class public private protected get set super ' +
      'static implements enum export import declare type namespace abstract ' +
      'as from extends async await',
    literal:
      'true false null undefined NaN Infinity',
    built_in:
      'eval isFinite isNaN parseFloat parseInt decodeURI decodeURIComponent ' +
      'encodeURI encodeURIComponent escape unescape Object Function Boolean Error ' +
      'EvalError InternalError RangeError ReferenceError StopIteration SyntaxError ' +
      'TypeError URIError Number Math Date String RegExp Array Float32Array ' +
      'Float64Array Int16Array Int32Array Int8Array Uint16Array Uint32Array ' +
      'Uint8Array Uint8ClampedArray ArrayBuffer DataView JSON Intl arguments require ' +
      'module console window document any number boolean string void Promise'
  };

  return {
    aliases: ['ts'],
    keywords: KEYWORDS,
    contains: [
      {
        className: 'meta',
        begin: /^\s*['"]use strict['"]/
      },
      hljs.APOS_STRING_MODE,
      hljs.QUOTE_STRING_MODE,
      { // template string
        className: 'string',
        begin: '`', end: '`',
        contains: [
          hljs.BACKSLASH_ESCAPE,
          {
            className: 'subst',
            begin: '\\$\\{', end: '\\}'
          }
        ]
      },
      hljs.C_LINE_COMMENT_MODE,
      hljs.C_BLOCK_COMMENT_MODE,
      {
        className: 'number',
        variants: [
          { begin: '\\b(0[bB][01]+)' },
          { begin: '\\b(0[oO][0-7]+)' },
          { begin: hljs.C_NUMBER_RE }
        ],
        relevance: 0
      },
      { // "value" container
        begin: '(' + hljs.RE_STARTERS_RE + '|\\b(case|return|throw)\\b)\\s*',
        keywords: 'return throw case',
        contains: [
          hljs.C_LINE_COMMENT_MODE,
          hljs.C_BLOCK_COMMENT_MODE,
          hljs.REGEXP_MODE,
          {
            className: 'function',
            begin: '(\\(.*?\\)|' + hljs.IDENT_RE + ')\\s*=>', returnBegin: true,
            end: '\\s*=>',
            contains: [
              {
                className: 'params',
                variants: [
                  {
                    begin: hljs.IDENT_RE
                  },
                  {
                    begin: /\(\s*\)/,
                  },
                  {
                    begin: /\(/, end: /\)/,
                    excludeBegin: true, excludeEnd: true,
                    keywords: KEYWORDS,
                    contains: [
                      'self',
                      hljs.C_LINE_COMMENT_MODE,
                      hljs.C_BLOCK_COMMENT_MODE
                    ]
                  }
                ]
              }
            ]
          }
        ],
        relevance: 0
      },
      {
        className: 'function',
        begin: 'function', end: /[\{;]/, excludeEnd: true,
        keywords: KEYWORDS,
        contains: [
          'self',
          hljs.inherit(hljs.TITLE_MODE, {begin: /[A-Za-z$_][0-9A-Za-z$_]*/}),
          {
            className: 'params',
            begin: /\(/, end: /\)/,
            excludeBegin: true,
            excludeEnd: true,
            keywords: KEYWORDS,
            contains: [
              hljs.C_LINE_COMMENT_MODE,
              hljs.C_BLOCK_COMMENT_MODE
            ],
            illegal: /["'\(]/
          }
        ],
        illegal: /%/,
        relevance: 0 // () => {} is more typical in TypeScript
      },
      {
        beginKeywords: 'constructor', end: /\{/, excludeEnd: true,
        contains: [
          'self',
          {
            className: 'params',
            begin: /\(/, end: /\)/,
            excludeBegin: true,
            excludeEnd: true,
            keywords: KEYWORDS,
            contains: [
              hljs.C_LINE_COMMENT_MODE,
              hljs.C_BLOCK_COMMENT_MODE
            ],
            illegal: /["'\(]/
          }
        ]
      },
      { // prevent references like module.id from being higlighted as module definitions
        begin: /module\./,
        keywords: {built_in: 'module'},
        relevance: 0
      },
      {
        beginKeywords: 'module', end: /\{/, excludeEnd: true
      },
      {
        beginKeywords: 'interface', end: /\{/, excludeEnd: true,
        keywords: 'interface extends'
      },
      {
        begin: /\$[(.]/ // relevance booster for a pattern common to JS libs: `$(something)` and `$.something`
      },
      {
        begin: '\\.' + hljs.IDENT_RE, relevance: 0 // hack: prevents detection of keywords after dots
      },
      {
        className: 'meta', begin: '@[A-Za-z]+'
      }
    ]
  };
};

/***/ }),
/* 285 */
/***/ (function(module, exports) {

module.exports = function(hljs) {
  return {
    keywords: {
      keyword:
        // Value types
        'char uchar unichar int uint long ulong short ushort int8 int16 int32 int64 uint8 ' +
        'uint16 uint32 uint64 float double bool struct enum string void ' +
        // Reference types
        'weak unowned owned ' +
        // Modifiers
        'async signal static abstract interface override virtual delegate ' +
        // Control Structures
        'if while do for foreach else switch case break default return try catch ' +
        // Visibility
        'public private protected internal ' +
        // Other
        'using new this get set const stdout stdin stderr var',
      built_in:
        'DBus GLib CCode Gee Object Gtk Posix',
      literal:
        'false true null'
    },
    contains: [
      {
        className: 'class',
        beginKeywords: 'class interface namespace', end: '{', excludeEnd: true,
        illegal: '[^,:\\n\\s\\.]',
        contains: [
          hljs.UNDERSCORE_TITLE_MODE
        ]
      },
      hljs.C_LINE_COMMENT_MODE,
      hljs.C_BLOCK_COMMENT_MODE,
      {
        className: 'string',
        begin: '"""', end: '"""',
        relevance: 5
      },
      hljs.APOS_STRING_MODE,
      hljs.QUOTE_STRING_MODE,
      hljs.C_NUMBER_MODE,
      {
        className: 'meta',
        begin: '^#', end: '$',
        relevance: 2
      }
    ]
  };
};

/***/ }),
/* 286 */
/***/ (function(module, exports) {

module.exports = function(hljs) {
  return {
    aliases: ['vb'],
    case_insensitive: true,
    keywords: {
      keyword:
        'addhandler addressof alias and andalso aggregate ansi as assembly auto binary by byref byval ' + /* a-b */
        'call case catch class compare const continue custom declare default delegate dim distinct do ' + /* c-d */
        'each equals else elseif end enum erase error event exit explicit finally for friend from function ' + /* e-f */
        'get global goto group handles if implements imports in inherits interface into is isfalse isnot istrue ' + /* g-i */
        'join key let lib like loop me mid mod module mustinherit mustoverride mybase myclass ' + /* j-m */
        'namespace narrowing new next not notinheritable notoverridable ' + /* n */
        'of off on operator option optional or order orelse overloads overridable overrides ' + /* o */
        'paramarray partial preserve private property protected public ' + /* p */
        'raiseevent readonly redim rem removehandler resume return ' + /* r */
        'select set shadows shared skip static step stop structure strict sub synclock ' + /* s */
        'take text then throw to try unicode until using when where while widening with withevents writeonly xor', /* t-x */
      built_in:
        'boolean byte cbool cbyte cchar cdate cdec cdbl char cint clng cobj csbyte cshort csng cstr ctype ' +  /* b-c */
        'date decimal directcast double gettype getxmlnamespace iif integer long object ' + /* d-o */
        'sbyte short single string trycast typeof uinteger ulong ushort', /* s-u */
      literal:
        'true false nothing'
    },
    illegal: '//|{|}|endif|gosub|variant|wend', /* reserved deprecated keywords */
    contains: [
      hljs.inherit(hljs.QUOTE_STRING_MODE, {contains: [{begin: '""'}]}),
      hljs.COMMENT(
        '\'',
        '$',
        {
          returnBegin: true,
          contains: [
            {
              className: 'doctag',
              begin: '\'\'\'|<!--|-->',
              contains: [hljs.PHRASAL_WORDS_MODE]
            },
            {
              className: 'doctag',
              begin: '</?', end: '>',
              contains: [hljs.PHRASAL_WORDS_MODE]
            }
          ]
        }
      ),
      hljs.C_NUMBER_MODE,
      {
        className: 'meta',
        begin: '#', end: '$',
        keywords: {'meta-keyword': 'if else elseif end region externalsource'}
      }
    ]
  };
};

/***/ }),
/* 287 */
/***/ (function(module, exports) {

module.exports = function(hljs) {
  return {
    aliases: ['vbs'],
    case_insensitive: true,
    keywords: {
      keyword:
        'call class const dim do loop erase execute executeglobal exit for each next function ' +
        'if then else on error option explicit new private property let get public randomize ' +
        'redim rem select case set stop sub while wend with end to elseif is or xor and not ' +
        'class_initialize class_terminate default preserve in me byval byref step resume goto',
      built_in:
        'lcase month vartype instrrev ubound setlocale getobject rgb getref string ' +
        'weekdayname rnd dateadd monthname now day minute isarray cbool round formatcurrency ' +
        'conversions csng timevalue second year space abs clng timeserial fixs len asc ' +
        'isempty maths dateserial atn timer isobject filter weekday datevalue ccur isdate ' +
        'instr datediff formatdatetime replace isnull right sgn array snumeric log cdbl hex ' +
        'chr lbound msgbox ucase getlocale cos cdate cbyte rtrim join hour oct typename trim ' +
        'strcomp int createobject loadpicture tan formatnumber mid scriptenginebuildversion ' +
        'scriptengine split scriptengineminorversion cint sin datepart ltrim sqr ' +
        'scriptenginemajorversion time derived eval date formatpercent exp inputbox left ascw ' +
        'chrw regexp server response request cstr err',
      literal:
        'true false null nothing empty'
    },
    illegal: '//',
    contains: [
      hljs.inherit(hljs.QUOTE_STRING_MODE, {contains: [{begin: '""'}]}),
      hljs.COMMENT(
        /'/,
        /$/,
        {
          relevance: 0
        }
      ),
      hljs.C_NUMBER_MODE
    ]
  };
};

/***/ }),
/* 288 */
/***/ (function(module, exports) {

module.exports = function(hljs) {
  return {
    subLanguage: 'xml',
    contains: [
      {
        begin: '<%', end: '%>',
        subLanguage: 'vbscript'
      }
    ]
  };
};

/***/ }),
/* 289 */
/***/ (function(module, exports) {

module.exports = function(hljs) {
  var SV_KEYWORDS = {
    keyword:
      'accept_on alias always always_comb always_ff always_latch and assert assign ' +
      'assume automatic before begin bind bins binsof bit break buf|0 bufif0 bufif1 ' +
      'byte case casex casez cell chandle checker class clocking cmos config const ' +
      'constraint context continue cover covergroup coverpoint cross deassign default ' +
      'defparam design disable dist do edge else end endcase endchecker endclass ' +
      'endclocking endconfig endfunction endgenerate endgroup endinterface endmodule ' +
      'endpackage endprimitive endprogram endproperty endspecify endsequence endtable ' +
      'endtask enum event eventually expect export extends extern final first_match for ' +
      'force foreach forever fork forkjoin function generate|5 genvar global highz0 highz1 ' +
      'if iff ifnone ignore_bins illegal_bins implements implies import incdir include ' +
      'initial inout input inside instance int integer interconnect interface intersect ' +
      'join join_any join_none large let liblist library local localparam logic longint ' +
      'macromodule matches medium modport module nand negedge nettype new nexttime nmos ' +
      'nor noshowcancelled not notif0 notif1 or output package packed parameter pmos ' +
      'posedge primitive priority program property protected pull0 pull1 pulldown pullup ' +
      'pulsestyle_ondetect pulsestyle_onevent pure rand randc randcase randsequence rcmos ' +
      'real realtime ref reg reject_on release repeat restrict return rnmos rpmos rtran ' +
      'rtranif0 rtranif1 s_always s_eventually s_nexttime s_until s_until_with scalared ' +
      'sequence shortint shortreal showcancelled signed small soft solve specify specparam ' +
      'static string strong strong0 strong1 struct super supply0 supply1 sync_accept_on ' +
      'sync_reject_on table tagged task this throughout time timeprecision timeunit tran ' +
      'tranif0 tranif1 tri tri0 tri1 triand trior trireg type typedef union unique unique0 ' +
      'unsigned until until_with untyped use uwire var vectored virtual void wait wait_order ' +
      'wand weak weak0 weak1 while wildcard wire with within wor xnor xor',
    literal:
      'null',
    built_in:
      '$finish $stop $exit $fatal $error $warning $info $realtime $time $printtimescale ' +
      '$bitstoreal $bitstoshortreal $itor $signed $cast $bits $stime $timeformat ' +
      '$realtobits $shortrealtobits $rtoi $unsigned $asserton $assertkill $assertpasson ' +
      '$assertfailon $assertnonvacuouson $assertoff $assertcontrol $assertpassoff ' +
      '$assertfailoff $assertvacuousoff $isunbounded $sampled $fell $changed $past_gclk ' +
      '$fell_gclk $changed_gclk $rising_gclk $steady_gclk $coverage_control ' +
      '$coverage_get $coverage_save $set_coverage_db_name $rose $stable $past ' +
      '$rose_gclk $stable_gclk $future_gclk $falling_gclk $changing_gclk $display ' +
      '$coverage_get_max $coverage_merge $get_coverage $load_coverage_db $typename ' +
      '$unpacked_dimensions $left $low $increment $clog2 $ln $log10 $exp $sqrt $pow ' +
      '$floor $ceil $sin $cos $tan $countbits $onehot $isunknown $fatal $warning ' +
      '$dimensions $right $high $size $asin $acos $atan $atan2 $hypot $sinh $cosh ' +
      '$tanh $asinh $acosh $atanh $countones $onehot0 $error $info $random ' +
      '$dist_chi_square $dist_erlang $dist_exponential $dist_normal $dist_poisson ' +
      '$dist_t $dist_uniform $q_initialize $q_remove $q_exam $async$and$array ' +
      '$async$nand$array $async$or$array $async$nor$array $sync$and$array ' +
      '$sync$nand$array $sync$or$array $sync$nor$array $q_add $q_full $psprintf ' +
      '$async$and$plane $async$nand$plane $async$or$plane $async$nor$plane ' +
      '$sync$and$plane $sync$nand$plane $sync$or$plane $sync$nor$plane $system ' +
      '$display $displayb $displayh $displayo $strobe $strobeb $strobeh $strobeo ' +
      '$write $readmemb $readmemh $writememh $value$plusargs ' +
      '$dumpvars $dumpon $dumplimit $dumpports $dumpportson $dumpportslimit ' +
      '$writeb $writeh $writeo $monitor $monitorb $monitorh $monitoro $writememb ' +
      '$dumpfile $dumpoff $dumpall $dumpflush $dumpportsoff $dumpportsall ' +
      '$dumpportsflush $fclose $fdisplay $fdisplayb $fdisplayh $fdisplayo ' +
      '$fstrobe $fstrobeb $fstrobeh $fstrobeo $swrite $swriteb $swriteh ' +
      '$swriteo $fscanf $fread $fseek $fflush $feof $fopen $fwrite $fwriteb ' +
      '$fwriteh $fwriteo $fmonitor $fmonitorb $fmonitorh $fmonitoro $sformat ' +
      '$sformatf $fgetc $ungetc $fgets $sscanf $rewind $ftell $ferror'
    };
  return {
    aliases: ['v', 'sv', 'svh'],
    case_insensitive: false,
    keywords: SV_KEYWORDS, lexemes: /[\w\$]+/,
    contains: [
      hljs.C_BLOCK_COMMENT_MODE,
      hljs.C_LINE_COMMENT_MODE,
      hljs.QUOTE_STRING_MODE,
      {
        className: 'number',
        contains: [hljs.BACKSLASH_ESCAPE],
        variants: [
          {begin: '\\b((\\d+\'(b|h|o|d|B|H|O|D))[0-9xzXZa-fA-F_]+)'},
          {begin: '\\B((\'(b|h|o|d|B|H|O|D))[0-9xzXZa-fA-F_]+)'},
          {begin: '\\b([0-9_])+', relevance: 0}
        ]
      },
      /* parameters to instances */
      {
        className: 'variable',
        variants: [
          {begin: '#\\((?!parameter).+\\)'},
          {begin: '\\.\\w+', relevance: 0},
        ]
      },
      {
        className: 'meta',
        begin: '`', end: '$',
        keywords: {'meta-keyword': 'define __FILE__ ' +
          '__LINE__ begin_keywords celldefine default_nettype define ' +
          'else elsif end_keywords endcelldefine endif ifdef ifndef ' +
          'include line nounconnected_drive pragma resetall timescale ' +
          'unconnected_drive undef undefineall'},
        relevance: 0
      }
    ]
  }; // return
};

/***/ }),
/* 290 */
/***/ (function(module, exports) {

module.exports = function(hljs) {
  // Regular expression for VHDL numeric literals.

  // Decimal literal:
  var INTEGER_RE = '\\d(_|\\d)*';
  var EXPONENT_RE = '[eE][-+]?' + INTEGER_RE;
  var DECIMAL_LITERAL_RE = INTEGER_RE + '(\\.' + INTEGER_RE + ')?' + '(' + EXPONENT_RE + ')?';
  // Based literal:
  var BASED_INTEGER_RE = '\\w+';
  var BASED_LITERAL_RE = INTEGER_RE + '#' + BASED_INTEGER_RE + '(\\.' + BASED_INTEGER_RE + ')?' + '#' + '(' + EXPONENT_RE + ')?';

  var NUMBER_RE = '\\b(' + BASED_LITERAL_RE + '|' + DECIMAL_LITERAL_RE + ')';

  return {
    case_insensitive: true,
    keywords: {
      keyword:
        'abs access after alias all and architecture array assert assume assume_guarantee attribute ' +
        'begin block body buffer bus case component configuration constant context cover disconnect ' +
        'downto default else elsif end entity exit fairness file for force function generate ' +
        'generic group guarded if impure in inertial inout is label library linkage literal ' +
        'loop map mod nand new next nor not null of on open or others out package port ' +
        'postponed procedure process property protected pure range record register reject ' +
        'release rem report restrict restrict_guarantee return rol ror select sequence ' +
        'severity shared signal sla sll sra srl strong subtype then to transport type ' +
        'unaffected units until use variable vmode vprop vunit wait when while with xnor xor',
      built_in:
        'boolean bit character ' +
        'integer time delay_length natural positive ' +
        'string bit_vector file_open_kind file_open_status ' +
        'std_logic std_logic_vector unsigned signed boolean_vector integer_vector ' +
        'std_ulogic std_ulogic_vector unresolved_unsigned u_unsigned unresolved_signed u_signed' +
        'real_vector time_vector',
      literal:
        'false true note warning error failure ' +  // severity_level
        'line text side width'                      // textio
    },
    illegal: '{',
    contains: [
      hljs.C_BLOCK_COMMENT_MODE,      // VHDL-2008 block commenting.
      hljs.COMMENT('--', '$'),
      hljs.QUOTE_STRING_MODE,
      {
        className: 'number',
        begin: NUMBER_RE,
        relevance: 0
      },
      {
        className: 'string',
        begin: '\'(U|X|0|1|Z|W|L|H|-)\'',
        contains: [hljs.BACKSLASH_ESCAPE]
      },
      {
        className: 'symbol',
        begin: '\'[A-Za-z](_?[A-Za-z0-9])*',
        contains: [hljs.BACKSLASH_ESCAPE]
      }
    ]
  };
};

/***/ }),
/* 291 */
/***/ (function(module, exports) {

module.exports = function(hljs) {
  return {
    lexemes: /[!#@\w]+/,
    keywords: {
      keyword:
        // express version except: ! & * < = > !! # @ @@
        'N|0 P|0 X|0 a|0 ab abc abo al am an|0 ar arga argd arge argdo argg argl argu as au aug aun b|0 bN ba bad bd be bel bf bl bm bn bo bp br brea breaka breakd breakl bro bufdo buffers bun bw c|0 cN cNf ca cabc caddb cad caddf cal cat cb cc ccl cd ce cex cf cfir cgetb cgete cg changes chd che checkt cl cla clo cm cmapc cme cn cnew cnf cno cnorea cnoreme co col colo com comc comp con conf cope '+
        'cp cpf cq cr cs cst cu cuna cunme cw delm deb debugg delc delf dif diffg diffo diffp diffpu diffs diffthis dig di dl dell dj dli do doautoa dp dr ds dsp e|0 ea ec echoe echoh echom echon el elsei em en endfo endf endt endw ene ex exe exi exu f|0 files filet fin fina fini fir fix fo foldc foldd folddoc foldo for fu go gr grepa gu gv ha helpf helpg helpt hi hid his ia iabc if ij il im imapc '+
        'ime ino inorea inoreme int is isp iu iuna iunme j|0 ju k|0 keepa kee keepj lN lNf l|0 lad laddb laddf la lan lat lb lc lch lcl lcs le lefta let lex lf lfir lgetb lgete lg lgr lgrepa lh ll lla lli lmak lm lmapc lne lnew lnf ln loadk lo loc lockv lol lope lp lpf lr ls lt lu lua luad luaf lv lvimgrepa lw m|0 ma mak map mapc marks mat me menut mes mk mks mksp mkv mkvie mod mz mzf nbc nb nbs new nm nmapc nme nn nnoreme noa no noh norea noreme norm nu nun nunme ol o|0 om omapc ome on ono onoreme opt ou ounme ow p|0 '+
        'profd prof pro promptr pc ped pe perld po popu pp pre prev ps pt ptN ptf ptj ptl ptn ptp ptr pts pu pw py3 python3 py3d py3f py pyd pyf quita qa rec red redi redr redraws reg res ret retu rew ri rightb rub rubyd rubyf rund ru rv sN san sa sal sav sb sbN sba sbf sbl sbm sbn sbp sbr scrip scripte scs se setf setg setl sf sfir sh sim sig sil sl sla sm smap smapc sme sn sni sno snor snoreme sor '+
        'so spelld spe spelli spellr spellu spellw sp spr sre st sta startg startr star stopi stj sts sun sunm sunme sus sv sw sy synti sync tN tabN tabc tabdo tabe tabf tabfir tabl tabm tabnew '+
        'tabn tabo tabp tabr tabs tab ta tags tc tcld tclf te tf th tj tl tm tn to tp tr try ts tu u|0 undoj undol una unh unl unlo unm unme uns up ve verb vert vim vimgrepa vi viu vie vm vmapc vme vne vn vnoreme vs vu vunme windo w|0 wN wa wh wi winc winp wn wp wq wqa ws wu wv x|0 xa xmapc xm xme xn xnoreme xu xunme y|0 z|0 ~ '+
        // full version
        'Next Print append abbreviate abclear aboveleft all amenu anoremenu args argadd argdelete argedit argglobal arglocal argument ascii autocmd augroup aunmenu buffer bNext ball badd bdelete behave belowright bfirst blast bmodified bnext botright bprevious brewind break breakadd breakdel breaklist browse bunload '+
        'bwipeout change cNext cNfile cabbrev cabclear caddbuffer caddexpr caddfile call catch cbuffer cclose center cexpr cfile cfirst cgetbuffer cgetexpr cgetfile chdir checkpath checktime clist clast close cmap cmapclear cmenu cnext cnewer cnfile cnoremap cnoreabbrev cnoremenu copy colder colorscheme command comclear compiler continue confirm copen cprevious cpfile cquit crewind cscope cstag cunmap '+
        'cunabbrev cunmenu cwindow delete delmarks debug debuggreedy delcommand delfunction diffupdate diffget diffoff diffpatch diffput diffsplit digraphs display deletel djump dlist doautocmd doautoall deletep drop dsearch dsplit edit earlier echo echoerr echohl echomsg else elseif emenu endif endfor '+
        'endfunction endtry endwhile enew execute exit exusage file filetype find finally finish first fixdel fold foldclose folddoopen folddoclosed foldopen function global goto grep grepadd gui gvim hardcopy help helpfind helpgrep helptags highlight hide history insert iabbrev iabclear ijump ilist imap '+
        'imapclear imenu inoremap inoreabbrev inoremenu intro isearch isplit iunmap iunabbrev iunmenu join jumps keepalt keepmarks keepjumps lNext lNfile list laddexpr laddbuffer laddfile last language later lbuffer lcd lchdir lclose lcscope left leftabove lexpr lfile lfirst lgetbuffer lgetexpr lgetfile lgrep lgrepadd lhelpgrep llast llist lmake lmap lmapclear lnext lnewer lnfile lnoremap loadkeymap loadview '+
        'lockmarks lockvar lolder lopen lprevious lpfile lrewind ltag lunmap luado luafile lvimgrep lvimgrepadd lwindow move mark make mapclear match menu menutranslate messages mkexrc mksession mkspell mkvimrc mkview mode mzscheme mzfile nbclose nbkey nbsart next nmap nmapclear nmenu nnoremap '+
        'nnoremenu noautocmd noremap nohlsearch noreabbrev noremenu normal number nunmap nunmenu oldfiles open omap omapclear omenu only onoremap onoremenu options ounmap ounmenu ownsyntax print profdel profile promptfind promptrepl pclose pedit perl perldo pop popup ppop preserve previous psearch ptag ptNext '+
        'ptfirst ptjump ptlast ptnext ptprevious ptrewind ptselect put pwd py3do py3file python pydo pyfile quit quitall qall read recover redo redir redraw redrawstatus registers resize retab return rewind right rightbelow ruby rubydo rubyfile rundo runtime rviminfo substitute sNext sandbox sargument sall saveas sbuffer sbNext sball sbfirst sblast sbmodified sbnext sbprevious sbrewind scriptnames scriptencoding '+
        'scscope set setfiletype setglobal setlocal sfind sfirst shell simalt sign silent sleep slast smagic smapclear smenu snext sniff snomagic snoremap snoremenu sort source spelldump spellgood spellinfo spellrepall spellundo spellwrong split sprevious srewind stop stag startgreplace startreplace '+
        'startinsert stopinsert stjump stselect sunhide sunmap sunmenu suspend sview swapname syntax syntime syncbind tNext tabNext tabclose tabedit tabfind tabfirst tablast tabmove tabnext tabonly tabprevious tabrewind tag tcl tcldo tclfile tearoff tfirst throw tjump tlast tmenu tnext topleft tprevious '+'trewind tselect tunmenu undo undojoin undolist unabbreviate unhide unlet unlockvar unmap unmenu unsilent update vglobal version verbose vertical vimgrep vimgrepadd visual viusage view vmap vmapclear vmenu vnew '+
        'vnoremap vnoremenu vsplit vunmap vunmenu write wNext wall while winsize wincmd winpos wnext wprevious wqall wsverb wundo wviminfo xit xall xmapclear xmap xmenu xnoremap xnoremenu xunmap xunmenu yank',
      built_in: //built in func
        'synIDtrans atan2 range matcharg did_filetype asin feedkeys xor argv ' +
        'complete_check add getwinposx getqflist getwinposy screencol ' +
        'clearmatches empty extend getcmdpos mzeval garbagecollect setreg ' +
        'ceil sqrt diff_hlID inputsecret get getfperm getpid filewritable ' +
        'shiftwidth max sinh isdirectory synID system inputrestore winline ' +
        'atan visualmode inputlist tabpagewinnr round getregtype mapcheck ' +
        'hasmapto histdel argidx findfile sha256 exists toupper getcmdline ' +
        'taglist string getmatches bufnr strftime winwidth bufexists ' +
        'strtrans tabpagebuflist setcmdpos remote_read printf setloclist ' +
        'getpos getline bufwinnr float2nr len getcmdtype diff_filler luaeval ' +
        'resolve libcallnr foldclosedend reverse filter has_key bufname ' +
        'str2float strlen setline getcharmod setbufvar index searchpos ' +
        'shellescape undofile foldclosed setqflist buflisted strchars str2nr ' +
        'virtcol floor remove undotree remote_expr winheight gettabwinvar ' +
        'reltime cursor tabpagenr finddir localtime acos getloclist search ' +
        'tanh matchend rename gettabvar strdisplaywidth type abs py3eval ' +
        'setwinvar tolower wildmenumode log10 spellsuggest bufloaded ' +
        'synconcealed nextnonblank server2client complete settabwinvar ' +
        'executable input wincol setmatches getftype hlID inputsave ' +
        'searchpair or screenrow line settabvar histadd deepcopy strpart ' +
        'remote_peek and eval getftime submatch screenchar winsaveview ' +
        'matchadd mkdir screenattr getfontname libcall reltimestr getfsize ' +
        'winnr invert pow getbufline byte2line soundfold repeat fnameescape ' +
        'tagfiles sin strwidth spellbadword trunc maparg log lispindent ' +
        'hostname setpos globpath remote_foreground getchar synIDattr ' +
        'fnamemodify cscope_connection stridx winbufnr indent min ' +
        'complete_add nr2char searchpairpos inputdialog values matchlist ' +
        'items hlexists strridx browsedir expand fmod pathshorten line2byte ' +
        'argc count getwinvar glob foldtextresult getreg foreground cosh ' +
        'matchdelete has char2nr simplify histget searchdecl iconv ' +
        'winrestcmd pumvisible writefile foldlevel haslocaldir keys cos ' +
        'matchstr foldtext histnr tan tempname getcwd byteidx getbufvar ' +
        'islocked escape eventhandler remote_send serverlist winrestview ' +
        'synstack pyeval prevnonblank readfile cindent filereadable changenr ' +
        'exp'
    },
    illegal: /;/,
    contains: [
      hljs.NUMBER_MODE,
      hljs.APOS_STRING_MODE,

      /*
      A double quote can start either a string or a line comment. Strings are
      ended before the end of a line by another double quote and can contain
      escaped double-quotes and post-escaped line breaks.

      Also, any double quote at the beginning of a line is a comment but we
      don't handle that properly at the moment: any double quote inside will
      turn them into a string. Handling it properly will require a smarter
      parser.
      */
      {
        className: 'string',
        begin: /"(\\"|\n\\|[^"\n])*"/
      },
      hljs.COMMENT('"', '$'),

      {
        className: 'variable',
        begin: /[bwtglsav]:[\w\d_]*/
      },
      {
        className: 'function',
        beginKeywords: 'function function!', end: '$',
        relevance: 0,
        contains: [
          hljs.TITLE_MODE,
          {
            className: 'params',
            begin: '\\(', end: '\\)'
          }
        ]
      },
      {
        className: 'symbol',
        begin: /<[\w-]+>/
      }
    ]
  };
};

/***/ }),
/* 292 */
/***/ (function(module, exports) {

module.exports = function(hljs) {
  return {
    case_insensitive: true,
    lexemes: '[.%]?' + hljs.IDENT_RE,
    keywords: {
      keyword:
        'lock rep repe repz repne repnz xaquire xrelease bnd nobnd ' +
        'aaa aad aam aas adc add and arpl bb0_reset bb1_reset bound bsf bsr bswap bt btc btr bts call cbw cdq cdqe clc cld cli clts cmc cmp cmpsb cmpsd cmpsq cmpsw cmpxchg cmpxchg486 cmpxchg8b cmpxchg16b cpuid cpu_read cpu_write cqo cwd cwde daa das dec div dmint emms enter equ f2xm1 fabs fadd faddp fbld fbstp fchs fclex fcmovb fcmovbe fcmove fcmovnb fcmovnbe fcmovne fcmovnu fcmovu fcom fcomi fcomip fcomp fcompp fcos fdecstp fdisi fdiv fdivp fdivr fdivrp femms feni ffree ffreep fiadd ficom ficomp fidiv fidivr fild fimul fincstp finit fist fistp fisttp fisub fisubr fld fld1 fldcw fldenv fldl2e fldl2t fldlg2 fldln2 fldpi fldz fmul fmulp fnclex fndisi fneni fninit fnop fnsave fnstcw fnstenv fnstsw fpatan fprem fprem1 fptan frndint frstor fsave fscale fsetpm fsin fsincos fsqrt fst fstcw fstenv fstp fstsw fsub fsubp fsubr fsubrp ftst fucom fucomi fucomip fucomp fucompp fxam fxch fxtract fyl2x fyl2xp1 hlt ibts icebp idiv imul in inc incbin insb insd insw int int01 int1 int03 int3 into invd invpcid invlpg invlpga iret iretd iretq iretw jcxz jecxz jrcxz jmp jmpe lahf lar lds lea leave les lfence lfs lgdt lgs lidt lldt lmsw loadall loadall286 lodsb lodsd lodsq lodsw loop loope loopne loopnz loopz lsl lss ltr mfence monitor mov movd movq movsb movsd movsq movsw movsx movsxd movzx mul mwait neg nop not or out outsb outsd outsw packssdw packsswb packuswb paddb paddd paddsb paddsiw paddsw paddusb paddusw paddw pand pandn pause paveb pavgusb pcmpeqb pcmpeqd pcmpeqw pcmpgtb pcmpgtd pcmpgtw pdistib pf2id pfacc pfadd pfcmpeq pfcmpge pfcmpgt pfmax pfmin pfmul pfrcp pfrcpit1 pfrcpit2 pfrsqit1 pfrsqrt pfsub pfsubr pi2fd pmachriw pmaddwd pmagw pmulhriw pmulhrwa pmulhrwc pmulhw pmullw pmvgezb pmvlzb pmvnzb pmvzb pop popa popad popaw popf popfd popfq popfw por prefetch prefetchw pslld psllq psllw psrad psraw psrld psrlq psrlw psubb psubd psubsb psubsiw psubsw psubusb psubusw psubw punpckhbw punpckhdq punpckhwd punpcklbw punpckldq punpcklwd push pusha pushad pushaw pushf pushfd pushfq pushfw pxor rcl rcr rdshr rdmsr rdpmc rdtsc rdtscp ret retf retn rol ror rdm rsdc rsldt rsm rsts sahf sal salc sar sbb scasb scasd scasq scasw sfence sgdt shl shld shr shrd sidt sldt skinit smi smint smintold smsw stc std sti stosb stosd stosq stosw str sub svdc svldt svts swapgs syscall sysenter sysexit sysret test ud0 ud1 ud2b ud2 ud2a umov verr verw fwait wbinvd wrshr wrmsr xadd xbts xchg xlatb xlat xor cmove cmovz cmovne cmovnz cmova cmovnbe cmovae cmovnb cmovb cmovnae cmovbe cmovna cmovg cmovnle cmovge cmovnl cmovl cmovnge cmovle cmovng cmovc cmovnc cmovo cmovno cmovs cmovns cmovp cmovpe cmovnp cmovpo je jz jne jnz ja jnbe jae jnb jb jnae jbe jna jg jnle jge jnl jl jnge jle jng jc jnc jo jno js jns jpo jnp jpe jp sete setz setne setnz seta setnbe setae setnb setnc setb setnae setcset setbe setna setg setnle setge setnl setl setnge setle setng sets setns seto setno setpe setp setpo setnp addps addss andnps andps cmpeqps cmpeqss cmpleps cmpless cmpltps cmpltss cmpneqps cmpneqss cmpnleps cmpnless cmpnltps cmpnltss cmpordps cmpordss cmpunordps cmpunordss cmpps cmpss comiss cvtpi2ps cvtps2pi cvtsi2ss cvtss2si cvttps2pi cvttss2si divps divss ldmxcsr maxps maxss minps minss movaps movhps movlhps movlps movhlps movmskps movntps movss movups mulps mulss orps rcpps rcpss rsqrtps rsqrtss shufps sqrtps sqrtss stmxcsr subps subss ucomiss unpckhps unpcklps xorps fxrstor fxrstor64 fxsave fxsave64 xgetbv xsetbv xsave xsave64 xsaveopt xsaveopt64 xrstor xrstor64 prefetchnta prefetcht0 prefetcht1 prefetcht2 maskmovq movntq pavgb pavgw pextrw pinsrw pmaxsw pmaxub pminsw pminub pmovmskb pmulhuw psadbw pshufw pf2iw pfnacc pfpnacc pi2fw pswapd maskmovdqu clflush movntdq movnti movntpd movdqa movdqu movdq2q movq2dq paddq pmuludq pshufd pshufhw pshuflw pslldq psrldq psubq punpckhqdq punpcklqdq addpd addsd andnpd andpd cmpeqpd cmpeqsd cmplepd cmplesd cmpltpd cmpltsd cmpneqpd cmpneqsd cmpnlepd cmpnlesd cmpnltpd cmpnltsd cmpordpd cmpordsd cmpunordpd cmpunordsd cmppd comisd cvtdq2pd cvtdq2ps cvtpd2dq cvtpd2pi cvtpd2ps cvtpi2pd cvtps2dq cvtps2pd cvtsd2si cvtsd2ss cvtsi2sd cvtss2sd cvttpd2pi cvttpd2dq cvttps2dq cvttsd2si divpd divsd maxpd maxsd minpd minsd movapd movhpd movlpd movmskpd movupd mulpd mulsd orpd shufpd sqrtpd sqrtsd subpd subsd ucomisd unpckhpd unpcklpd xorpd addsubpd addsubps haddpd haddps hsubpd hsubps lddqu movddup movshdup movsldup clgi stgi vmcall vmclear vmfunc vmlaunch vmload vmmcall vmptrld vmptrst vmread vmresume vmrun vmsave vmwrite vmxoff vmxon invept invvpid pabsb pabsw pabsd palignr phaddw phaddd phaddsw phsubw phsubd phsubsw pmaddubsw pmulhrsw pshufb psignb psignw psignd extrq insertq movntsd movntss lzcnt blendpd blendps blendvpd blendvps dppd dpps extractps insertps movntdqa mpsadbw packusdw pblendvb pblendw pcmpeqq pextrb pextrd pextrq phminposuw pinsrb pinsrd pinsrq pmaxsb pmaxsd pmaxud pmaxuw pminsb pminsd pminud pminuw pmovsxbw pmovsxbd pmovsxbq pmovsxwd pmovsxwq pmovsxdq pmovzxbw pmovzxbd pmovzxbq pmovzxwd pmovzxwq pmovzxdq pmuldq pmulld ptest roundpd roundps roundsd roundss crc32 pcmpestri pcmpestrm pcmpistri pcmpistrm pcmpgtq popcnt getsec pfrcpv pfrsqrtv movbe aesenc aesenclast aesdec aesdeclast aesimc aeskeygenassist vaesenc vaesenclast vaesdec vaesdeclast vaesimc vaeskeygenassist vaddpd vaddps vaddsd vaddss vaddsubpd vaddsubps vandpd vandps vandnpd vandnps vblendpd vblendps vblendvpd vblendvps vbroadcastss vbroadcastsd vbroadcastf128 vcmpeq_ospd vcmpeqpd vcmplt_ospd vcmpltpd vcmple_ospd vcmplepd vcmpunord_qpd vcmpunordpd vcmpneq_uqpd vcmpneqpd vcmpnlt_uspd vcmpnltpd vcmpnle_uspd vcmpnlepd vcmpord_qpd vcmpordpd vcmpeq_uqpd vcmpnge_uspd vcmpngepd vcmpngt_uspd vcmpngtpd vcmpfalse_oqpd vcmpfalsepd vcmpneq_oqpd vcmpge_ospd vcmpgepd vcmpgt_ospd vcmpgtpd vcmptrue_uqpd vcmptruepd vcmplt_oqpd vcmple_oqpd vcmpunord_spd vcmpneq_uspd vcmpnlt_uqpd vcmpnle_uqpd vcmpord_spd vcmpeq_uspd vcmpnge_uqpd vcmpngt_uqpd vcmpfalse_ospd vcmpneq_ospd vcmpge_oqpd vcmpgt_oqpd vcmptrue_uspd vcmppd vcmpeq_osps vcmpeqps vcmplt_osps vcmpltps vcmple_osps vcmpleps vcmpunord_qps vcmpunordps vcmpneq_uqps vcmpneqps vcmpnlt_usps vcmpnltps vcmpnle_usps vcmpnleps vcmpord_qps vcmpordps vcmpeq_uqps vcmpnge_usps vcmpngeps vcmpngt_usps vcmpngtps vcmpfalse_oqps vcmpfalseps vcmpneq_oqps vcmpge_osps vcmpgeps vcmpgt_osps vcmpgtps vcmptrue_uqps vcmptrueps vcmplt_oqps vcmple_oqps vcmpunord_sps vcmpneq_usps vcmpnlt_uqps vcmpnle_uqps vcmpord_sps vcmpeq_usps vcmpnge_uqps vcmpngt_uqps vcmpfalse_osps vcmpneq_osps vcmpge_oqps vcmpgt_oqps vcmptrue_usps vcmpps vcmpeq_ossd vcmpeqsd vcmplt_ossd vcmpltsd vcmple_ossd vcmplesd vcmpunord_qsd vcmpunordsd vcmpneq_uqsd vcmpneqsd vcmpnlt_ussd vcmpnltsd vcmpnle_ussd vcmpnlesd vcmpord_qsd vcmpordsd vcmpeq_uqsd vcmpnge_ussd vcmpngesd vcmpngt_ussd vcmpngtsd vcmpfalse_oqsd vcmpfalsesd vcmpneq_oqsd vcmpge_ossd vcmpgesd vcmpgt_ossd vcmpgtsd vcmptrue_uqsd vcmptruesd vcmplt_oqsd vcmple_oqsd vcmpunord_ssd vcmpneq_ussd vcmpnlt_uqsd vcmpnle_uqsd vcmpord_ssd vcmpeq_ussd vcmpnge_uqsd vcmpngt_uqsd vcmpfalse_ossd vcmpneq_ossd vcmpge_oqsd vcmpgt_oqsd vcmptrue_ussd vcmpsd vcmpeq_osss vcmpeqss vcmplt_osss vcmpltss vcmple_osss vcmpless vcmpunord_qss vcmpunordss vcmpneq_uqss vcmpneqss vcmpnlt_usss vcmpnltss vcmpnle_usss vcmpnless vcmpord_qss vcmpordss vcmpeq_uqss vcmpnge_usss vcmpngess vcmpngt_usss vcmpngtss vcmpfalse_oqss vcmpfalsess vcmpneq_oqss vcmpge_osss vcmpgess vcmpgt_osss vcmpgtss vcmptrue_uqss vcmptruess vcmplt_oqss vcmple_oqss vcmpunord_sss vcmpneq_usss vcmpnlt_uqss vcmpnle_uqss vcmpord_sss vcmpeq_usss vcmpnge_uqss vcmpngt_uqss vcmpfalse_osss vcmpneq_osss vcmpge_oqss vcmpgt_oqss vcmptrue_usss vcmpss vcomisd vcomiss vcvtdq2pd vcvtdq2ps vcvtpd2dq vcvtpd2ps vcvtps2dq vcvtps2pd vcvtsd2si vcvtsd2ss vcvtsi2sd vcvtsi2ss vcvtss2sd vcvtss2si vcvttpd2dq vcvttps2dq vcvttsd2si vcvttss2si vdivpd vdivps vdivsd vdivss vdppd vdpps vextractf128 vextractps vhaddpd vhaddps vhsubpd vhsubps vinsertf128 vinsertps vlddqu vldqqu vldmxcsr vmaskmovdqu vmaskmovps vmaskmovpd vmaxpd vmaxps vmaxsd vmaxss vminpd vminps vminsd vminss vmovapd vmovaps vmovd vmovq vmovddup vmovdqa vmovqqa vmovdqu vmovqqu vmovhlps vmovhpd vmovhps vmovlhps vmovlpd vmovlps vmovmskpd vmovmskps vmovntdq vmovntqq vmovntdqa vmovntpd vmovntps vmovsd vmovshdup vmovsldup vmovss vmovupd vmovups vmpsadbw vmulpd vmulps vmulsd vmulss vorpd vorps vpabsb vpabsw vpabsd vpacksswb vpackssdw vpackuswb vpackusdw vpaddb vpaddw vpaddd vpaddq vpaddsb vpaddsw vpaddusb vpaddusw vpalignr vpand vpandn vpavgb vpavgw vpblendvb vpblendw vpcmpestri vpcmpestrm vpcmpistri vpcmpistrm vpcmpeqb vpcmpeqw vpcmpeqd vpcmpeqq vpcmpgtb vpcmpgtw vpcmpgtd vpcmpgtq vpermilpd vpermilps vperm2f128 vpextrb vpextrw vpextrd vpextrq vphaddw vphaddd vphaddsw vphminposuw vphsubw vphsubd vphsubsw vpinsrb vpinsrw vpinsrd vpinsrq vpmaddwd vpmaddubsw vpmaxsb vpmaxsw vpmaxsd vpmaxub vpmaxuw vpmaxud vpminsb vpminsw vpminsd vpminub vpminuw vpminud vpmovmskb vpmovsxbw vpmovsxbd vpmovsxbq vpmovsxwd vpmovsxwq vpmovsxdq vpmovzxbw vpmovzxbd vpmovzxbq vpmovzxwd vpmovzxwq vpmovzxdq vpmulhuw vpmulhrsw vpmulhw vpmullw vpmulld vpmuludq vpmuldq vpor vpsadbw vpshufb vpshufd vpshufhw vpshuflw vpsignb vpsignw vpsignd vpslldq vpsrldq vpsllw vpslld vpsllq vpsraw vpsrad vpsrlw vpsrld vpsrlq vptest vpsubb vpsubw vpsubd vpsubq vpsubsb vpsubsw vpsubusb vpsubusw vpunpckhbw vpunpckhwd vpunpckhdq vpunpckhqdq vpunpcklbw vpunpcklwd vpunpckldq vpunpcklqdq vpxor vrcpps vrcpss vrsqrtps vrsqrtss vroundpd vroundps vroundsd vroundss vshufpd vshufps vsqrtpd vsqrtps vsqrtsd vsqrtss vstmxcsr vsubpd vsubps vsubsd vsubss vtestps vtestpd vucomisd vucomiss vunpckhpd vunpckhps vunpcklpd vunpcklps vxorpd vxorps vzeroall vzeroupper pclmullqlqdq pclmulhqlqdq pclmullqhqdq pclmulhqhqdq pclmulqdq vpclmullqlqdq vpclmulhqlqdq vpclmullqhqdq vpclmulhqhqdq vpclmulqdq vfmadd132ps vfmadd132pd vfmadd312ps vfmadd312pd vfmadd213ps vfmadd213pd vfmadd123ps vfmadd123pd vfmadd231ps vfmadd231pd vfmadd321ps vfmadd321pd vfmaddsub132ps vfmaddsub132pd vfmaddsub312ps vfmaddsub312pd vfmaddsub213ps vfmaddsub213pd vfmaddsub123ps vfmaddsub123pd vfmaddsub231ps vfmaddsub231pd vfmaddsub321ps vfmaddsub321pd vfmsub132ps vfmsub132pd vfmsub312ps vfmsub312pd vfmsub213ps vfmsub213pd vfmsub123ps vfmsub123pd vfmsub231ps vfmsub231pd vfmsub321ps vfmsub321pd vfmsubadd132ps vfmsubadd132pd vfmsubadd312ps vfmsubadd312pd vfmsubadd213ps vfmsubadd213pd vfmsubadd123ps vfmsubadd123pd vfmsubadd231ps vfmsubadd231pd vfmsubadd321ps vfmsubadd321pd vfnmadd132ps vfnmadd132pd vfnmadd312ps vfnmadd312pd vfnmadd213ps vfnmadd213pd vfnmadd123ps vfnmadd123pd vfnmadd231ps vfnmadd231pd vfnmadd321ps vfnmadd321pd vfnmsub132ps vfnmsub132pd vfnmsub312ps vfnmsub312pd vfnmsub213ps vfnmsub213pd vfnmsub123ps vfnmsub123pd vfnmsub231ps vfnmsub231pd vfnmsub321ps vfnmsub321pd vfmadd132ss vfmadd132sd vfmadd312ss vfmadd312sd vfmadd213ss vfmadd213sd vfmadd123ss vfmadd123sd vfmadd231ss vfmadd231sd vfmadd321ss vfmadd321sd vfmsub132ss vfmsub132sd vfmsub312ss vfmsub312sd vfmsub213ss vfmsub213sd vfmsub123ss vfmsub123sd vfmsub231ss vfmsub231sd vfmsub321ss vfmsub321sd vfnmadd132ss vfnmadd132sd vfnmadd312ss vfnmadd312sd vfnmadd213ss vfnmadd213sd vfnmadd123ss vfnmadd123sd vfnmadd231ss vfnmadd231sd vfnmadd321ss vfnmadd321sd vfnmsub132ss vfnmsub132sd vfnmsub312ss vfnmsub312sd vfnmsub213ss vfnmsub213sd vfnmsub123ss vfnmsub123sd vfnmsub231ss vfnmsub231sd vfnmsub321ss vfnmsub321sd rdfsbase rdgsbase rdrand wrfsbase wrgsbase vcvtph2ps vcvtps2ph adcx adox rdseed clac stac xstore xcryptecb xcryptcbc xcryptctr xcryptcfb xcryptofb montmul xsha1 xsha256 llwpcb slwpcb lwpval lwpins vfmaddpd vfmaddps vfmaddsd vfmaddss vfmaddsubpd vfmaddsubps vfmsubaddpd vfmsubaddps vfmsubpd vfmsubps vfmsubsd vfmsubss vfnmaddpd vfnmaddps vfnmaddsd vfnmaddss vfnmsubpd vfnmsubps vfnmsubsd vfnmsubss vfrczpd vfrczps vfrczsd vfrczss vpcmov vpcomb vpcomd vpcomq vpcomub vpcomud vpcomuq vpcomuw vpcomw vphaddbd vphaddbq vphaddbw vphadddq vphaddubd vphaddubq vphaddubw vphaddudq vphadduwd vphadduwq vphaddwd vphaddwq vphsubbw vphsubdq vphsubwd vpmacsdd vpmacsdqh vpmacsdql vpmacssdd vpmacssdqh vpmacssdql vpmacsswd vpmacssww vpmacswd vpmacsww vpmadcsswd vpmadcswd vpperm vprotb vprotd vprotq vprotw vpshab vpshad vpshaq vpshaw vpshlb vpshld vpshlq vpshlw vbroadcasti128 vpblendd vpbroadcastb vpbroadcastw vpbroadcastd vpbroadcastq vpermd vpermpd vpermps vpermq vperm2i128 vextracti128 vinserti128 vpmaskmovd vpmaskmovq vpsllvd vpsllvq vpsravd vpsrlvd vpsrlvq vgatherdpd vgatherqpd vgatherdps vgatherqps vpgatherdd vpgatherqd vpgatherdq vpgatherqq xabort xbegin xend xtest andn bextr blci blcic blsi blsic blcfill blsfill blcmsk blsmsk blsr blcs bzhi mulx pdep pext rorx sarx shlx shrx tzcnt tzmsk t1mskc valignd valignq vblendmpd vblendmps vbroadcastf32x4 vbroadcastf64x4 vbroadcasti32x4 vbroadcasti64x4 vcompresspd vcompressps vcvtpd2udq vcvtps2udq vcvtsd2usi vcvtss2usi vcvttpd2udq vcvttps2udq vcvttsd2usi vcvttss2usi vcvtudq2pd vcvtudq2ps vcvtusi2sd vcvtusi2ss vexpandpd vexpandps vextractf32x4 vextractf64x4 vextracti32x4 vextracti64x4 vfixupimmpd vfixupimmps vfixupimmsd vfixupimmss vgetexppd vgetexpps vgetexpsd vgetexpss vgetmantpd vgetmantps vgetmantsd vgetmantss vinsertf32x4 vinsertf64x4 vinserti32x4 vinserti64x4 vmovdqa32 vmovdqa64 vmovdqu32 vmovdqu64 vpabsq vpandd vpandnd vpandnq vpandq vpblendmd vpblendmq vpcmpltd vpcmpled vpcmpneqd vpcmpnltd vpcmpnled vpcmpd vpcmpltq vpcmpleq vpcmpneqq vpcmpnltq vpcmpnleq vpcmpq vpcmpequd vpcmpltud vpcmpleud vpcmpnequd vpcmpnltud vpcmpnleud vpcmpud vpcmpequq vpcmpltuq vpcmpleuq vpcmpnequq vpcmpnltuq vpcmpnleuq vpcmpuq vpcompressd vpcompressq vpermi2d vpermi2pd vpermi2ps vpermi2q vpermt2d vpermt2pd vpermt2ps vpermt2q vpexpandd vpexpandq vpmaxsq vpmaxuq vpminsq vpminuq vpmovdb vpmovdw vpmovqb vpmovqd vpmovqw vpmovsdb vpmovsdw vpmovsqb vpmovsqd vpmovsqw vpmovusdb vpmovusdw vpmovusqb vpmovusqd vpmovusqw vpord vporq vprold vprolq vprolvd vprolvq vprord vprorq vprorvd vprorvq vpscatterdd vpscatterdq vpscatterqd vpscatterqq vpsraq vpsravq vpternlogd vpternlogq vptestmd vptestmq vptestnmd vptestnmq vpxord vpxorq vrcp14pd vrcp14ps vrcp14sd vrcp14ss vrndscalepd vrndscaleps vrndscalesd vrndscaless vrsqrt14pd vrsqrt14ps vrsqrt14sd vrsqrt14ss vscalefpd vscalefps vscalefsd vscalefss vscatterdpd vscatterdps vscatterqpd vscatterqps vshuff32x4 vshuff64x2 vshufi32x4 vshufi64x2 kandnw kandw kmovw knotw kortestw korw kshiftlw kshiftrw kunpckbw kxnorw kxorw vpbroadcastmb2q vpbroadcastmw2d vpconflictd vpconflictq vplzcntd vplzcntq vexp2pd vexp2ps vrcp28pd vrcp28ps vrcp28sd vrcp28ss vrsqrt28pd vrsqrt28ps vrsqrt28sd vrsqrt28ss vgatherpf0dpd vgatherpf0dps vgatherpf0qpd vgatherpf0qps vgatherpf1dpd vgatherpf1dps vgatherpf1qpd vgatherpf1qps vscatterpf0dpd vscatterpf0dps vscatterpf0qpd vscatterpf0qps vscatterpf1dpd vscatterpf1dps vscatterpf1qpd vscatterpf1qps prefetchwt1 bndmk bndcl bndcu bndcn bndmov bndldx bndstx sha1rnds4 sha1nexte sha1msg1 sha1msg2 sha256rnds2 sha256msg1 sha256msg2 hint_nop0 hint_nop1 hint_nop2 hint_nop3 hint_nop4 hint_nop5 hint_nop6 hint_nop7 hint_nop8 hint_nop9 hint_nop10 hint_nop11 hint_nop12 hint_nop13 hint_nop14 hint_nop15 hint_nop16 hint_nop17 hint_nop18 hint_nop19 hint_nop20 hint_nop21 hint_nop22 hint_nop23 hint_nop24 hint_nop25 hint_nop26 hint_nop27 hint_nop28 hint_nop29 hint_nop30 hint_nop31 hint_nop32 hint_nop33 hint_nop34 hint_nop35 hint_nop36 hint_nop37 hint_nop38 hint_nop39 hint_nop40 hint_nop41 hint_nop42 hint_nop43 hint_nop44 hint_nop45 hint_nop46 hint_nop47 hint_nop48 hint_nop49 hint_nop50 hint_nop51 hint_nop52 hint_nop53 hint_nop54 hint_nop55 hint_nop56 hint_nop57 hint_nop58 hint_nop59 hint_nop60 hint_nop61 hint_nop62 hint_nop63',
      built_in:
        // Instruction pointer
        'ip eip rip ' +
        // 8-bit registers
        'al ah bl bh cl ch dl dh sil dil bpl spl r8b r9b r10b r11b r12b r13b r14b r15b ' +
        // 16-bit registers
        'ax bx cx dx si di bp sp r8w r9w r10w r11w r12w r13w r14w r15w ' +
        // 32-bit registers
        'eax ebx ecx edx esi edi ebp esp eip r8d r9d r10d r11d r12d r13d r14d r15d ' +
        // 64-bit registers
        'rax rbx rcx rdx rsi rdi rbp rsp r8 r9 r10 r11 r12 r13 r14 r15 ' +
        // Segment registers
        'cs ds es fs gs ss ' +
        // Floating point stack registers
        'st st0 st1 st2 st3 st4 st5 st6 st7 ' +
        // MMX Registers
        'mm0 mm1 mm2 mm3 mm4 mm5 mm6 mm7 ' +
        // SSE registers
        'xmm0  xmm1  xmm2  xmm3  xmm4  xmm5  xmm6  xmm7  xmm8  xmm9 xmm10  xmm11 xmm12 xmm13 xmm14 xmm15 ' +
        'xmm16 xmm17 xmm18 xmm19 xmm20 xmm21 xmm22 xmm23 xmm24 xmm25 xmm26 xmm27 xmm28 xmm29 xmm30 xmm31 ' +
        // AVX registers
        'ymm0  ymm1  ymm2  ymm3  ymm4  ymm5  ymm6  ymm7  ymm8  ymm9 ymm10  ymm11 ymm12 ymm13 ymm14 ymm15 ' +
        'ymm16 ymm17 ymm18 ymm19 ymm20 ymm21 ymm22 ymm23 ymm24 ymm25 ymm26 ymm27 ymm28 ymm29 ymm30 ymm31 ' +
        // AVX-512F registers
        'zmm0  zmm1  zmm2  zmm3  zmm4  zmm5  zmm6  zmm7  zmm8  zmm9 zmm10  zmm11 zmm12 zmm13 zmm14 zmm15 ' +
        'zmm16 zmm17 zmm18 zmm19 zmm20 zmm21 zmm22 zmm23 zmm24 zmm25 zmm26 zmm27 zmm28 zmm29 zmm30 zmm31 ' +
        // AVX-512F mask registers
        'k0 k1 k2 k3 k4 k5 k6 k7 ' +
        // Bound (MPX) register
        'bnd0 bnd1 bnd2 bnd3 ' +
        // Special register
        'cr0 cr1 cr2 cr3 cr4 cr8 dr0 dr1 dr2 dr3 dr8 tr3 tr4 tr5 tr6 tr7 ' +
        // NASM altreg package
        'r0 r1 r2 r3 r4 r5 r6 r7 r0b r1b r2b r3b r4b r5b r6b r7b ' +
        'r0w r1w r2w r3w r4w r5w r6w r7w r0d r1d r2d r3d r4d r5d r6d r7d ' +
        'r0h r1h r2h r3h ' +
        'r0l r1l r2l r3l r4l r5l r6l r7l r8l r9l r10l r11l r12l r13l r14l r15l ' +

        'db dw dd dq dt ddq do dy dz ' +
        'resb resw resd resq rest resdq reso resy resz ' +
        'incbin equ times ' +
        'byte word dword qword nosplit rel abs seg wrt strict near far a32 ptr',

      meta:
        '%define %xdefine %+ %undef %defstr %deftok %assign %strcat %strlen %substr %rotate %elif %else %endif ' +
        '%if %ifmacro %ifctx %ifidn %ifidni %ifid %ifnum %ifstr %iftoken %ifempty %ifenv %error %warning %fatal %rep ' +
        '%endrep %include %push %pop %repl %pathsearch %depend %use %arg %stacksize %local %line %comment %endcomment ' +
        '.nolist ' +
        '__FILE__ __LINE__ __SECT__  __BITS__ __OUTPUT_FORMAT__ __DATE__ __TIME__ __DATE_NUM__ __TIME_NUM__ ' +
        '__UTC_DATE__ __UTC_TIME__ __UTC_DATE_NUM__ __UTC_TIME_NUM__  __PASS__ struc endstruc istruc at iend ' +
        'align alignb sectalign daz nodaz up down zero default option assume public ' +

        'bits use16 use32 use64 default section segment absolute extern global common cpu float ' +
        '__utf16__ __utf16le__ __utf16be__ __utf32__ __utf32le__ __utf32be__ ' +
        '__float8__ __float16__ __float32__ __float64__ __float80m__ __float80e__ __float128l__ __float128h__ ' +
        '__Infinity__ __QNaN__ __SNaN__ Inf NaN QNaN SNaN float8 float16 float32 float64 float80m float80e ' +
        'float128l float128h __FLOAT_DAZ__ __FLOAT_ROUND__ __FLOAT__'
    },
    contains: [
      hljs.COMMENT(
        ';',
        '$',
        {
          relevance: 0
        }
      ),
      {
        className: 'number',
        variants: [
          // Float number and x87 BCD
          {
            begin: '\\b(?:([0-9][0-9_]*)?\\.[0-9_]*(?:[eE][+-]?[0-9_]+)?|' +
                   '(0[Xx])?[0-9][0-9_]*\\.?[0-9_]*(?:[pP](?:[+-]?[0-9_]+)?)?)\\b',
            relevance: 0
          },

          // Hex number in $
          { begin: '\\$[0-9][0-9A-Fa-f]*', relevance: 0 },

          // Number in H,D,T,Q,O,B,Y suffix
          { begin: '\\b(?:[0-9A-Fa-f][0-9A-Fa-f_]*[Hh]|[0-9][0-9_]*[DdTt]?|[0-7][0-7_]*[QqOo]|[0-1][0-1_]*[BbYy])\\b' },

          // Number in X,D,T,Q,O,B,Y prefix
          { begin: '\\b(?:0[Xx][0-9A-Fa-f_]+|0[DdTt][0-9_]+|0[QqOo][0-7_]+|0[BbYy][0-1_]+)\\b'}
        ]
      },
      // Double quote string
      hljs.QUOTE_STRING_MODE,
      {
        className: 'string',
        variants: [
          // Single-quoted string
          { begin: '\'', end: '[^\\\\]\'' },
          // Backquoted string
          { begin: '`', end: '[^\\\\]`' }
        ],
        relevance: 0
      },
      {
        className: 'symbol',
        variants: [
          // Global label and local label
          { begin: '^\\s*[A-Za-z._?][A-Za-z0-9_$#@~.?]*(:|\\s+label)' },
          // Macro-local label
          { begin: '^\\s*%%[A-Za-z0-9_$#@~.?]*:' }
        ],
        relevance: 0
      },
      // Macro parameter
      {
        className: 'subst',
        begin: '%[0-9]+',
        relevance: 0
      },
      // Macro parameter
      {
        className: 'subst',
        begin: '%!\S+',
        relevance: 0
      },
      {
        className: 'meta',
        begin: /^\s*\.[\w_-]+/
      }
    ]
  };
};

/***/ }),
/* 293 */
/***/ (function(module, exports) {

module.exports = function(hljs) {
  var BUILTIN_MODULES =
    'ObjectLoader Animate MovieCredits Slides Filters Shading Materials LensFlare Mapping VLCAudioVideo ' +
    'StereoDecoder PointCloud NetworkAccess RemoteControl RegExp ChromaKey Snowfall NodeJS Speech Charts';

  var XL_KEYWORDS = {
    keyword:
      'if then else do while until for loop import with is as where when by data constant ' +
      'integer real text name boolean symbol infix prefix postfix block tree',
    literal:
      'true false nil',
    built_in:
      'in mod rem and or xor not abs sign floor ceil sqrt sin cos tan asin ' +
      'acos atan exp expm1 log log2 log10 log1p pi at text_length text_range ' +
      'text_find text_replace contains page slide basic_slide title_slide ' +
      'title subtitle fade_in fade_out fade_at clear_color color line_color ' +
      'line_width texture_wrap texture_transform texture scale_?x scale_?y ' +
      'scale_?z? translate_?x translate_?y translate_?z? rotate_?x rotate_?y ' +
      'rotate_?z? rectangle circle ellipse sphere path line_to move_to ' +
      'quad_to curve_to theme background contents locally time mouse_?x ' +
      'mouse_?y mouse_buttons ' +
      BUILTIN_MODULES
  };

  var DOUBLE_QUOTE_TEXT = {
    className: 'string',
    begin: '"', end: '"', illegal: '\\n'
  };
  var SINGLE_QUOTE_TEXT = {
    className: 'string',
    begin: '\'', end: '\'', illegal: '\\n'
  };
  var LONG_TEXT = {
    className: 'string',
    begin: '<<', end: '>>'
  };
  var BASED_NUMBER = {
    className: 'number',
    begin: '[0-9]+#[0-9A-Z_]+(\\.[0-9-A-Z_]+)?#?([Ee][+-]?[0-9]+)?'
  };
  var IMPORT = {
    beginKeywords: 'import', end: '$',
    keywords: XL_KEYWORDS,
    contains: [DOUBLE_QUOTE_TEXT]
  };
  var FUNCTION_DEFINITION = {
    className: 'function',
    begin: /[a-z][^\n]*->/, returnBegin: true, end: /->/,
    contains: [
      hljs.inherit(hljs.TITLE_MODE, {starts: {
        endsWithParent: true,
        keywords: XL_KEYWORDS
      }})
    ]
  };
  return {
    aliases: ['tao'],
    lexemes: /[a-zA-Z][a-zA-Z0-9_?]*/,
    keywords: XL_KEYWORDS,
    contains: [
    hljs.C_LINE_COMMENT_MODE,
    hljs.C_BLOCK_COMMENT_MODE,
    DOUBLE_QUOTE_TEXT,
    SINGLE_QUOTE_TEXT,
    LONG_TEXT,
    FUNCTION_DEFINITION,
    IMPORT,
    BASED_NUMBER,
    hljs.NUMBER_MODE
    ]
  };
};

/***/ }),
/* 294 */
/***/ (function(module, exports) {

module.exports = function(hljs) {
  var KEYWORDS = 'for let if while then else return where group by xquery encoding version' +
    'module namespace boundary-space preserve strip default collation base-uri ordering' +
    'copy-namespaces order declare import schema namespace function option in allowing empty' +
    'at tumbling window sliding window start when only end when previous next stable ascending' +
    'descending empty greatest least some every satisfies switch case typeswitch try catch and' +
    'or to union intersect instance of treat as castable cast map array delete insert into' +
    'replace value rename copy modify update';
  var LITERAL = 'false true xs:string xs:integer element item xs:date xs:datetime xs:float xs:double xs:decimal QName xs:anyURI xs:long xs:int xs:short xs:byte attribute';
  var VAR = {
    begin: /\$[a-zA-Z0-9\-]+/
  };

  var NUMBER = {
    className: 'number',
    begin: '(\\b0[0-7_]+)|(\\b0x[0-9a-fA-F_]+)|(\\b[1-9][0-9_]*(\\.[0-9_]+)?)|[0_]\\b',
    relevance: 0
  };

  var STRING = {
    className: 'string',
    variants: [
      {begin: /"/, end: /"/, contains: [{begin: /""/, relevance: 0}]},
      {begin: /'/, end: /'/, contains: [{begin: /''/, relevance: 0}]}
    ]
  };

  var ANNOTATION = {
    className: 'meta',
    begin: '%\\w+'
  };

  var COMMENT = {
    className: 'comment',
    begin: '\\(:', end: ':\\)',
    relevance: 10,
    contains: [
      {
        className: 'doctag', begin: '@\\w+'
      }
    ]
  };

  var METHOD = {
    begin: '{', end: '}'
  };

  var CONTAINS = [
    VAR,
    STRING,
    NUMBER,
    COMMENT,
    ANNOTATION,
    METHOD
  ];
  METHOD.contains = CONTAINS;


  return {
    aliases: ['xpath', 'xq'],
    case_insensitive: false,
    lexemes: /[a-zA-Z\$][a-zA-Z0-9_:\-]*/,
    illegal: /(proc)|(abstract)|(extends)|(until)|(#)/,
    keywords: {
      keyword: KEYWORDS,
      literal: LITERAL
    },
    contains: CONTAINS
  };
};

/***/ }),
/* 295 */
/***/ (function(module, exports) {

module.exports = function(hljs) {
  var STRING = {
    className: 'string',
    contains: [hljs.BACKSLASH_ESCAPE],
    variants: [
      {
        begin: 'b"', end: '"'
      },
      {
        begin: 'b\'', end: '\''
      },
      hljs.inherit(hljs.APOS_STRING_MODE, {illegal: null}),
      hljs.inherit(hljs.QUOTE_STRING_MODE, {illegal: null})
    ]
  };
  var NUMBER = {variants: [hljs.BINARY_NUMBER_MODE, hljs.C_NUMBER_MODE]};
  return {
    aliases: ['zep'],
    case_insensitive: true,
    keywords:
      'and include_once list abstract global private echo interface as static endswitch ' +
      'array null if endwhile or const for endforeach self var let while isset public ' +
      'protected exit foreach throw elseif include __FILE__ empty require_once do xor ' +
      'return parent clone use __CLASS__ __LINE__ else break print eval new ' +
      'catch __METHOD__ case exception default die require __FUNCTION__ ' +
      'enddeclare final try switch continue endfor endif declare unset true false ' +
      'trait goto instanceof insteadof __DIR__ __NAMESPACE__ ' +
      'yield finally int uint long ulong char uchar double float bool boolean string' +
      'likely unlikely',
    contains: [
      hljs.C_LINE_COMMENT_MODE,
      hljs.HASH_COMMENT_MODE,
      hljs.COMMENT(
        '/\\*',
        '\\*/',
        {
          contains: [
            {
              className: 'doctag',
              begin: '@[A-Za-z]+'
            }
          ]
        }
      ),
      hljs.COMMENT(
        '__halt_compiler.+?;',
        false,
        {
          endsWithParent: true,
          keywords: '__halt_compiler',
          lexemes: hljs.UNDERSCORE_IDENT_RE
        }
      ),
      {
        className: 'string',
        begin: '<<<[\'"]?\\w+[\'"]?$', end: '^\\w+;',
        contains: [hljs.BACKSLASH_ESCAPE]
      },
      {
        // swallow composed identifiers to avoid parsing them as keywords
        begin: /(::|->)+[a-zA-Z_\x7f-\xff][a-zA-Z0-9_\x7f-\xff]*/
      },
      {
        className: 'function',
        beginKeywords: 'function', end: /[;{]/, excludeEnd: true,
        illegal: '\\$|\\[|%',
        contains: [
          hljs.UNDERSCORE_TITLE_MODE,
          {
            className: 'params',
            begin: '\\(', end: '\\)',
            contains: [
              'self',
              hljs.C_BLOCK_COMMENT_MODE,
              STRING,
              NUMBER
            ]
          }
        ]
      },
      {
        className: 'class',
        beginKeywords: 'class interface', end: '{', excludeEnd: true,
        illegal: /[:\(\$"]/,
        contains: [
          {beginKeywords: 'extends implements'},
          hljs.UNDERSCORE_TITLE_MODE
        ]
      },
      {
        beginKeywords: 'namespace', end: ';',
        illegal: /[\.']/,
        contains: [hljs.UNDERSCORE_TITLE_MODE]
      },
      {
        beginKeywords: 'use', end: ';',
        contains: [hljs.UNDERSCORE_TITLE_MODE]
      },
      {
        begin: '=>' // No markup, just a relevance booster
      },
      STRING,
      NUMBER
    ]
  };
};

/***/ }),
/* 296 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _jquery = __webpack_require__(1);

var _jquery2 = _interopRequireDefault(_jquery);

var _tuiCodeSnippet = __webpack_require__(2);

var _tuiCodeSnippet2 = _interopRequireDefault(_tuiCodeSnippet);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * @fileoverview DOM Utils
 * @author NHN Ent. FE Development Lab <dl_javascript@nhnent.com>
 */
var FIND_ZWB = /\u200B/g;

/**
 * isTextNode
 * Check if node is text node
 * @param {Node} node node to check
 * @returns {boolean} result
 * @ignore
 */
var isTextNode = function isTextNode(node) {
  return node && node.nodeType === Node.TEXT_NODE;
};

/**
 * isElemNode
 * Check if node is element node
 * @param {Node} node node to check
 * @returns {boolean} result
 * @ignore
 */
var isElemNode = function isElemNode(node) {
  return node && node.nodeType === Node.ELEMENT_NODE;
};

/**
 * getNodeName
 * Get node name of node
 * @param {Node} node node
 * @returns {string} node name
 * @ignore
 */
var getNodeName = function getNodeName(node) {
  if (isElemNode(node)) {
    return node.tagName;
  }

  return 'TEXT';
};

/**
 * getTextLength
 * Get node offset length of node(for Range API)
 * @param {Node} node node
 * @returns {number} length
 * @ignore
 */
var getTextLength = function getTextLength(node) {
  var len = void 0;

  if (isElemNode(node)) {
    len = node.textContent.replace(FIND_ZWB, '').length;
  } else if (isTextNode(node)) {
    len = node.nodeValue.replace(FIND_ZWB, '').length;
  }

  return len;
};

/**
 * getOffsetLength
 * Get node offset length of node(for Range API)
 * @param {Node} node node
 * @returns {number} length
 * @ignore
 */
var getOffsetLength = function getOffsetLength(node) {
  var len = void 0;

  if (isElemNode(node)) {
    len = node.childNodes.length;
  } else if (isTextNode(node)) {
    len = node.nodeValue.replace(FIND_ZWB, '').length;
  }

  return len;
};

/**
 * getNodeOffsetOfParent
 * get node offset between parent's childnodes
 * @param {Node} node node
 * @returns {number} offset(index)
 * @ignore
 */
var getNodeOffsetOfParent = function getNodeOffsetOfParent(node) {
  var childNodesOfParent = node.parentNode.childNodes;
  var i = void 0,
      t = void 0,
      found = void 0;

  for (i = 0, t = childNodesOfParent.length; i < t; i += 1) {
    if (childNodesOfParent[i] === node) {
      found = i;
      break;
    }
  }

  return found;
};

/**
 * getChildNodeByOffset
 * get child node by offset
 * @param {Node} node node
 * @param {number} index offset index
 * @returns {Node} foudned node
 * @ignore
 */
var getChildNodeByOffset = function getChildNodeByOffset(node, index) {
  var currentNode = void 0;

  if (isTextNode(node)) {
    currentNode = node;
  } else if (node.childNodes.length && index >= 0) {
    currentNode = node.childNodes[index];
  }

  return currentNode;
};

/**
 * getNodeWithDirectionUntil
 * find next node from passed node
 * @param {strong} direction previous or next
 * @param {Node} node node
 * @param {string} untilNodeName parent node name to limit
 * @returns {Node} founded node
 * @ignore
 */
var getNodeWithDirectionUntil = function getNodeWithDirectionUntil(direction, node, untilNodeName) {
  var directionKey = direction + 'Sibling';
  var nodeName = void 0,
      foundedNode = void 0;

  while (node && !node[directionKey]) {
    nodeName = getNodeName(node.parentNode);

    if (nodeName === untilNodeName || nodeName === 'BODY') {
      break;
    }

    node = node.parentNode;
  }

  if (node[directionKey]) {
    foundedNode = node[directionKey];
  }

  return foundedNode;
};

/**
 * getPrevOffsetNodeUntil
 * get prev node of childnode pointed with index
 * @param {Node} node node
 * @param {number} index offset index
 * @param {string} untilNodeName parent node name to limit
 * @returns {Node} founded node
 * @ignore
 */
var getPrevOffsetNodeUntil = function getPrevOffsetNodeUntil(node, index, untilNodeName) {
  var prevNode = void 0;

  if (index > 0) {
    prevNode = getChildNodeByOffset(node, index - 1);
  } else {
    prevNode = getNodeWithDirectionUntil('previous', node, untilNodeName);
  }

  return prevNode;
};

var getParentUntilBy = function getParentUntilBy(node, matchCondition, stopCondition) {
  var foundedNode = void 0;

  while (node.parentNode && !matchCondition(node.parentNode)) {
    node = node.parentNode;

    if (stopCondition && stopCondition(node.parentNode)) {
      break;
    }
  }

  if (matchCondition(node.parentNode)) {
    foundedNode = node;
  }

  return foundedNode;
};

/**
 * getParentUntil
 * get parent node until paseed node name
 * @param {Node} node node
 * @param {string|HTMLNode} untilNode node name or node to limit
 * @returns {Node} founded node
 * @ignore
 */
var getParentUntil = function getParentUntil(node, untilNode) {
  var foundedNode = void 0;

  if (_tuiCodeSnippet2.default.isString(untilNode)) {
    foundedNode = getParentUntilBy(node, function (targetNode) {
      return untilNode === getNodeName(targetNode);
    });
  } else {
    foundedNode = getParentUntilBy(node, function (targetNode) {
      return untilNode === targetNode;
    });
  }

  return foundedNode;
};

/**
 * getNodeWithDirectionUnderParent
 * get node on the given direction under given parent
 * @param {strong} direction previous or next
 * @param {Node} node node
 * @param {string|Node} underNode parent node name to limit
 * @returns {Node} founded node
 * @ignore
 */
var getNodeWithDirectionUnderParent = function getNodeWithDirectionUnderParent(direction, node, underNode) {
  var directionKey = direction + 'Sibling';
  var foundedNode = void 0;

  node = getParentUntil(node, underNode);

  if (node && node[directionKey]) {
    foundedNode = node[directionKey];
  }

  return foundedNode;
};

/**
 * getTopPrevNodeUnder
 * get top previous top level node under given node
 * @param {Node} node node
 * @param {Node} underNode underNode
 * @returns {Node} founded node
 * @ignore
 */
var getTopPrevNodeUnder = function getTopPrevNodeUnder(node, underNode) {
  return getNodeWithDirectionUnderParent('previous', node, underNode);
};

/**
 * getNextTopBlockNode
 * get next top level block node
 * @param {Node} node node
 * @param {Node} underNode underNode
 * @returns {Node} founded node
 * @ignore
 */
var getTopNextNodeUnder = function getTopNextNodeUnder(node, underNode) {
  return getNodeWithDirectionUnderParent('next', node, underNode);
};

/**
 * Get parent element the body element
 * @param {Node} node Node for start searching
 * @returns {Node}
 * @ignore
 */
var getTopBlockNode = function getTopBlockNode(node) {
  return getParentUntil(node, 'BODY');
};

/**
 * Get previous text node
 * @param {Node} node Node for start searching
 * @returns {Node}
 * @ignore
 */
var getPrevTextNode = function getPrevTextNode(node) {
  node = node.previousSibling || node.parentNode;

  while (!isTextNode(node) && getNodeName(node) !== 'BODY') {
    if (node.previousSibling) {
      node = node.previousSibling;

      while (node.lastChild) {
        node = node.lastChild;
      }
    } else {
      node = node.parentNode;
    }
  }

  if (getNodeName(node) === 'BODY') {
    node = null;
  }

  return node;
};

/**
 * test whether root contains the given node
 * @param {HTMLNode} root - root node
 * @param {HTMLNode} node - node to test
 * @returns {Boolean} true if root contains node
 */
var containsNode = function containsNode(root, node) {
  var walker = document.createTreeWalker(root, 4, null, false);
  var found = root === node;

  while (!found && walker.nextNode()) {
    found = walker.currentNode === node;
  }

  return found;
};

/**
 * find node by offset
 * @param {HTMLElement} root Root element
 * @param {Array.<number>} offsetList offset list
 * @param {function} textNodeFilter Text node filter
 * @returns {Array}
 * @ignore
 */
var findOffsetNode = function findOffsetNode(root, offsetList, textNodeFilter) {
  var result = [];
  var text = '';
  var walkerOffset = 0;
  var newWalkerOffset = void 0;

  if (!offsetList.length) {
    return result;
  }

  var offset = offsetList.shift();
  var walker = document.createTreeWalker(root, 4, null, false);

  while (walker.nextNode()) {
    text = walker.currentNode.nodeValue || '';

    if (textNodeFilter) {
      text = textNodeFilter(text);
    }

    newWalkerOffset = walkerOffset + text.length;

    while (newWalkerOffset >= offset) {
      result.push({
        container: walker.currentNode,
        offsetInContainer: offset - walkerOffset,
        offset: offset
      });

      if (!offsetList.length) {
        return result;
      }
      offset = offsetList.shift();
    }
    walkerOffset = newWalkerOffset;
  }

  // there should be offset left
  do {
    result.push({
      container: walker.currentNode,
      offsetInContainer: text.length,
      offset: offset
    });
    offset = offsetList.shift();
  } while (!_tuiCodeSnippet2.default.isUndefined(offset));

  return result;
};

var getNodeInfo = function getNodeInfo(node) {
  var path = {};

  path.tagName = node.nodeName;

  if (node.id) {
    path.id = node.id;
  }

  var className = node.className.trim();

  if (className) {
    path.className = className;
  }

  return path;
};

var getPath = function getPath(node, root) {
  var paths = [];

  while (node && node !== root) {
    if (isElemNode(node)) {
      paths.unshift(getNodeInfo(node));
    }

    node = node.parentNode;
  }

  return paths;
};

/**
 * Find next, previous TD or TH element by given TE element
 * @param {HTMLElement} node TD element
 * @param {string} direction Boolean value for direction true is find next cell
 * @returns {HTMLElement|null}
 * @ignore
 */
var getTableCellByDirection = function getTableCellByDirection(node, direction) {
  var isForward = true;
  var targetElement = null;

  if (_tuiCodeSnippet2.default.isUndefined(direction) || direction !== 'next' && direction !== 'previous') {
    return null;
  } else if (direction === 'previous') {
    isForward = false;
  }

  if (isForward) {
    targetElement = node.nextElementSibling;
  } else {
    targetElement = node.previousElementSibling;
  }

  return targetElement;
};

/**
 * Find sibling TR's TD element by given TD and direction
 * @param {HTMLElement} node TD element
 * @param {string} direction Boolean value for find first TD in next line
 * @param {boolean} [needEdgeCell=false] Boolean value for find first TD in next line
 * @returns {HTMLElement|null}
 * @ignore
 */
var getSiblingRowCellByDirection = function getSiblingRowCellByDirection(node, direction, needEdgeCell) {
  var isForward = true;
  var tableCellElement = null;
  var $node = void 0,
      index = void 0,
      $targetRowElement = void 0,
      $currentContainer = void 0,
      $siblingContainer = void 0,
      isSiblingContainerExists = void 0;

  if (_tuiCodeSnippet2.default.isUndefined(direction) || direction !== 'next' && direction !== 'previous') {
    return null;
  } else if (direction === 'previous') {
    isForward = false;
  }

  if (node) {
    $node = (0, _jquery2.default)(node);

    if (isForward) {
      $targetRowElement = $node.parent().next();
      $currentContainer = $node.parents('thead');
      $siblingContainer = $currentContainer[0] && $currentContainer.next();
      isSiblingContainerExists = $siblingContainer && getNodeName($siblingContainer[0]) === 'TBODY';

      index = 0;
    } else {
      $targetRowElement = $node.parent().prev();
      $currentContainer = $node.parents('tbody');
      $siblingContainer = $currentContainer[0] && $currentContainer.prev();
      isSiblingContainerExists = $siblingContainer && getNodeName($siblingContainer[0]) === 'THEAD';

      index = node.parentNode.childNodes.length - 1;
    }

    if (_tuiCodeSnippet2.default.isUndefined(needEdgeCell) || !needEdgeCell) {
      index = getNodeOffsetOfParent(node);
    }

    if ($targetRowElement[0]) {
      tableCellElement = $targetRowElement.children('td,th')[index];
    } else if ($currentContainer[0] && isSiblingContainerExists) {
      tableCellElement = $siblingContainer.find('td,th')[index];
    }

    return tableCellElement;
  }

  return null;
};

exports.default = {
  getNodeName: getNodeName,
  isTextNode: isTextNode,
  isElemNode: isElemNode,
  getTextLength: getTextLength,
  getOffsetLength: getOffsetLength,
  getPrevOffsetNodeUntil: getPrevOffsetNodeUntil,
  getNodeOffsetOfParent: getNodeOffsetOfParent,
  getChildNodeByOffset: getChildNodeByOffset,
  containsNode: containsNode,
  getTopPrevNodeUnder: getTopPrevNodeUnder,
  getTopNextNodeUnder: getTopNextNodeUnder,
  getParentUntilBy: getParentUntilBy,
  getParentUntil: getParentUntil,
  getTopBlockNode: getTopBlockNode,
  getPrevTextNode: getPrevTextNode,
  findOffsetNode: findOffsetNode,
  getPath: getPath,
  getNodeInfo: getNodeInfo,
  getTableCellByDirection: getTableCellByDirection,
  getSiblingRowCellByDirection: getSiblingRowCellByDirection
};

/***/ }),
/* 297 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

/* eslint-disable */
/*
 CSV-JS - A Comma-Separated Values parser for JS

 Built to rfc4180 standard, with options for adjusting strictness:
    - optional carriage returns for non-microsoft sources
    - automatically type-cast numeric an boolean values
    - relaxed mode which: ignores blank lines, ignores gargabe following quoted tokens, does not enforce a consistent record length

 Licensed under the MIT license: http://www.opensource.org/licenses/mit-license.php

 Permission is hereby granted, free of charge, to any person obtaining a copy
 of this software and associated documentation files (the "Software"), to deal
 in the Software without restriction, including without limitation the rights
 to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 copies of the Software, and to permit persons to whom the Software is
 furnished to do so, subject to the following conditions:

 The above copyright notice and this permission notice shall be included in
 all copies or substantial portions of the Software.

 Author Greg Kindel (twitter @gkindel), 2014
 */
/**
 * @modifier NHN Ent. FE Development Lab <dl_javascript@nhnent.com>
 */

(function (global) {
    'use strict';
    /**
     * @name CSV
     * @namespace
     * @ignore
     */
    // implemented as a singleton because JS is single threaded

    var CSV = {};
    CSV.RELAXED = false;
    CSV.IGNORE_RECORD_LENGTH = false;
    CSV.IGNORE_QUOTES = false;
    CSV.LINE_FEED_OK = true;
    CSV.CARRIAGE_RETURN_OK = true;
    CSV.DETECT_TYPES = true;
    CSV.IGNORE_QUOTE_WHITESPACE = true;
    CSV.DEBUG = false;

    CSV.COLUMN_SEPARATOR = ",";

    CSV.ERROR_EOF = "UNEXPECTED_END_OF_FILE";
    CSV.ERROR_CHAR = "UNEXPECTED_CHARACTER";
    CSV.ERROR_EOL = "UNEXPECTED_END_OF_RECORD";
    CSV.WARN_SPACE = "UNEXPECTED_WHITESPACE"; // not per spec, but helps debugging

    var QUOTE = "\"",
        CR = "\r",
        LF = "\n",
        SPACE = " ",
        TAB = "\t";

    // states
    var PRE_TOKEN = 0,
        MID_TOKEN = 1,
        POST_TOKEN = 2,
        POST_RECORD = 4;
    /**
     * @name CSV.parse
     * @function
     * @description rfc4180 standard csv parse
     * with options for strictness and data type conversion
     * By default, will automatically type-cast numeric an boolean values.
     * @param {String} str A CSV string
     * @return {Array} An array records, each of which is an array of scalar values.
     * @example
     * // simple
     * var rows = CSV.parse("one,two,three\nfour,five,six")
     * // rows equals [["one","two","three"],["four","five","six"]]
     * @example
     * // Though not a jQuery plugin, it is recommended to use with the $.ajax pipe() method:
     * $.get("csv.txt")
     *    .pipe( CSV.parse )
     *    .done( function(rows) {
     *        for( var i =0; i < rows.length; i++){
     *            console.log(rows[i])
     *        }
     *  });
     * @see http://www.ietf.org/rfc/rfc4180.txt
     */
    CSV.parse = function (str) {
        var result = CSV.result = [];
        CSV.COLUMN_SEPARATOR = CSV.COLUMN_SEPARATOR instanceof RegExp ? new RegExp('^' + CSV.COLUMN_SEPARATOR.source) : CSV.COLUMN_SEPARATOR;

        CSV.offset = 0;
        CSV.str = str;
        CSV.record_begin();

        CSV.debug("parse()", str);

        var c;
        while (1) {
            // pull char
            c = str[CSV.offset++];
            CSV.debug("c", c);

            // detect eof
            if (c == null) {
                if (CSV.escaped) {
                    CSV.error(CSV.ERROR_EOF);
                }

                if (CSV.record) {
                    CSV.token_end();
                    CSV.record_end();
                }

                CSV.debug("...bail", c, CSV.state, CSV.record);
                CSV.reset();
                break;
            }

            if (CSV.record == null) {
                // if relaxed mode, ignore blank lines
                if (CSV.RELAXED && (c == LF || c == CR && str[CSV.offset + 1] == LF)) {
                    continue;
                }
                CSV.record_begin();
            }

            // pre-token: look for start of escape sequence
            if (CSV.state == PRE_TOKEN) {

                if ((c === SPACE || c === TAB) && CSV.next_nonspace() == QUOTE) {
                    if (CSV.RELAXED || CSV.IGNORE_QUOTE_WHITESPACE) {
                        continue;
                    } else {
                        // not technically an error, but ambiguous and hard to debug otherwise
                        CSV.warn(CSV.WARN_SPACE);
                    }
                }

                if (c == QUOTE && !CSV.IGNORE_QUOTES) {
                    CSV.debug("...escaped start", c);
                    CSV.escaped = true;
                    CSV.state = MID_TOKEN;
                    continue;
                }
                CSV.state = MID_TOKEN;
            }

            // mid-token and escaped, look for sequences and end quote
            if (CSV.state == MID_TOKEN && CSV.escaped) {
                if (c == QUOTE) {
                    if (str[CSV.offset] == QUOTE) {
                        CSV.debug("...escaped quote", c);
                        CSV.token += QUOTE;
                        CSV.offset++;
                    } else {
                        CSV.debug("...escaped end", c);
                        CSV.escaped = false;
                        CSV.state = POST_TOKEN;
                    }
                } else {
                    CSV.token += c;
                    CSV.debug("...escaped add", c, CSV.token);
                }
                continue;
            }

            // fall-through: mid-token or post-token, not escaped
            if (c == CR) {
                if (str[CSV.offset] == LF) CSV.offset++;else if (!CSV.CARRIAGE_RETURN_OK) CSV.error(CSV.ERROR_CHAR);
                CSV.token_end();
                CSV.record_end();
            } else if (c == LF) {
                if (!(CSV.LINE_FEED_OK || CSV.RELAXED)) CSV.error(CSV.ERROR_CHAR);
                CSV.token_end();
                CSV.record_end();
            } else if (CSV.test_regex_separator(str) || CSV.COLUMN_SEPARATOR == c) {
                CSV.token_end();
            } else if (CSV.state == MID_TOKEN) {
                CSV.token += c;
                CSV.debug("...add", c, CSV.token);
            } else if (c === SPACE || c === TAB) {
                if (!CSV.IGNORE_QUOTE_WHITESPACE) CSV.error(CSV.WARN_SPACE);
            } else if (!CSV.RELAXED) {
                CSV.error(CSV.ERROR_CHAR);
            }
        }
        return result;
    };

    /**
     * @name CSV.stream
     * @function
     * @description stream a CSV file
     * @example
     * node -e "c=require('CSV-JS');require('fs').createReadStream('csv.txt').pipe(c.stream()).pipe(c.stream.json()).pipe(process.stdout)"
     * @ignore
     */
    CSV.stream = function () {
        var stream = __webpack_require__(32);
        var s = new stream.Transform({ objectMode: true });
        s.EOL = '\n';
        s.prior = "";
        s.emitter = function (s) {
            return function (e) {
                s.push(CSV.parse(e + s.EOL));
            };
        }(s);

        s._transform = function (chunk, encoding, done) {
            var lines = this.prior == "" ? chunk.toString().split(this.EOL) : (this.prior + chunk.toString()).split(this.EOL);
            this.prior = lines.pop();
            lines.forEach(this.emitter);
            done();
        };

        s._flush = function (done) {
            if (this.prior != "") {
                this.emitter(this.prior);
                this.prior = "";
            }
            done();
        };
        return s;
    };

    CSV.test_regex_separator = function (str) {
        if (!(CSV.COLUMN_SEPARATOR instanceof RegExp)) {
            return false;
        }

        var match;
        str = str.slice(CSV.offset - 1);
        match = CSV.COLUMN_SEPARATOR.exec(str);
        if (match) {
            CSV.offset += match[0].length - 1;
        }

        return match !== null;
    };

    CSV.stream.json = function () {
        var os = __webpack_require__(310);
        var stream = __webpack_require__(32);
        var s = new streamTransform({ objectMode: true });
        s._transform = function (chunk, encoding, done) {
            s.push(JSON.stringify(chunk.toString()) + os.EOL);
            done();
        };
        return s;
    };

    CSV.reset = function () {
        CSV.state = null;
        CSV.token = null;
        CSV.escaped = null;
        CSV.record = null;
        CSV.offset = null;
        CSV.result = null;
        CSV.str = null;
    };

    CSV.next_nonspace = function () {
        var i = CSV.offset;
        var c;
        while (i < CSV.str.length) {
            c = CSV.str[i++];
            if (!(c == SPACE || c === TAB)) {
                return c;
            }
        }
        return null;
    };

    CSV.record_begin = function () {
        CSV.escaped = false;
        CSV.record = [];
        CSV.token_begin();
        CSV.debug("record_begin");
    };

    CSV.record_end = function () {
        CSV.state = POST_RECORD;
        if (!(CSV.IGNORE_RECORD_LENGTH || CSV.RELAXED) && CSV.result.length > 0 && CSV.record.length != CSV.result[0].length) {
            CSV.error(CSV.ERROR_EOL);
        }
        CSV.result.push(CSV.record);
        CSV.debug("record end", CSV.record);
        CSV.record = null;
    };

    CSV.resolve_type = function (token) {
        if (token.match(/^[-+]?[0-9]+(\.[0-9]+)?([eE][-+]?[0-9]+)?$/)) {
            token = parseFloat(token);
        } else if (token.match(/^(true|false)$/i)) {
            token = Boolean(token.match(/true/i));
        } else if (token === "undefined") {
            token = undefined;
        } else if (token === "null") {
            token = null;
        }
        return token;
    };

    CSV.token_begin = function () {
        CSV.state = PRE_TOKEN;
        // considered using array, but http://www.sitepen.com/blog/2008/05/09/string-performance-an-analysis/
        CSV.token = "";
    };

    CSV.token_end = function () {
        if (CSV.DETECT_TYPES) {
            CSV.token = CSV.resolve_type(CSV.token);
        }
        CSV.record.push(CSV.token);
        CSV.debug("token end", CSV.token);
        CSV.token_begin();
    };

    CSV.debug = function () {
        if (CSV.DEBUG) console.log(arguments);
    };

    CSV.dump = function (msg) {
        return [msg, "at char", CSV.offset, ":", CSV.str.substr(CSV.offset - 50, 50).replace(/\r/mg, "\\r").replace(/\n/mg, "\\n").replace(/\t/mg, "\\t")].join(" ");
    };

    CSV.error = function (err) {
        var msg = CSV.dump(err);
        CSV.reset();
        throw msg;
    };

    CSV.warn = function (err) {
        if (!CSV.DEBUG) {
            return;
        }

        var msg = CSV.dump(err);
        try {
            console.warn(msg);
            return;
        } catch (e) {}

        try {
            console.log(msg);
        } catch (e) {}
    };

    // Node, PhantomJS, etc
    // eg.  var CSV = require("CSV"); CSV.parse(...);
    if (typeof module != 'undefined' && module.exports) {
        module.exports = CSV;
    }

    // CommonJS http://wiki.commonjs.org/wiki/Modules
    // eg.  var CSV = require("CSV").CSV; CSV.parse(...);
    else if (true) {
            exports.CSV = CSV;
        }

        // AMD https://github.com/amdjs/amdjs-api/wiki/AMD
        // eg.  require(['./csv.js'], function (CSV) { CSV.parse(...); } );
        else if (typeof define == 'function' && _typeof(define.amd) == 'object') {
                define([], function () {
                    return CSV;
                });
            }

            // standard js global
            // eg. CSV.parse(...);
            else if (global) {
                    global.CSV = CSV;
                }
})(undefined);

/***/ }),
/* 298 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.byteLength = byteLength
exports.toByteArray = toByteArray
exports.fromByteArray = fromByteArray

var lookup = []
var revLookup = []
var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array

var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
for (var i = 0, len = code.length; i < len; ++i) {
  lookup[i] = code[i]
  revLookup[code.charCodeAt(i)] = i
}

revLookup['-'.charCodeAt(0)] = 62
revLookup['_'.charCodeAt(0)] = 63

function placeHoldersCount (b64) {
  var len = b64.length
  if (len % 4 > 0) {
    throw new Error('Invalid string. Length must be a multiple of 4')
  }

  // the number of equal signs (place holders)
  // if there are two placeholders, than the two characters before it
  // represent one byte
  // if there is only one, then the three characters before it represent 2 bytes
  // this is just a cheap hack to not do indexOf twice
  return b64[len - 2] === '=' ? 2 : b64[len - 1] === '=' ? 1 : 0
}

function byteLength (b64) {
  // base64 is 4/3 + up to two characters of the original data
  return (b64.length * 3 / 4) - placeHoldersCount(b64)
}

function toByteArray (b64) {
  var i, l, tmp, placeHolders, arr
  var len = b64.length
  placeHolders = placeHoldersCount(b64)

  arr = new Arr((len * 3 / 4) - placeHolders)

  // if there are placeholders, only get up to the last complete 4 chars
  l = placeHolders > 0 ? len - 4 : len

  var L = 0

  for (i = 0; i < l; i += 4) {
    tmp = (revLookup[b64.charCodeAt(i)] << 18) | (revLookup[b64.charCodeAt(i + 1)] << 12) | (revLookup[b64.charCodeAt(i + 2)] << 6) | revLookup[b64.charCodeAt(i + 3)]
    arr[L++] = (tmp >> 16) & 0xFF
    arr[L++] = (tmp >> 8) & 0xFF
    arr[L++] = tmp & 0xFF
  }

  if (placeHolders === 2) {
    tmp = (revLookup[b64.charCodeAt(i)] << 2) | (revLookup[b64.charCodeAt(i + 1)] >> 4)
    arr[L++] = tmp & 0xFF
  } else if (placeHolders === 1) {
    tmp = (revLookup[b64.charCodeAt(i)] << 10) | (revLookup[b64.charCodeAt(i + 1)] << 4) | (revLookup[b64.charCodeAt(i + 2)] >> 2)
    arr[L++] = (tmp >> 8) & 0xFF
    arr[L++] = tmp & 0xFF
  }

  return arr
}

function tripletToBase64 (num) {
  return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F]
}

function encodeChunk (uint8, start, end) {
  var tmp
  var output = []
  for (var i = start; i < end; i += 3) {
    tmp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2])
    output.push(tripletToBase64(tmp))
  }
  return output.join('')
}

function fromByteArray (uint8) {
  var tmp
  var len = uint8.length
  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
  var output = ''
  var parts = []
  var maxChunkLength = 16383 // must be multiple of 3

  // go through the array every three bytes, we'll deal with trailing stuff later
  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))
  }

  // pad the end with zeros, but make sure to not forget the extra bytes
  if (extraBytes === 1) {
    tmp = uint8[len - 1]
    output += lookup[tmp >> 2]
    output += lookup[(tmp << 4) & 0x3F]
    output += '=='
  } else if (extraBytes === 2) {
    tmp = (uint8[len - 2] << 8) + (uint8[len - 1])
    output += lookup[tmp >> 10]
    output += lookup[(tmp >> 4) & 0x3F]
    output += lookup[(tmp << 2) & 0x3F]
    output += '='
  }

  parts.push(output)

  return parts.join('')
}


/***/ }),
/* 299 */
/***/ (function(module, exports) {

exports.read = function (buffer, offset, isLE, mLen, nBytes) {
  var e, m
  var eLen = nBytes * 8 - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var nBits = -7
  var i = isLE ? (nBytes - 1) : 0
  var d = isLE ? -1 : 1
  var s = buffer[offset + i]

  i += d

  e = s & ((1 << (-nBits)) - 1)
  s >>= (-nBits)
  nBits += eLen
  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}

  m = e & ((1 << (-nBits)) - 1)
  e >>= (-nBits)
  nBits += mLen
  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}

  if (e === 0) {
    e = 1 - eBias
  } else if (e === eMax) {
    return m ? NaN : ((s ? -1 : 1) * Infinity)
  } else {
    m = m + Math.pow(2, mLen)
    e = e - eBias
  }
  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
}

exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
  var e, m, c
  var eLen = nBytes * 8 - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
  var i = isLE ? 0 : (nBytes - 1)
  var d = isLE ? 1 : -1
  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0

  value = Math.abs(value)

  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0
    e = eMax
  } else {
    e = Math.floor(Math.log(value) / Math.LN2)
    if (value * (c = Math.pow(2, -e)) < 1) {
      e--
      c *= 2
    }
    if (e + eBias >= 1) {
      value += rt / c
    } else {
      value += rt * Math.pow(2, 1 - eBias)
    }
    if (value * c >= 2) {
      e++
      c /= 2
    }

    if (e + eBias >= eMax) {
      m = 0
      e = eMax
    } else if (e + eBias >= 1) {
      m = (value * c - 1) * Math.pow(2, mLen)
      e = e + eBias
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
      e = 0
    }
  }

  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

  e = (e << mLen) | m
  eLen += mLen
  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

  buffer[offset + i - d] |= s * 128
}


/***/ }),
/* 300 */
/***/ (function(module, exports) {

/* (ignored) */

/***/ }),
/* 301 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/*<replacement>*/

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Buffer = __webpack_require__(13).Buffer;
/*</replacement>*/

function copyBuffer(src, target, offset) {
  src.copy(target, offset);
}

module.exports = function () {
  function BufferList() {
    _classCallCheck(this, BufferList);

    this.head = null;
    this.tail = null;
    this.length = 0;
  }

  BufferList.prototype.push = function push(v) {
    var entry = { data: v, next: null };
    if (this.length > 0) this.tail.next = entry;else this.head = entry;
    this.tail = entry;
    ++this.length;
  };

  BufferList.prototype.unshift = function unshift(v) {
    var entry = { data: v, next: this.head };
    if (this.length === 0) this.tail = entry;
    this.head = entry;
    ++this.length;
  };

  BufferList.prototype.shift = function shift() {
    if (this.length === 0) return;
    var ret = this.head.data;
    if (this.length === 1) this.head = this.tail = null;else this.head = this.head.next;
    --this.length;
    return ret;
  };

  BufferList.prototype.clear = function clear() {
    this.head = this.tail = null;
    this.length = 0;
  };

  BufferList.prototype.join = function join(s) {
    if (this.length === 0) return '';
    var p = this.head;
    var ret = '' + p.data;
    while (p = p.next) {
      ret += s + p.data;
    }return ret;
  };

  BufferList.prototype.concat = function concat(n) {
    if (this.length === 0) return Buffer.alloc(0);
    if (this.length === 1) return this.head.data;
    var ret = Buffer.allocUnsafe(n >>> 0);
    var p = this.head;
    var i = 0;
    while (p) {
      copyBuffer(p.data, ret, i);
      i += p.data.length;
      p = p.next;
    }
    return ret;
  };

  return BufferList;
}();

/***/ }),
/* 302 */
/***/ (function(module, exports, __webpack_require__) {

var apply = Function.prototype.apply;

// DOM APIs, for completeness

exports.setTimeout = function() {
  return new Timeout(apply.call(setTimeout, window, arguments), clearTimeout);
};
exports.setInterval = function() {
  return new Timeout(apply.call(setInterval, window, arguments), clearInterval);
};
exports.clearTimeout =
exports.clearInterval = function(timeout) {
  if (timeout) {
    timeout.close();
  }
};

function Timeout(id, clearFn) {
  this._id = id;
  this._clearFn = clearFn;
}
Timeout.prototype.unref = Timeout.prototype.ref = function() {};
Timeout.prototype.close = function() {
  this._clearFn.call(window, this._id);
};

// Does not start the time, just sets up the members needed.
exports.enroll = function(item, msecs) {
  clearTimeout(item._idleTimeoutId);
  item._idleTimeout = msecs;
};

exports.unenroll = function(item) {
  clearTimeout(item._idleTimeoutId);
  item._idleTimeout = -1;
};

exports._unrefActive = exports.active = function(item) {
  clearTimeout(item._idleTimeoutId);

  var msecs = item._idleTimeout;
  if (msecs >= 0) {
    item._idleTimeoutId = setTimeout(function onTimeout() {
      if (item._onTimeout)
        item._onTimeout();
    }, msecs);
  }
};

// setimmediate attaches itself to the global object
__webpack_require__(303);
exports.setImmediate = setImmediate;
exports.clearImmediate = clearImmediate;


/***/ }),
/* 303 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global, process) {(function (global, undefined) {
    "use strict";

    if (global.setImmediate) {
        return;
    }

    var nextHandle = 1; // Spec says greater than zero
    var tasksByHandle = {};
    var currentlyRunningATask = false;
    var doc = global.document;
    var registerImmediate;

    function setImmediate(callback) {
      // Callback can either be a function or a string
      if (typeof callback !== "function") {
        callback = new Function("" + callback);
      }
      // Copy function arguments
      var args = new Array(arguments.length - 1);
      for (var i = 0; i < args.length; i++) {
          args[i] = arguments[i + 1];
      }
      // Store and register the task
      var task = { callback: callback, args: args };
      tasksByHandle[nextHandle] = task;
      registerImmediate(nextHandle);
      return nextHandle++;
    }

    function clearImmediate(handle) {
        delete tasksByHandle[handle];
    }

    function run(task) {
        var callback = task.callback;
        var args = task.args;
        switch (args.length) {
        case 0:
            callback();
            break;
        case 1:
            callback(args[0]);
            break;
        case 2:
            callback(args[0], args[1]);
            break;
        case 3:
            callback(args[0], args[1], args[2]);
            break;
        default:
            callback.apply(undefined, args);
            break;
        }
    }

    function runIfPresent(handle) {
        // From the spec: "Wait until any invocations of this algorithm started before this one have completed."
        // So if we're currently running a task, we'll need to delay this invocation.
        if (currentlyRunningATask) {
            // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a
            // "too much recursion" error.
            setTimeout(runIfPresent, 0, handle);
        } else {
            var task = tasksByHandle[handle];
            if (task) {
                currentlyRunningATask = true;
                try {
                    run(task);
                } finally {
                    clearImmediate(handle);
                    currentlyRunningATask = false;
                }
            }
        }
    }

    function installNextTickImplementation() {
        registerImmediate = function(handle) {
            process.nextTick(function () { runIfPresent(handle); });
        };
    }

    function canUsePostMessage() {
        // The test against `importScripts` prevents this implementation from being installed inside a web worker,
        // where `global.postMessage` means something completely different and can't be used for this purpose.
        if (global.postMessage && !global.importScripts) {
            var postMessageIsAsynchronous = true;
            var oldOnMessage = global.onmessage;
            global.onmessage = function() {
                postMessageIsAsynchronous = false;
            };
            global.postMessage("", "*");
            global.onmessage = oldOnMessage;
            return postMessageIsAsynchronous;
        }
    }

    function installPostMessageImplementation() {
        // Installs an event handler on `global` for the `message` event: see
        // * https://developer.mozilla.org/en/DOM/window.postMessage
        // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages

        var messagePrefix = "setImmediate$" + Math.random() + "$";
        var onGlobalMessage = function(event) {
            if (event.source === global &&
                typeof event.data === "string" &&
                event.data.indexOf(messagePrefix) === 0) {
                runIfPresent(+event.data.slice(messagePrefix.length));
            }
        };

        if (global.addEventListener) {
            global.addEventListener("message", onGlobalMessage, false);
        } else {
            global.attachEvent("onmessage", onGlobalMessage);
        }

        registerImmediate = function(handle) {
            global.postMessage(messagePrefix + handle, "*");
        };
    }

    function installMessageChannelImplementation() {
        var channel = new MessageChannel();
        channel.port1.onmessage = function(event) {
            var handle = event.data;
            runIfPresent(handle);
        };

        registerImmediate = function(handle) {
            channel.port2.postMessage(handle);
        };
    }

    function installReadyStateChangeImplementation() {
        var html = doc.documentElement;
        registerImmediate = function(handle) {
            // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted
            // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.
            var script = doc.createElement("script");
            script.onreadystatechange = function () {
                runIfPresent(handle);
                script.onreadystatechange = null;
                html.removeChild(script);
                script = null;
            };
            html.appendChild(script);
        };
    }

    function installSetTimeoutImplementation() {
        registerImmediate = function(handle) {
            setTimeout(runIfPresent, 0, handle);
        };
    }

    // If supported, we should attach to the prototype of global, since that is where setTimeout et al. live.
    var attachTo = Object.getPrototypeOf && Object.getPrototypeOf(global);
    attachTo = attachTo && attachTo.setTimeout ? attachTo : global;

    // Don't get fooled by e.g. browserify environments.
    if ({}.toString.call(global.process) === "[object process]") {
        // For Node.js before 0.9
        installNextTickImplementation();

    } else if (canUsePostMessage()) {
        // For non-IE10 modern browsers
        installPostMessageImplementation();

    } else if (global.MessageChannel) {
        // For web workers, where supported
        installMessageChannelImplementation();

    } else if (doc && "onreadystatechange" in doc.createElement("script")) {
        // For IE 6–8
        installReadyStateChangeImplementation();

    } else {
        // For older browsers
        installSetTimeoutImplementation();
    }

    attachTo.setImmediate = setImmediate;
    attachTo.clearImmediate = clearImmediate;
}(typeof self === "undefined" ? typeof global === "undefined" ? this : global : self));

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(8), __webpack_require__(11)))

/***/ }),
/* 304 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {
/**
 * Module exports.
 */

module.exports = deprecate;

/**
 * Mark that a method should not be used.
 * Returns a modified function which warns once by default.
 *
 * If `localStorage.noDeprecation = true` is set, then it is a no-op.
 *
 * If `localStorage.throwDeprecation = true` is set, then deprecated functions
 * will throw an Error when invoked.
 *
 * If `localStorage.traceDeprecation = true` is set, then deprecated functions
 * will invoke `console.trace()` instead of `console.error()`.
 *
 * @param {Function} fn - the function to deprecate
 * @param {String} msg - the string to print to the console when `fn` is invoked
 * @returns {Function} a new "deprecated" version of `fn`
 * @api public
 */

function deprecate (fn, msg) {
  if (config('noDeprecation')) {
    return fn;
  }

  var warned = false;
  function deprecated() {
    if (!warned) {
      if (config('throwDeprecation')) {
        throw new Error(msg);
      } else if (config('traceDeprecation')) {
        console.trace(msg);
      } else {
        console.warn(msg);
      }
      warned = true;
    }
    return fn.apply(this, arguments);
  }

  return deprecated;
}

/**
 * Checks `localStorage` for boolean values for the given `name`.
 *
 * @param {String} name
 * @returns {Boolean}
 * @api private
 */

function config (name) {
  // accessing global.localStorage can trigger a DOMException in sandboxed iframes
  try {
    if (!global.localStorage) return false;
  } catch (_) {
    return false;
  }
  var val = global.localStorage[name];
  if (null == val) return false;
  return String(val).toLowerCase() === 'true';
}

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(8)))

/***/ }),
/* 305 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// a passthrough stream.
// basically just the most minimal sort of Transform stream.
// Every written chunk gets output as-is.



module.exports = PassThrough;

var Transform = __webpack_require__(39);

/*<replacement>*/
var util = __webpack_require__(10);
util.inherits = __webpack_require__(9);
/*</replacement>*/

util.inherits(PassThrough, Transform);

function PassThrough(options) {
  if (!(this instanceof PassThrough)) return new PassThrough(options);

  Transform.call(this, options);
}

PassThrough.prototype._transform = function (chunk, encoding, cb) {
  cb(null, chunk);
};

/***/ }),
/* 306 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(20);


/***/ }),
/* 307 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(7);


/***/ }),
/* 308 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(19).Transform


/***/ }),
/* 309 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(19).PassThrough


/***/ }),
/* 310 */
/***/ (function(module, exports) {

exports.endianness = function () { return 'LE' };

exports.hostname = function () {
    if (typeof location !== 'undefined') {
        return location.hostname
    }
    else return '';
};

exports.loadavg = function () { return [] };

exports.uptime = function () { return 0 };

exports.freemem = function () {
    return Number.MAX_VALUE;
};

exports.totalmem = function () {
    return Number.MAX_VALUE;
};

exports.cpus = function () { return [] };

exports.type = function () { return 'Browser' };

exports.release = function () {
    if (typeof navigator !== 'undefined') {
        return navigator.appVersion;
    }
    return '';
};

exports.networkInterfaces
= exports.getNetworkInterfaces
= function () { return {} };

exports.arch = function () { return 'javascript' };

exports.platform = function () { return 'browser' };

exports.tmpdir = exports.tmpDir = function () {
    return '/tmp';
};

exports.EOL = '\n';

exports.homedir = function () {
	return '/'
};


/***/ }),
/* 311 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _jquery = __webpack_require__(1);

var _jquery2 = _interopRequireDefault(_jquery);

var _editorProxy = __webpack_require__(3);

var _editorProxy2 = _interopRequireDefault(_editorProxy);

__webpack_require__(312);

var _mergedTableCreator = __webpack_require__(313);

var _mergedTableCreator2 = _interopRequireDefault(_mergedTableCreator);

var _tableUnmergePreparer = __webpack_require__(314);

var _tableUnmergePreparer2 = _interopRequireDefault(_tableUnmergePreparer);

var _toMarkRenderer = __webpack_require__(315);

var _toMarkRenderer2 = _interopRequireDefault(_toMarkRenderer);

var _wwMergedTableManager = __webpack_require__(316);

var _wwMergedTableManager2 = _interopRequireDefault(_wwMergedTableManager);

var _wwMergedTableSelectionManager = __webpack_require__(317);

var _wwMergedTableSelectionManager2 = _interopRequireDefault(_wwMergedTableSelectionManager);

var _mergedTableAddRow = __webpack_require__(318);

var _mergedTableAddRow2 = _interopRequireDefault(_mergedTableAddRow);

var _mergedTableAddCol = __webpack_require__(319);

var _mergedTableAddCol2 = _interopRequireDefault(_mergedTableAddCol);

var _mergedTableRemoveRow = __webpack_require__(320);

var _mergedTableRemoveRow2 = _interopRequireDefault(_mergedTableRemoveRow);

var _mergedTableRemoveCol = __webpack_require__(321);

var _mergedTableRemoveCol2 = _interopRequireDefault(_mergedTableRemoveCol);

var _mergedTableAlignCol = __webpack_require__(322);

var _mergedTableAlignCol2 = _interopRequireDefault(_mergedTableAlignCol);

var _mergeCell = __webpack_require__(323);

var _mergeCell2 = _interopRequireDefault(_mergeCell);

var _unmergeCell = __webpack_require__(324);

var _unmergeCell2 = _interopRequireDefault(_unmergeCell);

var _mergedTableUI = __webpack_require__(325);

var _mergedTableUI2 = _interopRequireDefault(_mergedTableUI);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * table extension
 * @param {Editor} editor - editor instance
 * @ignore
 */
/**
* @fileoverview Implements table extension
* @author NHN Ent. FE Development Lab <dl_javascript@nhnent.com>
*/
function tableExtension(editor) {
  var eventManager = editor.eventManager;


  editor.toMarkOptions = editor.toMarkOptions || {};
  editor.toMarkOptions.renderer = _toMarkRenderer2.default;
  _bindEvents(eventManager);

  if (editor.isViewer()) {
    return;
  }

  var wwComponentManager = editor.wwEditor.componentManager;
  var popupTableUtils = editor._ui.popupTableUtils;


  _addCommands(editor);
  _changeWysiwygManagers(wwComponentManager);

  if (editor._ui.popupTableUtils) {
    _mergedTableUI2.default.updateContextMenu(popupTableUtils, eventManager, wwComponentManager.getManager('tableSelection'));
  }
}

/**
 * Add commands.
 * @param {object} editor - editor instance
 * @private
 */
function _addCommands(editor) {
  editor.addCommand(_mergeCell2.default);
  editor.addCommand(_unmergeCell2.default);
}

/**
 * Change wysiwyg component managers.
 * @param {object} wwComponentManager - componentMananger instance
 * @private
 */
function _changeWysiwygManagers(wwComponentManager) {
  wwComponentManager.removeManager('table');
  wwComponentManager.removeManager('tableSelection');

  wwComponentManager.addManager(_wwMergedTableManager2.default);
  wwComponentManager.addManager(_wwMergedTableSelectionManager2.default);
}

/**
 * Change html by onChangeTable function.
 * @param {string} html - original html
 * @param {function} onChangeTable - function for changing html
 * @returns {string}
 * @private
 */
function _changeHtml(html, onChangeTable) {
  var $tempDiv = (0, _jquery2.default)('<div>' + html + '</div>');
  var $tables = $tempDiv.find('table');

  if ($tables.length) {
    $tables.get().forEach(function (tableElement) {
      var changedTableElement = onChangeTable(tableElement);

      (0, _jquery2.default)(tableElement).replaceWith(changedTableElement);
    });

    html = $tempDiv.html();
  }

  return html;
}

/**
 * Snatch wysiwyg command.
 * @param {{command: object}} commandWrapper - wysiwyg command wrapper
 * @private
 */
function _snatchWysiwygCommand(commandWrapper) {
  var command = commandWrapper.command;


  if (!command.isWWType()) {
    return;
  }

  switch (command.getName()) {
    case 'AddRow':
      commandWrapper.command = _mergedTableAddRow2.default;
      break;
    case 'AddCol':
      commandWrapper.command = _mergedTableAddCol2.default;
      break;
    case 'RemoveRow':
      commandWrapper.command = _mergedTableRemoveRow2.default;
      break;
    case 'RemoveCol':
      commandWrapper.command = _mergedTableRemoveCol2.default;
      break;
    case 'AlignCol':
      commandWrapper.command = _mergedTableAlignCol2.default;
      break;
    default:
  }
}

/**
 * Bind events.
 * @param {object} eventManager - eventManager instance
 * @private
 */
function _bindEvents(eventManager) {
  eventManager.listen('convertorAfterMarkdownToHtmlConverted', function (html) {
    return _changeHtml(html, _mergedTableCreator2.default);
  });
  eventManager.listen('convertorBeforeHtmlToMarkdownConverted', function (html) {
    return _changeHtml(html, _tableUnmergePreparer2.default);
  });
  eventManager.listen('addCommandBefore', _snatchWysiwygCommand);
}

_editorProxy2.default.defineExtension('table', tableExtension);

/***/ }),
/* 312 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _editorProxy = __webpack_require__(3);

var _editorProxy2 = _interopRequireDefault(_editorProxy);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var i18n = _editorProxy2.default.i18n; /**
                                       * @fileoverview i18n for table extension
                                       * @author NHN Ent. FE Development Lab <dl_javascript@nhnent.com>
                                       */

if (i18n) {
  i18n.setLanguage(['ko', 'ko_KR'], {
    'Merge cells': '셀 병합',
    'Unmerge cells': '셀 병합해제',
    'Cannot change part of merged cell': '병합 된 셀의 일부를 변경할 수 없습니다.',
    'Cannot paste row merged cells into the table header': '테이블 헤더에는 행 병합된 셀을 붙여넣을 수 없습니다.'
  });

  i18n.setLanguage(['en', 'en_US'], {
    'Merge cells': 'Merge cells',
    'Unmerge cells': 'Unmerge cells',
    'Cannot change part of merged cell': 'Cannot change part of merged cell.',
    'Cannot paste row merged cells into the table header': 'Cannot paste row merged cells into the table header.'
  });

  i18n.setLanguage(['es', 'es_ES'], {
    'Merge cells': 'Combinar celdas',
    'Unmerge cells': 'Separar celdas',
    'Cannot change part of merged cell': 'No se puede cambiar parte de una celda combinada.',
    'Cannot paste row merged cells into the table header': 'No se pueden pegar celdas combinadas en el encabezado de tabla.'
  });

  i18n.setLanguage(['ja', 'ja_JP'], {
    'Merge cells': 'セルの結合',
    'Unmerge cells': 'セルの結合を解除',
    'Cannot change part of merged cell': '結合されたセルの一部を変更することはできません。',
    'Cannot paste row merged cells into the table header': '行にマージされたセルをヘッダーに貼り付けることはできません。'
  });

  i18n.setLanguage(['nl', 'nl_NL'], {
    'Merge cells': 'cellen samenvoegen',
    'Unmerge cells': 'Samenvoegen cellen ongedaan maken',
    'Cannot change part of merged cell': 'Kan geen deel uit van samengevoegde cel te veranderen.',
    'Cannot paste row merged cells into the table header': 'Kan niet plakken rij samengevoegde cellen in de koptekst. '
  });

  i18n.setLanguage(['zh', 'zh_CN'], {
    'Merge cells': '合并单元格',
    'Unmerge cells': '取消合并单元格',
    'Cannot change part of merged cell': '无法更改合并单元格的一部分。',
    'Cannot paste row merged cells into the table header': '无法将行合并单元格粘贴到标题中。'
  });

  i18n.setLanguage(['de', 'de_DE'], {
    'Merge cells': 'Zellen zusammenführen',
    'Unmerge cells': 'Zusammenführen rückgängig machen',
    'Cannot change part of merged cell': 'Der Teil der verbundenen Zelle kann nicht geändert werden.',
    'Cannot paste row merged cells into the table header': 'Die Zeile der verbundenen Zellen kann nicht in die Kopfzeile eingefügt werden.'
  });

  i18n.setLanguage(['ru', 'ru_RU'], {
    'Merge cells': 'Объединить ячейки',
    'Unmerge cells': 'Разъединить ячейки',
    'Cannot change part of merged cell': 'Вы не можете изменять часть комбинированной ячейки.',
    'Cannot paste row merged cells into the table header': 'Вы не можете вставлять объединенные ячейки в заголовок таблицы.'
  });

  i18n.setLanguage(['fr', 'fr_FR'], {
    'Merge cells': 'Fusionner les cellules',
    'Unmerge cells': 'Séparer les cellules',
    'Cannot change part of merged cell': 'Impossible de modifier une partie de la cellule fusionnée.',
    'Cannot paste row merged cells into the table header': 'Impossible de coller les cellules fusionnées dans l\'en-tête du tableau.'
  });

  i18n.setLanguage(['uk', 'uk_UA'], {
    'Merge cells': 'Об\'єднати комірки',
    'Unmerge cells': 'Роз\'єднати комірки',
    'Cannot change part of merged cell': 'Ви не можете змінювати частину комбінованої комірки.',
    'Cannot paste row merged cells into the table header': 'Ви не можете вставляти об\'єднані комірки в заголовок таблиці.'
  });

  i18n.setLanguage(['tr', 'tr_TR'], {
    'Merge cells': 'Hücreleri birleştir',
    'Unmerge cells': 'Hücreleri ayır',
    'Cannot change part of merged cell': 'Birleştirilmiş hücrelerin bir kısmı değiştirelemez.',
    'Cannot paste row merged cells into the table header': 'Satırda birleştirilmiş hücreler sütun başlığına yapıştırılamaz'
  });

  i18n.setLanguage(['fi', 'fi_FI'], {
    'Merge cells': 'Yhdistä solut',
    'Unmerge cells': 'Jaa solut',
    'Cannot change part of merged cell': 'Yhdistettyjen solujen osaa ei voi muuttaa',
    'Cannot paste row merged cells into the table header': 'Soluja ei voi yhdistää taulukon otsikkoriviin'
  });
}

/***/ }),
/* 313 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports._extractPropertiesForMerge = _extractPropertiesForMerge;
exports._parseTableCell = _parseTableCell;
exports._createTableObjectFrom$Table = _createTableObjectFrom$Table;
exports._divideTrs = _divideTrs;
exports._mergeByColspan = _mergeByColspan;
exports._getRemovalTdCountsByRowspan = _getRemovalTdCountsByRowspan;
exports._mergeByRowspan = _mergeByRowspan;
exports.default = createMergedTable;

var _jquery = __webpack_require__(1);

var _jquery2 = _interopRequireDefault(_jquery);

var _tuiCodeSnippet = __webpack_require__(2);

var _tuiCodeSnippet2 = _interopRequireDefault(_tuiCodeSnippet);

var _tableRenderer = __webpack_require__(5);

var _tableRenderer2 = _interopRequireDefault(_tableRenderer);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Extract properties for merge.
 * @param {string} value - value
 * @param {string} type - merge type like colspan, rowspan
 * @param {string} oppossitType - oppossit merge type
 *                                if merge type is colspan, opossit merge type is rowspan
 * @returns {Array.<number|string>} - returns merge count and value
 * @private
 */
function _extractPropertiesForMerge(value, type, oppossitType) {
  var regex = new RegExp('^((?:' + oppossitType + '=[0-9]+:)?)' + type + '=([0-9]+):(.*)');
  var regexResult = regex.exec(value);
  var mergeCount = 1;

  if (regexResult) {
    mergeCount = parseInt(regexResult[2], 10);
    value = regexResult[1] + regexResult[3];
  }

  return [mergeCount, value];
}

/**
 * Parse table cell element like td, th.
 * @param {HTMLElement} cell - table cell element like td, th
 * @returns {{
 *   nodeName: string,
 *   colspan: number,
 *   rowspan: number,
 *   content: string,
 *   align: string
 * }}
 * @private
 */
/**
* @fileoverview Implements mergedTableCreator.
* @author NHN Ent. FE Development Lab <dl_javascript@nhnent.com>
*/
function _parseTableCell(cell) {
  var nodeName = cell.nodeName;

  var align = cell.align || '';
  var content = cell.innerHTML.trim();
  var colspan = null;
  var rowspan = null;

  var _extractPropertiesFor = _extractPropertiesForMerge(content, '@cols', '@rows');

  colspan = _extractPropertiesFor[0];
  content = _extractPropertiesFor[1];

  var _extractPropertiesFor2 = _extractPropertiesForMerge(content, '@rows', '@cols');

  rowspan = _extractPropertiesFor2[0];
  content = _extractPropertiesFor2[1];


  return {
    nodeName: nodeName,
    colspan: colspan,
    rowspan: rowspan,
    content: content,
    align: align
  };
}

/**
 * Create table object from jQuery table.
 * @param {jQuery} $table - jQuery table
 * @returns {Array.<Array.<object>>}
 * @private
 */
function _createTableObjectFrom$Table($table) {
  return $table.find('tr').get().map(function (tr) {
    return (0, _jquery2.default)(tr).find('td, th').get().map(_parseTableCell);
  });
}

/**
 * Find index by onFind function.
 * @param {Array} arr - target array
 * @param {function} onFind - find function
 * @returns {number}
 * @private
 */
function _findIndex(arr, onFind) {
  var foundIndex = -1;

  _tuiCodeSnippet2.default.forEach(arr, function (item, index) {
    var nextFind = true;
    if (onFind(item, index)) {
      foundIndex = index;
      nextFind = false;
    }

    return nextFind;
  });

  return foundIndex;
}

/**
 * Separate the trs according to the type of parent, such as thead and tbody.
 * @param {Array.<Array.<object>>} trs - tr list
 * @returns {Array.<Array.<Array.<object>>>} - returns thead and tbody
 * @private
 */
function _divideTrs(trs) {
  var tbodyStartIndex = _findIndex(trs, function (tr) {
    return tr[0].nodeName === 'TD';
  });

  return [trs.slice(0, tbodyStartIndex), trs.slice(tbodyStartIndex)];
}

/**
 * Merge by colspan.
 * @param {Array.<Array.<object>>} trs - tr list
 * @private
 */
function _mergeByColspan(trs) {
  trs.forEach(function (tr) {
    var tdCount = tr.length;
    var removalCount = 0;

    tr.forEach(function (td) {
      removalCount += td.colspan - 1;
    });

    tr.splice(tdCount - removalCount);
  });
}

/**
 * Get removal td counts by rowspan.
 * @param {Array.<Array.<object>>} trs - tr list
 * @returns {number}
 * @private
 */
function _getRemovalTdCountsByRowspan(trs) {
  var trIndexes = trs.map(function (tr, index) {
    return index;
  });
  var removalCounts = trIndexes.map(function () {
    return 0;
  });

  trs.forEach(function (tr, trIndex) {
    var rowspanTds = tr.filter(function (td) {
      return td.rowspan > 1;
    });
    var startTrIndexForRemoval = trIndex + 1;

    rowspanTds.forEach(function (td) {
      var removeCount = td.colspan;
      var endTrIndexForRemoval = startTrIndexForRemoval + (td.rowspan - 1);

      trIndexes.slice(startTrIndexForRemoval, endTrIndexForRemoval).forEach(function (removeIndex) {
        removalCounts[removeIndex] += removeCount;
      });
    });
  });

  return removalCounts;
}

/**
 * Merge by rowspan.
 * @param {Array.<Array.<object>>} trs - tr list
 * @private
 */
function _mergeByRowspan(trs) {
  var removalCounts = _getRemovalTdCountsByRowspan(trs);

  trs.forEach(function (tr, trIndex) {
    tr.splice(tr.length - removalCounts[trIndex]);
  });
}

/**
 * Create merged table by @cols, @rows value in td innerHTML.
 * @param {HTMLElement} tableElement - unmerged table
 * @returns {HTMLElement}
 */
function createMergedTable(tableElement) {
  var table = _createTableObjectFrom$Table((0, _jquery2.default)(tableElement));

  var _divideTrs2 = _divideTrs(table),
      thead = _divideTrs2[0],
      tbody = _divideTrs2[1];

  _mergeByColspan(thead);
  _mergeByColspan(tbody);
  _mergeByRowspan(tbody);

  return (0, _jquery2.default)(_tableRenderer2.default.createTableHtml(table))[0];
}

/***/ }),
/* 314 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports._prependMergeSyntaxToContent = _prependMergeSyntaxToContent;
exports.default = prepareTableUnmerge;

var _jquery = __webpack_require__(1);

var _jquery2 = _interopRequireDefault(_jquery);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Prepend merge syntax to content.
 * @param {HTMLElement} cell - td or th
 * @private
 */
function _prependMergeSyntaxToContent(cell) {
  var $cell = (0, _jquery2.default)(cell);
  var colspan = $cell.attr('colspan') || '';
  var rowspan = $cell.attr('rowspan') || '';
  var content = $cell.html();

  if (colspan) {
    content = '@cols=' + colspan + ':' + content;
  }

  if (rowspan) {
    content = '@rows=' + rowspan + ':' + content;
  }

  if (content) {
    $cell.html(content);
  }
}

/**
 * Prepare table unmerge.
 * @param {HTMLElement} tableElement - table element
 * @returns {HTMLElement}
 */
/**
* @fileoverview Implements tableUnmergePreparer.
* @author NHN Ent. FE Development Lab <dl_javascript@nhnent.com>
*/
function prepareTableUnmerge(tableElement) {
  (0, _jquery2.default)(tableElement).find('td, th').get().forEach(_prependMergeSyntaxToContent);

  return tableElement;
}

/***/ }),
/* 315 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports._getAdditionalThCount = _getAdditionalThCount;
exports._createTheadMarkdown = _createTheadMarkdown;

var _jquery = __webpack_require__(1);

var _jquery2 = _interopRequireDefault(_jquery);

var _tuiCodeSnippet = __webpack_require__(2);

var _tuiCodeSnippet2 = _interopRequireDefault(_tuiCodeSnippet);

var _toMark = __webpack_require__(30);

var _toMark2 = _interopRequireDefault(_toMark);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var RX_COLS = /@cols=[0-9]+:/g;

/**
 * Create repeat string.
 * @param {string} str - target string
 * @param {number} count - count
 * @returns {string}
 * @private
 */
/**
* @fileoverview Implements toMarkRendererCreator.
* @author NHN Ent. FE Development Lab <dl_javascript@nhnent.com>
*/
function _createRepeatString(str, count) {
  return _tuiCodeSnippet2.default.range(0, count).map(function () {
    return str;
  }).join('');
}

/**
 * Make table head align text.
 * Copy from https://github.com/nhnent/to-mark/blob/develop/src/renderer.gfm.js
 * @param {HTMLElement} thElement - Table head cell element
 * @returns {string}
 * @private
 */
function _makeTableHeadAlignText(thElement) {
  var align = thElement.align;

  var textContent = (thElement.textContent || thElement.innerText).replace(RX_COLS, '');
  var textLength = textContent.length;
  var leftAlignValue = '';
  var rightAlignValue = '';

  if (align) {
    if (align === 'left') {
      leftAlignValue = ':';
      textLength -= 1;
    } else if (align === 'right') {
      rightAlignValue = ':';
      textLength -= 1;
    } else if (align === 'center') {
      rightAlignValue = ':';
      leftAlignValue = ':';
      textLength -= 2;
    }
  }

  textLength = Math.max(textLength, 3);

  return leftAlignValue + _createRepeatString('-', textLength) + rightAlignValue;
}

/**
 * Get additional th element count.
 * @param {Array.<HTMLElement>} ths - th element list
 * @private
 * @returns {Number}
 */
function _getAdditionalThCount(ths) {
  var additionalThCount = 0;

  ths.filter(function (th) {
    return (0, _jquery2.default)(th).attr('colspan');
  }).forEach(function (th) {
    additionalThCount += parseInt((0, _jquery2.default)(th).attr('colspan'), 10) - 1;
  });

  return additionalThCount;
}

/**
 * Create thead markdown.
 * @param {HTMLElement} theadElement - theadElement element
 * @param {string} theadContentMarkdown - thead markdown content
 * @returns {string}
 * @private
 */
function _createTheadMarkdown(theadElement, theadContentMarkdown) {
  var ths = (0, _jquery2.default)(theadElement).find('th').get();
  var align = ths.map(function (th) {
    return ' ' + _makeTableHeadAlignText(th) + ' |';
  }).join('');

  align += _createRepeatString(' --- |', _getAdditionalThCount(ths));

  return theadContentMarkdown ? theadContentMarkdown + '|' + align + '\n' : '';
}

exports.default = _toMark2.default.Renderer.factory(_toMark2.default.gfmRenderer, {
  'THEAD': _createTheadMarkdown
});

/***/ }),
/* 316 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _jquery = __webpack_require__(1);

var _jquery2 = _interopRequireDefault(_jquery);

var _tuiCodeSnippet = __webpack_require__(2);

var _tuiCodeSnippet2 = _interopRequireDefault(_tuiCodeSnippet);

var _editorProxy = __webpack_require__(3);

var _editorProxy2 = _interopRequireDefault(_editorProxy);

var _tableDataHandler = __webpack_require__(4);

var _tableDataHandler2 = _interopRequireDefault(_tableDataHandler);

var _tableRenderer = __webpack_require__(5);

var _tableRenderer2 = _interopRequireDefault(_tableRenderer);

var _tableRangeHandler = __webpack_require__(6);

var _tableRangeHandler2 = _interopRequireDefault(_tableRangeHandler);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               * @fileoverview Implements wysiwyg merged table manager
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               * @author NHN Ent. FE Development Lab <dl_javascript@nhnent.com>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               */


var WwTableManager = _editorProxy2.default.WwTableManager,
    i18n = _editorProxy2.default.i18n;

var PASTE_TABLE_BOOKMARK = 'tui-paste-table-bookmark';
var PASTE_TABLE_CELL_BOOKMARK = 'tui-paste-table-cell-bookmark';

/**
 * Class WwMergedTableManager
 * @extends {WwTableManager}
 */

var WwMergedTableManager = function (_WwTableManager) {
  _inherits(WwMergedTableManager, _WwTableManager);

  function WwMergedTableManager() {
    _classCallCheck(this, WwMergedTableManager);

    return _possibleConstructorReturn(this, (WwMergedTableManager.__proto__ || Object.getPrototypeOf(WwMergedTableManager)).apply(this, arguments));
  }

  _createClass(WwMergedTableManager, [{
    key: '_updateCopyDataMergeWith',

    /**
     * Update mergeWidth property like rowMergeWith, colMergeWith of table data for copy.
     * @param {Array.<Array.<object>>} copyTableData - table data for copy
     * @param {{rowIndex: number, colIndex: number}} startRange - start range
     * @private
     */
    value: function _updateCopyDataMergeWith(copyTableData, startRange) {
      copyTableData.forEach(function (rowData) {
        rowData.forEach(function (cellData) {
          if (_tuiCodeSnippet2.default.isExisty(cellData.rowMergeWith)) {
            cellData.rowMergeWith -= startRange.rowIndex;
          }

          if (_tuiCodeSnippet2.default.isExisty(cellData.colMergeWith)) {
            cellData.colMergeWith -= startRange.colIndex;
          }
        });
      });
    }

    /**
     * Create table data for copy.
     * @param {Array.<Array.<object>>} tableData - table data
     * @param {{rowIndex: number, colIndex: number}} startRange - start range
     * @param {{rowIndex: number, colIndex: number}} endRange - end range
     * @returns {Array.<Array.<object>>}
     * @private
     */

  }, {
    key: '_createCopyTableData',
    value: function _createCopyTableData(tableData, startRange, endRange) {
      var copyTableData = tableData.slice(startRange.rowIndex, endRange.rowIndex + 1);

      copyTableData = copyTableData.map(function (rowData) {
        return rowData.slice(startRange.colIndex, endRange.colIndex + 1);
      });

      this._updateCopyDataMergeWith(copyTableData, startRange);

      return copyTableData;
    }

    /**
     * Update table html of clipboard data, if has selected cells.
     * @param {jQuery} $clipboardContainer - jQuery element
     * @override
     */

  }, {
    key: 'updateTableHtmlOfClipboardIfNeed',
    value: function updateTableHtmlOfClipboardIfNeed($clipboardContainer) {
      var $selectedCells = this.wwe.componentManager.getManager('tableSelection').getSelectedCells();

      if ($selectedCells.length) {
        var tableData = _tableDataHandler2.default.createTableData((0, _jquery2.default)($selectedCells[0]).closest('TABLE'));

        var _tableRangeHandler$ge = _tableRangeHandler2.default.getTableSelectionRange(tableData, $selectedCells),
            startRange = _tableRangeHandler$ge.start,
            endRange = _tableRangeHandler$ge.end;

        var copyTableData = this._createCopyTableData(tableData, startRange, endRange);
        var cellIndexData = _tableDataHandler2.default.createCellIndexData(copyTableData);
        var renderData = _tableDataHandler2.default.createRenderData(copyTableData, cellIndexData);

        $clipboardContainer.html(_tableRenderer2.default.createTableHtml(renderData));
      }
    }

    /**
     * Prepare to table cell stuffing
     * @param {Array.<Array.<object>>} tableData - table data
     * @returns {{maximumCellLength: *, needTableCellStuffingAid: boolean}}
     * @override
     */

  }, {
    key: 'prepareToTableCellStuffing',
    value: function prepareToTableCellStuffing(tableData) {
      var maximumCellLength = tableData[0].length;
      var needTableCellStuffingAid = false;

      tableData.slice(1).forEach(function (rowData) {
        var cellCount = rowData.length;

        if (maximumCellLength !== cellCount) {
          needTableCellStuffingAid = true;

          if (maximumCellLength < cellCount) {
            maximumCellLength = cellCount;
          }
        }
      });

      return {
        maximumCellLength: maximumCellLength,
        needTableCellStuffingAid: needTableCellStuffingAid
      };
    }

    /**
     * Append table cells.
     * @param {HTMLElement} node Table element
     * @override
     */

  }, {
    key: 'tableCellAppendAidForTableElement',
    value: function tableCellAppendAidForTableElement(node) {
      var $table = (0, _jquery2.default)(node);
      var tableData = _tableDataHandler2.default.createTableData($table);
      var added = _tableDataHandler2.default.addTbodyOrTheadIfNeed(tableData);
      var tableAidInformation = this.prepareToTableCellStuffing(tableData);
      var needTableCellStuffingAid = tableAidInformation.needTableCellStuffingAid;


      if (needTableCellStuffingAid) {
        _tableDataHandler2.default.stuffCellsIntoIncompleteRow(tableData, tableAidInformation.maximumCellLength);
      }

      if (added || needTableCellStuffingAid) {
        _tableRenderer2.default.replaceTable($table, tableData);
      }
    }

    /**
     * Find start cell.
     * @param {jQuery} $selectedCells - jQuery elements like td, th
     * @returns {HTMLElement}
     * @private
     */

  }, {
    key: '_findStartCell',
    value: function _findStartCell($selectedCells) {
      var startCell = void 0;

      if ($selectedCells.length === 1) {
        startCell = $selectedCells.get(0);
      } else {
        startCell = this.wwe.getEditor().getSelection().startContainer;
      }

      return startCell;
    }

    /**
     * Find start cell index.
     * @param {Array.<Array.<object>>} tableData - table data
     * @param {jQuery} $startCell - start jQuery element like td, th
     * @returns {{rowIndex: number, colIndex: number}}
     * @private
     */

  }, {
    key: '_findStartCellIndex',
    value: function _findStartCellIndex(tableData, $startCell) {
      var cellIndexData = _tableDataHandler2.default.createCellIndexData(tableData);

      return _tableDataHandler2.default.findCellIndex(cellIndexData, $startCell);
    }

    /**
     * Whether has row merged header in clipboardTableData.
     * @param {Array.<Array.<object>>} clipboardTableData - table data of clipboard
     * @param {Array.<Array.<object>>} tableData - table data
     * @param {{rowIndex: number, colIndex: number}} startCellIndex - start cell index
     * @returns {boolean}
     * @private
     */

  }, {
    key: '_hasRowMergedHeader',
    value: function _hasRowMergedHeader(clipboardTableData, tableData, startCellIndex) {
      var isHeader = tableData[startCellIndex.rowIndex][startCellIndex.colIndex].nodeName === 'TH';
      var hasHeaderMerge = any(clipboardTableData[0], function (cellData) {
        return cellData.rowspan && cellData.rowspan > 1;
      });

      return isHeader && hasHeaderMerge;
    }

    /**
     * Whether exactly fit table selection by clipboardTableData.
     * @param {Array.<Array.<object>>} clipboardTableData - table data of clipboard
     * @param {number} targetRowCount - target row count
     * @param {number} targetColCount - target col count
     * @returns {boolean}
     * @private
     */

  }, {
    key: '_isExactlyFit',
    value: function _isExactlyFit(clipboardTableData, targetRowCount, targetColCount) {
      return targetRowCount % clipboardTableData.length === 0 && targetColCount % clipboardTableData[0].length === 0;
    }

    /**
     * Update clibpard table data.
     * @param {Array.<Array.<object>>} clipboardTableData - table data of clipboard
     * @param {number} targetRowCount - target row count
     * @param {number} targetColCount - target col count
     * @private
     */

  }, {
    key: '_updateClipboardTableData',
    value: function _updateClipboardTableData(clipboardTableData, targetRowCount, targetColCount) {
      var clipboardRowCount = clipboardTableData.length;
      var clipboardColCount = clipboardTableData[0].length;
      var increaseRowCount = parseInt(targetRowCount / clipboardRowCount, 10);
      var increaseColCount = parseInt(targetColCount / clipboardColCount, 10);

      if (increaseRowCount > 1) {
        var originalData = JSON.parse(JSON.stringify(clipboardTableData));

        _tuiCodeSnippet2.default.range(0, increaseRowCount - 1).forEach(function () {
          var newRows = JSON.parse(JSON.stringify(originalData));

          clipboardTableData.push.apply(clipboardTableData, newRows);
        });
      }

      if (increaseColCount > 1) {
        var _originalData = JSON.parse(JSON.stringify(clipboardTableData));

        _tuiCodeSnippet2.default.range(0, increaseColCount - 1).forEach(function () {
          var newData = JSON.parse(JSON.stringify(_originalData));
          clipboardTableData.forEach(function (rowData, rowIndex) {
            rowData.push.apply(rowData, newData[rowIndex]);
          });
        });
      }
    }

    /**
     * Update table data by cliboard table data.
     * @param {Array.<Array.<object>>} clipboardTableData - table data of clipboard
     * @param {Array.<Array.<object>>} tableData - table data
     * @param {{rowIndex: number, colIndex: number}} startCellIndex - start cell index
     * @private
     */

  }, {
    key: '_updateTableDataByClipboardData',
    value: function _updateTableDataByClipboardData(clipboardTableData, tableData, startCellIndex) {
      var startRowIndex = startCellIndex.rowIndex;
      var startColIndex = startCellIndex.colIndex;

      clipboardTableData.forEach(function (rowData, rowIndex) {
        var updateRowIndex = startRowIndex + rowIndex;

        rowData.forEach(function (cellData, colIndex) {
          var updateColIndex = startColIndex + colIndex;
          var prevCellData = tableData[updateRowIndex][updateColIndex];

          cellData.nodeName = prevCellData.nodeName;
          tableData[updateRowIndex][updateColIndex] = cellData;
        });
      });
    }

    /**
     * Whether possible to paste or not.
     * @param {Array.<Array.<object>>} tableData - table data
     * @param {{rowIndex: number, colIndex: number}} startCellIndex - start cell index
     * @param {{rowIndex: number, colIndex: number}} endCellIndex - end cell index
     * @returns {boolean}
     * @private
     */

  }, {
    key: '_isPossibleToPaste',
    value: function _isPossibleToPaste(tableData, startCellIndex, endCellIndex) {
      var startRowIndex = startCellIndex.rowIndex;
      var startColIndex = startCellIndex.colIndex;
      var endRowIndex = endCellIndex.rowIndex;
      var endColIndex = endCellIndex.colIndex;
      var filterdTableData = tableData.slice(startRowIndex, endRowIndex + 1);
      var firstRow = filterdTableData[0].slice(startColIndex, endColIndex + 1);
      var isPossible = !any(firstRow, function (cellData) {
        return _tuiCodeSnippet2.default.isExisty(cellData.rowMergeWith);
      });

      if (isPossible) {
        var firstCells = _tuiCodeSnippet2.default.pluck(filterdTableData, startColIndex);

        isPossible = !any(firstCells, function (cellData) {
          return _tuiCodeSnippet2.default.isExisty(cellData.colMergeWith);
        });
      }

      if (isPossible && tableData.length > endRowIndex + 1) {
        var nextRow = tableData[endRowIndex + 1].slice(startColIndex, endColIndex + 1);

        isPossible = !any(nextRow, function (cellData) {
          return _tuiCodeSnippet2.default.isExisty(cellData.rowMergeWith);
        });
      }

      if (isPossible && tableData[0].length > endColIndex + 1) {
        var nextCells = _tuiCodeSnippet2.default.pluck(filterdTableData, endColIndex + 1);

        isPossible = !any(nextCells, function (cellData) {
          return _tuiCodeSnippet2.default.isExisty(cellData.colMergeWith);
        });
      }

      return isPossible;
    }

    /**
     * Splice clipboardTableData by target row count and col count.
     * @param {Array.<Array.<object>>} clipboardTableData - table data of clipboard
     * @param {number} targetRowCount - target row count
     * @param {number} targetColCount - target col count
     * @private
     */

  }, {
    key: '_spliceClipboardData',
    value: function _spliceClipboardData(clipboardTableData, targetRowCount, targetColCount) {
      clipboardTableData.splice(targetRowCount);
      clipboardTableData.forEach(function (rowData) {
        rowData.splice(targetColCount);
      });
    }

    /**
     * bookmark last td.
     * @param {number} endRowIndex - end row index
     * @param {number} endColIndex - end col index
     * @private
     */

  }, {
    key: '_bookmarkLastTd',
    value: function _bookmarkLastTd(_ref) {
      var endRowIndex = _ref.rowIndex,
          endColIndex = _ref.colIndex;

      var sq = this.wwe.getEditor();
      var $bookmarkedTable = sq.get$Body().find('.' + PASTE_TABLE_BOOKMARK);
      var tableData = _tableDataHandler2.default.createTableData($bookmarkedTable);
      var lastCellData = tableData[endRowIndex][endColIndex];

      endRowIndex = _tuiCodeSnippet2.default.isExisty(lastCellData.rowMergeWith) ? lastCellData.rowMergeWith : endRowIndex;
      endColIndex = _tuiCodeSnippet2.default.isExisty(lastCellData.colMergeWith) ? lastCellData.colMergeWith : endColIndex;

      var lastCellIndex = tableData[endRowIndex][endColIndex].elementIndex;
      var lastTd = $bookmarkedTable.find('tr').eq(lastCellIndex.rowIndex).children()[lastCellIndex.colIndex];

      $bookmarkedTable.removeClass(PASTE_TABLE_BOOKMARK);
      (0, _jquery2.default)(lastTd).addClass(PASTE_TABLE_CELL_BOOKMARK);
    }

    /**
     * Update clipboard data for paste to smaller selection area than clipboard data.
     * @param {Array.<Array.<object>>} clipboardTableData - table data of clipboard
     * @param {Array.<Array.<object>>} tableData - table data
     * @param {number} targetRowCount - target row count
     * @param {number} targetColCount - target col count
     * @param {{rowIndex: number, colIndex: number}} startRange - start table range
     * @returns {boolean}
     * @private
     */

  }, {
    key: '_updateClipboardDataForPasteToSamllerSelectedArea',
    value: function _updateClipboardDataForPasteToSamllerSelectedArea(clipboardTableData, tableData, targetRowCount, targetColCount, startRange) {
      var updated = true;
      var startCellIndex = {
        rowIndex: 0,
        colIndex: 0
      };

      var endCellIndex = {
        rowIndex: targetRowCount - 1,
        colIndex: targetColCount - 1
      };

      if (this._isPossibleToPaste(clipboardTableData, startCellIndex, endCellIndex)) {
        this._spliceClipboardData(clipboardTableData, targetRowCount, targetColCount);
        this._updateTableDataByClipboardData(clipboardTableData, tableData, startRange);
      } else {
        updated = false;
      }

      return updated;
    }

    /**
     * Paste to selected area.
     * @param {jQuery} $table - target jQuery table element
     * @param {Array.<Array.<object>>} clipboardTableData - table data of clipboard
     * @param {Array.<Array.<object>>} tableData - table data
     * @param {jQuery} $selectedCells - selected jQuery elements like td, th
     * @private
     */

  }, {
    key: '_pasteToSelectedArea',
    value: function _pasteToSelectedArea($table, clipboardTableData, tableData, $selectedCells) {
      var _tableRangeHandler$ge2 = _tableRangeHandler2.default.getTableSelectionRange(tableData, $selectedCells),
          startRange = _tableRangeHandler$ge2.start,
          endRange = _tableRangeHandler$ge2.end;

      var targetRowCount = endRange.rowIndex - startRange.rowIndex + 1;
      var targetColCount = endRange.colIndex - startRange.colIndex + 1;
      var clipboardRowCount = clipboardTableData.length;
      var clipboardColCount = clipboardTableData[0].length;
      var isSelectionLargerThanData = targetRowCount >= clipboardRowCount && targetColCount >= clipboardColCount;
      var alertMessage = i18n.get('Cannot change part of merged cell');
      var updated = true;
      var endCellIndex = void 0;

      if (this._hasRowMergedHeader(clipboardTableData, tableData, startRange)) {
        alertMessage = i18n.get('Cannot paste row merged cells into the table header');
        updated = false;
      } else if (this._isExactlyFit(clipboardTableData, targetRowCount, targetColCount)) {
        endCellIndex = endRange;
        this._updateClipboardTableData(clipboardTableData, targetRowCount, targetColCount);
        this._updateTableDataByClipboardData(clipboardTableData, tableData, startRange);
      } else if (isSelectionLargerThanData) {
        endCellIndex = {
          rowIndex: startRange.rowIndex + clipboardRowCount - 1,
          colIndex: startRange.colIndex + clipboardColCount - 1
        };

        if (this._isPossibleToPaste(tableData, startRange, endCellIndex)) {
          this._updateTableDataByClipboardData(clipboardTableData, tableData, startRange);
        } else {
          updated = false;
        }
      } else {
        // selected area is smaller then paste data
        endCellIndex = {
          rowIndex: startRange.rowIndex + targetRowCount - 1,
          colIndex: startRange.colIndex + targetColCount - 1
        };

        updated = this._updateClipboardDataForPasteToSamllerSelectedArea(clipboardTableData, tableData, targetRowCount, targetColCount, startRange);
      }

      if (updated) {
        tableData.className += ' ' + PASTE_TABLE_BOOKMARK;
        _tableRenderer2.default.replaceTable($table, tableData);
        this._bookmarkLastTd(endCellIndex);
      } else {
        alert(alertMessage);
        this.wwe.focus();
      }
    }

    /**
     * Find end cell index.
     * @param {Array.<Array.<object>>} clipboardTableData - table data of clipboard
     * @param {number} startRowIndex - start row index
     * @param {number} startColIndex - start col index
     * @returns {{rowIndex: number, colIndex: number}}
     * @private
     */

  }, {
    key: '_findEndCellIndex',
    value: function _findEndCellIndex(clipboardTableData, _ref2) {
      var startRowIndex = _ref2.rowIndex,
          startColIndex = _ref2.colIndex;

      return {
        rowIndex: startRowIndex + clipboardTableData.length - 1,
        colIndex: startColIndex + clipboardTableData[0].length - 1
      };
    }

    /**
     * Expand row.
     * @param {Array.<Array.<object>>} tableData - table data
     * @param {number} expandCount - expand count
     * @private
     */

  }, {
    key: '_expandRow',
    value: function _expandRow(tableData, expandCount) {
      var startRowIndex = tableData.length;
      var cellCount = tableData[0].length;
      var newRows = _tuiCodeSnippet2.default.range(startRowIndex, startRowIndex + expandCount).map(function (rowIndex) {
        return _tuiCodeSnippet2.default.range(0, cellCount).map(function (colIndex) {
          return _tableDataHandler2.default.createBasicCell(rowIndex, colIndex);
        });
      });

      tableData.push.apply(tableData, newRows);
    }

    /**
     * Expand column.
     * @param {Array.<Array.<object>>} tableData - table data
     * @param {number} expandCount - expand count
     * @private
     */

  }, {
    key: '_expandCoumn',
    value: function _expandCoumn(tableData, expandCount) {
      var startCellIndex = tableData[0].length;
      var additionalCellRange = _tuiCodeSnippet2.default.range(startCellIndex, startCellIndex + expandCount);

      tableData.forEach(function (rowData, rowIndex) {
        var nodeName = rowData[0].nodeName;

        var newCells = additionalCellRange.map(function (colIndex) {
          return _tableDataHandler2.default.createBasicCell(rowIndex, colIndex, nodeName);
        });

        rowData.push.apply(rowData, newCells);
      });
    }

    /**
     * Expand table data, if need.
     * @param {Array.<Array.<object>>} tableData - table data
     * @param {{rowIndex: number, colIndex: number}} startCellIndex - start cell index
     * @param {{rowIndex: number, colIndex: number}} endCellIndex - end cell index
     * @private
     */

  }, {
    key: '_expandTableDataIfNeed',
    value: function _expandTableDataIfNeed(tableData, startCellIndex, endCellIndex) {
      var expandRowCount = endCellIndex.rowIndex - tableData.length + 1;
      var expandCellCount = endCellIndex.colIndex - tableData[0].length + 1;

      if (expandRowCount > 0) {
        this._expandRow(tableData, expandRowCount);
      }

      if (expandCellCount > 0) {
        this._expandCoumn(tableData, expandCellCount);
      }
    }

    /**
     * Paste all clipboard table data.
     * @param {jQuery} $table - jQuery table element
     * @param {Array.<Array.<object>>} clipboardTableData - table data of clipboard
     * @param {Array.<Array.<object>>} tableData - table data
     * @param {{rowIndex: number, colIndex: number}} startCellIndex - start cell index
     * @private
     */

  }, {
    key: '_pasteAllClipboardTableData',
    value: function _pasteAllClipboardTableData($table, clipboardTableData, tableData, startCellIndex) {
      var endCellIndex = this._findEndCellIndex(clipboardTableData, startCellIndex);

      if (this._hasRowMergedHeader(clipboardTableData, tableData, startCellIndex)) {
        alert(i18n.get('Cannot paste row merged cells into the table header'));
        this.wwe.focus();

        return;
      }

      this._expandTableDataIfNeed(tableData, startCellIndex, endCellIndex);

      if (this._isPossibleToPaste(tableData, startCellIndex, endCellIndex)) {
        this._updateTableDataByClipboardData(clipboardTableData, tableData, startCellIndex);
        tableData.className += ' ' + PASTE_TABLE_BOOKMARK;
        _tableRenderer2.default.replaceTable($table, tableData);
        this._bookmarkLastTd(endCellIndex);
      } else {
        alert(i18n.get('Cannot change part of merged cell'));
        this.wwe.focus();
      }
    }

    /**
     * Paste clibpard data.
     * @param {jQuery} $clipboardTable - jQuery table element of clipboard
     */

  }, {
    key: 'pasteClipboardData',
    value: function pasteClipboardData($clipboardTable) {
      var clipboardTableData = _tableDataHandler2.default.createTableData($clipboardTable);
      var tableSelectionManager = this.wwe.componentManager.getManager('tableSelection');
      var $selectedCells = tableSelectionManager.getSelectedCells();
      var $startCell = (0, _jquery2.default)(this._findStartCell($selectedCells));
      var $table = $startCell.closest('table');
      var tableData = _tableDataHandler2.default.createTableData($table);
      var startCellIndex = this._findStartCellIndex(tableData, $startCell);

      if ($selectedCells.length > 1) {
        // selection
        this._pasteToSelectedArea($table, clipboardTableData, tableData, $selectedCells);
      } else {
        // cursor
        this._pasteAllClipboardTableData($table, clipboardTableData, tableData, startCellIndex);
      }
    }
  }]);

  return WwMergedTableManager;
}(WwTableManager);

/**
 * Whether one of them is true or not.
 * @param {Array} arr - target array
 * @param {function} contition - condition function
 * @returns {boolean}
 * @ignore
 */


function any(arr, contition) {
  var result = false;

  _tuiCodeSnippet2.default.forEach(arr, function (item) {
    result = contition(item);

    return !result;
  });

  return result;
}

exports.default = WwMergedTableManager;

/***/ }),
/* 317 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _jquery = __webpack_require__(1);

var _jquery2 = _interopRequireDefault(_jquery);

var _tuiCodeSnippet = __webpack_require__(2);

var _tuiCodeSnippet2 = _interopRequireDefault(_tuiCodeSnippet);

var _editorProxy = __webpack_require__(3);

var _editorProxy2 = _interopRequireDefault(_editorProxy);

var _tableDataHandler = __webpack_require__(4);

var _tableDataHandler2 = _interopRequireDefault(_tableDataHandler);

var _tableRangeHandler = __webpack_require__(6);

var _tableRangeHandler2 = _interopRequireDefault(_tableRangeHandler);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               * @fileoverview Implements wysiwyg merged table selection manager
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               * @author NHN Ent. FE Development Lab <dl_javascript@nhnent.com>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               */


var WwTableSelectionManager = _editorProxy2.default.WwTableSelectionManager;


var TABLE_CELL_SELECTED_CLASS_NAME = 'te-cell-selected';

/**
 * Class WwMergedTableSelectionManager
 */

var WwMergedTableSelectionManager = function (_WwTableSelectionMana) {
  _inherits(WwMergedTableSelectionManager, _WwTableSelectionMana);

  /**
   * Creates an instance of WwMergedTableSelectionManager.
   * @param {WysiwygEditor} wwe - WysiwygEditor instance
   * @memberof WwMergedTableSelectionManager
   */
  function WwMergedTableSelectionManager(wwe) {
    _classCallCheck(this, WwMergedTableSelectionManager);

    /**
     * table cache data
     * @type {Array.<Array.<Object>>}
     * @private
     */
    var _this = _possibleConstructorReturn(this, (WwMergedTableSelectionManager.__proto__ || Object.getPrototypeOf(WwMergedTableSelectionManager)).call(this, wwe));

    _this._tableData = null;

    _this.mergedTableSelectionManager = true;
    return _this;
  }

  /**
   * Add css class for selected cells.
   * @param {jQuery} $table - table jQuery element
   * @param {Array.<Array.<object>>} tableData - table data
   * @param {{
   *   start: {rowIndex: number, colIndex: number},
   *   end: {rowIndex: number, colIndex: number}
   * }} tableRange - table selected range
   * @private
   */


  _createClass(WwMergedTableSelectionManager, [{
    key: '_addClassToSelectedCells',
    value: function _addClassToSelectedCells($table, tableData, tableRange) {
      var startRange = tableRange.start;
      var endRange = tableRange.end;
      var cellIndexRange = _tuiCodeSnippet2.default.range(startRange.colIndex, endRange.colIndex + 1);
      var $trs = $table.find('tr');

      _tuiCodeSnippet2.default.range(startRange.rowIndex, endRange.rowIndex + 1).forEach(function (rowIndex) {
        var rowData = tableData[rowIndex];
        var $cells = $trs.eq(rowIndex).find('td, th');

        return cellIndexRange.forEach(function (colIndex) {
          var cellData = rowData[colIndex];

          if (cellData.elementIndex) {
            $cells.eq(rowData[colIndex].elementIndex.colIndex).addClass(TABLE_CELL_SELECTED_CLASS_NAME);
          }
        });
      });
    }

    /**
     * cache table data on drag start
     * @param {HTMLElement} selectionStart - start element
     */

  }, {
    key: 'onDragStart',
    value: function onDragStart(selectionStart) {
      var $table = (0, _jquery2.default)(selectionStart).closest('[contenteditable=true] table');
      this._tableData = _tableDataHandler2.default.createTableData($table);
    }

    /**
     * clear table data in cache on drag end
     */

  }, {
    key: 'onDragEnd',
    value: function onDragEnd() {
      this._tableData = null;
    }

    /**
     * Highlight selected table cells
     * @param {HTMLElement} selectionStart start element
     * @param {HTMLElement} selectionEnd end element
     * @override
     */

  }, {
    key: 'highlightTableCellsBy',
    value: function highlightTableCellsBy(selectionStart, selectionEnd) {
      var $start = (0, _jquery2.default)(selectionStart);
      var $end = (0, _jquery2.default)(selectionEnd);
      var $table = $start.closest('[contenteditable=true] table');
      var tableRange = _tableRangeHandler2.default.findSelectionRange(this._tableData, $start, $end);

      this.removeClassAttrbuteFromAllCellsIfNeed();
      this._addClassToSelectedCells($table, this._tableData, tableRange);
    }

    /**
     * Style to selected cells.
     * @param {function} onStyle - function for styling
     * @param {Object} [options] - options to be passed into onStyle
     */

  }, {
    key: 'styleToSelectedCells',
    value: function styleToSelectedCells(onStyle, options) {
      var sq = this.wwe.getEditor();
      var range = sq.getSelection().cloneRange();
      var $table = (0, _jquery2.default)(range.startContainer).closest('[contenteditable=true] table');

      $table.find('tr').get().forEach(function (tr) {
        var $cells = (0, _jquery2.default)(tr).find('.' + TABLE_CELL_SELECTED_CLASS_NAME);
        var firstSelectedCell = $cells.first().get(0);
        var lastSelectedCell = $cells.last().get(0);

        if (!$cells.length) {
          return;
        }

        range.setStart(firstSelectedCell, 0);
        range.setEnd(lastSelectedCell, lastSelectedCell.childNodes.length);
        sq.setSelection(range);
        onStyle(sq, options);
      });
    }

    /**
     * Whether has selected both TH and TD.
     * @param {jQuery} $selectedCells - selected cells jQuery element
     * @returns {boolean}
     */

  }, {
    key: 'hasSelectedBothThAndTd',
    value: function hasSelectedBothThAndTd($selectedCells) {
      $selectedCells = $selectedCells || this.getSelectedCells();

      return $selectedCells.first()[0].nodeName !== $selectedCells.last()[0].nodeName;
    }
  }]);

  return WwMergedTableSelectionManager;
}(WwTableSelectionManager);

exports.default = WwMergedTableSelectionManager;

/***/ }),
/* 318 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports._createNewRow = _createNewRow;
exports._addRow = _addRow;

var _jquery = __webpack_require__(1);

var _jquery2 = _interopRequireDefault(_jquery);

var _tuiCodeSnippet = __webpack_require__(2);

var _tuiCodeSnippet2 = _interopRequireDefault(_tuiCodeSnippet);

var _editorProxy = __webpack_require__(3);

var _editorProxy2 = _interopRequireDefault(_editorProxy);

var _tableDataHandler = __webpack_require__(4);

var _tableDataHandler2 = _interopRequireDefault(_tableDataHandler);

var _tableRangeHandler = __webpack_require__(6);

var _tableRangeHandler2 = _interopRequireDefault(_tableRangeHandler);

var _tableRenderer = __webpack_require__(5);

var _tableRenderer2 = _interopRequireDefault(_tableRenderer);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
* @fileoverview Implements mergedTableAddRow. Add Row to selected table
* @author NHN Ent. FE Development Lab <dl_javascript@nhnent.com>
*/
var CommandManager = _editorProxy2.default.CommandManager;


var AddRow = void 0;
if (CommandManager) {
  AddRow = CommandManager.command('wysiwyg', /** @lends AddRow */{
    name: 'AddRow',
    /**
     * Command handler.
     * @param {WysiwygEditor} wwe - wysiwygEditor instance
     */
    exec: function exec(wwe) {
      var sq = wwe.getEditor();
      var range = sq.getSelection().cloneRange();

      wwe.focus();

      if (!sq.hasFormat('TABLE')) {
        return;
      }

      var $startContainer = (0, _jquery2.default)(range.startContainer);
      var $table = $startContainer.closest('table');
      var tableData = _tableDataHandler2.default.createTableData($table);
      var $selectedCells = wwe.componentManager.getManager('tableSelection').getSelectedCells();
      var tableRange = _tableRangeHandler2.default.getTableSelectionRange(tableData, $selectedCells, $startContainer);

      sq.saveUndoState(range);
      _addRow(tableData, tableRange);

      var $newTable = _tableRenderer2.default.replaceTable($table, tableData);
      var focusTd = _findFocusTd($newTable, tableRange.end.rowIndex, tableRange.start.colIndex);

      _tableRenderer2.default.focusToCell(sq, range, focusTd);
    }
  });
}

/**
 * Create row merged cell data.
 * @param {number} rowMergeWith - row merge with index
 * @returns {{
 *   nodeName: string,
 *   rowMergeWith: number
 * }}
 * @private
 */
function _createRowMergedCell(rowMergeWith) {
  return {
    nodeName: 'TD',
    rowMergeWith: rowMergeWith
  };
}

/**
 * Create new row.
 * @param {Array.<Array.<object>>} tableData - table data
 * @param {number} rowIndex - row index of table data
 * @returns {object}
 * @private
 */
function _createNewRow(tableData, rowIndex) {
  var prevCell = null;

  return tableData[rowIndex].map(function (cellData, colIndex) {
    var newCell = void 0;

    if (_tuiCodeSnippet2.default.isExisty(cellData.rowMergeWith)) {
      var rowMergeWith = cellData.rowMergeWith;

      var merger = tableData[rowMergeWith][colIndex];
      var lastMergedRowIndex = rowMergeWith + merger.rowspan - 1;

      if (_tuiCodeSnippet2.default.isExisty(merger.colMergeWith) && prevCell) {
        newCell = _tuiCodeSnippet2.default.extend({}, prevCell);
      } else if (lastMergedRowIndex > rowIndex) {
        merger.rowspan += 1;
        newCell = _tuiCodeSnippet2.default.extend({}, cellData);
      }
    } else if (cellData.rowspan > 1) {
      cellData.rowspan += 1;
      newCell = _createRowMergedCell(rowIndex);
    }

    if (!newCell) {
      newCell = _tableDataHandler2.default.createBasicCell(rowIndex + 1, colIndex);
    }

    prevCell = newCell;

    return newCell;
  });
}

/**
 * Add row.
 * @param {Array.<Array.<object>>} tableData - table data
 * @param {{
 *   start: {rowIndex: number, colIndex: number},
 *   end: {rowIndex: number, colIndex: number}
 * }} tableRange - table selection range
 * @param {number} rowIndex - row index of table data
 * @param {number} colIndex - column index of tabld data
 * @private
 */
function _addRow(tableData, tableRange) {
  var startRowIndex = tableRange.start.rowIndex;
  var endRange = tableRange.end;
  var endRowIndex = _tableDataHandler2.default.findRowMergedLastIndex(tableData, endRange.rowIndex, endRange.colIndex);
  var newRows = _tuiCodeSnippet2.default.range(startRowIndex, endRowIndex + 1).map(function () {
    return _createNewRow(tableData, endRowIndex);
  });

  tableData.splice.apply(tableData, [endRowIndex + 1, 0].concat(newRows));
}

/**
 * Find focus td element.
 * @param {jQuery} $newTable - changed table jQuery element
 * @param {number} rowIndex - row index of table data
 * @param {number} colIndex - column index of tabld data
 * @returns {HTMLElement}
 * @private
 */
function _findFocusTd($newTable, rowIndex, colIndex) {
  var tableData = _tableDataHandler2.default.createTableData($newTable);
  var newRowIndex = _tableDataHandler2.default.findRowMergedLastIndex(tableData, rowIndex, colIndex) + 1;
  var cellElementIndex = _tableDataHandler2.default.findElementIndex(tableData, newRowIndex, colIndex);

  return $newTable.find('tr').eq(cellElementIndex.rowIndex).find('td')[cellElementIndex.colIndex];
}

exports.default = AddRow;

/***/ }),
/* 319 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports._createNewColumns = _createNewColumns;
exports._addColumns = _addColumns;

var _jquery = __webpack_require__(1);

var _jquery2 = _interopRequireDefault(_jquery);

var _tuiCodeSnippet = __webpack_require__(2);

var _tuiCodeSnippet2 = _interopRequireDefault(_tuiCodeSnippet);

var _editorProxy = __webpack_require__(3);

var _editorProxy2 = _interopRequireDefault(_editorProxy);

var _tableDataHandler = __webpack_require__(4);

var _tableDataHandler2 = _interopRequireDefault(_tableDataHandler);

var _tableRangeHandler = __webpack_require__(6);

var _tableRangeHandler2 = _interopRequireDefault(_tableRangeHandler);

var _tableRenderer = __webpack_require__(5);

var _tableRenderer2 = _interopRequireDefault(_tableRenderer);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
* @fileoverview Implements mergedTableAddCol. Add Row to selected table.
* @author NHN Ent. FE Development Lab <dl_javascript@nhnent.com>
*/
var CommandManager = _editorProxy2.default.CommandManager;


var AddCol = void 0;
if (CommandManager) {
  AddCol = CommandManager.command('wysiwyg', /** @lends AddCol */{
    name: 'AddCol',
    /**
     * Command handler.
     * @param {WysiwygEditor} wwe - wysiwygEditor instance
     */
    exec: function exec(wwe) {
      var sq = wwe.getEditor();
      var range = sq.getSelection().cloneRange();

      wwe.focus();

      if (!sq.hasFormat('TABLE')) {
        return;
      }

      var $startContainer = (0, _jquery2.default)(range.startContainer);
      var $table = $startContainer.closest('table');
      var tableData = _tableDataHandler2.default.createTableData($table);
      var $selectedCells = wwe.componentManager.getManager('tableSelection').getSelectedCells();
      var tableRange = _tableRangeHandler2.default.getTableSelectionRange(tableData, $selectedCells, $startContainer);

      sq.saveUndoState(range);
      _addColumns(tableData, tableRange);

      var $newTable = _tableRenderer2.default.replaceTable($table, tableData);
      var focusCell = _findFocusCell($newTable, tableRange.start.rowIndex, tableRange.end.colIndex);

      _tableRenderer2.default.focusToCell(sq, range, focusCell);
    }
  });
}

/**
 * Create column merged cell.
 * @param {number} colMergeWith - column merge start index
 * @param {string} nodeName - node name
 * @returns {{
 *   nodeName: string,
 *   colMerged: boolean,
 *   colMergeWith: number
 * }}
 * @private
 */
function _createColMergedCell(colMergeWith, nodeName) {
  return {
    nodeName: nodeName,
    colMergeWith: colMergeWith
  };
}

/**
 * Create new cell data.
 * @param {Array.<object>} rowData - row data of table data
 * @param {number} rowIndex - row index of table data
 * @param {number} colIndex - column index of table data
 * @param {object | null} prevCell - previous cell data
 * @returns {object}
 * @private
 */
function _createNewCell(rowData, rowIndex, colIndex, prevCell) {
  var cellData = rowData[colIndex];
  var newCell = void 0;

  if (_tuiCodeSnippet2.default.isExisty(cellData.colMergeWith)) {
    var colMergeWith = cellData.colMergeWith;

    var merger = rowData[colMergeWith];
    var lastMergedCellIndex = colMergeWith + merger.colspan - 1;

    if (_tuiCodeSnippet2.default.isExisty(merger.rowMergeWith) && prevCell) {
      newCell = _tuiCodeSnippet2.default.extend({}, prevCell);
    } else if (lastMergedCellIndex > colIndex) {
      merger.colspan += 1;
      newCell = _tuiCodeSnippet2.default.extend({}, cellData);
    }
  } else if (cellData.colspan > 1) {
    cellData.colspan += 1;
    newCell = _createColMergedCell(colIndex, cellData.nodeName);
  }

  if (!newCell) {
    newCell = _tableDataHandler2.default.createBasicCell(rowIndex, colIndex + 1, cellData.nodeName);
  }

  return newCell;
}

/**
 * Create new columns.
 * @param {Array.<Array.<object>>} tableData - table data
 * @param {number} startColIndex - start column index
 * @param {number} endColIndex - end column index
 * @returns {Array.<Array.<object>>}
 * @private
 */
function _createNewColumns(tableData, startColIndex, endColIndex) {
  var colIndexes = _tuiCodeSnippet2.default.range(startColIndex, endColIndex + 1);
  var newColumns = [];
  var prevCells = null;

  tableData.forEach(function (rowData, rowIndex) {
    var newCells = colIndexes.map(function (colIndex, index) {
      var prevCell = prevCells ? prevCells[index - 1] : null;

      return _createNewCell(rowData, rowIndex, endColIndex, prevCell);
    });

    prevCells = newCells;
    newColumns.push(newCells);
  });

  return newColumns;
}

/**
 * Add columns.
 * @param {Array.<Array.<object>>} tableData - table data
 * @param {{
 *   start: {rowIndex: number, colIndex: number},
 *   end: {rowIndex: number, colIndex: number}
 * }} tableRange - table selection range
 * @private
 */
function _addColumns(tableData, tableRange) {
  var endRange = tableRange.end;
  var endColIndex = _tableDataHandler2.default.findColMergedLastIndex(tableData, endRange.rowIndex, endRange.colIndex);
  var newColumns = _createNewColumns(tableData, tableRange.start.colIndex, endColIndex);
  var newColIndex = endColIndex + 1;

  tableData.forEach(function (rowData, rowIndex) {
    rowData.splice.apply(rowData, [newColIndex, 0].concat(newColumns[rowIndex]));
  });
}

/**
 * Find focus cell element like td or th.
 * @param {jQuery} $newTable - changed table jQuery element
 * @param {number} rowIndex - row index of table data
 * @param {number} colIndex - column index of tabld data
 * @returns {HTMLElement}
 * @private
 */
function _findFocusCell($newTable, rowIndex, colIndex) {
  var tableData = _tableDataHandler2.default.createTableData($newTable);
  var newColIndex = _tableDataHandler2.default.findColMergedLastIndex(tableData, rowIndex, colIndex) + 1;
  var cellElementIndex = _tableDataHandler2.default.findElementIndex(tableData, rowIndex, newColIndex);

  return $newTable.find('tr').eq(cellElementIndex.rowIndex).find('td, th')[cellElementIndex.colIndex];
}

exports.default = AddCol;

/***/ }),
/* 320 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports._removeRow = _removeRow;

var _jquery = __webpack_require__(1);

var _jquery2 = _interopRequireDefault(_jquery);

var _tuiCodeSnippet = __webpack_require__(2);

var _tuiCodeSnippet2 = _interopRequireDefault(_tuiCodeSnippet);

var _editorProxy = __webpack_require__(3);

var _editorProxy2 = _interopRequireDefault(_editorProxy);

var _tableDataHandler = __webpack_require__(4);

var _tableDataHandler2 = _interopRequireDefault(_tableDataHandler);

var _tableRangeHandler = __webpack_require__(6);

var _tableRangeHandler2 = _interopRequireDefault(_tableRangeHandler);

var _tableRenderer = __webpack_require__(5);

var _tableRenderer2 = _interopRequireDefault(_tableRenderer);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
* @fileoverview Implements mergedTableRemoveRow
* @author NHN Ent. FE Development Lab <dl_javascript@nhnent.com>
*/
var CommandManager = _editorProxy2.default.CommandManager;


var RemoveRow = void 0;
if (CommandManager) {
  RemoveRow = CommandManager.command('wysiwyg', /** @lends RemoveRow */{
    name: 'RemoveRow',
    /**
     * Command handler.
     * @param {WysiwygEditor} wwe - wysiwygEditor instance
     */
    exec: function exec(wwe) {
      var sq = wwe.getEditor();
      var range = sq.getSelection().cloneRange();

      wwe.focus();

      if (!sq.hasFormat('TABLE')) {
        return;
      }

      var $startContainer = (0, _jquery2.default)(range.startContainer);
      var $table = $startContainer.closest('table');
      var tableData = _tableDataHandler2.default.createTableData($table);
      var beforeRowLength = tableData.length;
      var $selectedCells = wwe.componentManager.getManager('tableSelection').getSelectedCells();
      var tableRange = _tableRangeHandler2.default.getTableSelectionRange(tableData, $selectedCells, $startContainer);

      sq.saveUndoState(range);
      _removeRow(tableData, tableRange);

      if (tableData.length < 2) {
        $table.remove();
      } else if (beforeRowLength !== tableData.length) {
        var $newTable = _tableRenderer2.default.replaceTable($table, tableData);

        var startRowIndex = tableRange.start.rowIndex;
        var focusRowIndex = startRowIndex < tableData.length ? startRowIndex : startRowIndex - 1;
        var focusCell = _findFocusTd($newTable, focusRowIndex, tableRange.start.colIndex);
        _tableRenderer2.default.focusToCell(sq, range, focusCell);
      }
    }
  });
}

/**
 * Update rowspan to row merger.
 * @param {Array.<Array.<object>>} tableData - table data
 * @param {number} startRowIndex - start row index
 * @param {number} endRowIndex - end row index
 * @private
 */
function _updateRowspan(tableData, startRowIndex, endRowIndex) {
  _tuiCodeSnippet2.default.range(startRowIndex, endRowIndex + 1).forEach(function (rowIndex) {
    tableData[rowIndex].forEach(function (cell, cellIndex) {
      if (_tuiCodeSnippet2.default.isExisty(cell.rowMergeWith)) {
        var merger = tableData[cell.rowMergeWith][cellIndex];

        if (merger.rowspan) {
          merger.rowspan -= 1;
        }
      } else if (cell.rowspan > 1) {
        var lastMergedRowIndex = rowIndex + cell.rowspan - 1;

        cell.rowspan -= endRowIndex - rowIndex + 1;

        if (lastMergedRowIndex > endRowIndex) {
          tableData[endRowIndex + 1][cellIndex] = _tuiCodeSnippet2.default.extend({}, cell);
        }
      }
    });
  });
}

/**
 * Update row merge start index to merged cell.
 * @param {Array.<Array.<object>>} tableData - table data
 * @param {number} startRowIndex - start row index
 * @param {number} endRowIndex - end row index
 * @private
 */
function _updateMergeStartIndex(tableData, startRowIndex, endRowIndex) {
  tableData.slice(endRowIndex + 1).forEach(function (row) {
    row.forEach(function (cell) {
      if (_tuiCodeSnippet2.default.isExisty(cell.rowMergeWith) && cell.rowMergeWith >= startRowIndex) {
        cell.rowMergeWith = endRowIndex + 1;
      }
    });
  });
}

/**
 * Remove row.
 * @param {Array.<Array.<object>>} tableData - table data
 * @param {{
 *   start: {rowIndex: number, colIndex: number},
 *   end: {rowIndex: number, colIndex: number}
 * }} tableRange - table selection range
 * @private
 */
function _removeRow(tableData, tableRange) {
  var startRowIndex = tableRange.start.rowIndex;
  var endRange = tableRange.end;
  var endRowIndex = _tableDataHandler2.default.findRowMergedLastIndex(tableData, endRange.rowIndex, endRange.colIndex);
  if (startRowIndex === 0 && endRowIndex === 0) {
    return;
  }

  startRowIndex = Math.max(startRowIndex, 1);
  endRowIndex = Math.max(endRowIndex, 1);
  var removeCount = endRowIndex - startRowIndex + 1;

  // if only table body or table header left, remove table
  if (tableData.length - removeCount < 2) {
    tableData.splice(0, tableData.length);
  } else {
    _updateRowspan(tableData, startRowIndex, endRowIndex);
    _updateMergeStartIndex(tableData, startRowIndex, endRowIndex);

    tableData.splice(startRowIndex, removeCount);
  }
}

/**
 * Find focus td element.
 * @param {jQuery} $newTable - changed table jQuery element
 * @param {number} rowIndex - row index of table data
 * @param {number} colIndex - column index of tabld data
 * @returns {HTMLElement}
 * @private
 */
function _findFocusTd($newTable, rowIndex, colIndex) {
  var tableData = _tableDataHandler2.default.createTableData($newTable);

  if (tableData.length - 1 < rowIndex) {
    rowIndex -= 1;
  }

  var cellElementIndex = _tableDataHandler2.default.findElementIndex(tableData, rowIndex, colIndex);

  return $newTable.find('tr').eq(cellElementIndex.rowIndex).find('th,td')[cellElementIndex.colIndex];
}

exports.default = RemoveRow;

/***/ }),
/* 321 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports._removeColumns = _removeColumns;

var _jquery = __webpack_require__(1);

var _jquery2 = _interopRequireDefault(_jquery);

var _tuiCodeSnippet = __webpack_require__(2);

var _tuiCodeSnippet2 = _interopRequireDefault(_tuiCodeSnippet);

var _editorProxy = __webpack_require__(3);

var _editorProxy2 = _interopRequireDefault(_editorProxy);

var _tableDataHandler = __webpack_require__(4);

var _tableDataHandler2 = _interopRequireDefault(_tableDataHandler);

var _tableRangeHandler = __webpack_require__(6);

var _tableRangeHandler2 = _interopRequireDefault(_tableRangeHandler);

var _tableRenderer = __webpack_require__(5);

var _tableRenderer2 = _interopRequireDefault(_tableRenderer);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
* @fileoverview Implements mergedTableRemoveCol. Remove col to selected table
* @author NHN Ent. FE Development Lab <dl_javascript@nhnent.com>
*/
var CommandManager = _editorProxy2.default.CommandManager;


var RemoveCol = void 0;
if (CommandManager) {
  RemoveCol = CommandManager.command('wysiwyg', /** @lends RemoveCol */{
    name: 'RemoveCol',
    /**
     * Command handler.
     * @param {WysiwygEditor} wwe - wysiwygEditor instance
     */
    exec: function exec(wwe) {
      var sq = wwe.getEditor();
      var range = sq.getSelection().cloneRange();

      wwe.focus();

      if (!sq.hasFormat('TABLE')) {
        return;
      }

      var $startContainer = (0, _jquery2.default)(range.startContainer);
      var $table = $startContainer.closest('table');
      var tableData = _tableDataHandler2.default.createTableData($table);
      var $selectedCells = wwe.componentManager.getManager('tableSelection').getSelectedCells();
      var tableRange = _tableRangeHandler2.default.getTableSelectionRange(tableData, $selectedCells, $startContainer);
      var beforeCellLength = tableData[0].length;

      sq.saveUndoState(range);
      _removeColumns(tableData, tableRange);

      if (tableData[0].length === 0) {
        $table.remove();
      } else if (beforeCellLength !== tableData[0].length) {
        var $newTable = _tableRenderer2.default.replaceTable($table, tableData);

        var startColIndex = tableRange.start.colIndex;
        var focusColIndex = startColIndex >= tableData[0].length ? startColIndex - 1 : startColIndex;
        var focusCell = _findFocusCell($newTable, tableRange.start.rowIndex, focusColIndex);
        _tableRenderer2.default.focusToCell(sq, range, focusCell);
      }
    }
  });
}

/**
 * Update colspan to col merger.
 * @param {Array.<Array.<object>>} tableData - table data
 * @param {number} startColIndex - start col index
 * @param {number} endColIndex - end col index
 * @private
 */
function _updateColspan(tableData, startColIndex, endColIndex) {
  tableData.forEach(function (rowData) {
    _tuiCodeSnippet2.default.range(startColIndex, endColIndex + 1).forEach(function (colIndex) {
      var cellData = rowData[colIndex];

      if (_tuiCodeSnippet2.default.isExisty(cellData.colMergeWith)) {
        var merger = rowData[cellData.colMergeWith];

        if (merger.colspan) {
          merger.colspan -= 1;
        }
      } else if (cellData.colspan > 1) {
        var lastMergedCellIndex = colIndex + cellData.colspan - 1;

        cellData.colspan -= endColIndex - colIndex + 1;

        if (lastMergedCellIndex > endColIndex) {
          rowData[endColIndex + 1] = _tuiCodeSnippet2.default.extend({}, cellData);
        }
      }
    });
  });
}

/**
 * Update row merge start index to merged cell.
 * @param {Array.<Array.<object>>} tableData - table data
 * @param {number} startColIndex - start col index
 * @param {number} endColIndex - end col index
 * @private
 */
function _updateMergeStartIndex(tableData, startColIndex, endColIndex) {
  tableData.forEach(function (rowData) {
    rowData.slice(endColIndex + 1).forEach(function (cellData) {
      if (_tuiCodeSnippet2.default.isExisty(cellData.colMergeWith) && cellData.colMergeWith >= startColIndex) {
        cellData.colMergeWith = endColIndex + 1;
      }
    });
  });
}

/**
 * Remove columns.
 * @param {Array.<Array.<object>>} tableData - table data
 * @param {{
 *   start: {rowIndex: number, colIndex: number},
 *   end: {rowIndex: number, colIndex: number}
 * }} tableRange - table selection range
 * @private
 */
function _removeColumns(tableData, tableRange) {
  var startColIndex = tableRange.start.colIndex;
  var endRange = tableRange.end;
  var endColIndex = _tableDataHandler2.default.findColMergedLastIndex(tableData, endRange.rowIndex, endRange.colIndex);
  var removeCount = endColIndex - startColIndex + 1;

  _updateColspan(tableData, startColIndex, endColIndex);
  _updateMergeStartIndex(tableData, startColIndex, endColIndex);

  tableData.forEach(function (row) {
    row.splice(startColIndex, removeCount);
  });
}

/**
 * Find focus cell element like td or th.
 * @param {jQuery} $newTable - changed table jQuery element
 * @param {number} rowIndex - row index of table data
 * @param {number} colIndex - column index of tabld data
 * @returns {HTMLElement}
 * @private
 */
function _findFocusCell($newTable, rowIndex, colIndex) {
  var tableData = _tableDataHandler2.default.createTableData($newTable);

  if (tableData[0].length - 1 < colIndex) {
    colIndex -= 1;
  }

  var cellElementIndex = _tableDataHandler2.default.findElementIndex(tableData, rowIndex, colIndex);

  return $newTable.find('tr').eq(cellElementIndex.rowIndex).find('td, th')[cellElementIndex.colIndex];
}

exports.default = RemoveCol;

/***/ }),
/* 322 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _jquery = __webpack_require__(1);

var _jquery2 = _interopRequireDefault(_jquery);

var _tuiCodeSnippet = __webpack_require__(2);

var _tuiCodeSnippet2 = _interopRequireDefault(_tuiCodeSnippet);

var _editorProxy = __webpack_require__(3);

var _editorProxy2 = _interopRequireDefault(_editorProxy);

var _tableDataHandler = __webpack_require__(4);

var _tableDataHandler2 = _interopRequireDefault(_tableDataHandler);

var _tableRangeHandler = __webpack_require__(6);

var _tableRangeHandler2 = _interopRequireDefault(_tableRangeHandler);

var _tableRenderer = __webpack_require__(5);

var _tableRenderer2 = _interopRequireDefault(_tableRenderer);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
* @fileoverview Implements mergedTableAlignCol. Align selected column's text content to given direction
* @author NHN Ent. FE Development Lab <dl_javascript@nhnent.com>
*/
var CommandManager = _editorProxy2.default.CommandManager;


var AlignCol = void 0;
if (CommandManager) {
  AlignCol = CommandManager.command('wysiwyg', /** @lends AlignCol */{
    name: 'AlignCol',
    /**
     * Command handler.
     * @param {WysiwygEditor} wwe - wysiwygEditor instance
     * @param {string} alignDirection - align direction for table header
     */
    exec: function exec(wwe, alignDirection) {
      var sq = wwe.getEditor();
      var range = sq.getSelection().cloneRange();

      wwe.focus();

      if (!sq.hasFormat('TABLE')) {
        return;
      }

      var $startContainer = (0, _jquery2.default)(range.startContainer);
      var $table = $startContainer.closest('table');
      var tableData = _tableDataHandler2.default.createTableData($table);
      var $selectedCells = wwe.componentManager.getManager('tableSelection').getSelectedCells();
      var tableRange = _tableRangeHandler2.default.getTableSelectionRange(tableData, $selectedCells, $startContainer);

      _align(tableData[0], tableRange.start.colIndex, tableRange.end.colIndex, alignDirection);

      var $newTable = _tableRenderer2.default.replaceTable($table, tableData);
      var focusCell = _findFocusCell($newTable, $startContainer);

      _tableRenderer2.default.focusToCell(sq, range, focusCell);
    }
  });
}

/**
 * Align to table header.
 * @param {Array.<object>} headRowData - head row data
 * @param {number} startColIndex - start column index for styling align
 * @param {number} endColIndex - end column index for styling align
 * @param {string} alignDirection - align direction
 * @private
 */
function _align(headRowData, startColIndex, endColIndex, alignDirection) {
  _tuiCodeSnippet2.default.range(startColIndex, endColIndex + 1).forEach(function (colIndex) {
    var headCellData = headRowData[colIndex];

    if (_tuiCodeSnippet2.default.isExisty(headCellData.colMergeWith)) {
      headRowData[headCellData.colMergeWith].align = alignDirection;
    } else {
      headCellData.align = alignDirection;
    }
  });
}

/**
 * Find focus cell element like td or th.
 * @param {jQuery} $newTable - changed table jQuery element
 * @param {jQuery} $startContainer - start container jQuery element of text range
 * @returns {HTMLElement}
 * @private
 */
function _findFocusCell($newTable, $startContainer) {
  var elementRowIndex = _tableDataHandler2.default.findElementRowIndex($startContainer);
  var elementColIndex = _tableDataHandler2.default.findElementColIndex($startContainer);

  return $newTable.find('tr').eq(elementRowIndex).find('td, th')[elementColIndex];
}

exports.default = AlignCol;

/***/ }),
/* 323 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports._mergeCells = _mergeCells;

var _jquery = __webpack_require__(1);

var _jquery2 = _interopRequireDefault(_jquery);

var _tuiCodeSnippet = __webpack_require__(2);

var _tuiCodeSnippet2 = _interopRequireDefault(_tuiCodeSnippet);

var _editorProxy = __webpack_require__(3);

var _editorProxy2 = _interopRequireDefault(_editorProxy);

var _tableDataHandler = __webpack_require__(4);

var _tableDataHandler2 = _interopRequireDefault(_tableDataHandler);

var _tableRangeHandler = __webpack_require__(6);

var _tableRangeHandler2 = _interopRequireDefault(_tableRangeHandler);

var _tableRenderer = __webpack_require__(5);

var _tableRenderer2 = _interopRequireDefault(_tableRenderer);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
* @fileoverview Implements MergeCell
* @author NHN Ent. FE Development Lab <dl_javascript@nhnent.com>
*/
var CommandManager = _editorProxy2.default.CommandManager;

var BASIC_CELL_CONTENT = _tuiCodeSnippet2.default.browser.msie ? '' : '<br>';

var MergeCell = void 0;
if (CommandManager) {
  MergeCell = CommandManager.command('wysiwyg', /** @lends MergeCell */{
    name: 'MergeCells',
    /**
     * Command handler.
     * @param {WysiwygEditor} wwe - wysiwygEditor instance
     */
    exec: function exec(wwe) {
      var sq = wwe.getEditor();

      wwe.focus();

      if (!sq.hasFormat('TABLE')) {
        return;
      }

      var selectionManager = wwe.componentManager.getManager('tableSelection');
      var $selectedCells = selectionManager.getSelectedCells();

      if ($selectedCells.length < 2 || selectionManager.hasSelectedBothThAndTd($selectedCells)) {
        return;
      }

      var range = sq.getSelection().cloneRange();
      var $startContainer = (0, _jquery2.default)(range.startContainer);
      var $table = $startContainer.closest('table');
      var tableData = _tableDataHandler2.default.createTableData($table);
      var tableRange = _tableRangeHandler2.default.getTableSelectionRange(tableData, $selectedCells, $startContainer);

      _mergeCells(tableData, tableRange);

      var $newTable = _tableRenderer2.default.replaceTable($table, tableData);
      var focusCell = _findFocusCell($newTable, tableRange.start.rowIndex, tableRange.start.colIndex);

      _tableRenderer2.default.focusToCell(sq, range, focusCell);
    }
  });
}

/**
 * Pick merger content from selected cells.
 * @param {Array.<Array.<object>>} targetRows - target rows
 * @param {number} startColIndex - start column index
 * @param {number} endColIndex - end column index
 * @returns {string}
 * @private
 */
function _pickContent(targetRows, startColIndex, endColIndex) {
  var _ref;

  var limitColIndex = endColIndex + 1;
  var cells = (_ref = []).concat.apply(_ref, targetRows.map(function (rowData) {
    return rowData.slice(startColIndex, limitColIndex);
  }));
  var foundCellData = cells.filter(function (_ref2) {
    var content = _ref2.content;
    return content && content !== BASIC_CELL_CONTENT;
  });

  return foundCellData.length ? foundCellData[0].content : BASIC_CELL_CONTENT;
}

/**
 * Initialize cell data of target rows.
 * @param {Array.<Array.<object>>} targetRows - target rows
 * @param {number} startColIndex - start column index
 * @param {number} endColIndex - end column index
 * @private
 */
function _initCellData(targetRows, startColIndex, endColIndex) {
  var _ref3;

  var limitColIndex = endColIndex + 1;
  var targetCells = targetRows.map(function (rowData) {
    return rowData.slice(startColIndex, limitColIndex);
  });

  (_ref3 = []).concat.apply(_ref3, targetCells).slice(1).forEach(function (cellData) {
    var nodeName = cellData.nodeName;


    _tuiCodeSnippet2.default.forEach(cellData, function (value, name) {
      return delete cellData[name];
    });
    cellData.nodeName = nodeName;
  });
}

/**
 * Update rowMergeWith property of target rows for row merge.
 * @param {Array.<Array.<object>>} targetRows - target rows
 * @param {number} startColIndex - start column index
 * @param {number} endColIndex - end column index
 * @param {number} rowMergeWith - index of row merger
 * @private
 */
function _updateRowMergeWith(targetRows, startColIndex, endColIndex, rowMergeWith) {
  var limitColIndex = endColIndex + 1;

  targetRows.forEach(function (rowData) {
    rowData.slice(startColIndex, limitColIndex).forEach(function (cellData) {
      cellData.rowMergeWith = rowMergeWith;
    });
  });
}

/**
 * Update colMergeWith property of target rows for column merge.
 * @param {Array.<Array.<object>>} targetRows - target rows
 * @param {number} startColIndex - start column index
 * @param {number} endColIndex - end column index
 * @param {number} colMergeWith - index of column merger
 * @private
 */
function _updateColMergeWith(targetRows, startColIndex, endColIndex, colMergeWith) {
  var limitColIndex = endColIndex + 1;

  targetRows.forEach(function (rowData) {
    rowData.slice(startColIndex, limitColIndex).forEach(function (cellData) {
      cellData.colMergeWith = colMergeWith;
    });
  });
}

/**
 * Merge selected cells.
 * @param {Array.<Array.<object>>} tableData - table data
 * @param {{rowIndex: number, colIndex: number}} startRange - start table selection range
 * @param {{rowIndex: number, colIndex: number}} endRange - end table selection range
 * @private
 */
function _mergeCells(tableData, _ref4) {
  var startRange = _ref4.start,
      endRange = _ref4.end;

  var startRowIndex = startRange.rowIndex;
  var startColIndex = startRange.colIndex;
  var endRowIndex = endRange.rowIndex;
  var endColIndex = endRange.colIndex;
  var merger = tableData[startRowIndex][startColIndex];
  var targetRows = tableData.slice(startRowIndex, endRowIndex + 1);
  var rowspan = endRowIndex - startRowIndex + 1;
  var colspan = endColIndex - startColIndex + 1;

  merger.rowspan = rowspan;
  merger.colspan = colspan;
  merger.content = _pickContent(targetRows, startColIndex, endColIndex);
  _initCellData(targetRows, startColIndex, endColIndex);

  if (rowspan > 1) {
    _updateRowMergeWith(targetRows.slice(1), startColIndex, endColIndex, startRowIndex);
  }

  if (colspan > 1) {
    _updateColMergeWith(targetRows, startColIndex + 1, endColIndex, startColIndex);
  }
}

/**
 * Find focus cell element like td or th.
 * @param {jQuery} $newTable - changed table jQuery element
 * @param {number} rowIndex - row index of table data
 * @param {number} colIndex - column index of tabld data
 * @returns {HTMLElement}
 * @private
 */
function _findFocusCell($newTable, rowIndex, colIndex) {
  var tableData = _tableDataHandler2.default.createTableData($newTable);
  var cellElementIndex = _tableDataHandler2.default.findElementIndex(tableData, rowIndex, colIndex);

  return $newTable.find('tr').eq(cellElementIndex.rowIndex).find('td, th')[cellElementIndex.colIndex];
}

exports.default = MergeCell;

/***/ }),
/* 324 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports._hasMergedCell = _hasMergedCell;
exports._unmergeCells = _unmergeCells;

var _jquery = __webpack_require__(1);

var _jquery2 = _interopRequireDefault(_jquery);

var _tuiCodeSnippet = __webpack_require__(2);

var _tuiCodeSnippet2 = _interopRequireDefault(_tuiCodeSnippet);

var _editorProxy = __webpack_require__(3);

var _editorProxy2 = _interopRequireDefault(_editorProxy);

var _tableDataHandler = __webpack_require__(4);

var _tableDataHandler2 = _interopRequireDefault(_tableDataHandler);

var _tableRangeHandler = __webpack_require__(6);

var _tableRangeHandler2 = _interopRequireDefault(_tableRangeHandler);

var _tableRenderer = __webpack_require__(5);

var _tableRenderer2 = _interopRequireDefault(_tableRenderer);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
* @fileoverview Implements UnmergeCell
* @author NHN Ent. FE Development Lab <dl_javascript@nhnent.com>
*/
var CommandManager = _editorProxy2.default.CommandManager;


var UnmergeCell = void 0;
if (CommandManager) {
  UnmergeCell = CommandManager.command('wysiwyg', /** @lends UnmergeCell */{
    name: 'UnmergeCells',
    /**
     * Command handler.
     * @param {WysiwygEditor} wwe - wysiwygEditor instance
     */
    exec: function exec(wwe) {
      var sq = wwe.getEditor();
      var range = sq.getSelection().cloneRange();

      wwe.focus();

      if (!sq.hasFormat('TABLE')) {
        return;
      }

      var $startContainer = (0, _jquery2.default)(range.startContainer);
      var $table = $startContainer.closest('table');
      var tableData = _tableDataHandler2.default.createTableData($table);
      var $selectedCells = wwe.componentManager.getManager('tableSelection').getSelectedCells();
      var tableRange = _tableRangeHandler2.default.getTableSelectionRange(tableData, $selectedCells, $startContainer);

      if (!_hasMergedCell(tableData, tableRange)) {
        return;
      }

      _unmergeCells(tableData, tableRange);

      var $newTable = _tableRenderer2.default.replaceTable($table, tableData);
      var focusCell = _findFocusCell($newTable, tableRange.start.rowIndex, tableRange.start.colIndex);

      _tableRenderer2.default.focusToCell(sq, range, focusCell);
    }
  });
}

/**
 * Whether has merged cell.
 * @param {Array.<Array.<object>>} tableData - table data
 * @param {{rowIndex: number, colIndex: number}} startRange - start table selection range
 * @param {{rowIndex: number, colIndex: number}} endRange - end table selection range
 * @returns {boolean}
 * @private
 */
function _hasMergedCell(tableData, _ref) {
  var _ref2;

  var startRange = _ref.start,
      endRange = _ref.end;

  var startColIndex = startRange.colIndex;
  var limitColIndex = endRange.colIndex + 1;
  var targetRows = tableData.slice(startRange.rowIndex, endRange.rowIndex + 1);
  var targetCells = targetRows.map(function (rowData) {
    return rowData.slice(startColIndex, limitColIndex);
  });

  return !!(_ref2 = []).concat.apply(_ref2, targetCells).filter(function (cellData) {
    return cellData.colspan > 1 || cellData.rowspan > 1;
  }).length;
}

/**
 * Update merged cell data to basic cell data.
 * @param {Array.<Array.<object>>} tableData - table data
 * @param {number} startRowIndex - start row index
 * @param {number} startColIndex - start col index
 * @param {number} rowspan - rowspan property of merger cell
 * @param {number} colspan - colspan property of merger cell
 * @private
 */
function _updateMergedCells(tableData, startRowIndex, startColIndex, rowspan, colspan) {
  var limitRowIndex = startRowIndex + rowspan;
  var limitColIndex = startColIndex + colspan;
  var colRange = _tuiCodeSnippet2.default.range(startColIndex, limitColIndex);

  _tuiCodeSnippet2.default.range(startRowIndex, limitRowIndex).forEach(function (rowIndex) {
    var rowData = tableData[rowIndex];
    var startIndex = rowIndex === startRowIndex ? 1 : 0;

    colRange.slice(startIndex).forEach(function (colIndex) {
      rowData[colIndex] = _tableDataHandler2.default.createBasicCell(rowIndex, colIndex, rowData[colIndex].nodeName);
    });
  });
}

/**
 * Unmerge selected cells.
 * @param {Array.<Array.<object>>} tableData - table data
 * @param {{rowIndex: number, colIndex: number}} startRange - start table selection range
 * @param {{rowIndex: number, colIndex: number}} endRange - end table selection range
 * @private
 */
function _unmergeCells(tableData, _ref3) {
  var startRange = _ref3.start,
      endRange = _ref3.end;

  var colRange = _tuiCodeSnippet2.default.range(startRange.colIndex, endRange.colIndex + 1);

  _tuiCodeSnippet2.default.range(startRange.rowIndex, endRange.rowIndex + 1).forEach(function (rowIndex) {
    colRange.forEach(function (colIndex) {
      var cellData = tableData[rowIndex][colIndex];
      var colspan = cellData.colspan,
          rowspan = cellData.rowspan;


      if (colspan > 1 || rowspan > 1) {
        cellData.colspan = 1;
        cellData.rowspan = 1;
        _updateMergedCells(tableData, rowIndex, colIndex, rowspan, colspan);
      }
    });
  });
}

/**
 * Find focus cell element like td or th.
 * @param {jQuery} $newTable - changed table jQuery element
 * @param {number} rowIndex - row index of table data
 * @param {number} colIndex - column index of tabld data
 * @returns {HTMLElement}
 * @private
 */
function _findFocusCell($newTable, rowIndex, colIndex) {
  var tableData = _tableDataHandler2.default.createTableData($newTable);
  var cellElementIndex = _tableDataHandler2.default.findElementIndex(tableData, rowIndex, colIndex);

  return $newTable.find('tr').eq(cellElementIndex.rowIndex).find('td, th')[cellElementIndex.colIndex];
}

exports.default = UnmergeCell;

/***/ }),
/* 325 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _jquery = __webpack_require__(1);

var _jquery2 = _interopRequireDefault(_jquery);

var _editorProxy = __webpack_require__(3);

var _editorProxy2 = _interopRequireDefault(_editorProxy);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
* @fileoverview Implements table extension ui
* @author NHN Ent. FE Development Lab <dl_javascript@nhnent.com>
*/
var i18n = _editorProxy2.default.i18n;

/**
 * Change contextmenu content.
 * @param {object} popupTableUtils - PopupTableUtils instance for managing contextmenu of table
 * @private
 */

function _changeContent(popupTableUtils) {
  var POPUP_CONTENT = ['<button type="button" class="te-table-add-row">' + i18n.get('Add row') + '</button>', '<button type="button" class="te-table-add-col">' + i18n.get('Add col') + '</button>', '<button type="button" class="te-table-remove-row">' + i18n.get('Remove row') + '</button>', '<button type="button" class="te-table-remove-col">' + i18n.get('Remove col') + '</button>', '<hr/>', '<button type="button" class="te-table-merge">' + i18n.get('Merge cells') + '</button>', '<button type="button" class="te-table-unmerge">' + i18n.get('Unmerge cells') + '</button>', '<hr/>', '<button type="button" class="te-table-col-align-left">' + i18n.get('Align left') + '</button>', '<button type="button" class="te-table-col-align-center">' + i18n.get('Align center') + '</button>', '<button type="button" class="te-table-col-align-right">' + i18n.get('Align right') + '</button>', '<hr/>', '<button type="button" class="te-table-remove">' + i18n.get('Remove table') + '</button>'].join('');
  var $popupContent = (0, _jquery2.default)(POPUP_CONTENT);

  popupTableUtils.setContent($popupContent);
}

/**
 * Bind events for merge feature of contextmenu.
 * @param {object} popupTableUtils - PopupTableUtils instance for managing contextmenu of table
 * @param {object} eventManager - event manager instance of editor
 * @param {object} selectionManager - table selection manager instance
 * @private
 */
function _bindEvents(popupTableUtils, eventManager, selectionManager) {
  var $popupContent = popupTableUtils.$content;
  var $mergeBtn = (0, _jquery2.default)($popupContent[5]);
  var $unmergeBtn = (0, _jquery2.default)($popupContent[6]);
  var $separator = (0, _jquery2.default)($popupContent[7]);

  popupTableUtils.on('click .te-table-merge', function () {
    eventManager.emit('command', 'MergeCells');
  });

  popupTableUtils.on('click .te-table-unmerge', function () {
    eventManager.emit('command', 'UnmergeCells');
  });

  eventManager.listen('openPopupTableUtils', function () {
    var $selectedCells = selectionManager.getSelectedCells();
    var selectedCellCount = $selectedCells.length;

    if (selectedCellCount) {
      if (selectedCellCount < 2 || selectionManager.hasSelectedBothThAndTd($selectedCells)) {
        $mergeBtn.hide();
      } else {
        $mergeBtn.show();
      }

      if ($selectedCells.is('[rowspan], [colspan]')) {
        $unmergeBtn.show();
      } else {
        $unmergeBtn.hide();
      }
      $separator.show();
    } else {
      $mergeBtn.hide();
      $unmergeBtn.hide();
      $separator.hide();
    }
  });
}

/**
 * Update contextmenu UI.
 * @param {object} popupTableUtils - PopupTableUtils instance for managing contextmenu of table
 * @param {object} eventManager - event manager instance of editor
 * @param {object} selectionManager - table selection manager instance
 * @ignore
 */
function updateContextMenu(popupTableUtils, eventManager, selectionManager) {
  _changeContent(popupTableUtils);
  _bindEvents(popupTableUtils, eventManager, selectionManager);
}

exports.default = {
  updateContextMenu: updateContextMenu
};

/***/ }),
/* 326 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _jquery = __webpack_require__(1);

var _jquery2 = _interopRequireDefault(_jquery);

var _tuiColorPicker = __webpack_require__(327);

var _tuiColorPicker2 = _interopRequireDefault(_tuiColorPicker);

var _editorProxy = __webpack_require__(3);

var _editorProxy2 = _interopRequireDefault(_editorProxy);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var colorSyntaxRx = /\{color:(.+?)}(.*?)\{color}/g; /**
                                                    * @fileoverview Implements Color syntax Extension
                                                    * @author NHN Ent. FE Development Lab <dl_javascript@nhnent.com>
                                                    */

var colorHtmlRx = /<span (?:class="colour" )?style="color:(.+?)"(?: class="colour")?>(.*?)/g;
var colorHtmlCompleteRx = /<span (?:class="colour" )?style="color:(.+?)"(?: class="colour")?>(.*?)<\/span>/g;
var decimalColorRx = /rgb\((\d+)[, ]+(\d+)[, ]+(\d+)\)/g;

var RESET_COLOR = '#181818';

/**
 * color syntax extension
 * @param {editor} editor - editor
 * @ignore
 */
function colorSyntaxExtension(editor) {
  var _editor$options$color = editor.options.colorSyntax,
      colorSyntax = _editor$options$color === undefined ? {} : _editor$options$color;
  var preset = colorSyntax.preset,
      _colorSyntax$useCusto = colorSyntax.useCustomSyntax,
      useCustomSyntax = _colorSyntax$useCusto === undefined ? false : _colorSyntax$useCusto;


  editor.eventManager.listen('convertorAfterMarkdownToHtmlConverted', function (html) {
    var replacement = void 0;

    if (!useCustomSyntax) {
      replacement = html;
    } else {
      replacement = html.replace(colorSyntaxRx, function (matched, p1, p2) {
        return makeHTMLColorSyntaxAndTextRange(p2, p1).result;
      });
    }

    return replacement;
  });

  editor.eventManager.listen('convertorAfterHtmlToMarkdownConverted', function (markdown) {
    var findRx = useCustomSyntax ? colorHtmlCompleteRx : colorHtmlRx;

    return markdown.replace(findRx, function (founded, color, text) {
      var replacement = void 0;

      if (color.match(decimalColorRx)) {
        color = changeDecColorsToHex(color);
      }

      if (!useCustomSyntax) {
        replacement = founded.replace(/ ?class="colour" ?/g, ' ').replace(decimalColorRx, color);
      } else {
        replacement = makeCustomColorSyntaxAndTextRange(text, color).result;
      }

      return replacement;
    });
  });

  if (!editor.isViewer() && editor.getUI().name === 'default') {
    editor.addCommand('markdown', {
      name: 'color',
      exec: function exec(mde, color) {
        var cm = mde.getEditor();
        var rangeFrom = cm.getCursor('from');
        var rangeTo = cm.getCursor('to');
        var replacedText = void 0;
        var replacedFrom = void 0;

        if (!color) {
          return;
        }

        if (!useCustomSyntax) {
          var _makeHTMLColorSyntaxA = makeHTMLColorSyntaxAndTextRange(cm.getSelection(), color);

          replacedText = _makeHTMLColorSyntaxA.result;
          replacedFrom = _makeHTMLColorSyntaxA.from;

          cm.replaceSelection(replacedText);
        } else {
          var _makeCustomColorSynta = makeCustomColorSyntaxAndTextRange(cm.getSelection(), color);

          replacedText = _makeCustomColorSynta.result;
          replacedFrom = _makeCustomColorSynta.from;

          cm.replaceSelection(replacedText);
        }

        cm.setSelection({
          line: rangeFrom.line,
          ch: rangeFrom.ch + replacedFrom
        }, {
          line: rangeTo.line,
          ch: rangeFrom.line === rangeTo.line ? rangeTo.ch + replacedFrom : rangeTo.ch
        });

        mde.focus();
      }
    });

    editor.addCommand('wysiwyg', {
      name: 'color',
      exec: function exec(wwe, color) {
        if (!color) {
          return;
        }

        var sq = wwe.getEditor();
        var tableSelectionManager = wwe.componentManager.getManager('tableSelection');
        if (sq.hasFormat('table') && tableSelectionManager.getSelectedCells().length) {
          tableSelectionManager.styleToSelectedCells(styleColor, color);

          var range = sq.getSelection();
          range.collapse(true);
          sq.setSelection(range);
        } else {
          styleColor(sq, color);
        }
      }
    });

    initUI(editor, preset);
  }
}

/**
 * style color
 * @param {SquireExt} sq - squire ext instance
 * @param {string} color - color sting value
 * @ignore
 */
function styleColor(sq, color) {
  if (!sq.hasFormat('PRE')) {
    if (color === RESET_COLOR) {
      sq.changeFormat(null, {
        class: 'colour',
        tag: 'span'
      });
    } else {
      sq.setTextColour(color);
    }
  }
}

/**
 * Initialize UI
 * @param {object} editor - Editor instance
 * @param {Array.<string>} preset - Preset for color palette
 * @ignore
 */
function initUI(editor, preset) {
  var name = 'colorSyntax';
  var className = 'tui-color';
  var i18n = editor.i18n;
  var toolbar = editor.getUI().getToolbar();
  var usageStatistics = editor.options.usageStatistics;


  editor.eventManager.addEventType('colorButtonClicked');

  toolbar.insertItem(3, {
    type: 'button',
    options: {
      name: name,
      className: className,
      event: 'colorButtonClicked',
      tooltip: i18n.get('Text color')
    }
  });
  var colorSyntaxButtonIndex = toolbar.indexOfItem(name);

  var _toolbar$getItem = toolbar.getItem(colorSyntaxButtonIndex),
      $button = _toolbar$getItem.$el;

  var $colorPickerContainer = (0, _jquery2.default)('<div />');

  var $buttonBar = (0, _jquery2.default)('<button type="button" class="te-apply-button">' + i18n.get('OK') + '</button>');

  var cpOptions = {
    container: $colorPickerContainer[0],
    usageStatistics: usageStatistics
  };

  if (preset) {
    cpOptions.preset = preset;
  }

  var colorPicker = _tuiColorPicker2.default.create(cpOptions);

  var selectedColor = colorPicker.getColor();

  $colorPickerContainer.append($buttonBar);

  var popup = editor.getUI().createPopup({
    header: false,
    title: false,
    content: $colorPickerContainer,
    className: 'tui-popup-color',
    $target: editor.getUI().getToolbar().$el,
    css: {
      'width': 'auto',
      'position': 'absolute'
    }
  });

  editor.eventManager.listen('focus', function () {
    popup.hide();
  });

  editor.eventManager.listen('colorButtonClicked', function () {
    if (popup.isShow()) {
      popup.hide();

      return;
    }

    var _$button$get = $button.get(0),
        offsetTop = _$button$get.offsetTop,
        offsetLeft = _$button$get.offsetLeft;

    popup.$el.css({
      top: offsetTop + $button.outerHeight(),
      left: offsetLeft
    });
    colorPicker.slider.toggle(true);

    editor.eventManager.emit('closeAllPopup');
    popup.show();
  });

  editor.eventManager.listen('closeAllPopup', function () {
    popup.hide();
  });

  editor.eventManager.listen('removeEditor', function () {
    colorPicker.off('selectColor');
  });

  colorPicker.on('selectColor', function (e) {
    selectedColor = e.color;

    if (e.origin === 'palette') {
      editor.exec('color', selectedColor);
      popup.hide();
    }
  });

  popup.$el.find('.te-apply-button').on('click', function () {
    editor.exec('color', selectedColor);
  });
}

/**
 * make custom color syntax
 * @param {string} text - Text content
 * @param {string} color - Color value
 * @returns {object} - wrapped text and range(from, to)
 * @ignore
 */
function makeCustomColorSyntaxAndTextRange(text, color) {
  return wrapTextAndGetRange('{color:' + color + '}', text, '{color}');
}

/**
 * Make HTML color syntax by given text content and color value
 * @param {string} text Text - content
 * @param {string} color Color - value
 * @returns {object} - wrapped text and range(from, to)
 * @ignore
 */
function makeHTMLColorSyntaxAndTextRange(text, color) {
  return wrapTextAndGetRange('<span style="color:' + color + '">', text, '</span>');
}

/**
 * wrap text with pre & post and return with text range
 * @param {string} pre - text pre
 * @param {string} text - text
 * @param {string} post - text post
 * @returns {object} - wrapped text and range(from, to)
 * @ignore
 */
function wrapTextAndGetRange(pre, text, post) {
  return {
    result: '' + pre + text + post,
    from: pre.length,
    to: pre.length + text.length
  };
}

/**
 * Change decimal color values to hexadecimal color value
 * @param {string} color Color value string
 * @returns {string}
 * @ignore
 */
function changeDecColorsToHex(color) {
  return color.replace(decimalColorRx, function (colorValue, r, g, b) {
    var hr = changeDecColorToHex(r);
    var hg = changeDecColorToHex(g);
    var hb = changeDecColorToHex(b);

    return '#' + hr + hg + hb;
  });
}

/**
 * change individual dec color value to hex color
 * @param {string} color - individual color value
 * @returns {string} - zero padded color string
 * @ignore
 */
function changeDecColorToHex(color) {
  var hexColor = parseInt(color, 10);
  hexColor = hexColor.toString(16);
  hexColor = doubleZeroPad(hexColor);

  return hexColor;
}

/**
 * leading 2 zeros number string
 * @param {string} numberStr - number string
 * @returns {string}
 * @ignore
 */
function doubleZeroPad(numberStr) {
  var padded = '00' + numberStr;

  return padded.substr(padded.length - 2);
}

_editorProxy2.default.defineExtension('colorSyntax', colorSyntaxExtension);

exports.default = colorSyntaxExtension;

/***/ }),
/* 327 */
/***/ (function(module, exports, __webpack_require__) {

/*!
 * Toast UI Colorpicker
 * @version 2.2.0
 * @author NHNEnt FE Development Team <dl_javascript@nhnent.com>
 * @license MIT
 */
(function webpackUniversalModuleDefinition(root, factory) {
	if(true)
		module.exports = factory(__webpack_require__(2));
	else if(typeof define === 'function' && define.amd)
		define(["tui-code-snippet"], factory);
	else if(typeof exports === 'object')
		exports["colorPicker"] = factory(require("tui-code-snippet"));
	else
		root["tui"] = root["tui"] || {}, root["tui"]["colorPicker"] = factory((root["tui"] && root["tui"]["util"]));
})(this, function(__WEBPACK_EXTERNAL_MODULE_8__) {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "dist";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(1);
	module.exports = __webpack_require__(6);


/***/ }),
/* 1 */
/***/ (function(module, exports) {

	// removed by extract-text-webpack-plugin

/***/ }),
/* 2 */,
/* 3 */,
/* 4 */,
/* 5 */,
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var domutil = __webpack_require__(7);
	var domevent = __webpack_require__(9);
	var Collection = __webpack_require__(10);
	var View = __webpack_require__(11);
	var Drag = __webpack_require__(12);
	var create = __webpack_require__(13);
	var Palette = __webpack_require__(16);
	var Slider = __webpack_require__(18);
	var colorutil = __webpack_require__(14);
	var svgvml = __webpack_require__(19);

	var colorPicker = {
	    domutil: domutil,
	    domevent: domevent,
	    Collection: Collection,
	    View: View,
	    Drag: Drag,

	    create: create,
	    Palette: Palette,
	    Slider: Slider,
	    colorutil: colorutil,
	    svgvml: svgvml
	};

	module.exports = colorPicker;

/***/ }),
/* 7 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileoverview Utility modules for manipulate DOM elements.
	 * @author NHN Ent. FE Development Team <dl_javascript@nhnent.com>
	 */

	'use strict';

	var snippet = __webpack_require__(8);
	var domevent = __webpack_require__(9);
	var Collection = __webpack_require__(10);

	var util = snippet,
	    posKey = '_pos',
	    supportSelectStart = 'onselectstart' in document,
	    prevSelectStyle = '',
	    domutil,
	    userSelectProperty;

	var CSS_AUTO_REGEX = /^auto$|^$|%/;

	function trim(str) {
	    return str.replace(/^\s\s*/, '').replace(/\s\s*$/, '');
	}

	domutil = {
	    /**
	     * Create DOM element and return it.
	     * @param {string} tagName Tag name to append.
	     * @param {HTMLElement} [container] HTML element will be parent to created element.
	     * if not supplied, will use **document.body**
	     * @param {string} [className] Design class names to appling created element.
	     * @returns {HTMLElement} HTML element created.
	     */
	    appendHTMLElement: function (tagName, container, className) {
	        var el;

	        className = className || '';

	        el = document.createElement(tagName);
	        el.className = className;

	        if (container) {
	            container.appendChild(el);
	        } else {
	            document.body.appendChild(el);
	        }

	        return el;
	    },

	    /**
	     * Remove element from parent node.
	     * @param {HTMLElement} el - element to remove.
	     */
	    remove: function (el) {
	        if (el && el.parentNode) {
	            el.parentNode.removeChild(el);
	        }
	    },

	    /**
	     * Get element by id
	     * @param {string} id element id attribute
	     * @returns {HTMLElement} element
	     */
	    get: function (id) {
	        return document.getElementById(id);
	    },

	    /**
	     * Check supplied element is matched selector.
	     * @param {HTMLElement} el - element to check
	     * @param {string} selector - selector string to check
	     * @returns {boolean} match?
	     */
	    _matcher: function (el, selector) {
	        var cssClassSelector = /^\./,
	            idSelector = /^#/;

	        if (cssClassSelector.test(selector)) {
	            return domutil.hasClass(el, selector.replace('.', ''));
	        } else if (idSelector.test(selector)) {
	            return el.id === selector.replace('#', '');
	        }

	        return el.nodeName.toLowerCase() === selector.toLowerCase();
	    },

	    /**
	     * Find DOM element by specific selectors.
	     * below three selector only supported.
	     *
	     * 1. css selector
	     * 2. id selector
	     * 3. nodeName selector
	     * @param {string} selector selector
	     * @param {(HTMLElement|string)} [root] You can assign root element to find. if not supplied, document.body will use.
	     * @param {boolean|function} [multiple=false] - set true then return all elements that meet condition, if set function then use it filter function.
	     * @returns {HTMLElement} HTML element finded.
	     */
	    find: function (selector, root, multiple) {
	        var result = [],
	            found = false,
	            isFirst = util.isUndefined(multiple) || multiple === false,
	            isFilter = util.isFunction(multiple);

	        if (util.isString(root)) {
	            root = domutil.get(root);
	        }

	        root = root || window.document.body;

	        function recurse(el, selector) {
	            var childNodes = el.childNodes,
	                i = 0,
	                len = childNodes.length,
	                cursor;

	            for (; i < len; i += 1) {
	                cursor = childNodes[i];

	                if (cursor.nodeName === '#text') {
	                    continue;
	                }

	                if (domutil._matcher(cursor, selector)) {
	                    if (isFilter && multiple(cursor) || !isFilter) {
	                        result.push(cursor);
	                    }

	                    if (isFirst) {
	                        found = true;
	                        break;
	                    }
	                } else if (cursor.childNodes.length > 0) {
	                    recurse(cursor, selector);
	                    if (found) {
	                        break;
	                    }
	                }
	            }
	        }

	        recurse(root, selector);

	        return isFirst ? result[0] || null : result;
	    },

	    /**
	     * Find parent element recursively.
	     * @param {HTMLElement} el - base element to start find.
	     * @param {string} selector - selector string for find
	     * @returns {HTMLElement} - element finded or undefined.
	     */
	    closest: function (el, selector) {
	        var parent = el.parentNode;

	        if (domutil._matcher(el, selector)) {
	            return el;
	        }

	        while (parent && parent !== window.document.body) {
	            if (domutil._matcher(parent, selector)) {
	                return parent;
	            }

	            parent = parent.parentNode;
	        }
	    },

	    /**
	     * Return texts inside element.
	     * @param {HTMLElement} el target element
	     * @returns {string} text inside node
	     */
	    text: function (el) {
	        var ret = '',
	            i = 0,
	            nodeType = el.nodeType;

	        if (nodeType) {
	            if (nodeType === 1 || nodeType === 9 || nodeType === 11) {
	                // nodes that available contain other nodes
	                if (typeof el.textContent === 'string') {
	                    return el.textContent;
	                }

	                for (el = el.firstChild; el; el = el.nextSibling) {
	                    ret += domutil.text(el);
	                }
	            } else if (nodeType === 3 || nodeType === 4) {
	                // TEXT, CDATA SECTION
	                return el.nodeValue;
	            }
	        } else {
	            for (; el[i]; i += 1) {
	                ret += domutil.text(el[i]);
	            }
	        }

	        return ret;
	    },

	    /**
	     * Set data attribute to target element
	     * @param {HTMLElement} el - element to set data attribute
	     * @param {string} key - key
	     * @param {string|number} data - data value
	     */
	    setData: function (el, key, data) {
	        if ('dataset' in el) {
	            el.dataset[key] = data;

	            return;
	        }

	        el.setAttribute('data-' + key, data);
	    },

	    /**
	     * Get data value from data-attribute
	     * @param {HTMLElement} el - target element
	     * @param {string} key - key
	     * @returns {string} value
	     */
	    getData: function (el, key) {
	        if ('dataset' in el) {
	            return el.dataset[key];
	        }

	        return el.getAttribute('data-' + key);
	    },

	    /**
	     * Check element has specific design class name.
	     * @param {HTMLElement} el target element
	     * @param {string} name css class
	     * @returns {boolean} return true when element has that css class name
	     */
	    hasClass: function (el, name) {
	        var className;

	        if (!util.isUndefined(el.classList)) {
	            return el.classList.contains(name);
	        }

	        className = domutil.getClass(el);

	        return className.length > 0 && new RegExp('(^|\\s)' + name + '(\\s|$)').test(className);
	    },

	    /**
	     * Add design class to HTML element.
	     * @param {HTMLElement} el target element
	     * @param {string} name css class name
	     */
	    addClass: function (el, name) {
	        var className;

	        if (!util.isUndefined(el.classList)) {
	            util.forEachArray(name.split(' '), function (value) {
	                el.classList.add(value);
	            });
	        } else if (!domutil.hasClass(el, name)) {
	            className = domutil.getClass(el);
	            domutil.setClass(el, (className ? className + ' ' : '') + name);
	        }
	    },

	    /**
	     *
	     * Overwrite design class to HTML element.
	     * @param {HTMLElement} el target element
	     * @param {string} name css class name
	     */
	    setClass: function (el, name) {
	        if (util.isUndefined(el.className.baseVal)) {
	            el.className = name;
	        } else {
	            el.className.baseVal = name;
	        }
	    },

	    /**
	     * Element에 cssClass속성을 제거하는 메서드
	     * Remove specific design class from HTML element.
	     * @param {HTMLElement} el target element
	     * @param {string} name class name to remove
	     */
	    removeClass: function (el, name) {
	        var removed = '';

	        if (!util.isUndefined(el.classList)) {
	            el.classList.remove(name);
	        } else {
	            removed = (' ' + domutil.getClass(el) + ' ').replace(' ' + name + ' ', ' ');
	            domutil.setClass(el, trim(removed));
	        }
	    },

	    /**
	     * Get HTML element's design classes.
	     * @param {HTMLElement} el target element
	     * @returns {string} element css class name
	     */
	    getClass: function (el) {
	        if (!el || !el.className) {
	            return '';
	        }

	        return util.isUndefined(el.className.baseVal) ? el.className : el.className.baseVal;
	    },

	    /**
	     * Get specific CSS style value from HTML element.
	     * @param {HTMLElement} el target element
	     * @param {string} style css attribute name
	     * @returns {(string|null)} css style value
	     */
	    getStyle: function (el, style) {
	        var value = el.style[style] || el.currentStyle && el.currentStyle[style],
	            css;

	        if ((!value || value === 'auto') && document.defaultView) {
	            css = document.defaultView.getComputedStyle(el, null);
	            value = css ? css[style] : null;
	        }

	        return value === 'auto' ? null : value;
	    },

	    /**
	     * get element's computed style values.
	     *
	     * in lower IE8. use polyfill function that return object. it has only one function 'getPropertyValue'
	     * @param {HTMLElement} el - element want to get style.
	     * @returns {object} virtual CSSStyleDeclaration object.
	     */
	    getComputedStyle: function (el) {
	        var defaultView = document.defaultView;

	        if (!defaultView || !defaultView.getComputedStyle) {
	            return {
	                getPropertyValue: function (prop) {
	                    var re = /(\-([a-z]){1})/g;
	                    if (prop === 'float') {
	                        prop = 'styleFloat';
	                    }

	                    if (re.test(prop)) {
	                        prop = prop.replace(re, function () {
	                            return arguments[2].toUpperCase();
	                        });
	                    }

	                    return el.currentStyle[prop] ? el.currentStyle[prop] : null;
	                }
	            };
	        }

	        return document.defaultView.getComputedStyle(el);
	    },

	    /**
	     * Set position CSS style.
	     * @param {HTMLElement} el target element
	     * @param {number} [x=0] left pixel value.
	     * @param {number} [y=0] top pixel value.
	     */
	    setPosition: function (el, x, y) {
	        x = util.isUndefined(x) ? 0 : x;
	        y = util.isUndefined(y) ? 0 : y;

	        el[posKey] = [x, y];

	        el.style.left = x + 'px';
	        el.style.top = y + 'px';
	    },

	    /**
	     * Get position from HTML element.
	     * @param {HTMLElement} el target element
	     * @param {boolean} [clear=false] clear cache before calculating position.
	     * @returns {number[]} point
	     */
	    getPosition: function (el, clear) {
	        var left, top, bound;

	        if (clear) {
	            el[posKey] = null;
	        }

	        if (el[posKey]) {
	            return el[posKey];
	        }

	        left = 0;
	        top = 0;

	        if ((CSS_AUTO_REGEX.test(el.style.left) || CSS_AUTO_REGEX.test(el.style.top)) && 'getBoundingClientRect' in el) {
	            // 엘리먼트의 left또는 top이 'auto'일 때 수단
	            bound = el.getBoundingClientRect();

	            left = bound.left;
	            top = bound.top;
	        } else {
	            left = parseFloat(el.style.left || 0);
	            top = parseFloat(el.style.top || 0);
	        }

	        return [left, top];
	    },

	    /**
	     * Return element's size
	     * @param {HTMLElement} el target element
	     * @returns {number[]} width, height
	     */
	    getSize: function (el) {
	        var bound,
	            width = domutil.getStyle(el, 'width'),
	            height = domutil.getStyle(el, 'height');

	        if ((CSS_AUTO_REGEX.test(width) || CSS_AUTO_REGEX.test(height)) && 'getBoundingClientRect' in el) {
	            bound = el.getBoundingClientRect();
	            width = bound.width;
	            height = bound.height;
	        } else {
	            width = parseFloat(width || 0);
	            height = parseFloat(height || 0);
	        }

	        return [width, height];
	    },

	    /**
	     * Check specific CSS style is available.
	     * @param {array} props property name to testing
	     * @returns {(string|boolean)} return true when property is available
	     * @example
	     * var props = ['transform', '-webkit-transform'];
	     * domutil.testProp(props);    // 'transform'
	     */
	    testProp: function (props) {
	        var style = document.documentElement.style,
	            i = 0,
	            len = props.length;

	        for (; i < len; i += 1) {
	            if (props[i] in style) {
	                return props[i];
	            }
	        }

	        return false;
	    },

	    /**
	     * Get form data
	     * @param {HTMLFormElement} formElement - form element to extract data
	     * @returns {object} form data
	     */
	    getFormData: function (formElement) {
	        var groupedByName = new Collection(function () {
	            return this.length;
	        }),
	            noDisabledFilter = function (el) {
	            return !el.disabled;
	        },
	            output = {};

	        groupedByName.add.apply(groupedByName, domutil.find('input', formElement, noDisabledFilter).concat(domutil.find('select', formElement, noDisabledFilter)).concat(domutil.find('textarea', formElement, noDisabledFilter)));

	        groupedByName = groupedByName.groupBy(function (el) {
	            return el && el.getAttribute('name') || '_other';
	        });

	        util.forEach(groupedByName, function (elements, name) {
	            if (name === '_other') {
	                return;
	            }

	            elements.each(function (el) {
	                var nodeName = el.nodeName.toLowerCase(),
	                    type = el.type,
	                    result = [];

	                if (type === 'radio') {
	                    result = [elements.find(function (el) {
	                        return el.checked;
	                    }).toArray().pop()];
	                } else if (type === 'checkbox') {
	                    result = elements.find(function (el) {
	                        return el.checked;
	                    }).toArray();
	                } else if (nodeName === 'select') {
	                    elements.find(function (el) {
	                        return !!el.childNodes.length;
	                    }).each(function (el) {
	                        result = result.concat(domutil.find('option', el, function (opt) {
	                            return opt.selected;
	                        }));
	                    });
	                } else {
	                    result = elements.find(function (el) {
	                        return el.value !== '';
	                    }).toArray();
	                }

	                result = util.map(result, function (el) {
	                    return el.value;
	                });

	                if (!result.length) {
	                    result = '';
	                } else if (result.length === 1) {
	                    result = result[0];
	                }

	                output[name] = result;
	            });
	        });

	        return output;
	    }
	};

	userSelectProperty = domutil.testProp(['userSelect', 'WebkitUserSelect', 'OUserSelect', 'MozUserSelect', 'msUserSelect']);

	/**
	 * Disable browser's text selection behaviors.
	 * @method
	 */
	domutil.disableTextSelection = function () {
	    if (supportSelectStart) {
	        return function () {
	            domevent.on(window, 'selectstart', domevent.preventDefault);
	        };
	    }

	    return function () {
	        var style = document.documentElement.style;
	        prevSelectStyle = style[userSelectProperty];
	        style[userSelectProperty] = 'none';
	    };
	}();

	/**
	 * Enable browser's text selection behaviors.
	 * @method
	 */
	domutil.enableTextSelection = function () {
	    if (supportSelectStart) {
	        return function () {
	            domevent.off(window, 'selectstart', domevent.preventDefault);
	        };
	    }

	    return function () {
	        document.documentElement.style[userSelectProperty] = prevSelectStyle;
	    };
	}();

	/**
	 * Disable browser's image drag behaviors.
	 */
	domutil.disableImageDrag = function () {
	    domevent.on(window, 'dragstart', domevent.preventDefault);
	};

	/**
	 * Enable browser's image drag behaviors.
	 */
	domutil.enableImageDrag = function () {
	    domevent.off(window, 'dragstart', domevent.preventDefault);
	};

	/**
	 * Replace matched property with template
	 * @param {string} template - String of template
	 * @param {Object} propObj - Properties
	 * @returns {string} Replaced template string
	 */
	domutil.applyTemplate = function (template, propObj) {
	    var newTemplate = template.replace(/\{\{(\w*)\}\}/g, function (value, prop) {
	        return propObj.hasOwnProperty(prop) ? propObj[prop] : '';
	    });

	    return newTemplate;
	};

	module.exports = domutil;

/***/ }),
/* 8 */
/***/ (function(module, exports) {

	module.exports = __WEBPACK_EXTERNAL_MODULE_8__;

/***/ }),
/* 9 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileoverview Utility module for handling DOM events.
	 * @author NHN Ent. FE Development Team <dl_javascript@nhnent.com>
	 */

	'use strict';

	var snippet = __webpack_require__(8);

	var util = snippet,
	    browser = util.browser,
	    eventKey = '_evt',
	    DRAG = {
	    START: ['touchstart', 'mousedown'],
	    END: {
	        mousedown: 'mouseup',
	        touchstart: 'touchend',
	        pointerdown: 'touchend',
	        MSPointerDown: 'touchend'
	    },
	    MOVE: {
	        mousedown: 'mousemove',
	        touchstart: 'touchmove',
	        pointerdown: 'touchmove',
	        MSPointerDown: 'touchmove'
	    }
	};

	var domevent = {
	    /**
	     * Bind dom events.
	     * @param {HTMLElement} obj HTMLElement to bind events.
	     * @param {(string|object)} types Space splitted events names or eventName:handler object.
	     * @param {*} fn handler function or context for handler method.
	     * @param {*} [context] context object for handler method.
	     */
	    on: function (obj, types, fn, context) {
	        if (util.isString(types)) {
	            util.forEach(types.split(' '), function (type) {
	                domevent._on(obj, type, fn, context);
	            });

	            return;
	        }

	        util.forEachOwnProperties(types, function (handler, type) {
	            domevent._on(obj, type, handler, fn);
	        });
	    },

	    /**
	     * DOM event binding.
	     * @param {HTMLElement} obj HTMLElement to bind events.
	     * @param {String} type The name of events.
	     * @param {*} fn handler function
	     * @param {*} [context] context object for handler method.
	     * @private
	     */
	    _on: function (obj, type, fn, context) {
	        var id, handler, originHandler;

	        id = type + util.stamp(fn) + (context ? '_' + util.stamp(context) : '');

	        if (obj[eventKey] && obj[eventKey][id]) {
	            return;
	        }

	        handler = function (e) {
	            fn.call(context || obj, e || window.event);
	        };

	        originHandler = handler;

	        if ('addEventListener' in obj) {
	            if (type === 'mouseenter' || type === 'mouseleave') {
	                handler = function (e) {
	                    e = e || window.event;
	                    if (!domevent._checkMouse(obj, e)) {
	                        return;
	                    }
	                    originHandler(e);
	                };
	                obj.addEventListener(type === 'mouseenter' ? 'mouseover' : 'mouseout', handler, false);
	            } else {
	                if (type === 'mousewheel') {
	                    obj.addEventListener('DOMMouseScroll', handler, false);
	                }

	                obj.addEventListener(type, handler, false);
	            }
	        } else if ('attachEvent' in obj) {
	            obj.attachEvent('on' + type, handler);
	        }

	        obj[eventKey] = obj[eventKey] || {};
	        obj[eventKey][id] = handler;
	    },

	    /**
	     * Unbind DOM Event handler.
	     * @param {HTMLElement} obj HTMLElement to unbind.
	     * @param {(string|object)} types Space splitted events names or eventName:handler object.
	     * @param {*} fn handler function or context for handler method.
	     * @param {*} [context] context object for handler method.
	     */
	    off: function (obj, types, fn, context) {
	        if (util.isString(types)) {
	            util.forEach(types.split(' '), function (type) {
	                domevent._off(obj, type, fn, context);
	            });

	            return;
	        }

	        util.forEachOwnProperties(types, function (handler, type) {
	            domevent._off(obj, type, handler, fn);
	        });
	    },

	    /**
	     * Unbind DOM event handler.
	     * @param {HTMLElement} obj HTMLElement to unbind.
	     * @param {String} type The name of event to unbind.
	     * @param {function()} fn Event handler that supplied when binding.
	     * @param {*} context context object that supplied when binding.
	     * @private
	     */
	    _off: function (obj, type, fn, context) {
	        var id = type + util.stamp(fn) + (context ? '_' + util.stamp(context) : ''),
	            handler = obj[eventKey] && obj[eventKey][id];

	        if (!handler) {
	            return;
	        }

	        if ('removeEventListener' in obj) {
	            if (type === 'mouseenter' || type === 'mouseleave') {
	                obj.removeEventListener(type === 'mouseenter' ? 'mouseover' : 'mouseout', handler, false);
	            } else {
	                if (type === 'mousewheel') {
	                    obj.removeEventListener('DOMMouseScroll', handler, false);
	                }

	                obj.removeEventListener(type, handler, false);
	            }
	        } else if ('detachEvent' in obj) {
	            try {
	                obj.detachEvent('on' + type, handler);
	            } catch (e) {} //eslint-disable-line
	        }

	        delete obj[eventKey][id];

	        if (util.keys(obj[eventKey]).length) {
	            return;
	        }

	        // throw exception when deleting host object's property in below IE8
	        if (util.browser.msie && util.browser.version < 9) {
	            obj[eventKey] = null;

	            return;
	        }

	        delete obj[eventKey];
	    },

	    /**
	     * Bind DOM event. this event will unbind after invokes.
	     * @param {HTMLElement} obj HTMLElement to bind events.
	     * @param {(string|object)} types Space splitted events names or eventName:handler object.
	     * @param {*} fn handler function or context for handler method.
	     * @param {*} [context] context object for handler method.
	     */
	    once: function (obj, types, fn, context) {
	        var that = this;

	        if (util.isObject(types)) {
	            util.forEachOwnProperties(types, function (handler, type) {
	                domevent.once(obj, type, handler, fn);
	            });

	            return;
	        }

	        function onceHandler() {
	            fn.apply(context || obj, arguments);
	            that._off(obj, types, onceHandler, context);
	        }

	        domevent.on(obj, types, onceHandler, context);
	    },

	    /**
	     * Cancel event bubbling.
	     * @param {Event} e Event object.
	     */
	    stopPropagation: function (e) {
	        if (e.stopPropagation) {
	            e.stopPropagation();
	        } else {
	            e.cancelBubble = true;
	        }
	    },

	    /**
	     * Cancel browser default actions.
	     * @param {Event} e Event object.
	     */
	    preventDefault: function (e) {
	        if (e.preventDefault) {
	            e.preventDefault();
	        } else {
	            e.returnValue = false;
	        }
	    },

	    /**
	     * Syntatic sugar of stopPropagation and preventDefault
	     * @param {Event} e Event object.
	     */
	    stop: function (e) {
	        domevent.preventDefault(e);
	        domevent.stopPropagation(e);
	    },

	    /**
	     * Stop scroll events.
	     * @param {HTMLElement} el HTML element to prevent scroll.
	     */
	    disableScrollPropagation: function (el) {
	        domevent.on(el, 'mousewheel MozMousePixelScroll', domevent.stopPropagation);
	    },

	    /**
	     * Stop all events related with click.
	     * @param {HTMLElement} el HTML element to prevent all event related with click.
	     */
	    disableClickPropagation: function (el) {
	        domevent.on(el, DRAG.START.join(' ') + ' click dblclick', domevent.stopPropagation);
	    },

	    /**
	     * Get mouse position from mouse event.
	     *
	     * If supplied relatveElement parameter then return relative position based on element.
	     * @param {Event} mouseEvent Mouse event object
	     * @param {HTMLElement} relativeElement HTML element that calculate relative position.
	     * @returns {number[]} mouse position.
	     */
	    getMousePosition: function (mouseEvent, relativeElement) {
	        var rect;

	        if (!relativeElement) {
	            return [mouseEvent.clientX, mouseEvent.clientY];
	        }

	        rect = relativeElement.getBoundingClientRect();

	        return [mouseEvent.clientX - rect.left - relativeElement.clientLeft, mouseEvent.clientY - rect.top - relativeElement.clientTop];
	    },

	    /**
	     * Normalize mouse wheel event that different each browsers.
	     * @param {MouseEvent} e Mouse wheel event.
	     * @returns {Number} delta
	     */
	    getWheelDelta: function (e) {
	        var delta = 0;

	        if (e.wheelDelta) {
	            delta = e.wheelDelta / 120;
	        }

	        if (e.detail) {
	            delta = -e.detail / 3;
	        }

	        return delta;
	    },

	    /**
	     * prevent firing mouseleave event when mouse entered child elements.
	     * @param {HTMLElement} el HTML element
	     * @param {MouseEvent} e Mouse event
	     * @returns {Boolean} leave?
	     * @private
	     */
	    _checkMouse: function (el, e) {
	        var related = e.relatedTarget;

	        if (!related) {
	            return true;
	        }

	        try {
	            while (related && related !== el) {
	                related = related.parentNode;
	            }
	        } catch (err) {
	            return false;
	        }

	        return related !== el;
	    },

	    /**
	     * Trigger specific events to html element.
	     * @param {HTMLElement} obj HTMLElement
	     * @param {string} type Event type name
	     * @param {object} [eventData] Event data
	     */
	    trigger: function (obj, type, eventData) {
	        var rMouseEvent = /(mouse|click)/;
	        if (util.isUndefined(eventData) && rMouseEvent.exec(type)) {
	            eventData = domevent.mouseEvent(type);
	        }

	        if (obj.dispatchEvent) {
	            obj.dispatchEvent(eventData);
	        } else if (obj.fireEvent) {
	            obj.fireEvent('on' + type, eventData);
	        }
	    },

	    /**
	     * Create virtual mouse event.
	     *
	     * Tested at
	     *
	     * - IE7 ~ IE11
	     * - Chrome
	     * - Firefox
	     * - Safari
	     * @param {string} type Event type
	     * @param {object} [eventObj] Event data
	     * @returns {MouseEvent} Virtual mouse event.
	     */
	    mouseEvent: function (type, eventObj) {
	        var evt, e;

	        e = util.extend({
	            bubbles: true,
	            cancelable: type !== 'mousemove',
	            view: window,
	            wheelDelta: 0,
	            detail: 0,
	            screenX: 0,
	            screenY: 0,
	            clientX: 0,
	            clientY: 0,
	            ctrlKey: false,
	            altKey: false,
	            shiftKey: false,
	            metaKey: false,
	            button: 0,
	            relatedTarget: undefined // eslint-disable-line
	        }, eventObj);

	        // prevent throw error when inserting wheelDelta property to mouse event on below IE8
	        if (browser.msie && browser.version < 9) {
	            delete e.wheelDelta;
	        }

	        if (typeof document.createEvent === 'function') {
	            evt = document.createEvent('MouseEvents');
	            evt.initMouseEvent(type, e.bubbles, e.cancelable, e.view, e.detail, e.screenX, e.screenY, e.clientX, e.clientY, e.ctrlKey, e.altKey, e.shiftKey, e.metaKey, e.button, document.body.parentNode);
	        } else if (document.createEventObject) {
	            evt = document.createEventObject();

	            util.forEach(e, function (value, propName) {
	                evt[propName] = value;
	            }, this);
	            evt.button = {
	                0: 1,
	                1: 4,
	                2: 2
	            }[evt.button] || evt.button;
	        }

	        return evt;
	    },

	    /**
	     * Normalize mouse event's button attributes.
	     *
	     * Can detect which button is clicked by this method.
	     *
	     * Meaning of return numbers
	     *
	     * - 0: primary mouse button
	     * - 1: wheel button or center button
	     * - 2: secondary mouse button
	     * @param {MouseEvent} mouseEvent - The mouse event object want to know.
	     * @returns {number} - The value of meaning which button is clicked?
	     */
	    getMouseButton: function (mouseEvent) {
	        var button,
	            primary = '0,1,3,5,7',
	            secondary = '2,6',
	            wheel = '4';

	        /* istanbul ignore else */
	        if (document.implementation.hasFeature('MouseEvents', '2.0')) {
	            return mouseEvent.button;
	        }

	        button = mouseEvent.button + '';
	        if (~primary.indexOf(button)) {
	            return 0;
	        } else if (~secondary.indexOf(button)) {
	            return 2;
	        } else if (~wheel.indexOf(button)) {
	            return 1;
	        }
	    }
	};

	module.exports = domevent;

/***/ }),
/* 10 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileoverview Common collections.
	 * @author NHN Ent. FE Development Team <dl_javascript@nhnent.com>
	 */

	'use strict';

	var snippet = __webpack_require__(8);

	var util = snippet,
	    forEachProp = util.forEachOwnProperties,
	    forEachArr = util.forEachArray,
	    isFunc = util.isFunction,
	    isObj = util.isObject;

	var aps = Array.prototype.slice;

	/**
	 * Common collection.
	 *
	 * It need function for get model's unique id.
	 *
	 * if the function is not supplied then it use default function {@link Collection#getItemID}
	 * @constructor
	 * @param {function} [getItemIDFn] function for get model's id.
	 * @ignore
	 */
	function Collection(getItemIDFn) {
	    /**
	     * @type {object.<string, *>}
	     */
	    this.items = {};

	    /**
	     * @type {number}
	     */
	    this.length = 0;

	    if (isFunc(getItemIDFn)) {
	        /**
	         * @type {function}
	         */
	        this.getItemID = getItemIDFn;
	    }
	}

	/**********
	 * static props
	 **********/

	/**
	 * Combind supplied function filters and condition.
	 * @param {...function} filters - function filters
	 * @returns {function} combined filter
	 */
	Collection.and = function (filters) {
	    var cnt;

	    filters = aps.call(arguments);
	    cnt = filters.length;

	    return function (item) {
	        var i = 0;

	        for (; i < cnt; i += 1) {
	            if (!filters[i].call(null, item)) {
	                return false;
	            }
	        }

	        return true;
	    };
	};

	/**
	 * Combine multiple function filters with OR clause.
	 * @param {...function} filters - function filters
	 * @returns {function} combined filter
	 */
	Collection.or = function (filters) {
	    var cnt;

	    filters = aps.call(arguments);
	    cnt = filters.length;

	    return function (item) {
	        var i = 1,
	            result = filters[0].call(null, item);

	        for (; i < cnt; i += 1) {
	            result = result || filters[i].call(null, item);
	        }

	        return result;
	    };
	};

	/**
	 * Merge several collections.
	 *
	 * You can\'t merge collections different _getEventID functions. Take case of use.
	 * @param {...Collection} collections collection arguments to merge
	 * @returns {Collection} merged collection.
	 */
	Collection.merge = function (collections) {
	    // eslint-disable-line
	    var cols = aps.call(arguments),
	        newItems = {},
	        merged = new Collection(cols[0].getItemID),
	        extend = util.extend;

	    forEachArr(cols, function (col) {
	        extend(newItems, col.items);
	    });

	    merged.items = newItems;
	    merged.length = util.keys(merged.items).length;

	    return merged;
	};

	/**********
	 * prototype props
	 **********/

	/**
	 * get model's unique id.
	 * @param {object} item model instance.
	 * @returns {number} model unique id.
	 */
	Collection.prototype.getItemID = function (item) {
	    return item._id + '';
	};

	/**
	 * add models.
	 * @param {...*} item models to add this collection.
	 */
	Collection.prototype.add = function (item) {
	    var id, ownItems;

	    if (arguments.length > 1) {
	        forEachArr(aps.call(arguments), function (o) {
	            this.add(o);
	        }, this);

	        return;
	    }

	    id = this.getItemID(item);
	    ownItems = this.items;

	    if (!ownItems[id]) {
	        this.length += 1;
	    }
	    ownItems[id] = item;
	};

	/**
	 * remove models.
	 * @param {...(object|string|number)} id model instance or unique id to delete.
	 * @returns {array} deleted model list.
	 */
	Collection.prototype.remove = function (id) {
	    var removed = [],
	        ownItems,
	        itemToRemove;

	    if (!this.length) {
	        return removed;
	    }

	    if (arguments.length > 1) {
	        removed = util.map(aps.call(arguments), function (id) {
	            return this.remove(id);
	        }, this);

	        return removed;
	    }

	    ownItems = this.items;

	    if (isObj(id)) {
	        id = this.getItemID(id);
	    }

	    if (!ownItems[id]) {
	        return removed;
	    }

	    this.length -= 1;
	    itemToRemove = ownItems[id];
	    delete ownItems[id];

	    return itemToRemove;
	};

	/**
	 * remove all models in collection.
	 */
	Collection.prototype.clear = function () {
	    this.items = {};
	    this.length = 0;
	};

	/**
	 * check collection has specific model.
	 * @param {(object|string|number|function)} id model instance or id or filter function to check
	 * @returns {boolean} is has model?
	 */
	Collection.prototype.has = function (id) {
	    var isFilter, has;

	    if (!this.length) {
	        return false;
	    }

	    isFilter = isFunc(id);
	    has = false;

	    if (isFilter) {
	        this.each(function (item) {
	            if (id(item) === true) {
	                has = true;

	                return false;
	            }

	            return true;
	        });
	    } else {
	        id = isObj(id) ? this.getItemID(id) : id;
	        has = util.isExisty(this.items[id]);
	    }

	    return has;
	};

	/**
	 * invoke callback when model exist in collection.
	 * @param {(string|number)} id model unique id.
	 * @param {function} fn the callback.
	 * @param {*} [context] callback context.
	 */
	Collection.prototype.doWhenHas = function (id, fn, context) {
	    var item = this.items[id];

	    if (!util.isExisty(item)) {
	        return;
	    }

	    fn.call(context || this, item);
	};

	/**
	 * Search model. and return new collection.
	 * @param {function} filter filter function.
	 * @returns {Collection} new collection with filtered models.
	 * @example
	 * collection.find(function(item) {
	 *     return item.edited === true;
	 * });
	 *
	 * function filter1(item) {
	 *     return item.edited === false;
	 * }
	 *
	 * function filter2(item) {
	 *     return item.disabled === false;
	 * }
	 *
	 * collection.find(Collection.and(filter1, filter2));
	 *
	 * collection.find(Collection.or(filter1, filter2));
	 */
	Collection.prototype.find = function (filter) {
	    var result = new Collection();

	    if (this.hasOwnProperty('getItemID')) {
	        result.getItemID = this.getItemID;
	    }

	    this.each(function (item) {
	        if (filter(item) === true) {
	            result.add(item);
	        }
	    });

	    return result;
	};

	/**
	 * Group element by specific key values.
	 *
	 * if key parameter is function then invoke it and use returned value.
	 * @param {(string|number|function|array)} key key property or getter function. if string[] supplied, create each collection before grouping.
	 * @param {function} [groupFunc] - function that return each group's key
	 * @returns {object.<string, Collection>} grouped object
	 * @example
	 *
	 * // pass `string`, `number`, `boolean` type value then group by property value.
	 * collection.groupBy('gender');    // group by 'gender' property value.
	 * collection.groupBy(50);          // group by '50' property value.
	 *
	 * // pass `function` then group by return value. each invocation `function` is called with `(item)`.
	 * collection.groupBy(function(item) {
	 *     if (item.score > 60) {
	 *         return 'pass';
	 *     }
	 *     return 'fail';
	 * });
	 *
	 * // pass `array` with first arguments then create each collection before grouping.
	 * collection.groupBy(['go', 'ruby', 'javascript']);
	 * // result: { 'go': empty Collection, 'ruby': empty Collection, 'javascript': empty Collection }
	 *
	 * // can pass `function` with `array` then group each elements.
	 * collection.groupBy(['go', 'ruby', 'javascript'], function(item) {
	 *     if (item.isFast) {
	 *         return 'go';
	 *     }
	 *
	 *     return item.name;
	 * });
	 */
	Collection.prototype.groupBy = function (key, groupFunc) {
	    var result = {},
	        collection,
	        baseValue,
	        keyIsFunc = isFunc(key),
	        getItemIDFn = this.getItemID;

	    if (util.isArray(key)) {
	        util.forEachArray(key, function (k) {
	            result[k + ''] = new Collection(getItemIDFn);
	        });

	        if (!groupFunc) {
	            return result;
	        }

	        key = groupFunc;
	        keyIsFunc = true;
	    }

	    this.each(function (item) {
	        if (keyIsFunc) {
	            baseValue = key(item);
	        } else {
	            baseValue = item[key];

	            if (isFunc(baseValue)) {
	                baseValue = baseValue.apply(item);
	            }
	        }

	        collection = result[baseValue];

	        if (!collection) {
	            collection = result[baseValue] = new Collection(getItemIDFn);
	        }

	        collection.add(item);
	    });

	    return result;
	};

	/**
	 * Return single item in collection.
	 *
	 * Returned item is inserted in this collection firstly.
	 * @returns {object} item.
	 */
	Collection.prototype.single = function () {
	    var result;

	    this.each(function (item) {
	        result = item;

	        return false;
	    }, this);

	    return result;
	};

	/**
	 * sort a basis of supplied compare function.
	 * @param {function} compareFunction compareFunction
	 * @returns {array} sorted array.
	 */
	Collection.prototype.sort = function (compareFunction) {
	    var arr = [];

	    this.each(function (item) {
	        arr.push(item);
	    });

	    if (isFunc(compareFunction)) {
	        arr = arr.sort(compareFunction);
	    }

	    return arr;
	};

	/**
	 * iterate each model element.
	 *
	 * when iteratee return false then break the loop.
	 * @param {function} iteratee iteratee(item, index, items)
	 * @param {*} [context] context
	 */
	Collection.prototype.each = function (iteratee, context) {
	    forEachProp(this.items, iteratee, context || this);
	};

	/**
	 * return new array with collection items.
	 * @returns {array} new array.
	 */
	Collection.prototype.toArray = function () {
	    if (!this.length) {
	        return [];
	    }

	    return util.map(this.items, function (item) {
	        return item;
	    });
	};

	module.exports = Collection;

/***/ }),
/* 11 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileoverview The base class of views.
	 * @author NHN Ent. FE Development Team <dl_javascript@nhnent.com>
	 */

	'use strict';

	var util = __webpack_require__(8);
	var domutil = __webpack_require__(7);
	var Collection = __webpack_require__(10);

	/**
	 * Base class of views.
	 *
	 * All views create own container element inside supplied container element.
	 * @constructor
	 * @param {options} options The object for describe view's specs.
	 * @param {HTMLElement} container Default container element for view. you can use this element for this.container syntax.
	 * @ignore
	 */
	function View(options, container) {
	    var id = util.stamp(this);

	    options = options || {};

	    if (util.isUndefined(container)) {
	        container = domutil.appendHTMLElement('div');
	    }

	    domutil.addClass(container, 'tui-view-' + id);

	    /**
	     * unique id
	     * @type {number}
	     */
	    this.id = id;

	    /**
	     * base element of view.
	     * @type {HTMLDIVElement}
	     */
	    this.container = container;

	    /**
	     * child views.
	     * @type {Collection}
	     */
	    this.childs = new Collection(function (view) {
	        return util.stamp(view);
	    });

	    /**
	     * parent view instance.
	     * @type {View}
	     */
	    this.parent = null;
	}

	/**
	 * Add child views.
	 * @param {View} view The view instance to add.
	 * @param {function} [fn] Function for invoke before add. parent view class is supplied first arguments.
	 */
	View.prototype.addChild = function (view, fn) {
	    if (fn) {
	        fn.call(view, this);
	    }
	    // add parent view
	    view.parent = this;

	    this.childs.add(view);
	};

	/**
	 * Remove added child view.
	 * @param {(number|View)} id View id or instance itself to remove.
	 * @param {function} [fn] Function for invoke before remove. parent view class is supplied first arguments.
	 */
	View.prototype.removeChild = function (id, fn) {
	    var view = util.isNumber(id) ? this.childs.items[id] : id;

	    id = util.stamp(view);

	    if (fn) {
	        fn.call(view, this);
	    }

	    this.childs.remove(id);
	};

	/**
	 * Render view recursively.
	 */
	View.prototype.render = function () {
	    this.childs.each(function (childView) {
	        childView.render();
	    });
	};

	/**
	 * Invoke function recursively.
	 * @param {function} fn - function to invoke child view recursively
	 * @param {boolean} [skipThis=false] - set true then skip invoke with this(root) view.
	 */
	View.prototype.recursive = function (fn, skipThis) {
	    if (!util.isFunction(fn)) {
	        return;
	    }

	    if (!skipThis) {
	        fn(this);
	    }

	    this.childs.each(function (childView) {
	        childView.recursive(fn);
	    });
	};

	/**
	 * Resize view recursively to parent.
	 */
	View.prototype.resize = function () {
	    var args = Array.prototype.slice.call(arguments),
	        parent = this.parent;

	    while (parent) {
	        if (util.isFunction(parent._onResize)) {
	            parent._onResize.apply(parent, args);
	        }

	        parent = parent.parent;
	    }
	};

	/**
	 * Invoking method before destroying.
	 */
	View.prototype._beforeDestroy = function () {};

	/**
	 * Clear properties
	 */
	View.prototype._destroy = function () {
	    this._beforeDestroy();
	    this.childs.clear();
	    this.container.innerHTML = '';

	    this.id = this.parent = this.childs = this.container = null;
	};

	/**
	 * Destroy child view recursively.
	 * @param {boolean} isChildView - Whether it is the child view or not
	 */
	View.prototype.destroy = function (isChildView) {
	    this.childs.each(function (childView) {
	        childView.destroy(true);
	        childView._destroy();
	    });

	    if (isChildView) {
	        return;
	    }

	    this._destroy();
	};

	/**
	 * Calculate view's container element bound.
	 * @returns {object} The bound of container element.
	 */
	View.prototype.getViewBound = function () {
	    var container = this.container,
	        position = domutil.getPosition(container),
	        size = domutil.getSize(container);

	    return {
	        x: position[0],
	        y: position[1],
	        width: size[0],
	        height: size[1]
	    };
	};

	module.exports = View;

/***/ }),
/* 12 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {/**
	 * @fileoverview General drag handler
	 * @author NHN Ent. FE Development Team <dl_javascript@nhnent.com>
	 */

	'use strict';

	var util = __webpack_require__(8);
	var domutil = __webpack_require__(7);
	var domevent = __webpack_require__(9);

	/**
	 * @constructor
	 * @mixes CustomEvents
	 * @param {object} options - options for drag handler
	 * @param {number} [options.distance=10] - distance in pixels after mouse must move before dragging should start
	 * @param {HTMLElement} container - container element to bind drag events
	 * @ignore
	 */
	function Drag(options, container) {
	    domevent.on(container, 'mousedown', this._onMouseDown, this);

	    this.options = util.extend({
	        distance: 10
	    }, options);

	    /**
	     * @type {HTMLElement}
	     */
	    this.container = container;

	    /**
	     * @type {boolean}
	     */
	    this._isMoved = false;

	    /**
	     * dragging distance in pixel between mousedown and firing dragStart events
	     * @type {number}
	     */
	    this._distance = 0;

	    /**
	     * @type {boolean}
	     */
	    this._dragStartFired = false;

	    /**
	     * @type {object}
	     */
	    this._dragStartEventData = null;
	}

	/**
	 * Destroy method.
	 */
	Drag.prototype.destroy = function () {
	    domevent.off(this.container, 'mousedown', this._onMouseDown, this);

	    this.options = this.container = this._isMoved = this._distance = this._dragStartFired = this._dragStartEventData = null;
	};

	/**
	 * Toggle events for mouse dragging.
	 * @param {boolean} toBind - bind events related with dragging when supplied "true"
	 */
	Drag.prototype._toggleDragEvent = function (toBind) {
	    var container = this.container,
	        domMethod,
	        method;

	    if (toBind) {
	        domMethod = 'on';
	        method = 'disable';
	    } else {
	        domMethod = 'off';
	        method = 'enable';
	    }

	    domutil[method + 'TextSelection'](container);
	    domutil[method + 'ImageDrag'](container);
	    domevent[domMethod](global.document, {
	        mousemove: this._onMouseMove,
	        mouseup: this._onMouseUp
	    }, this);
	};

	/**
	 * Normalize mouse event object.
	 * @param {MouseEvent} mouseEvent - mouse event object.
	 * @returns {object} normalized mouse event data.
	 */
	Drag.prototype._getEventData = function (mouseEvent) {
	    return {
	        target: mouseEvent.target || mouseEvent.srcElement,
	        originEvent: mouseEvent
	    };
	};

	/**
	 * MouseDown DOM event handler.
	 * @param {MouseEvent} mouseDownEvent MouseDown event object.
	 */
	Drag.prototype._onMouseDown = function (mouseDownEvent) {
	    // only primary button can start drag.
	    if (domevent.getMouseButton(mouseDownEvent) !== 0) {
	        return;
	    }

	    this._distance = 0;
	    this._dragStartFired = false;
	    this._dragStartEventData = this._getEventData(mouseDownEvent);

	    this._toggleDragEvent(true);
	};

	/**
	 * MouseMove DOM event handler.
	 * @emits Drag#drag
	 * @emits Drag#dragStart
	 * @param {MouseEvent} mouseMoveEvent MouseMove event object.
	 */
	Drag.prototype._onMouseMove = function (mouseMoveEvent) {
	    var distance = this.options.distance;
	    // prevent automatic scrolling.
	    domevent.preventDefault(mouseMoveEvent);

	    this._isMoved = true;

	    if (this._distance < distance) {
	        this._distance += 1;

	        return;
	    }

	    if (!this._dragStartFired) {
	        this._dragStartFired = true;

	        /**
	         * Drag starts events. cancelable.
	         * @event Drag#dragStart
	         * @type {object}
	         * @property {HTMLElement} target - target element in this event.
	         * @property {MouseEvent} originEvent - original mouse event object.
	         */
	        if (!this.invoke('dragStart', this._dragStartEventData)) {
	            this._toggleDragEvent(false);

	            return;
	        }
	    }

	    /**
	     * Events while dragging.
	     * @event Drag#drag
	     * @type {object}
	     * @property {HTMLElement} target - target element in this event.
	     * @property {MouseEvent} originEvent - original mouse event object.
	     */
	    this.fire('drag', this._getEventData(mouseMoveEvent));
	};

	/**
	 * MouseUp DOM event handler.
	 * @param {MouseEvent} mouseUpEvent MouseUp event object.
	 * @emits Drag#dragEnd
	 * @emits Drag#click
	 */
	Drag.prototype._onMouseUp = function (mouseUpEvent) {
	    this._toggleDragEvent(false);

	    // emit "click" event when not emitted drag event between mousedown and mouseup.
	    if (this._isMoved) {
	        this._isMoved = false;

	        /**
	         * Drag end events.
	         * @event Drag#dragEnd
	         * @type {MouseEvent}
	         * @property {HTMLElement} target - target element in this event.
	         * @property {MouseEvent} originEvent - original mouse event object.
	         */
	        this.fire('dragEnd', this._getEventData(mouseUpEvent));

	        return;
	    }

	    /**
	     * Click events.
	     * @event Drag#click
	     * @type {MouseEvent}
	     * @property {HTMLElement} target - target element in this event.
	     * @property {MouseEvent} originEvent - original mouse event object.
	     */
	    this.fire('click', this._getEventData(mouseUpEvent));
	};

	util.CustomEvents.mixin(Drag);

	module.exports = Drag;
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ }),
/* 13 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileoverview ColorPicker factory module
	 * @author NHN Ent. FE Development Team <dl_javascript@nhnent.com>
	 */

	'use strict';

	var util = __webpack_require__(8);
	var colorutil = __webpack_require__(14);
	var Layout = __webpack_require__(15);
	var Palette = __webpack_require__(16);
	var Slider = __webpack_require__(18);

	var hostnameSent = false;

	/**
	 * send hostname
	 * @ignore
	 */
	function sendHostname() {
	    var hostname = location.hostname;

	    if (hostnameSent) {
	        return;
	    }
	    hostnameSent = true;

	    util.imagePing('https://www.google-analytics.com/collect', {
	        v: 1,
	        t: 'event',
	        tid: 'UA-115377265-9',
	        cid: hostname,
	        dp: hostname,
	        dh: 'color-picker'
	    });
	}

	/**
	 * @constructor
	 * @mixes CustomEvents
	 * @param {object} options - options for colorpicker component
	 *  @param {HTMLDivElement} options.container - container element
	 *  @param {string} [options.color='#ffffff'] - default selected color
	 *  @param {string[]} [options.preset] - color preset for palette (use base16 palette if not supplied)
	 *  @param {string} [options.cssPrefix='tui-colorpicker-'] - css prefix text for each child elements
	 *  @param {string} [options.detailTxt='Detail'] - text for detail button.
	 *  @param {boolean} [options.usageStatistics=true] - Let us know the hostname. If you don't want to send the hostname, please set to false.
	 * @example
	 * var colorPicker = tui.colorPicker; // or require('tui-color-picker')
	 *
	 * colorPicker.create({
	 *   container: document.getElementById('color-picker')
	 * });
	 */
	function ColorPicker(options) {
	    var layout;

	    if (!(this instanceof ColorPicker)) {
	        return new ColorPicker(options);
	    }
	    /**
	     * Option object
	     * @type {object}
	     * @private
	     */
	    options = this.options = util.extend({
	        container: null,
	        color: '#f8f8f8',
	        preset: ['#181818', '#282828', '#383838', '#585858', '#b8b8b8', '#d8d8d8', '#e8e8e8', '#f8f8f8', '#ab4642', '#dc9656', '#f7ca88', '#a1b56c', '#86c1b9', '#7cafc2', '#ba8baf', '#a16946'],
	        cssPrefix: 'tui-colorpicker-',
	        detailTxt: 'Detail',
	        usageStatistics: true
	    }, options);

	    if (!options.container) {
	        throw new Error('ColorPicker(): need container option.');
	    }

	    /**********
	     * Create layout view
	     **********/

	    /**
	     * @type {Layout}
	     * @private
	     */
	    layout = this.layout = new Layout(options, options.container);

	    /**********
	     * Create palette view
	     **********/
	    this.palette = new Palette(options, layout.container);
	    this.palette.on({
	        '_selectColor': this._onSelectColorInPalette,
	        '_toggleSlider': this._onToggleSlider
	    }, this);

	    /**********
	     * Create slider view
	     **********/
	    this.slider = new Slider(options, layout.container);
	    this.slider.on('_selectColor', this._onSelectColorInSlider, this);

	    /**********
	     * Add child views
	     **********/
	    layout.addChild(this.palette);
	    layout.addChild(this.slider);

	    this.render(options.color);

	    if (options.usageStatistics) {
	        sendHostname();
	    }
	}

	/**
	 * Handler method for Palette#_selectColor event
	 * @private
	 * @fires ColorPicker#selectColor
	 * @param {object} selectColorEventData - event data
	 */
	ColorPicker.prototype._onSelectColorInPalette = function (selectColorEventData) {
	    var color = selectColorEventData.color,
	        opt = this.options;

	    if (!colorutil.isValidRGB(color) && color !== '') {
	        this.render();

	        return;
	    }

	    /**
	     * @event ColorPicker#selectColor
	     * @type {object}
	     * @property {string} color - selected color (hex string)
	     * @property {string} origin - flags for represent the source of event fires.
	     */
	    this.fire('selectColor', {
	        color: color,
	        origin: 'palette'
	    });

	    if (opt.color === color) {
	        return;
	    }

	    opt.color = color;
	    this.render(color);
	};

	/**
	 * Handler method for Palette#_toggleSlider event
	 * @private
	 */
	ColorPicker.prototype._onToggleSlider = function () {
	    this.slider.toggle(!this.slider.isVisible());
	};

	/**
	 * Handler method for Slider#_selectColor event
	 * @private
	 * @fires ColorPicker#selectColor
	 * @param {object} selectColorEventData - event data
	 */
	ColorPicker.prototype._onSelectColorInSlider = function (selectColorEventData) {
	    var color = selectColorEventData.color,
	        opt = this.options;

	    /**
	     * @event ColorPicker#selectColor
	     * @type {object}
	     * @property {string} color - selected color (hex string)
	     * @property {string} origin - flags for represent the source of event fires.
	     * @ignore
	     */
	    this.fire('selectColor', {
	        color: color,
	        origin: 'slider'
	    });

	    if (opt.color === color) {
	        return;
	    }

	    opt.color = color;
	    this.palette.render(color);
	};

	/**********
	 * PUBLIC API
	 **********/

	/**
	 * Set color to colorpicker instance.<br>
	 * The string parameter must be hex color value
	 * @param {string} hexStr - hex formatted color string
	 * @example
	 * colorPicker.setColor('#ffff00');
	 */
	ColorPicker.prototype.setColor = function (hexStr) {
	    if (!colorutil.isValidRGB(hexStr)) {
	        throw new Error('ColorPicker#setColor(): need valid hex string color value');
	    }

	    this.options.color = hexStr;
	    this.render(hexStr);
	};

	/**
	 * Get hex color string of current selected color in colorpicker instance.
	 * @returns {string} hex string formatted color
	 * @example
	 * colorPicker.setColor('#ffff00');
	 * colorPicker.getColor(); // '#ffff00';
	 */
	ColorPicker.prototype.getColor = function () {
	    return this.options.color;
	};

	/**
	 * Toggle colorpicker element. set true then reveal colorpicker view.
	 * @param {boolean} [isShow=false] - A flag to show
	 * @example
	 * colorPicker.toggle(false); // hide
	 * colorPicker.toggle(); // hide
	 * colorPicker.toggle(true); // show
	 */
	ColorPicker.prototype.toggle = function (isShow) {
	    this.layout.container.style.display = !!isShow ? 'block' : 'none';
	};

	/**
	 * Render colorpicker
	 * @param {string} [color] - selected color
	 * @ignore
	 */
	ColorPicker.prototype.render = function (color) {
	    this.layout.render(color || this.options.color);
	};

	/**
	 * Destroy colorpicker instance.
	 * @example
	 * colorPicker.destroy(); // DOM-element is removed
	 */
	ColorPicker.prototype.destroy = function () {
	    this.layout.destroy();
	    this.options.container.innerHTML = '';

	    this.layout = this.slider = this.palette = this.options = null;
	};

	util.CustomEvents.mixin(ColorPicker);

	module.exports = ColorPicker;

/***/ }),
/* 14 */
/***/ (function(module, exports) {

	/**
	 * @fileoverview Utility methods to manipulate colors
	 * @author NHN Ent. FE Development Team <dl_javascript@nhnent.com>
	 */

	'use strict';

	var hexRX = /(^#[0-9A-F]{6}$)|(^#[0-9A-F]{3}$)/i;

	var colorutil = {
	    /**
	     * pad left zero characters.
	     * @param {number} number number value to pad zero.
	     * @param {number} length pad length to want.
	     * @returns {string} padded string.
	     */
	    leadingZero: function (number, length) {
	        var zero = '',
	            i = 0;

	        if ((number + '').length > length) {
	            return number + '';
	        }

	        for (; i < length - 1; i += 1) {
	            zero += '0';
	        }

	        return (zero + number).slice(length * -1);
	    },

	    /**
	     * Check validate of hex string value is RGB
	     * @param {string} str - rgb hex string
	     * @returns {boolean} return true when supplied str is valid RGB hex string
	     */
	    isValidRGB: function (str) {
	        return hexRX.test(str);
	    },

	    // @license RGB <-> HSV conversion utilities based off of http://www.cs.rit.edu/~ncs/color/t_convert.html

	    /**
	     * Convert color hex string to rgb number array
	     * @param {string} hexStr - hex string
	     * @returns {number[]} rgb numbers
	     */
	    hexToRGB: function (hexStr) {
	        var r, g, b;

	        if (!colorutil.isValidRGB(hexStr)) {
	            return false;
	        }

	        hexStr = hexStr.substring(1);

	        r = parseInt(hexStr.substr(0, 2), 16);
	        g = parseInt(hexStr.substr(2, 2), 16);
	        b = parseInt(hexStr.substr(4, 2), 16);

	        return [r, g, b];
	    },

	    /**
	     * Convert rgb number to hex string
	     * @param {number} r - red
	     * @param {number} g - green
	     * @param {number} b - blue
	     * @returns {string|boolean} return false when supplied rgb number is not valid. otherwise, converted hex string
	     */
	    rgbToHEX: function (r, g, b) {
	        var hexStr = '#' + colorutil.leadingZero(r.toString(16), 2) + colorutil.leadingZero(g.toString(16), 2) + colorutil.leadingZero(b.toString(16), 2);

	        if (colorutil.isValidRGB(hexStr)) {
	            return hexStr;
	        }

	        return false;
	    },

	    /**
	     * Convert rgb number to HSV value
	     * @param {number} r - red
	     * @param {number} g - green
	     * @param {number} b - blue
	     * @returns {number[]} hsv value
	     */
	    rgbToHSV: function (r, g, b) {
	        var max, min, h, s, v, d;

	        r /= 255;
	        g /= 255;
	        b /= 255;
	        max = Math.max(r, g, b);
	        min = Math.min(r, g, b);
	        v = max;
	        d = max - min;
	        s = max === 0 ? 0 : d / max;

	        if (max === min) {
	            h = 0;
	        } else {
	            switch (max) {
	                case r:
	                    h = (g - b) / d + (g < b ? 6 : 0);break;
	                case g:
	                    h = (b - r) / d + 2;break;
	                case b:
	                    h = (r - g) / d + 4;break;
	                // no default
	            }
	            h /= 6;
	        }

	        return [Math.round(h * 360), Math.round(s * 100), Math.round(v * 100)];
	    },

	    /**
	     * Convert HSV number to RGB
	     * @param {number} h - hue
	     * @param {number} s - saturation
	     * @param {number} v - value
	     * @returns {number[]} rgb value
	     */
	    hsvToRGB: function (h, s, v) {
	        var r, g, b;
	        var i;
	        var f, p, q, t;

	        h = Math.max(0, Math.min(360, h));
	        s = Math.max(0, Math.min(100, s));
	        v = Math.max(0, Math.min(100, v));

	        s /= 100;
	        v /= 100;

	        if (s === 0) {
	            // Achromatic (grey)
	            r = g = b = v;

	            return [Math.round(r * 255), Math.round(g * 255), Math.round(b * 255)];
	        }

	        h /= 60; // sector 0 to 5
	        i = Math.floor(h);
	        f = h - i; // factorial part of h
	        p = v * (1 - s);
	        q = v * (1 - s * f);
	        t = v * (1 - s * (1 - f));

	        switch (i) {
	            case 0:
	                r = v;g = t;b = p;break;
	            case 1:
	                r = q;g = v;b = p;break;
	            case 2:
	                r = p;g = v;b = t;break;
	            case 3:
	                r = p;g = q;b = v;break;
	            case 4:
	                r = t;g = p;b = v;break;
	            default:
	                r = v;g = p;b = q;break;
	        }

	        return [Math.round(r * 255), Math.round(g * 255), Math.round(b * 255)];
	    }
	};

	module.exports = colorutil;

/***/ }),
/* 15 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileoverview ColorPicker layout module
	 * @author NHN Ent. FE Development Team <dl_javascript@nhnent.com>
	 */

	'use strict';

	var util = __webpack_require__(8);
	var domutil = __webpack_require__(7);
	var View = __webpack_require__(11);

	/**
	 * @constructor
	 * @extends {View}
	 * @param {object} options - option object
	 *  @param {string} options.cssPrefix - css prefix for each child elements
	 * @param {HTMLDivElement} container - container
	 * @ignore
	 */
	function Layout(options, container) {
	    /**
	     * option object
	     * @type {object}
	     */
	    this.options = util.extend({
	        cssPrefix: 'tui-colorpicker-'
	    }, options);

	    container = domutil.appendHTMLElement('div', container, this.options.cssPrefix + 'container');

	    View.call(this, options, container);

	    this.render();
	}

	util.inherit(Layout, View);

	/**
	 * @override
	 * @param {string} [color] - selected color
	 */
	Layout.prototype.render = function (color) {
	    this.recursive(function (view) {
	        view.render(color);
	    }, true);
	};

	module.exports = Layout;

/***/ }),
/* 16 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileoverview Color palette view
	 * @author NHN Ent. FE Development Team <dl_javascript@nhnent.com>
	 */

	'use strict';

	var util = __webpack_require__(8);
	var domutil = __webpack_require__(7);
	var colorutil = __webpack_require__(14);
	var domevent = __webpack_require__(9);
	var View = __webpack_require__(11);
	var tmpl = __webpack_require__(17);

	/**
	 * @constructor
	 * @extends {View}
	 * @mixes CustomEvents
	 * @param {object} options - options for color palette view
	 *  @param {string[]} options.preset - color list
	 * @param {HTMLDivElement} container - container element
	 * @ignore
	 */
	function Palette(options, container) {
	    /**
	     * option object
	     * @type {object}
	     */
	    this.options = util.extend({
	        cssPrefix: 'tui-colorpicker-',
	        preset: ['#181818', '#282828', '#383838', '#585858', '#B8B8B8', '#D8D8D8', '#E8E8E8', '#F8F8F8', '#AB4642', '#DC9656', '#F7CA88', '#A1B56C', '#86C1B9', '#7CAFC2', '#BA8BAF', '#A16946'],
	        detailTxt: 'Detail'
	    }, options);

	    container = domutil.appendHTMLElement('div', container, this.options.cssPrefix + 'palette-container');

	    View.call(this, options, container);
	}

	util.inherit(Palette, View);

	/**
	 * Mouse click event handler
	 * @fires Palette#_selectColor
	 * @fires Palette#_toggleSlider
	 * @param {MouseEvent} clickEvent - mouse event object
	 */
	Palette.prototype._onClick = function (clickEvent) {
	    var options = this.options,
	        target = clickEvent.srcElement || clickEvent.target,
	        eventData = {};

	    if (domutil.hasClass(target, options.cssPrefix + 'palette-button')) {
	        eventData.color = target.value;

	        /**
	         * @event Palette#_selectColor
	         * @type {object}
	         * @property {string} color - selected color value
	         */
	        this.fire('_selectColor', eventData);

	        return;
	    }

	    if (domutil.hasClass(target, options.cssPrefix + 'palette-toggle-slider')) {
	        /**
	         * @event Palette#_toggleSlider
	         */
	        this.fire('_toggleSlider');
	    }
	};

	/**
	 * Textbox change event handler
	 * @fires Palette#_selectColor
	 * @param {Event} changeEvent - change event object
	 */
	Palette.prototype._onChange = function (changeEvent) {
	    var options = this.options,
	        target = changeEvent.srcElement || changeEvent.target,
	        eventData = {};

	    if (domutil.hasClass(target, options.cssPrefix + 'palette-hex')) {
	        eventData.color = target.value;

	        /**
	         * @event Palette#_selectColor
	         * @type {object}
	         * @property {string} color - selected color value
	         */
	        this.fire('_selectColor', eventData);
	    }
	};

	/**
	 * Invoke before destory
	 * @override
	 */
	Palette.prototype._beforeDestroy = function () {
	    this._toggleEvent(false);
	};

	/**
	 * Toggle view DOM events
	 * @param {boolean} [onOff=false] - true to bind event.
	 */
	Palette.prototype._toggleEvent = function (onOff) {
	    var options = this.options,
	        container = this.container,
	        method = domevent[!!onOff ? 'on' : 'off'],
	        hexTextBox;

	    method(container, 'click', this._onClick, this);

	    hexTextBox = domutil.find('.' + options.cssPrefix + 'palette-hex', container);

	    if (hexTextBox) {
	        method(hexTextBox, 'change', this._onChange, this);
	    }
	};

	/**
	 * Render palette
	 * @override
	 */
	Palette.prototype.render = function (color) {
	    var options = this.options,
	        html = '';

	    this._toggleEvent(false);

	    html = tmpl.layout.replace('{{colorList}}', util.map(options.preset, function (itemColor) {
	        var itemHtml = '';
	        var style = '';

	        if (colorutil.isValidRGB(itemColor)) {
	            style = domutil.applyTemplate(tmpl.itemStyle, { color: itemColor });
	        }

	        itemHtml = domutil.applyTemplate(tmpl.item, {
	            itemStyle: style,
	            itemClass: !itemColor ? ' ' + options.cssPrefix + 'color-transparent' : '',
	            color: itemColor,
	            cssPrefix: options.cssPrefix,
	            selected: itemColor === color ? ' ' + options.cssPrefix + 'selected' : ''
	        });

	        return itemHtml;
	    }).join(''));

	    html = domutil.applyTemplate(html, {
	        cssPrefix: options.cssPrefix,
	        detailTxt: options.detailTxt,
	        color: color
	    });

	    this.container.innerHTML = html;

	    this._toggleEvent(true);
	};

	util.CustomEvents.mixin(Palette);

	module.exports = Palette;

/***/ }),
/* 17 */
/***/ (function(module, exports) {

	/**
	 * @fileoverview Palette view template
	 * @author NHN Ent. FE Development Team <dl_javascript@nhnent.com>
	 */

	'use strict';

	var layout = ['<ul class="{{cssPrefix}}clearfix">{{colorList}}</ul>', '<div class="{{cssPrefix}}clearfix" style="overflow:hidden">', '<input type="button" class="{{cssPrefix}}palette-toggle-slider" value="{{detailTxt}}" />', '<input type="text" class="{{cssPrefix}}palette-hex" value="{{color}}" maxlength="7" />', '<span class="{{cssPrefix}}palette-preview" style="background-color:{{color}};color:{{color}}">{{color}}</span>', '</div>'].join('\n');

	var item = '<li><input class="{{cssPrefix}}palette-button{{selected}}{{itemClass}}" type="button" style="{{itemStyle}}" title="{{color}}" value="{{color}}" /></li>';
	var itemStyle = 'background-color:{{color}};color:{{color}}';

	module.exports = {
	    layout: layout,
	    item: item,
	    itemStyle: itemStyle
	};

/***/ }),
/* 18 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileoverview Slider view
	 * @author NHN Ent. FE Development Team <dl_javascript@nhnent.com>
	 */

	'use strict';

	var util = __webpack_require__(8);
	var domutil = __webpack_require__(7);
	var domevent = __webpack_require__(9);
	var svgvml = __webpack_require__(19);
	var colorutil = __webpack_require__(14);
	var View = __webpack_require__(11);
	var Drag = __webpack_require__(12);
	var tmpl = __webpack_require__(20);

	// Limitation position of point element inside of colorslider and hue bar
	// Minimum value can to be negative because that using color point of handle element is center point. not left, top point.
	var COLORSLIDER_POS_LIMIT_RANGE = [-7, 112];
	var HUEBAR_POS_LIMIT_RANGE = [-3, 115];
	var HUE_WHEEL_MAX = 359.99;

	/**
	 * @constructor
	 * @extends {View}
	 * @mixes CustomEvents
	 * @param {object} options - options for view
	 *  @param {string} options.cssPrefix - design css prefix
	 * @param {HTMLElement} container - container element
	 * @ignore
	 */
	function Slider(options, container) {
	    container = domutil.appendHTMLElement('div', container, options.cssPrefix + 'slider-container');
	    container.style.display = 'none';

	    View.call(this, options, container);

	    /**
	     * @type {object}
	     */
	    this.options = util.extend({
	        color: '#f8f8f8',
	        cssPrefix: 'tui-colorpicker-'
	    }, options);

	    /**
	     * Cache immutable data in click, drag events.
	     *
	     * (i.e. is event related with colorslider? or huebar?)
	     * @type {object}
	     * @property {boolean} isColorSlider
	     * @property {number[]} containerSize
	     */
	    this._dragDataCache = {};

	    /**
	     * Color slider handle element
	     * @type {SVG|VML}
	     */
	    this.sliderHandleElement = null;

	    /**
	     * hue bar handle element
	     * @type {SVG|VML}
	     */
	    this.huebarHandleElement = null;

	    /**
	     * Element that render base color in colorslider part
	     * @type {SVG|VML}
	     */
	    this.baseColorElement = null;

	    /**
	     * @type {Drag}
	     */
	    this.drag = new Drag({
	        distance: 0
	    }, container);

	    // bind drag events
	    this.drag.on({
	        'dragStart': this._onDragStart,
	        'drag': this._onDrag,
	        'dragEnd': this._onDragEnd,
	        'click': this._onClick
	    }, this);
	}

	util.inherit(Slider, View);

	/**
	 * @override
	 */
	Slider.prototype._beforeDestroy = function () {
	    this.drag.off();

	    this.drag = this.options = this._dragDataCache = this.sliderHandleElement = this.huebarHandleElement = this.baseColorElement = null;
	};

	/**
	 * Toggle slider view
	 * @param {boolean} onOff - set true then reveal slider view
	 */
	Slider.prototype.toggle = function (onOff) {
	    this.container.style.display = !!onOff ? 'block' : 'none';
	};

	/**
	 * Get slider display status
	 * @returns {boolean} return true when slider is visible
	 */
	Slider.prototype.isVisible = function () {
	    return this.container.style.display === 'block';
	};

	/**
	 * Render slider view
	 * @override
	 * @param {string} colorStr - hex string color from parent view (Layout)
	 */
	Slider.prototype.render = function (colorStr) {
	    var that = this,
	        container = that.container,
	        options = that.options,
	        html = tmpl.layout,
	        rgb,
	        hsv;

	    if (!colorutil.isValidRGB(colorStr)) {
	        return;
	    }

	    html = html.replace(/{{slider}}/, tmpl.slider);
	    html = html.replace(/{{huebar}}/, tmpl.huebar);
	    html = html.replace(/{{cssPrefix}}/g, options.cssPrefix);

	    that.container.innerHTML = html;

	    that.sliderHandleElement = domutil.find('.' + options.cssPrefix + 'slider-handle', container);
	    that.huebarHandleElement = domutil.find('.' + options.cssPrefix + 'huebar-handle', container);
	    that.baseColorElement = domutil.find('.' + options.cssPrefix + 'slider-basecolor', container);

	    rgb = colorutil.hexToRGB(colorStr);
	    hsv = colorutil.rgbToHSV.apply(null, rgb);

	    this.moveHue(hsv[0], true);
	    this.moveSaturationAndValue(hsv[1], hsv[2], true);
	};

	/**
	 * Move colorslider by newLeft(X), newTop(Y) value
	 * @private
	 * @param {number} newLeft - left pixel value to move handle
	 * @param {number} newTop - top pixel value to move handle
	 * @param {boolean} [silent=false] - set true then not fire custom event
	 */
	Slider.prototype._moveColorSliderHandle = function (newLeft, newTop, silent) {
	    var handle = this.sliderHandleElement,
	        handleColor;

	    // Check position limitation.
	    newTop = Math.max(COLORSLIDER_POS_LIMIT_RANGE[0], newTop);
	    newTop = Math.min(COLORSLIDER_POS_LIMIT_RANGE[1], newTop);
	    newLeft = Math.max(COLORSLIDER_POS_LIMIT_RANGE[0], newLeft);
	    newLeft = Math.min(COLORSLIDER_POS_LIMIT_RANGE[1], newLeft);

	    svgvml.setTranslateXY(handle, newLeft, newTop);

	    handleColor = newTop > 50 ? 'white' : 'black';
	    svgvml.setStrokeColor(handle, handleColor);

	    if (!silent) {
	        this.fire('_selectColor', {
	            color: colorutil.rgbToHEX.apply(null, this.getRGB())
	        });
	    }
	};

	/**
	 * Move colorslider by supplied saturation and values.
	 *
	 * The movement of color slider handle follow HSV cylinder model. {@link https://en.wikipedia.org/wiki/HSL_and_HSV}
	 * @param {number} saturation - the percent of saturation (0% ~ 100%)
	 * @param {number} value - the percent of saturation (0% ~ 100%)
	 * @param {boolean} [silent=false] - set true then not fire custom event
	 */
	Slider.prototype.moveSaturationAndValue = function (saturation, value, silent) {
	    var absMin, maxValue, newLeft, newTop;

	    saturation = saturation || 0;
	    value = value || 0;

	    absMin = Math.abs(COLORSLIDER_POS_LIMIT_RANGE[0]);
	    maxValue = COLORSLIDER_POS_LIMIT_RANGE[1];

	    // subtract absMin value because current color position is not left, top of handle element.
	    // The saturation. from left 0 to right 100
	    newLeft = saturation * maxValue / 100 - absMin;
	    // The Value. from top 100 to bottom 0. that why newTop subtract by maxValue.
	    newTop = maxValue - value * maxValue / 100 - absMin;

	    this._moveColorSliderHandle(newLeft, newTop, silent);
	};

	/**
	 * Move color slider handle to supplied position
	 *
	 * The number of X, Y must be related value from color slider container
	 * @private
	 * @param {number} x - the pixel value to move handle
	 * @param {number} y - the pixel value to move handle
	 */
	Slider.prototype._moveColorSliderByPosition = function (x, y) {
	    var offset = COLORSLIDER_POS_LIMIT_RANGE[0];
	    this._moveColorSliderHandle(x + offset, y + offset);
	};

	/**
	 * Get saturation and value value.
	 * @returns {number[]} saturation and value
	 */
	Slider.prototype.getSaturationAndValue = function () {
	    var absMin = Math.abs(COLORSLIDER_POS_LIMIT_RANGE[0]),
	        maxValue = absMin + COLORSLIDER_POS_LIMIT_RANGE[1],
	        position = svgvml.getTranslateXY(this.sliderHandleElement),
	        saturation,
	        value;

	    saturation = (position[1] + absMin) / maxValue * 100;
	    // The value of HSV color model is inverted. top 100 ~ bottom 0. so subtract by 100
	    value = 100 - (position[0] + absMin) / maxValue * 100;

	    return [saturation, value];
	};

	/**
	 * Move hue handle supplied pixel value
	 * @private
	 * @param {number} newTop - pixel to move hue handle
	 * @param {boolean} [silent=false] - set true then not fire custom event
	 */
	Slider.prototype._moveHueHandle = function (newTop, silent) {
	    var hueHandleElement = this.huebarHandleElement,
	        baseColorElement = this.baseColorElement,
	        newGradientColor,
	        hexStr;

	    newTop = Math.max(HUEBAR_POS_LIMIT_RANGE[0], newTop);
	    newTop = Math.min(HUEBAR_POS_LIMIT_RANGE[1], newTop);

	    svgvml.setTranslateY(hueHandleElement, newTop);

	    newGradientColor = colorutil.hsvToRGB(this.getHue(), 100, 100);
	    hexStr = colorutil.rgbToHEX.apply(null, newGradientColor);

	    svgvml.setGradientColorStop(baseColorElement, hexStr);

	    if (!silent) {
	        this.fire('_selectColor', {
	            color: colorutil.rgbToHEX.apply(null, this.getRGB())
	        });
	    }
	};

	/**
	 * Move hue bar handle by supplied degree
	 * @param {number} degree - (0 ~ 359.9 degree)
	 * @param {boolean} [silent=false] - set true then not fire custom event
	 */
	Slider.prototype.moveHue = function (degree, silent) {
	    var newTop = 0,
	        absMin,
	        maxValue;

	    absMin = Math.abs(HUEBAR_POS_LIMIT_RANGE[0]);
	    maxValue = absMin + HUEBAR_POS_LIMIT_RANGE[1];

	    degree = degree || 0;
	    newTop = maxValue * degree / HUE_WHEEL_MAX - absMin;

	    this._moveHueHandle(newTop, silent);
	};

	/**
	 * Move hue bar handle by supplied percent
	 * @private
	 * @param {number} y - pixel value to move hue handle
	 */
	Slider.prototype._moveHueByPosition = function (y) {
	    var offset = HUEBAR_POS_LIMIT_RANGE[0];

	    this._moveHueHandle(y + offset);
	};

	/**
	 * Get huebar handle position by color degree
	 * @returns {number} degree (0 ~ 359.9 degree)
	 */
	Slider.prototype.getHue = function () {
	    var handle = this.huebarHandleElement,
	        position = svgvml.getTranslateXY(handle),
	        absMin,
	        maxValue;

	    absMin = Math.abs(HUEBAR_POS_LIMIT_RANGE[0]);
	    maxValue = absMin + HUEBAR_POS_LIMIT_RANGE[1];

	    // maxValue : 359.99 = pos.y : x
	    return (position[0] + absMin) * HUE_WHEEL_MAX / maxValue;
	};

	/**
	 * Get HSV value from slider
	 * @returns {number[]} hsv values
	 */
	Slider.prototype.getHSV = function () {
	    var sv = this.getSaturationAndValue(),
	        h = this.getHue();

	    return [h].concat(sv);
	};

	/**
	 * Get RGB value from slider
	 * @returns {number[]} RGB value
	 */
	Slider.prototype.getRGB = function () {
	    return colorutil.hsvToRGB.apply(null, this.getHSV());
	};

	/**********
	 * Drag event handler
	 **********/

	/**
	 * Cache immutable data when dragging or click view
	 * @param {object} event - Click, DragStart event.
	 * @returns {object} cached data.
	 */
	Slider.prototype._prepareColorSliderForMouseEvent = function (event) {
	    var options = this.options,
	        sliderPart = domutil.closest(event.target, '.' + options.cssPrefix + 'slider-part'),
	        cache;

	    cache = this._dragDataCache = {
	        isColorSlider: domutil.hasClass(sliderPart, options.cssPrefix + 'slider-left'),
	        parentElement: sliderPart
	    };

	    return cache;
	};

	/**
	 * Click event handler
	 * @param {object} clickEvent - Click event from Drag module
	 */
	Slider.prototype._onClick = function (clickEvent) {
	    var cache = this._prepareColorSliderForMouseEvent(clickEvent),
	        mousePos = domevent.getMousePosition(clickEvent.originEvent, cache.parentElement);

	    if (cache.isColorSlider) {
	        this._moveColorSliderByPosition(mousePos[0], mousePos[1]);
	    } else {
	        this._moveHueByPosition(mousePos[1]);
	    }

	    this._dragDataCache = null;
	};

	/**
	 * DragStart event handler
	 * @param {object} dragStartEvent - dragStart event data from Drag#dragStart
	 */
	Slider.prototype._onDragStart = function (dragStartEvent) {
	    this._prepareColorSliderForMouseEvent(dragStartEvent);
	};

	/**
	 * Drag event handler
	 * @param {Drag#drag} dragEvent - drag event data
	 */
	Slider.prototype._onDrag = function (dragEvent) {
	    var cache = this._dragDataCache,
	        mousePos = domevent.getMousePosition(dragEvent.originEvent, cache.parentElement);

	    if (cache.isColorSlider) {
	        this._moveColorSliderByPosition(mousePos[0], mousePos[1]);
	    } else {
	        this._moveHueByPosition(mousePos[1]);
	    }
	};

	/**
	 * Drag#dragEnd event handler
	 */
	Slider.prototype._onDragEnd = function () {
	    this._dragDataCache = null;
	};

	util.CustomEvents.mixin(Slider);

	module.exports = Slider;

/***/ }),
/* 19 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileoverview module for manipulate SVG or VML object
	 * @author NHN Ent. FE Development Team <dl_javascript@nhnent.com>
	 */

	'use strict';

	var util = __webpack_require__(8);
	var PARSE_TRANSLATE_NUM_REGEX = /[\.\-0-9]+/g;
	var SVG_HUE_HANDLE_RIGHT_POS = -6;

	/* istanbul ignore next */
	var svgvml = {
	    /**
	     * Return true when browser is below IE8.
	     * @returns {boolean} is old browser?
	     */
	    isOldBrowser: function () {
	        var _isOldBrowser = svgvml._isOldBrowser;

	        if (!util.isExisty(_isOldBrowser)) {
	            svgvml._isOldBrowser = _isOldBrowser = util.browser.msie && util.browser.version < 9;
	        }

	        return _isOldBrowser;
	    },

	    /**
	     * Get translate transform value
	     * @param {SVG|VML} obj - svg or vml object that want to know translate x, y
	     * @returns {number[]} translated coordinates [x, y]
	     */
	    getTranslateXY: function (obj) {
	        var temp;

	        if (svgvml.isOldBrowser()) {
	            temp = obj.style;

	            return [parseFloat(temp.top), parseFloat(temp.left)];
	        }

	        temp = obj.getAttribute('transform');

	        if (!temp) {
	            return [0, 0];
	        }

	        temp = temp.match(PARSE_TRANSLATE_NUM_REGEX);

	        // need caution for difference of VML, SVG coordinates system.
	        // translate command need X coords in first parameter. but VML is use CSS coordinate system(top, left)
	        return [parseFloat(temp[1]), parseFloat(temp[0])];
	    },

	    /**
	     * Set translate transform value
	     * @param {SVG|VML} obj - SVG or VML object to setting translate transform.
	     * @param {number} x - translate X value
	     * @param {number} y - translate Y value
	     */
	    setTranslateXY: function (obj, x, y) {
	        if (svgvml.isOldBrowser()) {
	            obj.style.left = x + 'px';
	            obj.style.top = y + 'px';
	        } else {
	            obj.setAttribute('transform', 'translate(' + x + ',' + y + ')');
	        }
	    },

	    /**
	     * Set translate only Y value
	     * @param {SVG|VML} obj - SVG or VML object to setting translate transform.
	     * @param {number} y - translate Y value
	     */
	    setTranslateY: function (obj, y) {
	        if (svgvml.isOldBrowser()) {
	            obj.style.top = y + 'px';
	        } else {
	            obj.setAttribute('transform', 'translate(' + SVG_HUE_HANDLE_RIGHT_POS + ',' + y + ')');
	        }
	    },

	    /**
	     * Set stroke color to SVG or VML object
	     * @param {SVG|VML} obj - SVG or VML object to setting stroke color
	     * @param {string} colorStr - color string
	     */
	    setStrokeColor: function (obj, colorStr) {
	        if (svgvml.isOldBrowser()) {
	            obj.strokecolor = colorStr;
	        } else {
	            obj.setAttribute('stroke', colorStr);
	        }
	    },

	    /**
	     * Set gradient stop color to SVG, VML object.
	     * @param {SVG|VML} obj - SVG, VML object to applying gradient stop color
	     * @param {string} colorStr - color string
	     */
	    setGradientColorStop: function (obj, colorStr) {
	        if (svgvml.isOldBrowser()) {
	            obj.color = colorStr;
	        } else {
	            obj.setAttribute('stop-color', colorStr);
	        }
	    }

	};

	module.exports = svgvml;

/***/ }),
/* 20 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {/**
	 * @fileoverview Slider template
	 * @author NHN Ent. FE Development Team <dl_javascript@nhnent.com>
	 */

	'use strict';

	var util = __webpack_require__(8);

	var layout = ['<div class="{{cssPrefix}}slider-left {{cssPrefix}}slider-part">{{slider}}</div>', '<div class="{{cssPrefix}}slider-right {{cssPrefix}}slider-part">{{huebar}}</div>'].join('\n');

	var SVGSlider = ['<svg class="{{cssPrefix}}svg {{cssPrefix}}svg-slider">', '<defs>', '<linearGradient id="{{cssPrefix}}svg-fill-color" x1="0%" y1="0%" x2="100%" y2="0%">', '<stop offset="0%" stop-color="rgb(255,255,255)" />', '<stop class="{{cssPrefix}}slider-basecolor" offset="100%" stop-color="rgb(255,0,0)" />', '</linearGradient>', '<linearGradient id="{{cssPrefix}}svn-fill-black" x1="0%" y1="0%" x2="0%" y2="100%">', '<stop offset="0%" style="stop-color:rgb(0,0,0);stop-opacity:0" />', '<stop offset="100%" style="stop-color:rgb(0,0,0);stop-opacity:1" />', '</linearGradient>', '</defs>', '<rect width="100%" height="100%" fill="url(#{{cssPrefix}}svg-fill-color)"></rect>', '<rect width="100%" height="100%" fill="url(#{{cssPrefix}}svn-fill-black)"></rect>', '<path transform="translate(0,0)" class="{{cssPrefix}}slider-handle" d="M0 7.5 L15 7.5 M7.5 15 L7.5 0 M2 7 a5.5 5.5 0 1 1 0 1 Z" stroke="black" stroke-width="0.75" fill="none" />', '</svg>'].join('\n');

	var VMLSlider = ['<div class="{{cssPrefix}}vml-slider">', '<v:rect strokecolor="none" class="{{cssPrefix}}vml {{cssPrefix}}vml-slider-bg">', '<v:fill class="{{cssPrefix}}vml {{cssPrefix}}slider-basecolor" type="gradient" method="none" color="#ff0000" color2="#fff" angle="90" />', '</v:rect>', '<v:rect strokecolor="#ccc" class="{{cssPrefix}}vml {{cssPrefix}}vml-slider-bg">', '<v:fill type="gradient" method="none" color="black" color2="white" o:opacity2="0%" class="{{cssPrefix}}vml" />', '</v:rect>', '<v:shape class="{{cssPrefix}}vml {{cssPrefix}}slider-handle" coordsize="1 1" style="width:1px;height:1px;"' + 'path="m 0,7 l 14,7 m 7,14 l 7,0 ar 12,12 2,2 z" filled="false" stroked="true" />', '</div>'].join('\n');

	var SVGHuebar = ['<svg class="{{cssPrefix}}svg {{cssPrefix}}svg-huebar">', '<defs>', '<linearGradient id="g" x1="0%" y1="0%" x2="0%" y2="100%">', '<stop offset="0%" stop-color="rgb(255,0,0)" />', '<stop offset="16.666%" stop-color="rgb(255,255,0)" />', '<stop offset="33.333%" stop-color="rgb(0,255,0)" />', '<stop offset="50%" stop-color="rgb(0,255,255)" />', '<stop offset="66.666%" stop-color="rgb(0,0,255)" />', '<stop offset="83.333%" stop-color="rgb(255,0,255)" />', '<stop offset="100%" stop-color="rgb(255,0,0)" />', '</linearGradient>', '</defs>', '<rect width="18px" height="100%" fill="url(#g)"></rect>', '<path transform="translate(-6,-3)" class="{{cssPrefix}}huebar-handle" d="M0 0 L4 4 L0 8 L0 0 Z" fill="black" stroke="none" />', '</svg>'].join('\n');

	var VMLHuebar = ['<div class="{{cssPrefix}}vml-huebar">', '<v:rect strokecolor="#ccc" class="{{cssPrefix}}vml {{cssPrefix}}vml-huebar-bg">', '<v:fill type="gradient" method="none" colors="' + '0% rgb(255,0,0), 16.666% rgb(255,255,0), 33.333% rgb(0,255,0), 50% rgb(0,255,255), 66.666% rgb(0,0,255), 83.333% rgb(255,0,255), 100% rgb(255,0,0)' + '" angle="180" class="{{cssPrefix}}vml" />', '</v:rect>', '<v:shape class="{{cssPrefix}}vml {{cssPrefix}}huebar-handle" coordsize="1 1" style="width:1px;height:1px;position:absolute;z-index:1;right:22px;top:-3px;"' + 'path="m 0,0 l 4,4 l 0,8 l 0,0 z" filled="true" fillcolor="black" stroked="false" />', '</div>'].join('\n');

	var isOldBrowser = util.browser.msie && util.browser.version < 9;

	if (isOldBrowser) {
	    global.document.namespaces.add('v', 'urn:schemas-microsoft-com:vml');
	}

	module.exports = {
	    layout: layout,
	    slider: isOldBrowser ? VMLSlider : SVGSlider,
	    huebar: isOldBrowser ? VMLHuebar : SVGHuebar
	};
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ })
/******/ ])
});
;

/***/ }),
/* 328 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _plantumlEncoder = __webpack_require__(329);

var _plantumlEncoder2 = _interopRequireDefault(_plantumlEncoder);

var _editorProxy = __webpack_require__(3);

var _editorProxy2 = _interopRequireDefault(_editorProxy);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
* @fileoverview Implements UML extension
* @author NHN Ent. FE Development Lab <dl_javascript@nhnent.com>
*/
var codeBlockManager = _editorProxy2.default.codeBlockManager;

var DEFAULT_RENDERER_URL = 'http://www.plantuml.com/plantuml/png/';
var UML_LANGUAGES = ['uml', 'plantuml'];

/**
 * plant uml plugin
 * @param {Editor} editor - editor
 * @param {object} [options={}] - plugin options
 * @param {string} options.rendererURL - plant uml renderer url
 * @ignore
 */
function umlExtension(editor) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var _options$rendererURL = options.rendererURL,
      rendererURL = _options$rendererURL === undefined ? DEFAULT_RENDERER_URL : _options$rendererURL;

  /**
   * render html from uml
   * @param {string} umlCode - plant uml code text
   * @returns {string} - rendered html
   */

  function plantUMLReplacer(umlCode) {
    var renderedHTML = void 0;

    try {
      if (!_plantumlEncoder2.default) {
        throw new Error('plantuml-encoder dependency required');
      }
      renderedHTML = '<img src="' + rendererURL + _plantumlEncoder2.default.encode(umlCode) + '" />';
    } catch (err) {
      renderedHTML = 'Error occurred on encoding uml: ' + err.message;
    }

    return renderedHTML;
  }

  var codeBlockLanguages = editor.options.codeBlockLanguages;

  UML_LANGUAGES.forEach(function (umlLanguage) {
    if (codeBlockLanguages.indexOf(umlLanguage) < 0) {
      codeBlockLanguages.push(umlLanguage);
    }
    codeBlockManager.setReplacer(umlLanguage, plantUMLReplacer);
  });
}

_editorProxy2.default.defineExtension('uml', umlExtension);

exports.default = umlExtension;

/***/ }),
/* 329 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(330)


/***/ }),
/* 330 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utf8bytes = __webpack_require__(331)
var pakoDeflate = __webpack_require__(332)
var encode64 = __webpack_require__(339)

// 1. Encode in UTF-8
// 2. Compress using Deflate algorithm
// 3. Reencode using a transformation close to base64

module.exports.encode = function (text) {
  var data = utf8bytes(text)
  var deflated = pakoDeflate.deflate(data, { level: 9, to: 'string', raw: true })
  return encode64.encode(deflated)
}


/***/ }),
/* 331 */
/***/ (function(module, exports) {

module.exports = function (str) {
    var bytes = [];
    for (var i = 0; i < str.length; i++) {
        var c = str.charCodeAt(i);
        if (c >= 0xd800 && c <= 0xdbff && i + 1 < str.length) {
            var cn = str.charCodeAt(i + 1);
            if (cn >= 0xdc00 && cn <= 0xdfff) {
                var pt = (c - 0xd800) * 0x400 + cn - 0xdc00 + 0x10000;
                
                bytes.push(
                    0xf0 + Math.floor(pt / 64 / 64 / 64),
                    0x80 + Math.floor(pt / 64 / 64) % 64,
                    0x80 + Math.floor(pt / 64) % 64,
                    0x80 + pt % 64
                );
                i += 1;
                continue;
            }
        }
        if (c >= 2048) {
            bytes.push(
                0xe0 + Math.floor(c / 64 / 64),
                0x80 + Math.floor(c / 64) % 64,
                0x80 + c % 64
            );
        }
        else if (c >= 128) {
            bytes.push(0xc0 + Math.floor(c / 64), 0x80 + c % 64);
        }
        else bytes.push(c);
    }
    return bytes;
};


/***/ }),
/* 332 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";



var zlib_deflate = __webpack_require__(333);
var utils        = __webpack_require__(14);
var strings      = __webpack_require__(337);
var msg          = __webpack_require__(40);
var ZStream      = __webpack_require__(338);

var toString = Object.prototype.toString;

/* Public constants ==========================================================*/
/* ===========================================================================*/

var Z_NO_FLUSH      = 0;
var Z_FINISH        = 4;

var Z_OK            = 0;
var Z_STREAM_END    = 1;
var Z_SYNC_FLUSH    = 2;

var Z_DEFAULT_COMPRESSION = -1;

var Z_DEFAULT_STRATEGY    = 0;

var Z_DEFLATED  = 8;

/* ===========================================================================*/


/**
 * class Deflate
 *
 * Generic JS-style wrapper for zlib calls. If you don't need
 * streaming behaviour - use more simple functions: [[deflate]],
 * [[deflateRaw]] and [[gzip]].
 **/

/* internal
 * Deflate.chunks -> Array
 *
 * Chunks of output data, if [[Deflate#onData]] not overriden.
 **/

/**
 * Deflate.result -> Uint8Array|Array
 *
 * Compressed result, generated by default [[Deflate#onData]]
 * and [[Deflate#onEnd]] handlers. Filled after you push last chunk
 * (call [[Deflate#push]] with `Z_FINISH` / `true` param)  or if you
 * push a chunk with explicit flush (call [[Deflate#push]] with
 * `Z_SYNC_FLUSH` param).
 **/

/**
 * Deflate.err -> Number
 *
 * Error code after deflate finished. 0 (Z_OK) on success.
 * You will not need it in real life, because deflate errors
 * are possible only on wrong options or bad `onData` / `onEnd`
 * custom handlers.
 **/

/**
 * Deflate.msg -> String
 *
 * Error message, if [[Deflate.err]] != 0
 **/


/**
 * new Deflate(options)
 * - options (Object): zlib deflate options.
 *
 * Creates new deflator instance with specified params. Throws exception
 * on bad params. Supported options:
 *
 * - `level`
 * - `windowBits`
 * - `memLevel`
 * - `strategy`
 * - `dictionary`
 *
 * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)
 * for more information on these.
 *
 * Additional options, for internal needs:
 *
 * - `chunkSize` - size of generated data chunks (16K by default)
 * - `raw` (Boolean) - do raw deflate
 * - `gzip` (Boolean) - create gzip wrapper
 * - `to` (String) - if equal to 'string', then result will be "binary string"
 *    (each char code [0..255])
 * - `header` (Object) - custom header for gzip
 *   - `text` (Boolean) - true if compressed data believed to be text
 *   - `time` (Number) - modification time, unix timestamp
 *   - `os` (Number) - operation system code
 *   - `extra` (Array) - array of bytes with extra data (max 65536)
 *   - `name` (String) - file name (binary string)
 *   - `comment` (String) - comment (binary string)
 *   - `hcrc` (Boolean) - true if header crc should be added
 *
 * ##### Example:
 *
 * ```javascript
 * var pako = require('pako')
 *   , chunk1 = Uint8Array([1,2,3,4,5,6,7,8,9])
 *   , chunk2 = Uint8Array([10,11,12,13,14,15,16,17,18,19]);
 *
 * var deflate = new pako.Deflate({ level: 3});
 *
 * deflate.push(chunk1, false);
 * deflate.push(chunk2, true);  // true -> last chunk
 *
 * if (deflate.err) { throw new Error(deflate.err); }
 *
 * console.log(deflate.result);
 * ```
 **/
function Deflate(options) {
  if (!(this instanceof Deflate)) return new Deflate(options);

  this.options = utils.assign({
    level: Z_DEFAULT_COMPRESSION,
    method: Z_DEFLATED,
    chunkSize: 16384,
    windowBits: 15,
    memLevel: 8,
    strategy: Z_DEFAULT_STRATEGY,
    to: ''
  }, options || {});

  var opt = this.options;

  if (opt.raw && (opt.windowBits > 0)) {
    opt.windowBits = -opt.windowBits;
  }

  else if (opt.gzip && (opt.windowBits > 0) && (opt.windowBits < 16)) {
    opt.windowBits += 16;
  }

  this.err    = 0;      // error code, if happens (0 = Z_OK)
  this.msg    = '';     // error message
  this.ended  = false;  // used to avoid multiple onEnd() calls
  this.chunks = [];     // chunks of compressed data

  this.strm = new ZStream();
  this.strm.avail_out = 0;

  var status = zlib_deflate.deflateInit2(
    this.strm,
    opt.level,
    opt.method,
    opt.windowBits,
    opt.memLevel,
    opt.strategy
  );

  if (status !== Z_OK) {
    throw new Error(msg[status]);
  }

  if (opt.header) {
    zlib_deflate.deflateSetHeader(this.strm, opt.header);
  }

  if (opt.dictionary) {
    var dict;
    // Convert data if needed
    if (typeof opt.dictionary === 'string') {
      // If we need to compress text, change encoding to utf8.
      dict = strings.string2buf(opt.dictionary);
    } else if (toString.call(opt.dictionary) === '[object ArrayBuffer]') {
      dict = new Uint8Array(opt.dictionary);
    } else {
      dict = opt.dictionary;
    }

    status = zlib_deflate.deflateSetDictionary(this.strm, dict);

    if (status !== Z_OK) {
      throw new Error(msg[status]);
    }

    this._dict_set = true;
  }
}

/**
 * Deflate#push(data[, mode]) -> Boolean
 * - data (Uint8Array|Array|ArrayBuffer|String): input data. Strings will be
 *   converted to utf8 byte sequence.
 * - mode (Number|Boolean): 0..6 for corresponding Z_NO_FLUSH..Z_TREE modes.
 *   See constants. Skipped or `false` means Z_NO_FLUSH, `true` meansh Z_FINISH.
 *
 * Sends input data to deflate pipe, generating [[Deflate#onData]] calls with
 * new compressed chunks. Returns `true` on success. The last data block must have
 * mode Z_FINISH (or `true`). That will flush internal pending buffers and call
 * [[Deflate#onEnd]]. For interim explicit flushes (without ending the stream) you
 * can use mode Z_SYNC_FLUSH, keeping the compression context.
 *
 * On fail call [[Deflate#onEnd]] with error code and return false.
 *
 * We strongly recommend to use `Uint8Array` on input for best speed (output
 * array format is detected automatically). Also, don't skip last param and always
 * use the same type in your code (boolean or number). That will improve JS speed.
 *
 * For regular `Array`-s make sure all elements are [0..255].
 *
 * ##### Example
 *
 * ```javascript
 * push(chunk, false); // push one of data chunks
 * ...
 * push(chunk, true);  // push last chunk
 * ```
 **/
Deflate.prototype.push = function (data, mode) {
  var strm = this.strm;
  var chunkSize = this.options.chunkSize;
  var status, _mode;

  if (this.ended) { return false; }

  _mode = (mode === ~~mode) ? mode : ((mode === true) ? Z_FINISH : Z_NO_FLUSH);

  // Convert data if needed
  if (typeof data === 'string') {
    // If we need to compress text, change encoding to utf8.
    strm.input = strings.string2buf(data);
  } else if (toString.call(data) === '[object ArrayBuffer]') {
    strm.input = new Uint8Array(data);
  } else {
    strm.input = data;
  }

  strm.next_in = 0;
  strm.avail_in = strm.input.length;

  do {
    if (strm.avail_out === 0) {
      strm.output = new utils.Buf8(chunkSize);
      strm.next_out = 0;
      strm.avail_out = chunkSize;
    }
    status = zlib_deflate.deflate(strm, _mode);    /* no bad return value */

    if (status !== Z_STREAM_END && status !== Z_OK) {
      this.onEnd(status);
      this.ended = true;
      return false;
    }
    if (strm.avail_out === 0 || (strm.avail_in === 0 && (_mode === Z_FINISH || _mode === Z_SYNC_FLUSH))) {
      if (this.options.to === 'string') {
        this.onData(strings.buf2binstring(utils.shrinkBuf(strm.output, strm.next_out)));
      } else {
        this.onData(utils.shrinkBuf(strm.output, strm.next_out));
      }
    }
  } while ((strm.avail_in > 0 || strm.avail_out === 0) && status !== Z_STREAM_END);

  // Finalize on the last chunk.
  if (_mode === Z_FINISH) {
    status = zlib_deflate.deflateEnd(this.strm);
    this.onEnd(status);
    this.ended = true;
    return status === Z_OK;
  }

  // callback interim results if Z_SYNC_FLUSH.
  if (_mode === Z_SYNC_FLUSH) {
    this.onEnd(Z_OK);
    strm.avail_out = 0;
    return true;
  }

  return true;
};


/**
 * Deflate#onData(chunk) -> Void
 * - chunk (Uint8Array|Array|String): ouput data. Type of array depends
 *   on js engine support. When string output requested, each chunk
 *   will be string.
 *
 * By default, stores data blocks in `chunks[]` property and glue
 * those in `onEnd`. Override this handler, if you need another behaviour.
 **/
Deflate.prototype.onData = function (chunk) {
  this.chunks.push(chunk);
};


/**
 * Deflate#onEnd(status) -> Void
 * - status (Number): deflate status. 0 (Z_OK) on success,
 *   other if not.
 *
 * Called once after you tell deflate that the input stream is
 * complete (Z_FINISH) or should be flushed (Z_SYNC_FLUSH)
 * or if an error happened. By default - join collected chunks,
 * free memory and fill `results` / `err` properties.
 **/
Deflate.prototype.onEnd = function (status) {
  // On success - join
  if (status === Z_OK) {
    if (this.options.to === 'string') {
      this.result = this.chunks.join('');
    } else {
      this.result = utils.flattenChunks(this.chunks);
    }
  }
  this.chunks = [];
  this.err = status;
  this.msg = this.strm.msg;
};


/**
 * deflate(data[, options]) -> Uint8Array|Array|String
 * - data (Uint8Array|Array|String): input data to compress.
 * - options (Object): zlib deflate options.
 *
 * Compress `data` with deflate algorithm and `options`.
 *
 * Supported options are:
 *
 * - level
 * - windowBits
 * - memLevel
 * - strategy
 * - dictionary
 *
 * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)
 * for more information on these.
 *
 * Sugar (options):
 *
 * - `raw` (Boolean) - say that we work with raw stream, if you don't wish to specify
 *   negative windowBits implicitly.
 * - `to` (String) - if equal to 'string', then result will be "binary string"
 *    (each char code [0..255])
 *
 * ##### Example:
 *
 * ```javascript
 * var pako = require('pako')
 *   , data = Uint8Array([1,2,3,4,5,6,7,8,9]);
 *
 * console.log(pako.deflate(data));
 * ```
 **/
function deflate(input, options) {
  var deflator = new Deflate(options);

  deflator.push(input, true);

  // That will never happens, if you don't cheat with options :)
  if (deflator.err) { throw deflator.msg; }

  return deflator.result;
}


/**
 * deflateRaw(data[, options]) -> Uint8Array|Array|String
 * - data (Uint8Array|Array|String): input data to compress.
 * - options (Object): zlib deflate options.
 *
 * The same as [[deflate]], but creates raw data, without wrapper
 * (header and adler32 crc).
 **/
function deflateRaw(input, options) {
  options = options || {};
  options.raw = true;
  return deflate(input, options);
}


/**
 * gzip(data[, options]) -> Uint8Array|Array|String
 * - data (Uint8Array|Array|String): input data to compress.
 * - options (Object): zlib deflate options.
 *
 * The same as [[deflate]], but create gzip wrapper instead of
 * deflate one.
 **/
function gzip(input, options) {
  options = options || {};
  options.gzip = true;
  return deflate(input, options);
}


exports.Deflate = Deflate;
exports.deflate = deflate;
exports.deflateRaw = deflateRaw;
exports.gzip = gzip;


/***/ }),
/* 333 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils   = __webpack_require__(14);
var trees   = __webpack_require__(334);
var adler32 = __webpack_require__(335);
var crc32   = __webpack_require__(336);
var msg     = __webpack_require__(40);

/* Public constants ==========================================================*/
/* ===========================================================================*/


/* Allowed flush values; see deflate() and inflate() below for details */
var Z_NO_FLUSH      = 0;
var Z_PARTIAL_FLUSH = 1;
//var Z_SYNC_FLUSH    = 2;
var Z_FULL_FLUSH    = 3;
var Z_FINISH        = 4;
var Z_BLOCK         = 5;
//var Z_TREES         = 6;


/* Return codes for the compression/decompression functions. Negative values
 * are errors, positive values are used for special but normal events.
 */
var Z_OK            = 0;
var Z_STREAM_END    = 1;
//var Z_NEED_DICT     = 2;
//var Z_ERRNO         = -1;
var Z_STREAM_ERROR  = -2;
var Z_DATA_ERROR    = -3;
//var Z_MEM_ERROR     = -4;
var Z_BUF_ERROR     = -5;
//var Z_VERSION_ERROR = -6;


/* compression levels */
//var Z_NO_COMPRESSION      = 0;
//var Z_BEST_SPEED          = 1;
//var Z_BEST_COMPRESSION    = 9;
var Z_DEFAULT_COMPRESSION = -1;


var Z_FILTERED            = 1;
var Z_HUFFMAN_ONLY        = 2;
var Z_RLE                 = 3;
var Z_FIXED               = 4;
var Z_DEFAULT_STRATEGY    = 0;

/* Possible values of the data_type field (though see inflate()) */
//var Z_BINARY              = 0;
//var Z_TEXT                = 1;
//var Z_ASCII               = 1; // = Z_TEXT
var Z_UNKNOWN             = 2;


/* The deflate compression method */
var Z_DEFLATED  = 8;

/*============================================================================*/


var MAX_MEM_LEVEL = 9;
/* Maximum value for memLevel in deflateInit2 */
var MAX_WBITS = 15;
/* 32K LZ77 window */
var DEF_MEM_LEVEL = 8;


var LENGTH_CODES  = 29;
/* number of length codes, not counting the special END_BLOCK code */
var LITERALS      = 256;
/* number of literal bytes 0..255 */
var L_CODES       = LITERALS + 1 + LENGTH_CODES;
/* number of Literal or Length codes, including the END_BLOCK code */
var D_CODES       = 30;
/* number of distance codes */
var BL_CODES      = 19;
/* number of codes used to transfer the bit lengths */
var HEAP_SIZE     = 2 * L_CODES + 1;
/* maximum heap size */
var MAX_BITS  = 15;
/* All codes must not exceed MAX_BITS bits */

var MIN_MATCH = 3;
var MAX_MATCH = 258;
var MIN_LOOKAHEAD = (MAX_MATCH + MIN_MATCH + 1);

var PRESET_DICT = 0x20;

var INIT_STATE = 42;
var EXTRA_STATE = 69;
var NAME_STATE = 73;
var COMMENT_STATE = 91;
var HCRC_STATE = 103;
var BUSY_STATE = 113;
var FINISH_STATE = 666;

var BS_NEED_MORE      = 1; /* block not completed, need more input or more output */
var BS_BLOCK_DONE     = 2; /* block flush performed */
var BS_FINISH_STARTED = 3; /* finish started, need only more output at next deflate */
var BS_FINISH_DONE    = 4; /* finish done, accept no more input or output */

var OS_CODE = 0x03; // Unix :) . Don't detect, use this default.

function err(strm, errorCode) {
  strm.msg = msg[errorCode];
  return errorCode;
}

function rank(f) {
  return ((f) << 1) - ((f) > 4 ? 9 : 0);
}

function zero(buf) { var len = buf.length; while (--len >= 0) { buf[len] = 0; } }


/* =========================================================================
 * Flush as much pending output as possible. All deflate() output goes
 * through this function so some applications may wish to modify it
 * to avoid allocating a large strm->output buffer and copying into it.
 * (See also read_buf()).
 */
function flush_pending(strm) {
  var s = strm.state;

  //_tr_flush_bits(s);
  var len = s.pending;
  if (len > strm.avail_out) {
    len = strm.avail_out;
  }
  if (len === 0) { return; }

  utils.arraySet(strm.output, s.pending_buf, s.pending_out, len, strm.next_out);
  strm.next_out += len;
  s.pending_out += len;
  strm.total_out += len;
  strm.avail_out -= len;
  s.pending -= len;
  if (s.pending === 0) {
    s.pending_out = 0;
  }
}


function flush_block_only(s, last) {
  trees._tr_flush_block(s, (s.block_start >= 0 ? s.block_start : -1), s.strstart - s.block_start, last);
  s.block_start = s.strstart;
  flush_pending(s.strm);
}


function put_byte(s, b) {
  s.pending_buf[s.pending++] = b;
}


/* =========================================================================
 * Put a short in the pending buffer. The 16-bit value is put in MSB order.
 * IN assertion: the stream state is correct and there is enough room in
 * pending_buf.
 */
function putShortMSB(s, b) {
//  put_byte(s, (Byte)(b >> 8));
//  put_byte(s, (Byte)(b & 0xff));
  s.pending_buf[s.pending++] = (b >>> 8) & 0xff;
  s.pending_buf[s.pending++] = b & 0xff;
}


/* ===========================================================================
 * Read a new buffer from the current input stream, update the adler32
 * and total number of bytes read.  All deflate() input goes through
 * this function so some applications may wish to modify it to avoid
 * allocating a large strm->input buffer and copying from it.
 * (See also flush_pending()).
 */
function read_buf(strm, buf, start, size) {
  var len = strm.avail_in;

  if (len > size) { len = size; }
  if (len === 0) { return 0; }

  strm.avail_in -= len;

  // zmemcpy(buf, strm->next_in, len);
  utils.arraySet(buf, strm.input, strm.next_in, len, start);
  if (strm.state.wrap === 1) {
    strm.adler = adler32(strm.adler, buf, len, start);
  }

  else if (strm.state.wrap === 2) {
    strm.adler = crc32(strm.adler, buf, len, start);
  }

  strm.next_in += len;
  strm.total_in += len;

  return len;
}


/* ===========================================================================
 * Set match_start to the longest match starting at the given string and
 * return its length. Matches shorter or equal to prev_length are discarded,
 * in which case the result is equal to prev_length and match_start is
 * garbage.
 * IN assertions: cur_match is the head of the hash chain for the current
 *   string (strstart) and its distance is <= MAX_DIST, and prev_length >= 1
 * OUT assertion: the match length is not greater than s->lookahead.
 */
function longest_match(s, cur_match) {
  var chain_length = s.max_chain_length;      /* max hash chain length */
  var scan = s.strstart; /* current string */
  var match;                       /* matched string */
  var len;                           /* length of current match */
  var best_len = s.prev_length;              /* best match length so far */
  var nice_match = s.nice_match;             /* stop if match long enough */
  var limit = (s.strstart > (s.w_size - MIN_LOOKAHEAD)) ?
      s.strstart - (s.w_size - MIN_LOOKAHEAD) : 0/*NIL*/;

  var _win = s.window; // shortcut

  var wmask = s.w_mask;
  var prev  = s.prev;

  /* Stop when cur_match becomes <= limit. To simplify the code,
   * we prevent matches with the string of window index 0.
   */

  var strend = s.strstart + MAX_MATCH;
  var scan_end1  = _win[scan + best_len - 1];
  var scan_end   = _win[scan + best_len];

  /* The code is optimized for HASH_BITS >= 8 and MAX_MATCH-2 multiple of 16.
   * It is easy to get rid of this optimization if necessary.
   */
  // Assert(s->hash_bits >= 8 && MAX_MATCH == 258, "Code too clever");

  /* Do not waste too much time if we already have a good match: */
  if (s.prev_length >= s.good_match) {
    chain_length >>= 2;
  }
  /* Do not look for matches beyond the end of the input. This is necessary
   * to make deflate deterministic.
   */
  if (nice_match > s.lookahead) { nice_match = s.lookahead; }

  // Assert((ulg)s->strstart <= s->window_size-MIN_LOOKAHEAD, "need lookahead");

  do {
    // Assert(cur_match < s->strstart, "no future");
    match = cur_match;

    /* Skip to next match if the match length cannot increase
     * or if the match length is less than 2.  Note that the checks below
     * for insufficient lookahead only occur occasionally for performance
     * reasons.  Therefore uninitialized memory will be accessed, and
     * conditional jumps will be made that depend on those values.
     * However the length of the match is limited to the lookahead, so
     * the output of deflate is not affected by the uninitialized values.
     */

    if (_win[match + best_len]     !== scan_end  ||
        _win[match + best_len - 1] !== scan_end1 ||
        _win[match]                !== _win[scan] ||
        _win[++match]              !== _win[scan + 1]) {
      continue;
    }

    /* The check at best_len-1 can be removed because it will be made
     * again later. (This heuristic is not always a win.)
     * It is not necessary to compare scan[2] and match[2] since they
     * are always equal when the other bytes match, given that
     * the hash keys are equal and that HASH_BITS >= 8.
     */
    scan += 2;
    match++;
    // Assert(*scan == *match, "match[2]?");

    /* We check for insufficient lookahead only every 8th comparison;
     * the 256th check will be made at strstart+258.
     */
    do {
      /*jshint noempty:false*/
    } while (_win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&
             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&
             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&
             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&
             scan < strend);

    // Assert(scan <= s->window+(unsigned)(s->window_size-1), "wild scan");

    len = MAX_MATCH - (strend - scan);
    scan = strend - MAX_MATCH;

    if (len > best_len) {
      s.match_start = cur_match;
      best_len = len;
      if (len >= nice_match) {
        break;
      }
      scan_end1  = _win[scan + best_len - 1];
      scan_end   = _win[scan + best_len];
    }
  } while ((cur_match = prev[cur_match & wmask]) > limit && --chain_length !== 0);

  if (best_len <= s.lookahead) {
    return best_len;
  }
  return s.lookahead;
}


/* ===========================================================================
 * Fill the window when the lookahead becomes insufficient.
 * Updates strstart and lookahead.
 *
 * IN assertion: lookahead < MIN_LOOKAHEAD
 * OUT assertions: strstart <= window_size-MIN_LOOKAHEAD
 *    At least one byte has been read, or avail_in == 0; reads are
 *    performed for at least two bytes (required for the zip translate_eol
 *    option -- not supported here).
 */
function fill_window(s) {
  var _w_size = s.w_size;
  var p, n, m, more, str;

  //Assert(s->lookahead < MIN_LOOKAHEAD, "already enough lookahead");

  do {
    more = s.window_size - s.lookahead - s.strstart;

    // JS ints have 32 bit, block below not needed
    /* Deal with !@#$% 64K limit: */
    //if (sizeof(int) <= 2) {
    //    if (more == 0 && s->strstart == 0 && s->lookahead == 0) {
    //        more = wsize;
    //
    //  } else if (more == (unsigned)(-1)) {
    //        /* Very unlikely, but possible on 16 bit machine if
    //         * strstart == 0 && lookahead == 1 (input done a byte at time)
    //         */
    //        more--;
    //    }
    //}


    /* If the window is almost full and there is insufficient lookahead,
     * move the upper half to the lower one to make room in the upper half.
     */
    if (s.strstart >= _w_size + (_w_size - MIN_LOOKAHEAD)) {

      utils.arraySet(s.window, s.window, _w_size, _w_size, 0);
      s.match_start -= _w_size;
      s.strstart -= _w_size;
      /* we now have strstart >= MAX_DIST */
      s.block_start -= _w_size;

      /* Slide the hash table (could be avoided with 32 bit values
       at the expense of memory usage). We slide even when level == 0
       to keep the hash table consistent if we switch back to level > 0
       later. (Using level 0 permanently is not an optimal usage of
       zlib, so we don't care about this pathological case.)
       */

      n = s.hash_size;
      p = n;
      do {
        m = s.head[--p];
        s.head[p] = (m >= _w_size ? m - _w_size : 0);
      } while (--n);

      n = _w_size;
      p = n;
      do {
        m = s.prev[--p];
        s.prev[p] = (m >= _w_size ? m - _w_size : 0);
        /* If n is not on any hash chain, prev[n] is garbage but
         * its value will never be used.
         */
      } while (--n);

      more += _w_size;
    }
    if (s.strm.avail_in === 0) {
      break;
    }

    /* If there was no sliding:
     *    strstart <= WSIZE+MAX_DIST-1 && lookahead <= MIN_LOOKAHEAD - 1 &&
     *    more == window_size - lookahead - strstart
     * => more >= window_size - (MIN_LOOKAHEAD-1 + WSIZE + MAX_DIST-1)
     * => more >= window_size - 2*WSIZE + 2
     * In the BIG_MEM or MMAP case (not yet supported),
     *   window_size == input_size + MIN_LOOKAHEAD  &&
     *   strstart + s->lookahead <= input_size => more >= MIN_LOOKAHEAD.
     * Otherwise, window_size == 2*WSIZE so more >= 2.
     * If there was sliding, more >= WSIZE. So in all cases, more >= 2.
     */
    //Assert(more >= 2, "more < 2");
    n = read_buf(s.strm, s.window, s.strstart + s.lookahead, more);
    s.lookahead += n;

    /* Initialize the hash value now that we have some input: */
    if (s.lookahead + s.insert >= MIN_MATCH) {
      str = s.strstart - s.insert;
      s.ins_h = s.window[str];

      /* UPDATE_HASH(s, s->ins_h, s->window[str + 1]); */
      s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[str + 1]) & s.hash_mask;
//#if MIN_MATCH != 3
//        Call update_hash() MIN_MATCH-3 more times
//#endif
      while (s.insert) {
        /* UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]); */
        s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[str + MIN_MATCH - 1]) & s.hash_mask;

        s.prev[str & s.w_mask] = s.head[s.ins_h];
        s.head[s.ins_h] = str;
        str++;
        s.insert--;
        if (s.lookahead + s.insert < MIN_MATCH) {
          break;
        }
      }
    }
    /* If the whole input has less than MIN_MATCH bytes, ins_h is garbage,
     * but this is not important since only literal bytes will be emitted.
     */

  } while (s.lookahead < MIN_LOOKAHEAD && s.strm.avail_in !== 0);

  /* If the WIN_INIT bytes after the end of the current data have never been
   * written, then zero those bytes in order to avoid memory check reports of
   * the use of uninitialized (or uninitialised as Julian writes) bytes by
   * the longest match routines.  Update the high water mark for the next
   * time through here.  WIN_INIT is set to MAX_MATCH since the longest match
   * routines allow scanning to strstart + MAX_MATCH, ignoring lookahead.
   */
//  if (s.high_water < s.window_size) {
//    var curr = s.strstart + s.lookahead;
//    var init = 0;
//
//    if (s.high_water < curr) {
//      /* Previous high water mark below current data -- zero WIN_INIT
//       * bytes or up to end of window, whichever is less.
//       */
//      init = s.window_size - curr;
//      if (init > WIN_INIT)
//        init = WIN_INIT;
//      zmemzero(s->window + curr, (unsigned)init);
//      s->high_water = curr + init;
//    }
//    else if (s->high_water < (ulg)curr + WIN_INIT) {
//      /* High water mark at or above current data, but below current data
//       * plus WIN_INIT -- zero out to current data plus WIN_INIT, or up
//       * to end of window, whichever is less.
//       */
//      init = (ulg)curr + WIN_INIT - s->high_water;
//      if (init > s->window_size - s->high_water)
//        init = s->window_size - s->high_water;
//      zmemzero(s->window + s->high_water, (unsigned)init);
//      s->high_water += init;
//    }
//  }
//
//  Assert((ulg)s->strstart <= s->window_size - MIN_LOOKAHEAD,
//    "not enough room for search");
}

/* ===========================================================================
 * Copy without compression as much as possible from the input stream, return
 * the current block state.
 * This function does not insert new strings in the dictionary since
 * uncompressible data is probably not useful. This function is used
 * only for the level=0 compression option.
 * NOTE: this function should be optimized to avoid extra copying from
 * window to pending_buf.
 */
function deflate_stored(s, flush) {
  /* Stored blocks are limited to 0xffff bytes, pending_buf is limited
   * to pending_buf_size, and each stored block has a 5 byte header:
   */
  var max_block_size = 0xffff;

  if (max_block_size > s.pending_buf_size - 5) {
    max_block_size = s.pending_buf_size - 5;
  }

  /* Copy as much as possible from input to output: */
  for (;;) {
    /* Fill the window as much as possible: */
    if (s.lookahead <= 1) {

      //Assert(s->strstart < s->w_size+MAX_DIST(s) ||
      //  s->block_start >= (long)s->w_size, "slide too late");
//      if (!(s.strstart < s.w_size + (s.w_size - MIN_LOOKAHEAD) ||
//        s.block_start >= s.w_size)) {
//        throw  new Error("slide too late");
//      }

      fill_window(s);
      if (s.lookahead === 0 && flush === Z_NO_FLUSH) {
        return BS_NEED_MORE;
      }

      if (s.lookahead === 0) {
        break;
      }
      /* flush the current block */
    }
    //Assert(s->block_start >= 0L, "block gone");
//    if (s.block_start < 0) throw new Error("block gone");

    s.strstart += s.lookahead;
    s.lookahead = 0;

    /* Emit a stored block if pending_buf will be full: */
    var max_start = s.block_start + max_block_size;

    if (s.strstart === 0 || s.strstart >= max_start) {
      /* strstart == 0 is possible when wraparound on 16-bit machine */
      s.lookahead = s.strstart - max_start;
      s.strstart = max_start;
      /*** FLUSH_BLOCK(s, 0); ***/
      flush_block_only(s, false);
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
      /***/


    }
    /* Flush if we may have to slide, otherwise block_start may become
     * negative and the data will be gone:
     */
    if (s.strstart - s.block_start >= (s.w_size - MIN_LOOKAHEAD)) {
      /*** FLUSH_BLOCK(s, 0); ***/
      flush_block_only(s, false);
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
      /***/
    }
  }

  s.insert = 0;

  if (flush === Z_FINISH) {
    /*** FLUSH_BLOCK(s, 1); ***/
    flush_block_only(s, true);
    if (s.strm.avail_out === 0) {
      return BS_FINISH_STARTED;
    }
    /***/
    return BS_FINISH_DONE;
  }

  if (s.strstart > s.block_start) {
    /*** FLUSH_BLOCK(s, 0); ***/
    flush_block_only(s, false);
    if (s.strm.avail_out === 0) {
      return BS_NEED_MORE;
    }
    /***/
  }

  return BS_NEED_MORE;
}

/* ===========================================================================
 * Compress as much as possible from the input stream, return the current
 * block state.
 * This function does not perform lazy evaluation of matches and inserts
 * new strings in the dictionary only for unmatched strings or for short
 * matches. It is used only for the fast compression options.
 */
function deflate_fast(s, flush) {
  var hash_head;        /* head of the hash chain */
  var bflush;           /* set if current block must be flushed */

  for (;;) {
    /* Make sure that we always have enough lookahead, except
     * at the end of the input file. We need MAX_MATCH bytes
     * for the next match, plus MIN_MATCH bytes to insert the
     * string following the next match.
     */
    if (s.lookahead < MIN_LOOKAHEAD) {
      fill_window(s);
      if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH) {
        return BS_NEED_MORE;
      }
      if (s.lookahead === 0) {
        break; /* flush the current block */
      }
    }

    /* Insert the string window[strstart .. strstart+2] in the
     * dictionary, and set hash_head to the head of the hash chain:
     */
    hash_head = 0/*NIL*/;
    if (s.lookahead >= MIN_MATCH) {
      /*** INSERT_STRING(s, s.strstart, hash_head); ***/
      s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;
      hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
      s.head[s.ins_h] = s.strstart;
      /***/
    }

    /* Find the longest match, discarding those <= prev_length.
     * At this point we have always match_length < MIN_MATCH
     */
    if (hash_head !== 0/*NIL*/ && ((s.strstart - hash_head) <= (s.w_size - MIN_LOOKAHEAD))) {
      /* To simplify the code, we prevent matches with the string
       * of window index 0 (in particular we have to avoid a match
       * of the string with itself at the start of the input file).
       */
      s.match_length = longest_match(s, hash_head);
      /* longest_match() sets match_start */
    }
    if (s.match_length >= MIN_MATCH) {
      // check_match(s, s.strstart, s.match_start, s.match_length); // for debug only

      /*** _tr_tally_dist(s, s.strstart - s.match_start,
                     s.match_length - MIN_MATCH, bflush); ***/
      bflush = trees._tr_tally(s, s.strstart - s.match_start, s.match_length - MIN_MATCH);

      s.lookahead -= s.match_length;

      /* Insert new strings in the hash table only if the match length
       * is not too large. This saves time but degrades compression.
       */
      if (s.match_length <= s.max_lazy_match/*max_insert_length*/ && s.lookahead >= MIN_MATCH) {
        s.match_length--; /* string at strstart already in table */
        do {
          s.strstart++;
          /*** INSERT_STRING(s, s.strstart, hash_head); ***/
          s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;
          hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
          s.head[s.ins_h] = s.strstart;
          /***/
          /* strstart never exceeds WSIZE-MAX_MATCH, so there are
           * always MIN_MATCH bytes ahead.
           */
        } while (--s.match_length !== 0);
        s.strstart++;
      } else
      {
        s.strstart += s.match_length;
        s.match_length = 0;
        s.ins_h = s.window[s.strstart];
        /* UPDATE_HASH(s, s.ins_h, s.window[s.strstart+1]); */
        s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + 1]) & s.hash_mask;

//#if MIN_MATCH != 3
//                Call UPDATE_HASH() MIN_MATCH-3 more times
//#endif
        /* If lookahead < MIN_MATCH, ins_h is garbage, but it does not
         * matter since it will be recomputed at next deflate call.
         */
      }
    } else {
      /* No match, output a literal byte */
      //Tracevv((stderr,"%c", s.window[s.strstart]));
      /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/
      bflush = trees._tr_tally(s, 0, s.window[s.strstart]);

      s.lookahead--;
      s.strstart++;
    }
    if (bflush) {
      /*** FLUSH_BLOCK(s, 0); ***/
      flush_block_only(s, false);
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
      /***/
    }
  }
  s.insert = ((s.strstart < (MIN_MATCH - 1)) ? s.strstart : MIN_MATCH - 1);
  if (flush === Z_FINISH) {
    /*** FLUSH_BLOCK(s, 1); ***/
    flush_block_only(s, true);
    if (s.strm.avail_out === 0) {
      return BS_FINISH_STARTED;
    }
    /***/
    return BS_FINISH_DONE;
  }
  if (s.last_lit) {
    /*** FLUSH_BLOCK(s, 0); ***/
    flush_block_only(s, false);
    if (s.strm.avail_out === 0) {
      return BS_NEED_MORE;
    }
    /***/
  }
  return BS_BLOCK_DONE;
}

/* ===========================================================================
 * Same as above, but achieves better compression. We use a lazy
 * evaluation for matches: a match is finally adopted only if there is
 * no better match at the next window position.
 */
function deflate_slow(s, flush) {
  var hash_head;          /* head of hash chain */
  var bflush;              /* set if current block must be flushed */

  var max_insert;

  /* Process the input block. */
  for (;;) {
    /* Make sure that we always have enough lookahead, except
     * at the end of the input file. We need MAX_MATCH bytes
     * for the next match, plus MIN_MATCH bytes to insert the
     * string following the next match.
     */
    if (s.lookahead < MIN_LOOKAHEAD) {
      fill_window(s);
      if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH) {
        return BS_NEED_MORE;
      }
      if (s.lookahead === 0) { break; } /* flush the current block */
    }

    /* Insert the string window[strstart .. strstart+2] in the
     * dictionary, and set hash_head to the head of the hash chain:
     */
    hash_head = 0/*NIL*/;
    if (s.lookahead >= MIN_MATCH) {
      /*** INSERT_STRING(s, s.strstart, hash_head); ***/
      s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;
      hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
      s.head[s.ins_h] = s.strstart;
      /***/
    }

    /* Find the longest match, discarding those <= prev_length.
     */
    s.prev_length = s.match_length;
    s.prev_match = s.match_start;
    s.match_length = MIN_MATCH - 1;

    if (hash_head !== 0/*NIL*/ && s.prev_length < s.max_lazy_match &&
        s.strstart - hash_head <= (s.w_size - MIN_LOOKAHEAD)/*MAX_DIST(s)*/) {
      /* To simplify the code, we prevent matches with the string
       * of window index 0 (in particular we have to avoid a match
       * of the string with itself at the start of the input file).
       */
      s.match_length = longest_match(s, hash_head);
      /* longest_match() sets match_start */

      if (s.match_length <= 5 &&
         (s.strategy === Z_FILTERED || (s.match_length === MIN_MATCH && s.strstart - s.match_start > 4096/*TOO_FAR*/))) {

        /* If prev_match is also MIN_MATCH, match_start is garbage
         * but we will ignore the current match anyway.
         */
        s.match_length = MIN_MATCH - 1;
      }
    }
    /* If there was a match at the previous step and the current
     * match is not better, output the previous match:
     */
    if (s.prev_length >= MIN_MATCH && s.match_length <= s.prev_length) {
      max_insert = s.strstart + s.lookahead - MIN_MATCH;
      /* Do not insert strings in hash table beyond this. */

      //check_match(s, s.strstart-1, s.prev_match, s.prev_length);

      /***_tr_tally_dist(s, s.strstart - 1 - s.prev_match,
                     s.prev_length - MIN_MATCH, bflush);***/
      bflush = trees._tr_tally(s, s.strstart - 1 - s.prev_match, s.prev_length - MIN_MATCH);
      /* Insert in hash table all strings up to the end of the match.
       * strstart-1 and strstart are already inserted. If there is not
       * enough lookahead, the last two strings are not inserted in
       * the hash table.
       */
      s.lookahead -= s.prev_length - 1;
      s.prev_length -= 2;
      do {
        if (++s.strstart <= max_insert) {
          /*** INSERT_STRING(s, s.strstart, hash_head); ***/
          s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;
          hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
          s.head[s.ins_h] = s.strstart;
          /***/
        }
      } while (--s.prev_length !== 0);
      s.match_available = 0;
      s.match_length = MIN_MATCH - 1;
      s.strstart++;

      if (bflush) {
        /*** FLUSH_BLOCK(s, 0); ***/
        flush_block_only(s, false);
        if (s.strm.avail_out === 0) {
          return BS_NEED_MORE;
        }
        /***/
      }

    } else if (s.match_available) {
      /* If there was no match at the previous position, output a
       * single literal. If there was a match but the current match
       * is longer, truncate the previous match to a single literal.
       */
      //Tracevv((stderr,"%c", s->window[s->strstart-1]));
      /*** _tr_tally_lit(s, s.window[s.strstart-1], bflush); ***/
      bflush = trees._tr_tally(s, 0, s.window[s.strstart - 1]);

      if (bflush) {
        /*** FLUSH_BLOCK_ONLY(s, 0) ***/
        flush_block_only(s, false);
        /***/
      }
      s.strstart++;
      s.lookahead--;
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
    } else {
      /* There is no previous match to compare with, wait for
       * the next step to decide.
       */
      s.match_available = 1;
      s.strstart++;
      s.lookahead--;
    }
  }
  //Assert (flush != Z_NO_FLUSH, "no flush?");
  if (s.match_available) {
    //Tracevv((stderr,"%c", s->window[s->strstart-1]));
    /*** _tr_tally_lit(s, s.window[s.strstart-1], bflush); ***/
    bflush = trees._tr_tally(s, 0, s.window[s.strstart - 1]);

    s.match_available = 0;
  }
  s.insert = s.strstart < MIN_MATCH - 1 ? s.strstart : MIN_MATCH - 1;
  if (flush === Z_FINISH) {
    /*** FLUSH_BLOCK(s, 1); ***/
    flush_block_only(s, true);
    if (s.strm.avail_out === 0) {
      return BS_FINISH_STARTED;
    }
    /***/
    return BS_FINISH_DONE;
  }
  if (s.last_lit) {
    /*** FLUSH_BLOCK(s, 0); ***/
    flush_block_only(s, false);
    if (s.strm.avail_out === 0) {
      return BS_NEED_MORE;
    }
    /***/
  }

  return BS_BLOCK_DONE;
}


/* ===========================================================================
 * For Z_RLE, simply look for runs of bytes, generate matches only of distance
 * one.  Do not maintain a hash table.  (It will be regenerated if this run of
 * deflate switches away from Z_RLE.)
 */
function deflate_rle(s, flush) {
  var bflush;            /* set if current block must be flushed */
  var prev;              /* byte at distance one to match */
  var scan, strend;      /* scan goes up to strend for length of run */

  var _win = s.window;

  for (;;) {
    /* Make sure that we always have enough lookahead, except
     * at the end of the input file. We need MAX_MATCH bytes
     * for the longest run, plus one for the unrolled loop.
     */
    if (s.lookahead <= MAX_MATCH) {
      fill_window(s);
      if (s.lookahead <= MAX_MATCH && flush === Z_NO_FLUSH) {
        return BS_NEED_MORE;
      }
      if (s.lookahead === 0) { break; } /* flush the current block */
    }

    /* See how many times the previous byte repeats */
    s.match_length = 0;
    if (s.lookahead >= MIN_MATCH && s.strstart > 0) {
      scan = s.strstart - 1;
      prev = _win[scan];
      if (prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan]) {
        strend = s.strstart + MAX_MATCH;
        do {
          /*jshint noempty:false*/
        } while (prev === _win[++scan] && prev === _win[++scan] &&
                 prev === _win[++scan] && prev === _win[++scan] &&
                 prev === _win[++scan] && prev === _win[++scan] &&
                 prev === _win[++scan] && prev === _win[++scan] &&
                 scan < strend);
        s.match_length = MAX_MATCH - (strend - scan);
        if (s.match_length > s.lookahead) {
          s.match_length = s.lookahead;
        }
      }
      //Assert(scan <= s->window+(uInt)(s->window_size-1), "wild scan");
    }

    /* Emit match if have run of MIN_MATCH or longer, else emit literal */
    if (s.match_length >= MIN_MATCH) {
      //check_match(s, s.strstart, s.strstart - 1, s.match_length);

      /*** _tr_tally_dist(s, 1, s.match_length - MIN_MATCH, bflush); ***/
      bflush = trees._tr_tally(s, 1, s.match_length - MIN_MATCH);

      s.lookahead -= s.match_length;
      s.strstart += s.match_length;
      s.match_length = 0;
    } else {
      /* No match, output a literal byte */
      //Tracevv((stderr,"%c", s->window[s->strstart]));
      /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/
      bflush = trees._tr_tally(s, 0, s.window[s.strstart]);

      s.lookahead--;
      s.strstart++;
    }
    if (bflush) {
      /*** FLUSH_BLOCK(s, 0); ***/
      flush_block_only(s, false);
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
      /***/
    }
  }
  s.insert = 0;
  if (flush === Z_FINISH) {
    /*** FLUSH_BLOCK(s, 1); ***/
    flush_block_only(s, true);
    if (s.strm.avail_out === 0) {
      return BS_FINISH_STARTED;
    }
    /***/
    return BS_FINISH_DONE;
  }
  if (s.last_lit) {
    /*** FLUSH_BLOCK(s, 0); ***/
    flush_block_only(s, false);
    if (s.strm.avail_out === 0) {
      return BS_NEED_MORE;
    }
    /***/
  }
  return BS_BLOCK_DONE;
}

/* ===========================================================================
 * For Z_HUFFMAN_ONLY, do not look for matches.  Do not maintain a hash table.
 * (It will be regenerated if this run of deflate switches away from Huffman.)
 */
function deflate_huff(s, flush) {
  var bflush;             /* set if current block must be flushed */

  for (;;) {
    /* Make sure that we have a literal to write. */
    if (s.lookahead === 0) {
      fill_window(s);
      if (s.lookahead === 0) {
        if (flush === Z_NO_FLUSH) {
          return BS_NEED_MORE;
        }
        break;      /* flush the current block */
      }
    }

    /* Output a literal byte */
    s.match_length = 0;
    //Tracevv((stderr,"%c", s->window[s->strstart]));
    /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/
    bflush = trees._tr_tally(s, 0, s.window[s.strstart]);
    s.lookahead--;
    s.strstart++;
    if (bflush) {
      /*** FLUSH_BLOCK(s, 0); ***/
      flush_block_only(s, false);
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
      /***/
    }
  }
  s.insert = 0;
  if (flush === Z_FINISH) {
    /*** FLUSH_BLOCK(s, 1); ***/
    flush_block_only(s, true);
    if (s.strm.avail_out === 0) {
      return BS_FINISH_STARTED;
    }
    /***/
    return BS_FINISH_DONE;
  }
  if (s.last_lit) {
    /*** FLUSH_BLOCK(s, 0); ***/
    flush_block_only(s, false);
    if (s.strm.avail_out === 0) {
      return BS_NEED_MORE;
    }
    /***/
  }
  return BS_BLOCK_DONE;
}

/* Values for max_lazy_match, good_match and max_chain_length, depending on
 * the desired pack level (0..9). The values given below have been tuned to
 * exclude worst case performance for pathological files. Better values may be
 * found for specific files.
 */
function Config(good_length, max_lazy, nice_length, max_chain, func) {
  this.good_length = good_length;
  this.max_lazy = max_lazy;
  this.nice_length = nice_length;
  this.max_chain = max_chain;
  this.func = func;
}

var configuration_table;

configuration_table = [
  /*      good lazy nice chain */
  new Config(0, 0, 0, 0, deflate_stored),          /* 0 store only */
  new Config(4, 4, 8, 4, deflate_fast),            /* 1 max speed, no lazy matches */
  new Config(4, 5, 16, 8, deflate_fast),           /* 2 */
  new Config(4, 6, 32, 32, deflate_fast),          /* 3 */

  new Config(4, 4, 16, 16, deflate_slow),          /* 4 lazy matches */
  new Config(8, 16, 32, 32, deflate_slow),         /* 5 */
  new Config(8, 16, 128, 128, deflate_slow),       /* 6 */
  new Config(8, 32, 128, 256, deflate_slow),       /* 7 */
  new Config(32, 128, 258, 1024, deflate_slow),    /* 8 */
  new Config(32, 258, 258, 4096, deflate_slow)     /* 9 max compression */
];


/* ===========================================================================
 * Initialize the "longest match" routines for a new zlib stream
 */
function lm_init(s) {
  s.window_size = 2 * s.w_size;

  /*** CLEAR_HASH(s); ***/
  zero(s.head); // Fill with NIL (= 0);

  /* Set the default configuration parameters:
   */
  s.max_lazy_match = configuration_table[s.level].max_lazy;
  s.good_match = configuration_table[s.level].good_length;
  s.nice_match = configuration_table[s.level].nice_length;
  s.max_chain_length = configuration_table[s.level].max_chain;

  s.strstart = 0;
  s.block_start = 0;
  s.lookahead = 0;
  s.insert = 0;
  s.match_length = s.prev_length = MIN_MATCH - 1;
  s.match_available = 0;
  s.ins_h = 0;
}


function DeflateState() {
  this.strm = null;            /* pointer back to this zlib stream */
  this.status = 0;            /* as the name implies */
  this.pending_buf = null;      /* output still pending */
  this.pending_buf_size = 0;  /* size of pending_buf */
  this.pending_out = 0;       /* next pending byte to output to the stream */
  this.pending = 0;           /* nb of bytes in the pending buffer */
  this.wrap = 0;              /* bit 0 true for zlib, bit 1 true for gzip */
  this.gzhead = null;         /* gzip header information to write */
  this.gzindex = 0;           /* where in extra, name, or comment */
  this.method = Z_DEFLATED; /* can only be DEFLATED */
  this.last_flush = -1;   /* value of flush param for previous deflate call */

  this.w_size = 0;  /* LZ77 window size (32K by default) */
  this.w_bits = 0;  /* log2(w_size)  (8..16) */
  this.w_mask = 0;  /* w_size - 1 */

  this.window = null;
  /* Sliding window. Input bytes are read into the second half of the window,
   * and move to the first half later to keep a dictionary of at least wSize
   * bytes. With this organization, matches are limited to a distance of
   * wSize-MAX_MATCH bytes, but this ensures that IO is always
   * performed with a length multiple of the block size.
   */

  this.window_size = 0;
  /* Actual size of window: 2*wSize, except when the user input buffer
   * is directly used as sliding window.
   */

  this.prev = null;
  /* Link to older string with same hash index. To limit the size of this
   * array to 64K, this link is maintained only for the last 32K strings.
   * An index in this array is thus a window index modulo 32K.
   */

  this.head = null;   /* Heads of the hash chains or NIL. */

  this.ins_h = 0;       /* hash index of string to be inserted */
  this.hash_size = 0;   /* number of elements in hash table */
  this.hash_bits = 0;   /* log2(hash_size) */
  this.hash_mask = 0;   /* hash_size-1 */

  this.hash_shift = 0;
  /* Number of bits by which ins_h must be shifted at each input
   * step. It must be such that after MIN_MATCH steps, the oldest
   * byte no longer takes part in the hash key, that is:
   *   hash_shift * MIN_MATCH >= hash_bits
   */

  this.block_start = 0;
  /* Window position at the beginning of the current output block. Gets
   * negative when the window is moved backwards.
   */

  this.match_length = 0;      /* length of best match */
  this.prev_match = 0;        /* previous match */
  this.match_available = 0;   /* set if previous match exists */
  this.strstart = 0;          /* start of string to insert */
  this.match_start = 0;       /* start of matching string */
  this.lookahead = 0;         /* number of valid bytes ahead in window */

  this.prev_length = 0;
  /* Length of the best match at previous step. Matches not greater than this
   * are discarded. This is used in the lazy match evaluation.
   */

  this.max_chain_length = 0;
  /* To speed up deflation, hash chains are never searched beyond this
   * length.  A higher limit improves compression ratio but degrades the
   * speed.
   */

  this.max_lazy_match = 0;
  /* Attempt to find a better match only when the current match is strictly
   * smaller than this value. This mechanism is used only for compression
   * levels >= 4.
   */
  // That's alias to max_lazy_match, don't use directly
  //this.max_insert_length = 0;
  /* Insert new strings in the hash table only if the match length is not
   * greater than this length. This saves time but degrades compression.
   * max_insert_length is used only for compression levels <= 3.
   */

  this.level = 0;     /* compression level (1..9) */
  this.strategy = 0;  /* favor or force Huffman coding*/

  this.good_match = 0;
  /* Use a faster search when the previous match is longer than this */

  this.nice_match = 0; /* Stop searching when current match exceeds this */

              /* used by trees.c: */

  /* Didn't use ct_data typedef below to suppress compiler warning */

  // struct ct_data_s dyn_ltree[HEAP_SIZE];   /* literal and length tree */
  // struct ct_data_s dyn_dtree[2*D_CODES+1]; /* distance tree */
  // struct ct_data_s bl_tree[2*BL_CODES+1];  /* Huffman tree for bit lengths */

  // Use flat array of DOUBLE size, with interleaved fata,
  // because JS does not support effective
  this.dyn_ltree  = new utils.Buf16(HEAP_SIZE * 2);
  this.dyn_dtree  = new utils.Buf16((2 * D_CODES + 1) * 2);
  this.bl_tree    = new utils.Buf16((2 * BL_CODES + 1) * 2);
  zero(this.dyn_ltree);
  zero(this.dyn_dtree);
  zero(this.bl_tree);

  this.l_desc   = null;         /* desc. for literal tree */
  this.d_desc   = null;         /* desc. for distance tree */
  this.bl_desc  = null;         /* desc. for bit length tree */

  //ush bl_count[MAX_BITS+1];
  this.bl_count = new utils.Buf16(MAX_BITS + 1);
  /* number of codes at each bit length for an optimal tree */

  //int heap[2*L_CODES+1];      /* heap used to build the Huffman trees */
  this.heap = new utils.Buf16(2 * L_CODES + 1);  /* heap used to build the Huffman trees */
  zero(this.heap);

  this.heap_len = 0;               /* number of elements in the heap */
  this.heap_max = 0;               /* element of largest frequency */
  /* The sons of heap[n] are heap[2*n] and heap[2*n+1]. heap[0] is not used.
   * The same heap array is used to build all trees.
   */

  this.depth = new utils.Buf16(2 * L_CODES + 1); //uch depth[2*L_CODES+1];
  zero(this.depth);
  /* Depth of each subtree used as tie breaker for trees of equal frequency
   */

  this.l_buf = 0;          /* buffer index for literals or lengths */

  this.lit_bufsize = 0;
  /* Size of match buffer for literals/lengths.  There are 4 reasons for
   * limiting lit_bufsize to 64K:
   *   - frequencies can be kept in 16 bit counters
   *   - if compression is not successful for the first block, all input
   *     data is still in the window so we can still emit a stored block even
   *     when input comes from standard input.  (This can also be done for
   *     all blocks if lit_bufsize is not greater than 32K.)
   *   - if compression is not successful for a file smaller than 64K, we can
   *     even emit a stored file instead of a stored block (saving 5 bytes).
   *     This is applicable only for zip (not gzip or zlib).
   *   - creating new Huffman trees less frequently may not provide fast
   *     adaptation to changes in the input data statistics. (Take for
   *     example a binary file with poorly compressible code followed by
   *     a highly compressible string table.) Smaller buffer sizes give
   *     fast adaptation but have of course the overhead of transmitting
   *     trees more frequently.
   *   - I can't count above 4
   */

  this.last_lit = 0;      /* running index in l_buf */

  this.d_buf = 0;
  /* Buffer index for distances. To simplify the code, d_buf and l_buf have
   * the same number of elements. To use different lengths, an extra flag
   * array would be necessary.
   */

  this.opt_len = 0;       /* bit length of current block with optimal trees */
  this.static_len = 0;    /* bit length of current block with static trees */
  this.matches = 0;       /* number of string matches in current block */
  this.insert = 0;        /* bytes at end of window left to insert */


  this.bi_buf = 0;
  /* Output buffer. bits are inserted starting at the bottom (least
   * significant bits).
   */
  this.bi_valid = 0;
  /* Number of valid bits in bi_buf.  All bits above the last valid bit
   * are always zero.
   */

  // Used for window memory init. We safely ignore it for JS. That makes
  // sense only for pointers and memory check tools.
  //this.high_water = 0;
  /* High water mark offset in window for initialized bytes -- bytes above
   * this are set to zero in order to avoid memory check warnings when
   * longest match routines access bytes past the input.  This is then
   * updated to the new high water mark.
   */
}


function deflateResetKeep(strm) {
  var s;

  if (!strm || !strm.state) {
    return err(strm, Z_STREAM_ERROR);
  }

  strm.total_in = strm.total_out = 0;
  strm.data_type = Z_UNKNOWN;

  s = strm.state;
  s.pending = 0;
  s.pending_out = 0;

  if (s.wrap < 0) {
    s.wrap = -s.wrap;
    /* was made negative by deflate(..., Z_FINISH); */
  }
  s.status = (s.wrap ? INIT_STATE : BUSY_STATE);
  strm.adler = (s.wrap === 2) ?
    0  // crc32(0, Z_NULL, 0)
  :
    1; // adler32(0, Z_NULL, 0)
  s.last_flush = Z_NO_FLUSH;
  trees._tr_init(s);
  return Z_OK;
}


function deflateReset(strm) {
  var ret = deflateResetKeep(strm);
  if (ret === Z_OK) {
    lm_init(strm.state);
  }
  return ret;
}


function deflateSetHeader(strm, head) {
  if (!strm || !strm.state) { return Z_STREAM_ERROR; }
  if (strm.state.wrap !== 2) { return Z_STREAM_ERROR; }
  strm.state.gzhead = head;
  return Z_OK;
}


function deflateInit2(strm, level, method, windowBits, memLevel, strategy) {
  if (!strm) { // === Z_NULL
    return Z_STREAM_ERROR;
  }
  var wrap = 1;

  if (level === Z_DEFAULT_COMPRESSION) {
    level = 6;
  }

  if (windowBits < 0) { /* suppress zlib wrapper */
    wrap = 0;
    windowBits = -windowBits;
  }

  else if (windowBits > 15) {
    wrap = 2;           /* write gzip wrapper instead */
    windowBits -= 16;
  }


  if (memLevel < 1 || memLevel > MAX_MEM_LEVEL || method !== Z_DEFLATED ||
    windowBits < 8 || windowBits > 15 || level < 0 || level > 9 ||
    strategy < 0 || strategy > Z_FIXED) {
    return err(strm, Z_STREAM_ERROR);
  }


  if (windowBits === 8) {
    windowBits = 9;
  }
  /* until 256-byte window bug fixed */

  var s = new DeflateState();

  strm.state = s;
  s.strm = strm;

  s.wrap = wrap;
  s.gzhead = null;
  s.w_bits = windowBits;
  s.w_size = 1 << s.w_bits;
  s.w_mask = s.w_size - 1;

  s.hash_bits = memLevel + 7;
  s.hash_size = 1 << s.hash_bits;
  s.hash_mask = s.hash_size - 1;
  s.hash_shift = ~~((s.hash_bits + MIN_MATCH - 1) / MIN_MATCH);

  s.window = new utils.Buf8(s.w_size * 2);
  s.head = new utils.Buf16(s.hash_size);
  s.prev = new utils.Buf16(s.w_size);

  // Don't need mem init magic for JS.
  //s.high_water = 0;  /* nothing written to s->window yet */

  s.lit_bufsize = 1 << (memLevel + 6); /* 16K elements by default */

  s.pending_buf_size = s.lit_bufsize * 4;

  //overlay = (ushf *) ZALLOC(strm, s->lit_bufsize, sizeof(ush)+2);
  //s->pending_buf = (uchf *) overlay;
  s.pending_buf = new utils.Buf8(s.pending_buf_size);

  // It is offset from `s.pending_buf` (size is `s.lit_bufsize * 2`)
  //s->d_buf = overlay + s->lit_bufsize/sizeof(ush);
  s.d_buf = 1 * s.lit_bufsize;

  //s->l_buf = s->pending_buf + (1+sizeof(ush))*s->lit_bufsize;
  s.l_buf = (1 + 2) * s.lit_bufsize;

  s.level = level;
  s.strategy = strategy;
  s.method = method;

  return deflateReset(strm);
}

function deflateInit(strm, level) {
  return deflateInit2(strm, level, Z_DEFLATED, MAX_WBITS, DEF_MEM_LEVEL, Z_DEFAULT_STRATEGY);
}


function deflate(strm, flush) {
  var old_flush, s;
  var beg, val; // for gzip header write only

  if (!strm || !strm.state ||
    flush > Z_BLOCK || flush < 0) {
    return strm ? err(strm, Z_STREAM_ERROR) : Z_STREAM_ERROR;
  }

  s = strm.state;

  if (!strm.output ||
      (!strm.input && strm.avail_in !== 0) ||
      (s.status === FINISH_STATE && flush !== Z_FINISH)) {
    return err(strm, (strm.avail_out === 0) ? Z_BUF_ERROR : Z_STREAM_ERROR);
  }

  s.strm = strm; /* just in case */
  old_flush = s.last_flush;
  s.last_flush = flush;

  /* Write the header */
  if (s.status === INIT_STATE) {

    if (s.wrap === 2) { // GZIP header
      strm.adler = 0;  //crc32(0L, Z_NULL, 0);
      put_byte(s, 31);
      put_byte(s, 139);
      put_byte(s, 8);
      if (!s.gzhead) { // s->gzhead == Z_NULL
        put_byte(s, 0);
        put_byte(s, 0);
        put_byte(s, 0);
        put_byte(s, 0);
        put_byte(s, 0);
        put_byte(s, s.level === 9 ? 2 :
                    (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ?
                     4 : 0));
        put_byte(s, OS_CODE);
        s.status = BUSY_STATE;
      }
      else {
        put_byte(s, (s.gzhead.text ? 1 : 0) +
                    (s.gzhead.hcrc ? 2 : 0) +
                    (!s.gzhead.extra ? 0 : 4) +
                    (!s.gzhead.name ? 0 : 8) +
                    (!s.gzhead.comment ? 0 : 16)
                );
        put_byte(s, s.gzhead.time & 0xff);
        put_byte(s, (s.gzhead.time >> 8) & 0xff);
        put_byte(s, (s.gzhead.time >> 16) & 0xff);
        put_byte(s, (s.gzhead.time >> 24) & 0xff);
        put_byte(s, s.level === 9 ? 2 :
                    (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ?
                     4 : 0));
        put_byte(s, s.gzhead.os & 0xff);
        if (s.gzhead.extra && s.gzhead.extra.length) {
          put_byte(s, s.gzhead.extra.length & 0xff);
          put_byte(s, (s.gzhead.extra.length >> 8) & 0xff);
        }
        if (s.gzhead.hcrc) {
          strm.adler = crc32(strm.adler, s.pending_buf, s.pending, 0);
        }
        s.gzindex = 0;
        s.status = EXTRA_STATE;
      }
    }
    else // DEFLATE header
    {
      var header = (Z_DEFLATED + ((s.w_bits - 8) << 4)) << 8;
      var level_flags = -1;

      if (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2) {
        level_flags = 0;
      } else if (s.level < 6) {
        level_flags = 1;
      } else if (s.level === 6) {
        level_flags = 2;
      } else {
        level_flags = 3;
      }
      header |= (level_flags << 6);
      if (s.strstart !== 0) { header |= PRESET_DICT; }
      header += 31 - (header % 31);

      s.status = BUSY_STATE;
      putShortMSB(s, header);

      /* Save the adler32 of the preset dictionary: */
      if (s.strstart !== 0) {
        putShortMSB(s, strm.adler >>> 16);
        putShortMSB(s, strm.adler & 0xffff);
      }
      strm.adler = 1; // adler32(0L, Z_NULL, 0);
    }
  }

//#ifdef GZIP
  if (s.status === EXTRA_STATE) {
    if (s.gzhead.extra/* != Z_NULL*/) {
      beg = s.pending;  /* start of bytes to update crc */

      while (s.gzindex < (s.gzhead.extra.length & 0xffff)) {
        if (s.pending === s.pending_buf_size) {
          if (s.gzhead.hcrc && s.pending > beg) {
            strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
          }
          flush_pending(strm);
          beg = s.pending;
          if (s.pending === s.pending_buf_size) {
            break;
          }
        }
        put_byte(s, s.gzhead.extra[s.gzindex] & 0xff);
        s.gzindex++;
      }
      if (s.gzhead.hcrc && s.pending > beg) {
        strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
      }
      if (s.gzindex === s.gzhead.extra.length) {
        s.gzindex = 0;
        s.status = NAME_STATE;
      }
    }
    else {
      s.status = NAME_STATE;
    }
  }
  if (s.status === NAME_STATE) {
    if (s.gzhead.name/* != Z_NULL*/) {
      beg = s.pending;  /* start of bytes to update crc */
      //int val;

      do {
        if (s.pending === s.pending_buf_size) {
          if (s.gzhead.hcrc && s.pending > beg) {
            strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
          }
          flush_pending(strm);
          beg = s.pending;
          if (s.pending === s.pending_buf_size) {
            val = 1;
            break;
          }
        }
        // JS specific: little magic to add zero terminator to end of string
        if (s.gzindex < s.gzhead.name.length) {
          val = s.gzhead.name.charCodeAt(s.gzindex++) & 0xff;
        } else {
          val = 0;
        }
        put_byte(s, val);
      } while (val !== 0);

      if (s.gzhead.hcrc && s.pending > beg) {
        strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
      }
      if (val === 0) {
        s.gzindex = 0;
        s.status = COMMENT_STATE;
      }
    }
    else {
      s.status = COMMENT_STATE;
    }
  }
  if (s.status === COMMENT_STATE) {
    if (s.gzhead.comment/* != Z_NULL*/) {
      beg = s.pending;  /* start of bytes to update crc */
      //int val;

      do {
        if (s.pending === s.pending_buf_size) {
          if (s.gzhead.hcrc && s.pending > beg) {
            strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
          }
          flush_pending(strm);
          beg = s.pending;
          if (s.pending === s.pending_buf_size) {
            val = 1;
            break;
          }
        }
        // JS specific: little magic to add zero terminator to end of string
        if (s.gzindex < s.gzhead.comment.length) {
          val = s.gzhead.comment.charCodeAt(s.gzindex++) & 0xff;
        } else {
          val = 0;
        }
        put_byte(s, val);
      } while (val !== 0);

      if (s.gzhead.hcrc && s.pending > beg) {
        strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
      }
      if (val === 0) {
        s.status = HCRC_STATE;
      }
    }
    else {
      s.status = HCRC_STATE;
    }
  }
  if (s.status === HCRC_STATE) {
    if (s.gzhead.hcrc) {
      if (s.pending + 2 > s.pending_buf_size) {
        flush_pending(strm);
      }
      if (s.pending + 2 <= s.pending_buf_size) {
        put_byte(s, strm.adler & 0xff);
        put_byte(s, (strm.adler >> 8) & 0xff);
        strm.adler = 0; //crc32(0L, Z_NULL, 0);
        s.status = BUSY_STATE;
      }
    }
    else {
      s.status = BUSY_STATE;
    }
  }
//#endif

  /* Flush as much pending output as possible */
  if (s.pending !== 0) {
    flush_pending(strm);
    if (strm.avail_out === 0) {
      /* Since avail_out is 0, deflate will be called again with
       * more output space, but possibly with both pending and
       * avail_in equal to zero. There won't be anything to do,
       * but this is not an error situation so make sure we
       * return OK instead of BUF_ERROR at next call of deflate:
       */
      s.last_flush = -1;
      return Z_OK;
    }

    /* Make sure there is something to do and avoid duplicate consecutive
     * flushes. For repeated and useless calls with Z_FINISH, we keep
     * returning Z_STREAM_END instead of Z_BUF_ERROR.
     */
  } else if (strm.avail_in === 0 && rank(flush) <= rank(old_flush) &&
    flush !== Z_FINISH) {
    return err(strm, Z_BUF_ERROR);
  }

  /* User must not provide more input after the first FINISH: */
  if (s.status === FINISH_STATE && strm.avail_in !== 0) {
    return err(strm, Z_BUF_ERROR);
  }

  /* Start a new block or continue the current one.
   */
  if (strm.avail_in !== 0 || s.lookahead !== 0 ||
    (flush !== Z_NO_FLUSH && s.status !== FINISH_STATE)) {
    var bstate = (s.strategy === Z_HUFFMAN_ONLY) ? deflate_huff(s, flush) :
      (s.strategy === Z_RLE ? deflate_rle(s, flush) :
        configuration_table[s.level].func(s, flush));

    if (bstate === BS_FINISH_STARTED || bstate === BS_FINISH_DONE) {
      s.status = FINISH_STATE;
    }
    if (bstate === BS_NEED_MORE || bstate === BS_FINISH_STARTED) {
      if (strm.avail_out === 0) {
        s.last_flush = -1;
        /* avoid BUF_ERROR next call, see above */
      }
      return Z_OK;
      /* If flush != Z_NO_FLUSH && avail_out == 0, the next call
       * of deflate should use the same flush parameter to make sure
       * that the flush is complete. So we don't have to output an
       * empty block here, this will be done at next call. This also
       * ensures that for a very small output buffer, we emit at most
       * one empty block.
       */
    }
    if (bstate === BS_BLOCK_DONE) {
      if (flush === Z_PARTIAL_FLUSH) {
        trees._tr_align(s);
      }
      else if (flush !== Z_BLOCK) { /* FULL_FLUSH or SYNC_FLUSH */

        trees._tr_stored_block(s, 0, 0, false);
        /* For a full flush, this empty block will be recognized
         * as a special marker by inflate_sync().
         */
        if (flush === Z_FULL_FLUSH) {
          /*** CLEAR_HASH(s); ***/             /* forget history */
          zero(s.head); // Fill with NIL (= 0);

          if (s.lookahead === 0) {
            s.strstart = 0;
            s.block_start = 0;
            s.insert = 0;
          }
        }
      }
      flush_pending(strm);
      if (strm.avail_out === 0) {
        s.last_flush = -1; /* avoid BUF_ERROR at next call, see above */
        return Z_OK;
      }
    }
  }
  //Assert(strm->avail_out > 0, "bug2");
  //if (strm.avail_out <= 0) { throw new Error("bug2");}

  if (flush !== Z_FINISH) { return Z_OK; }
  if (s.wrap <= 0) { return Z_STREAM_END; }

  /* Write the trailer */
  if (s.wrap === 2) {
    put_byte(s, strm.adler & 0xff);
    put_byte(s, (strm.adler >> 8) & 0xff);
    put_byte(s, (strm.adler >> 16) & 0xff);
    put_byte(s, (strm.adler >> 24) & 0xff);
    put_byte(s, strm.total_in & 0xff);
    put_byte(s, (strm.total_in >> 8) & 0xff);
    put_byte(s, (strm.total_in >> 16) & 0xff);
    put_byte(s, (strm.total_in >> 24) & 0xff);
  }
  else
  {
    putShortMSB(s, strm.adler >>> 16);
    putShortMSB(s, strm.adler & 0xffff);
  }

  flush_pending(strm);
  /* If avail_out is zero, the application will call deflate again
   * to flush the rest.
   */
  if (s.wrap > 0) { s.wrap = -s.wrap; }
  /* write the trailer only once! */
  return s.pending !== 0 ? Z_OK : Z_STREAM_END;
}

function deflateEnd(strm) {
  var status;

  if (!strm/*== Z_NULL*/ || !strm.state/*== Z_NULL*/) {
    return Z_STREAM_ERROR;
  }

  status = strm.state.status;
  if (status !== INIT_STATE &&
    status !== EXTRA_STATE &&
    status !== NAME_STATE &&
    status !== COMMENT_STATE &&
    status !== HCRC_STATE &&
    status !== BUSY_STATE &&
    status !== FINISH_STATE
  ) {
    return err(strm, Z_STREAM_ERROR);
  }

  strm.state = null;

  return status === BUSY_STATE ? err(strm, Z_DATA_ERROR) : Z_OK;
}


/* =========================================================================
 * Initializes the compression dictionary from the given byte
 * sequence without producing any compressed output.
 */
function deflateSetDictionary(strm, dictionary) {
  var dictLength = dictionary.length;

  var s;
  var str, n;
  var wrap;
  var avail;
  var next;
  var input;
  var tmpDict;

  if (!strm/*== Z_NULL*/ || !strm.state/*== Z_NULL*/) {
    return Z_STREAM_ERROR;
  }

  s = strm.state;
  wrap = s.wrap;

  if (wrap === 2 || (wrap === 1 && s.status !== INIT_STATE) || s.lookahead) {
    return Z_STREAM_ERROR;
  }

  /* when using zlib wrappers, compute Adler-32 for provided dictionary */
  if (wrap === 1) {
    /* adler32(strm->adler, dictionary, dictLength); */
    strm.adler = adler32(strm.adler, dictionary, dictLength, 0);
  }

  s.wrap = 0;   /* avoid computing Adler-32 in read_buf */

  /* if dictionary would fill window, just replace the history */
  if (dictLength >= s.w_size) {
    if (wrap === 0) {            /* already empty otherwise */
      /*** CLEAR_HASH(s); ***/
      zero(s.head); // Fill with NIL (= 0);
      s.strstart = 0;
      s.block_start = 0;
      s.insert = 0;
    }
    /* use the tail */
    // dictionary = dictionary.slice(dictLength - s.w_size);
    tmpDict = new utils.Buf8(s.w_size);
    utils.arraySet(tmpDict, dictionary, dictLength - s.w_size, s.w_size, 0);
    dictionary = tmpDict;
    dictLength = s.w_size;
  }
  /* insert dictionary into window and hash */
  avail = strm.avail_in;
  next = strm.next_in;
  input = strm.input;
  strm.avail_in = dictLength;
  strm.next_in = 0;
  strm.input = dictionary;
  fill_window(s);
  while (s.lookahead >= MIN_MATCH) {
    str = s.strstart;
    n = s.lookahead - (MIN_MATCH - 1);
    do {
      /* UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]); */
      s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[str + MIN_MATCH - 1]) & s.hash_mask;

      s.prev[str & s.w_mask] = s.head[s.ins_h];

      s.head[s.ins_h] = str;
      str++;
    } while (--n);
    s.strstart = str;
    s.lookahead = MIN_MATCH - 1;
    fill_window(s);
  }
  s.strstart += s.lookahead;
  s.block_start = s.strstart;
  s.insert = s.lookahead;
  s.lookahead = 0;
  s.match_length = s.prev_length = MIN_MATCH - 1;
  s.match_available = 0;
  strm.next_in = next;
  strm.input = input;
  strm.avail_in = avail;
  s.wrap = wrap;
  return Z_OK;
}


exports.deflateInit = deflateInit;
exports.deflateInit2 = deflateInit2;
exports.deflateReset = deflateReset;
exports.deflateResetKeep = deflateResetKeep;
exports.deflateSetHeader = deflateSetHeader;
exports.deflate = deflate;
exports.deflateEnd = deflateEnd;
exports.deflateSetDictionary = deflateSetDictionary;
exports.deflateInfo = 'pako deflate (from Nodeca project)';

/* Not implemented
exports.deflateBound = deflateBound;
exports.deflateCopy = deflateCopy;
exports.deflateParams = deflateParams;
exports.deflatePending = deflatePending;
exports.deflatePrime = deflatePrime;
exports.deflateTune = deflateTune;
*/


/***/ }),
/* 334 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";



var utils = __webpack_require__(14);

/* Public constants ==========================================================*/
/* ===========================================================================*/


//var Z_FILTERED          = 1;
//var Z_HUFFMAN_ONLY      = 2;
//var Z_RLE               = 3;
var Z_FIXED               = 4;
//var Z_DEFAULT_STRATEGY  = 0;

/* Possible values of the data_type field (though see inflate()) */
var Z_BINARY              = 0;
var Z_TEXT                = 1;
//var Z_ASCII             = 1; // = Z_TEXT
var Z_UNKNOWN             = 2;

/*============================================================================*/


function zero(buf) { var len = buf.length; while (--len >= 0) { buf[len] = 0; } }

// From zutil.h

var STORED_BLOCK = 0;
var STATIC_TREES = 1;
var DYN_TREES    = 2;
/* The three kinds of block type */

var MIN_MATCH    = 3;
var MAX_MATCH    = 258;
/* The minimum and maximum match lengths */

// From deflate.h
/* ===========================================================================
 * Internal compression state.
 */

var LENGTH_CODES  = 29;
/* number of length codes, not counting the special END_BLOCK code */

var LITERALS      = 256;
/* number of literal bytes 0..255 */

var L_CODES       = LITERALS + 1 + LENGTH_CODES;
/* number of Literal or Length codes, including the END_BLOCK code */

var D_CODES       = 30;
/* number of distance codes */

var BL_CODES      = 19;
/* number of codes used to transfer the bit lengths */

var HEAP_SIZE     = 2 * L_CODES + 1;
/* maximum heap size */

var MAX_BITS      = 15;
/* All codes must not exceed MAX_BITS bits */

var Buf_size      = 16;
/* size of bit buffer in bi_buf */


/* ===========================================================================
 * Constants
 */

var MAX_BL_BITS = 7;
/* Bit length codes must not exceed MAX_BL_BITS bits */

var END_BLOCK   = 256;
/* end of block literal code */

var REP_3_6     = 16;
/* repeat previous bit length 3-6 times (2 bits of repeat count) */

var REPZ_3_10   = 17;
/* repeat a zero length 3-10 times  (3 bits of repeat count) */

var REPZ_11_138 = 18;
/* repeat a zero length 11-138 times  (7 bits of repeat count) */

/* eslint-disable comma-spacing,array-bracket-spacing */
var extra_lbits =   /* extra bits for each length code */
  [0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0];

var extra_dbits =   /* extra bits for each distance code */
  [0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13];

var extra_blbits =  /* extra bits for each bit length code */
  [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,7];

var bl_order =
  [16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15];
/* eslint-enable comma-spacing,array-bracket-spacing */

/* The lengths of the bit length codes are sent in order of decreasing
 * probability, to avoid transmitting the lengths for unused bit length codes.
 */

/* ===========================================================================
 * Local data. These are initialized only once.
 */

// We pre-fill arrays with 0 to avoid uninitialized gaps

var DIST_CODE_LEN = 512; /* see definition of array dist_code below */

// !!!! Use flat array insdead of structure, Freq = i*2, Len = i*2+1
var static_ltree  = new Array((L_CODES + 2) * 2);
zero(static_ltree);
/* The static literal tree. Since the bit lengths are imposed, there is no
 * need for the L_CODES extra codes used during heap construction. However
 * The codes 286 and 287 are needed to build a canonical tree (see _tr_init
 * below).
 */

var static_dtree  = new Array(D_CODES * 2);
zero(static_dtree);
/* The static distance tree. (Actually a trivial tree since all codes use
 * 5 bits.)
 */

var _dist_code    = new Array(DIST_CODE_LEN);
zero(_dist_code);
/* Distance codes. The first 256 values correspond to the distances
 * 3 .. 258, the last 256 values correspond to the top 8 bits of
 * the 15 bit distances.
 */

var _length_code  = new Array(MAX_MATCH - MIN_MATCH + 1);
zero(_length_code);
/* length code for each normalized match length (0 == MIN_MATCH) */

var base_length   = new Array(LENGTH_CODES);
zero(base_length);
/* First normalized length for each code (0 = MIN_MATCH) */

var base_dist     = new Array(D_CODES);
zero(base_dist);
/* First normalized distance for each code (0 = distance of 1) */


function StaticTreeDesc(static_tree, extra_bits, extra_base, elems, max_length) {

  this.static_tree  = static_tree;  /* static tree or NULL */
  this.extra_bits   = extra_bits;   /* extra bits for each code or NULL */
  this.extra_base   = extra_base;   /* base index for extra_bits */
  this.elems        = elems;        /* max number of elements in the tree */
  this.max_length   = max_length;   /* max bit length for the codes */

  // show if `static_tree` has data or dummy - needed for monomorphic objects
  this.has_stree    = static_tree && static_tree.length;
}


var static_l_desc;
var static_d_desc;
var static_bl_desc;


function TreeDesc(dyn_tree, stat_desc) {
  this.dyn_tree = dyn_tree;     /* the dynamic tree */
  this.max_code = 0;            /* largest code with non zero frequency */
  this.stat_desc = stat_desc;   /* the corresponding static tree */
}



function d_code(dist) {
  return dist < 256 ? _dist_code[dist] : _dist_code[256 + (dist >>> 7)];
}


/* ===========================================================================
 * Output a short LSB first on the stream.
 * IN assertion: there is enough room in pendingBuf.
 */
function put_short(s, w) {
//    put_byte(s, (uch)((w) & 0xff));
//    put_byte(s, (uch)((ush)(w) >> 8));
  s.pending_buf[s.pending++] = (w) & 0xff;
  s.pending_buf[s.pending++] = (w >>> 8) & 0xff;
}


/* ===========================================================================
 * Send a value on a given number of bits.
 * IN assertion: length <= 16 and value fits in length bits.
 */
function send_bits(s, value, length) {
  if (s.bi_valid > (Buf_size - length)) {
    s.bi_buf |= (value << s.bi_valid) & 0xffff;
    put_short(s, s.bi_buf);
    s.bi_buf = value >> (Buf_size - s.bi_valid);
    s.bi_valid += length - Buf_size;
  } else {
    s.bi_buf |= (value << s.bi_valid) & 0xffff;
    s.bi_valid += length;
  }
}


function send_code(s, c, tree) {
  send_bits(s, tree[c * 2]/*.Code*/, tree[c * 2 + 1]/*.Len*/);
}


/* ===========================================================================
 * Reverse the first len bits of a code, using straightforward code (a faster
 * method would use a table)
 * IN assertion: 1 <= len <= 15
 */
function bi_reverse(code, len) {
  var res = 0;
  do {
    res |= code & 1;
    code >>>= 1;
    res <<= 1;
  } while (--len > 0);
  return res >>> 1;
}


/* ===========================================================================
 * Flush the bit buffer, keeping at most 7 bits in it.
 */
function bi_flush(s) {
  if (s.bi_valid === 16) {
    put_short(s, s.bi_buf);
    s.bi_buf = 0;
    s.bi_valid = 0;

  } else if (s.bi_valid >= 8) {
    s.pending_buf[s.pending++] = s.bi_buf & 0xff;
    s.bi_buf >>= 8;
    s.bi_valid -= 8;
  }
}


/* ===========================================================================
 * Compute the optimal bit lengths for a tree and update the total bit length
 * for the current block.
 * IN assertion: the fields freq and dad are set, heap[heap_max] and
 *    above are the tree nodes sorted by increasing frequency.
 * OUT assertions: the field len is set to the optimal bit length, the
 *     array bl_count contains the frequencies for each bit length.
 *     The length opt_len is updated; static_len is also updated if stree is
 *     not null.
 */
function gen_bitlen(s, desc)
//    deflate_state *s;
//    tree_desc *desc;    /* the tree descriptor */
{
  var tree            = desc.dyn_tree;
  var max_code        = desc.max_code;
  var stree           = desc.stat_desc.static_tree;
  var has_stree       = desc.stat_desc.has_stree;
  var extra           = desc.stat_desc.extra_bits;
  var base            = desc.stat_desc.extra_base;
  var max_length      = desc.stat_desc.max_length;
  var h;              /* heap index */
  var n, m;           /* iterate over the tree elements */
  var bits;           /* bit length */
  var xbits;          /* extra bits */
  var f;              /* frequency */
  var overflow = 0;   /* number of elements with bit length too large */

  for (bits = 0; bits <= MAX_BITS; bits++) {
    s.bl_count[bits] = 0;
  }

  /* In a first pass, compute the optimal bit lengths (which may
   * overflow in the case of the bit length tree).
   */
  tree[s.heap[s.heap_max] * 2 + 1]/*.Len*/ = 0; /* root of the heap */

  for (h = s.heap_max + 1; h < HEAP_SIZE; h++) {
    n = s.heap[h];
    bits = tree[tree[n * 2 + 1]/*.Dad*/ * 2 + 1]/*.Len*/ + 1;
    if (bits > max_length) {
      bits = max_length;
      overflow++;
    }
    tree[n * 2 + 1]/*.Len*/ = bits;
    /* We overwrite tree[n].Dad which is no longer needed */

    if (n > max_code) { continue; } /* not a leaf node */

    s.bl_count[bits]++;
    xbits = 0;
    if (n >= base) {
      xbits = extra[n - base];
    }
    f = tree[n * 2]/*.Freq*/;
    s.opt_len += f * (bits + xbits);
    if (has_stree) {
      s.static_len += f * (stree[n * 2 + 1]/*.Len*/ + xbits);
    }
  }
  if (overflow === 0) { return; }

  // Trace((stderr,"\nbit length overflow\n"));
  /* This happens for example on obj2 and pic of the Calgary corpus */

  /* Find the first bit length which could increase: */
  do {
    bits = max_length - 1;
    while (s.bl_count[bits] === 0) { bits--; }
    s.bl_count[bits]--;      /* move one leaf down the tree */
    s.bl_count[bits + 1] += 2; /* move one overflow item as its brother */
    s.bl_count[max_length]--;
    /* The brother of the overflow item also moves one step up,
     * but this does not affect bl_count[max_length]
     */
    overflow -= 2;
  } while (overflow > 0);

  /* Now recompute all bit lengths, scanning in increasing frequency.
   * h is still equal to HEAP_SIZE. (It is simpler to reconstruct all
   * lengths instead of fixing only the wrong ones. This idea is taken
   * from 'ar' written by Haruhiko Okumura.)
   */
  for (bits = max_length; bits !== 0; bits--) {
    n = s.bl_count[bits];
    while (n !== 0) {
      m = s.heap[--h];
      if (m > max_code) { continue; }
      if (tree[m * 2 + 1]/*.Len*/ !== bits) {
        // Trace((stderr,"code %d bits %d->%d\n", m, tree[m].Len, bits));
        s.opt_len += (bits - tree[m * 2 + 1]/*.Len*/) * tree[m * 2]/*.Freq*/;
        tree[m * 2 + 1]/*.Len*/ = bits;
      }
      n--;
    }
  }
}


/* ===========================================================================
 * Generate the codes for a given tree and bit counts (which need not be
 * optimal).
 * IN assertion: the array bl_count contains the bit length statistics for
 * the given tree and the field len is set for all tree elements.
 * OUT assertion: the field code is set for all tree elements of non
 *     zero code length.
 */
function gen_codes(tree, max_code, bl_count)
//    ct_data *tree;             /* the tree to decorate */
//    int max_code;              /* largest code with non zero frequency */
//    ushf *bl_count;            /* number of codes at each bit length */
{
  var next_code = new Array(MAX_BITS + 1); /* next code value for each bit length */
  var code = 0;              /* running code value */
  var bits;                  /* bit index */
  var n;                     /* code index */

  /* The distribution counts are first used to generate the code values
   * without bit reversal.
   */
  for (bits = 1; bits <= MAX_BITS; bits++) {
    next_code[bits] = code = (code + bl_count[bits - 1]) << 1;
  }
  /* Check that the bit counts in bl_count are consistent. The last code
   * must be all ones.
   */
  //Assert (code + bl_count[MAX_BITS]-1 == (1<<MAX_BITS)-1,
  //        "inconsistent bit counts");
  //Tracev((stderr,"\ngen_codes: max_code %d ", max_code));

  for (n = 0;  n <= max_code; n++) {
    var len = tree[n * 2 + 1]/*.Len*/;
    if (len === 0) { continue; }
    /* Now reverse the bits */
    tree[n * 2]/*.Code*/ = bi_reverse(next_code[len]++, len);

    //Tracecv(tree != static_ltree, (stderr,"\nn %3d %c l %2d c %4x (%x) ",
    //     n, (isgraph(n) ? n : ' '), len, tree[n].Code, next_code[len]-1));
  }
}


/* ===========================================================================
 * Initialize the various 'constant' tables.
 */
function tr_static_init() {
  var n;        /* iterates over tree elements */
  var bits;     /* bit counter */
  var length;   /* length value */
  var code;     /* code value */
  var dist;     /* distance index */
  var bl_count = new Array(MAX_BITS + 1);
  /* number of codes at each bit length for an optimal tree */

  // do check in _tr_init()
  //if (static_init_done) return;

  /* For some embedded targets, global variables are not initialized: */
/*#ifdef NO_INIT_GLOBAL_POINTERS
  static_l_desc.static_tree = static_ltree;
  static_l_desc.extra_bits = extra_lbits;
  static_d_desc.static_tree = static_dtree;
  static_d_desc.extra_bits = extra_dbits;
  static_bl_desc.extra_bits = extra_blbits;
#endif*/

  /* Initialize the mapping length (0..255) -> length code (0..28) */
  length = 0;
  for (code = 0; code < LENGTH_CODES - 1; code++) {
    base_length[code] = length;
    for (n = 0; n < (1 << extra_lbits[code]); n++) {
      _length_code[length++] = code;
    }
  }
  //Assert (length == 256, "tr_static_init: length != 256");
  /* Note that the length 255 (match length 258) can be represented
   * in two different ways: code 284 + 5 bits or code 285, so we
   * overwrite length_code[255] to use the best encoding:
   */
  _length_code[length - 1] = code;

  /* Initialize the mapping dist (0..32K) -> dist code (0..29) */
  dist = 0;
  for (code = 0; code < 16; code++) {
    base_dist[code] = dist;
    for (n = 0; n < (1 << extra_dbits[code]); n++) {
      _dist_code[dist++] = code;
    }
  }
  //Assert (dist == 256, "tr_static_init: dist != 256");
  dist >>= 7; /* from now on, all distances are divided by 128 */
  for (; code < D_CODES; code++) {
    base_dist[code] = dist << 7;
    for (n = 0; n < (1 << (extra_dbits[code] - 7)); n++) {
      _dist_code[256 + dist++] = code;
    }
  }
  //Assert (dist == 256, "tr_static_init: 256+dist != 512");

  /* Construct the codes of the static literal tree */
  for (bits = 0; bits <= MAX_BITS; bits++) {
    bl_count[bits] = 0;
  }

  n = 0;
  while (n <= 143) {
    static_ltree[n * 2 + 1]/*.Len*/ = 8;
    n++;
    bl_count[8]++;
  }
  while (n <= 255) {
    static_ltree[n * 2 + 1]/*.Len*/ = 9;
    n++;
    bl_count[9]++;
  }
  while (n <= 279) {
    static_ltree[n * 2 + 1]/*.Len*/ = 7;
    n++;
    bl_count[7]++;
  }
  while (n <= 287) {
    static_ltree[n * 2 + 1]/*.Len*/ = 8;
    n++;
    bl_count[8]++;
  }
  /* Codes 286 and 287 do not exist, but we must include them in the
   * tree construction to get a canonical Huffman tree (longest code
   * all ones)
   */
  gen_codes(static_ltree, L_CODES + 1, bl_count);

  /* The static distance tree is trivial: */
  for (n = 0; n < D_CODES; n++) {
    static_dtree[n * 2 + 1]/*.Len*/ = 5;
    static_dtree[n * 2]/*.Code*/ = bi_reverse(n, 5);
  }

  // Now data ready and we can init static trees
  static_l_desc = new StaticTreeDesc(static_ltree, extra_lbits, LITERALS + 1, L_CODES, MAX_BITS);
  static_d_desc = new StaticTreeDesc(static_dtree, extra_dbits, 0,          D_CODES, MAX_BITS);
  static_bl_desc = new StaticTreeDesc(new Array(0), extra_blbits, 0,         BL_CODES, MAX_BL_BITS);

  //static_init_done = true;
}


/* ===========================================================================
 * Initialize a new block.
 */
function init_block(s) {
  var n; /* iterates over tree elements */

  /* Initialize the trees. */
  for (n = 0; n < L_CODES;  n++) { s.dyn_ltree[n * 2]/*.Freq*/ = 0; }
  for (n = 0; n < D_CODES;  n++) { s.dyn_dtree[n * 2]/*.Freq*/ = 0; }
  for (n = 0; n < BL_CODES; n++) { s.bl_tree[n * 2]/*.Freq*/ = 0; }

  s.dyn_ltree[END_BLOCK * 2]/*.Freq*/ = 1;
  s.opt_len = s.static_len = 0;
  s.last_lit = s.matches = 0;
}


/* ===========================================================================
 * Flush the bit buffer and align the output on a byte boundary
 */
function bi_windup(s)
{
  if (s.bi_valid > 8) {
    put_short(s, s.bi_buf);
  } else if (s.bi_valid > 0) {
    //put_byte(s, (Byte)s->bi_buf);
    s.pending_buf[s.pending++] = s.bi_buf;
  }
  s.bi_buf = 0;
  s.bi_valid = 0;
}

/* ===========================================================================
 * Copy a stored block, storing first the length and its
 * one's complement if requested.
 */
function copy_block(s, buf, len, header)
//DeflateState *s;
//charf    *buf;    /* the input data */
//unsigned len;     /* its length */
//int      header;  /* true if block header must be written */
{
  bi_windup(s);        /* align on byte boundary */

  if (header) {
    put_short(s, len);
    put_short(s, ~len);
  }
//  while (len--) {
//    put_byte(s, *buf++);
//  }
  utils.arraySet(s.pending_buf, s.window, buf, len, s.pending);
  s.pending += len;
}

/* ===========================================================================
 * Compares to subtrees, using the tree depth as tie breaker when
 * the subtrees have equal frequency. This minimizes the worst case length.
 */
function smaller(tree, n, m, depth) {
  var _n2 = n * 2;
  var _m2 = m * 2;
  return (tree[_n2]/*.Freq*/ < tree[_m2]/*.Freq*/ ||
         (tree[_n2]/*.Freq*/ === tree[_m2]/*.Freq*/ && depth[n] <= depth[m]));
}

/* ===========================================================================
 * Restore the heap property by moving down the tree starting at node k,
 * exchanging a node with the smallest of its two sons if necessary, stopping
 * when the heap property is re-established (each father smaller than its
 * two sons).
 */
function pqdownheap(s, tree, k)
//    deflate_state *s;
//    ct_data *tree;  /* the tree to restore */
//    int k;               /* node to move down */
{
  var v = s.heap[k];
  var j = k << 1;  /* left son of k */
  while (j <= s.heap_len) {
    /* Set j to the smallest of the two sons: */
    if (j < s.heap_len &&
      smaller(tree, s.heap[j + 1], s.heap[j], s.depth)) {
      j++;
    }
    /* Exit if v is smaller than both sons */
    if (smaller(tree, v, s.heap[j], s.depth)) { break; }

    /* Exchange v with the smallest son */
    s.heap[k] = s.heap[j];
    k = j;

    /* And continue down the tree, setting j to the left son of k */
    j <<= 1;
  }
  s.heap[k] = v;
}


// inlined manually
// var SMALLEST = 1;

/* ===========================================================================
 * Send the block data compressed using the given Huffman trees
 */
function compress_block(s, ltree, dtree)
//    deflate_state *s;
//    const ct_data *ltree; /* literal tree */
//    const ct_data *dtree; /* distance tree */
{
  var dist;           /* distance of matched string */
  var lc;             /* match length or unmatched char (if dist == 0) */
  var lx = 0;         /* running index in l_buf */
  var code;           /* the code to send */
  var extra;          /* number of extra bits to send */

  if (s.last_lit !== 0) {
    do {
      dist = (s.pending_buf[s.d_buf + lx * 2] << 8) | (s.pending_buf[s.d_buf + lx * 2 + 1]);
      lc = s.pending_buf[s.l_buf + lx];
      lx++;

      if (dist === 0) {
        send_code(s, lc, ltree); /* send a literal byte */
        //Tracecv(isgraph(lc), (stderr," '%c' ", lc));
      } else {
        /* Here, lc is the match length - MIN_MATCH */
        code = _length_code[lc];
        send_code(s, code + LITERALS + 1, ltree); /* send the length code */
        extra = extra_lbits[code];
        if (extra !== 0) {
          lc -= base_length[code];
          send_bits(s, lc, extra);       /* send the extra length bits */
        }
        dist--; /* dist is now the match distance - 1 */
        code = d_code(dist);
        //Assert (code < D_CODES, "bad d_code");

        send_code(s, code, dtree);       /* send the distance code */
        extra = extra_dbits[code];
        if (extra !== 0) {
          dist -= base_dist[code];
          send_bits(s, dist, extra);   /* send the extra distance bits */
        }
      } /* literal or match pair ? */

      /* Check that the overlay between pending_buf and d_buf+l_buf is ok: */
      //Assert((uInt)(s->pending) < s->lit_bufsize + 2*lx,
      //       "pendingBuf overflow");

    } while (lx < s.last_lit);
  }

  send_code(s, END_BLOCK, ltree);
}


/* ===========================================================================
 * Construct one Huffman tree and assigns the code bit strings and lengths.
 * Update the total bit length for the current block.
 * IN assertion: the field freq is set for all tree elements.
 * OUT assertions: the fields len and code are set to the optimal bit length
 *     and corresponding code. The length opt_len is updated; static_len is
 *     also updated if stree is not null. The field max_code is set.
 */
function build_tree(s, desc)
//    deflate_state *s;
//    tree_desc *desc; /* the tree descriptor */
{
  var tree     = desc.dyn_tree;
  var stree    = desc.stat_desc.static_tree;
  var has_stree = desc.stat_desc.has_stree;
  var elems    = desc.stat_desc.elems;
  var n, m;          /* iterate over heap elements */
  var max_code = -1; /* largest code with non zero frequency */
  var node;          /* new node being created */

  /* Construct the initial heap, with least frequent element in
   * heap[SMALLEST]. The sons of heap[n] are heap[2*n] and heap[2*n+1].
   * heap[0] is not used.
   */
  s.heap_len = 0;
  s.heap_max = HEAP_SIZE;

  for (n = 0; n < elems; n++) {
    if (tree[n * 2]/*.Freq*/ !== 0) {
      s.heap[++s.heap_len] = max_code = n;
      s.depth[n] = 0;

    } else {
      tree[n * 2 + 1]/*.Len*/ = 0;
    }
  }

  /* The pkzip format requires that at least one distance code exists,
   * and that at least one bit should be sent even if there is only one
   * possible code. So to avoid special checks later on we force at least
   * two codes of non zero frequency.
   */
  while (s.heap_len < 2) {
    node = s.heap[++s.heap_len] = (max_code < 2 ? ++max_code : 0);
    tree[node * 2]/*.Freq*/ = 1;
    s.depth[node] = 0;
    s.opt_len--;

    if (has_stree) {
      s.static_len -= stree[node * 2 + 1]/*.Len*/;
    }
    /* node is 0 or 1 so it does not have extra bits */
  }
  desc.max_code = max_code;

  /* The elements heap[heap_len/2+1 .. heap_len] are leaves of the tree,
   * establish sub-heaps of increasing lengths:
   */
  for (n = (s.heap_len >> 1/*int /2*/); n >= 1; n--) { pqdownheap(s, tree, n); }

  /* Construct the Huffman tree by repeatedly combining the least two
   * frequent nodes.
   */
  node = elems;              /* next internal node of the tree */
  do {
    //pqremove(s, tree, n);  /* n = node of least frequency */
    /*** pqremove ***/
    n = s.heap[1/*SMALLEST*/];
    s.heap[1/*SMALLEST*/] = s.heap[s.heap_len--];
    pqdownheap(s, tree, 1/*SMALLEST*/);
    /***/

    m = s.heap[1/*SMALLEST*/]; /* m = node of next least frequency */

    s.heap[--s.heap_max] = n; /* keep the nodes sorted by frequency */
    s.heap[--s.heap_max] = m;

    /* Create a new node father of n and m */
    tree[node * 2]/*.Freq*/ = tree[n * 2]/*.Freq*/ + tree[m * 2]/*.Freq*/;
    s.depth[node] = (s.depth[n] >= s.depth[m] ? s.depth[n] : s.depth[m]) + 1;
    tree[n * 2 + 1]/*.Dad*/ = tree[m * 2 + 1]/*.Dad*/ = node;

    /* and insert the new node in the heap */
    s.heap[1/*SMALLEST*/] = node++;
    pqdownheap(s, tree, 1/*SMALLEST*/);

  } while (s.heap_len >= 2);

  s.heap[--s.heap_max] = s.heap[1/*SMALLEST*/];

  /* At this point, the fields freq and dad are set. We can now
   * generate the bit lengths.
   */
  gen_bitlen(s, desc);

  /* The field len is now set, we can generate the bit codes */
  gen_codes(tree, max_code, s.bl_count);
}


/* ===========================================================================
 * Scan a literal or distance tree to determine the frequencies of the codes
 * in the bit length tree.
 */
function scan_tree(s, tree, max_code)
//    deflate_state *s;
//    ct_data *tree;   /* the tree to be scanned */
//    int max_code;    /* and its largest code of non zero frequency */
{
  var n;                     /* iterates over all tree elements */
  var prevlen = -1;          /* last emitted length */
  var curlen;                /* length of current code */

  var nextlen = tree[0 * 2 + 1]/*.Len*/; /* length of next code */

  var count = 0;             /* repeat count of the current code */
  var max_count = 7;         /* max repeat count */
  var min_count = 4;         /* min repeat count */

  if (nextlen === 0) {
    max_count = 138;
    min_count = 3;
  }
  tree[(max_code + 1) * 2 + 1]/*.Len*/ = 0xffff; /* guard */

  for (n = 0; n <= max_code; n++) {
    curlen = nextlen;
    nextlen = tree[(n + 1) * 2 + 1]/*.Len*/;

    if (++count < max_count && curlen === nextlen) {
      continue;

    } else if (count < min_count) {
      s.bl_tree[curlen * 2]/*.Freq*/ += count;

    } else if (curlen !== 0) {

      if (curlen !== prevlen) { s.bl_tree[curlen * 2]/*.Freq*/++; }
      s.bl_tree[REP_3_6 * 2]/*.Freq*/++;

    } else if (count <= 10) {
      s.bl_tree[REPZ_3_10 * 2]/*.Freq*/++;

    } else {
      s.bl_tree[REPZ_11_138 * 2]/*.Freq*/++;
    }

    count = 0;
    prevlen = curlen;

    if (nextlen === 0) {
      max_count = 138;
      min_count = 3;

    } else if (curlen === nextlen) {
      max_count = 6;
      min_count = 3;

    } else {
      max_count = 7;
      min_count = 4;
    }
  }
}


/* ===========================================================================
 * Send a literal or distance tree in compressed form, using the codes in
 * bl_tree.
 */
function send_tree(s, tree, max_code)
//    deflate_state *s;
//    ct_data *tree; /* the tree to be scanned */
//    int max_code;       /* and its largest code of non zero frequency */
{
  var n;                     /* iterates over all tree elements */
  var prevlen = -1;          /* last emitted length */
  var curlen;                /* length of current code */

  var nextlen = tree[0 * 2 + 1]/*.Len*/; /* length of next code */

  var count = 0;             /* repeat count of the current code */
  var max_count = 7;         /* max repeat count */
  var min_count = 4;         /* min repeat count */

  /* tree[max_code+1].Len = -1; */  /* guard already set */
  if (nextlen === 0) {
    max_count = 138;
    min_count = 3;
  }

  for (n = 0; n <= max_code; n++) {
    curlen = nextlen;
    nextlen = tree[(n + 1) * 2 + 1]/*.Len*/;

    if (++count < max_count && curlen === nextlen) {
      continue;

    } else if (count < min_count) {
      do { send_code(s, curlen, s.bl_tree); } while (--count !== 0);

    } else if (curlen !== 0) {
      if (curlen !== prevlen) {
        send_code(s, curlen, s.bl_tree);
        count--;
      }
      //Assert(count >= 3 && count <= 6, " 3_6?");
      send_code(s, REP_3_6, s.bl_tree);
      send_bits(s, count - 3, 2);

    } else if (count <= 10) {
      send_code(s, REPZ_3_10, s.bl_tree);
      send_bits(s, count - 3, 3);

    } else {
      send_code(s, REPZ_11_138, s.bl_tree);
      send_bits(s, count - 11, 7);
    }

    count = 0;
    prevlen = curlen;
    if (nextlen === 0) {
      max_count = 138;
      min_count = 3;

    } else if (curlen === nextlen) {
      max_count = 6;
      min_count = 3;

    } else {
      max_count = 7;
      min_count = 4;
    }
  }
}


/* ===========================================================================
 * Construct the Huffman tree for the bit lengths and return the index in
 * bl_order of the last bit length code to send.
 */
function build_bl_tree(s) {
  var max_blindex;  /* index of last bit length code of non zero freq */

  /* Determine the bit length frequencies for literal and distance trees */
  scan_tree(s, s.dyn_ltree, s.l_desc.max_code);
  scan_tree(s, s.dyn_dtree, s.d_desc.max_code);

  /* Build the bit length tree: */
  build_tree(s, s.bl_desc);
  /* opt_len now includes the length of the tree representations, except
   * the lengths of the bit lengths codes and the 5+5+4 bits for the counts.
   */

  /* Determine the number of bit length codes to send. The pkzip format
   * requires that at least 4 bit length codes be sent. (appnote.txt says
   * 3 but the actual value used is 4.)
   */
  for (max_blindex = BL_CODES - 1; max_blindex >= 3; max_blindex--) {
    if (s.bl_tree[bl_order[max_blindex] * 2 + 1]/*.Len*/ !== 0) {
      break;
    }
  }
  /* Update opt_len to include the bit length tree and counts */
  s.opt_len += 3 * (max_blindex + 1) + 5 + 5 + 4;
  //Tracev((stderr, "\ndyn trees: dyn %ld, stat %ld",
  //        s->opt_len, s->static_len));

  return max_blindex;
}


/* ===========================================================================
 * Send the header for a block using dynamic Huffman trees: the counts, the
 * lengths of the bit length codes, the literal tree and the distance tree.
 * IN assertion: lcodes >= 257, dcodes >= 1, blcodes >= 4.
 */
function send_all_trees(s, lcodes, dcodes, blcodes)
//    deflate_state *s;
//    int lcodes, dcodes, blcodes; /* number of codes for each tree */
{
  var rank;                    /* index in bl_order */

  //Assert (lcodes >= 257 && dcodes >= 1 && blcodes >= 4, "not enough codes");
  //Assert (lcodes <= L_CODES && dcodes <= D_CODES && blcodes <= BL_CODES,
  //        "too many codes");
  //Tracev((stderr, "\nbl counts: "));
  send_bits(s, lcodes - 257, 5); /* not +255 as stated in appnote.txt */
  send_bits(s, dcodes - 1,   5);
  send_bits(s, blcodes - 4,  4); /* not -3 as stated in appnote.txt */
  for (rank = 0; rank < blcodes; rank++) {
    //Tracev((stderr, "\nbl code %2d ", bl_order[rank]));
    send_bits(s, s.bl_tree[bl_order[rank] * 2 + 1]/*.Len*/, 3);
  }
  //Tracev((stderr, "\nbl tree: sent %ld", s->bits_sent));

  send_tree(s, s.dyn_ltree, lcodes - 1); /* literal tree */
  //Tracev((stderr, "\nlit tree: sent %ld", s->bits_sent));

  send_tree(s, s.dyn_dtree, dcodes - 1); /* distance tree */
  //Tracev((stderr, "\ndist tree: sent %ld", s->bits_sent));
}


/* ===========================================================================
 * Check if the data type is TEXT or BINARY, using the following algorithm:
 * - TEXT if the two conditions below are satisfied:
 *    a) There are no non-portable control characters belonging to the
 *       "black list" (0..6, 14..25, 28..31).
 *    b) There is at least one printable character belonging to the
 *       "white list" (9 {TAB}, 10 {LF}, 13 {CR}, 32..255).
 * - BINARY otherwise.
 * - The following partially-portable control characters form a
 *   "gray list" that is ignored in this detection algorithm:
 *   (7 {BEL}, 8 {BS}, 11 {VT}, 12 {FF}, 26 {SUB}, 27 {ESC}).
 * IN assertion: the fields Freq of dyn_ltree are set.
 */
function detect_data_type(s) {
  /* black_mask is the bit mask of black-listed bytes
   * set bits 0..6, 14..25, and 28..31
   * 0xf3ffc07f = binary 11110011111111111100000001111111
   */
  var black_mask = 0xf3ffc07f;
  var n;

  /* Check for non-textual ("black-listed") bytes. */
  for (n = 0; n <= 31; n++, black_mask >>>= 1) {
    if ((black_mask & 1) && (s.dyn_ltree[n * 2]/*.Freq*/ !== 0)) {
      return Z_BINARY;
    }
  }

  /* Check for textual ("white-listed") bytes. */
  if (s.dyn_ltree[9 * 2]/*.Freq*/ !== 0 || s.dyn_ltree[10 * 2]/*.Freq*/ !== 0 ||
      s.dyn_ltree[13 * 2]/*.Freq*/ !== 0) {
    return Z_TEXT;
  }
  for (n = 32; n < LITERALS; n++) {
    if (s.dyn_ltree[n * 2]/*.Freq*/ !== 0) {
      return Z_TEXT;
    }
  }

  /* There are no "black-listed" or "white-listed" bytes:
   * this stream either is empty or has tolerated ("gray-listed") bytes only.
   */
  return Z_BINARY;
}


var static_init_done = false;

/* ===========================================================================
 * Initialize the tree data structures for a new zlib stream.
 */
function _tr_init(s)
{

  if (!static_init_done) {
    tr_static_init();
    static_init_done = true;
  }

  s.l_desc  = new TreeDesc(s.dyn_ltree, static_l_desc);
  s.d_desc  = new TreeDesc(s.dyn_dtree, static_d_desc);
  s.bl_desc = new TreeDesc(s.bl_tree, static_bl_desc);

  s.bi_buf = 0;
  s.bi_valid = 0;

  /* Initialize the first block of the first file: */
  init_block(s);
}


/* ===========================================================================
 * Send a stored block
 */
function _tr_stored_block(s, buf, stored_len, last)
//DeflateState *s;
//charf *buf;       /* input block */
//ulg stored_len;   /* length of input block */
//int last;         /* one if this is the last block for a file */
{
  send_bits(s, (STORED_BLOCK << 1) + (last ? 1 : 0), 3);    /* send block type */
  copy_block(s, buf, stored_len, true); /* with header */
}


/* ===========================================================================
 * Send one empty static block to give enough lookahead for inflate.
 * This takes 10 bits, of which 7 may remain in the bit buffer.
 */
function _tr_align(s) {
  send_bits(s, STATIC_TREES << 1, 3);
  send_code(s, END_BLOCK, static_ltree);
  bi_flush(s);
}


/* ===========================================================================
 * Determine the best encoding for the current block: dynamic trees, static
 * trees or store, and output the encoded block to the zip file.
 */
function _tr_flush_block(s, buf, stored_len, last)
//DeflateState *s;
//charf *buf;       /* input block, or NULL if too old */
//ulg stored_len;   /* length of input block */
//int last;         /* one if this is the last block for a file */
{
  var opt_lenb, static_lenb;  /* opt_len and static_len in bytes */
  var max_blindex = 0;        /* index of last bit length code of non zero freq */

  /* Build the Huffman trees unless a stored block is forced */
  if (s.level > 0) {

    /* Check if the file is binary or text */
    if (s.strm.data_type === Z_UNKNOWN) {
      s.strm.data_type = detect_data_type(s);
    }

    /* Construct the literal and distance trees */
    build_tree(s, s.l_desc);
    // Tracev((stderr, "\nlit data: dyn %ld, stat %ld", s->opt_len,
    //        s->static_len));

    build_tree(s, s.d_desc);
    // Tracev((stderr, "\ndist data: dyn %ld, stat %ld", s->opt_len,
    //        s->static_len));
    /* At this point, opt_len and static_len are the total bit lengths of
     * the compressed block data, excluding the tree representations.
     */

    /* Build the bit length tree for the above two trees, and get the index
     * in bl_order of the last bit length code to send.
     */
    max_blindex = build_bl_tree(s);

    /* Determine the best encoding. Compute the block lengths in bytes. */
    opt_lenb = (s.opt_len + 3 + 7) >>> 3;
    static_lenb = (s.static_len + 3 + 7) >>> 3;

    // Tracev((stderr, "\nopt %lu(%lu) stat %lu(%lu) stored %lu lit %u ",
    //        opt_lenb, s->opt_len, static_lenb, s->static_len, stored_len,
    //        s->last_lit));

    if (static_lenb <= opt_lenb) { opt_lenb = static_lenb; }

  } else {
    // Assert(buf != (char*)0, "lost buf");
    opt_lenb = static_lenb = stored_len + 5; /* force a stored block */
  }

  if ((stored_len + 4 <= opt_lenb) && (buf !== -1)) {
    /* 4: two words for the lengths */

    /* The test buf != NULL is only necessary if LIT_BUFSIZE > WSIZE.
     * Otherwise we can't have processed more than WSIZE input bytes since
     * the last block flush, because compression would have been
     * successful. If LIT_BUFSIZE <= WSIZE, it is never too late to
     * transform a block into a stored block.
     */
    _tr_stored_block(s, buf, stored_len, last);

  } else if (s.strategy === Z_FIXED || static_lenb === opt_lenb) {

    send_bits(s, (STATIC_TREES << 1) + (last ? 1 : 0), 3);
    compress_block(s, static_ltree, static_dtree);

  } else {
    send_bits(s, (DYN_TREES << 1) + (last ? 1 : 0), 3);
    send_all_trees(s, s.l_desc.max_code + 1, s.d_desc.max_code + 1, max_blindex + 1);
    compress_block(s, s.dyn_ltree, s.dyn_dtree);
  }
  // Assert (s->compressed_len == s->bits_sent, "bad compressed size");
  /* The above check is made mod 2^32, for files larger than 512 MB
   * and uLong implemented on 32 bits.
   */
  init_block(s);

  if (last) {
    bi_windup(s);
  }
  // Tracev((stderr,"\ncomprlen %lu(%lu) ", s->compressed_len>>3,
  //       s->compressed_len-7*last));
}

/* ===========================================================================
 * Save the match info and tally the frequency counts. Return true if
 * the current block must be flushed.
 */
function _tr_tally(s, dist, lc)
//    deflate_state *s;
//    unsigned dist;  /* distance of matched string */
//    unsigned lc;    /* match length-MIN_MATCH or unmatched char (if dist==0) */
{
  //var out_length, in_length, dcode;

  s.pending_buf[s.d_buf + s.last_lit * 2]     = (dist >>> 8) & 0xff;
  s.pending_buf[s.d_buf + s.last_lit * 2 + 1] = dist & 0xff;

  s.pending_buf[s.l_buf + s.last_lit] = lc & 0xff;
  s.last_lit++;

  if (dist === 0) {
    /* lc is the unmatched char */
    s.dyn_ltree[lc * 2]/*.Freq*/++;
  } else {
    s.matches++;
    /* Here, lc is the match length - MIN_MATCH */
    dist--;             /* dist = match distance - 1 */
    //Assert((ush)dist < (ush)MAX_DIST(s) &&
    //       (ush)lc <= (ush)(MAX_MATCH-MIN_MATCH) &&
    //       (ush)d_code(dist) < (ush)D_CODES,  "_tr_tally: bad match");

    s.dyn_ltree[(_length_code[lc] + LITERALS + 1) * 2]/*.Freq*/++;
    s.dyn_dtree[d_code(dist) * 2]/*.Freq*/++;
  }

// (!) This block is disabled in zlib defailts,
// don't enable it for binary compatibility

//#ifdef TRUNCATE_BLOCK
//  /* Try to guess if it is profitable to stop the current block here */
//  if ((s.last_lit & 0x1fff) === 0 && s.level > 2) {
//    /* Compute an upper bound for the compressed length */
//    out_length = s.last_lit*8;
//    in_length = s.strstart - s.block_start;
//
//    for (dcode = 0; dcode < D_CODES; dcode++) {
//      out_length += s.dyn_dtree[dcode*2]/*.Freq*/ * (5 + extra_dbits[dcode]);
//    }
//    out_length >>>= 3;
//    //Tracev((stderr,"\nlast_lit %u, in %ld, out ~%ld(%ld%%) ",
//    //       s->last_lit, in_length, out_length,
//    //       100L - out_length*100L/in_length));
//    if (s.matches < (s.last_lit>>1)/*int /2*/ && out_length < (in_length>>1)/*int /2*/) {
//      return true;
//    }
//  }
//#endif

  return (s.last_lit === s.lit_bufsize - 1);
  /* We avoid equality with lit_bufsize because of wraparound at 64K
   * on 16 bit machines and because stored blocks are restricted to
   * 64K-1 bytes.
   */
}

exports._tr_init  = _tr_init;
exports._tr_stored_block = _tr_stored_block;
exports._tr_flush_block  = _tr_flush_block;
exports._tr_tally = _tr_tally;
exports._tr_align = _tr_align;


/***/ }),
/* 335 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


// Note: adler32 takes 12% for level 0 and 2% for level 6.
// It doesn't worth to make additional optimizationa as in original.
// Small size is preferable.

function adler32(adler, buf, len, pos) {
  var s1 = (adler & 0xffff) |0,
      s2 = ((adler >>> 16) & 0xffff) |0,
      n = 0;

  while (len !== 0) {
    // Set limit ~ twice less than 5552, to keep
    // s2 in 31-bits, because we force signed ints.
    // in other case %= will fail.
    n = len > 2000 ? 2000 : len;
    len -= n;

    do {
      s1 = (s1 + buf[pos++]) |0;
      s2 = (s2 + s1) |0;
    } while (--n);

    s1 %= 65521;
    s2 %= 65521;
  }

  return (s1 | (s2 << 16)) |0;
}


module.exports = adler32;


/***/ }),
/* 336 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


// Note: we can't get significant speed boost here.
// So write code to minimize size - no pregenerated tables
// and array tools dependencies.


// Use ordinary array, since untyped makes no boost here
function makeTable() {
  var c, table = [];

  for (var n = 0; n < 256; n++) {
    c = n;
    for (var k = 0; k < 8; k++) {
      c = ((c & 1) ? (0xEDB88320 ^ (c >>> 1)) : (c >>> 1));
    }
    table[n] = c;
  }

  return table;
}

// Create table on load. Just 255 signed longs. Not a problem.
var crcTable = makeTable();


function crc32(crc, buf, len, pos) {
  var t = crcTable,
      end = pos + len;

  crc ^= -1;

  for (var i = pos; i < end; i++) {
    crc = (crc >>> 8) ^ t[(crc ^ buf[i]) & 0xFF];
  }

  return (crc ^ (-1)); // >>> 0;
}


module.exports = crc32;


/***/ }),
/* 337 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// String encode/decode helpers



var utils = __webpack_require__(14);


// Quick check if we can use fast array to bin string conversion
//
// - apply(Array) can fail on Android 2.2
// - apply(Uint8Array) can fail on iOS 5.1 Safary
//
var STR_APPLY_OK = true;
var STR_APPLY_UIA_OK = true;

try { String.fromCharCode.apply(null, [ 0 ]); } catch (__) { STR_APPLY_OK = false; }
try { String.fromCharCode.apply(null, new Uint8Array(1)); } catch (__) { STR_APPLY_UIA_OK = false; }


// Table with utf8 lengths (calculated by first byte of sequence)
// Note, that 5 & 6-byte values and some 4-byte values can not be represented in JS,
// because max possible codepoint is 0x10ffff
var _utf8len = new utils.Buf8(256);
for (var q = 0; q < 256; q++) {
  _utf8len[q] = (q >= 252 ? 6 : q >= 248 ? 5 : q >= 240 ? 4 : q >= 224 ? 3 : q >= 192 ? 2 : 1);
}
_utf8len[254] = _utf8len[254] = 1; // Invalid sequence start


// convert string to array (typed, when possible)
exports.string2buf = function (str) {
  var buf, c, c2, m_pos, i, str_len = str.length, buf_len = 0;

  // count binary size
  for (m_pos = 0; m_pos < str_len; m_pos++) {
    c = str.charCodeAt(m_pos);
    if ((c & 0xfc00) === 0xd800 && (m_pos + 1 < str_len)) {
      c2 = str.charCodeAt(m_pos + 1);
      if ((c2 & 0xfc00) === 0xdc00) {
        c = 0x10000 + ((c - 0xd800) << 10) + (c2 - 0xdc00);
        m_pos++;
      }
    }
    buf_len += c < 0x80 ? 1 : c < 0x800 ? 2 : c < 0x10000 ? 3 : 4;
  }

  // allocate buffer
  buf = new utils.Buf8(buf_len);

  // convert
  for (i = 0, m_pos = 0; i < buf_len; m_pos++) {
    c = str.charCodeAt(m_pos);
    if ((c & 0xfc00) === 0xd800 && (m_pos + 1 < str_len)) {
      c2 = str.charCodeAt(m_pos + 1);
      if ((c2 & 0xfc00) === 0xdc00) {
        c = 0x10000 + ((c - 0xd800) << 10) + (c2 - 0xdc00);
        m_pos++;
      }
    }
    if (c < 0x80) {
      /* one byte */
      buf[i++] = c;
    } else if (c < 0x800) {
      /* two bytes */
      buf[i++] = 0xC0 | (c >>> 6);
      buf[i++] = 0x80 | (c & 0x3f);
    } else if (c < 0x10000) {
      /* three bytes */
      buf[i++] = 0xE0 | (c >>> 12);
      buf[i++] = 0x80 | (c >>> 6 & 0x3f);
      buf[i++] = 0x80 | (c & 0x3f);
    } else {
      /* four bytes */
      buf[i++] = 0xf0 | (c >>> 18);
      buf[i++] = 0x80 | (c >>> 12 & 0x3f);
      buf[i++] = 0x80 | (c >>> 6 & 0x3f);
      buf[i++] = 0x80 | (c & 0x3f);
    }
  }

  return buf;
};

// Helper (used in 2 places)
function buf2binstring(buf, len) {
  // use fallback for big arrays to avoid stack overflow
  if (len < 65537) {
    if ((buf.subarray && STR_APPLY_UIA_OK) || (!buf.subarray && STR_APPLY_OK)) {
      return String.fromCharCode.apply(null, utils.shrinkBuf(buf, len));
    }
  }

  var result = '';
  for (var i = 0; i < len; i++) {
    result += String.fromCharCode(buf[i]);
  }
  return result;
}


// Convert byte array to binary string
exports.buf2binstring = function (buf) {
  return buf2binstring(buf, buf.length);
};


// Convert binary string (typed, when possible)
exports.binstring2buf = function (str) {
  var buf = new utils.Buf8(str.length);
  for (var i = 0, len = buf.length; i < len; i++) {
    buf[i] = str.charCodeAt(i);
  }
  return buf;
};


// convert array to string
exports.buf2string = function (buf, max) {
  var i, out, c, c_len;
  var len = max || buf.length;

  // Reserve max possible length (2 words per char)
  // NB: by unknown reasons, Array is significantly faster for
  //     String.fromCharCode.apply than Uint16Array.
  var utf16buf = new Array(len * 2);

  for (out = 0, i = 0; i < len;) {
    c = buf[i++];
    // quick process ascii
    if (c < 0x80) { utf16buf[out++] = c; continue; }

    c_len = _utf8len[c];
    // skip 5 & 6 byte codes
    if (c_len > 4) { utf16buf[out++] = 0xfffd; i += c_len - 1; continue; }

    // apply mask on first byte
    c &= c_len === 2 ? 0x1f : c_len === 3 ? 0x0f : 0x07;
    // join the rest
    while (c_len > 1 && i < len) {
      c = (c << 6) | (buf[i++] & 0x3f);
      c_len--;
    }

    // terminated by end of string?
    if (c_len > 1) { utf16buf[out++] = 0xfffd; continue; }

    if (c < 0x10000) {
      utf16buf[out++] = c;
    } else {
      c -= 0x10000;
      utf16buf[out++] = 0xd800 | ((c >> 10) & 0x3ff);
      utf16buf[out++] = 0xdc00 | (c & 0x3ff);
    }
  }

  return buf2binstring(utf16buf, out);
};


// Calculate max possible position in utf8 buffer,
// that will not break sequence. If that's not possible
// - (very small limits) return max size as is.
//
// buf[] - utf8 bytes array
// max   - length limit (mandatory);
exports.utf8border = function (buf, max) {
  var pos;

  max = max || buf.length;
  if (max > buf.length) { max = buf.length; }

  // go back from last position, until start of sequence found
  pos = max - 1;
  while (pos >= 0 && (buf[pos] & 0xC0) === 0x80) { pos--; }

  // Fuckup - very small and broken sequence,
  // return max, because we should return something anyway.
  if (pos < 0) { return max; }

  // If we came to start of buffer - that means vuffer is too small,
  // return max too.
  if (pos === 0) { return max; }

  return (pos + _utf8len[buf[pos]] > max) ? pos : max;
};


/***/ }),
/* 338 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";



function ZStream() {
  /* next input byte */
  this.input = null; // JS specific, because we have no pointers
  this.next_in = 0;
  /* number of bytes available at input */
  this.avail_in = 0;
  /* total number of input bytes read so far */
  this.total_in = 0;
  /* next output byte should be put there */
  this.output = null; // JS specific, because we have no pointers
  this.next_out = 0;
  /* remaining free space at output */
  this.avail_out = 0;
  /* total number of bytes output so far */
  this.total_out = 0;
  /* last error message, NULL if no error */
  this.msg = ''/*Z_NULL*/;
  /* not visible by applications */
  this.state = null;
  /* best guess about the data type: binary or text */
  this.data_type = 2/*Z_UNKNOWN*/;
  /* adler32 value of the uncompressed data */
  this.adler = 0;
}

module.exports = ZStream;


/***/ }),
/* 339 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


// Encode code taken from the PlantUML website:
// http://plantuml.sourceforge.net/codejavascript2.html

// It is described as being "a transformation close to base64"
// The code has been slightly modified to pass linters

function encode6bit (b) {
  if (b < 10) {
    return String.fromCharCode(48 + b)
  }
  b -= 10
  if (b < 26) {
    return String.fromCharCode(65 + b)
  }
  b -= 26
  if (b < 26) {
    return String.fromCharCode(97 + b)
  }
  b -= 26
  if (b === 0) {
    return '-'
  }
  if (b === 1) {
    return '_'
  }
  return '?'
}

function append3bytes (b1, b2, b3) {
  var c1 = b1 >> 2
  var c2 = ((b1 & 0x3) << 4) | (b2 >> 4)
  var c3 = ((b2 & 0xF) << 2) | (b3 >> 6)
  var c4 = b3 & 0x3F
  var r = ''
  r += encode6bit(c1 & 0x3F)
  r += encode6bit(c2 & 0x3F)
  r += encode6bit(c3 & 0x3F)
  r += encode6bit(c4 & 0x3F)
  return r
}

module.exports.encode = function (data) {
  var r = ''
  for (var i = 0; i < data.length; i += 3) {
    if (i + 2 === data.length) {
      r += append3bytes(data.charCodeAt(i), data.charCodeAt(i + 1), 0)
    } else if (i + 1 === data.length) {
      r += append3bytes(data.charCodeAt(i), 0, 0)
    } else {
      r += append3bytes(data.charCodeAt(i),
                        data.charCodeAt(i + 1),
                        data.charCodeAt(i + 2))
    }
  }
  return r
}


/***/ }),
/* 340 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _jquery = __webpack_require__(1);

var _jquery2 = _interopRequireDefault(_jquery);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Viewer = __webpack_require__(21);

// for jquery
/**
 * @fileoverview entry point for viewer
 * @author NHN Ent. FE Development Lab <dl_javascript@nhnent.com>
 */
_jquery2.default.fn.tuiEditor = function () {
  var options = void 0,
      instance = void 0;

  var el = this.get(0);

  if (el) {
    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    options = args[0] || {};

    instance = _jquery2.default.data(el, 'tuiEditor');

    if (instance) {
      if (typeof options === 'string') {
        var _instance;

        return (_instance = instance)[options].apply(_instance, args.slice(1));
      }
    } else {
      options.el = el;
      instance = new Viewer(options);
      _jquery2.default.data(el, 'tuiEditor', instance);
    }
  }

  return this;
};

module.exports = Viewer;

/***/ })
/******/ ]);
});